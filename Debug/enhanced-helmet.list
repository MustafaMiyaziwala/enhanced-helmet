
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009524  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  080096c8  080096c8  000196c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b6c  08009b6c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009b6c  08009b6c  00019b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b74  08009b74  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b74  08009b74  00019b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b78  08009b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  200001f4  08009d70  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08009d70  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167d0  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b7  00000000  00000000  000369f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00039bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abe2  00000000  00000000  0003c360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c88  00000000  00000000  00056f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fbb3  00000000  00000000  00070bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011077d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b4  00000000  00000000  001107d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080096ac 	.word	0x080096ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	080096ac 	.word	0x080096ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <SELECT+0x18>)
 8000ec6:	f002 fe81 	bl	8003bcc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f001 fd24 	bl	8002918 <HAL_Delay>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40020800 	.word	0x40020800

08000ed8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2102      	movs	r1, #2
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <DESELECT+0x18>)
 8000ee2:	f002 fe73 	bl	8003bcc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f001 fd16 	bl	8002918 <HAL_Delay>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40020800 	.word	0x40020800

08000ef4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000efe:	bf00      	nop
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <SPI_TxByte+0x30>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d1f8      	bne.n	8000f00 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f0e:	1df9      	adds	r1, r7, #7
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	2201      	movs	r2, #1
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <SPI_TxByte+0x30>)
 8000f16:	f003 fcd8 	bl	80048ca <HAL_SPI_Transmit>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200002b8 	.word	0x200002b8

08000f28 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f34:	bf00      	nop
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <SPI_TxBuffer+0x30>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d1f8      	bne.n	8000f36 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f44:	887a      	ldrh	r2, [r7, #2]
 8000f46:	2364      	movs	r3, #100	; 0x64
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <SPI_TxBuffer+0x30>)
 8000f4c:	f003 fcbd 	bl	80048ca <HAL_SPI_Transmit>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200002b8 	.word	0x200002b8

08000f5c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f62:	23ff      	movs	r3, #255	; 0xff
 8000f64:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f66:	bf00      	nop
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <SPI_RxByte+0x34>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d1f8      	bne.n	8000f68 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f76:	1dba      	adds	r2, r7, #6
 8000f78:	1df9      	adds	r1, r7, #7
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <SPI_RxByte+0x34>)
 8000f82:	f003 fdde 	bl	8004b42 <HAL_SPI_TransmitReceive>

	return data;
 8000f86:	79bb      	ldrb	r3, [r7, #6]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200002b8 	.word	0x200002b8

08000f94 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000f9c:	f7ff ffde 	bl	8000f5c <SPI_RxByte>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	701a      	strb	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <SD_ReadyWait+0x30>)
 8000fb8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fbc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000fbe:	f7ff ffcd 	bl	8000f5c <SPI_RxByte>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2bff      	cmp	r3, #255	; 0xff
 8000fca:	d003      	beq.n	8000fd4 <SD_ReadyWait+0x24>
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SD_ReadyWait+0x30>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f4      	bne.n	8000fbe <SD_ReadyWait+0xe>

	return res;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000212 	.word	0x20000212

08000fe4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000fea:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000fee:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000ff0:	f7ff ff72 	bl	8000ed8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	e005      	b.n	8001006 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000ffa:	20ff      	movs	r0, #255	; 0xff
 8000ffc:	f7ff ff7a 	bl	8000ef4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	3301      	adds	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b09      	cmp	r3, #9
 800100a:	ddf6      	ble.n	8000ffa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800100c:	f7ff ff56 	bl	8000ebc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001010:	2340      	movs	r3, #64	; 0x40
 8001012:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001024:	2395      	movs	r3, #149	; 0x95
 8001026:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001028:	463b      	mov	r3, r7
 800102a:	2106      	movs	r1, #6
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff7b 	bl	8000f28 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001032:	e002      	b.n	800103a <SD_PowerOn+0x56>
	{
		cnt--;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3b01      	subs	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800103a:	f7ff ff8f 	bl	8000f5c <SPI_RxByte>
 800103e:	4603      	mov	r3, r0
 8001040:	2b01      	cmp	r3, #1
 8001042:	d002      	beq.n	800104a <SD_PowerOn+0x66>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f4      	bne.n	8001034 <SD_PowerOn+0x50>
	}

	DESELECT();
 800104a:	f7ff ff45 	bl	8000ed8 <DESELECT>
	SPI_TxByte(0XFF);
 800104e:	20ff      	movs	r0, #255	; 0xff
 8001050:	f7ff ff50 	bl	8000ef4 <SPI_TxByte>

	PowerFlag = 1;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <SD_PowerOn+0x80>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000215 	.word	0x20000215

08001068 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <SD_PowerOff+0x14>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000215 	.word	0x20000215

08001080 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <SD_CheckPower+0x14>)
 8001086:	781b      	ldrb	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000215 	.word	0x20000215

08001098 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <SD_RxDataBlock+0x58>)
 80010a4:	22c8      	movs	r2, #200	; 0xc8
 80010a6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80010a8:	f7ff ff58 	bl	8000f5c <SPI_RxByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2bff      	cmp	r3, #255	; 0xff
 80010b4:	d103      	bne.n	80010be <SD_RxDataBlock+0x26>
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <SD_RxDataBlock+0x58>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f4      	bne.n	80010a8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	2bfe      	cmp	r3, #254	; 0xfe
 80010c2:	d001      	beq.n	80010c8 <SD_RxDataBlock+0x30>
 80010c4:	2300      	movs	r3, #0
 80010c6:	e00f      	b.n	80010e8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff60 	bl	8000f94 <SPI_RxBytePtr>
	} while(len--);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	1e5a      	subs	r2, r3, #1
 80010d8:	603a      	str	r2, [r7, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f4      	bne.n	80010c8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80010de:	f7ff ff3d 	bl	8000f5c <SPI_RxByte>
	SPI_RxByte();
 80010e2:	f7ff ff3b 	bl	8000f5c <SPI_RxByte>

	return TRUE;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000210 	.word	0x20000210

080010f4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001104:	f7ff ff54 	bl	8000fb0 <SD_ReadyWait>
 8001108:	4603      	mov	r3, r0
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	d001      	beq.n	8001112 <SD_TxDataBlock+0x1e>
 800110e:	2300      	movs	r3, #0
 8001110:	e02f      	b.n	8001172 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff feed 	bl	8000ef4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2bfd      	cmp	r3, #253	; 0xfd
 800111e:	d020      	beq.n	8001162 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff feff 	bl	8000f28 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800112a:	f7ff ff17 	bl	8000f5c <SPI_RxByte>
		SPI_RxByte();
 800112e:	f7ff ff15 	bl	8000f5c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001132:	e00b      	b.n	800114c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001134:	f7ff ff12 	bl	8000f5c <SPI_RxByte>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	2b05      	cmp	r3, #5
 8001144:	d006      	beq.n	8001154 <SD_TxDataBlock+0x60>
			i++;
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	3301      	adds	r3, #1
 800114a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	2b40      	cmp	r3, #64	; 0x40
 8001150:	d9f0      	bls.n	8001134 <SD_TxDataBlock+0x40>
 8001152:	e000      	b.n	8001156 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001154:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001156:	bf00      	nop
 8001158:	f7ff ff00 	bl	8000f5c <SPI_RxByte>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0fa      	beq.n	8001158 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	2b05      	cmp	r3, #5
 800116a:	d101      	bne.n	8001170 <SD_TxDataBlock+0x7c>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	6039      	str	r1, [r7, #0]
 8001184:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001186:	f7ff ff13 	bl	8000fb0 <SD_ReadyWait>
 800118a:	4603      	mov	r3, r0
 800118c:	2bff      	cmp	r3, #255	; 0xff
 800118e:	d001      	beq.n	8001194 <SD_SendCmd+0x1a>
 8001190:	23ff      	movs	r3, #255	; 0xff
 8001192:	e042      	b.n	800121a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff feac 	bl	8000ef4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	0e1b      	lsrs	r3, r3, #24
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fea6 	bl	8000ef4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	0c1b      	lsrs	r3, r3, #16
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fea0 	bl	8000ef4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fe9a 	bl	8000ef4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fe95 	bl	8000ef4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b40      	cmp	r3, #64	; 0x40
 80011ce:	d102      	bne.n	80011d6 <SD_SendCmd+0x5c>
 80011d0:	2395      	movs	r3, #149	; 0x95
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e007      	b.n	80011e6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b48      	cmp	r3, #72	; 0x48
 80011da:	d102      	bne.n	80011e2 <SD_SendCmd+0x68>
 80011dc:	2387      	movs	r3, #135	; 0x87
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e001      	b.n	80011e6 <SD_SendCmd+0x6c>
	else crc = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fe83 	bl	8000ef4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b4c      	cmp	r3, #76	; 0x4c
 80011f2:	d101      	bne.n	80011f8 <SD_SendCmd+0x7e>
 80011f4:	f7ff feb2 	bl	8000f5c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80011f8:	230a      	movs	r3, #10
 80011fa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80011fc:	f7ff feae 	bl	8000f5c <SPI_RxByte>
 8001200:	4603      	mov	r3, r0
 8001202:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001204:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001208:	2b00      	cmp	r3, #0
 800120a:	da05      	bge.n	8001218 <SD_SendCmd+0x9e>
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	3b01      	subs	r3, #1
 8001210:	73bb      	strb	r3, [r7, #14]
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f1      	bne.n	80011fc <SD_SendCmd+0x82>

	return res;
 8001218:	7b7b      	ldrb	r3, [r7, #13]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SD_disk_initialize+0x14>
 8001234:	2301      	movs	r3, #1
 8001236:	e0d1      	b.n	80013dc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001238:	4b6a      	ldr	r3, [pc, #424]	; (80013e4 <SD_disk_initialize+0x1c0>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <SD_disk_initialize+0x2a>
 8001246:	4b67      	ldr	r3, [pc, #412]	; (80013e4 <SD_disk_initialize+0x1c0>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	e0c6      	b.n	80013dc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800124e:	f7ff fec9 	bl	8000fe4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001252:	f7ff fe33 	bl	8000ebc <SELECT>

	/* check disk type */
	type = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800125a:	2100      	movs	r1, #0
 800125c:	2040      	movs	r0, #64	; 0x40
 800125e:	f7ff ff8c 	bl	800117a <SD_SendCmd>
 8001262:	4603      	mov	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	f040 80a1 	bne.w	80013ac <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800126a:	4b5f      	ldr	r3, [pc, #380]	; (80013e8 <SD_disk_initialize+0x1c4>)
 800126c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001270:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001272:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001276:	2048      	movs	r0, #72	; 0x48
 8001278:	f7ff ff7f 	bl	800117a <SD_SendCmd>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	d155      	bne.n	800132e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e00c      	b.n	80012a2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001288:	7bfc      	ldrb	r4, [r7, #15]
 800128a:	f7ff fe67 	bl	8000f5c <SPI_RxByte>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	f104 0310 	add.w	r3, r4, #16
 8001296:	443b      	add	r3, r7
 8001298:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	3301      	adds	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d9ef      	bls.n	8001288 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012a8:	7abb      	ldrb	r3, [r7, #10]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d17e      	bne.n	80013ac <SD_disk_initialize+0x188>
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	2baa      	cmp	r3, #170	; 0xaa
 80012b2:	d17b      	bne.n	80013ac <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012b4:	2100      	movs	r1, #0
 80012b6:	2077      	movs	r0, #119	; 0x77
 80012b8:	f7ff ff5f 	bl	800117a <SD_SendCmd>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d807      	bhi.n	80012d2 <SD_disk_initialize+0xae>
 80012c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012c6:	2069      	movs	r0, #105	; 0x69
 80012c8:	f7ff ff57 	bl	800117a <SD_SendCmd>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d004      	beq.n	80012dc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80012d2:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <SD_disk_initialize+0x1c4>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ec      	bne.n	80012b4 <SD_disk_initialize+0x90>
 80012da:	e000      	b.n	80012de <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012dc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <SD_disk_initialize+0x1c4>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d062      	beq.n	80013ac <SD_disk_initialize+0x188>
 80012e6:	2100      	movs	r1, #0
 80012e8:	207a      	movs	r0, #122	; 0x7a
 80012ea:	f7ff ff46 	bl	800117a <SD_SendCmd>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d15b      	bne.n	80013ac <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e00c      	b.n	8001314 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80012fa:	7bfc      	ldrb	r4, [r7, #15]
 80012fc:	f7ff fe2e 	bl	8000f5c <SPI_RxByte>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	f104 0310 	add.w	r3, r4, #16
 8001308:	443b      	add	r3, r7
 800130a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	3301      	adds	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d9ef      	bls.n	80012fa <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800131a:	7a3b      	ldrb	r3, [r7, #8]
 800131c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SD_disk_initialize+0x104>
 8001324:	230c      	movs	r3, #12
 8001326:	e000      	b.n	800132a <SD_disk_initialize+0x106>
 8001328:	2304      	movs	r3, #4
 800132a:	73bb      	strb	r3, [r7, #14]
 800132c:	e03e      	b.n	80013ac <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800132e:	2100      	movs	r1, #0
 8001330:	2077      	movs	r0, #119	; 0x77
 8001332:	f7ff ff22 	bl	800117a <SD_SendCmd>
 8001336:	4603      	mov	r3, r0
 8001338:	2b01      	cmp	r3, #1
 800133a:	d808      	bhi.n	800134e <SD_disk_initialize+0x12a>
 800133c:	2100      	movs	r1, #0
 800133e:	2069      	movs	r0, #105	; 0x69
 8001340:	f7ff ff1b 	bl	800117a <SD_SendCmd>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d801      	bhi.n	800134e <SD_disk_initialize+0x12a>
 800134a:	2302      	movs	r3, #2
 800134c:	e000      	b.n	8001350 <SD_disk_initialize+0x12c>
 800134e:	2301      	movs	r3, #1
 8001350:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d10e      	bne.n	8001376 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001358:	2100      	movs	r1, #0
 800135a:	2077      	movs	r0, #119	; 0x77
 800135c:	f7ff ff0d 	bl	800117a <SD_SendCmd>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d80e      	bhi.n	8001384 <SD_disk_initialize+0x160>
 8001366:	2100      	movs	r1, #0
 8001368:	2069      	movs	r0, #105	; 0x69
 800136a:	f7ff ff06 	bl	800117a <SD_SendCmd>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d107      	bne.n	8001384 <SD_disk_initialize+0x160>
 8001374:	e00c      	b.n	8001390 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001376:	2100      	movs	r1, #0
 8001378:	2041      	movs	r0, #65	; 0x41
 800137a:	f7ff fefe 	bl	800117a <SD_SendCmd>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <SD_disk_initialize+0x1c4>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e2      	bne.n	8001352 <SD_disk_initialize+0x12e>
 800138c:	e000      	b.n	8001390 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800138e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <SD_disk_initialize+0x1c4>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <SD_disk_initialize+0x184>
 8001398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139c:	2050      	movs	r0, #80	; 0x50
 800139e:	f7ff feec 	bl	800117a <SD_SendCmd>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SD_disk_initialize+0x188>
 80013a8:	2300      	movs	r3, #0
 80013aa:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <SD_disk_initialize+0x1c8>)
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80013b2:	f7ff fd91 	bl	8000ed8 <DESELECT>
	SPI_RxByte();
 80013b6:	f7ff fdd1 	bl	8000f5c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80013ba:	7bbb      	ldrb	r3, [r7, #14]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <SD_disk_initialize+0x1c0>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SD_disk_initialize+0x1c0>)
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	e001      	b.n	80013d6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80013d2:	f7ff fe49 	bl	8001068 <SD_PowerOff>
	}

	return Stat;
 80013d6:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <SD_disk_initialize+0x1c0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b2db      	uxtb	r3, r3
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000210 	.word	0x20000210
 80013ec:	20000214 	.word	0x20000214

080013f0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SD_disk_status+0x14>
 8001400:	2301      	movs	r3, #1
 8001402:	e002      	b.n	800140a <SD_disk_status+0x1a>
	return Stat;
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SD_disk_status+0x28>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000000 	.word	0x20000000

0800141c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <SD_disk_read+0x1c>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <SD_disk_read+0x20>
 8001438:	2304      	movs	r3, #4
 800143a:	e051      	b.n	80014e0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <SD_disk_read+0xcc>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SD_disk_read+0x32>
 800144a:	2303      	movs	r3, #3
 800144c:	e048      	b.n	80014e0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <SD_disk_read+0xd0>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <SD_disk_read+0x44>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	025b      	lsls	r3, r3, #9
 800145e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001460:	f7ff fd2c 	bl	8000ebc <SELECT>

	if (count == 1)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d111      	bne.n	800148e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	2051      	movs	r0, #81	; 0x51
 800146e:	f7ff fe84 	bl	800117a <SD_SendCmd>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d129      	bne.n	80014cc <SD_disk_read+0xb0>
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f7ff fe0b 	bl	8001098 <SD_RxDataBlock>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d021      	beq.n	80014cc <SD_disk_read+0xb0>
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	e01e      	b.n	80014cc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2052      	movs	r0, #82	; 0x52
 8001492:	f7ff fe72 	bl	800117a <SD_SendCmd>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d117      	bne.n	80014cc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800149c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f7ff fdf9 	bl	8001098 <SD_RxDataBlock>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00a      	beq.n	80014c2 <SD_disk_read+0xa6>
				buff += 512;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014b2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1ed      	bne.n	800149c <SD_disk_read+0x80>
 80014c0:	e000      	b.n	80014c4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80014c2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80014c4:	2100      	movs	r1, #0
 80014c6:	204c      	movs	r0, #76	; 0x4c
 80014c8:	f7ff fe57 	bl	800117a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80014cc:	f7ff fd04 	bl	8000ed8 <DESELECT>
	SPI_RxByte();
 80014d0:	f7ff fd44 	bl	8000f5c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf14      	ite	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	2300      	moveq	r3, #0
 80014de:	b2db      	uxtb	r3, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000214 	.word	0x20000214

080014f0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <SD_disk_write+0x1c>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <SD_disk_write+0x20>
 800150c:	2304      	movs	r3, #4
 800150e:	e06b      	b.n	80015e8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001510:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <SD_disk_write+0x100>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SD_disk_write+0x32>
 800151e:	2303      	movs	r3, #3
 8001520:	e062      	b.n	80015e8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <SD_disk_write+0x100>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SD_disk_write+0x44>
 8001530:	2302      	movs	r3, #2
 8001532:	e059      	b.n	80015e8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <SD_disk_write+0x104>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <SD_disk_write+0x56>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	025b      	lsls	r3, r3, #9
 8001544:	607b      	str	r3, [r7, #4]

	SELECT();
 8001546:	f7ff fcb9 	bl	8000ebc <SELECT>

	if (count == 1)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d110      	bne.n	8001572 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	2058      	movs	r0, #88	; 0x58
 8001554:	f7ff fe11 	bl	800117a <SD_SendCmd>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d13a      	bne.n	80015d4 <SD_disk_write+0xe4>
 800155e:	21fe      	movs	r1, #254	; 0xfe
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	f7ff fdc7 	bl	80010f4 <SD_TxDataBlock>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d033      	beq.n	80015d4 <SD_disk_write+0xe4>
			count = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	e030      	b.n	80015d4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <SD_disk_write+0x104>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800157e:	2100      	movs	r1, #0
 8001580:	2077      	movs	r0, #119	; 0x77
 8001582:	f7ff fdfa 	bl	800117a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	2057      	movs	r0, #87	; 0x57
 800158a:	f7ff fdf6 	bl	800117a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	2059      	movs	r0, #89	; 0x59
 8001592:	f7ff fdf2 	bl	800117a <SD_SendCmd>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d11b      	bne.n	80015d4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800159c:	21fc      	movs	r1, #252	; 0xfc
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f7ff fda8 	bl	80010f4 <SD_TxDataBlock>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00a      	beq.n	80015c0 <SD_disk_write+0xd0>
				buff += 512;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ee      	bne.n	800159c <SD_disk_write+0xac>
 80015be:	e000      	b.n	80015c2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015c0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80015c2:	21fd      	movs	r1, #253	; 0xfd
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff fd95 	bl	80010f4 <SD_TxDataBlock>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <SD_disk_write+0xe4>
			{
				count = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80015d4:	f7ff fc80 	bl	8000ed8 <DESELECT>
	SPI_RxByte();
 80015d8:	f7ff fcc0 	bl	8000f5c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2301      	movne	r3, #1
 80015e4:	2300      	moveq	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000214 	.word	0x20000214

080015f8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b08b      	sub	sp, #44	; 0x2c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	603a      	str	r2, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	460b      	mov	r3, r1
 8001606:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SD_disk_ioctl+0x1e>
 8001612:	2304      	movs	r3, #4
 8001614:	e115      	b.n	8001842 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	2b05      	cmp	r3, #5
 8001620:	d124      	bne.n	800166c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d012      	beq.n	8001650 <SD_disk_ioctl+0x58>
 800162a:	2b02      	cmp	r3, #2
 800162c:	dc1a      	bgt.n	8001664 <SD_disk_ioctl+0x6c>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <SD_disk_ioctl+0x40>
 8001632:	2b01      	cmp	r3, #1
 8001634:	d006      	beq.n	8001644 <SD_disk_ioctl+0x4c>
 8001636:	e015      	b.n	8001664 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001638:	f7ff fd16 	bl	8001068 <SD_PowerOff>
			res = RES_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001642:	e0fc      	b.n	800183e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001644:	f7ff fcce 	bl	8000fe4 <SD_PowerOn>
			res = RES_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800164e:	e0f6      	b.n	800183e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	1c5c      	adds	r4, r3, #1
 8001654:	f7ff fd14 	bl	8001080 <SD_CheckPower>
 8001658:	4603      	mov	r3, r0
 800165a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001662:	e0ec      	b.n	800183e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001664:	2304      	movs	r3, #4
 8001666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800166a:	e0e8      	b.n	800183e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800166c:	4b77      	ldr	r3, [pc, #476]	; (800184c <SD_disk_ioctl+0x254>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SD_disk_ioctl+0x86>
 800167a:	2303      	movs	r3, #3
 800167c:	e0e1      	b.n	8001842 <SD_disk_ioctl+0x24a>

		SELECT();
 800167e:	f7ff fc1d 	bl	8000ebc <SELECT>

		switch (ctrl)
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	2b0d      	cmp	r3, #13
 8001686:	f200 80cb 	bhi.w	8001820 <SD_disk_ioctl+0x228>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <SD_disk_ioctl+0x98>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	0800178b 	.word	0x0800178b
 8001694:	080016c9 	.word	0x080016c9
 8001698:	0800177b 	.word	0x0800177b
 800169c:	08001821 	.word	0x08001821
 80016a0:	08001821 	.word	0x08001821
 80016a4:	08001821 	.word	0x08001821
 80016a8:	08001821 	.word	0x08001821
 80016ac:	08001821 	.word	0x08001821
 80016b0:	08001821 	.word	0x08001821
 80016b4:	08001821 	.word	0x08001821
 80016b8:	08001821 	.word	0x08001821
 80016bc:	0800179d 	.word	0x0800179d
 80016c0:	080017c1 	.word	0x080017c1
 80016c4:	080017e5 	.word	0x080017e5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80016c8:	2100      	movs	r1, #0
 80016ca:	2049      	movs	r0, #73	; 0x49
 80016cc:	f7ff fd55 	bl	800117a <SD_SendCmd>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80a8 	bne.w	8001828 <SD_disk_ioctl+0x230>
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2110      	movs	r1, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fcda 	bl	8001098 <SD_RxDataBlock>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 809e 	beq.w	8001828 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10e      	bne.n	8001714 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	7d3b      	ldrb	r3, [r7, #20]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b29b      	uxth	r3, r3
 8001702:	4413      	add	r3, r2
 8001704:	b29b      	uxth	r3, r3
 8001706:	3301      	adds	r3, #1
 8001708:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800170a:	8bfb      	ldrh	r3, [r7, #30]
 800170c:	029a      	lsls	r2, r3, #10
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e02e      	b.n	8001772 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001714:	7c7b      	ldrb	r3, [r7, #17]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	b2da      	uxtb	r2, r3
 800171c:	7dbb      	ldrb	r3, [r7, #22]
 800171e:	09db      	lsrs	r3, r3, #7
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b2da      	uxtb	r2, r3
 8001726:	7d7b      	ldrb	r3, [r7, #21]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f003 0306 	and.w	r3, r3, #6
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4413      	add	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	3302      	adds	r3, #2
 8001738:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800173c:	7d3b      	ldrb	r3, [r7, #20]
 800173e:	099b      	lsrs	r3, r3, #6
 8001740:	b2db      	uxtb	r3, r3
 8001742:	b29a      	uxth	r2, r3
 8001744:	7cfb      	ldrb	r3, [r7, #19]
 8001746:	b29b      	uxth	r3, r3
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	b29b      	uxth	r3, r3
 800174c:	4413      	add	r3, r2
 800174e:	b29a      	uxth	r2, r3
 8001750:	7cbb      	ldrb	r3, [r7, #18]
 8001752:	029b      	lsls	r3, r3, #10
 8001754:	b29b      	uxth	r3, r3
 8001756:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800175a:	b29b      	uxth	r3, r3
 800175c:	4413      	add	r3, r2
 800175e:	b29b      	uxth	r3, r3
 8001760:	3301      	adds	r3, #1
 8001762:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001764:	8bfa      	ldrh	r2, [r7, #30]
 8001766:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800176a:	3b09      	subs	r3, #9
 800176c:	409a      	lsls	r2, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001778:	e056      	b.n	8001828 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001780:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001788:	e055      	b.n	8001836 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800178a:	f7ff fc11 	bl	8000fb0 <SD_ReadyWait>
 800178e:	4603      	mov	r3, r0
 8001790:	2bff      	cmp	r3, #255	; 0xff
 8001792:	d14b      	bne.n	800182c <SD_disk_ioctl+0x234>
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800179a:	e047      	b.n	800182c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800179c:	2100      	movs	r1, #0
 800179e:	2049      	movs	r0, #73	; 0x49
 80017a0:	f7ff fceb 	bl	800117a <SD_SendCmd>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d142      	bne.n	8001830 <SD_disk_ioctl+0x238>
 80017aa:	2110      	movs	r1, #16
 80017ac:	6a38      	ldr	r0, [r7, #32]
 80017ae:	f7ff fc73 	bl	8001098 <SD_RxDataBlock>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d03b      	beq.n	8001830 <SD_disk_ioctl+0x238>
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017be:	e037      	b.n	8001830 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017c0:	2100      	movs	r1, #0
 80017c2:	204a      	movs	r0, #74	; 0x4a
 80017c4:	f7ff fcd9 	bl	800117a <SD_SendCmd>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d132      	bne.n	8001834 <SD_disk_ioctl+0x23c>
 80017ce:	2110      	movs	r1, #16
 80017d0:	6a38      	ldr	r0, [r7, #32]
 80017d2:	f7ff fc61 	bl	8001098 <SD_RxDataBlock>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d02b      	beq.n	8001834 <SD_disk_ioctl+0x23c>
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017e2:	e027      	b.n	8001834 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80017e4:	2100      	movs	r1, #0
 80017e6:	207a      	movs	r0, #122	; 0x7a
 80017e8:	f7ff fcc7 	bl	800117a <SD_SendCmd>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d116      	bne.n	8001820 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017f8:	e00b      	b.n	8001812 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80017fa:	6a3c      	ldr	r4, [r7, #32]
 80017fc:	1c63      	adds	r3, r4, #1
 80017fe:	623b      	str	r3, [r7, #32]
 8001800:	f7ff fbac 	bl	8000f5c <SPI_RxByte>
 8001804:	4603      	mov	r3, r0
 8001806:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001808:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800180c:	3301      	adds	r3, #1
 800180e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001812:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001816:	2b03      	cmp	r3, #3
 8001818:	d9ef      	bls.n	80017fa <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001820:	2304      	movs	r3, #4
 8001822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001826:	e006      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 8001828:	bf00      	nop
 800182a:	e004      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 800182c:	bf00      	nop
 800182e:	e002      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 8001830:	bf00      	nop
 8001832:	e000      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 8001834:	bf00      	nop
		}

		DESELECT();
 8001836:	f7ff fb4f 	bl	8000ed8 <DESELECT>
		SPI_RxByte();
 800183a:	f7ff fb8f 	bl	8000f5c <SPI_RxByte>
	}

	return res;
 800183e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001842:	4618      	mov	r0, r3
 8001844:	372c      	adds	r7, #44	; 0x2c
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	20000000 	.word	0x20000000

08001850 <toggle_headlamp>:
#include <stdio.h>
#include "main.h"

int headlamp_on = 0;

void toggle_headlamp() {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	if (HAL_TIM_Base_GetState(HEADLAMP_TIMER) == HAL_TIM_STATE_READY) {
 8001854:	4819      	ldr	r0, [pc, #100]	; (80018bc <toggle_headlamp+0x6c>)
 8001856:	f003 fdf2 	bl	800543e <HAL_TIM_Base_GetState>
 800185a:	4603      	mov	r3, r0
 800185c:	2b01      	cmp	r3, #1
 800185e:	d12a      	bne.n	80018b6 <toggle_headlamp+0x66>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin,
 8001860:	2200      	movs	r2, #0
 8001862:	2101      	movs	r1, #1
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <toggle_headlamp+0x70>)
 8001866:	f002 f9b1 	bl	8003bcc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		if (headlamp_on) {
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <toggle_headlamp+0x74>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00f      	beq.n	8001892 <toggle_headlamp+0x42>
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 10000);
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <toggle_headlamp+0x6c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f242 7210 	movw	r2, #10000	; 0x2710
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <toggle_headlamp+0x6c>)
 800187e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001882:	60da      	str	r2, [r3, #12]
			printf("Light off\n");
 8001884:	4810      	ldr	r0, [pc, #64]	; (80018c8 <toggle_headlamp+0x78>)
 8001886:	f005 fe5f 	bl	8007548 <puts>
			headlamp_on = 0;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <toggle_headlamp+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	e00e      	b.n	80018b0 <toggle_headlamp+0x60>
		} else {
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 2500);
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <toggle_headlamp+0x6c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <toggle_headlamp+0x6c>)
 800189e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80018a2:	60da      	str	r2, [r3, #12]
			printf("Light on\n");
 80018a4:	4809      	ldr	r0, [pc, #36]	; (80018cc <toggle_headlamp+0x7c>)
 80018a6:	f005 fe4f 	bl	8007548 <puts>
			headlamp_on = 1;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <toggle_headlamp+0x74>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
		}
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <toggle_headlamp+0x6c>)
 80018b2:	f003 fc03 	bl	80050bc <HAL_TIM_Base_Start_IT>
	}
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000368 	.word	0x20000368
 80018c0:	40020000 	.word	0x40020000
 80018c4:	20000218 	.word	0x20000218
 80018c8:	080096c8 	.word	0x080096c8
 80018cc:	080096d4 	.word	0x080096d4

080018d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	if (htim == HEADLAMP_TIMER) {
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d107      	bne.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	2101      	movs	r1, #1
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80018e6:	f002 f971 	bl	8003bcc <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018ec:	f003 fc48 	bl	8005180 <HAL_TIM_Base_Stop_IT>
	}
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000368 	.word	0x20000368
 80018fc:	40020000 	.word	0x40020000

08001900 <poll_button>:
#include "input.h"
#include "headlamp.h"

void poll_button() {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(BUTTON_GPIO_BANK, BUTTON_GPIO_PIN) == GPIO_PIN_SET) {
 8001904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001908:	4809      	ldr	r0, [pc, #36]	; (8001930 <poll_button+0x30>)
 800190a:	f002 f947 	bl	8003b9c <HAL_GPIO_ReadPin>
 800190e:	4603      	mov	r3, r0
 8001910:	2b01      	cmp	r3, #1
 8001912:	d10a      	bne.n	800192a <poll_button+0x2a>
//		XBee_Data data;
//		data.command = ToggleHeadlamp;
//		data.target = 0;
//		XBee_Transmit(&data);
		toggle_headlamp();
 8001914:	f7ff ff9c 	bl	8001850 <toggle_headlamp>
		while (HAL_GPIO_ReadPin(BUTTON_GPIO_BANK, BUTTON_GPIO_PIN)); //BAD METHOD
 8001918:	bf00      	nop
 800191a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191e:	4804      	ldr	r0, [pc, #16]	; (8001930 <poll_button+0x30>)
 8001920:	f002 f93c 	bl	8003b9c <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f7      	bne.n	800191a <poll_button+0x1a>
	}
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40020800 	.word	0x40020800

08001934 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001938:	f000 ff7c 	bl	8002834 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800193c:	f000 f81a 	bl	8001974 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001940:	f000 fa12 	bl	8001d68 <MX_GPIO_Init>
	MX_DMA_Init();
 8001944:	f000 f9e8 	bl	8001d18 <MX_DMA_Init>
	MX_I2C1_Init();
 8001948:	f000 f8d2 	bl	8001af0 <MX_I2C1_Init>
	MX_SPI2_Init();
 800194c:	f000 f8fe 	bl	8001b4c <MX_SPI2_Init>
	MX_SPI3_Init();
 8001950:	f000 f932 	bl	8001bb8 <MX_SPI3_Init>
	MX_USART2_UART_Init();
 8001954:	f000 f9b6 	bl	8001cc4 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8001958:	f005 f80c 	bl	8006974 <MX_FATFS_Init>
	MX_ADC1_Init();
 800195c:	f000 f876 	bl	8001a4c <MX_ADC1_Init>
	MX_TIM10_Init();
 8001960:	f000 f962 	bl	8001c28 <MX_TIM10_Init>
	MX_USART1_UART_Init();
 8001964:	f000 f984 	bl	8001c70 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	XBee_Init();
 8001968:	f000 fee0 	bl	800272c <XBee_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		poll_button();
 800196c:	f7ff ffc8 	bl	8001900 <poll_button>
 8001970:	e7fc      	b.n	800196c <main+0x38>
	...

08001974 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b094      	sub	sp, #80	; 0x50
 8001978:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800197a:	f107 0320 	add.w	r3, r7, #32
 800197e:	2230      	movs	r2, #48	; 0x30
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f005 f8e8 	bl	8006b58 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <SystemClock_Config+0xd0>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <SystemClock_Config+0xd0>)
 80019a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	; 0x40
 80019a8:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <SystemClock_Config+0xd0>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <SystemClock_Config+0xd4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019c0:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <SystemClock_Config+0xd4>)
 80019c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <SystemClock_Config+0xd4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d4:	2302      	movs	r3, #2
 80019d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d8:	2301      	movs	r3, #1
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019dc:	2310      	movs	r3, #16
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e0:	2302      	movs	r3, #2
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80019e8:	2310      	movs	r3, #16
 80019ea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80019ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019f0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019f2:	2304      	movs	r3, #4
 80019f4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80019f6:	2307      	movs	r3, #7
 80019f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019fa:	f107 0320 	add.w	r3, r7, #32
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fa42 	bl	8003e88 <HAL_RCC_OscConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0x9a>
		Error_Handler();
 8001a0a:	f000 fa63 	bl	8001ed4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a0e:	230f      	movs	r3, #15
 8001a10:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a12:	2302      	movs	r3, #2
 8001a14:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 fca4 	bl	8004378 <HAL_RCC_ClockConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0xc6>
		Error_Handler();
 8001a36:	f000 fa4d 	bl	8001ed4 <Error_Handler>
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	3750      	adds	r7, #80	; 0x50
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000

08001a4c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001a52:	463b      	mov	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a60:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <MX_ADC1_Init+0x9c>)
 8001a62:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a6a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a8e:	4a17      	ldr	r2, [pc, #92]	; (8001aec <MX_ADC1_Init+0xa0>)
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001aae:	f000 ff7b 	bl	80029a8 <HAL_ADC_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_ADC1_Init+0x70>
		Error_Handler();
 8001ab8:	f000 fa0c 	bl	8001ed4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001abc:	2308      	movs	r3, #8
 8001abe:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001ac8:	463b      	mov	r3, r7
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001ace:	f000 ffaf 	bl	8002a30 <HAL_ADC_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_ADC1_Init+0x90>
		Error_Handler();
 8001ad8:	f000 f9fc 	bl	8001ed4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000021c 	.word	0x2000021c
 8001ae8:	40012000 	.word	0x40012000
 8001aec:	0f000001 	.word	0x0f000001

08001af0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <MX_I2C1_Init+0x54>)
 8001af8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001afc:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <MX_I2C1_Init+0x58>)
 8001afe:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b12:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b2e:	f002 f867 	bl	8003c00 <HAL_I2C_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001b38:	f000 f9cc 	bl	8001ed4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000264 	.word	0x20000264
 8001b44:	40005400 	.word	0x40005400
 8001b48:	000186a0 	.word	0x000186a0

08001b4c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b52:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <MX_SPI2_Init+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b5c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b80:	2210      	movs	r2, #16
 8001b82:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b98:	220a      	movs	r2, #10
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <MX_SPI2_Init+0x64>)
 8001b9e:	f002 fe0b 	bl	80047b8 <HAL_SPI_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_SPI2_Init+0x60>
		Error_Handler();
 8001ba8:	f000 f994 	bl	8001ed4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200002b8 	.word	0x200002b8
 8001bb4:	40003800 	.word	0x40003800

08001bb8 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001bbe:	4a19      	ldr	r2, [pc, #100]	; (8001c24 <MX_SPI3_Init+0x6c>)
 8001bc0:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001bc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc8:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bd6:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bea:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001bee:	2218      	movs	r2, #24
 8001bf0:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001c06:	220a      	movs	r2, #10
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001c0c:	f002 fdd4 	bl	80047b8 <HAL_SPI_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_SPI3_Init+0x62>
		Error_Handler();
 8001c16:	f000 f95d 	bl	8001ed4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000310 	.word	0x20000310
 8001c24:	40003c00 	.word	0x40003c00

08001c28 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_TIM10_Init+0x40>)
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <MX_TIM10_Init+0x44>)
 8001c30:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 8400 - 1;
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <MX_TIM10_Init+0x40>)
 8001c34:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001c38:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_TIM10_Init+0x40>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_TIM10_Init+0x40>)
 8001c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c46:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <MX_TIM10_Init+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_TIM10_Init+0x40>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_TIM10_Init+0x40>)
 8001c56:	f003 f9e1 	bl	800501c <HAL_TIM_Base_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM10_Init+0x3c>
		Error_Handler();
 8001c60:	f000 f938 	bl	8001ed4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000368 	.word	0x20000368
 8001c6c:	40014400 	.word	0x40014400

08001c70 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_USART1_UART_Init+0x4c>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <MX_USART1_UART_Init+0x50>)
 8001c78:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_USART1_UART_Init+0x4c>)
 8001c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c80:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_USART1_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_USART1_UART_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_USART1_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_USART1_UART_Init+0x4c>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_USART1_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_USART1_UART_Init+0x4c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_USART1_UART_Init+0x4c>)
 8001ca8:	f003 fc6c 	bl	8005584 <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001cb2:	f000 f90f 	bl	8001ed4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200003b0 	.word	0x200003b0
 8001cc0:	40011000 	.word	0x40011000

08001cc4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <MX_USART2_UART_Init+0x50>)
 8001ccc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cea:	220c      	movs	r2, #12
 8001cec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	f003 fc42 	bl	8005584 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001d06:	f000 f8e5 	bl	8001ed4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200003f4 	.word	0x200003f4
 8001d14:	40004400 	.word	0x40004400

08001d18 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_DMA_Init+0x4c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <MX_DMA_Init+0x4c>)
 8001d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <MX_DMA_Init+0x4c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	203a      	movs	r0, #58	; 0x3a
 8001d40:	f001 f96f 	bl	8003022 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001d44:	203a      	movs	r0, #58	; 0x3a
 8001d46:	f001 f988 	bl	800305a <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2046      	movs	r0, #70	; 0x46
 8001d50:	f001 f967 	bl	8003022 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001d54:	2046      	movs	r0, #70	; 0x46
 8001d56:	f001 f980 	bl	800305a <HAL_NVIC_EnableIRQ>

}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a46      	ldr	r2, [pc, #280]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a38      	ldr	r2, [pc, #224]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a31      	ldr	r2, [pc, #196]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <MX_GPIO_Init+0x138>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_SPI2_CS_GPIO_Port, SD_SPI2_CS_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2102      	movs	r1, #2
 8001df2:	482c      	ldr	r0, [pc, #176]	; (8001ea4 <MX_GPIO_Init+0x13c>)
 8001df4:	f001 feea 	bl	8003bcc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, HEADLAMP_OUT_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2121      	movs	r1, #33	; 0x21
 8001dfc:	482a      	ldr	r0, [pc, #168]	; (8001ea8 <MX_GPIO_Init+0x140>)
 8001dfe:	f001 fee5 	bl	8003bcc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DAC_SPI2_CS_GPIO_Port, DAC_SPI2_CS_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2104      	movs	r1, #4
 8001e06:	4829      	ldr	r0, [pc, #164]	; (8001eac <MX_GPIO_Init+0x144>)
 8001e08:	f001 fee0 	bl	8003bcc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e10:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	4820      	ldr	r0, [pc, #128]	; (8001ea4 <MX_GPIO_Init+0x13c>)
 8001e24:	f001 fd36 	bl	8003894 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_SPI2_CS_Pin */
	GPIO_InitStruct.Pin = SD_SPI2_CS_Pin;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SD_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4819      	ldr	r0, [pc, #100]	; (8001ea4 <MX_GPIO_Init+0x13c>)
 8001e40:	f001 fd28 	bl	8003894 <HAL_GPIO_Init>

	/*Configure GPIO pin : HEADLAMP_OUT_Pin */
	GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin;
 8001e44:	2301      	movs	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e48:	2311      	movs	r3, #17
 8001e4a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HEADLAMP_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4813      	ldr	r0, [pc, #76]	; (8001ea8 <MX_GPIO_Init+0x140>)
 8001e5c:	f001 fd1a 	bl	8003894 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001e60:	2320      	movs	r3, #32
 8001e62:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <MX_GPIO_Init+0x140>)
 8001e78:	f001 fd0c 	bl	8003894 <HAL_GPIO_Init>

	/*Configure GPIO pin : DAC_SPI2_CS_Pin */
	GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	4806      	ldr	r0, [pc, #24]	; (8001eac <MX_GPIO_Init+0x144>)
 8001e94:	f001 fcfe 	bl	8003894 <HAL_GPIO_Init>

}
 8001e98:	bf00      	nop
 8001e9a:	3728      	adds	r7, #40	; 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40020400 	.word	0x40020400

08001eb0 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8001eb8:	1d39      	adds	r1, r7, #4
 8001eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <__io_putchar+0x20>)
 8001ec2:	f003 fbac 	bl	800561e <HAL_UART_Transmit>
	return ch;
 8001ec6:	687b      	ldr	r3, [r7, #4]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200003f4 	.word	0x200003f4

08001ed4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001edc:	e7fe      	b.n	8001edc <Error_Handler+0x8>
	...

08001ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_MspInit+0x4c>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_MspInit+0x4c>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <HAL_MspInit+0x4c>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_MspInit+0x4c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f1e:	2007      	movs	r0, #7
 8001f20:	f001 f874 	bl	800300c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <HAL_ADC_MspInit+0xb0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d141      	bne.n	8001fd6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a22      	ldr	r2, [pc, #136]	; (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_IN10_Pin;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001faa:	2303      	movs	r3, #3
 8001fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <HAL_ADC_MspInit+0xb8>)
 8001fba:	f001 fc6b 	bl	8003894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4806      	ldr	r0, [pc, #24]	; (8001fec <HAL_ADC_MspInit+0xbc>)
 8001fd2:	f001 fc5f 	bl	8003894 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40012000 	.word	0x40012000
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020400 	.word	0x40020400

08001ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_I2C_MspInit+0x84>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12b      	bne.n	800206a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_I2C_MspInit+0x88>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 800202e:	23c0      	movs	r3, #192	; 0xc0
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002032:	2312      	movs	r3, #18
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800203e:	2304      	movs	r3, #4
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <HAL_I2C_MspInit+0x8c>)
 800204a:	f001 fc23 	bl	8003894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40005400 	.word	0x40005400
 8002078:	40023800 	.word	0x40023800
 800207c:	40020400 	.word	0x40020400

08002080 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	; 0x30
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a42      	ldr	r2, [pc, #264]	; (80021a8 <HAL_SPI_MspInit+0x128>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d14b      	bne.n	800213a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	4b41      	ldr	r3, [pc, #260]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a40      	ldr	r2, [pc, #256]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a39      	ldr	r2, [pc, #228]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a32      	ldr	r2, [pc, #200]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin|SD_SPI2_MOSI_Pin;
 80020f6:	230c      	movs	r3, #12
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002106:	2305      	movs	r3, #5
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	4827      	ldr	r0, [pc, #156]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 8002112:	f001 fbbf 	bl	8003894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8002116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002128:	2305      	movs	r3, #5
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	4820      	ldr	r0, [pc, #128]	; (80021b4 <HAL_SPI_MspInit+0x134>)
 8002134:	f001 fbae 	bl	8003894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002138:	e031      	b.n	800219e <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <HAL_SPI_MspInit+0x138>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d12c      	bne.n	800219e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 800214e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002152:	6413      	str	r3, [r2, #64]	; 0x40
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	4a10      	ldr	r2, [pc, #64]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 800216a:	f043 0304 	orr.w	r3, r3, #4
 800216e:	6313      	str	r3, [r2, #48]	; 0x30
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <HAL_SPI_MspInit+0x12c>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DAC_SPI3_SCK_Pin|DAC_SPI3_MOSI_Pin;
 800217c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800218e:	2306      	movs	r3, #6
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <HAL_SPI_MspInit+0x130>)
 800219a:	f001 fb7b 	bl	8003894 <HAL_GPIO_Init>
}
 800219e:	bf00      	nop
 80021a0:	3730      	adds	r7, #48	; 0x30
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40003800 	.word	0x40003800
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40003c00 	.word	0x40003c00

080021bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <HAL_TIM_Base_MspInit+0x48>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d115      	bne.n	80021fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_TIM_Base_MspInit+0x4c>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <HAL_TIM_Base_MspInit+0x4c>)
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_TIM_Base_MspInit+0x4c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	2019      	movs	r0, #25
 80021f0:	f000 ff17 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021f4:	2019      	movs	r0, #25
 80021f6:	f000 ff30 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40014400 	.word	0x40014400
 8002208:	40023800 	.word	0x40023800

0800220c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a65      	ldr	r2, [pc, #404]	; (80023c0 <HAL_UART_MspInit+0x1b4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	f040 8093 	bne.w	8002356 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	4a62      	ldr	r2, [pc, #392]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 800223a:	f043 0310 	orr.w	r3, r3, #16
 800223e:	6453      	str	r3, [r2, #68]	; 0x44
 8002240:	4b60      	ldr	r3, [pc, #384]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	4b5c      	ldr	r3, [pc, #368]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4a5b      	ldr	r2, [pc, #364]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6313      	str	r3, [r2, #48]	; 0x30
 800225c:	4b59      	ldr	r3, [pc, #356]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = XBEE_USART_TX_Pin|XBEE_USART_RX_Pin;
 8002268:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800226c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800227a:	2307      	movs	r3, #7
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	f107 031c 	add.w	r3, r7, #28
 8002282:	4619      	mov	r1, r3
 8002284:	4850      	ldr	r0, [pc, #320]	; (80023c8 <HAL_UART_MspInit+0x1bc>)
 8002286:	f001 fb05 	bl	8003894 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800228a:	4b50      	ldr	r3, [pc, #320]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 800228c:	4a50      	ldr	r2, [pc, #320]	; (80023d0 <HAL_UART_MspInit+0x1c4>)
 800228e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002290:	4b4e      	ldr	r3, [pc, #312]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 8002292:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002296:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002298:	4b4c      	ldr	r3, [pc, #304]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229e:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022a4:	4b49      	ldr	r3, [pc, #292]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 80022a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ac:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b2:	4b46      	ldr	r3, [pc, #280]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022b8:	4b44      	ldr	r3, [pc, #272]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 80022ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022be:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022c0:	4b42      	ldr	r3, [pc, #264]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022cc:	483f      	ldr	r0, [pc, #252]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 80022ce:	f000 fedf 	bl	8003090 <HAL_DMA_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80022d8:	f7ff fdfc 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3b      	ldr	r2, [pc, #236]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
 80022e2:	4a3a      	ldr	r2, [pc, #232]	; (80023cc <HAL_UART_MspInit+0x1c0>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80022e8:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 80022ea:	4a3b      	ldr	r2, [pc, #236]	; (80023d8 <HAL_UART_MspInit+0x1cc>)
 80022ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80022ee:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 80022f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 80022f8:	2240      	movs	r2, #64	; 0x40
 80022fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022fc:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002302:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 8002304:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002308:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800230a:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002310:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 8002312:	2200      	movs	r2, #0
 8002314:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002316:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 8002318:	2200      	movs	r2, #0
 800231a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 800231e:	2200      	movs	r2, #0
 8002320:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 8002324:	2200      	movs	r2, #0
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002328:	482a      	ldr	r0, [pc, #168]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 800232a:	f000 feb1 	bl	8003090 <HAL_DMA_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002334:	f7ff fdce 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 800233c:	635a      	str	r2, [r3, #52]	; 0x34
 800233e:	4a25      	ldr	r2, [pc, #148]	; (80023d4 <HAL_UART_MspInit+0x1c8>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2025      	movs	r0, #37	; 0x25
 800234a:	f000 fe6a 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800234e:	2025      	movs	r0, #37	; 0x25
 8002350:	f000 fe83 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002354:	e030      	b.n	80023b8 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a20      	ldr	r2, [pc, #128]	; (80023dc <HAL_UART_MspInit+0x1d0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d12b      	bne.n	80023b8 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 800236a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6313      	str	r3, [r2, #48]	; 0x30
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_UART_MspInit+0x1b8>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8002398:	230c      	movs	r3, #12
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a8:	2307      	movs	r3, #7
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	4619      	mov	r1, r3
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_UART_MspInit+0x1bc>)
 80023b4:	f001 fa6e 	bl	8003894 <HAL_GPIO_Init>
}
 80023b8:	bf00      	nop
 80023ba:	3730      	adds	r7, #48	; 0x30
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40011000 	.word	0x40011000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	20000438 	.word	0x20000438
 80023d0:	40026440 	.word	0x40026440
 80023d4:	20000498 	.word	0x20000498
 80023d8:	400264b8 	.word	0x400264b8
 80023dc:	40004400 	.word	0x40004400

080023e0 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile extern uint8_t Timer1, Timer2;

void SDTimer_Handler() {
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

	if (Timer1 > 0) {
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <SDTimer_Handler+0x40>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d006      	beq.n	80023fc <SDTimer_Handler+0x1c>
		--Timer1;
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <SDTimer_Handler+0x40>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <SDTimer_Handler+0x40>)
 80023fa:	701a      	strb	r2, [r3, #0]
	}

	if (Timer2 > 0) {
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <SDTimer_Handler+0x44>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <SDTimer_Handler+0x34>
		--Timer2;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <SDTimer_Handler+0x44>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SDTimer_Handler+0x44>)
 8002412:	701a      	strb	r2, [r3, #0]
	}
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000210 	.word	0x20000210
 8002424:	20000212 	.word	0x20000212

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800242c:	e7fe      	b.n	800242c <NMI_Handler+0x4>

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <SysTick_Handler+0x30>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3301      	adds	r3, #1
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <SysTick_Handler+0x30>)
 8002480:	701a      	strb	r2, [r3, #0]

	if (FatFsCnt >= 10) {
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <SysTick_Handler+0x30>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b09      	cmp	r3, #9
 800248a:	d904      	bls.n	8002496 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <SysTick_Handler+0x30>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002492:	f7ff ffa5 	bl	80023e0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002496:	f000 fa1f 	bl	80028d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200004f8 	.word	0x200004f8

080024a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024aa:	f002 fe98 	bl	80051de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000368 	.word	0x20000368

080024b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <USART1_IRQHandler+0x10>)
 80024be:	f003 f971 	bl	80057a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200003b0 	.word	0x200003b0

080024cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <DMA2_Stream2_IRQHandler+0x10>)
 80024d2:	f000 ff75 	bl	80033c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000438 	.word	0x20000438

080024e0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <DMA2_Stream7_IRQHandler+0x10>)
 80024e6:	f000 ff6b 	bl	80033c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000498 	.word	0x20000498

080024f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
	return 1;
 80024f8:	2301      	movs	r3, #1
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_kill>:

int _kill(int pid, int sig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800250e:	f004 faf9 	bl	8006b04 <__errno>
 8002512:	4603      	mov	r3, r0
 8002514:	2216      	movs	r2, #22
 8002516:	601a      	str	r2, [r3, #0]
	return -1;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_exit>:

void _exit (int status)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffe7 	bl	8002504 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002536:	e7fe      	b.n	8002536 <_exit+0x12>

08002538 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e00a      	b.n	8002560 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800254a:	f3af 8000 	nop.w
 800254e:	4601      	mov	r1, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	60ba      	str	r2, [r7, #8]
 8002556:	b2ca      	uxtb	r2, r1
 8002558:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	dbf0      	blt.n	800254a <_read+0x12>
	}

return len;
 8002568:	687b      	ldr	r3, [r7, #4]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e009      	b.n	8002598 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	60ba      	str	r2, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fc8f 	bl	8001eb0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	429a      	cmp	r2, r3
 800259e:	dbf1      	blt.n	8002584 <_write+0x12>
	}
	return len;
 80025a0:	687b      	ldr	r3, [r7, #4]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_close>:

int _close(int file)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	return -1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025d2:	605a      	str	r2, [r3, #4]
	return 0;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <_isatty>:

int _isatty(int file)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
	return 1;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
	return 0;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <_sbrk+0x5c>)
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <_sbrk+0x60>)
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <_sbrk+0x64>)
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <_sbrk+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002644:	f004 fa5e 	bl	8006b04 <__errno>
 8002648:	4603      	mov	r3, r0
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e009      	b.n	8002668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <_sbrk+0x64>)
 8002664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20018000 	.word	0x20018000
 8002674:	00000400 	.word	0x00000400
 8002678:	200004fc 	.word	0x200004fc
 800267c:	20000598 	.word	0x20000598

08002680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <SystemInit+0x20>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <SystemInit+0x20>)
 800268c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <XBee_Receive>:

void XBee_Transmit(XBee_Data *data) {
	HAL_UART_Transmit_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
}

void XBee_Receive(XBee_Data *data) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 80026ac:	226c      	movs	r2, #108	; 0x6c
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <XBee_Receive+0x1c>)
 80026b2:	f003 f846 	bl	8005742 <HAL_UART_Receive_DMA>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200003b0 	.word	0x200003b0

080026c4 <XBee_Resolve>:

void XBee_Resolve() {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	if (XBee_Received.target == 0 || XBee_Received.target == UID) {
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <XBee_Resolve+0x54>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <XBee_Resolve+0x18>
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <XBee_Resolve+0x54>)
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <XBee_Resolve+0x58>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d11a      	bne.n	8002712 <XBee_Resolve+0x4e>
		switch (XBee_Received.command) {
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <XBee_Resolve+0x54>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d00d      	beq.n	8002702 <XBee_Resolve+0x3e>
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	dc0f      	bgt.n	800270a <XBee_Resolve+0x46>
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <XBee_Resolve+0x30>
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d004      	beq.n	80026fc <XBee_Resolve+0x38>
 80026f2:	e00a      	b.n	800270a <XBee_Resolve+0x46>
		case PrintMessage:
			printf("Message\n");
 80026f4:	480a      	ldr	r0, [pc, #40]	; (8002720 <XBee_Resolve+0x5c>)
 80026f6:	f004 ff27 	bl	8007548 <puts>
			break;
 80026fa:	e00b      	b.n	8002714 <XBee_Resolve+0x50>
		case ToggleHeadlamp:
			toggle_headlamp();
 80026fc:	f7ff f8a8 	bl	8001850 <toggle_headlamp>
			break;
 8002700:	e008      	b.n	8002714 <XBee_Resolve+0x50>
		case Placeholder:
			printf("Placeholder\n");
 8002702:	4808      	ldr	r0, [pc, #32]	; (8002724 <XBee_Resolve+0x60>)
 8002704:	f004 ff20 	bl	8007548 <puts>
			break;
 8002708:	e004      	b.n	8002714 <XBee_Resolve+0x50>
		default:
			printf("Unknown command received over network\n");
 800270a:	4807      	ldr	r0, [pc, #28]	; (8002728 <XBee_Resolve+0x64>)
 800270c:	f004 ff1c 	bl	8007548 <puts>
		}
	}
}
 8002710:	e000      	b.n	8002714 <XBee_Resolve+0x50>
	}
 8002712:	bf00      	nop
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000504 	.word	0x20000504
 800271c:	20000500 	.word	0x20000500
 8002720:	080096e0 	.word	0x080096e0
 8002724:	080096e8 	.word	0x080096e8
 8002728:	080096f4 	.word	0x080096f4

0800272c <XBee_Init>:

void XBee_Init() {
 800272c:	b598      	push	{r3, r4, r7, lr}
 800272e:	af00      	add	r7, sp, #0
	UID = HAL_GetUIDw0() + HAL_GetUIDw1() + HAL_GetUIDw2();
 8002730:	f000 f916 	bl	8002960 <HAL_GetUIDw0>
 8002734:	4604      	mov	r4, r0
 8002736:	f000 f91f 	bl	8002978 <HAL_GetUIDw1>
 800273a:	4603      	mov	r3, r0
 800273c:	441c      	add	r4, r3
 800273e:	f000 f927 	bl	8002990 <HAL_GetUIDw2>
 8002742:	4603      	mov	r3, r0
 8002744:	4423      	add	r3, r4
 8002746:	4a06      	ldr	r2, [pc, #24]	; (8002760 <XBee_Init+0x34>)
 8002748:	6013      	str	r3, [r2, #0]
	printf("UID: %u\n", (unsigned int) UID);
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <XBee_Init+0x34>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4619      	mov	r1, r3
 8002750:	4804      	ldr	r0, [pc, #16]	; (8002764 <XBee_Init+0x38>)
 8002752:	f004 fe73 	bl	800743c <iprintf>
	XBee_Receive(&XBee_Received);
 8002756:	4804      	ldr	r0, [pc, #16]	; (8002768 <XBee_Init+0x3c>)
 8002758:	f7ff ffa4 	bl	80026a4 <XBee_Receive>
}
 800275c:	bf00      	nop
 800275e:	bd98      	pop	{r3, r4, r7, pc}
 8002760:	20000500 	.word	0x20000500
 8002764:	0800971c 	.word	0x0800971c
 8002768:	20000504 	.word	0x20000504

0800276c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	printf("Transmitted\n");
 8002774:	4803      	ldr	r0, [pc, #12]	; (8002784 <HAL_UART_TxCpltCallback+0x18>)
 8002776:	f004 fee7 	bl	8007548 <puts>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	08009728 	.word	0x08009728

08002788 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b085      	sub	sp, #20
 800278c:	af02      	add	r7, sp, #8
 800278e:	6078      	str	r0, [r7, #4]
	if (huart == XBEE_UART) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_UART_RxCpltCallback+0x4c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d119      	bne.n	80027cc <HAL_UART_RxCpltCallback+0x44>
		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
				XBee_Received.command, (unsigned int) XBee_Received.target,
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <HAL_UART_RxCpltCallback+0x50>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b2db      	uxtb	r3, r3
		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
 800279e:	4618      	mov	r0, r3
				XBee_Received.command, (unsigned int) XBee_Received.target,
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_UART_RxCpltCallback+0x50>)
 80027a2:	685a      	ldr	r2, [r3, #4]
				XBee_Received.data[0], XBee_Received.data[1],
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_UART_RxCpltCallback+0x50>)
 80027a6:	7a1b      	ldrb	r3, [r3, #8]
 80027a8:	b2db      	uxtb	r3, r3
		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
 80027aa:	461c      	mov	r4, r3
				XBee_Received.data[0], XBee_Received.data[1],
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_UART_RxCpltCallback+0x50>)
 80027ae:	7a5b      	ldrb	r3, [r3, #9]
 80027b0:	b2db      	uxtb	r3, r3
		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
 80027b2:	4619      	mov	r1, r3
				XBee_Received.data[2]);
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_UART_RxCpltCallback+0x50>)
 80027b6:	7a9b      	ldrb	r3, [r3, #10]
 80027b8:	b2db      	uxtb	r3, r3
		printf("Received - Type: %i, Target: %u, Data: [%u, %u, %u, ...]\n",
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	9100      	str	r1, [sp, #0]
 80027be:	4623      	mov	r3, r4
 80027c0:	4601      	mov	r1, r0
 80027c2:	4806      	ldr	r0, [pc, #24]	; (80027dc <HAL_UART_RxCpltCallback+0x54>)
 80027c4:	f004 fe3a 	bl	800743c <iprintf>
		XBee_Resolve();
 80027c8:	f7ff ff7c 	bl	80026c4 <XBee_Resolve>
	}
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	200003b0 	.word	0x200003b0
 80027d8:	20000504 	.word	0x20000504
 80027dc:	08009734 	.word	0x08009734

080027e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002818 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027e4:	480d      	ldr	r0, [pc, #52]	; (800281c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027e6:	490e      	ldr	r1, [pc, #56]	; (8002820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027ec:	e002      	b.n	80027f4 <LoopCopyDataInit>

080027ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f2:	3304      	adds	r3, #4

080027f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f8:	d3f9      	bcc.n	80027ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fa:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027fc:	4c0b      	ldr	r4, [pc, #44]	; (800282c <LoopFillZerobss+0x26>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002800:	e001      	b.n	8002806 <LoopFillZerobss>

08002802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002804:	3204      	adds	r2, #4

08002806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002808:	d3fb      	bcc.n	8002802 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800280a:	f7ff ff39 	bl	8002680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800280e:	f004 f97f 	bl	8006b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002812:	f7ff f88f 	bl	8001934 <main>
  bx  lr    
 8002816:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002818:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800281c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002820:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002824:	08009b7c 	.word	0x08009b7c
  ldr r2, =_sbss
 8002828:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800282c:	20000598 	.word	0x20000598

08002830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC_IRQHandler>
	...

08002834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <HAL_Init+0x40>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <HAL_Init+0x40>)
 800283e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_Init+0x40>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HAL_Init+0x40>)
 800284a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a07      	ldr	r2, [pc, #28]	; (8002874 <HAL_Init+0x40>)
 8002856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800285c:	2003      	movs	r0, #3
 800285e:	f000 fbd5 	bl	800300c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002862:	2000      	movs	r0, #0
 8002864:	f000 f808 	bl	8002878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002868:	f7ff fb3a 	bl	8001ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023c00 	.word	0x40023c00

08002878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_InitTick+0x54>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_InitTick+0x58>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4619      	mov	r1, r3
 800288a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002892:	fbb2 f3f3 	udiv	r3, r2, r3
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fbed 	bl	8003076 <HAL_SYSTICK_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00e      	b.n	80028c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b0f      	cmp	r3, #15
 80028aa:	d80a      	bhi.n	80028c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ac:	2200      	movs	r2, #0
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295
 80028b4:	f000 fbb5 	bl	8003022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b8:	4a06      	ldr	r2, [pc, #24]	; (80028d4 <HAL_InitTick+0x5c>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000004 	.word	0x20000004
 80028d0:	2000000c 	.word	0x2000000c
 80028d4:	20000008 	.word	0x20000008

080028d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_IncTick+0x20>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_IncTick+0x24>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	4a04      	ldr	r2, [pc, #16]	; (80028fc <HAL_IncTick+0x24>)
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	2000000c 	.word	0x2000000c
 80028fc:	20000570 	.word	0x20000570

08002900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTick;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_GetTick+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000570 	.word	0x20000570

08002918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002920:	f7ff ffee 	bl	8002900 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d005      	beq.n	800293e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_Delay+0x44>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800293e:	bf00      	nop
 8002940:	f7ff ffde 	bl	8002900 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	d8f7      	bhi.n	8002940 <HAL_Delay+0x28>
  {
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000000c 	.word	0x2000000c

08002960 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <HAL_GetUIDw0+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	1fff7a10 	.word	0x1fff7a10

08002978 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <HAL_GetUIDw1+0x14>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	1fff7a14 	.word	0x1fff7a14

08002990 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_GetUIDw2+0x14>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	1fff7a18 	.word	0x1fff7a18

080029a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e033      	b.n	8002a26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff fab2 	bl	8001f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d118      	bne.n	8002a18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029ee:	f023 0302 	bic.w	r3, r3, #2
 80029f2:	f043 0202 	orr.w	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f93a 	bl	8002c74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f023 0303 	bic.w	r3, r3, #3
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
 8002a16:	e001      	b.n	8002a1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x1c>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e105      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x228>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b09      	cmp	r3, #9
 8002a5a:	d925      	bls.n	8002aa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68d9      	ldr	r1, [r3, #12]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b1e      	subs	r3, #30
 8002a72:	2207      	movs	r2, #7
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	400a      	ands	r2, r1
 8002a80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68d9      	ldr	r1, [r3, #12]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	4603      	mov	r3, r0
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4403      	add	r3, r0
 8002a9a:	3b1e      	subs	r3, #30
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	e022      	b.n	8002aee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6919      	ldr	r1, [r3, #16]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	2207      	movs	r2, #7
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	400a      	ands	r2, r1
 8002aca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6919      	ldr	r1, [r3, #16]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4618      	mov	r0, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4403      	add	r3, r0
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d824      	bhi.n	8002b40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3b05      	subs	r3, #5
 8002b08:	221f      	movs	r2, #31
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	400a      	ands	r2, r1
 8002b16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	4618      	mov	r0, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	3b05      	subs	r3, #5
 8002b32:	fa00 f203 	lsl.w	r2, r0, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b3e:	e04c      	b.n	8002bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d824      	bhi.n	8002b92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	3b23      	subs	r3, #35	; 0x23
 8002b5a:	221f      	movs	r2, #31
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43da      	mvns	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	400a      	ands	r2, r1
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	4618      	mov	r0, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	3b23      	subs	r3, #35	; 0x23
 8002b84:	fa00 f203 	lsl.w	r2, r0, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b90:	e023      	b.n	8002bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3b41      	subs	r3, #65	; 0x41
 8002ba4:	221f      	movs	r2, #31
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	3b41      	subs	r3, #65	; 0x41
 8002bce:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <HAL_ADC_ConfigChannel+0x234>)
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a21      	ldr	r2, [pc, #132]	; (8002c68 <HAL_ADC_ConfigChannel+0x238>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d109      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1cc>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b12      	cmp	r3, #18
 8002bee:	d105      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_ADC_ConfigChannel+0x238>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d123      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x21e>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d003      	beq.n	8002c16 <HAL_ADC_ConfigChannel+0x1e6>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b11      	cmp	r3, #17
 8002c14:	d11b      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d111      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_ADC_ConfigChannel+0x23c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <HAL_ADC_ConfigChannel+0x240>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	0c9a      	lsrs	r2, r3, #18
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c40:	e002      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f9      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40012300 	.word	0x40012300
 8002c68:	40012000 	.word	0x40012000
 8002c6c:	20000004 	.word	0x20000004
 8002c70:	431bde83 	.word	0x431bde83

08002c74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c7c:	4b79      	ldr	r3, [pc, #484]	; (8002e64 <ADC_Init+0x1f0>)
 8002c7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	021a      	lsls	r2, r3, #8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ccc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6899      	ldr	r1, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	4a58      	ldr	r2, [pc, #352]	; (8002e68 <ADC_Init+0x1f4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d022      	beq.n	8002d52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6899      	ldr	r1, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6899      	ldr	r1, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	e00f      	b.n	8002d72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0202 	bic.w	r2, r2, #2
 8002d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6899      	ldr	r1, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7e1b      	ldrb	r3, [r3, #24]
 8002d8c:	005a      	lsls	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01b      	beq.n	8002dd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	035a      	lsls	r2, r3, #13
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	e007      	b.n	8002de8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	051a      	lsls	r2, r3, #20
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6899      	ldr	r1, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e2a:	025a      	lsls	r2, r3, #9
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	029a      	lsls	r2, r3, #10
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40012300 	.word	0x40012300
 8002e68:	0f000001 	.word	0x0f000001

08002e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <__NVIC_GetPriorityGrouping+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db0b      	blt.n	8002efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	4907      	ldr	r1, [pc, #28]	; (8002f08 <__NVIC_EnableIRQ+0x38>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db0a      	blt.n	8002f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	490c      	ldr	r1, [pc, #48]	; (8002f58 <__NVIC_SetPriority+0x4c>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f34:	e00a      	b.n	8002f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4908      	ldr	r1, [pc, #32]	; (8002f5c <__NVIC_SetPriority+0x50>)
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3b04      	subs	r3, #4
 8002f44:	0112      	lsls	r2, r2, #4
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	440b      	add	r3, r1
 8002f4a:	761a      	strb	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f1c3 0307 	rsb	r3, r3, #7
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf28      	it	cs
 8002f7e:	2304      	movcs	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d902      	bls.n	8002f90 <NVIC_EncodePriority+0x30>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	e000      	b.n	8002f92 <NVIC_EncodePriority+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	4313      	orrs	r3, r2
         );
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fd8:	d301      	bcc.n	8002fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00f      	b.n	8002ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fde:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <SysTick_Config+0x40>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe6:	210f      	movs	r1, #15
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f7ff ff8e 	bl	8002f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <SysTick_Config+0x40>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff6:	4b04      	ldr	r3, [pc, #16]	; (8003008 <SysTick_Config+0x40>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	e000e010 	.word	0xe000e010

0800300c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff29 	bl	8002e6c <__NVIC_SetPriorityGrouping>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003034:	f7ff ff3e 	bl	8002eb4 <__NVIC_GetPriorityGrouping>
 8003038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f7ff ff8e 	bl	8002f60 <NVIC_EncodePriority>
 8003044:	4602      	mov	r2, r0
 8003046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff5d 	bl	8002f0c <__NVIC_SetPriority>
}
 8003052:	bf00      	nop
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff31 	bl	8002ed0 <__NVIC_EnableIRQ>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ffa2 	bl	8002fc8 <SysTick_Config>
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800309c:	f7ff fc30 	bl	8002900 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e099      	b.n	80031e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030cc:	e00f      	b.n	80030ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ce:	f7ff fc17 	bl	8002900 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d908      	bls.n	80030ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2203      	movs	r2, #3
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e078      	b.n	80031e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e8      	bne.n	80030ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4b38      	ldr	r3, [pc, #224]	; (80031e8 <HAL_DMA_Init+0x158>)
 8003108:	4013      	ands	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800311a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2b04      	cmp	r3, #4
 8003146:	d107      	bne.n	8003158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4313      	orrs	r3, r2
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0307 	bic.w	r3, r3, #7
 800316e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b04      	cmp	r3, #4
 8003180:	d117      	bne.n	80031b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fb01 	bl	800379c <DMA_CheckFifoParam>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2240      	movs	r2, #64	; 0x40
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031ae:	2301      	movs	r3, #1
 80031b0:	e016      	b.n	80031e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fab8 	bl	8003730 <DMA_CalcBaseAndBitshift>
 80031c0:	4603      	mov	r3, r0
 80031c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	223f      	movs	r2, #63	; 0x3f
 80031ca:	409a      	lsls	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	f010803f 	.word	0xf010803f

080031ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_DMA_Start_IT+0x26>
 800320e:	2302      	movs	r3, #2
 8003210:	e040      	b.n	8003294 <HAL_DMA_Start_IT+0xa8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d12f      	bne.n	8003286 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2202      	movs	r2, #2
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fa4a 	bl	80036d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	223f      	movs	r2, #63	; 0x3f
 8003246:	409a      	lsls	r2, r3
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0216 	orr.w	r2, r2, #22
 800325a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0208 	orr.w	r2, r2, #8
 8003272:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e005      	b.n	8003292 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003292:	7dfb      	ldrb	r3, [r7, #23]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032aa:	f7ff fb29 	bl	8002900 <HAL_GetTick>
 80032ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d008      	beq.n	80032ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e052      	b.n	8003374 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0216 	bic.w	r2, r2, #22
 80032dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_DMA_Abort+0x62>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0208 	bic.w	r2, r2, #8
 800330c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800331e:	e013      	b.n	8003348 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003320:	f7ff faee 	bl	8002900 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b05      	cmp	r3, #5
 800332c:	d90c      	bls.n	8003348 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2203      	movs	r2, #3
 8003338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e015      	b.n	8003374 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e4      	bne.n	8003320 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	223f      	movs	r2, #63	; 0x3f
 800335c:	409a      	lsls	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d004      	beq.n	800339a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2280      	movs	r2, #128	; 0x80
 8003394:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e00c      	b.n	80033b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2205      	movs	r2, #5
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0201 	bic.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033cc:	4b8e      	ldr	r3, [pc, #568]	; (8003608 <HAL_DMA_IRQHandler+0x248>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a8e      	ldr	r2, [pc, #568]	; (800360c <HAL_DMA_IRQHandler+0x24c>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	0a9b      	lsrs	r3, r3, #10
 80033d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	2208      	movs	r2, #8
 80033ec:	409a      	lsls	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01a      	beq.n	800342c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0204 	bic.w	r2, r2, #4
 8003412:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	2208      	movs	r2, #8
 800341a:	409a      	lsls	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003424:	f043 0201 	orr.w	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	2201      	movs	r2, #1
 8003432:	409a      	lsls	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d012      	beq.n	8003462 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	2201      	movs	r2, #1
 8003450:	409a      	lsls	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	f043 0202 	orr.w	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	2204      	movs	r2, #4
 8003468:	409a      	lsls	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d012      	beq.n	8003498 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00b      	beq.n	8003498 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	2204      	movs	r2, #4
 8003486:	409a      	lsls	r2, r3
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f043 0204 	orr.w	r2, r3, #4
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	2210      	movs	r2, #16
 800349e:	409a      	lsls	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d043      	beq.n	8003530 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d03c      	beq.n	8003530 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	2210      	movs	r2, #16
 80034bc:	409a      	lsls	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d108      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d024      	beq.n	8003530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
 80034ee:	e01f      	b.n	8003530 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01b      	beq.n	8003530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
 8003500:	e016      	b.n	8003530 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0208 	bic.w	r2, r2, #8
 800351e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	2220      	movs	r2, #32
 8003536:	409a      	lsls	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 808f 	beq.w	8003660 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8087 	beq.w	8003660 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	2220      	movs	r2, #32
 8003558:	409a      	lsls	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b05      	cmp	r3, #5
 8003568:	d136      	bne.n	80035d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0216 	bic.w	r2, r2, #22
 8003578:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003588:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d103      	bne.n	800359a <HAL_DMA_IRQHandler+0x1da>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0208 	bic.w	r2, r2, #8
 80035a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	223f      	movs	r2, #63	; 0x3f
 80035b0:	409a      	lsls	r2, r3
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d07e      	beq.n	80036cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
        }
        return;
 80035d6:	e079      	b.n	80036cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01d      	beq.n	8003622 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10d      	bne.n	8003610 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d031      	beq.n	8003660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
 8003604:	e02c      	b.n	8003660 <HAL_DMA_IRQHandler+0x2a0>
 8003606:	bf00      	nop
 8003608:	20000004 	.word	0x20000004
 800360c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d023      	beq.n	8003660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3
 8003620:	e01e      	b.n	8003660 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10f      	bne.n	8003650 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0210 	bic.w	r2, r2, #16
 800363e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	2b00      	cmp	r3, #0
 8003666:	d032      	beq.n	80036ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d022      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2205      	movs	r2, #5
 8003678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	3301      	adds	r3, #1
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	d307      	bcc.n	80036a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f2      	bne.n	800368c <HAL_DMA_IRQHandler+0x2cc>
 80036a6:	e000      	b.n	80036aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
 80036ca:	e000      	b.n	80036ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80036cc:	bf00      	nop
    }
  }
}
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d108      	bne.n	8003714 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003712:	e007      	b.n	8003724 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	60da      	str	r2, [r3, #12]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	3b10      	subs	r3, #16
 8003740:	4a14      	ldr	r2, [pc, #80]	; (8003794 <DMA_CalcBaseAndBitshift+0x64>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800374a:	4a13      	ldr	r2, [pc, #76]	; (8003798 <DMA_CalcBaseAndBitshift+0x68>)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b03      	cmp	r3, #3
 800375c:	d909      	bls.n	8003772 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003766:	f023 0303 	bic.w	r3, r3, #3
 800376a:	1d1a      	adds	r2, r3, #4
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	659a      	str	r2, [r3, #88]	; 0x58
 8003770:	e007      	b.n	8003782 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800377a:	f023 0303 	bic.w	r3, r3, #3
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	aaaaaaab 	.word	0xaaaaaaab
 8003798:	08009788 	.word	0x08009788

0800379c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11f      	bne.n	80037f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d856      	bhi.n	800386a <DMA_CheckFifoParam+0xce>
 80037bc:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <DMA_CheckFifoParam+0x28>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037e7 	.word	0x080037e7
 80037cc:	080037d5 	.word	0x080037d5
 80037d0:	0800386b 	.word	0x0800386b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d046      	beq.n	800386e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e4:	e043      	b.n	800386e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ee:	d140      	bne.n	8003872 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f4:	e03d      	b.n	8003872 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fe:	d121      	bne.n	8003844 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d837      	bhi.n	8003876 <DMA_CheckFifoParam+0xda>
 8003806:	a201      	add	r2, pc, #4	; (adr r2, 800380c <DMA_CheckFifoParam+0x70>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	0800381d 	.word	0x0800381d
 8003810:	08003823 	.word	0x08003823
 8003814:	0800381d 	.word	0x0800381d
 8003818:	08003835 	.word	0x08003835
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      break;
 8003820:	e030      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d025      	beq.n	800387a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003832:	e022      	b.n	800387a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800383c:	d11f      	bne.n	800387e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003842:	e01c      	b.n	800387e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d903      	bls.n	8003852 <DMA_CheckFifoParam+0xb6>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d003      	beq.n	8003858 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003850:	e018      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
      break;
 8003856:	e015      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00e      	beq.n	8003882 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      break;
 8003868:	e00b      	b.n	8003882 <DMA_CheckFifoParam+0xe6>
      break;
 800386a:	bf00      	nop
 800386c:	e00a      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;
 800386e:	bf00      	nop
 8003870:	e008      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;
 8003872:	bf00      	nop
 8003874:	e006      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;
 8003876:	bf00      	nop
 8003878:	e004      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;   
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;
 8003882:	bf00      	nop
    }
  } 
  
  return status; 
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop

08003894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003894:	b480      	push	{r7}
 8003896:	b089      	sub	sp, #36	; 0x24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	e159      	b.n	8003b64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038b0:	2201      	movs	r2, #1
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4013      	ands	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	f040 8148 	bne.w	8003b5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d005      	beq.n	80038e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d130      	bne.n	8003948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	2203      	movs	r2, #3
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800391c:	2201      	movs	r2, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 0201 	and.w	r2, r3, #1
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b03      	cmp	r3, #3
 8003952:	d017      	beq.n	8003984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	2203      	movs	r2, #3
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d123      	bne.n	80039d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	08da      	lsrs	r2, r3, #3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3208      	adds	r2, #8
 8003998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	220f      	movs	r2, #15
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	08da      	lsrs	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3208      	adds	r2, #8
 80039d2:	69b9      	ldr	r1, [r7, #24]
 80039d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	2203      	movs	r2, #3
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0203 	and.w	r2, r3, #3
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a2 	beq.w	8003b5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	4b57      	ldr	r3, [pc, #348]	; (8003b7c <HAL_GPIO_Init+0x2e8>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	4a56      	ldr	r2, [pc, #344]	; (8003b7c <HAL_GPIO_Init+0x2e8>)
 8003a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a28:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2a:	4b54      	ldr	r3, [pc, #336]	; (8003b7c <HAL_GPIO_Init+0x2e8>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a36:	4a52      	ldr	r2, [pc, #328]	; (8003b80 <HAL_GPIO_Init+0x2ec>)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	089b      	lsrs	r3, r3, #2
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	220f      	movs	r2, #15
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a49      	ldr	r2, [pc, #292]	; (8003b84 <HAL_GPIO_Init+0x2f0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d019      	beq.n	8003a96 <HAL_GPIO_Init+0x202>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a48      	ldr	r2, [pc, #288]	; (8003b88 <HAL_GPIO_Init+0x2f4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_GPIO_Init+0x1fe>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a47      	ldr	r2, [pc, #284]	; (8003b8c <HAL_GPIO_Init+0x2f8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00d      	beq.n	8003a8e <HAL_GPIO_Init+0x1fa>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a46      	ldr	r2, [pc, #280]	; (8003b90 <HAL_GPIO_Init+0x2fc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d007      	beq.n	8003a8a <HAL_GPIO_Init+0x1f6>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a45      	ldr	r2, [pc, #276]	; (8003b94 <HAL_GPIO_Init+0x300>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <HAL_GPIO_Init+0x1f2>
 8003a82:	2304      	movs	r3, #4
 8003a84:	e008      	b.n	8003a98 <HAL_GPIO_Init+0x204>
 8003a86:	2307      	movs	r3, #7
 8003a88:	e006      	b.n	8003a98 <HAL_GPIO_Init+0x204>
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e004      	b.n	8003a98 <HAL_GPIO_Init+0x204>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e002      	b.n	8003a98 <HAL_GPIO_Init+0x204>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_GPIO_Init+0x204>
 8003a96:	2300      	movs	r3, #0
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	f002 0203 	and.w	r2, r2, #3
 8003a9e:	0092      	lsls	r2, r2, #2
 8003aa0:	4093      	lsls	r3, r2
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa8:	4935      	ldr	r1, [pc, #212]	; (8003b80 <HAL_GPIO_Init+0x2ec>)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ab6:	4b38      	ldr	r3, [pc, #224]	; (8003b98 <HAL_GPIO_Init+0x304>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ada:	4a2f      	ldr	r2, [pc, #188]	; (8003b98 <HAL_GPIO_Init+0x304>)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_GPIO_Init+0x304>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b04:	4a24      	ldr	r2, [pc, #144]	; (8003b98 <HAL_GPIO_Init+0x304>)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b0a:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <HAL_GPIO_Init+0x304>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b2e:	4a1a      	ldr	r2, [pc, #104]	; (8003b98 <HAL_GPIO_Init+0x304>)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b34:	4b18      	ldr	r3, [pc, #96]	; (8003b98 <HAL_GPIO_Init+0x304>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b58:	4a0f      	ldr	r2, [pc, #60]	; (8003b98 <HAL_GPIO_Init+0x304>)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3301      	adds	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2b0f      	cmp	r3, #15
 8003b68:	f67f aea2 	bls.w	80038b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	3724      	adds	r7, #36	; 0x24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40013800 	.word	0x40013800
 8003b84:	40020000 	.word	0x40020000
 8003b88:	40020400 	.word	0x40020400
 8003b8c:	40020800 	.word	0x40020800
 8003b90:	40020c00 	.word	0x40020c00
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40013c00 	.word	0x40013c00

08003b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
 8003bb8:	e001      	b.n	8003bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bdc:	787b      	ldrb	r3, [r7, #1]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003be8:	e003      	b.n	8003bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	041a      	lsls	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	619a      	str	r2, [r3, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e12b      	b.n	8003e6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fe f9e2 	bl	8001ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c64:	f000 fd80 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8003c68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4a81      	ldr	r2, [pc, #516]	; (8003e74 <HAL_I2C_Init+0x274>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d807      	bhi.n	8003c84 <HAL_I2C_Init+0x84>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a80      	ldr	r2, [pc, #512]	; (8003e78 <HAL_I2C_Init+0x278>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bf94      	ite	ls
 8003c7c:	2301      	movls	r3, #1
 8003c7e:	2300      	movhi	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e006      	b.n	8003c92 <HAL_I2C_Init+0x92>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a7d      	ldr	r2, [pc, #500]	; (8003e7c <HAL_I2C_Init+0x27c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	bf94      	ite	ls
 8003c8c:	2301      	movls	r3, #1
 8003c8e:	2300      	movhi	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0e7      	b.n	8003e6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a78      	ldr	r2, [pc, #480]	; (8003e80 <HAL_I2C_Init+0x280>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	0c9b      	lsrs	r3, r3, #18
 8003ca4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a6a      	ldr	r2, [pc, #424]	; (8003e74 <HAL_I2C_Init+0x274>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d802      	bhi.n	8003cd4 <HAL_I2C_Init+0xd4>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	e009      	b.n	8003ce8 <HAL_I2C_Init+0xe8>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	4a69      	ldr	r2, [pc, #420]	; (8003e84 <HAL_I2C_Init+0x284>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	430b      	orrs	r3, r1
 8003cee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	495c      	ldr	r1, [pc, #368]	; (8003e74 <HAL_I2C_Init+0x274>)
 8003d04:	428b      	cmp	r3, r1
 8003d06:	d819      	bhi.n	8003d3c <HAL_I2C_Init+0x13c>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1e59      	subs	r1, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d1c:	400b      	ands	r3, r1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_I2C_Init+0x138>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1e59      	subs	r1, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d36:	e051      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	e04f      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d111      	bne.n	8003d68 <HAL_I2C_Init+0x168>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e58      	subs	r0, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	440b      	add	r3, r1
 8003d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d56:	3301      	adds	r3, #1
 8003d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e012      	b.n	8003d8e <HAL_I2C_Init+0x18e>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e58      	subs	r0, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	0099      	lsls	r1, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Init+0x196>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e022      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10e      	bne.n	8003dbc <HAL_I2C_Init+0x1bc>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1e58      	subs	r0, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	440b      	add	r3, r1
 8003dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db0:	3301      	adds	r3, #1
 8003db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dba:	e00f      	b.n	8003ddc <HAL_I2C_Init+0x1dc>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1e58      	subs	r0, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	0099      	lsls	r1, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	6809      	ldr	r1, [r1, #0]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6911      	ldr	r1, [r2, #16]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68d2      	ldr	r2, [r2, #12]
 8003e16:	4311      	orrs	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	000186a0 	.word	0x000186a0
 8003e78:	001e847f 	.word	0x001e847f
 8003e7c:	003d08ff 	.word	0x003d08ff
 8003e80:	431bde83 	.word	0x431bde83
 8003e84:	10624dd3 	.word	0x10624dd3

08003e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e267      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d075      	beq.n	8003f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea6:	4b88      	ldr	r3, [pc, #544]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d00c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb2:	4b85      	ldr	r3, [pc, #532]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d112      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ebe:	4b82      	ldr	r3, [pc, #520]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	4b7e      	ldr	r3, [pc, #504]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d05b      	beq.n	8003f90 <HAL_RCC_OscConfig+0x108>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d157      	bne.n	8003f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e242      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d106      	bne.n	8003efc <HAL_RCC_OscConfig+0x74>
 8003eee:	4b76      	ldr	r3, [pc, #472]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a75      	ldr	r2, [pc, #468]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e01d      	b.n	8003f38 <HAL_RCC_OscConfig+0xb0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x98>
 8003f06:	4b70      	ldr	r3, [pc, #448]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a6f      	ldr	r2, [pc, #444]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b6d      	ldr	r3, [pc, #436]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6c      	ldr	r2, [pc, #432]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0xb0>
 8003f20:	4b69      	ldr	r3, [pc, #420]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a68      	ldr	r2, [pc, #416]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b66      	ldr	r3, [pc, #408]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a65      	ldr	r2, [pc, #404]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe fcde 	bl	8002900 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fe fcda 	bl	8002900 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e207      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b5b      	ldr	r3, [pc, #364]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0xc0>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe fcca 	bl	8002900 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fe fcc6 	bl	8002900 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e1f3      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	4b51      	ldr	r3, [pc, #324]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0xe8>
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d063      	beq.n	8004066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f9e:	4b4a      	ldr	r3, [pc, #296]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003faa:	4b47      	ldr	r3, [pc, #284]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d11c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb6:	4b44      	ldr	r3, [pc, #272]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d116      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	4b41      	ldr	r3, [pc, #260]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_OscConfig+0x152>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e1c7      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fda:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4937      	ldr	r1, [pc, #220]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fee:	e03a      	b.n	8004066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d020      	beq.n	800403a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff8:	4b34      	ldr	r3, [pc, #208]	; (80040cc <HAL_RCC_OscConfig+0x244>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fe fc7f 	bl	8002900 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004006:	f7fe fc7b 	bl	8002900 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1a8      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004018:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004024:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4925      	ldr	r1, [pc, #148]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 8004034:	4313      	orrs	r3, r2
 8004036:	600b      	str	r3, [r1, #0]
 8004038:	e015      	b.n	8004066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <HAL_RCC_OscConfig+0x244>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fe fc5e 	bl	8002900 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004048:	f7fe fc5a 	bl	8002900 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e187      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d036      	beq.n	80040e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407a:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <HAL_RCC_OscConfig+0x248>)
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fe fc3e 	bl	8002900 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004088:	f7fe fc3a 	bl	8002900 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e167      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409a:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <HAL_RCC_OscConfig+0x240>)
 800409c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x200>
 80040a6:	e01b      	b.n	80040e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_RCC_OscConfig+0x248>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ae:	f7fe fc27 	bl	8002900 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b4:	e00e      	b.n	80040d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b6:	f7fe fc23 	bl	8002900 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d907      	bls.n	80040d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e150      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
 80040c8:	40023800 	.word	0x40023800
 80040cc:	42470000 	.word	0x42470000
 80040d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d4:	4b88      	ldr	r3, [pc, #544]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80040d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ea      	bne.n	80040b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8097 	beq.w	800421c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f2:	4b81      	ldr	r3, [pc, #516]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10f      	bne.n	800411e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	4b7d      	ldr	r3, [pc, #500]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	4a7c      	ldr	r2, [pc, #496]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410c:	6413      	str	r3, [r2, #64]	; 0x40
 800410e:	4b7a      	ldr	r3, [pc, #488]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b77      	ldr	r3, [pc, #476]	; (80042fc <HAL_RCC_OscConfig+0x474>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412a:	4b74      	ldr	r3, [pc, #464]	; (80042fc <HAL_RCC_OscConfig+0x474>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a73      	ldr	r2, [pc, #460]	; (80042fc <HAL_RCC_OscConfig+0x474>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fe fbe3 	bl	8002900 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fe fbdf 	bl	8002900 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e10c      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b6a      	ldr	r3, [pc, #424]	; (80042fc <HAL_RCC_OscConfig+0x474>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x2ea>
 8004164:	4b64      	ldr	r3, [pc, #400]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	4a63      	ldr	r2, [pc, #396]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6713      	str	r3, [r2, #112]	; 0x70
 8004170:	e01c      	b.n	80041ac <HAL_RCC_OscConfig+0x324>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b05      	cmp	r3, #5
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x30c>
 800417a:	4b5f      	ldr	r3, [pc, #380]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	4a5e      	ldr	r2, [pc, #376]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004180:	f043 0304 	orr.w	r3, r3, #4
 8004184:	6713      	str	r3, [r2, #112]	; 0x70
 8004186:	4b5c      	ldr	r3, [pc, #368]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a5b      	ldr	r2, [pc, #364]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
 8004192:	e00b      	b.n	80041ac <HAL_RCC_OscConfig+0x324>
 8004194:	4b58      	ldr	r3, [pc, #352]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	4a57      	ldr	r2, [pc, #348]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800419a:	f023 0301 	bic.w	r3, r3, #1
 800419e:	6713      	str	r3, [r2, #112]	; 0x70
 80041a0:	4b55      	ldr	r3, [pc, #340]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	4a54      	ldr	r2, [pc, #336]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80041a6:	f023 0304 	bic.w	r3, r3, #4
 80041aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d015      	beq.n	80041e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fe fba4 	bl	8002900 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fe fba0 	bl	8002900 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e0cb      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d2:	4b49      	ldr	r3, [pc, #292]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0ee      	beq.n	80041bc <HAL_RCC_OscConfig+0x334>
 80041de:	e014      	b.n	800420a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e0:	f7fe fb8e 	bl	8002900 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e8:	f7fe fb8a 	bl	8002900 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e0b5      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fe:	4b3e      	ldr	r3, [pc, #248]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1ee      	bne.n	80041e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004210:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	4a38      	ldr	r2, [pc, #224]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a1 	beq.w	8004368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004226:	4b34      	ldr	r3, [pc, #208]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b08      	cmp	r3, #8
 8004230:	d05c      	beq.n	80042ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d141      	bne.n	80042be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423a:	4b31      	ldr	r3, [pc, #196]	; (8004300 <HAL_RCC_OscConfig+0x478>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fe fb5e 	bl	8002900 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004248:	f7fe fb5a 	bl	8002900 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e087      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	019b      	lsls	r3, r3, #6
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	3b01      	subs	r3, #1
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	061b      	lsls	r3, r3, #24
 800428a:	491b      	ldr	r1, [pc, #108]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 800428c:	4313      	orrs	r3, r2
 800428e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004290:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x478>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004296:	f7fe fb33 	bl	8002900 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800429e:	f7fe fb2f 	bl	8002900 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e05c      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x416>
 80042bc:	e054      	b.n	8004368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_RCC_OscConfig+0x478>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fe fb1c 	bl	8002900 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fe fb18 	bl	8002900 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e045      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCC_OscConfig+0x470>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x444>
 80042ea:	e03d      	b.n	8004368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e038      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40007000 	.word	0x40007000
 8004300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_RCC_OscConfig+0x4ec>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d028      	beq.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d121      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d11a      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800433a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800433c:	4293      	cmp	r3, r2
 800433e:	d111      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	3b01      	subs	r3, #1
 800434e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d107      	bne.n	8004364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0cc      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800438c:	4b68      	ldr	r3, [pc, #416]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d90c      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b65      	ldr	r3, [pc, #404]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b63      	ldr	r3, [pc, #396]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0b8      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043cc:	4b59      	ldr	r3, [pc, #356]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4a58      	ldr	r2, [pc, #352]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e4:	4b53      	ldr	r3, [pc, #332]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4a52      	ldr	r2, [pc, #328]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f0:	4b50      	ldr	r3, [pc, #320]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	494d      	ldr	r1, [pc, #308]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d044      	beq.n	8004498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	4b47      	ldr	r3, [pc, #284]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d119      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e07f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d003      	beq.n	8004436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004432:	2b03      	cmp	r3, #3
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004436:	4b3f      	ldr	r3, [pc, #252]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e06f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004446:	4b3b      	ldr	r3, [pc, #236]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e067      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004456:	4b37      	ldr	r3, [pc, #220]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f023 0203 	bic.w	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4934      	ldr	r1, [pc, #208]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004468:	f7fe fa4a 	bl	8002900 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	e00a      	b.n	8004486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004470:	f7fe fa46 	bl	8002900 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e04f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004486:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 020c 	and.w	r2, r3, #12
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	429a      	cmp	r2, r3
 8004496:	d1eb      	bne.n	8004470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004498:	4b25      	ldr	r3, [pc, #148]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d20c      	bcs.n	80044c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b22      	ldr	r3, [pc, #136]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e032      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044cc:	4b19      	ldr	r3, [pc, #100]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4916      	ldr	r1, [pc, #88]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	490e      	ldr	r1, [pc, #56]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044fe:	f000 f821 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 8004502:	4602      	mov	r2, r0
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	490a      	ldr	r1, [pc, #40]	; (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 8004510:	5ccb      	ldrb	r3, [r1, r3]
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	4a09      	ldr	r2, [pc, #36]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800451a:	4b09      	ldr	r3, [pc, #36]	; (8004540 <HAL_RCC_ClockConfig+0x1c8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe f9aa 	bl	8002878 <HAL_InitTick>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40023c00 	.word	0x40023c00
 8004534:	40023800 	.word	0x40023800
 8004538:	08009770 	.word	0x08009770
 800453c:	20000004 	.word	0x20000004
 8004540:	20000008 	.word	0x20000008

08004544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004548:	b094      	sub	sp, #80	; 0x50
 800454a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	647b      	str	r3, [r7, #68]	; 0x44
 8004550:	2300      	movs	r3, #0
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004554:	2300      	movs	r3, #0
 8004556:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800455c:	4b79      	ldr	r3, [pc, #484]	; (8004744 <HAL_RCC_GetSysClockFreq+0x200>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 030c 	and.w	r3, r3, #12
 8004564:	2b08      	cmp	r3, #8
 8004566:	d00d      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x40>
 8004568:	2b08      	cmp	r3, #8
 800456a:	f200 80e1 	bhi.w	8004730 <HAL_RCC_GetSysClockFreq+0x1ec>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x34>
 8004572:	2b04      	cmp	r3, #4
 8004574:	d003      	beq.n	800457e <HAL_RCC_GetSysClockFreq+0x3a>
 8004576:	e0db      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004578:	4b73      	ldr	r3, [pc, #460]	; (8004748 <HAL_RCC_GetSysClockFreq+0x204>)
 800457a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800457c:	e0db      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800457e:	4b73      	ldr	r3, [pc, #460]	; (800474c <HAL_RCC_GetSysClockFreq+0x208>)
 8004580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004582:	e0d8      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004584:	4b6f      	ldr	r3, [pc, #444]	; (8004744 <HAL_RCC_GetSysClockFreq+0x200>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800458c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800458e:	4b6d      	ldr	r3, [pc, #436]	; (8004744 <HAL_RCC_GetSysClockFreq+0x200>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d063      	beq.n	8004662 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459a:	4b6a      	ldr	r3, [pc, #424]	; (8004744 <HAL_RCC_GetSysClockFreq+0x200>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	099b      	lsrs	r3, r3, #6
 80045a0:	2200      	movs	r2, #0
 80045a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ac:	633b      	str	r3, [r7, #48]	; 0x30
 80045ae:	2300      	movs	r3, #0
 80045b0:	637b      	str	r3, [r7, #52]	; 0x34
 80045b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045b6:	4622      	mov	r2, r4
 80045b8:	462b      	mov	r3, r5
 80045ba:	f04f 0000 	mov.w	r0, #0
 80045be:	f04f 0100 	mov.w	r1, #0
 80045c2:	0159      	lsls	r1, r3, #5
 80045c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c8:	0150      	lsls	r0, r2, #5
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4621      	mov	r1, r4
 80045d0:	1a51      	subs	r1, r2, r1
 80045d2:	6139      	str	r1, [r7, #16]
 80045d4:	4629      	mov	r1, r5
 80045d6:	eb63 0301 	sbc.w	r3, r3, r1
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045e8:	4659      	mov	r1, fp
 80045ea:	018b      	lsls	r3, r1, #6
 80045ec:	4651      	mov	r1, sl
 80045ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045f2:	4651      	mov	r1, sl
 80045f4:	018a      	lsls	r2, r1, #6
 80045f6:	4651      	mov	r1, sl
 80045f8:	ebb2 0801 	subs.w	r8, r2, r1
 80045fc:	4659      	mov	r1, fp
 80045fe:	eb63 0901 	sbc.w	r9, r3, r1
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800460e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004616:	4690      	mov	r8, r2
 8004618:	4699      	mov	r9, r3
 800461a:	4623      	mov	r3, r4
 800461c:	eb18 0303 	adds.w	r3, r8, r3
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	462b      	mov	r3, r5
 8004624:	eb49 0303 	adc.w	r3, r9, r3
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004636:	4629      	mov	r1, r5
 8004638:	024b      	lsls	r3, r1, #9
 800463a:	4621      	mov	r1, r4
 800463c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004640:	4621      	mov	r1, r4
 8004642:	024a      	lsls	r2, r1, #9
 8004644:	4610      	mov	r0, r2
 8004646:	4619      	mov	r1, r3
 8004648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800464a:	2200      	movs	r2, #0
 800464c:	62bb      	str	r3, [r7, #40]	; 0x28
 800464e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004654:	f7fc fab0 	bl	8000bb8 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4613      	mov	r3, r2
 800465e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004660:	e058      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004662:	4b38      	ldr	r3, [pc, #224]	; (8004744 <HAL_RCC_GetSysClockFreq+0x200>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	099b      	lsrs	r3, r3, #6
 8004668:	2200      	movs	r2, #0
 800466a:	4618      	mov	r0, r3
 800466c:	4611      	mov	r1, r2
 800466e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004672:	623b      	str	r3, [r7, #32]
 8004674:	2300      	movs	r3, #0
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
 8004678:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800467c:	4642      	mov	r2, r8
 800467e:	464b      	mov	r3, r9
 8004680:	f04f 0000 	mov.w	r0, #0
 8004684:	f04f 0100 	mov.w	r1, #0
 8004688:	0159      	lsls	r1, r3, #5
 800468a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800468e:	0150      	lsls	r0, r2, #5
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4641      	mov	r1, r8
 8004696:	ebb2 0a01 	subs.w	sl, r2, r1
 800469a:	4649      	mov	r1, r9
 800469c:	eb63 0b01 	sbc.w	fp, r3, r1
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046b4:	ebb2 040a 	subs.w	r4, r2, sl
 80046b8:	eb63 050b 	sbc.w	r5, r3, fp
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	00eb      	lsls	r3, r5, #3
 80046c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ca:	00e2      	lsls	r2, r4, #3
 80046cc:	4614      	mov	r4, r2
 80046ce:	461d      	mov	r5, r3
 80046d0:	4643      	mov	r3, r8
 80046d2:	18e3      	adds	r3, r4, r3
 80046d4:	603b      	str	r3, [r7, #0]
 80046d6:	464b      	mov	r3, r9
 80046d8:	eb45 0303 	adc.w	r3, r5, r3
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046ea:	4629      	mov	r1, r5
 80046ec:	028b      	lsls	r3, r1, #10
 80046ee:	4621      	mov	r1, r4
 80046f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046f4:	4621      	mov	r1, r4
 80046f6:	028a      	lsls	r2, r1, #10
 80046f8:	4610      	mov	r0, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fe:	2200      	movs	r2, #0
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	61fa      	str	r2, [r7, #28]
 8004704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004708:	f7fc fa56 	bl	8000bb8 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4613      	mov	r3, r2
 8004712:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_GetSysClockFreq+0x200>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	3301      	adds	r3, #1
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800472e:	e002      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_RCC_GetSysClockFreq+0x204>)
 8004732:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004738:	4618      	mov	r0, r3
 800473a:	3750      	adds	r7, #80	; 0x50
 800473c:	46bd      	mov	sp, r7
 800473e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	00f42400 	.word	0x00f42400
 800474c:	007a1200 	.word	0x007a1200

08004750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <HAL_RCC_GetHCLKFreq+0x14>)
 8004756:	681b      	ldr	r3, [r3, #0]
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000004 	.word	0x20000004

08004768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800476c:	f7ff fff0 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0a9b      	lsrs	r3, r3, #10
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4903      	ldr	r1, [pc, #12]	; (800478c <HAL_RCC_GetPCLK1Freq+0x24>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	08009780 	.word	0x08009780

08004790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004794:	f7ff ffdc 	bl	8004750 <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	0b5b      	lsrs	r3, r3, #13
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4903      	ldr	r1, [pc, #12]	; (80047b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40023800 	.word	0x40023800
 80047b4:	08009780 	.word	0x08009780

080047b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e07b      	b.n	80048c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d108      	bne.n	80047e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047da:	d009      	beq.n	80047f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	61da      	str	r2, [r3, #28]
 80047e2:	e005      	b.n	80047f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fd fc38 	bl	8002080 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004826:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	ea42 0103 	orr.w	r1, r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	f003 0104 	and.w	r1, r3, #4
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	f003 0210 	and.w	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b088      	sub	sp, #32
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_SPI_Transmit+0x22>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e126      	b.n	8004b3a <HAL_SPI_Transmit+0x270>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048f4:	f7fe f804 	bl	8002900 <HAL_GetTick>
 80048f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b01      	cmp	r3, #1
 8004908:	d002      	beq.n	8004910 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800490a:	2302      	movs	r3, #2
 800490c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800490e:	e10b      	b.n	8004b28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_SPI_Transmit+0x52>
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d102      	bne.n	8004922 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004920:	e102      	b.n	8004b28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2203      	movs	r2, #3
 8004926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	88fa      	ldrh	r2, [r7, #6]
 800493a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004968:	d10f      	bne.n	800498a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004978:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004988:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d007      	beq.n	80049a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b0:	d14b      	bne.n	8004a4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_SPI_Transmit+0xf6>
 80049ba:	8afb      	ldrh	r3, [r7, #22]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d13e      	bne.n	8004a3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	881a      	ldrh	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	1c9a      	adds	r2, r3, #2
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049e4:	e02b      	b.n	8004a3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d112      	bne.n	8004a1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	881a      	ldrh	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	1c9a      	adds	r2, r3, #2
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a18:	e011      	b.n	8004a3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a1a:	f7fd ff71 	bl	8002900 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d803      	bhi.n	8004a32 <HAL_SPI_Transmit+0x168>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d102      	bne.n	8004a38 <HAL_SPI_Transmit+0x16e>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a3c:	e074      	b.n	8004b28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1ce      	bne.n	80049e6 <HAL_SPI_Transmit+0x11c>
 8004a48:	e04c      	b.n	8004ae4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_SPI_Transmit+0x18e>
 8004a52:	8afb      	ldrh	r3, [r7, #22]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d140      	bne.n	8004ada <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	7812      	ldrb	r2, [r2, #0]
 8004a64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a7e:	e02c      	b.n	8004ada <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d113      	bne.n	8004ab6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	7812      	ldrb	r2, [r2, #0]
 8004a9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ab4:	e011      	b.n	8004ada <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ab6:	f7fd ff23 	bl	8002900 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d803      	bhi.n	8004ace <HAL_SPI_Transmit+0x204>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d102      	bne.n	8004ad4 <HAL_SPI_Transmit+0x20a>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ad8:	e026      	b.n	8004b28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1cd      	bne.n	8004a80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	6839      	ldr	r1, [r7, #0]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fa55 	bl	8004f98 <SPI_EndRxTxTransaction>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e000      	b.n	8004b28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b38:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3720      	adds	r7, #32
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b08c      	sub	sp, #48	; 0x30
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b50:	2301      	movs	r3, #1
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x26>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e18a      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x33c>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b70:	f7fd fec6 	bl	8002900 <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b86:	887b      	ldrh	r3, [r7, #2]
 8004b88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d00f      	beq.n	8004bb2 <HAL_SPI_TransmitReceive+0x70>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b98:	d107      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x68>
 8004ba2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d003      	beq.n	8004bb2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004baa:	2302      	movs	r3, #2
 8004bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bb0:	e15b      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_SPI_TransmitReceive+0x82>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_SPI_TransmitReceive+0x82>
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bca:	e14e      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d003      	beq.n	8004be0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2205      	movs	r2, #5
 8004bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	887a      	ldrh	r2, [r7, #2]
 8004bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	887a      	ldrh	r2, [r7, #2]
 8004bf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	887a      	ldrh	r2, [r7, #2]
 8004c02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	887a      	ldrh	r2, [r7, #2]
 8004c08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d007      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3c:	d178      	bne.n	8004d30 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_TransmitReceive+0x10a>
 8004c46:	8b7b      	ldrh	r3, [r7, #26]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d166      	bne.n	8004d1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	1c9a      	adds	r2, r3, #2
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c70:	e053      	b.n	8004d1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_SPI_TransmitReceive+0x176>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d016      	beq.n	8004cb8 <HAL_SPI_TransmitReceive+0x176>
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d113      	bne.n	8004cb8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	881a      	ldrh	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	1c9a      	adds	r2, r3, #2
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d119      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x1b8>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d014      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	b292      	uxth	r2, r2
 8004cdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	1c9a      	adds	r2, r3, #2
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cfa:	f7fd fe01 	bl	8002900 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d807      	bhi.n	8004d1a <HAL_SPI_TransmitReceive+0x1d8>
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d003      	beq.n	8004d1a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d18:	e0a7      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1a6      	bne.n	8004c72 <HAL_SPI_TransmitReceive+0x130>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1a1      	bne.n	8004c72 <HAL_SPI_TransmitReceive+0x130>
 8004d2e:	e07c      	b.n	8004e2a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_SPI_TransmitReceive+0x1fc>
 8004d38:	8b7b      	ldrh	r3, [r7, #26]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d16b      	bne.n	8004e16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	330c      	adds	r3, #12
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d64:	e057      	b.n	8004e16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d11c      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x26c>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d017      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x26c>
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d114      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	330c      	adds	r3, #12
 8004d8e:	7812      	ldrb	r2, [r2, #0]
 8004d90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d119      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x2ae>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d014      	beq.n	8004df0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dec:	2301      	movs	r3, #1
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004df0:	f7fd fd86 	bl	8002900 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d803      	bhi.n	8004e08 <HAL_SPI_TransmitReceive+0x2c6>
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e06:	d102      	bne.n	8004e0e <HAL_SPI_TransmitReceive+0x2cc>
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e14:	e029      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1a2      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x224>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d19d      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f8b2 	bl	8004f98 <SPI_EndRxTxTransaction>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d006      	beq.n	8004e48 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e46:	e010      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	e000      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004e68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3730      	adds	r7, #48	; 0x30
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e98:	f7fd fd32 	bl	8002900 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ea8:	f7fd fd2a 	bl	8002900 <HAL_GetTick>
 8004eac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eae:	4b39      	ldr	r3, [pc, #228]	; (8004f94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	015b      	lsls	r3, r3, #5
 8004eb4:	0d1b      	lsrs	r3, r3, #20
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	fb02 f303 	mul.w	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ebe:	e054      	b.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d050      	beq.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ec8:	f7fd fd1a 	bl	8002900 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d902      	bls.n	8004ede <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d13d      	bne.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef6:	d111      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f00:	d004      	beq.n	8004f0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0a:	d107      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f24:	d10f      	bne.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e017      	b.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4013      	ands	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d19b      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000004 	.word	0x20000004

08004f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <SPI_EndRxTxTransaction+0x7c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <SPI_EndRxTxTransaction+0x80>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	0d5b      	lsrs	r3, r3, #21
 8004fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc2:	d112      	bne.n	8004fea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7ff ff5a 	bl	8004e88 <SPI_WaitFlagStateUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d016      	beq.n	8005008 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fde:	f043 0220 	orr.w	r2, r3, #32
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e00f      	b.n	800500a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005000:	2b80      	cmp	r3, #128	; 0x80
 8005002:	d0f2      	beq.n	8004fea <SPI_EndRxTxTransaction+0x52>
 8005004:	e000      	b.n	8005008 <SPI_EndRxTxTransaction+0x70>
        break;
 8005006:	bf00      	nop
  }

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000004 	.word	0x20000004
 8005018:	165e9f81 	.word	0x165e9f81

0800501c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e041      	b.n	80050b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fd f8ba 	bl	80021bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f000 f9fe 	bl	800545c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d001      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e044      	b.n	800515e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1e      	ldr	r2, [pc, #120]	; (800516c <HAL_TIM_Base_Start_IT+0xb0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d018      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x6c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fe:	d013      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x6c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <HAL_TIM_Base_Start_IT+0xb4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x6c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a19      	ldr	r2, [pc, #100]	; (8005174 <HAL_TIM_Base_Start_IT+0xb8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d009      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x6c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a17      	ldr	r2, [pc, #92]	; (8005178 <HAL_TIM_Base_Start_IT+0xbc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x6c>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a16      	ldr	r2, [pc, #88]	; (800517c <HAL_TIM_Base_Start_IT+0xc0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d111      	bne.n	800514c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b06      	cmp	r3, #6
 8005138:	d010      	beq.n	800515c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0201 	orr.w	r2, r2, #1
 8005148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514a:	e007      	b.n	800515c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40014000 	.word	0x40014000

08005180 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a1a      	ldr	r2, [r3, #32]
 800519e:	f241 1311 	movw	r3, #4369	; 0x1111
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10f      	bne.n	80051c8 <HAL_TIM_Base_Stop_IT+0x48>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	f240 4344 	movw	r3, #1092	; 0x444
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d107      	bne.n	80051c8 <HAL_TIM_Base_Stop_IT+0x48>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d122      	bne.n	800523a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d11b      	bne.n	800523a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f06f 0202 	mvn.w	r2, #2
 800520a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f8ee 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 8005226:	e005      	b.n	8005234 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f8e0 	bl	80053ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8f1 	bl	8005416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b04      	cmp	r3, #4
 8005246:	d122      	bne.n	800528e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b04      	cmp	r3, #4
 8005254:	d11b      	bne.n	800528e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f06f 0204 	mvn.w	r2, #4
 800525e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8c4 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 800527a:	e005      	b.n	8005288 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f8b6 	bl	80053ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f8c7 	bl	8005416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b08      	cmp	r3, #8
 800529a:	d122      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d11b      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f06f 0208 	mvn.w	r2, #8
 80052b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2204      	movs	r2, #4
 80052b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f89a 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 80052ce:	e005      	b.n	80052dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f88c 	bl	80053ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f89d 	bl	8005416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d122      	bne.n	8005336 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d11b      	bne.n	8005336 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f06f 0210 	mvn.w	r2, #16
 8005306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2208      	movs	r2, #8
 800530c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f870 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 8005322:	e005      	b.n	8005330 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f862 	bl	80053ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f873 	bl	8005416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b01      	cmp	r3, #1
 8005342:	d10e      	bne.n	8005362 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d107      	bne.n	8005362 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0201 	mvn.w	r2, #1
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fc fab7 	bl	80018d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b80      	cmp	r3, #128	; 0x80
 800536e:	d10e      	bne.n	800538e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537a:	2b80      	cmp	r3, #128	; 0x80
 800537c:	d107      	bne.n	800538e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f8f1 	bl	8005570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005398:	2b40      	cmp	r3, #64	; 0x40
 800539a:	d10e      	bne.n	80053ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d107      	bne.n	80053ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f838 	bl	800542a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d10e      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d107      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f06f 0220 	mvn.w	r2, #32
 80053de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f8bb 	bl	800555c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544c:	b2db      	uxtb	r3, r3
}
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a34      	ldr	r2, [pc, #208]	; (8005540 <TIM_Base_SetConfig+0xe4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00f      	beq.n	8005494 <TIM_Base_SetConfig+0x38>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547a:	d00b      	beq.n	8005494 <TIM_Base_SetConfig+0x38>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a31      	ldr	r2, [pc, #196]	; (8005544 <TIM_Base_SetConfig+0xe8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d007      	beq.n	8005494 <TIM_Base_SetConfig+0x38>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a30      	ldr	r2, [pc, #192]	; (8005548 <TIM_Base_SetConfig+0xec>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_Base_SetConfig+0x38>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a2f      	ldr	r2, [pc, #188]	; (800554c <TIM_Base_SetConfig+0xf0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d108      	bne.n	80054a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a25      	ldr	r2, [pc, #148]	; (8005540 <TIM_Base_SetConfig+0xe4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d01b      	beq.n	80054e6 <TIM_Base_SetConfig+0x8a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b4:	d017      	beq.n	80054e6 <TIM_Base_SetConfig+0x8a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a22      	ldr	r2, [pc, #136]	; (8005544 <TIM_Base_SetConfig+0xe8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <TIM_Base_SetConfig+0x8a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a21      	ldr	r2, [pc, #132]	; (8005548 <TIM_Base_SetConfig+0xec>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00f      	beq.n	80054e6 <TIM_Base_SetConfig+0x8a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a20      	ldr	r2, [pc, #128]	; (800554c <TIM_Base_SetConfig+0xf0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <TIM_Base_SetConfig+0x8a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <TIM_Base_SetConfig+0xf4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <TIM_Base_SetConfig+0x8a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <TIM_Base_SetConfig+0xf8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_Base_SetConfig+0x8a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <TIM_Base_SetConfig+0xfc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d108      	bne.n	80054f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a08      	ldr	r2, [pc, #32]	; (8005540 <TIM_Base_SetConfig+0xe4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d103      	bne.n	800552c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	615a      	str	r2, [r3, #20]
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40010000 	.word	0x40010000
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800
 800554c:	40000c00 	.word	0x40000c00
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400
 8005558:	40014800 	.word	0x40014800

0800555c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e03f      	b.n	8005616 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc fe2e 	bl	800220c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2224      	movs	r2, #36	; 0x24
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 ff5f 	bl	800648c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b08a      	sub	sp, #40	; 0x28
 8005622:	af02      	add	r7, sp, #8
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b20      	cmp	r3, #32
 800563c:	d17c      	bne.n	8005738 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_UART_Transmit+0x2c>
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e075      	b.n	800573a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_UART_Transmit+0x3e>
 8005658:	2302      	movs	r3, #2
 800565a:	e06e      	b.n	800573a <HAL_UART_Transmit+0x11c>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2221      	movs	r2, #33	; 0x21
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005672:	f7fd f945 	bl	8002900 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	88fa      	ldrh	r2, [r7, #6]
 8005682:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568c:	d108      	bne.n	80056a0 <HAL_UART_Transmit+0x82>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	e003      	b.n	80056a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056b0:	e02a      	b.n	8005708 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fc17 	bl	8005ef0 <UART_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e036      	b.n	800573a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	3302      	adds	r3, #2
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	e007      	b.n	80056fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	3301      	adds	r3, #1
 80056f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1cf      	bne.n	80056b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2200      	movs	r2, #0
 800571a:	2140      	movs	r1, #64	; 0x40
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fbe7 	bl	8005ef0 <UART_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e006      	b.n	800573a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	e000      	b.n	800573a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	4613      	mov	r3, r2
 800574e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b20      	cmp	r3, #32
 800575a:	d11d      	bne.n	8005798 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_UART_Receive_DMA+0x26>
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e016      	b.n	800579a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_UART_Receive_DMA+0x38>
 8005776:	2302      	movs	r3, #2
 8005778:	e00f      	b.n	800579a <HAL_UART_Receive_DMA+0x58>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005788:	88fb      	ldrh	r3, [r7, #6]
 800578a:	461a      	mov	r2, r3
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 fc1c 	bl	8005fcc <UART_Start_Receive_DMA>
 8005794:	4603      	mov	r3, r0
 8005796:	e000      	b.n	800579a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005798:	2302      	movs	r3, #2
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b0ba      	sub	sp, #232	; 0xe8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80057e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10f      	bne.n	800580a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <HAL_UART_IRQHandler+0x66>
 80057f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fd87 	bl	8006316 <UART_Receive_IT>
      return;
 8005808:	e256      	b.n	8005cb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800580a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 80de 	beq.w	80059d0 <HAL_UART_IRQHandler+0x22c>
 8005814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005824:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 80d1 	beq.w	80059d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800582e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00b      	beq.n	8005852 <HAL_UART_IRQHandler+0xae>
 800583a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800583e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f043 0201 	orr.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00b      	beq.n	8005876 <HAL_UART_IRQHandler+0xd2>
 800585e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	f043 0202 	orr.w	r2, r3, #2
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <HAL_UART_IRQHandler+0xf6>
 8005882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f043 0204 	orr.w	r2, r3, #4
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d011      	beq.n	80058ca <HAL_UART_IRQHandler+0x126>
 80058a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d105      	bne.n	80058be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f043 0208 	orr.w	r2, r3, #8
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 81ed 	beq.w	8005cae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_UART_IRQHandler+0x14e>
 80058e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fd12 	bl	8006316 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	bf0c      	ite	eq
 8005900:	2301      	moveq	r3, #1
 8005902:	2300      	movne	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d103      	bne.n	800591e <HAL_UART_IRQHandler+0x17a>
 8005916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d04f      	beq.n	80059be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fc1a 	bl	8006158 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b40      	cmp	r3, #64	; 0x40
 8005930:	d141      	bne.n	80059b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3314      	adds	r3, #20
 8005938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800594c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3314      	adds	r3, #20
 800595a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800595e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800596a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1d9      	bne.n	8005932 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	2b00      	cmp	r3, #0
 8005984:	d013      	beq.n	80059ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	4a7d      	ldr	r2, [pc, #500]	; (8005b80 <HAL_UART_IRQHandler+0x3dc>)
 800598c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	4618      	mov	r0, r3
 8005994:	f7fd fcf2 	bl	800337c <HAL_DMA_Abort_IT>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d016      	beq.n	80059cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059a8:	4610      	mov	r0, r2
 80059aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ac:	e00e      	b.n	80059cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f990 	bl	8005cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b4:	e00a      	b.n	80059cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f98c 	bl	8005cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059bc:	e006      	b.n	80059cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f988 	bl	8005cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80059ca:	e170      	b.n	8005cae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059cc:	bf00      	nop
    return;
 80059ce:	e16e      	b.n	8005cae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	f040 814a 	bne.w	8005c6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 8143 	beq.w	8005c6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 813c 	beq.w	8005c6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059f6:	2300      	movs	r3, #0
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60bb      	str	r3, [r7, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	f040 80b4 	bne.w	8005b84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8140 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	f080 8139 	bcs.w	8005cb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a52:	f000 8088 	beq.w	8005b66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1d9      	bne.n	8005a56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3314      	adds	r3, #20
 8005aa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
 8005ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3314      	adds	r3, #20
 8005ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ac6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005aca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ace:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e1      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3314      	adds	r3, #20
 8005ae4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3314      	adds	r3, #20
 8005afe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e3      	bne.n	8005ade <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b36:	f023 0310 	bic.w	r3, r3, #16
 8005b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b48:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e3      	bne.n	8005b24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fd fb9b 	bl	800329c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f8b6 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b7c:	e099      	b.n	8005cb2 <HAL_UART_IRQHandler+0x50e>
 8005b7e:	bf00      	nop
 8005b80:	0800621f 	.word	0x0800621f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 808b 	beq.w	8005cb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8086 	beq.w	8005cb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005bce:	647a      	str	r2, [r7, #68]	; 0x44
 8005bd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e3      	bne.n	8005baa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3314      	adds	r3, #20
 8005c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c06:	633a      	str	r2, [r7, #48]	; 0x30
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e3      	bne.n	8005be2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0310 	bic.w	r3, r3, #16
 8005c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c4c:	61fa      	str	r2, [r7, #28]
 8005c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	69b9      	ldr	r1, [r7, #24]
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	617b      	str	r3, [r7, #20]
   return(result);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e3      	bne.n	8005c28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f83e 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c6c:	e023      	b.n	8005cb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d009      	beq.n	8005c8e <HAL_UART_IRQHandler+0x4ea>
 8005c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fadd 	bl	8006246 <UART_Transmit_IT>
    return;
 8005c8c:	e014      	b.n	8005cb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00e      	beq.n	8005cb8 <HAL_UART_IRQHandler+0x514>
 8005c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d008      	beq.n	8005cb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fb1d 	bl	80062e6 <UART_EndTransmit_IT>
    return;
 8005cac:	e004      	b.n	8005cb8 <HAL_UART_IRQHandler+0x514>
    return;
 8005cae:	bf00      	nop
 8005cb0:	e002      	b.n	8005cb8 <HAL_UART_IRQHandler+0x514>
      return;
 8005cb2:	bf00      	nop
 8005cb4:	e000      	b.n	8005cb8 <HAL_UART_IRQHandler+0x514>
      return;
 8005cb6:	bf00      	nop
  }
}
 8005cb8:	37e8      	adds	r7, #232	; 0xe8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop

08005cc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b09c      	sub	sp, #112	; 0x70
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d172      	bne.n	8005e02 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1e:	2200      	movs	r2, #0
 8005d20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d42:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e5      	bne.n	8005d22 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3314      	adds	r3, #20
 8005d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	667b      	str	r3, [r7, #100]	; 0x64
 8005d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3314      	adds	r3, #20
 8005d74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005d76:	647a      	str	r2, [r7, #68]	; 0x44
 8005d78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e5      	bne.n	8005d56 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3314      	adds	r3, #20
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	623b      	str	r3, [r7, #32]
   return(result);
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da0:	663b      	str	r3, [r7, #96]	; 0x60
 8005da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3314      	adds	r3, #20
 8005da8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005daa:	633a      	str	r2, [r7, #48]	; 0x30
 8005dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e5      	bne.n	8005d8a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d119      	bne.n	8005e02 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f023 0310 	bic.w	r3, r3, #16
 8005de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	330c      	adds	r3, #12
 8005dec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005dee:	61fa      	str	r2, [r7, #28]
 8005df0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	69b9      	ldr	r1, [r7, #24]
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e5      	bne.n	8005dce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d106      	bne.n	8005e18 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e12:	f7ff ff69 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e16:	e002      	b.n	8005e1e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005e18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e1a:	f7fc fcb5 	bl	8002788 <HAL_UART_RxCpltCallback>
}
 8005e1e:	bf00      	nop
 8005e20:	3770      	adds	r7, #112	; 0x70
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d108      	bne.n	8005e4e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e40:	085b      	lsrs	r3, r3, #1
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	4619      	mov	r1, r3
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f7ff ff4e 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e4c:	e002      	b.n	8005e54 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff ff36 	bl	8005cc0 <HAL_UART_RxHalfCpltCallback>
}
 8005e54:	bf00      	nop
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e78:	2b80      	cmp	r3, #128	; 0x80
 8005e7a:	bf0c      	ite	eq
 8005e7c:	2301      	moveq	r3, #1
 8005e7e:	2300      	movne	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b21      	cmp	r3, #33	; 0x21
 8005e8e:	d108      	bne.n	8005ea2 <UART_DMAError+0x46>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005e9c:	68b8      	ldr	r0, [r7, #8]
 8005e9e:	f000 f933 	bl	8006108 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	bf0c      	ite	eq
 8005eb0:	2301      	moveq	r3, #1
 8005eb2:	2300      	movne	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b22      	cmp	r3, #34	; 0x22
 8005ec2:	d108      	bne.n	8005ed6 <UART_DMAError+0x7a>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ed0:	68b8      	ldr	r0, [r7, #8]
 8005ed2:	f000 f941 	bl	8006158 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f043 0210 	orr.w	r2, r3, #16
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ee2:	68b8      	ldr	r0, [r7, #8]
 8005ee4:	f7ff fef6 	bl	8005cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b090      	sub	sp, #64	; 0x40
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	4613      	mov	r3, r2
 8005efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f00:	e050      	b.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d04c      	beq.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d007      	beq.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f10:	f7fc fcf6 	bl	8002900 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d241      	bcs.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	330c      	adds	r3, #12
 8005f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f40:	637a      	str	r2, [r7, #52]	; 0x34
 8005f42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e5      	bne.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3314      	adds	r3, #20
 8005f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	613b      	str	r3, [r7, #16]
   return(result);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f023 0301 	bic.w	r3, r3, #1
 8005f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3314      	adds	r3, #20
 8005f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f74:	623a      	str	r2, [r7, #32]
 8005f76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	6a3a      	ldr	r2, [r7, #32]
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e5      	bne.n	8005f54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e00f      	b.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	4013      	ands	r3, r2
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d09f      	beq.n	8005f02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3740      	adds	r7, #64	; 0x40
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b098      	sub	sp, #96	; 0x60
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	88fa      	ldrh	r2, [r7, #6]
 8005fe4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2222      	movs	r2, #34	; 0x22
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	4a40      	ldr	r2, [pc, #256]	; (80060fc <UART_Start_Receive_DMA+0x130>)
 8005ffa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	4a3f      	ldr	r2, [pc, #252]	; (8006100 <UART_Start_Receive_DMA+0x134>)
 8006002:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	4a3e      	ldr	r2, [pc, #248]	; (8006104 <UART_Start_Receive_DMA+0x138>)
 800600a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	2200      	movs	r2, #0
 8006012:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006014:	f107 0308 	add.w	r3, r7, #8
 8006018:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	f7fd f8de 	bl	80031ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006030:	2300      	movs	r3, #0
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	613b      	str	r3, [r7, #16]
 8006044:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d019      	beq.n	800608a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	330c      	adds	r3, #12
 800605c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606c:	65bb      	str	r3, [r7, #88]	; 0x58
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006076:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006078:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800607c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e5      	bne.n	8006056 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3314      	adds	r3, #20
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	657b      	str	r3, [r7, #84]	; 0x54
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3314      	adds	r3, #20
 80060a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80060b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e5      	bne.n	800608a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3314      	adds	r3, #20
 80060c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	617b      	str	r3, [r7, #20]
   return(result);
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d4:	653b      	str	r3, [r7, #80]	; 0x50
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3314      	adds	r3, #20
 80060dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060de:	627a      	str	r2, [r7, #36]	; 0x24
 80060e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6a39      	ldr	r1, [r7, #32]
 80060e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e5      	bne.n	80060be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3760      	adds	r7, #96	; 0x60
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	08005d01 	.word	0x08005d01
 8006100:	08005e27 	.word	0x08005e27
 8006104:	08005e5d 	.word	0x08005e5d

08006108 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b089      	sub	sp, #36	; 0x24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	330c      	adds	r3, #12
 8006116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	61ba      	str	r2, [r7, #24]
 8006132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6979      	ldr	r1, [r7, #20]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	613b      	str	r3, [r7, #16]
   return(result);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800614c:	bf00      	nop
 800614e:	3724      	adds	r7, #36	; 0x24
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b095      	sub	sp, #84	; 0x54
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	330c      	adds	r3, #12
 800617e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006180:	643a      	str	r2, [r7, #64]	; 0x40
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006186:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e5      	bne.n	8006160 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3314      	adds	r3, #20
 800619a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3314      	adds	r3, #20
 80061b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e5      	bne.n	8006194 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d119      	bne.n	8006204 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	330c      	adds	r3, #12
 80061d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	60bb      	str	r3, [r7, #8]
   return(result);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f023 0310 	bic.w	r3, r3, #16
 80061e6:	647b      	str	r3, [r7, #68]	; 0x44
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f0:	61ba      	str	r2, [r7, #24]
 80061f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6979      	ldr	r1, [r7, #20]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	613b      	str	r3, [r7, #16]
   return(result);
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e5      	bne.n	80061d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006212:	bf00      	nop
 8006214:	3754      	adds	r7, #84	; 0x54
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7ff fd4b 	bl	8005cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800623e:	bf00      	nop
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b21      	cmp	r3, #33	; 0x21
 8006258:	d13e      	bne.n	80062d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006262:	d114      	bne.n	800628e <UART_Transmit_IT+0x48>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d110      	bne.n	800628e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006280:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	1c9a      	adds	r2, r3, #2
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	621a      	str	r2, [r3, #32]
 800628c:	e008      	b.n	80062a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	1c59      	adds	r1, r3, #1
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6211      	str	r1, [r2, #32]
 8006298:	781a      	ldrb	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	4619      	mov	r1, r3
 80062ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10f      	bne.n	80062d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e000      	b.n	80062da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062d8:	2302      	movs	r3, #2
  }
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fc fa30 	bl	800276c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b08c      	sub	sp, #48	; 0x30
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b22      	cmp	r3, #34	; 0x22
 8006328:	f040 80ab 	bne.w	8006482 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006334:	d117      	bne.n	8006366 <UART_Receive_IT+0x50>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d113      	bne.n	8006366 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800633e:	2300      	movs	r3, #0
 8006340:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006354:	b29a      	uxth	r2, r3
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	1c9a      	adds	r2, r3, #2
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	; 0x28
 8006364:	e026      	b.n	80063b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800636c:	2300      	movs	r3, #0
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006378:	d007      	beq.n	800638a <UART_Receive_IT+0x74>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <UART_Receive_IT+0x82>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e008      	b.n	80063aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29b      	uxth	r3, r3
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	4619      	mov	r1, r3
 80063c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d15a      	bne.n	800647e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0220 	bic.w	r2, r2, #32
 80063d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0201 	bic.w	r2, r2, #1
 80063f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	2b01      	cmp	r3, #1
 8006406:	d135      	bne.n	8006474 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	330c      	adds	r3, #12
 8006414:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	613b      	str	r3, [r7, #16]
   return(result);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f023 0310 	bic.w	r3, r3, #16
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642e:	623a      	str	r2, [r7, #32]
 8006430:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	69f9      	ldr	r1, [r7, #28]
 8006434:	6a3a      	ldr	r2, [r7, #32]
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	61bb      	str	r3, [r7, #24]
   return(result);
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e5      	bne.n	800640e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b10      	cmp	r3, #16
 800644e:	d10a      	bne.n	8006466 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff fc3b 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
 8006472:	e002      	b.n	800647a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7fc f987 	bl	8002788 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	e002      	b.n	8006484 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	e000      	b.n	8006484 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006482:	2302      	movs	r3, #2
  }
}
 8006484:	4618      	mov	r0, r3
 8006486:	3730      	adds	r7, #48	; 0x30
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800648c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006490:	b0c0      	sub	sp, #256	; 0x100
 8006492:	af00      	add	r7, sp, #0
 8006494:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a8:	68d9      	ldr	r1, [r3, #12]
 80064aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	ea40 0301 	orr.w	r3, r0, r1
 80064b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064e4:	f021 010c 	bic.w	r1, r1, #12
 80064e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064f2:	430b      	orrs	r3, r1
 80064f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006506:	6999      	ldr	r1, [r3, #24]
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	ea40 0301 	orr.w	r3, r0, r1
 8006512:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4b8f      	ldr	r3, [pc, #572]	; (8006758 <UART_SetConfig+0x2cc>)
 800651c:	429a      	cmp	r2, r3
 800651e:	d005      	beq.n	800652c <UART_SetConfig+0xa0>
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b8d      	ldr	r3, [pc, #564]	; (800675c <UART_SetConfig+0x2d0>)
 8006528:	429a      	cmp	r2, r3
 800652a:	d104      	bne.n	8006536 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800652c:	f7fe f930 	bl	8004790 <HAL_RCC_GetPCLK2Freq>
 8006530:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006534:	e003      	b.n	800653e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006536:	f7fe f917 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 800653a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800653e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006548:	f040 810c 	bne.w	8006764 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800654c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006550:	2200      	movs	r2, #0
 8006552:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006556:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800655a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800655e:	4622      	mov	r2, r4
 8006560:	462b      	mov	r3, r5
 8006562:	1891      	adds	r1, r2, r2
 8006564:	65b9      	str	r1, [r7, #88]	; 0x58
 8006566:	415b      	adcs	r3, r3
 8006568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800656a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800656e:	4621      	mov	r1, r4
 8006570:	eb12 0801 	adds.w	r8, r2, r1
 8006574:	4629      	mov	r1, r5
 8006576:	eb43 0901 	adc.w	r9, r3, r1
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	f04f 0300 	mov.w	r3, #0
 8006582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800658a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800658e:	4690      	mov	r8, r2
 8006590:	4699      	mov	r9, r3
 8006592:	4623      	mov	r3, r4
 8006594:	eb18 0303 	adds.w	r3, r8, r3
 8006598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800659c:	462b      	mov	r3, r5
 800659e:	eb49 0303 	adc.w	r3, r9, r3
 80065a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065ba:	460b      	mov	r3, r1
 80065bc:	18db      	adds	r3, r3, r3
 80065be:	653b      	str	r3, [r7, #80]	; 0x50
 80065c0:	4613      	mov	r3, r2
 80065c2:	eb42 0303 	adc.w	r3, r2, r3
 80065c6:	657b      	str	r3, [r7, #84]	; 0x54
 80065c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065d0:	f7fa faf2 	bl	8000bb8 <__aeabi_uldivmod>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4b61      	ldr	r3, [pc, #388]	; (8006760 <UART_SetConfig+0x2d4>)
 80065da:	fba3 2302 	umull	r2, r3, r3, r2
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	011c      	lsls	r4, r3, #4
 80065e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065f4:	4642      	mov	r2, r8
 80065f6:	464b      	mov	r3, r9
 80065f8:	1891      	adds	r1, r2, r2
 80065fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80065fc:	415b      	adcs	r3, r3
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006600:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006604:	4641      	mov	r1, r8
 8006606:	eb12 0a01 	adds.w	sl, r2, r1
 800660a:	4649      	mov	r1, r9
 800660c:	eb43 0b01 	adc.w	fp, r3, r1
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	f04f 0300 	mov.w	r3, #0
 8006618:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800661c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006624:	4692      	mov	sl, r2
 8006626:	469b      	mov	fp, r3
 8006628:	4643      	mov	r3, r8
 800662a:	eb1a 0303 	adds.w	r3, sl, r3
 800662e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006632:	464b      	mov	r3, r9
 8006634:	eb4b 0303 	adc.w	r3, fp, r3
 8006638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006648:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800664c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006650:	460b      	mov	r3, r1
 8006652:	18db      	adds	r3, r3, r3
 8006654:	643b      	str	r3, [r7, #64]	; 0x40
 8006656:	4613      	mov	r3, r2
 8006658:	eb42 0303 	adc.w	r3, r2, r3
 800665c:	647b      	str	r3, [r7, #68]	; 0x44
 800665e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006662:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006666:	f7fa faa7 	bl	8000bb8 <__aeabi_uldivmod>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4611      	mov	r1, r2
 8006670:	4b3b      	ldr	r3, [pc, #236]	; (8006760 <UART_SetConfig+0x2d4>)
 8006672:	fba3 2301 	umull	r2, r3, r3, r1
 8006676:	095b      	lsrs	r3, r3, #5
 8006678:	2264      	movs	r2, #100	; 0x64
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	1acb      	subs	r3, r1, r3
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006686:	4b36      	ldr	r3, [pc, #216]	; (8006760 <UART_SetConfig+0x2d4>)
 8006688:	fba3 2302 	umull	r2, r3, r3, r2
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006694:	441c      	add	r4, r3
 8006696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800669a:	2200      	movs	r2, #0
 800669c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066a8:	4642      	mov	r2, r8
 80066aa:	464b      	mov	r3, r9
 80066ac:	1891      	adds	r1, r2, r2
 80066ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80066b0:	415b      	adcs	r3, r3
 80066b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066b8:	4641      	mov	r1, r8
 80066ba:	1851      	adds	r1, r2, r1
 80066bc:	6339      	str	r1, [r7, #48]	; 0x30
 80066be:	4649      	mov	r1, r9
 80066c0:	414b      	adcs	r3, r1
 80066c2:	637b      	str	r3, [r7, #52]	; 0x34
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066d0:	4659      	mov	r1, fp
 80066d2:	00cb      	lsls	r3, r1, #3
 80066d4:	4651      	mov	r1, sl
 80066d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066da:	4651      	mov	r1, sl
 80066dc:	00ca      	lsls	r2, r1, #3
 80066de:	4610      	mov	r0, r2
 80066e0:	4619      	mov	r1, r3
 80066e2:	4603      	mov	r3, r0
 80066e4:	4642      	mov	r2, r8
 80066e6:	189b      	adds	r3, r3, r2
 80066e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066ec:	464b      	mov	r3, r9
 80066ee:	460a      	mov	r2, r1
 80066f0:	eb42 0303 	adc.w	r3, r2, r3
 80066f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006704:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800670c:	460b      	mov	r3, r1
 800670e:	18db      	adds	r3, r3, r3
 8006710:	62bb      	str	r3, [r7, #40]	; 0x28
 8006712:	4613      	mov	r3, r2
 8006714:	eb42 0303 	adc.w	r3, r2, r3
 8006718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800671a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800671e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006722:	f7fa fa49 	bl	8000bb8 <__aeabi_uldivmod>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <UART_SetConfig+0x2d4>)
 800672c:	fba3 1302 	umull	r1, r3, r3, r2
 8006730:	095b      	lsrs	r3, r3, #5
 8006732:	2164      	movs	r1, #100	; 0x64
 8006734:	fb01 f303 	mul.w	r3, r1, r3
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	3332      	adds	r3, #50	; 0x32
 800673e:	4a08      	ldr	r2, [pc, #32]	; (8006760 <UART_SetConfig+0x2d4>)
 8006740:	fba2 2303 	umull	r2, r3, r2, r3
 8006744:	095b      	lsrs	r3, r3, #5
 8006746:	f003 0207 	and.w	r2, r3, #7
 800674a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4422      	add	r2, r4
 8006752:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006754:	e105      	b.n	8006962 <UART_SetConfig+0x4d6>
 8006756:	bf00      	nop
 8006758:	40011000 	.word	0x40011000
 800675c:	40011400 	.word	0x40011400
 8006760:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006768:	2200      	movs	r2, #0
 800676a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800676e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006772:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006776:	4642      	mov	r2, r8
 8006778:	464b      	mov	r3, r9
 800677a:	1891      	adds	r1, r2, r2
 800677c:	6239      	str	r1, [r7, #32]
 800677e:	415b      	adcs	r3, r3
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
 8006782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006786:	4641      	mov	r1, r8
 8006788:	1854      	adds	r4, r2, r1
 800678a:	4649      	mov	r1, r9
 800678c:	eb43 0501 	adc.w	r5, r3, r1
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	00eb      	lsls	r3, r5, #3
 800679a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800679e:	00e2      	lsls	r2, r4, #3
 80067a0:	4614      	mov	r4, r2
 80067a2:	461d      	mov	r5, r3
 80067a4:	4643      	mov	r3, r8
 80067a6:	18e3      	adds	r3, r4, r3
 80067a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067ac:	464b      	mov	r3, r9
 80067ae:	eb45 0303 	adc.w	r3, r5, r3
 80067b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067d2:	4629      	mov	r1, r5
 80067d4:	008b      	lsls	r3, r1, #2
 80067d6:	4621      	mov	r1, r4
 80067d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067dc:	4621      	mov	r1, r4
 80067de:	008a      	lsls	r2, r1, #2
 80067e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067e4:	f7fa f9e8 	bl	8000bb8 <__aeabi_uldivmod>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4b60      	ldr	r3, [pc, #384]	; (8006970 <UART_SetConfig+0x4e4>)
 80067ee:	fba3 2302 	umull	r2, r3, r3, r2
 80067f2:	095b      	lsrs	r3, r3, #5
 80067f4:	011c      	lsls	r4, r3, #4
 80067f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006800:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006804:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	1891      	adds	r1, r2, r2
 800680e:	61b9      	str	r1, [r7, #24]
 8006810:	415b      	adcs	r3, r3
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006818:	4641      	mov	r1, r8
 800681a:	1851      	adds	r1, r2, r1
 800681c:	6139      	str	r1, [r7, #16]
 800681e:	4649      	mov	r1, r9
 8006820:	414b      	adcs	r3, r1
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	f04f 0300 	mov.w	r3, #0
 800682c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006830:	4659      	mov	r1, fp
 8006832:	00cb      	lsls	r3, r1, #3
 8006834:	4651      	mov	r1, sl
 8006836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800683a:	4651      	mov	r1, sl
 800683c:	00ca      	lsls	r2, r1, #3
 800683e:	4610      	mov	r0, r2
 8006840:	4619      	mov	r1, r3
 8006842:	4603      	mov	r3, r0
 8006844:	4642      	mov	r2, r8
 8006846:	189b      	adds	r3, r3, r2
 8006848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800684c:	464b      	mov	r3, r9
 800684e:	460a      	mov	r2, r1
 8006850:	eb42 0303 	adc.w	r3, r2, r3
 8006854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	67bb      	str	r3, [r7, #120]	; 0x78
 8006862:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006870:	4649      	mov	r1, r9
 8006872:	008b      	lsls	r3, r1, #2
 8006874:	4641      	mov	r1, r8
 8006876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800687a:	4641      	mov	r1, r8
 800687c:	008a      	lsls	r2, r1, #2
 800687e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006882:	f7fa f999 	bl	8000bb8 <__aeabi_uldivmod>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4b39      	ldr	r3, [pc, #228]	; (8006970 <UART_SetConfig+0x4e4>)
 800688c:	fba3 1302 	umull	r1, r3, r3, r2
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	2164      	movs	r1, #100	; 0x64
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	3332      	adds	r3, #50	; 0x32
 800689e:	4a34      	ldr	r2, [pc, #208]	; (8006970 <UART_SetConfig+0x4e4>)
 80068a0:	fba2 2303 	umull	r2, r3, r2, r3
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068aa:	441c      	add	r4, r3
 80068ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b0:	2200      	movs	r2, #0
 80068b2:	673b      	str	r3, [r7, #112]	; 0x70
 80068b4:	677a      	str	r2, [r7, #116]	; 0x74
 80068b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068ba:	4642      	mov	r2, r8
 80068bc:	464b      	mov	r3, r9
 80068be:	1891      	adds	r1, r2, r2
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	415b      	adcs	r3, r3
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068ca:	4641      	mov	r1, r8
 80068cc:	1851      	adds	r1, r2, r1
 80068ce:	6039      	str	r1, [r7, #0]
 80068d0:	4649      	mov	r1, r9
 80068d2:	414b      	adcs	r3, r1
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068e2:	4659      	mov	r1, fp
 80068e4:	00cb      	lsls	r3, r1, #3
 80068e6:	4651      	mov	r1, sl
 80068e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ec:	4651      	mov	r1, sl
 80068ee:	00ca      	lsls	r2, r1, #3
 80068f0:	4610      	mov	r0, r2
 80068f2:	4619      	mov	r1, r3
 80068f4:	4603      	mov	r3, r0
 80068f6:	4642      	mov	r2, r8
 80068f8:	189b      	adds	r3, r3, r2
 80068fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80068fc:	464b      	mov	r3, r9
 80068fe:	460a      	mov	r2, r1
 8006900:	eb42 0303 	adc.w	r3, r2, r3
 8006904:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	663b      	str	r3, [r7, #96]	; 0x60
 8006910:	667a      	str	r2, [r7, #100]	; 0x64
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	f04f 0300 	mov.w	r3, #0
 800691a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800691e:	4649      	mov	r1, r9
 8006920:	008b      	lsls	r3, r1, #2
 8006922:	4641      	mov	r1, r8
 8006924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006928:	4641      	mov	r1, r8
 800692a:	008a      	lsls	r2, r1, #2
 800692c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006930:	f7fa f942 	bl	8000bb8 <__aeabi_uldivmod>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4b0d      	ldr	r3, [pc, #52]	; (8006970 <UART_SetConfig+0x4e4>)
 800693a:	fba3 1302 	umull	r1, r3, r3, r2
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	2164      	movs	r1, #100	; 0x64
 8006942:	fb01 f303 	mul.w	r3, r1, r3
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	3332      	adds	r3, #50	; 0x32
 800694c:	4a08      	ldr	r2, [pc, #32]	; (8006970 <UART_SetConfig+0x4e4>)
 800694e:	fba2 2303 	umull	r2, r3, r2, r3
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	f003 020f 	and.w	r2, r3, #15
 8006958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4422      	add	r2, r4
 8006960:	609a      	str	r2, [r3, #8]
}
 8006962:	bf00      	nop
 8006964:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006968:	46bd      	mov	sp, r7
 800696a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800696e:	bf00      	nop
 8006970:	51eb851f 	.word	0x51eb851f

08006974 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006978:	4904      	ldr	r1, [pc, #16]	; (800698c <MX_FATFS_Init+0x18>)
 800697a:	4805      	ldr	r0, [pc, #20]	; (8006990 <MX_FATFS_Init+0x1c>)
 800697c:	f000 f8b2 	bl	8006ae4 <FATFS_LinkDriver>
 8006980:	4603      	mov	r3, r0
 8006982:	461a      	mov	r2, r3
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <MX_FATFS_Init+0x20>)
 8006986:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006988:	bf00      	nop
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000578 	.word	0x20000578
 8006990:	20000010 	.word	0x20000010
 8006994:	20000574 	.word	0x20000574

08006998 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fa fc3d 	bl	8001224 <SD_disk_initialize>
 80069aa:	4603      	mov	r3, r0
 80069ac:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	4603      	mov	r3, r0
 80069be:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fa fd14 	bl	80013f0 <SD_disk_status>
 80069c8:	4603      	mov	r3, r0
 80069ca:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80069e4:	7bf8      	ldrb	r0, [r7, #15]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	f7fa fd16 	bl	800141c <SD_disk_read>
 80069f0:	4603      	mov	r3, r0
 80069f2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	607a      	str	r2, [r7, #4]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006a0c:	7bf8      	ldrb	r0, [r7, #15]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	f7fa fd6c 	bl	80014f0 <SD_disk_write>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	603a      	str	r2, [r7, #0]
 8006a2e:	71fb      	strb	r3, [r7, #7]
 8006a30:	460b      	mov	r3, r1
 8006a32:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	79b9      	ldrb	r1, [r7, #6]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fa fddc 	bl	80015f8 <SD_disk_ioctl>
 8006a40:	4603      	mov	r3, r0
 8006a42:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	4613      	mov	r3, r2
 8006a58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006a62:	4b1f      	ldr	r3, [pc, #124]	; (8006ae0 <FATFS_LinkDriverEx+0x94>)
 8006a64:	7a5b      	ldrb	r3, [r3, #9]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d131      	bne.n	8006ad0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ae0 <FATFS_LinkDriverEx+0x94>)
 8006a6e:	7a5b      	ldrb	r3, [r3, #9]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <FATFS_LinkDriverEx+0x94>)
 8006a76:	2100      	movs	r1, #0
 8006a78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006a7a:	4b19      	ldr	r3, [pc, #100]	; (8006ae0 <FATFS_LinkDriverEx+0x94>)
 8006a7c:	7a5b      	ldrb	r3, [r3, #9]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	4a17      	ldr	r2, [pc, #92]	; (8006ae0 <FATFS_LinkDriverEx+0x94>)
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006a8a:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <FATFS_LinkDriverEx+0x94>)
 8006a8c:	7a5b      	ldrb	r3, [r3, #9]
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <FATFS_LinkDriverEx+0x94>)
 8006a94:	4413      	add	r3, r2
 8006a96:	79fa      	ldrb	r2, [r7, #7]
 8006a98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a9a:	4b11      	ldr	r3, [pc, #68]	; (8006ae0 <FATFS_LinkDriverEx+0x94>)
 8006a9c:	7a5b      	ldrb	r3, [r3, #9]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	b2d1      	uxtb	r1, r2
 8006aa4:	4a0e      	ldr	r2, [pc, #56]	; (8006ae0 <FATFS_LinkDriverEx+0x94>)
 8006aa6:	7251      	strb	r1, [r2, #9]
 8006aa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006aaa:	7dbb      	ldrb	r3, [r7, #22]
 8006aac:	3330      	adds	r3, #48	; 0x30
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	223a      	movs	r2, #58	; 0x3a
 8006aba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	3302      	adds	r3, #2
 8006ac0:	222f      	movs	r2, #47	; 0x2f
 8006ac2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	3303      	adds	r3, #3
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	2000057c 	.word	0x2000057c

08006ae4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006aee:	2200      	movs	r2, #0
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff ffaa 	bl	8006a4c <FATFS_LinkDriverEx>
 8006af8:	4603      	mov	r3, r0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <__errno>:
 8006b04:	4b01      	ldr	r3, [pc, #4]	; (8006b0c <__errno+0x8>)
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000024 	.word	0x20000024

08006b10 <__libc_init_array>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	4d0d      	ldr	r5, [pc, #52]	; (8006b48 <__libc_init_array+0x38>)
 8006b14:	4c0d      	ldr	r4, [pc, #52]	; (8006b4c <__libc_init_array+0x3c>)
 8006b16:	1b64      	subs	r4, r4, r5
 8006b18:	10a4      	asrs	r4, r4, #2
 8006b1a:	2600      	movs	r6, #0
 8006b1c:	42a6      	cmp	r6, r4
 8006b1e:	d109      	bne.n	8006b34 <__libc_init_array+0x24>
 8006b20:	4d0b      	ldr	r5, [pc, #44]	; (8006b50 <__libc_init_array+0x40>)
 8006b22:	4c0c      	ldr	r4, [pc, #48]	; (8006b54 <__libc_init_array+0x44>)
 8006b24:	f002 fdc2 	bl	80096ac <_init>
 8006b28:	1b64      	subs	r4, r4, r5
 8006b2a:	10a4      	asrs	r4, r4, #2
 8006b2c:	2600      	movs	r6, #0
 8006b2e:	42a6      	cmp	r6, r4
 8006b30:	d105      	bne.n	8006b3e <__libc_init_array+0x2e>
 8006b32:	bd70      	pop	{r4, r5, r6, pc}
 8006b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b38:	4798      	blx	r3
 8006b3a:	3601      	adds	r6, #1
 8006b3c:	e7ee      	b.n	8006b1c <__libc_init_array+0xc>
 8006b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b42:	4798      	blx	r3
 8006b44:	3601      	adds	r6, #1
 8006b46:	e7f2      	b.n	8006b2e <__libc_init_array+0x1e>
 8006b48:	08009b74 	.word	0x08009b74
 8006b4c:	08009b74 	.word	0x08009b74
 8006b50:	08009b74 	.word	0x08009b74
 8006b54:	08009b78 	.word	0x08009b78

08006b58 <memset>:
 8006b58:	4402      	add	r2, r0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d100      	bne.n	8006b62 <memset+0xa>
 8006b60:	4770      	bx	lr
 8006b62:	f803 1b01 	strb.w	r1, [r3], #1
 8006b66:	e7f9      	b.n	8006b5c <memset+0x4>

08006b68 <__cvt>:
 8006b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	ec55 4b10 	vmov	r4, r5, d0
 8006b70:	2d00      	cmp	r5, #0
 8006b72:	460e      	mov	r6, r1
 8006b74:	4619      	mov	r1, r3
 8006b76:	462b      	mov	r3, r5
 8006b78:	bfbb      	ittet	lt
 8006b7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b7e:	461d      	movlt	r5, r3
 8006b80:	2300      	movge	r3, #0
 8006b82:	232d      	movlt	r3, #45	; 0x2d
 8006b84:	700b      	strb	r3, [r1, #0]
 8006b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b8c:	4691      	mov	r9, r2
 8006b8e:	f023 0820 	bic.w	r8, r3, #32
 8006b92:	bfbc      	itt	lt
 8006b94:	4622      	movlt	r2, r4
 8006b96:	4614      	movlt	r4, r2
 8006b98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b9c:	d005      	beq.n	8006baa <__cvt+0x42>
 8006b9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ba2:	d100      	bne.n	8006ba6 <__cvt+0x3e>
 8006ba4:	3601      	adds	r6, #1
 8006ba6:	2102      	movs	r1, #2
 8006ba8:	e000      	b.n	8006bac <__cvt+0x44>
 8006baa:	2103      	movs	r1, #3
 8006bac:	ab03      	add	r3, sp, #12
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	ab02      	add	r3, sp, #8
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	ec45 4b10 	vmov	d0, r4, r5
 8006bb8:	4653      	mov	r3, sl
 8006bba:	4632      	mov	r2, r6
 8006bbc:	f000 fe18 	bl	80077f0 <_dtoa_r>
 8006bc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	d102      	bne.n	8006bce <__cvt+0x66>
 8006bc8:	f019 0f01 	tst.w	r9, #1
 8006bcc:	d022      	beq.n	8006c14 <__cvt+0xac>
 8006bce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bd2:	eb07 0906 	add.w	r9, r7, r6
 8006bd6:	d110      	bne.n	8006bfa <__cvt+0x92>
 8006bd8:	783b      	ldrb	r3, [r7, #0]
 8006bda:	2b30      	cmp	r3, #48	; 0x30
 8006bdc:	d10a      	bne.n	8006bf4 <__cvt+0x8c>
 8006bde:	2200      	movs	r2, #0
 8006be0:	2300      	movs	r3, #0
 8006be2:	4620      	mov	r0, r4
 8006be4:	4629      	mov	r1, r5
 8006be6:	f7f9 ff77 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bea:	b918      	cbnz	r0, 8006bf4 <__cvt+0x8c>
 8006bec:	f1c6 0601 	rsb	r6, r6, #1
 8006bf0:	f8ca 6000 	str.w	r6, [sl]
 8006bf4:	f8da 3000 	ldr.w	r3, [sl]
 8006bf8:	4499      	add	r9, r3
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4629      	mov	r1, r5
 8006c02:	f7f9 ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c06:	b108      	cbz	r0, 8006c0c <__cvt+0xa4>
 8006c08:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c0c:	2230      	movs	r2, #48	; 0x30
 8006c0e:	9b03      	ldr	r3, [sp, #12]
 8006c10:	454b      	cmp	r3, r9
 8006c12:	d307      	bcc.n	8006c24 <__cvt+0xbc>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c18:	1bdb      	subs	r3, r3, r7
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	b004      	add	sp, #16
 8006c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	9103      	str	r1, [sp, #12]
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	e7f0      	b.n	8006c0e <__cvt+0xa6>

08006c2c <__exponent>:
 8006c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2900      	cmp	r1, #0
 8006c32:	bfb8      	it	lt
 8006c34:	4249      	neglt	r1, r1
 8006c36:	f803 2b02 	strb.w	r2, [r3], #2
 8006c3a:	bfb4      	ite	lt
 8006c3c:	222d      	movlt	r2, #45	; 0x2d
 8006c3e:	222b      	movge	r2, #43	; 0x2b
 8006c40:	2909      	cmp	r1, #9
 8006c42:	7042      	strb	r2, [r0, #1]
 8006c44:	dd2a      	ble.n	8006c9c <__exponent+0x70>
 8006c46:	f10d 0407 	add.w	r4, sp, #7
 8006c4a:	46a4      	mov	ip, r4
 8006c4c:	270a      	movs	r7, #10
 8006c4e:	46a6      	mov	lr, r4
 8006c50:	460a      	mov	r2, r1
 8006c52:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c56:	fb07 1516 	mls	r5, r7, r6, r1
 8006c5a:	3530      	adds	r5, #48	; 0x30
 8006c5c:	2a63      	cmp	r2, #99	; 0x63
 8006c5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c66:	4631      	mov	r1, r6
 8006c68:	dcf1      	bgt.n	8006c4e <__exponent+0x22>
 8006c6a:	3130      	adds	r1, #48	; 0x30
 8006c6c:	f1ae 0502 	sub.w	r5, lr, #2
 8006c70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c74:	1c44      	adds	r4, r0, #1
 8006c76:	4629      	mov	r1, r5
 8006c78:	4561      	cmp	r1, ip
 8006c7a:	d30a      	bcc.n	8006c92 <__exponent+0x66>
 8006c7c:	f10d 0209 	add.w	r2, sp, #9
 8006c80:	eba2 020e 	sub.w	r2, r2, lr
 8006c84:	4565      	cmp	r5, ip
 8006c86:	bf88      	it	hi
 8006c88:	2200      	movhi	r2, #0
 8006c8a:	4413      	add	r3, r2
 8006c8c:	1a18      	subs	r0, r3, r0
 8006c8e:	b003      	add	sp, #12
 8006c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c9a:	e7ed      	b.n	8006c78 <__exponent+0x4c>
 8006c9c:	2330      	movs	r3, #48	; 0x30
 8006c9e:	3130      	adds	r1, #48	; 0x30
 8006ca0:	7083      	strb	r3, [r0, #2]
 8006ca2:	70c1      	strb	r1, [r0, #3]
 8006ca4:	1d03      	adds	r3, r0, #4
 8006ca6:	e7f1      	b.n	8006c8c <__exponent+0x60>

08006ca8 <_printf_float>:
 8006ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cac:	ed2d 8b02 	vpush	{d8}
 8006cb0:	b08d      	sub	sp, #52	; 0x34
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cb8:	4616      	mov	r6, r2
 8006cba:	461f      	mov	r7, r3
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	f001 fd3d 	bl	800873c <_localeconv_r>
 8006cc2:	f8d0 a000 	ldr.w	sl, [r0]
 8006cc6:	4650      	mov	r0, sl
 8006cc8:	f7f9 fa8a 	bl	80001e0 <strlen>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	9305      	str	r3, [sp, #20]
 8006cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006cdc:	3307      	adds	r3, #7
 8006cde:	f023 0307 	bic.w	r3, r3, #7
 8006ce2:	f103 0208 	add.w	r2, r3, #8
 8006ce6:	f8c8 2000 	str.w	r2, [r8]
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006cf2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006cf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006cfa:	9307      	str	r3, [sp, #28]
 8006cfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d00:	ee08 0a10 	vmov	s16, r0
 8006d04:	4b9f      	ldr	r3, [pc, #636]	; (8006f84 <_printf_float+0x2dc>)
 8006d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0e:	f7f9 ff15 	bl	8000b3c <__aeabi_dcmpun>
 8006d12:	bb88      	cbnz	r0, 8006d78 <_printf_float+0xd0>
 8006d14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d18:	4b9a      	ldr	r3, [pc, #616]	; (8006f84 <_printf_float+0x2dc>)
 8006d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1e:	f7f9 feef 	bl	8000b00 <__aeabi_dcmple>
 8006d22:	bb48      	cbnz	r0, 8006d78 <_printf_float+0xd0>
 8006d24:	2200      	movs	r2, #0
 8006d26:	2300      	movs	r3, #0
 8006d28:	4640      	mov	r0, r8
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	f7f9 fede 	bl	8000aec <__aeabi_dcmplt>
 8006d30:	b110      	cbz	r0, 8006d38 <_printf_float+0x90>
 8006d32:	232d      	movs	r3, #45	; 0x2d
 8006d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d38:	4b93      	ldr	r3, [pc, #588]	; (8006f88 <_printf_float+0x2e0>)
 8006d3a:	4894      	ldr	r0, [pc, #592]	; (8006f8c <_printf_float+0x2e4>)
 8006d3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d40:	bf94      	ite	ls
 8006d42:	4698      	movls	r8, r3
 8006d44:	4680      	movhi	r8, r0
 8006d46:	2303      	movs	r3, #3
 8006d48:	6123      	str	r3, [r4, #16]
 8006d4a:	9b05      	ldr	r3, [sp, #20]
 8006d4c:	f023 0204 	bic.w	r2, r3, #4
 8006d50:	6022      	str	r2, [r4, #0]
 8006d52:	f04f 0900 	mov.w	r9, #0
 8006d56:	9700      	str	r7, [sp, #0]
 8006d58:	4633      	mov	r3, r6
 8006d5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f000 f9d8 	bl	8007114 <_printf_common>
 8006d64:	3001      	adds	r0, #1
 8006d66:	f040 8090 	bne.w	8006e8a <_printf_float+0x1e2>
 8006d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6e:	b00d      	add	sp, #52	; 0x34
 8006d70:	ecbd 8b02 	vpop	{d8}
 8006d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d78:	4642      	mov	r2, r8
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	4649      	mov	r1, r9
 8006d80:	f7f9 fedc 	bl	8000b3c <__aeabi_dcmpun>
 8006d84:	b140      	cbz	r0, 8006d98 <_printf_float+0xf0>
 8006d86:	464b      	mov	r3, r9
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	bfbc      	itt	lt
 8006d8c:	232d      	movlt	r3, #45	; 0x2d
 8006d8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d92:	487f      	ldr	r0, [pc, #508]	; (8006f90 <_printf_float+0x2e8>)
 8006d94:	4b7f      	ldr	r3, [pc, #508]	; (8006f94 <_printf_float+0x2ec>)
 8006d96:	e7d1      	b.n	8006d3c <_printf_float+0x94>
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d9e:	9206      	str	r2, [sp, #24]
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	d13f      	bne.n	8006e24 <_printf_float+0x17c>
 8006da4:	2306      	movs	r3, #6
 8006da6:	6063      	str	r3, [r4, #4]
 8006da8:	9b05      	ldr	r3, [sp, #20]
 8006daa:	6861      	ldr	r1, [r4, #4]
 8006dac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006db0:	2300      	movs	r3, #0
 8006db2:	9303      	str	r3, [sp, #12]
 8006db4:	ab0a      	add	r3, sp, #40	; 0x28
 8006db6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006dba:	ab09      	add	r3, sp, #36	; 0x24
 8006dbc:	ec49 8b10 	vmov	d0, r8, r9
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	6022      	str	r2, [r4, #0]
 8006dc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f7ff fecd 	bl	8006b68 <__cvt>
 8006dce:	9b06      	ldr	r3, [sp, #24]
 8006dd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dd2:	2b47      	cmp	r3, #71	; 0x47
 8006dd4:	4680      	mov	r8, r0
 8006dd6:	d108      	bne.n	8006dea <_printf_float+0x142>
 8006dd8:	1cc8      	adds	r0, r1, #3
 8006dda:	db02      	blt.n	8006de2 <_printf_float+0x13a>
 8006ddc:	6863      	ldr	r3, [r4, #4]
 8006dde:	4299      	cmp	r1, r3
 8006de0:	dd41      	ble.n	8006e66 <_printf_float+0x1be>
 8006de2:	f1ab 0b02 	sub.w	fp, fp, #2
 8006de6:	fa5f fb8b 	uxtb.w	fp, fp
 8006dea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006dee:	d820      	bhi.n	8006e32 <_printf_float+0x18a>
 8006df0:	3901      	subs	r1, #1
 8006df2:	465a      	mov	r2, fp
 8006df4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006df8:	9109      	str	r1, [sp, #36]	; 0x24
 8006dfa:	f7ff ff17 	bl	8006c2c <__exponent>
 8006dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e00:	1813      	adds	r3, r2, r0
 8006e02:	2a01      	cmp	r2, #1
 8006e04:	4681      	mov	r9, r0
 8006e06:	6123      	str	r3, [r4, #16]
 8006e08:	dc02      	bgt.n	8006e10 <_printf_float+0x168>
 8006e0a:	6822      	ldr	r2, [r4, #0]
 8006e0c:	07d2      	lsls	r2, r2, #31
 8006e0e:	d501      	bpl.n	8006e14 <_printf_float+0x16c>
 8006e10:	3301      	adds	r3, #1
 8006e12:	6123      	str	r3, [r4, #16]
 8006e14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d09c      	beq.n	8006d56 <_printf_float+0xae>
 8006e1c:	232d      	movs	r3, #45	; 0x2d
 8006e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e22:	e798      	b.n	8006d56 <_printf_float+0xae>
 8006e24:	9a06      	ldr	r2, [sp, #24]
 8006e26:	2a47      	cmp	r2, #71	; 0x47
 8006e28:	d1be      	bne.n	8006da8 <_printf_float+0x100>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1bc      	bne.n	8006da8 <_printf_float+0x100>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e7b9      	b.n	8006da6 <_printf_float+0xfe>
 8006e32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e36:	d118      	bne.n	8006e6a <_printf_float+0x1c2>
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	6863      	ldr	r3, [r4, #4]
 8006e3c:	dd0b      	ble.n	8006e56 <_printf_float+0x1ae>
 8006e3e:	6121      	str	r1, [r4, #16]
 8006e40:	b913      	cbnz	r3, 8006e48 <_printf_float+0x1a0>
 8006e42:	6822      	ldr	r2, [r4, #0]
 8006e44:	07d0      	lsls	r0, r2, #31
 8006e46:	d502      	bpl.n	8006e4e <_printf_float+0x1a6>
 8006e48:	3301      	adds	r3, #1
 8006e4a:	440b      	add	r3, r1
 8006e4c:	6123      	str	r3, [r4, #16]
 8006e4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e50:	f04f 0900 	mov.w	r9, #0
 8006e54:	e7de      	b.n	8006e14 <_printf_float+0x16c>
 8006e56:	b913      	cbnz	r3, 8006e5e <_printf_float+0x1b6>
 8006e58:	6822      	ldr	r2, [r4, #0]
 8006e5a:	07d2      	lsls	r2, r2, #31
 8006e5c:	d501      	bpl.n	8006e62 <_printf_float+0x1ba>
 8006e5e:	3302      	adds	r3, #2
 8006e60:	e7f4      	b.n	8006e4c <_printf_float+0x1a4>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e7f2      	b.n	8006e4c <_printf_float+0x1a4>
 8006e66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e6c:	4299      	cmp	r1, r3
 8006e6e:	db05      	blt.n	8006e7c <_printf_float+0x1d4>
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	6121      	str	r1, [r4, #16]
 8006e74:	07d8      	lsls	r0, r3, #31
 8006e76:	d5ea      	bpl.n	8006e4e <_printf_float+0x1a6>
 8006e78:	1c4b      	adds	r3, r1, #1
 8006e7a:	e7e7      	b.n	8006e4c <_printf_float+0x1a4>
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	bfd4      	ite	le
 8006e80:	f1c1 0202 	rsble	r2, r1, #2
 8006e84:	2201      	movgt	r2, #1
 8006e86:	4413      	add	r3, r2
 8006e88:	e7e0      	b.n	8006e4c <_printf_float+0x1a4>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	055a      	lsls	r2, r3, #21
 8006e8e:	d407      	bmi.n	8006ea0 <_printf_float+0x1f8>
 8006e90:	6923      	ldr	r3, [r4, #16]
 8006e92:	4642      	mov	r2, r8
 8006e94:	4631      	mov	r1, r6
 8006e96:	4628      	mov	r0, r5
 8006e98:	47b8      	blx	r7
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d12c      	bne.n	8006ef8 <_printf_float+0x250>
 8006e9e:	e764      	b.n	8006d6a <_printf_float+0xc2>
 8006ea0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ea4:	f240 80e0 	bls.w	8007068 <_printf_float+0x3c0>
 8006ea8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006eac:	2200      	movs	r2, #0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f7f9 fe12 	bl	8000ad8 <__aeabi_dcmpeq>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d034      	beq.n	8006f22 <_printf_float+0x27a>
 8006eb8:	4a37      	ldr	r2, [pc, #220]	; (8006f98 <_printf_float+0x2f0>)
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f af51 	beq.w	8006d6a <_printf_float+0xc2>
 8006ec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	db02      	blt.n	8006ed6 <_printf_float+0x22e>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	07d8      	lsls	r0, r3, #31
 8006ed4:	d510      	bpl.n	8006ef8 <_printf_float+0x250>
 8006ed6:	ee18 3a10 	vmov	r3, s16
 8006eda:	4652      	mov	r2, sl
 8006edc:	4631      	mov	r1, r6
 8006ede:	4628      	mov	r0, r5
 8006ee0:	47b8      	blx	r7
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	f43f af41 	beq.w	8006d6a <_printf_float+0xc2>
 8006ee8:	f04f 0800 	mov.w	r8, #0
 8006eec:	f104 091a 	add.w	r9, r4, #26
 8006ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	4543      	cmp	r3, r8
 8006ef6:	dc09      	bgt.n	8006f0c <_printf_float+0x264>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	079b      	lsls	r3, r3, #30
 8006efc:	f100 8105 	bmi.w	800710a <_printf_float+0x462>
 8006f00:	68e0      	ldr	r0, [r4, #12]
 8006f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f04:	4298      	cmp	r0, r3
 8006f06:	bfb8      	it	lt
 8006f08:	4618      	movlt	r0, r3
 8006f0a:	e730      	b.n	8006d6e <_printf_float+0xc6>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	464a      	mov	r2, r9
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f af27 	beq.w	8006d6a <_printf_float+0xc2>
 8006f1c:	f108 0801 	add.w	r8, r8, #1
 8006f20:	e7e6      	b.n	8006ef0 <_printf_float+0x248>
 8006f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dc39      	bgt.n	8006f9c <_printf_float+0x2f4>
 8006f28:	4a1b      	ldr	r2, [pc, #108]	; (8006f98 <_printf_float+0x2f0>)
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4628      	mov	r0, r5
 8006f30:	47b8      	blx	r7
 8006f32:	3001      	adds	r0, #1
 8006f34:	f43f af19 	beq.w	8006d6a <_printf_float+0xc2>
 8006f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	d102      	bne.n	8006f46 <_printf_float+0x29e>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	07d9      	lsls	r1, r3, #31
 8006f44:	d5d8      	bpl.n	8006ef8 <_printf_float+0x250>
 8006f46:	ee18 3a10 	vmov	r3, s16
 8006f4a:	4652      	mov	r2, sl
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4628      	mov	r0, r5
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	f43f af09 	beq.w	8006d6a <_printf_float+0xc2>
 8006f58:	f04f 0900 	mov.w	r9, #0
 8006f5c:	f104 0a1a 	add.w	sl, r4, #26
 8006f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f62:	425b      	negs	r3, r3
 8006f64:	454b      	cmp	r3, r9
 8006f66:	dc01      	bgt.n	8006f6c <_printf_float+0x2c4>
 8006f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f6a:	e792      	b.n	8006e92 <_printf_float+0x1ea>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	4652      	mov	r2, sl
 8006f70:	4631      	mov	r1, r6
 8006f72:	4628      	mov	r0, r5
 8006f74:	47b8      	blx	r7
 8006f76:	3001      	adds	r0, #1
 8006f78:	f43f aef7 	beq.w	8006d6a <_printf_float+0xc2>
 8006f7c:	f109 0901 	add.w	r9, r9, #1
 8006f80:	e7ee      	b.n	8006f60 <_printf_float+0x2b8>
 8006f82:	bf00      	nop
 8006f84:	7fefffff 	.word	0x7fefffff
 8006f88:	08009794 	.word	0x08009794
 8006f8c:	08009798 	.word	0x08009798
 8006f90:	080097a0 	.word	0x080097a0
 8006f94:	0800979c 	.word	0x0800979c
 8006f98:	080097a4 	.word	0x080097a4
 8006f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	bfa8      	it	ge
 8006fa4:	461a      	movge	r2, r3
 8006fa6:	2a00      	cmp	r2, #0
 8006fa8:	4691      	mov	r9, r2
 8006faa:	dc37      	bgt.n	800701c <_printf_float+0x374>
 8006fac:	f04f 0b00 	mov.w	fp, #0
 8006fb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fb4:	f104 021a 	add.w	r2, r4, #26
 8006fb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fba:	9305      	str	r3, [sp, #20]
 8006fbc:	eba3 0309 	sub.w	r3, r3, r9
 8006fc0:	455b      	cmp	r3, fp
 8006fc2:	dc33      	bgt.n	800702c <_printf_float+0x384>
 8006fc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	db3b      	blt.n	8007044 <_printf_float+0x39c>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	07da      	lsls	r2, r3, #31
 8006fd0:	d438      	bmi.n	8007044 <_printf_float+0x39c>
 8006fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd4:	9a05      	ldr	r2, [sp, #20]
 8006fd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fd8:	1a9a      	subs	r2, r3, r2
 8006fda:	eba3 0901 	sub.w	r9, r3, r1
 8006fde:	4591      	cmp	r9, r2
 8006fe0:	bfa8      	it	ge
 8006fe2:	4691      	movge	r9, r2
 8006fe4:	f1b9 0f00 	cmp.w	r9, #0
 8006fe8:	dc35      	bgt.n	8007056 <_printf_float+0x3ae>
 8006fea:	f04f 0800 	mov.w	r8, #0
 8006fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ff2:	f104 0a1a 	add.w	sl, r4, #26
 8006ff6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	eba3 0309 	sub.w	r3, r3, r9
 8007000:	4543      	cmp	r3, r8
 8007002:	f77f af79 	ble.w	8006ef8 <_printf_float+0x250>
 8007006:	2301      	movs	r3, #1
 8007008:	4652      	mov	r2, sl
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	f43f aeaa 	beq.w	8006d6a <_printf_float+0xc2>
 8007016:	f108 0801 	add.w	r8, r8, #1
 800701a:	e7ec      	b.n	8006ff6 <_printf_float+0x34e>
 800701c:	4613      	mov	r3, r2
 800701e:	4631      	mov	r1, r6
 8007020:	4642      	mov	r2, r8
 8007022:	4628      	mov	r0, r5
 8007024:	47b8      	blx	r7
 8007026:	3001      	adds	r0, #1
 8007028:	d1c0      	bne.n	8006fac <_printf_float+0x304>
 800702a:	e69e      	b.n	8006d6a <_printf_float+0xc2>
 800702c:	2301      	movs	r3, #1
 800702e:	4631      	mov	r1, r6
 8007030:	4628      	mov	r0, r5
 8007032:	9205      	str	r2, [sp, #20]
 8007034:	47b8      	blx	r7
 8007036:	3001      	adds	r0, #1
 8007038:	f43f ae97 	beq.w	8006d6a <_printf_float+0xc2>
 800703c:	9a05      	ldr	r2, [sp, #20]
 800703e:	f10b 0b01 	add.w	fp, fp, #1
 8007042:	e7b9      	b.n	8006fb8 <_printf_float+0x310>
 8007044:	ee18 3a10 	vmov	r3, s16
 8007048:	4652      	mov	r2, sl
 800704a:	4631      	mov	r1, r6
 800704c:	4628      	mov	r0, r5
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	d1be      	bne.n	8006fd2 <_printf_float+0x32a>
 8007054:	e689      	b.n	8006d6a <_printf_float+0xc2>
 8007056:	9a05      	ldr	r2, [sp, #20]
 8007058:	464b      	mov	r3, r9
 800705a:	4442      	add	r2, r8
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	d1c1      	bne.n	8006fea <_printf_float+0x342>
 8007066:	e680      	b.n	8006d6a <_printf_float+0xc2>
 8007068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800706a:	2a01      	cmp	r2, #1
 800706c:	dc01      	bgt.n	8007072 <_printf_float+0x3ca>
 800706e:	07db      	lsls	r3, r3, #31
 8007070:	d538      	bpl.n	80070e4 <_printf_float+0x43c>
 8007072:	2301      	movs	r3, #1
 8007074:	4642      	mov	r2, r8
 8007076:	4631      	mov	r1, r6
 8007078:	4628      	mov	r0, r5
 800707a:	47b8      	blx	r7
 800707c:	3001      	adds	r0, #1
 800707e:	f43f ae74 	beq.w	8006d6a <_printf_float+0xc2>
 8007082:	ee18 3a10 	vmov	r3, s16
 8007086:	4652      	mov	r2, sl
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	f43f ae6b 	beq.w	8006d6a <_printf_float+0xc2>
 8007094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007098:	2200      	movs	r2, #0
 800709a:	2300      	movs	r3, #0
 800709c:	f7f9 fd1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80070a0:	b9d8      	cbnz	r0, 80070da <_printf_float+0x432>
 80070a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a4:	f108 0201 	add.w	r2, r8, #1
 80070a8:	3b01      	subs	r3, #1
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	d10e      	bne.n	80070d2 <_printf_float+0x42a>
 80070b4:	e659      	b.n	8006d6a <_printf_float+0xc2>
 80070b6:	2301      	movs	r3, #1
 80070b8:	4652      	mov	r2, sl
 80070ba:	4631      	mov	r1, r6
 80070bc:	4628      	mov	r0, r5
 80070be:	47b8      	blx	r7
 80070c0:	3001      	adds	r0, #1
 80070c2:	f43f ae52 	beq.w	8006d6a <_printf_float+0xc2>
 80070c6:	f108 0801 	add.w	r8, r8, #1
 80070ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070cc:	3b01      	subs	r3, #1
 80070ce:	4543      	cmp	r3, r8
 80070d0:	dcf1      	bgt.n	80070b6 <_printf_float+0x40e>
 80070d2:	464b      	mov	r3, r9
 80070d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070d8:	e6dc      	b.n	8006e94 <_printf_float+0x1ec>
 80070da:	f04f 0800 	mov.w	r8, #0
 80070de:	f104 0a1a 	add.w	sl, r4, #26
 80070e2:	e7f2      	b.n	80070ca <_printf_float+0x422>
 80070e4:	2301      	movs	r3, #1
 80070e6:	4642      	mov	r2, r8
 80070e8:	e7df      	b.n	80070aa <_printf_float+0x402>
 80070ea:	2301      	movs	r3, #1
 80070ec:	464a      	mov	r2, r9
 80070ee:	4631      	mov	r1, r6
 80070f0:	4628      	mov	r0, r5
 80070f2:	47b8      	blx	r7
 80070f4:	3001      	adds	r0, #1
 80070f6:	f43f ae38 	beq.w	8006d6a <_printf_float+0xc2>
 80070fa:	f108 0801 	add.w	r8, r8, #1
 80070fe:	68e3      	ldr	r3, [r4, #12]
 8007100:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007102:	1a5b      	subs	r3, r3, r1
 8007104:	4543      	cmp	r3, r8
 8007106:	dcf0      	bgt.n	80070ea <_printf_float+0x442>
 8007108:	e6fa      	b.n	8006f00 <_printf_float+0x258>
 800710a:	f04f 0800 	mov.w	r8, #0
 800710e:	f104 0919 	add.w	r9, r4, #25
 8007112:	e7f4      	b.n	80070fe <_printf_float+0x456>

08007114 <_printf_common>:
 8007114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007118:	4616      	mov	r6, r2
 800711a:	4699      	mov	r9, r3
 800711c:	688a      	ldr	r2, [r1, #8]
 800711e:	690b      	ldr	r3, [r1, #16]
 8007120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007124:	4293      	cmp	r3, r2
 8007126:	bfb8      	it	lt
 8007128:	4613      	movlt	r3, r2
 800712a:	6033      	str	r3, [r6, #0]
 800712c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007130:	4607      	mov	r7, r0
 8007132:	460c      	mov	r4, r1
 8007134:	b10a      	cbz	r2, 800713a <_printf_common+0x26>
 8007136:	3301      	adds	r3, #1
 8007138:	6033      	str	r3, [r6, #0]
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	0699      	lsls	r1, r3, #26
 800713e:	bf42      	ittt	mi
 8007140:	6833      	ldrmi	r3, [r6, #0]
 8007142:	3302      	addmi	r3, #2
 8007144:	6033      	strmi	r3, [r6, #0]
 8007146:	6825      	ldr	r5, [r4, #0]
 8007148:	f015 0506 	ands.w	r5, r5, #6
 800714c:	d106      	bne.n	800715c <_printf_common+0x48>
 800714e:	f104 0a19 	add.w	sl, r4, #25
 8007152:	68e3      	ldr	r3, [r4, #12]
 8007154:	6832      	ldr	r2, [r6, #0]
 8007156:	1a9b      	subs	r3, r3, r2
 8007158:	42ab      	cmp	r3, r5
 800715a:	dc26      	bgt.n	80071aa <_printf_common+0x96>
 800715c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007160:	1e13      	subs	r3, r2, #0
 8007162:	6822      	ldr	r2, [r4, #0]
 8007164:	bf18      	it	ne
 8007166:	2301      	movne	r3, #1
 8007168:	0692      	lsls	r2, r2, #26
 800716a:	d42b      	bmi.n	80071c4 <_printf_common+0xb0>
 800716c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007170:	4649      	mov	r1, r9
 8007172:	4638      	mov	r0, r7
 8007174:	47c0      	blx	r8
 8007176:	3001      	adds	r0, #1
 8007178:	d01e      	beq.n	80071b8 <_printf_common+0xa4>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	68e5      	ldr	r5, [r4, #12]
 800717e:	6832      	ldr	r2, [r6, #0]
 8007180:	f003 0306 	and.w	r3, r3, #6
 8007184:	2b04      	cmp	r3, #4
 8007186:	bf08      	it	eq
 8007188:	1aad      	subeq	r5, r5, r2
 800718a:	68a3      	ldr	r3, [r4, #8]
 800718c:	6922      	ldr	r2, [r4, #16]
 800718e:	bf0c      	ite	eq
 8007190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007194:	2500      	movne	r5, #0
 8007196:	4293      	cmp	r3, r2
 8007198:	bfc4      	itt	gt
 800719a:	1a9b      	subgt	r3, r3, r2
 800719c:	18ed      	addgt	r5, r5, r3
 800719e:	2600      	movs	r6, #0
 80071a0:	341a      	adds	r4, #26
 80071a2:	42b5      	cmp	r5, r6
 80071a4:	d11a      	bne.n	80071dc <_printf_common+0xc8>
 80071a6:	2000      	movs	r0, #0
 80071a8:	e008      	b.n	80071bc <_printf_common+0xa8>
 80071aa:	2301      	movs	r3, #1
 80071ac:	4652      	mov	r2, sl
 80071ae:	4649      	mov	r1, r9
 80071b0:	4638      	mov	r0, r7
 80071b2:	47c0      	blx	r8
 80071b4:	3001      	adds	r0, #1
 80071b6:	d103      	bne.n	80071c0 <_printf_common+0xac>
 80071b8:	f04f 30ff 	mov.w	r0, #4294967295
 80071bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c0:	3501      	adds	r5, #1
 80071c2:	e7c6      	b.n	8007152 <_printf_common+0x3e>
 80071c4:	18e1      	adds	r1, r4, r3
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	2030      	movs	r0, #48	; 0x30
 80071ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071ce:	4422      	add	r2, r4
 80071d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071d8:	3302      	adds	r3, #2
 80071da:	e7c7      	b.n	800716c <_printf_common+0x58>
 80071dc:	2301      	movs	r3, #1
 80071de:	4622      	mov	r2, r4
 80071e0:	4649      	mov	r1, r9
 80071e2:	4638      	mov	r0, r7
 80071e4:	47c0      	blx	r8
 80071e6:	3001      	adds	r0, #1
 80071e8:	d0e6      	beq.n	80071b8 <_printf_common+0xa4>
 80071ea:	3601      	adds	r6, #1
 80071ec:	e7d9      	b.n	80071a2 <_printf_common+0x8e>
	...

080071f0 <_printf_i>:
 80071f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f4:	7e0f      	ldrb	r7, [r1, #24]
 80071f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071f8:	2f78      	cmp	r7, #120	; 0x78
 80071fa:	4691      	mov	r9, r2
 80071fc:	4680      	mov	r8, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	469a      	mov	sl, r3
 8007202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007206:	d807      	bhi.n	8007218 <_printf_i+0x28>
 8007208:	2f62      	cmp	r7, #98	; 0x62
 800720a:	d80a      	bhi.n	8007222 <_printf_i+0x32>
 800720c:	2f00      	cmp	r7, #0
 800720e:	f000 80d8 	beq.w	80073c2 <_printf_i+0x1d2>
 8007212:	2f58      	cmp	r7, #88	; 0x58
 8007214:	f000 80a3 	beq.w	800735e <_printf_i+0x16e>
 8007218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800721c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007220:	e03a      	b.n	8007298 <_printf_i+0xa8>
 8007222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007226:	2b15      	cmp	r3, #21
 8007228:	d8f6      	bhi.n	8007218 <_printf_i+0x28>
 800722a:	a101      	add	r1, pc, #4	; (adr r1, 8007230 <_printf_i+0x40>)
 800722c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007230:	08007289 	.word	0x08007289
 8007234:	0800729d 	.word	0x0800729d
 8007238:	08007219 	.word	0x08007219
 800723c:	08007219 	.word	0x08007219
 8007240:	08007219 	.word	0x08007219
 8007244:	08007219 	.word	0x08007219
 8007248:	0800729d 	.word	0x0800729d
 800724c:	08007219 	.word	0x08007219
 8007250:	08007219 	.word	0x08007219
 8007254:	08007219 	.word	0x08007219
 8007258:	08007219 	.word	0x08007219
 800725c:	080073a9 	.word	0x080073a9
 8007260:	080072cd 	.word	0x080072cd
 8007264:	0800738b 	.word	0x0800738b
 8007268:	08007219 	.word	0x08007219
 800726c:	08007219 	.word	0x08007219
 8007270:	080073cb 	.word	0x080073cb
 8007274:	08007219 	.word	0x08007219
 8007278:	080072cd 	.word	0x080072cd
 800727c:	08007219 	.word	0x08007219
 8007280:	08007219 	.word	0x08007219
 8007284:	08007393 	.word	0x08007393
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	1d1a      	adds	r2, r3, #4
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	602a      	str	r2, [r5, #0]
 8007290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007298:	2301      	movs	r3, #1
 800729a:	e0a3      	b.n	80073e4 <_printf_i+0x1f4>
 800729c:	6820      	ldr	r0, [r4, #0]
 800729e:	6829      	ldr	r1, [r5, #0]
 80072a0:	0606      	lsls	r6, r0, #24
 80072a2:	f101 0304 	add.w	r3, r1, #4
 80072a6:	d50a      	bpl.n	80072be <_printf_i+0xce>
 80072a8:	680e      	ldr	r6, [r1, #0]
 80072aa:	602b      	str	r3, [r5, #0]
 80072ac:	2e00      	cmp	r6, #0
 80072ae:	da03      	bge.n	80072b8 <_printf_i+0xc8>
 80072b0:	232d      	movs	r3, #45	; 0x2d
 80072b2:	4276      	negs	r6, r6
 80072b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b8:	485e      	ldr	r0, [pc, #376]	; (8007434 <_printf_i+0x244>)
 80072ba:	230a      	movs	r3, #10
 80072bc:	e019      	b.n	80072f2 <_printf_i+0x102>
 80072be:	680e      	ldr	r6, [r1, #0]
 80072c0:	602b      	str	r3, [r5, #0]
 80072c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072c6:	bf18      	it	ne
 80072c8:	b236      	sxthne	r6, r6
 80072ca:	e7ef      	b.n	80072ac <_printf_i+0xbc>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	6820      	ldr	r0, [r4, #0]
 80072d0:	1d19      	adds	r1, r3, #4
 80072d2:	6029      	str	r1, [r5, #0]
 80072d4:	0601      	lsls	r1, r0, #24
 80072d6:	d501      	bpl.n	80072dc <_printf_i+0xec>
 80072d8:	681e      	ldr	r6, [r3, #0]
 80072da:	e002      	b.n	80072e2 <_printf_i+0xf2>
 80072dc:	0646      	lsls	r6, r0, #25
 80072de:	d5fb      	bpl.n	80072d8 <_printf_i+0xe8>
 80072e0:	881e      	ldrh	r6, [r3, #0]
 80072e2:	4854      	ldr	r0, [pc, #336]	; (8007434 <_printf_i+0x244>)
 80072e4:	2f6f      	cmp	r7, #111	; 0x6f
 80072e6:	bf0c      	ite	eq
 80072e8:	2308      	moveq	r3, #8
 80072ea:	230a      	movne	r3, #10
 80072ec:	2100      	movs	r1, #0
 80072ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072f2:	6865      	ldr	r5, [r4, #4]
 80072f4:	60a5      	str	r5, [r4, #8]
 80072f6:	2d00      	cmp	r5, #0
 80072f8:	bfa2      	ittt	ge
 80072fa:	6821      	ldrge	r1, [r4, #0]
 80072fc:	f021 0104 	bicge.w	r1, r1, #4
 8007300:	6021      	strge	r1, [r4, #0]
 8007302:	b90e      	cbnz	r6, 8007308 <_printf_i+0x118>
 8007304:	2d00      	cmp	r5, #0
 8007306:	d04d      	beq.n	80073a4 <_printf_i+0x1b4>
 8007308:	4615      	mov	r5, r2
 800730a:	fbb6 f1f3 	udiv	r1, r6, r3
 800730e:	fb03 6711 	mls	r7, r3, r1, r6
 8007312:	5dc7      	ldrb	r7, [r0, r7]
 8007314:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007318:	4637      	mov	r7, r6
 800731a:	42bb      	cmp	r3, r7
 800731c:	460e      	mov	r6, r1
 800731e:	d9f4      	bls.n	800730a <_printf_i+0x11a>
 8007320:	2b08      	cmp	r3, #8
 8007322:	d10b      	bne.n	800733c <_printf_i+0x14c>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	07de      	lsls	r6, r3, #31
 8007328:	d508      	bpl.n	800733c <_printf_i+0x14c>
 800732a:	6923      	ldr	r3, [r4, #16]
 800732c:	6861      	ldr	r1, [r4, #4]
 800732e:	4299      	cmp	r1, r3
 8007330:	bfde      	ittt	le
 8007332:	2330      	movle	r3, #48	; 0x30
 8007334:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007338:	f105 35ff 	addle.w	r5, r5, #4294967295
 800733c:	1b52      	subs	r2, r2, r5
 800733e:	6122      	str	r2, [r4, #16]
 8007340:	f8cd a000 	str.w	sl, [sp]
 8007344:	464b      	mov	r3, r9
 8007346:	aa03      	add	r2, sp, #12
 8007348:	4621      	mov	r1, r4
 800734a:	4640      	mov	r0, r8
 800734c:	f7ff fee2 	bl	8007114 <_printf_common>
 8007350:	3001      	adds	r0, #1
 8007352:	d14c      	bne.n	80073ee <_printf_i+0x1fe>
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	b004      	add	sp, #16
 800735a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800735e:	4835      	ldr	r0, [pc, #212]	; (8007434 <_printf_i+0x244>)
 8007360:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007364:	6829      	ldr	r1, [r5, #0]
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	f851 6b04 	ldr.w	r6, [r1], #4
 800736c:	6029      	str	r1, [r5, #0]
 800736e:	061d      	lsls	r5, r3, #24
 8007370:	d514      	bpl.n	800739c <_printf_i+0x1ac>
 8007372:	07df      	lsls	r7, r3, #31
 8007374:	bf44      	itt	mi
 8007376:	f043 0320 	orrmi.w	r3, r3, #32
 800737a:	6023      	strmi	r3, [r4, #0]
 800737c:	b91e      	cbnz	r6, 8007386 <_printf_i+0x196>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	f023 0320 	bic.w	r3, r3, #32
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	2310      	movs	r3, #16
 8007388:	e7b0      	b.n	80072ec <_printf_i+0xfc>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	f043 0320 	orr.w	r3, r3, #32
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	2378      	movs	r3, #120	; 0x78
 8007394:	4828      	ldr	r0, [pc, #160]	; (8007438 <_printf_i+0x248>)
 8007396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800739a:	e7e3      	b.n	8007364 <_printf_i+0x174>
 800739c:	0659      	lsls	r1, r3, #25
 800739e:	bf48      	it	mi
 80073a0:	b2b6      	uxthmi	r6, r6
 80073a2:	e7e6      	b.n	8007372 <_printf_i+0x182>
 80073a4:	4615      	mov	r5, r2
 80073a6:	e7bb      	b.n	8007320 <_printf_i+0x130>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	6826      	ldr	r6, [r4, #0]
 80073ac:	6961      	ldr	r1, [r4, #20]
 80073ae:	1d18      	adds	r0, r3, #4
 80073b0:	6028      	str	r0, [r5, #0]
 80073b2:	0635      	lsls	r5, r6, #24
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	d501      	bpl.n	80073bc <_printf_i+0x1cc>
 80073b8:	6019      	str	r1, [r3, #0]
 80073ba:	e002      	b.n	80073c2 <_printf_i+0x1d2>
 80073bc:	0670      	lsls	r0, r6, #25
 80073be:	d5fb      	bpl.n	80073b8 <_printf_i+0x1c8>
 80073c0:	8019      	strh	r1, [r3, #0]
 80073c2:	2300      	movs	r3, #0
 80073c4:	6123      	str	r3, [r4, #16]
 80073c6:	4615      	mov	r5, r2
 80073c8:	e7ba      	b.n	8007340 <_printf_i+0x150>
 80073ca:	682b      	ldr	r3, [r5, #0]
 80073cc:	1d1a      	adds	r2, r3, #4
 80073ce:	602a      	str	r2, [r5, #0]
 80073d0:	681d      	ldr	r5, [r3, #0]
 80073d2:	6862      	ldr	r2, [r4, #4]
 80073d4:	2100      	movs	r1, #0
 80073d6:	4628      	mov	r0, r5
 80073d8:	f7f8 ff0a 	bl	80001f0 <memchr>
 80073dc:	b108      	cbz	r0, 80073e2 <_printf_i+0x1f2>
 80073de:	1b40      	subs	r0, r0, r5
 80073e0:	6060      	str	r0, [r4, #4]
 80073e2:	6863      	ldr	r3, [r4, #4]
 80073e4:	6123      	str	r3, [r4, #16]
 80073e6:	2300      	movs	r3, #0
 80073e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ec:	e7a8      	b.n	8007340 <_printf_i+0x150>
 80073ee:	6923      	ldr	r3, [r4, #16]
 80073f0:	462a      	mov	r2, r5
 80073f2:	4649      	mov	r1, r9
 80073f4:	4640      	mov	r0, r8
 80073f6:	47d0      	blx	sl
 80073f8:	3001      	adds	r0, #1
 80073fa:	d0ab      	beq.n	8007354 <_printf_i+0x164>
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	079b      	lsls	r3, r3, #30
 8007400:	d413      	bmi.n	800742a <_printf_i+0x23a>
 8007402:	68e0      	ldr	r0, [r4, #12]
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	4298      	cmp	r0, r3
 8007408:	bfb8      	it	lt
 800740a:	4618      	movlt	r0, r3
 800740c:	e7a4      	b.n	8007358 <_printf_i+0x168>
 800740e:	2301      	movs	r3, #1
 8007410:	4632      	mov	r2, r6
 8007412:	4649      	mov	r1, r9
 8007414:	4640      	mov	r0, r8
 8007416:	47d0      	blx	sl
 8007418:	3001      	adds	r0, #1
 800741a:	d09b      	beq.n	8007354 <_printf_i+0x164>
 800741c:	3501      	adds	r5, #1
 800741e:	68e3      	ldr	r3, [r4, #12]
 8007420:	9903      	ldr	r1, [sp, #12]
 8007422:	1a5b      	subs	r3, r3, r1
 8007424:	42ab      	cmp	r3, r5
 8007426:	dcf2      	bgt.n	800740e <_printf_i+0x21e>
 8007428:	e7eb      	b.n	8007402 <_printf_i+0x212>
 800742a:	2500      	movs	r5, #0
 800742c:	f104 0619 	add.w	r6, r4, #25
 8007430:	e7f5      	b.n	800741e <_printf_i+0x22e>
 8007432:	bf00      	nop
 8007434:	080097a6 	.word	0x080097a6
 8007438:	080097b7 	.word	0x080097b7

0800743c <iprintf>:
 800743c:	b40f      	push	{r0, r1, r2, r3}
 800743e:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <iprintf+0x2c>)
 8007440:	b513      	push	{r0, r1, r4, lr}
 8007442:	681c      	ldr	r4, [r3, #0]
 8007444:	b124      	cbz	r4, 8007450 <iprintf+0x14>
 8007446:	69a3      	ldr	r3, [r4, #24]
 8007448:	b913      	cbnz	r3, 8007450 <iprintf+0x14>
 800744a:	4620      	mov	r0, r4
 800744c:	f001 f8d8 	bl	8008600 <__sinit>
 8007450:	ab05      	add	r3, sp, #20
 8007452:	9a04      	ldr	r2, [sp, #16]
 8007454:	68a1      	ldr	r1, [r4, #8]
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	4620      	mov	r0, r4
 800745a:	f001 fe95 	bl	8009188 <_vfiprintf_r>
 800745e:	b002      	add	sp, #8
 8007460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007464:	b004      	add	sp, #16
 8007466:	4770      	bx	lr
 8007468:	20000024 	.word	0x20000024

0800746c <_puts_r>:
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	460e      	mov	r6, r1
 8007470:	4605      	mov	r5, r0
 8007472:	b118      	cbz	r0, 800747c <_puts_r+0x10>
 8007474:	6983      	ldr	r3, [r0, #24]
 8007476:	b90b      	cbnz	r3, 800747c <_puts_r+0x10>
 8007478:	f001 f8c2 	bl	8008600 <__sinit>
 800747c:	69ab      	ldr	r3, [r5, #24]
 800747e:	68ac      	ldr	r4, [r5, #8]
 8007480:	b913      	cbnz	r3, 8007488 <_puts_r+0x1c>
 8007482:	4628      	mov	r0, r5
 8007484:	f001 f8bc 	bl	8008600 <__sinit>
 8007488:	4b2c      	ldr	r3, [pc, #176]	; (800753c <_puts_r+0xd0>)
 800748a:	429c      	cmp	r4, r3
 800748c:	d120      	bne.n	80074d0 <_puts_r+0x64>
 800748e:	686c      	ldr	r4, [r5, #4]
 8007490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007492:	07db      	lsls	r3, r3, #31
 8007494:	d405      	bmi.n	80074a2 <_puts_r+0x36>
 8007496:	89a3      	ldrh	r3, [r4, #12]
 8007498:	0598      	lsls	r0, r3, #22
 800749a:	d402      	bmi.n	80074a2 <_puts_r+0x36>
 800749c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800749e:	f001 f952 	bl	8008746 <__retarget_lock_acquire_recursive>
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	0719      	lsls	r1, r3, #28
 80074a6:	d51d      	bpl.n	80074e4 <_puts_r+0x78>
 80074a8:	6923      	ldr	r3, [r4, #16]
 80074aa:	b1db      	cbz	r3, 80074e4 <_puts_r+0x78>
 80074ac:	3e01      	subs	r6, #1
 80074ae:	68a3      	ldr	r3, [r4, #8]
 80074b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074b4:	3b01      	subs	r3, #1
 80074b6:	60a3      	str	r3, [r4, #8]
 80074b8:	bb39      	cbnz	r1, 800750a <_puts_r+0x9e>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	da38      	bge.n	8007530 <_puts_r+0xc4>
 80074be:	4622      	mov	r2, r4
 80074c0:	210a      	movs	r1, #10
 80074c2:	4628      	mov	r0, r5
 80074c4:	f000 f848 	bl	8007558 <__swbuf_r>
 80074c8:	3001      	adds	r0, #1
 80074ca:	d011      	beq.n	80074f0 <_puts_r+0x84>
 80074cc:	250a      	movs	r5, #10
 80074ce:	e011      	b.n	80074f4 <_puts_r+0x88>
 80074d0:	4b1b      	ldr	r3, [pc, #108]	; (8007540 <_puts_r+0xd4>)
 80074d2:	429c      	cmp	r4, r3
 80074d4:	d101      	bne.n	80074da <_puts_r+0x6e>
 80074d6:	68ac      	ldr	r4, [r5, #8]
 80074d8:	e7da      	b.n	8007490 <_puts_r+0x24>
 80074da:	4b1a      	ldr	r3, [pc, #104]	; (8007544 <_puts_r+0xd8>)
 80074dc:	429c      	cmp	r4, r3
 80074de:	bf08      	it	eq
 80074e0:	68ec      	ldreq	r4, [r5, #12]
 80074e2:	e7d5      	b.n	8007490 <_puts_r+0x24>
 80074e4:	4621      	mov	r1, r4
 80074e6:	4628      	mov	r0, r5
 80074e8:	f000 f888 	bl	80075fc <__swsetup_r>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d0dd      	beq.n	80074ac <_puts_r+0x40>
 80074f0:	f04f 35ff 	mov.w	r5, #4294967295
 80074f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074f6:	07da      	lsls	r2, r3, #31
 80074f8:	d405      	bmi.n	8007506 <_puts_r+0x9a>
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	059b      	lsls	r3, r3, #22
 80074fe:	d402      	bmi.n	8007506 <_puts_r+0x9a>
 8007500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007502:	f001 f921 	bl	8008748 <__retarget_lock_release_recursive>
 8007506:	4628      	mov	r0, r5
 8007508:	bd70      	pop	{r4, r5, r6, pc}
 800750a:	2b00      	cmp	r3, #0
 800750c:	da04      	bge.n	8007518 <_puts_r+0xac>
 800750e:	69a2      	ldr	r2, [r4, #24]
 8007510:	429a      	cmp	r2, r3
 8007512:	dc06      	bgt.n	8007522 <_puts_r+0xb6>
 8007514:	290a      	cmp	r1, #10
 8007516:	d004      	beq.n	8007522 <_puts_r+0xb6>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	6022      	str	r2, [r4, #0]
 800751e:	7019      	strb	r1, [r3, #0]
 8007520:	e7c5      	b.n	80074ae <_puts_r+0x42>
 8007522:	4622      	mov	r2, r4
 8007524:	4628      	mov	r0, r5
 8007526:	f000 f817 	bl	8007558 <__swbuf_r>
 800752a:	3001      	adds	r0, #1
 800752c:	d1bf      	bne.n	80074ae <_puts_r+0x42>
 800752e:	e7df      	b.n	80074f0 <_puts_r+0x84>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	250a      	movs	r5, #10
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	6022      	str	r2, [r4, #0]
 8007538:	701d      	strb	r5, [r3, #0]
 800753a:	e7db      	b.n	80074f4 <_puts_r+0x88>
 800753c:	08009878 	.word	0x08009878
 8007540:	08009898 	.word	0x08009898
 8007544:	08009858 	.word	0x08009858

08007548 <puts>:
 8007548:	4b02      	ldr	r3, [pc, #8]	; (8007554 <puts+0xc>)
 800754a:	4601      	mov	r1, r0
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	f7ff bf8d 	b.w	800746c <_puts_r>
 8007552:	bf00      	nop
 8007554:	20000024 	.word	0x20000024

08007558 <__swbuf_r>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	460e      	mov	r6, r1
 800755c:	4614      	mov	r4, r2
 800755e:	4605      	mov	r5, r0
 8007560:	b118      	cbz	r0, 800756a <__swbuf_r+0x12>
 8007562:	6983      	ldr	r3, [r0, #24]
 8007564:	b90b      	cbnz	r3, 800756a <__swbuf_r+0x12>
 8007566:	f001 f84b 	bl	8008600 <__sinit>
 800756a:	4b21      	ldr	r3, [pc, #132]	; (80075f0 <__swbuf_r+0x98>)
 800756c:	429c      	cmp	r4, r3
 800756e:	d12b      	bne.n	80075c8 <__swbuf_r+0x70>
 8007570:	686c      	ldr	r4, [r5, #4]
 8007572:	69a3      	ldr	r3, [r4, #24]
 8007574:	60a3      	str	r3, [r4, #8]
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	071a      	lsls	r2, r3, #28
 800757a:	d52f      	bpl.n	80075dc <__swbuf_r+0x84>
 800757c:	6923      	ldr	r3, [r4, #16]
 800757e:	b36b      	cbz	r3, 80075dc <__swbuf_r+0x84>
 8007580:	6923      	ldr	r3, [r4, #16]
 8007582:	6820      	ldr	r0, [r4, #0]
 8007584:	1ac0      	subs	r0, r0, r3
 8007586:	6963      	ldr	r3, [r4, #20]
 8007588:	b2f6      	uxtb	r6, r6
 800758a:	4283      	cmp	r3, r0
 800758c:	4637      	mov	r7, r6
 800758e:	dc04      	bgt.n	800759a <__swbuf_r+0x42>
 8007590:	4621      	mov	r1, r4
 8007592:	4628      	mov	r0, r5
 8007594:	f000 ffa0 	bl	80084d8 <_fflush_r>
 8007598:	bb30      	cbnz	r0, 80075e8 <__swbuf_r+0x90>
 800759a:	68a3      	ldr	r3, [r4, #8]
 800759c:	3b01      	subs	r3, #1
 800759e:	60a3      	str	r3, [r4, #8]
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	6022      	str	r2, [r4, #0]
 80075a6:	701e      	strb	r6, [r3, #0]
 80075a8:	6963      	ldr	r3, [r4, #20]
 80075aa:	3001      	adds	r0, #1
 80075ac:	4283      	cmp	r3, r0
 80075ae:	d004      	beq.n	80075ba <__swbuf_r+0x62>
 80075b0:	89a3      	ldrh	r3, [r4, #12]
 80075b2:	07db      	lsls	r3, r3, #31
 80075b4:	d506      	bpl.n	80075c4 <__swbuf_r+0x6c>
 80075b6:	2e0a      	cmp	r6, #10
 80075b8:	d104      	bne.n	80075c4 <__swbuf_r+0x6c>
 80075ba:	4621      	mov	r1, r4
 80075bc:	4628      	mov	r0, r5
 80075be:	f000 ff8b 	bl	80084d8 <_fflush_r>
 80075c2:	b988      	cbnz	r0, 80075e8 <__swbuf_r+0x90>
 80075c4:	4638      	mov	r0, r7
 80075c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c8:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <__swbuf_r+0x9c>)
 80075ca:	429c      	cmp	r4, r3
 80075cc:	d101      	bne.n	80075d2 <__swbuf_r+0x7a>
 80075ce:	68ac      	ldr	r4, [r5, #8]
 80075d0:	e7cf      	b.n	8007572 <__swbuf_r+0x1a>
 80075d2:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <__swbuf_r+0xa0>)
 80075d4:	429c      	cmp	r4, r3
 80075d6:	bf08      	it	eq
 80075d8:	68ec      	ldreq	r4, [r5, #12]
 80075da:	e7ca      	b.n	8007572 <__swbuf_r+0x1a>
 80075dc:	4621      	mov	r1, r4
 80075de:	4628      	mov	r0, r5
 80075e0:	f000 f80c 	bl	80075fc <__swsetup_r>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d0cb      	beq.n	8007580 <__swbuf_r+0x28>
 80075e8:	f04f 37ff 	mov.w	r7, #4294967295
 80075ec:	e7ea      	b.n	80075c4 <__swbuf_r+0x6c>
 80075ee:	bf00      	nop
 80075f0:	08009878 	.word	0x08009878
 80075f4:	08009898 	.word	0x08009898
 80075f8:	08009858 	.word	0x08009858

080075fc <__swsetup_r>:
 80075fc:	4b32      	ldr	r3, [pc, #200]	; (80076c8 <__swsetup_r+0xcc>)
 80075fe:	b570      	push	{r4, r5, r6, lr}
 8007600:	681d      	ldr	r5, [r3, #0]
 8007602:	4606      	mov	r6, r0
 8007604:	460c      	mov	r4, r1
 8007606:	b125      	cbz	r5, 8007612 <__swsetup_r+0x16>
 8007608:	69ab      	ldr	r3, [r5, #24]
 800760a:	b913      	cbnz	r3, 8007612 <__swsetup_r+0x16>
 800760c:	4628      	mov	r0, r5
 800760e:	f000 fff7 	bl	8008600 <__sinit>
 8007612:	4b2e      	ldr	r3, [pc, #184]	; (80076cc <__swsetup_r+0xd0>)
 8007614:	429c      	cmp	r4, r3
 8007616:	d10f      	bne.n	8007638 <__swsetup_r+0x3c>
 8007618:	686c      	ldr	r4, [r5, #4]
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007620:	0719      	lsls	r1, r3, #28
 8007622:	d42c      	bmi.n	800767e <__swsetup_r+0x82>
 8007624:	06dd      	lsls	r5, r3, #27
 8007626:	d411      	bmi.n	800764c <__swsetup_r+0x50>
 8007628:	2309      	movs	r3, #9
 800762a:	6033      	str	r3, [r6, #0]
 800762c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	f04f 30ff 	mov.w	r0, #4294967295
 8007636:	e03e      	b.n	80076b6 <__swsetup_r+0xba>
 8007638:	4b25      	ldr	r3, [pc, #148]	; (80076d0 <__swsetup_r+0xd4>)
 800763a:	429c      	cmp	r4, r3
 800763c:	d101      	bne.n	8007642 <__swsetup_r+0x46>
 800763e:	68ac      	ldr	r4, [r5, #8]
 8007640:	e7eb      	b.n	800761a <__swsetup_r+0x1e>
 8007642:	4b24      	ldr	r3, [pc, #144]	; (80076d4 <__swsetup_r+0xd8>)
 8007644:	429c      	cmp	r4, r3
 8007646:	bf08      	it	eq
 8007648:	68ec      	ldreq	r4, [r5, #12]
 800764a:	e7e6      	b.n	800761a <__swsetup_r+0x1e>
 800764c:	0758      	lsls	r0, r3, #29
 800764e:	d512      	bpl.n	8007676 <__swsetup_r+0x7a>
 8007650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007652:	b141      	cbz	r1, 8007666 <__swsetup_r+0x6a>
 8007654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007658:	4299      	cmp	r1, r3
 800765a:	d002      	beq.n	8007662 <__swsetup_r+0x66>
 800765c:	4630      	mov	r0, r6
 800765e:	f001 fc89 	bl	8008f74 <_free_r>
 8007662:	2300      	movs	r3, #0
 8007664:	6363      	str	r3, [r4, #52]	; 0x34
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	2300      	movs	r3, #0
 8007670:	6063      	str	r3, [r4, #4]
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	f043 0308 	orr.w	r3, r3, #8
 800767c:	81a3      	strh	r3, [r4, #12]
 800767e:	6923      	ldr	r3, [r4, #16]
 8007680:	b94b      	cbnz	r3, 8007696 <__swsetup_r+0x9a>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800768c:	d003      	beq.n	8007696 <__swsetup_r+0x9a>
 800768e:	4621      	mov	r1, r4
 8007690:	4630      	mov	r0, r6
 8007692:	f001 f87f 	bl	8008794 <__smakebuf_r>
 8007696:	89a0      	ldrh	r0, [r4, #12]
 8007698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800769c:	f010 0301 	ands.w	r3, r0, #1
 80076a0:	d00a      	beq.n	80076b8 <__swsetup_r+0xbc>
 80076a2:	2300      	movs	r3, #0
 80076a4:	60a3      	str	r3, [r4, #8]
 80076a6:	6963      	ldr	r3, [r4, #20]
 80076a8:	425b      	negs	r3, r3
 80076aa:	61a3      	str	r3, [r4, #24]
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	b943      	cbnz	r3, 80076c2 <__swsetup_r+0xc6>
 80076b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076b4:	d1ba      	bne.n	800762c <__swsetup_r+0x30>
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	0781      	lsls	r1, r0, #30
 80076ba:	bf58      	it	pl
 80076bc:	6963      	ldrpl	r3, [r4, #20]
 80076be:	60a3      	str	r3, [r4, #8]
 80076c0:	e7f4      	b.n	80076ac <__swsetup_r+0xb0>
 80076c2:	2000      	movs	r0, #0
 80076c4:	e7f7      	b.n	80076b6 <__swsetup_r+0xba>
 80076c6:	bf00      	nop
 80076c8:	20000024 	.word	0x20000024
 80076cc:	08009878 	.word	0x08009878
 80076d0:	08009898 	.word	0x08009898
 80076d4:	08009858 	.word	0x08009858

080076d8 <quorem>:
 80076d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076dc:	6903      	ldr	r3, [r0, #16]
 80076de:	690c      	ldr	r4, [r1, #16]
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	4607      	mov	r7, r0
 80076e4:	f2c0 8081 	blt.w	80077ea <quorem+0x112>
 80076e8:	3c01      	subs	r4, #1
 80076ea:	f101 0814 	add.w	r8, r1, #20
 80076ee:	f100 0514 	add.w	r5, r0, #20
 80076f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007700:	3301      	adds	r3, #1
 8007702:	429a      	cmp	r2, r3
 8007704:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007708:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800770c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007710:	d331      	bcc.n	8007776 <quorem+0x9e>
 8007712:	f04f 0e00 	mov.w	lr, #0
 8007716:	4640      	mov	r0, r8
 8007718:	46ac      	mov	ip, r5
 800771a:	46f2      	mov	sl, lr
 800771c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007720:	b293      	uxth	r3, r2
 8007722:	fb06 e303 	mla	r3, r6, r3, lr
 8007726:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800772a:	b29b      	uxth	r3, r3
 800772c:	ebaa 0303 	sub.w	r3, sl, r3
 8007730:	f8dc a000 	ldr.w	sl, [ip]
 8007734:	0c12      	lsrs	r2, r2, #16
 8007736:	fa13 f38a 	uxtah	r3, r3, sl
 800773a:	fb06 e202 	mla	r2, r6, r2, lr
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	9b00      	ldr	r3, [sp, #0]
 8007742:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007746:	b292      	uxth	r2, r2
 8007748:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800774c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007750:	f8bd 3000 	ldrh.w	r3, [sp]
 8007754:	4581      	cmp	r9, r0
 8007756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800775a:	f84c 3b04 	str.w	r3, [ip], #4
 800775e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007762:	d2db      	bcs.n	800771c <quorem+0x44>
 8007764:	f855 300b 	ldr.w	r3, [r5, fp]
 8007768:	b92b      	cbnz	r3, 8007776 <quorem+0x9e>
 800776a:	9b01      	ldr	r3, [sp, #4]
 800776c:	3b04      	subs	r3, #4
 800776e:	429d      	cmp	r5, r3
 8007770:	461a      	mov	r2, r3
 8007772:	d32e      	bcc.n	80077d2 <quorem+0xfa>
 8007774:	613c      	str	r4, [r7, #16]
 8007776:	4638      	mov	r0, r7
 8007778:	f001 fae4 	bl	8008d44 <__mcmp>
 800777c:	2800      	cmp	r0, #0
 800777e:	db24      	blt.n	80077ca <quorem+0xf2>
 8007780:	3601      	adds	r6, #1
 8007782:	4628      	mov	r0, r5
 8007784:	f04f 0c00 	mov.w	ip, #0
 8007788:	f858 2b04 	ldr.w	r2, [r8], #4
 800778c:	f8d0 e000 	ldr.w	lr, [r0]
 8007790:	b293      	uxth	r3, r2
 8007792:	ebac 0303 	sub.w	r3, ip, r3
 8007796:	0c12      	lsrs	r2, r2, #16
 8007798:	fa13 f38e 	uxtah	r3, r3, lr
 800779c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077aa:	45c1      	cmp	r9, r8
 80077ac:	f840 3b04 	str.w	r3, [r0], #4
 80077b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077b4:	d2e8      	bcs.n	8007788 <quorem+0xb0>
 80077b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077be:	b922      	cbnz	r2, 80077ca <quorem+0xf2>
 80077c0:	3b04      	subs	r3, #4
 80077c2:	429d      	cmp	r5, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	d30a      	bcc.n	80077de <quorem+0x106>
 80077c8:	613c      	str	r4, [r7, #16]
 80077ca:	4630      	mov	r0, r6
 80077cc:	b003      	add	sp, #12
 80077ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d2:	6812      	ldr	r2, [r2, #0]
 80077d4:	3b04      	subs	r3, #4
 80077d6:	2a00      	cmp	r2, #0
 80077d8:	d1cc      	bne.n	8007774 <quorem+0x9c>
 80077da:	3c01      	subs	r4, #1
 80077dc:	e7c7      	b.n	800776e <quorem+0x96>
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	3b04      	subs	r3, #4
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	d1f0      	bne.n	80077c8 <quorem+0xf0>
 80077e6:	3c01      	subs	r4, #1
 80077e8:	e7eb      	b.n	80077c2 <quorem+0xea>
 80077ea:	2000      	movs	r0, #0
 80077ec:	e7ee      	b.n	80077cc <quorem+0xf4>
	...

080077f0 <_dtoa_r>:
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	ed2d 8b04 	vpush	{d8-d9}
 80077f8:	ec57 6b10 	vmov	r6, r7, d0
 80077fc:	b093      	sub	sp, #76	; 0x4c
 80077fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007800:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007804:	9106      	str	r1, [sp, #24]
 8007806:	ee10 aa10 	vmov	sl, s0
 800780a:	4604      	mov	r4, r0
 800780c:	9209      	str	r2, [sp, #36]	; 0x24
 800780e:	930c      	str	r3, [sp, #48]	; 0x30
 8007810:	46bb      	mov	fp, r7
 8007812:	b975      	cbnz	r5, 8007832 <_dtoa_r+0x42>
 8007814:	2010      	movs	r0, #16
 8007816:	f000 fffd 	bl	8008814 <malloc>
 800781a:	4602      	mov	r2, r0
 800781c:	6260      	str	r0, [r4, #36]	; 0x24
 800781e:	b920      	cbnz	r0, 800782a <_dtoa_r+0x3a>
 8007820:	4ba7      	ldr	r3, [pc, #668]	; (8007ac0 <_dtoa_r+0x2d0>)
 8007822:	21ea      	movs	r1, #234	; 0xea
 8007824:	48a7      	ldr	r0, [pc, #668]	; (8007ac4 <_dtoa_r+0x2d4>)
 8007826:	f001 fe45 	bl	80094b4 <__assert_func>
 800782a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800782e:	6005      	str	r5, [r0, #0]
 8007830:	60c5      	str	r5, [r0, #12]
 8007832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007834:	6819      	ldr	r1, [r3, #0]
 8007836:	b151      	cbz	r1, 800784e <_dtoa_r+0x5e>
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	604a      	str	r2, [r1, #4]
 800783c:	2301      	movs	r3, #1
 800783e:	4093      	lsls	r3, r2
 8007840:	608b      	str	r3, [r1, #8]
 8007842:	4620      	mov	r0, r4
 8007844:	f001 f83c 	bl	80088c0 <_Bfree>
 8007848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	1e3b      	subs	r3, r7, #0
 8007850:	bfaa      	itet	ge
 8007852:	2300      	movge	r3, #0
 8007854:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007858:	f8c8 3000 	strge.w	r3, [r8]
 800785c:	4b9a      	ldr	r3, [pc, #616]	; (8007ac8 <_dtoa_r+0x2d8>)
 800785e:	bfbc      	itt	lt
 8007860:	2201      	movlt	r2, #1
 8007862:	f8c8 2000 	strlt.w	r2, [r8]
 8007866:	ea33 030b 	bics.w	r3, r3, fp
 800786a:	d11b      	bne.n	80078a4 <_dtoa_r+0xb4>
 800786c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800786e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007878:	4333      	orrs	r3, r6
 800787a:	f000 8592 	beq.w	80083a2 <_dtoa_r+0xbb2>
 800787e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007880:	b963      	cbnz	r3, 800789c <_dtoa_r+0xac>
 8007882:	4b92      	ldr	r3, [pc, #584]	; (8007acc <_dtoa_r+0x2dc>)
 8007884:	e022      	b.n	80078cc <_dtoa_r+0xdc>
 8007886:	4b92      	ldr	r3, [pc, #584]	; (8007ad0 <_dtoa_r+0x2e0>)
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	3308      	adds	r3, #8
 800788c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	9801      	ldr	r0, [sp, #4]
 8007892:	b013      	add	sp, #76	; 0x4c
 8007894:	ecbd 8b04 	vpop	{d8-d9}
 8007898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789c:	4b8b      	ldr	r3, [pc, #556]	; (8007acc <_dtoa_r+0x2dc>)
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	3303      	adds	r3, #3
 80078a2:	e7f3      	b.n	800788c <_dtoa_r+0x9c>
 80078a4:	2200      	movs	r2, #0
 80078a6:	2300      	movs	r3, #0
 80078a8:	4650      	mov	r0, sl
 80078aa:	4659      	mov	r1, fp
 80078ac:	f7f9 f914 	bl	8000ad8 <__aeabi_dcmpeq>
 80078b0:	ec4b ab19 	vmov	d9, sl, fp
 80078b4:	4680      	mov	r8, r0
 80078b6:	b158      	cbz	r0, 80078d0 <_dtoa_r+0xe0>
 80078b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ba:	2301      	movs	r3, #1
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 856b 	beq.w	800839c <_dtoa_r+0xbac>
 80078c6:	4883      	ldr	r0, [pc, #524]	; (8007ad4 <_dtoa_r+0x2e4>)
 80078c8:	6018      	str	r0, [r3, #0]
 80078ca:	1e43      	subs	r3, r0, #1
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	e7df      	b.n	8007890 <_dtoa_r+0xa0>
 80078d0:	ec4b ab10 	vmov	d0, sl, fp
 80078d4:	aa10      	add	r2, sp, #64	; 0x40
 80078d6:	a911      	add	r1, sp, #68	; 0x44
 80078d8:	4620      	mov	r0, r4
 80078da:	f001 fad9 	bl	8008e90 <__d2b>
 80078de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80078e2:	ee08 0a10 	vmov	s16, r0
 80078e6:	2d00      	cmp	r5, #0
 80078e8:	f000 8084 	beq.w	80079f4 <_dtoa_r+0x204>
 80078ec:	ee19 3a90 	vmov	r3, s19
 80078f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80078f8:	4656      	mov	r6, sl
 80078fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80078fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007902:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007906:	4b74      	ldr	r3, [pc, #464]	; (8007ad8 <_dtoa_r+0x2e8>)
 8007908:	2200      	movs	r2, #0
 800790a:	4630      	mov	r0, r6
 800790c:	4639      	mov	r1, r7
 800790e:	f7f8 fcc3 	bl	8000298 <__aeabi_dsub>
 8007912:	a365      	add	r3, pc, #404	; (adr r3, 8007aa8 <_dtoa_r+0x2b8>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f7f8 fe76 	bl	8000608 <__aeabi_dmul>
 800791c:	a364      	add	r3, pc, #400	; (adr r3, 8007ab0 <_dtoa_r+0x2c0>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	f7f8 fcbb 	bl	800029c <__adddf3>
 8007926:	4606      	mov	r6, r0
 8007928:	4628      	mov	r0, r5
 800792a:	460f      	mov	r7, r1
 800792c:	f7f8 fe02 	bl	8000534 <__aeabi_i2d>
 8007930:	a361      	add	r3, pc, #388	; (adr r3, 8007ab8 <_dtoa_r+0x2c8>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f8 fe67 	bl	8000608 <__aeabi_dmul>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4630      	mov	r0, r6
 8007940:	4639      	mov	r1, r7
 8007942:	f7f8 fcab 	bl	800029c <__adddf3>
 8007946:	4606      	mov	r6, r0
 8007948:	460f      	mov	r7, r1
 800794a:	f7f9 f90d 	bl	8000b68 <__aeabi_d2iz>
 800794e:	2200      	movs	r2, #0
 8007950:	9000      	str	r0, [sp, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	4630      	mov	r0, r6
 8007956:	4639      	mov	r1, r7
 8007958:	f7f9 f8c8 	bl	8000aec <__aeabi_dcmplt>
 800795c:	b150      	cbz	r0, 8007974 <_dtoa_r+0x184>
 800795e:	9800      	ldr	r0, [sp, #0]
 8007960:	f7f8 fde8 	bl	8000534 <__aeabi_i2d>
 8007964:	4632      	mov	r2, r6
 8007966:	463b      	mov	r3, r7
 8007968:	f7f9 f8b6 	bl	8000ad8 <__aeabi_dcmpeq>
 800796c:	b910      	cbnz	r0, 8007974 <_dtoa_r+0x184>
 800796e:	9b00      	ldr	r3, [sp, #0]
 8007970:	3b01      	subs	r3, #1
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	9b00      	ldr	r3, [sp, #0]
 8007976:	2b16      	cmp	r3, #22
 8007978:	d85a      	bhi.n	8007a30 <_dtoa_r+0x240>
 800797a:	9a00      	ldr	r2, [sp, #0]
 800797c:	4b57      	ldr	r3, [pc, #348]	; (8007adc <_dtoa_r+0x2ec>)
 800797e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	ec51 0b19 	vmov	r0, r1, d9
 800798a:	f7f9 f8af 	bl	8000aec <__aeabi_dcmplt>
 800798e:	2800      	cmp	r0, #0
 8007990:	d050      	beq.n	8007a34 <_dtoa_r+0x244>
 8007992:	9b00      	ldr	r3, [sp, #0]
 8007994:	3b01      	subs	r3, #1
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	2300      	movs	r3, #0
 800799a:	930b      	str	r3, [sp, #44]	; 0x2c
 800799c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800799e:	1b5d      	subs	r5, r3, r5
 80079a0:	1e6b      	subs	r3, r5, #1
 80079a2:	9305      	str	r3, [sp, #20]
 80079a4:	bf45      	ittet	mi
 80079a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80079aa:	9304      	strmi	r3, [sp, #16]
 80079ac:	2300      	movpl	r3, #0
 80079ae:	2300      	movmi	r3, #0
 80079b0:	bf4c      	ite	mi
 80079b2:	9305      	strmi	r3, [sp, #20]
 80079b4:	9304      	strpl	r3, [sp, #16]
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	db3d      	blt.n	8007a38 <_dtoa_r+0x248>
 80079bc:	9b05      	ldr	r3, [sp, #20]
 80079be:	9a00      	ldr	r2, [sp, #0]
 80079c0:	920a      	str	r2, [sp, #40]	; 0x28
 80079c2:	4413      	add	r3, r2
 80079c4:	9305      	str	r3, [sp, #20]
 80079c6:	2300      	movs	r3, #0
 80079c8:	9307      	str	r3, [sp, #28]
 80079ca:	9b06      	ldr	r3, [sp, #24]
 80079cc:	2b09      	cmp	r3, #9
 80079ce:	f200 8089 	bhi.w	8007ae4 <_dtoa_r+0x2f4>
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	bfc4      	itt	gt
 80079d6:	3b04      	subgt	r3, #4
 80079d8:	9306      	strgt	r3, [sp, #24]
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	f1a3 0302 	sub.w	r3, r3, #2
 80079e0:	bfcc      	ite	gt
 80079e2:	2500      	movgt	r5, #0
 80079e4:	2501      	movle	r5, #1
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	f200 8087 	bhi.w	8007afa <_dtoa_r+0x30a>
 80079ec:	e8df f003 	tbb	[pc, r3]
 80079f0:	59383a2d 	.word	0x59383a2d
 80079f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80079f8:	441d      	add	r5, r3
 80079fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	bfc1      	itttt	gt
 8007a02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007a0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a12:	bfda      	itte	le
 8007a14:	f1c3 0320 	rsble	r3, r3, #32
 8007a18:	fa06 f003 	lslle.w	r0, r6, r3
 8007a1c:	4318      	orrgt	r0, r3
 8007a1e:	f7f8 fd79 	bl	8000514 <__aeabi_ui2d>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4606      	mov	r6, r0
 8007a26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a2a:	3d01      	subs	r5, #1
 8007a2c:	930e      	str	r3, [sp, #56]	; 0x38
 8007a2e:	e76a      	b.n	8007906 <_dtoa_r+0x116>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e7b2      	b.n	800799a <_dtoa_r+0x1aa>
 8007a34:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a36:	e7b1      	b.n	800799c <_dtoa_r+0x1ac>
 8007a38:	9b04      	ldr	r3, [sp, #16]
 8007a3a:	9a00      	ldr	r2, [sp, #0]
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	9304      	str	r3, [sp, #16]
 8007a40:	4253      	negs	r3, r2
 8007a42:	9307      	str	r3, [sp, #28]
 8007a44:	2300      	movs	r3, #0
 8007a46:	930a      	str	r3, [sp, #40]	; 0x28
 8007a48:	e7bf      	b.n	80079ca <_dtoa_r+0x1da>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9308      	str	r3, [sp, #32]
 8007a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dc55      	bgt.n	8007b00 <_dtoa_r+0x310>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a5e:	e00c      	b.n	8007a7a <_dtoa_r+0x28a>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e7f3      	b.n	8007a4c <_dtoa_r+0x25c>
 8007a64:	2300      	movs	r3, #0
 8007a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a68:	9308      	str	r3, [sp, #32]
 8007a6a:	9b00      	ldr	r3, [sp, #0]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	9302      	str	r3, [sp, #8]
 8007a70:	3301      	adds	r3, #1
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	9303      	str	r3, [sp, #12]
 8007a76:	bfb8      	it	lt
 8007a78:	2301      	movlt	r3, #1
 8007a7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	6042      	str	r2, [r0, #4]
 8007a80:	2204      	movs	r2, #4
 8007a82:	f102 0614 	add.w	r6, r2, #20
 8007a86:	429e      	cmp	r6, r3
 8007a88:	6841      	ldr	r1, [r0, #4]
 8007a8a:	d93d      	bls.n	8007b08 <_dtoa_r+0x318>
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 fed7 	bl	8008840 <_Balloc>
 8007a92:	9001      	str	r0, [sp, #4]
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d13b      	bne.n	8007b10 <_dtoa_r+0x320>
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <_dtoa_r+0x2f0>)
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007aa0:	e6c0      	b.n	8007824 <_dtoa_r+0x34>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e7df      	b.n	8007a66 <_dtoa_r+0x276>
 8007aa6:	bf00      	nop
 8007aa8:	636f4361 	.word	0x636f4361
 8007aac:	3fd287a7 	.word	0x3fd287a7
 8007ab0:	8b60c8b3 	.word	0x8b60c8b3
 8007ab4:	3fc68a28 	.word	0x3fc68a28
 8007ab8:	509f79fb 	.word	0x509f79fb
 8007abc:	3fd34413 	.word	0x3fd34413
 8007ac0:	080097d5 	.word	0x080097d5
 8007ac4:	080097ec 	.word	0x080097ec
 8007ac8:	7ff00000 	.word	0x7ff00000
 8007acc:	080097d1 	.word	0x080097d1
 8007ad0:	080097c8 	.word	0x080097c8
 8007ad4:	080097a5 	.word	0x080097a5
 8007ad8:	3ff80000 	.word	0x3ff80000
 8007adc:	08009940 	.word	0x08009940
 8007ae0:	08009847 	.word	0x08009847
 8007ae4:	2501      	movs	r5, #1
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9306      	str	r3, [sp, #24]
 8007aea:	9508      	str	r5, [sp, #32]
 8007aec:	f04f 33ff 	mov.w	r3, #4294967295
 8007af0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007af4:	2200      	movs	r2, #0
 8007af6:	2312      	movs	r3, #18
 8007af8:	e7b0      	b.n	8007a5c <_dtoa_r+0x26c>
 8007afa:	2301      	movs	r3, #1
 8007afc:	9308      	str	r3, [sp, #32]
 8007afe:	e7f5      	b.n	8007aec <_dtoa_r+0x2fc>
 8007b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b06:	e7b8      	b.n	8007a7a <_dtoa_r+0x28a>
 8007b08:	3101      	adds	r1, #1
 8007b0a:	6041      	str	r1, [r0, #4]
 8007b0c:	0052      	lsls	r2, r2, #1
 8007b0e:	e7b8      	b.n	8007a82 <_dtoa_r+0x292>
 8007b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b12:	9a01      	ldr	r2, [sp, #4]
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	2b0e      	cmp	r3, #14
 8007b1a:	f200 809d 	bhi.w	8007c58 <_dtoa_r+0x468>
 8007b1e:	2d00      	cmp	r5, #0
 8007b20:	f000 809a 	beq.w	8007c58 <_dtoa_r+0x468>
 8007b24:	9b00      	ldr	r3, [sp, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dd32      	ble.n	8007b90 <_dtoa_r+0x3a0>
 8007b2a:	4ab7      	ldr	r2, [pc, #732]	; (8007e08 <_dtoa_r+0x618>)
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b38:	9b00      	ldr	r3, [sp, #0]
 8007b3a:	05d8      	lsls	r0, r3, #23
 8007b3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007b40:	d516      	bpl.n	8007b70 <_dtoa_r+0x380>
 8007b42:	4bb2      	ldr	r3, [pc, #712]	; (8007e0c <_dtoa_r+0x61c>)
 8007b44:	ec51 0b19 	vmov	r0, r1, d9
 8007b48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b4c:	f7f8 fe86 	bl	800085c <__aeabi_ddiv>
 8007b50:	f007 070f 	and.w	r7, r7, #15
 8007b54:	4682      	mov	sl, r0
 8007b56:	468b      	mov	fp, r1
 8007b58:	2503      	movs	r5, #3
 8007b5a:	4eac      	ldr	r6, [pc, #688]	; (8007e0c <_dtoa_r+0x61c>)
 8007b5c:	b957      	cbnz	r7, 8007b74 <_dtoa_r+0x384>
 8007b5e:	4642      	mov	r2, r8
 8007b60:	464b      	mov	r3, r9
 8007b62:	4650      	mov	r0, sl
 8007b64:	4659      	mov	r1, fp
 8007b66:	f7f8 fe79 	bl	800085c <__aeabi_ddiv>
 8007b6a:	4682      	mov	sl, r0
 8007b6c:	468b      	mov	fp, r1
 8007b6e:	e028      	b.n	8007bc2 <_dtoa_r+0x3d2>
 8007b70:	2502      	movs	r5, #2
 8007b72:	e7f2      	b.n	8007b5a <_dtoa_r+0x36a>
 8007b74:	07f9      	lsls	r1, r7, #31
 8007b76:	d508      	bpl.n	8007b8a <_dtoa_r+0x39a>
 8007b78:	4640      	mov	r0, r8
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b80:	f7f8 fd42 	bl	8000608 <__aeabi_dmul>
 8007b84:	3501      	adds	r5, #1
 8007b86:	4680      	mov	r8, r0
 8007b88:	4689      	mov	r9, r1
 8007b8a:	107f      	asrs	r7, r7, #1
 8007b8c:	3608      	adds	r6, #8
 8007b8e:	e7e5      	b.n	8007b5c <_dtoa_r+0x36c>
 8007b90:	f000 809b 	beq.w	8007cca <_dtoa_r+0x4da>
 8007b94:	9b00      	ldr	r3, [sp, #0]
 8007b96:	4f9d      	ldr	r7, [pc, #628]	; (8007e0c <_dtoa_r+0x61c>)
 8007b98:	425e      	negs	r6, r3
 8007b9a:	4b9b      	ldr	r3, [pc, #620]	; (8007e08 <_dtoa_r+0x618>)
 8007b9c:	f006 020f 	and.w	r2, r6, #15
 8007ba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	ec51 0b19 	vmov	r0, r1, d9
 8007bac:	f7f8 fd2c 	bl	8000608 <__aeabi_dmul>
 8007bb0:	1136      	asrs	r6, r6, #4
 8007bb2:	4682      	mov	sl, r0
 8007bb4:	468b      	mov	fp, r1
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2502      	movs	r5, #2
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	d17a      	bne.n	8007cb4 <_dtoa_r+0x4c4>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1d3      	bne.n	8007b6a <_dtoa_r+0x37a>
 8007bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8082 	beq.w	8007cce <_dtoa_r+0x4de>
 8007bca:	4b91      	ldr	r3, [pc, #580]	; (8007e10 <_dtoa_r+0x620>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4650      	mov	r0, sl
 8007bd0:	4659      	mov	r1, fp
 8007bd2:	f7f8 ff8b 	bl	8000aec <__aeabi_dcmplt>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d079      	beq.n	8007cce <_dtoa_r+0x4de>
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d076      	beq.n	8007cce <_dtoa_r+0x4de>
 8007be0:	9b02      	ldr	r3, [sp, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	dd36      	ble.n	8007c54 <_dtoa_r+0x464>
 8007be6:	9b00      	ldr	r3, [sp, #0]
 8007be8:	4650      	mov	r0, sl
 8007bea:	4659      	mov	r1, fp
 8007bec:	1e5f      	subs	r7, r3, #1
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4b88      	ldr	r3, [pc, #544]	; (8007e14 <_dtoa_r+0x624>)
 8007bf2:	f7f8 fd09 	bl	8000608 <__aeabi_dmul>
 8007bf6:	9e02      	ldr	r6, [sp, #8]
 8007bf8:	4682      	mov	sl, r0
 8007bfa:	468b      	mov	fp, r1
 8007bfc:	3501      	adds	r5, #1
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f7f8 fc98 	bl	8000534 <__aeabi_i2d>
 8007c04:	4652      	mov	r2, sl
 8007c06:	465b      	mov	r3, fp
 8007c08:	f7f8 fcfe 	bl	8000608 <__aeabi_dmul>
 8007c0c:	4b82      	ldr	r3, [pc, #520]	; (8007e18 <_dtoa_r+0x628>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f7f8 fb44 	bl	800029c <__adddf3>
 8007c14:	46d0      	mov	r8, sl
 8007c16:	46d9      	mov	r9, fp
 8007c18:	4682      	mov	sl, r0
 8007c1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	d158      	bne.n	8007cd4 <_dtoa_r+0x4e4>
 8007c22:	4b7e      	ldr	r3, [pc, #504]	; (8007e1c <_dtoa_r+0x62c>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	4640      	mov	r0, r8
 8007c28:	4649      	mov	r1, r9
 8007c2a:	f7f8 fb35 	bl	8000298 <__aeabi_dsub>
 8007c2e:	4652      	mov	r2, sl
 8007c30:	465b      	mov	r3, fp
 8007c32:	4680      	mov	r8, r0
 8007c34:	4689      	mov	r9, r1
 8007c36:	f7f8 ff77 	bl	8000b28 <__aeabi_dcmpgt>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f040 8295 	bne.w	800816a <_dtoa_r+0x97a>
 8007c40:	4652      	mov	r2, sl
 8007c42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c46:	4640      	mov	r0, r8
 8007c48:	4649      	mov	r1, r9
 8007c4a:	f7f8 ff4f 	bl	8000aec <__aeabi_dcmplt>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f040 8289 	bne.w	8008166 <_dtoa_r+0x976>
 8007c54:	ec5b ab19 	vmov	sl, fp, d9
 8007c58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f2c0 8148 	blt.w	8007ef0 <_dtoa_r+0x700>
 8007c60:	9a00      	ldr	r2, [sp, #0]
 8007c62:	2a0e      	cmp	r2, #14
 8007c64:	f300 8144 	bgt.w	8007ef0 <_dtoa_r+0x700>
 8007c68:	4b67      	ldr	r3, [pc, #412]	; (8007e08 <_dtoa_r+0x618>)
 8007c6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f280 80d5 	bge.w	8007e24 <_dtoa_r+0x634>
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f300 80d1 	bgt.w	8007e24 <_dtoa_r+0x634>
 8007c82:	f040 826f 	bne.w	8008164 <_dtoa_r+0x974>
 8007c86:	4b65      	ldr	r3, [pc, #404]	; (8007e1c <_dtoa_r+0x62c>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	f7f8 fcbb 	bl	8000608 <__aeabi_dmul>
 8007c92:	4652      	mov	r2, sl
 8007c94:	465b      	mov	r3, fp
 8007c96:	f7f8 ff3d 	bl	8000b14 <__aeabi_dcmpge>
 8007c9a:	9e03      	ldr	r6, [sp, #12]
 8007c9c:	4637      	mov	r7, r6
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f040 8245 	bne.w	800812e <_dtoa_r+0x93e>
 8007ca4:	9d01      	ldr	r5, [sp, #4]
 8007ca6:	2331      	movs	r3, #49	; 0x31
 8007ca8:	f805 3b01 	strb.w	r3, [r5], #1
 8007cac:	9b00      	ldr	r3, [sp, #0]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	e240      	b.n	8008136 <_dtoa_r+0x946>
 8007cb4:	07f2      	lsls	r2, r6, #31
 8007cb6:	d505      	bpl.n	8007cc4 <_dtoa_r+0x4d4>
 8007cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cbc:	f7f8 fca4 	bl	8000608 <__aeabi_dmul>
 8007cc0:	3501      	adds	r5, #1
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	1076      	asrs	r6, r6, #1
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	e777      	b.n	8007bba <_dtoa_r+0x3ca>
 8007cca:	2502      	movs	r5, #2
 8007ccc:	e779      	b.n	8007bc2 <_dtoa_r+0x3d2>
 8007cce:	9f00      	ldr	r7, [sp, #0]
 8007cd0:	9e03      	ldr	r6, [sp, #12]
 8007cd2:	e794      	b.n	8007bfe <_dtoa_r+0x40e>
 8007cd4:	9901      	ldr	r1, [sp, #4]
 8007cd6:	4b4c      	ldr	r3, [pc, #304]	; (8007e08 <_dtoa_r+0x618>)
 8007cd8:	4431      	add	r1, r6
 8007cda:	910d      	str	r1, [sp, #52]	; 0x34
 8007cdc:	9908      	ldr	r1, [sp, #32]
 8007cde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ce2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ce6:	2900      	cmp	r1, #0
 8007ce8:	d043      	beq.n	8007d72 <_dtoa_r+0x582>
 8007cea:	494d      	ldr	r1, [pc, #308]	; (8007e20 <_dtoa_r+0x630>)
 8007cec:	2000      	movs	r0, #0
 8007cee:	f7f8 fdb5 	bl	800085c <__aeabi_ddiv>
 8007cf2:	4652      	mov	r2, sl
 8007cf4:	465b      	mov	r3, fp
 8007cf6:	f7f8 facf 	bl	8000298 <__aeabi_dsub>
 8007cfa:	9d01      	ldr	r5, [sp, #4]
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	468b      	mov	fp, r1
 8007d00:	4649      	mov	r1, r9
 8007d02:	4640      	mov	r0, r8
 8007d04:	f7f8 ff30 	bl	8000b68 <__aeabi_d2iz>
 8007d08:	4606      	mov	r6, r0
 8007d0a:	f7f8 fc13 	bl	8000534 <__aeabi_i2d>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	f7f8 fabf 	bl	8000298 <__aeabi_dsub>
 8007d1a:	3630      	adds	r6, #48	; 0x30
 8007d1c:	f805 6b01 	strb.w	r6, [r5], #1
 8007d20:	4652      	mov	r2, sl
 8007d22:	465b      	mov	r3, fp
 8007d24:	4680      	mov	r8, r0
 8007d26:	4689      	mov	r9, r1
 8007d28:	f7f8 fee0 	bl	8000aec <__aeabi_dcmplt>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d163      	bne.n	8007df8 <_dtoa_r+0x608>
 8007d30:	4642      	mov	r2, r8
 8007d32:	464b      	mov	r3, r9
 8007d34:	4936      	ldr	r1, [pc, #216]	; (8007e10 <_dtoa_r+0x620>)
 8007d36:	2000      	movs	r0, #0
 8007d38:	f7f8 faae 	bl	8000298 <__aeabi_dsub>
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	465b      	mov	r3, fp
 8007d40:	f7f8 fed4 	bl	8000aec <__aeabi_dcmplt>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	f040 80b5 	bne.w	8007eb4 <_dtoa_r+0x6c4>
 8007d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d4c:	429d      	cmp	r5, r3
 8007d4e:	d081      	beq.n	8007c54 <_dtoa_r+0x464>
 8007d50:	4b30      	ldr	r3, [pc, #192]	; (8007e14 <_dtoa_r+0x624>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	4650      	mov	r0, sl
 8007d56:	4659      	mov	r1, fp
 8007d58:	f7f8 fc56 	bl	8000608 <__aeabi_dmul>
 8007d5c:	4b2d      	ldr	r3, [pc, #180]	; (8007e14 <_dtoa_r+0x624>)
 8007d5e:	4682      	mov	sl, r0
 8007d60:	468b      	mov	fp, r1
 8007d62:	4640      	mov	r0, r8
 8007d64:	4649      	mov	r1, r9
 8007d66:	2200      	movs	r2, #0
 8007d68:	f7f8 fc4e 	bl	8000608 <__aeabi_dmul>
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	4689      	mov	r9, r1
 8007d70:	e7c6      	b.n	8007d00 <_dtoa_r+0x510>
 8007d72:	4650      	mov	r0, sl
 8007d74:	4659      	mov	r1, fp
 8007d76:	f7f8 fc47 	bl	8000608 <__aeabi_dmul>
 8007d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d7c:	9d01      	ldr	r5, [sp, #4]
 8007d7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d80:	4682      	mov	sl, r0
 8007d82:	468b      	mov	fp, r1
 8007d84:	4649      	mov	r1, r9
 8007d86:	4640      	mov	r0, r8
 8007d88:	f7f8 feee 	bl	8000b68 <__aeabi_d2iz>
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	f7f8 fbd1 	bl	8000534 <__aeabi_i2d>
 8007d92:	3630      	adds	r6, #48	; 0x30
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4640      	mov	r0, r8
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	f7f8 fa7c 	bl	8000298 <__aeabi_dsub>
 8007da0:	f805 6b01 	strb.w	r6, [r5], #1
 8007da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007da6:	429d      	cmp	r5, r3
 8007da8:	4680      	mov	r8, r0
 8007daa:	4689      	mov	r9, r1
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	d124      	bne.n	8007dfc <_dtoa_r+0x60c>
 8007db2:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <_dtoa_r+0x630>)
 8007db4:	4650      	mov	r0, sl
 8007db6:	4659      	mov	r1, fp
 8007db8:	f7f8 fa70 	bl	800029c <__adddf3>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	f7f8 feb0 	bl	8000b28 <__aeabi_dcmpgt>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d173      	bne.n	8007eb4 <_dtoa_r+0x6c4>
 8007dcc:	4652      	mov	r2, sl
 8007dce:	465b      	mov	r3, fp
 8007dd0:	4913      	ldr	r1, [pc, #76]	; (8007e20 <_dtoa_r+0x630>)
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	f7f8 fa60 	bl	8000298 <__aeabi_dsub>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4640      	mov	r0, r8
 8007dde:	4649      	mov	r1, r9
 8007de0:	f7f8 fe84 	bl	8000aec <__aeabi_dcmplt>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	f43f af35 	beq.w	8007c54 <_dtoa_r+0x464>
 8007dea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007dec:	1e6b      	subs	r3, r5, #1
 8007dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007df0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007df4:	2b30      	cmp	r3, #48	; 0x30
 8007df6:	d0f8      	beq.n	8007dea <_dtoa_r+0x5fa>
 8007df8:	9700      	str	r7, [sp, #0]
 8007dfa:	e049      	b.n	8007e90 <_dtoa_r+0x6a0>
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <_dtoa_r+0x624>)
 8007dfe:	f7f8 fc03 	bl	8000608 <__aeabi_dmul>
 8007e02:	4680      	mov	r8, r0
 8007e04:	4689      	mov	r9, r1
 8007e06:	e7bd      	b.n	8007d84 <_dtoa_r+0x594>
 8007e08:	08009940 	.word	0x08009940
 8007e0c:	08009918 	.word	0x08009918
 8007e10:	3ff00000 	.word	0x3ff00000
 8007e14:	40240000 	.word	0x40240000
 8007e18:	401c0000 	.word	0x401c0000
 8007e1c:	40140000 	.word	0x40140000
 8007e20:	3fe00000 	.word	0x3fe00000
 8007e24:	9d01      	ldr	r5, [sp, #4]
 8007e26:	4656      	mov	r6, sl
 8007e28:	465f      	mov	r7, fp
 8007e2a:	4642      	mov	r2, r8
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	4630      	mov	r0, r6
 8007e30:	4639      	mov	r1, r7
 8007e32:	f7f8 fd13 	bl	800085c <__aeabi_ddiv>
 8007e36:	f7f8 fe97 	bl	8000b68 <__aeabi_d2iz>
 8007e3a:	4682      	mov	sl, r0
 8007e3c:	f7f8 fb7a 	bl	8000534 <__aeabi_i2d>
 8007e40:	4642      	mov	r2, r8
 8007e42:	464b      	mov	r3, r9
 8007e44:	f7f8 fbe0 	bl	8000608 <__aeabi_dmul>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007e54:	f7f8 fa20 	bl	8000298 <__aeabi_dsub>
 8007e58:	f805 6b01 	strb.w	r6, [r5], #1
 8007e5c:	9e01      	ldr	r6, [sp, #4]
 8007e5e:	9f03      	ldr	r7, [sp, #12]
 8007e60:	1bae      	subs	r6, r5, r6
 8007e62:	42b7      	cmp	r7, r6
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	d135      	bne.n	8007ed6 <_dtoa_r+0x6e6>
 8007e6a:	f7f8 fa17 	bl	800029c <__adddf3>
 8007e6e:	4642      	mov	r2, r8
 8007e70:	464b      	mov	r3, r9
 8007e72:	4606      	mov	r6, r0
 8007e74:	460f      	mov	r7, r1
 8007e76:	f7f8 fe57 	bl	8000b28 <__aeabi_dcmpgt>
 8007e7a:	b9d0      	cbnz	r0, 8007eb2 <_dtoa_r+0x6c2>
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	464b      	mov	r3, r9
 8007e80:	4630      	mov	r0, r6
 8007e82:	4639      	mov	r1, r7
 8007e84:	f7f8 fe28 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e88:	b110      	cbz	r0, 8007e90 <_dtoa_r+0x6a0>
 8007e8a:	f01a 0f01 	tst.w	sl, #1
 8007e8e:	d110      	bne.n	8007eb2 <_dtoa_r+0x6c2>
 8007e90:	4620      	mov	r0, r4
 8007e92:	ee18 1a10 	vmov	r1, s16
 8007e96:	f000 fd13 	bl	80088c0 <_Bfree>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9800      	ldr	r0, [sp, #0]
 8007e9e:	702b      	strb	r3, [r5, #0]
 8007ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	6018      	str	r0, [r3, #0]
 8007ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f43f acf1 	beq.w	8007890 <_dtoa_r+0xa0>
 8007eae:	601d      	str	r5, [r3, #0]
 8007eb0:	e4ee      	b.n	8007890 <_dtoa_r+0xa0>
 8007eb2:	9f00      	ldr	r7, [sp, #0]
 8007eb4:	462b      	mov	r3, r5
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ebc:	2a39      	cmp	r2, #57	; 0x39
 8007ebe:	d106      	bne.n	8007ece <_dtoa_r+0x6de>
 8007ec0:	9a01      	ldr	r2, [sp, #4]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d1f7      	bne.n	8007eb6 <_dtoa_r+0x6c6>
 8007ec6:	9901      	ldr	r1, [sp, #4]
 8007ec8:	2230      	movs	r2, #48	; 0x30
 8007eca:	3701      	adds	r7, #1
 8007ecc:	700a      	strb	r2, [r1, #0]
 8007ece:	781a      	ldrb	r2, [r3, #0]
 8007ed0:	3201      	adds	r2, #1
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	e790      	b.n	8007df8 <_dtoa_r+0x608>
 8007ed6:	4ba6      	ldr	r3, [pc, #664]	; (8008170 <_dtoa_r+0x980>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f7f8 fb95 	bl	8000608 <__aeabi_dmul>
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	460f      	mov	r7, r1
 8007ee6:	f7f8 fdf7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d09d      	beq.n	8007e2a <_dtoa_r+0x63a>
 8007eee:	e7cf      	b.n	8007e90 <_dtoa_r+0x6a0>
 8007ef0:	9a08      	ldr	r2, [sp, #32]
 8007ef2:	2a00      	cmp	r2, #0
 8007ef4:	f000 80d7 	beq.w	80080a6 <_dtoa_r+0x8b6>
 8007ef8:	9a06      	ldr	r2, [sp, #24]
 8007efa:	2a01      	cmp	r2, #1
 8007efc:	f300 80ba 	bgt.w	8008074 <_dtoa_r+0x884>
 8007f00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	f000 80b2 	beq.w	800806c <_dtoa_r+0x87c>
 8007f08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f0c:	9e07      	ldr	r6, [sp, #28]
 8007f0e:	9d04      	ldr	r5, [sp, #16]
 8007f10:	9a04      	ldr	r2, [sp, #16]
 8007f12:	441a      	add	r2, r3
 8007f14:	9204      	str	r2, [sp, #16]
 8007f16:	9a05      	ldr	r2, [sp, #20]
 8007f18:	2101      	movs	r1, #1
 8007f1a:	441a      	add	r2, r3
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	9205      	str	r2, [sp, #20]
 8007f20:	f000 fd86 	bl	8008a30 <__i2b>
 8007f24:	4607      	mov	r7, r0
 8007f26:	2d00      	cmp	r5, #0
 8007f28:	dd0c      	ble.n	8007f44 <_dtoa_r+0x754>
 8007f2a:	9b05      	ldr	r3, [sp, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	dd09      	ble.n	8007f44 <_dtoa_r+0x754>
 8007f30:	42ab      	cmp	r3, r5
 8007f32:	9a04      	ldr	r2, [sp, #16]
 8007f34:	bfa8      	it	ge
 8007f36:	462b      	movge	r3, r5
 8007f38:	1ad2      	subs	r2, r2, r3
 8007f3a:	9204      	str	r2, [sp, #16]
 8007f3c:	9a05      	ldr	r2, [sp, #20]
 8007f3e:	1aed      	subs	r5, r5, r3
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	9305      	str	r3, [sp, #20]
 8007f44:	9b07      	ldr	r3, [sp, #28]
 8007f46:	b31b      	cbz	r3, 8007f90 <_dtoa_r+0x7a0>
 8007f48:	9b08      	ldr	r3, [sp, #32]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80af 	beq.w	80080ae <_dtoa_r+0x8be>
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	dd13      	ble.n	8007f7c <_dtoa_r+0x78c>
 8007f54:	4639      	mov	r1, r7
 8007f56:	4632      	mov	r2, r6
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fe29 	bl	8008bb0 <__pow5mult>
 8007f5e:	ee18 2a10 	vmov	r2, s16
 8007f62:	4601      	mov	r1, r0
 8007f64:	4607      	mov	r7, r0
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 fd78 	bl	8008a5c <__multiply>
 8007f6c:	ee18 1a10 	vmov	r1, s16
 8007f70:	4680      	mov	r8, r0
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 fca4 	bl	80088c0 <_Bfree>
 8007f78:	ee08 8a10 	vmov	s16, r8
 8007f7c:	9b07      	ldr	r3, [sp, #28]
 8007f7e:	1b9a      	subs	r2, r3, r6
 8007f80:	d006      	beq.n	8007f90 <_dtoa_r+0x7a0>
 8007f82:	ee18 1a10 	vmov	r1, s16
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 fe12 	bl	8008bb0 <__pow5mult>
 8007f8c:	ee08 0a10 	vmov	s16, r0
 8007f90:	2101      	movs	r1, #1
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fd4c 	bl	8008a30 <__i2b>
 8007f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	f340 8088 	ble.w	80080b2 <_dtoa_r+0x8c2>
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	4601      	mov	r1, r0
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f000 fe02 	bl	8008bb0 <__pow5mult>
 8007fac:	9b06      	ldr	r3, [sp, #24]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	f340 8081 	ble.w	80080b8 <_dtoa_r+0x8c8>
 8007fb6:	f04f 0800 	mov.w	r8, #0
 8007fba:	6933      	ldr	r3, [r6, #16]
 8007fbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007fc0:	6918      	ldr	r0, [r3, #16]
 8007fc2:	f000 fce5 	bl	8008990 <__hi0bits>
 8007fc6:	f1c0 0020 	rsb	r0, r0, #32
 8007fca:	9b05      	ldr	r3, [sp, #20]
 8007fcc:	4418      	add	r0, r3
 8007fce:	f010 001f 	ands.w	r0, r0, #31
 8007fd2:	f000 8092 	beq.w	80080fa <_dtoa_r+0x90a>
 8007fd6:	f1c0 0320 	rsb	r3, r0, #32
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	f340 808a 	ble.w	80080f4 <_dtoa_r+0x904>
 8007fe0:	f1c0 001c 	rsb	r0, r0, #28
 8007fe4:	9b04      	ldr	r3, [sp, #16]
 8007fe6:	4403      	add	r3, r0
 8007fe8:	9304      	str	r3, [sp, #16]
 8007fea:	9b05      	ldr	r3, [sp, #20]
 8007fec:	4403      	add	r3, r0
 8007fee:	4405      	add	r5, r0
 8007ff0:	9305      	str	r3, [sp, #20]
 8007ff2:	9b04      	ldr	r3, [sp, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dd07      	ble.n	8008008 <_dtoa_r+0x818>
 8007ff8:	ee18 1a10 	vmov	r1, s16
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 fe30 	bl	8008c64 <__lshift>
 8008004:	ee08 0a10 	vmov	s16, r0
 8008008:	9b05      	ldr	r3, [sp, #20]
 800800a:	2b00      	cmp	r3, #0
 800800c:	dd05      	ble.n	800801a <_dtoa_r+0x82a>
 800800e:	4631      	mov	r1, r6
 8008010:	461a      	mov	r2, r3
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fe26 	bl	8008c64 <__lshift>
 8008018:	4606      	mov	r6, r0
 800801a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d06e      	beq.n	80080fe <_dtoa_r+0x90e>
 8008020:	ee18 0a10 	vmov	r0, s16
 8008024:	4631      	mov	r1, r6
 8008026:	f000 fe8d 	bl	8008d44 <__mcmp>
 800802a:	2800      	cmp	r0, #0
 800802c:	da67      	bge.n	80080fe <_dtoa_r+0x90e>
 800802e:	9b00      	ldr	r3, [sp, #0]
 8008030:	3b01      	subs	r3, #1
 8008032:	ee18 1a10 	vmov	r1, s16
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	220a      	movs	r2, #10
 800803a:	2300      	movs	r3, #0
 800803c:	4620      	mov	r0, r4
 800803e:	f000 fc61 	bl	8008904 <__multadd>
 8008042:	9b08      	ldr	r3, [sp, #32]
 8008044:	ee08 0a10 	vmov	s16, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 81b1 	beq.w	80083b0 <_dtoa_r+0xbc0>
 800804e:	2300      	movs	r3, #0
 8008050:	4639      	mov	r1, r7
 8008052:	220a      	movs	r2, #10
 8008054:	4620      	mov	r0, r4
 8008056:	f000 fc55 	bl	8008904 <__multadd>
 800805a:	9b02      	ldr	r3, [sp, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	4607      	mov	r7, r0
 8008060:	f300 808e 	bgt.w	8008180 <_dtoa_r+0x990>
 8008064:	9b06      	ldr	r3, [sp, #24]
 8008066:	2b02      	cmp	r3, #2
 8008068:	dc51      	bgt.n	800810e <_dtoa_r+0x91e>
 800806a:	e089      	b.n	8008180 <_dtoa_r+0x990>
 800806c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800806e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008072:	e74b      	b.n	8007f0c <_dtoa_r+0x71c>
 8008074:	9b03      	ldr	r3, [sp, #12]
 8008076:	1e5e      	subs	r6, r3, #1
 8008078:	9b07      	ldr	r3, [sp, #28]
 800807a:	42b3      	cmp	r3, r6
 800807c:	bfbf      	itttt	lt
 800807e:	9b07      	ldrlt	r3, [sp, #28]
 8008080:	9607      	strlt	r6, [sp, #28]
 8008082:	1af2      	sublt	r2, r6, r3
 8008084:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008086:	bfb6      	itet	lt
 8008088:	189b      	addlt	r3, r3, r2
 800808a:	1b9e      	subge	r6, r3, r6
 800808c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	bfb8      	it	lt
 8008092:	2600      	movlt	r6, #0
 8008094:	2b00      	cmp	r3, #0
 8008096:	bfb7      	itett	lt
 8008098:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800809c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80080a0:	1a9d      	sublt	r5, r3, r2
 80080a2:	2300      	movlt	r3, #0
 80080a4:	e734      	b.n	8007f10 <_dtoa_r+0x720>
 80080a6:	9e07      	ldr	r6, [sp, #28]
 80080a8:	9d04      	ldr	r5, [sp, #16]
 80080aa:	9f08      	ldr	r7, [sp, #32]
 80080ac:	e73b      	b.n	8007f26 <_dtoa_r+0x736>
 80080ae:	9a07      	ldr	r2, [sp, #28]
 80080b0:	e767      	b.n	8007f82 <_dtoa_r+0x792>
 80080b2:	9b06      	ldr	r3, [sp, #24]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	dc18      	bgt.n	80080ea <_dtoa_r+0x8fa>
 80080b8:	f1ba 0f00 	cmp.w	sl, #0
 80080bc:	d115      	bne.n	80080ea <_dtoa_r+0x8fa>
 80080be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080c2:	b993      	cbnz	r3, 80080ea <_dtoa_r+0x8fa>
 80080c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080c8:	0d1b      	lsrs	r3, r3, #20
 80080ca:	051b      	lsls	r3, r3, #20
 80080cc:	b183      	cbz	r3, 80080f0 <_dtoa_r+0x900>
 80080ce:	9b04      	ldr	r3, [sp, #16]
 80080d0:	3301      	adds	r3, #1
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	9b05      	ldr	r3, [sp, #20]
 80080d6:	3301      	adds	r3, #1
 80080d8:	9305      	str	r3, [sp, #20]
 80080da:	f04f 0801 	mov.w	r8, #1
 80080de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f47f af6a 	bne.w	8007fba <_dtoa_r+0x7ca>
 80080e6:	2001      	movs	r0, #1
 80080e8:	e76f      	b.n	8007fca <_dtoa_r+0x7da>
 80080ea:	f04f 0800 	mov.w	r8, #0
 80080ee:	e7f6      	b.n	80080de <_dtoa_r+0x8ee>
 80080f0:	4698      	mov	r8, r3
 80080f2:	e7f4      	b.n	80080de <_dtoa_r+0x8ee>
 80080f4:	f43f af7d 	beq.w	8007ff2 <_dtoa_r+0x802>
 80080f8:	4618      	mov	r0, r3
 80080fa:	301c      	adds	r0, #28
 80080fc:	e772      	b.n	8007fe4 <_dtoa_r+0x7f4>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	dc37      	bgt.n	8008174 <_dtoa_r+0x984>
 8008104:	9b06      	ldr	r3, [sp, #24]
 8008106:	2b02      	cmp	r3, #2
 8008108:	dd34      	ble.n	8008174 <_dtoa_r+0x984>
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	9302      	str	r3, [sp, #8]
 800810e:	9b02      	ldr	r3, [sp, #8]
 8008110:	b96b      	cbnz	r3, 800812e <_dtoa_r+0x93e>
 8008112:	4631      	mov	r1, r6
 8008114:	2205      	movs	r2, #5
 8008116:	4620      	mov	r0, r4
 8008118:	f000 fbf4 	bl	8008904 <__multadd>
 800811c:	4601      	mov	r1, r0
 800811e:	4606      	mov	r6, r0
 8008120:	ee18 0a10 	vmov	r0, s16
 8008124:	f000 fe0e 	bl	8008d44 <__mcmp>
 8008128:	2800      	cmp	r0, #0
 800812a:	f73f adbb 	bgt.w	8007ca4 <_dtoa_r+0x4b4>
 800812e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008130:	9d01      	ldr	r5, [sp, #4]
 8008132:	43db      	mvns	r3, r3
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	f04f 0800 	mov.w	r8, #0
 800813a:	4631      	mov	r1, r6
 800813c:	4620      	mov	r0, r4
 800813e:	f000 fbbf 	bl	80088c0 <_Bfree>
 8008142:	2f00      	cmp	r7, #0
 8008144:	f43f aea4 	beq.w	8007e90 <_dtoa_r+0x6a0>
 8008148:	f1b8 0f00 	cmp.w	r8, #0
 800814c:	d005      	beq.n	800815a <_dtoa_r+0x96a>
 800814e:	45b8      	cmp	r8, r7
 8008150:	d003      	beq.n	800815a <_dtoa_r+0x96a>
 8008152:	4641      	mov	r1, r8
 8008154:	4620      	mov	r0, r4
 8008156:	f000 fbb3 	bl	80088c0 <_Bfree>
 800815a:	4639      	mov	r1, r7
 800815c:	4620      	mov	r0, r4
 800815e:	f000 fbaf 	bl	80088c0 <_Bfree>
 8008162:	e695      	b.n	8007e90 <_dtoa_r+0x6a0>
 8008164:	2600      	movs	r6, #0
 8008166:	4637      	mov	r7, r6
 8008168:	e7e1      	b.n	800812e <_dtoa_r+0x93e>
 800816a:	9700      	str	r7, [sp, #0]
 800816c:	4637      	mov	r7, r6
 800816e:	e599      	b.n	8007ca4 <_dtoa_r+0x4b4>
 8008170:	40240000 	.word	0x40240000
 8008174:	9b08      	ldr	r3, [sp, #32]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 80ca 	beq.w	8008310 <_dtoa_r+0xb20>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	9302      	str	r3, [sp, #8]
 8008180:	2d00      	cmp	r5, #0
 8008182:	dd05      	ble.n	8008190 <_dtoa_r+0x9a0>
 8008184:	4639      	mov	r1, r7
 8008186:	462a      	mov	r2, r5
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fd6b 	bl	8008c64 <__lshift>
 800818e:	4607      	mov	r7, r0
 8008190:	f1b8 0f00 	cmp.w	r8, #0
 8008194:	d05b      	beq.n	800824e <_dtoa_r+0xa5e>
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	4620      	mov	r0, r4
 800819a:	f000 fb51 	bl	8008840 <_Balloc>
 800819e:	4605      	mov	r5, r0
 80081a0:	b928      	cbnz	r0, 80081ae <_dtoa_r+0x9be>
 80081a2:	4b87      	ldr	r3, [pc, #540]	; (80083c0 <_dtoa_r+0xbd0>)
 80081a4:	4602      	mov	r2, r0
 80081a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081aa:	f7ff bb3b 	b.w	8007824 <_dtoa_r+0x34>
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	3202      	adds	r2, #2
 80081b2:	0092      	lsls	r2, r2, #2
 80081b4:	f107 010c 	add.w	r1, r7, #12
 80081b8:	300c      	adds	r0, #12
 80081ba:	f000 fb33 	bl	8008824 <memcpy>
 80081be:	2201      	movs	r2, #1
 80081c0:	4629      	mov	r1, r5
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 fd4e 	bl	8008c64 <__lshift>
 80081c8:	9b01      	ldr	r3, [sp, #4]
 80081ca:	f103 0901 	add.w	r9, r3, #1
 80081ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80081d2:	4413      	add	r3, r2
 80081d4:	9305      	str	r3, [sp, #20]
 80081d6:	f00a 0301 	and.w	r3, sl, #1
 80081da:	46b8      	mov	r8, r7
 80081dc:	9304      	str	r3, [sp, #16]
 80081de:	4607      	mov	r7, r0
 80081e0:	4631      	mov	r1, r6
 80081e2:	ee18 0a10 	vmov	r0, s16
 80081e6:	f7ff fa77 	bl	80076d8 <quorem>
 80081ea:	4641      	mov	r1, r8
 80081ec:	9002      	str	r0, [sp, #8]
 80081ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081f2:	ee18 0a10 	vmov	r0, s16
 80081f6:	f000 fda5 	bl	8008d44 <__mcmp>
 80081fa:	463a      	mov	r2, r7
 80081fc:	9003      	str	r0, [sp, #12]
 80081fe:	4631      	mov	r1, r6
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fdbb 	bl	8008d7c <__mdiff>
 8008206:	68c2      	ldr	r2, [r0, #12]
 8008208:	f109 3bff 	add.w	fp, r9, #4294967295
 800820c:	4605      	mov	r5, r0
 800820e:	bb02      	cbnz	r2, 8008252 <_dtoa_r+0xa62>
 8008210:	4601      	mov	r1, r0
 8008212:	ee18 0a10 	vmov	r0, s16
 8008216:	f000 fd95 	bl	8008d44 <__mcmp>
 800821a:	4602      	mov	r2, r0
 800821c:	4629      	mov	r1, r5
 800821e:	4620      	mov	r0, r4
 8008220:	9207      	str	r2, [sp, #28]
 8008222:	f000 fb4d 	bl	80088c0 <_Bfree>
 8008226:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800822a:	ea43 0102 	orr.w	r1, r3, r2
 800822e:	9b04      	ldr	r3, [sp, #16]
 8008230:	430b      	orrs	r3, r1
 8008232:	464d      	mov	r5, r9
 8008234:	d10f      	bne.n	8008256 <_dtoa_r+0xa66>
 8008236:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800823a:	d02a      	beq.n	8008292 <_dtoa_r+0xaa2>
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	dd02      	ble.n	8008248 <_dtoa_r+0xa58>
 8008242:	9b02      	ldr	r3, [sp, #8]
 8008244:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008248:	f88b a000 	strb.w	sl, [fp]
 800824c:	e775      	b.n	800813a <_dtoa_r+0x94a>
 800824e:	4638      	mov	r0, r7
 8008250:	e7ba      	b.n	80081c8 <_dtoa_r+0x9d8>
 8008252:	2201      	movs	r2, #1
 8008254:	e7e2      	b.n	800821c <_dtoa_r+0xa2c>
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	db04      	blt.n	8008266 <_dtoa_r+0xa76>
 800825c:	9906      	ldr	r1, [sp, #24]
 800825e:	430b      	orrs	r3, r1
 8008260:	9904      	ldr	r1, [sp, #16]
 8008262:	430b      	orrs	r3, r1
 8008264:	d122      	bne.n	80082ac <_dtoa_r+0xabc>
 8008266:	2a00      	cmp	r2, #0
 8008268:	ddee      	ble.n	8008248 <_dtoa_r+0xa58>
 800826a:	ee18 1a10 	vmov	r1, s16
 800826e:	2201      	movs	r2, #1
 8008270:	4620      	mov	r0, r4
 8008272:	f000 fcf7 	bl	8008c64 <__lshift>
 8008276:	4631      	mov	r1, r6
 8008278:	ee08 0a10 	vmov	s16, r0
 800827c:	f000 fd62 	bl	8008d44 <__mcmp>
 8008280:	2800      	cmp	r0, #0
 8008282:	dc03      	bgt.n	800828c <_dtoa_r+0xa9c>
 8008284:	d1e0      	bne.n	8008248 <_dtoa_r+0xa58>
 8008286:	f01a 0f01 	tst.w	sl, #1
 800828a:	d0dd      	beq.n	8008248 <_dtoa_r+0xa58>
 800828c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008290:	d1d7      	bne.n	8008242 <_dtoa_r+0xa52>
 8008292:	2339      	movs	r3, #57	; 0x39
 8008294:	f88b 3000 	strb.w	r3, [fp]
 8008298:	462b      	mov	r3, r5
 800829a:	461d      	mov	r5, r3
 800829c:	3b01      	subs	r3, #1
 800829e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082a2:	2a39      	cmp	r2, #57	; 0x39
 80082a4:	d071      	beq.n	800838a <_dtoa_r+0xb9a>
 80082a6:	3201      	adds	r2, #1
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	e746      	b.n	800813a <_dtoa_r+0x94a>
 80082ac:	2a00      	cmp	r2, #0
 80082ae:	dd07      	ble.n	80082c0 <_dtoa_r+0xad0>
 80082b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082b4:	d0ed      	beq.n	8008292 <_dtoa_r+0xaa2>
 80082b6:	f10a 0301 	add.w	r3, sl, #1
 80082ba:	f88b 3000 	strb.w	r3, [fp]
 80082be:	e73c      	b.n	800813a <_dtoa_r+0x94a>
 80082c0:	9b05      	ldr	r3, [sp, #20]
 80082c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80082c6:	4599      	cmp	r9, r3
 80082c8:	d047      	beq.n	800835a <_dtoa_r+0xb6a>
 80082ca:	ee18 1a10 	vmov	r1, s16
 80082ce:	2300      	movs	r3, #0
 80082d0:	220a      	movs	r2, #10
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 fb16 	bl	8008904 <__multadd>
 80082d8:	45b8      	cmp	r8, r7
 80082da:	ee08 0a10 	vmov	s16, r0
 80082de:	f04f 0300 	mov.w	r3, #0
 80082e2:	f04f 020a 	mov.w	r2, #10
 80082e6:	4641      	mov	r1, r8
 80082e8:	4620      	mov	r0, r4
 80082ea:	d106      	bne.n	80082fa <_dtoa_r+0xb0a>
 80082ec:	f000 fb0a 	bl	8008904 <__multadd>
 80082f0:	4680      	mov	r8, r0
 80082f2:	4607      	mov	r7, r0
 80082f4:	f109 0901 	add.w	r9, r9, #1
 80082f8:	e772      	b.n	80081e0 <_dtoa_r+0x9f0>
 80082fa:	f000 fb03 	bl	8008904 <__multadd>
 80082fe:	4639      	mov	r1, r7
 8008300:	4680      	mov	r8, r0
 8008302:	2300      	movs	r3, #0
 8008304:	220a      	movs	r2, #10
 8008306:	4620      	mov	r0, r4
 8008308:	f000 fafc 	bl	8008904 <__multadd>
 800830c:	4607      	mov	r7, r0
 800830e:	e7f1      	b.n	80082f4 <_dtoa_r+0xb04>
 8008310:	9b03      	ldr	r3, [sp, #12]
 8008312:	9302      	str	r3, [sp, #8]
 8008314:	9d01      	ldr	r5, [sp, #4]
 8008316:	ee18 0a10 	vmov	r0, s16
 800831a:	4631      	mov	r1, r6
 800831c:	f7ff f9dc 	bl	80076d8 <quorem>
 8008320:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008324:	9b01      	ldr	r3, [sp, #4]
 8008326:	f805 ab01 	strb.w	sl, [r5], #1
 800832a:	1aea      	subs	r2, r5, r3
 800832c:	9b02      	ldr	r3, [sp, #8]
 800832e:	4293      	cmp	r3, r2
 8008330:	dd09      	ble.n	8008346 <_dtoa_r+0xb56>
 8008332:	ee18 1a10 	vmov	r1, s16
 8008336:	2300      	movs	r3, #0
 8008338:	220a      	movs	r2, #10
 800833a:	4620      	mov	r0, r4
 800833c:	f000 fae2 	bl	8008904 <__multadd>
 8008340:	ee08 0a10 	vmov	s16, r0
 8008344:	e7e7      	b.n	8008316 <_dtoa_r+0xb26>
 8008346:	9b02      	ldr	r3, [sp, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfc8      	it	gt
 800834c:	461d      	movgt	r5, r3
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	bfd8      	it	le
 8008352:	2501      	movle	r5, #1
 8008354:	441d      	add	r5, r3
 8008356:	f04f 0800 	mov.w	r8, #0
 800835a:	ee18 1a10 	vmov	r1, s16
 800835e:	2201      	movs	r2, #1
 8008360:	4620      	mov	r0, r4
 8008362:	f000 fc7f 	bl	8008c64 <__lshift>
 8008366:	4631      	mov	r1, r6
 8008368:	ee08 0a10 	vmov	s16, r0
 800836c:	f000 fcea 	bl	8008d44 <__mcmp>
 8008370:	2800      	cmp	r0, #0
 8008372:	dc91      	bgt.n	8008298 <_dtoa_r+0xaa8>
 8008374:	d102      	bne.n	800837c <_dtoa_r+0xb8c>
 8008376:	f01a 0f01 	tst.w	sl, #1
 800837a:	d18d      	bne.n	8008298 <_dtoa_r+0xaa8>
 800837c:	462b      	mov	r3, r5
 800837e:	461d      	mov	r5, r3
 8008380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008384:	2a30      	cmp	r2, #48	; 0x30
 8008386:	d0fa      	beq.n	800837e <_dtoa_r+0xb8e>
 8008388:	e6d7      	b.n	800813a <_dtoa_r+0x94a>
 800838a:	9a01      	ldr	r2, [sp, #4]
 800838c:	429a      	cmp	r2, r3
 800838e:	d184      	bne.n	800829a <_dtoa_r+0xaaa>
 8008390:	9b00      	ldr	r3, [sp, #0]
 8008392:	3301      	adds	r3, #1
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	2331      	movs	r3, #49	; 0x31
 8008398:	7013      	strb	r3, [r2, #0]
 800839a:	e6ce      	b.n	800813a <_dtoa_r+0x94a>
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <_dtoa_r+0xbd4>)
 800839e:	f7ff ba95 	b.w	80078cc <_dtoa_r+0xdc>
 80083a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f47f aa6e 	bne.w	8007886 <_dtoa_r+0x96>
 80083aa:	4b07      	ldr	r3, [pc, #28]	; (80083c8 <_dtoa_r+0xbd8>)
 80083ac:	f7ff ba8e 	b.w	80078cc <_dtoa_r+0xdc>
 80083b0:	9b02      	ldr	r3, [sp, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dcae      	bgt.n	8008314 <_dtoa_r+0xb24>
 80083b6:	9b06      	ldr	r3, [sp, #24]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	f73f aea8 	bgt.w	800810e <_dtoa_r+0x91e>
 80083be:	e7a9      	b.n	8008314 <_dtoa_r+0xb24>
 80083c0:	08009847 	.word	0x08009847
 80083c4:	080097a4 	.word	0x080097a4
 80083c8:	080097c8 	.word	0x080097c8

080083cc <__sflush_r>:
 80083cc:	898a      	ldrh	r2, [r1, #12]
 80083ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d2:	4605      	mov	r5, r0
 80083d4:	0710      	lsls	r0, r2, #28
 80083d6:	460c      	mov	r4, r1
 80083d8:	d458      	bmi.n	800848c <__sflush_r+0xc0>
 80083da:	684b      	ldr	r3, [r1, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dc05      	bgt.n	80083ec <__sflush_r+0x20>
 80083e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	dc02      	bgt.n	80083ec <__sflush_r+0x20>
 80083e6:	2000      	movs	r0, #0
 80083e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083ee:	2e00      	cmp	r6, #0
 80083f0:	d0f9      	beq.n	80083e6 <__sflush_r+0x1a>
 80083f2:	2300      	movs	r3, #0
 80083f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083f8:	682f      	ldr	r7, [r5, #0]
 80083fa:	602b      	str	r3, [r5, #0]
 80083fc:	d032      	beq.n	8008464 <__sflush_r+0x98>
 80083fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	075a      	lsls	r2, r3, #29
 8008404:	d505      	bpl.n	8008412 <__sflush_r+0x46>
 8008406:	6863      	ldr	r3, [r4, #4]
 8008408:	1ac0      	subs	r0, r0, r3
 800840a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800840c:	b10b      	cbz	r3, 8008412 <__sflush_r+0x46>
 800840e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008410:	1ac0      	subs	r0, r0, r3
 8008412:	2300      	movs	r3, #0
 8008414:	4602      	mov	r2, r0
 8008416:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008418:	6a21      	ldr	r1, [r4, #32]
 800841a:	4628      	mov	r0, r5
 800841c:	47b0      	blx	r6
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	89a3      	ldrh	r3, [r4, #12]
 8008422:	d106      	bne.n	8008432 <__sflush_r+0x66>
 8008424:	6829      	ldr	r1, [r5, #0]
 8008426:	291d      	cmp	r1, #29
 8008428:	d82c      	bhi.n	8008484 <__sflush_r+0xb8>
 800842a:	4a2a      	ldr	r2, [pc, #168]	; (80084d4 <__sflush_r+0x108>)
 800842c:	40ca      	lsrs	r2, r1
 800842e:	07d6      	lsls	r6, r2, #31
 8008430:	d528      	bpl.n	8008484 <__sflush_r+0xb8>
 8008432:	2200      	movs	r2, #0
 8008434:	6062      	str	r2, [r4, #4]
 8008436:	04d9      	lsls	r1, r3, #19
 8008438:	6922      	ldr	r2, [r4, #16]
 800843a:	6022      	str	r2, [r4, #0]
 800843c:	d504      	bpl.n	8008448 <__sflush_r+0x7c>
 800843e:	1c42      	adds	r2, r0, #1
 8008440:	d101      	bne.n	8008446 <__sflush_r+0x7a>
 8008442:	682b      	ldr	r3, [r5, #0]
 8008444:	b903      	cbnz	r3, 8008448 <__sflush_r+0x7c>
 8008446:	6560      	str	r0, [r4, #84]	; 0x54
 8008448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800844a:	602f      	str	r7, [r5, #0]
 800844c:	2900      	cmp	r1, #0
 800844e:	d0ca      	beq.n	80083e6 <__sflush_r+0x1a>
 8008450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008454:	4299      	cmp	r1, r3
 8008456:	d002      	beq.n	800845e <__sflush_r+0x92>
 8008458:	4628      	mov	r0, r5
 800845a:	f000 fd8b 	bl	8008f74 <_free_r>
 800845e:	2000      	movs	r0, #0
 8008460:	6360      	str	r0, [r4, #52]	; 0x34
 8008462:	e7c1      	b.n	80083e8 <__sflush_r+0x1c>
 8008464:	6a21      	ldr	r1, [r4, #32]
 8008466:	2301      	movs	r3, #1
 8008468:	4628      	mov	r0, r5
 800846a:	47b0      	blx	r6
 800846c:	1c41      	adds	r1, r0, #1
 800846e:	d1c7      	bne.n	8008400 <__sflush_r+0x34>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0c4      	beq.n	8008400 <__sflush_r+0x34>
 8008476:	2b1d      	cmp	r3, #29
 8008478:	d001      	beq.n	800847e <__sflush_r+0xb2>
 800847a:	2b16      	cmp	r3, #22
 800847c:	d101      	bne.n	8008482 <__sflush_r+0xb6>
 800847e:	602f      	str	r7, [r5, #0]
 8008480:	e7b1      	b.n	80083e6 <__sflush_r+0x1a>
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008488:	81a3      	strh	r3, [r4, #12]
 800848a:	e7ad      	b.n	80083e8 <__sflush_r+0x1c>
 800848c:	690f      	ldr	r7, [r1, #16]
 800848e:	2f00      	cmp	r7, #0
 8008490:	d0a9      	beq.n	80083e6 <__sflush_r+0x1a>
 8008492:	0793      	lsls	r3, r2, #30
 8008494:	680e      	ldr	r6, [r1, #0]
 8008496:	bf08      	it	eq
 8008498:	694b      	ldreq	r3, [r1, #20]
 800849a:	600f      	str	r7, [r1, #0]
 800849c:	bf18      	it	ne
 800849e:	2300      	movne	r3, #0
 80084a0:	eba6 0807 	sub.w	r8, r6, r7
 80084a4:	608b      	str	r3, [r1, #8]
 80084a6:	f1b8 0f00 	cmp.w	r8, #0
 80084aa:	dd9c      	ble.n	80083e6 <__sflush_r+0x1a>
 80084ac:	6a21      	ldr	r1, [r4, #32]
 80084ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084b0:	4643      	mov	r3, r8
 80084b2:	463a      	mov	r2, r7
 80084b4:	4628      	mov	r0, r5
 80084b6:	47b0      	blx	r6
 80084b8:	2800      	cmp	r0, #0
 80084ba:	dc06      	bgt.n	80084ca <__sflush_r+0xfe>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c2:	81a3      	strh	r3, [r4, #12]
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295
 80084c8:	e78e      	b.n	80083e8 <__sflush_r+0x1c>
 80084ca:	4407      	add	r7, r0
 80084cc:	eba8 0800 	sub.w	r8, r8, r0
 80084d0:	e7e9      	b.n	80084a6 <__sflush_r+0xda>
 80084d2:	bf00      	nop
 80084d4:	20400001 	.word	0x20400001

080084d8 <_fflush_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	690b      	ldr	r3, [r1, #16]
 80084dc:	4605      	mov	r5, r0
 80084de:	460c      	mov	r4, r1
 80084e0:	b913      	cbnz	r3, 80084e8 <_fflush_r+0x10>
 80084e2:	2500      	movs	r5, #0
 80084e4:	4628      	mov	r0, r5
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
 80084e8:	b118      	cbz	r0, 80084f2 <_fflush_r+0x1a>
 80084ea:	6983      	ldr	r3, [r0, #24]
 80084ec:	b90b      	cbnz	r3, 80084f2 <_fflush_r+0x1a>
 80084ee:	f000 f887 	bl	8008600 <__sinit>
 80084f2:	4b14      	ldr	r3, [pc, #80]	; (8008544 <_fflush_r+0x6c>)
 80084f4:	429c      	cmp	r4, r3
 80084f6:	d11b      	bne.n	8008530 <_fflush_r+0x58>
 80084f8:	686c      	ldr	r4, [r5, #4]
 80084fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0ef      	beq.n	80084e2 <_fflush_r+0xa>
 8008502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008504:	07d0      	lsls	r0, r2, #31
 8008506:	d404      	bmi.n	8008512 <_fflush_r+0x3a>
 8008508:	0599      	lsls	r1, r3, #22
 800850a:	d402      	bmi.n	8008512 <_fflush_r+0x3a>
 800850c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800850e:	f000 f91a 	bl	8008746 <__retarget_lock_acquire_recursive>
 8008512:	4628      	mov	r0, r5
 8008514:	4621      	mov	r1, r4
 8008516:	f7ff ff59 	bl	80083cc <__sflush_r>
 800851a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800851c:	07da      	lsls	r2, r3, #31
 800851e:	4605      	mov	r5, r0
 8008520:	d4e0      	bmi.n	80084e4 <_fflush_r+0xc>
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	059b      	lsls	r3, r3, #22
 8008526:	d4dd      	bmi.n	80084e4 <_fflush_r+0xc>
 8008528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800852a:	f000 f90d 	bl	8008748 <__retarget_lock_release_recursive>
 800852e:	e7d9      	b.n	80084e4 <_fflush_r+0xc>
 8008530:	4b05      	ldr	r3, [pc, #20]	; (8008548 <_fflush_r+0x70>)
 8008532:	429c      	cmp	r4, r3
 8008534:	d101      	bne.n	800853a <_fflush_r+0x62>
 8008536:	68ac      	ldr	r4, [r5, #8]
 8008538:	e7df      	b.n	80084fa <_fflush_r+0x22>
 800853a:	4b04      	ldr	r3, [pc, #16]	; (800854c <_fflush_r+0x74>)
 800853c:	429c      	cmp	r4, r3
 800853e:	bf08      	it	eq
 8008540:	68ec      	ldreq	r4, [r5, #12]
 8008542:	e7da      	b.n	80084fa <_fflush_r+0x22>
 8008544:	08009878 	.word	0x08009878
 8008548:	08009898 	.word	0x08009898
 800854c:	08009858 	.word	0x08009858

08008550 <std>:
 8008550:	2300      	movs	r3, #0
 8008552:	b510      	push	{r4, lr}
 8008554:	4604      	mov	r4, r0
 8008556:	e9c0 3300 	strd	r3, r3, [r0]
 800855a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800855e:	6083      	str	r3, [r0, #8]
 8008560:	8181      	strh	r1, [r0, #12]
 8008562:	6643      	str	r3, [r0, #100]	; 0x64
 8008564:	81c2      	strh	r2, [r0, #14]
 8008566:	6183      	str	r3, [r0, #24]
 8008568:	4619      	mov	r1, r3
 800856a:	2208      	movs	r2, #8
 800856c:	305c      	adds	r0, #92	; 0x5c
 800856e:	f7fe faf3 	bl	8006b58 <memset>
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <std+0x38>)
 8008574:	6263      	str	r3, [r4, #36]	; 0x24
 8008576:	4b05      	ldr	r3, [pc, #20]	; (800858c <std+0x3c>)
 8008578:	62a3      	str	r3, [r4, #40]	; 0x28
 800857a:	4b05      	ldr	r3, [pc, #20]	; (8008590 <std+0x40>)
 800857c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <std+0x44>)
 8008580:	6224      	str	r4, [r4, #32]
 8008582:	6323      	str	r3, [r4, #48]	; 0x30
 8008584:	bd10      	pop	{r4, pc}
 8008586:	bf00      	nop
 8008588:	08009409 	.word	0x08009409
 800858c:	0800942b 	.word	0x0800942b
 8008590:	08009463 	.word	0x08009463
 8008594:	08009487 	.word	0x08009487

08008598 <_cleanup_r>:
 8008598:	4901      	ldr	r1, [pc, #4]	; (80085a0 <_cleanup_r+0x8>)
 800859a:	f000 b8af 	b.w	80086fc <_fwalk_reent>
 800859e:	bf00      	nop
 80085a0:	080084d9 	.word	0x080084d9

080085a4 <__sfmoreglue>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	2268      	movs	r2, #104	; 0x68
 80085a8:	1e4d      	subs	r5, r1, #1
 80085aa:	4355      	muls	r5, r2
 80085ac:	460e      	mov	r6, r1
 80085ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085b2:	f000 fd4b 	bl	800904c <_malloc_r>
 80085b6:	4604      	mov	r4, r0
 80085b8:	b140      	cbz	r0, 80085cc <__sfmoreglue+0x28>
 80085ba:	2100      	movs	r1, #0
 80085bc:	e9c0 1600 	strd	r1, r6, [r0]
 80085c0:	300c      	adds	r0, #12
 80085c2:	60a0      	str	r0, [r4, #8]
 80085c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085c8:	f7fe fac6 	bl	8006b58 <memset>
 80085cc:	4620      	mov	r0, r4
 80085ce:	bd70      	pop	{r4, r5, r6, pc}

080085d0 <__sfp_lock_acquire>:
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <__sfp_lock_acquire+0x8>)
 80085d2:	f000 b8b8 	b.w	8008746 <__retarget_lock_acquire_recursive>
 80085d6:	bf00      	nop
 80085d8:	20000589 	.word	0x20000589

080085dc <__sfp_lock_release>:
 80085dc:	4801      	ldr	r0, [pc, #4]	; (80085e4 <__sfp_lock_release+0x8>)
 80085de:	f000 b8b3 	b.w	8008748 <__retarget_lock_release_recursive>
 80085e2:	bf00      	nop
 80085e4:	20000589 	.word	0x20000589

080085e8 <__sinit_lock_acquire>:
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <__sinit_lock_acquire+0x8>)
 80085ea:	f000 b8ac 	b.w	8008746 <__retarget_lock_acquire_recursive>
 80085ee:	bf00      	nop
 80085f0:	2000058a 	.word	0x2000058a

080085f4 <__sinit_lock_release>:
 80085f4:	4801      	ldr	r0, [pc, #4]	; (80085fc <__sinit_lock_release+0x8>)
 80085f6:	f000 b8a7 	b.w	8008748 <__retarget_lock_release_recursive>
 80085fa:	bf00      	nop
 80085fc:	2000058a 	.word	0x2000058a

08008600 <__sinit>:
 8008600:	b510      	push	{r4, lr}
 8008602:	4604      	mov	r4, r0
 8008604:	f7ff fff0 	bl	80085e8 <__sinit_lock_acquire>
 8008608:	69a3      	ldr	r3, [r4, #24]
 800860a:	b11b      	cbz	r3, 8008614 <__sinit+0x14>
 800860c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008610:	f7ff bff0 	b.w	80085f4 <__sinit_lock_release>
 8008614:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008618:	6523      	str	r3, [r4, #80]	; 0x50
 800861a:	4b13      	ldr	r3, [pc, #76]	; (8008668 <__sinit+0x68>)
 800861c:	4a13      	ldr	r2, [pc, #76]	; (800866c <__sinit+0x6c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	62a2      	str	r2, [r4, #40]	; 0x28
 8008622:	42a3      	cmp	r3, r4
 8008624:	bf04      	itt	eq
 8008626:	2301      	moveq	r3, #1
 8008628:	61a3      	streq	r3, [r4, #24]
 800862a:	4620      	mov	r0, r4
 800862c:	f000 f820 	bl	8008670 <__sfp>
 8008630:	6060      	str	r0, [r4, #4]
 8008632:	4620      	mov	r0, r4
 8008634:	f000 f81c 	bl	8008670 <__sfp>
 8008638:	60a0      	str	r0, [r4, #8]
 800863a:	4620      	mov	r0, r4
 800863c:	f000 f818 	bl	8008670 <__sfp>
 8008640:	2200      	movs	r2, #0
 8008642:	60e0      	str	r0, [r4, #12]
 8008644:	2104      	movs	r1, #4
 8008646:	6860      	ldr	r0, [r4, #4]
 8008648:	f7ff ff82 	bl	8008550 <std>
 800864c:	68a0      	ldr	r0, [r4, #8]
 800864e:	2201      	movs	r2, #1
 8008650:	2109      	movs	r1, #9
 8008652:	f7ff ff7d 	bl	8008550 <std>
 8008656:	68e0      	ldr	r0, [r4, #12]
 8008658:	2202      	movs	r2, #2
 800865a:	2112      	movs	r1, #18
 800865c:	f7ff ff78 	bl	8008550 <std>
 8008660:	2301      	movs	r3, #1
 8008662:	61a3      	str	r3, [r4, #24]
 8008664:	e7d2      	b.n	800860c <__sinit+0xc>
 8008666:	bf00      	nop
 8008668:	08009790 	.word	0x08009790
 800866c:	08008599 	.word	0x08008599

08008670 <__sfp>:
 8008670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008672:	4607      	mov	r7, r0
 8008674:	f7ff ffac 	bl	80085d0 <__sfp_lock_acquire>
 8008678:	4b1e      	ldr	r3, [pc, #120]	; (80086f4 <__sfp+0x84>)
 800867a:	681e      	ldr	r6, [r3, #0]
 800867c:	69b3      	ldr	r3, [r6, #24]
 800867e:	b913      	cbnz	r3, 8008686 <__sfp+0x16>
 8008680:	4630      	mov	r0, r6
 8008682:	f7ff ffbd 	bl	8008600 <__sinit>
 8008686:	3648      	adds	r6, #72	; 0x48
 8008688:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800868c:	3b01      	subs	r3, #1
 800868e:	d503      	bpl.n	8008698 <__sfp+0x28>
 8008690:	6833      	ldr	r3, [r6, #0]
 8008692:	b30b      	cbz	r3, 80086d8 <__sfp+0x68>
 8008694:	6836      	ldr	r6, [r6, #0]
 8008696:	e7f7      	b.n	8008688 <__sfp+0x18>
 8008698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800869c:	b9d5      	cbnz	r5, 80086d4 <__sfp+0x64>
 800869e:	4b16      	ldr	r3, [pc, #88]	; (80086f8 <__sfp+0x88>)
 80086a0:	60e3      	str	r3, [r4, #12]
 80086a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086a6:	6665      	str	r5, [r4, #100]	; 0x64
 80086a8:	f000 f84c 	bl	8008744 <__retarget_lock_init_recursive>
 80086ac:	f7ff ff96 	bl	80085dc <__sfp_lock_release>
 80086b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086b8:	6025      	str	r5, [r4, #0]
 80086ba:	61a5      	str	r5, [r4, #24]
 80086bc:	2208      	movs	r2, #8
 80086be:	4629      	mov	r1, r5
 80086c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086c4:	f7fe fa48 	bl	8006b58 <memset>
 80086c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086d0:	4620      	mov	r0, r4
 80086d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d4:	3468      	adds	r4, #104	; 0x68
 80086d6:	e7d9      	b.n	800868c <__sfp+0x1c>
 80086d8:	2104      	movs	r1, #4
 80086da:	4638      	mov	r0, r7
 80086dc:	f7ff ff62 	bl	80085a4 <__sfmoreglue>
 80086e0:	4604      	mov	r4, r0
 80086e2:	6030      	str	r0, [r6, #0]
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d1d5      	bne.n	8008694 <__sfp+0x24>
 80086e8:	f7ff ff78 	bl	80085dc <__sfp_lock_release>
 80086ec:	230c      	movs	r3, #12
 80086ee:	603b      	str	r3, [r7, #0]
 80086f0:	e7ee      	b.n	80086d0 <__sfp+0x60>
 80086f2:	bf00      	nop
 80086f4:	08009790 	.word	0x08009790
 80086f8:	ffff0001 	.word	0xffff0001

080086fc <_fwalk_reent>:
 80086fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008700:	4606      	mov	r6, r0
 8008702:	4688      	mov	r8, r1
 8008704:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008708:	2700      	movs	r7, #0
 800870a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800870e:	f1b9 0901 	subs.w	r9, r9, #1
 8008712:	d505      	bpl.n	8008720 <_fwalk_reent+0x24>
 8008714:	6824      	ldr	r4, [r4, #0]
 8008716:	2c00      	cmp	r4, #0
 8008718:	d1f7      	bne.n	800870a <_fwalk_reent+0xe>
 800871a:	4638      	mov	r0, r7
 800871c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008720:	89ab      	ldrh	r3, [r5, #12]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d907      	bls.n	8008736 <_fwalk_reent+0x3a>
 8008726:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800872a:	3301      	adds	r3, #1
 800872c:	d003      	beq.n	8008736 <_fwalk_reent+0x3a>
 800872e:	4629      	mov	r1, r5
 8008730:	4630      	mov	r0, r6
 8008732:	47c0      	blx	r8
 8008734:	4307      	orrs	r7, r0
 8008736:	3568      	adds	r5, #104	; 0x68
 8008738:	e7e9      	b.n	800870e <_fwalk_reent+0x12>
	...

0800873c <_localeconv_r>:
 800873c:	4800      	ldr	r0, [pc, #0]	; (8008740 <_localeconv_r+0x4>)
 800873e:	4770      	bx	lr
 8008740:	20000178 	.word	0x20000178

08008744 <__retarget_lock_init_recursive>:
 8008744:	4770      	bx	lr

08008746 <__retarget_lock_acquire_recursive>:
 8008746:	4770      	bx	lr

08008748 <__retarget_lock_release_recursive>:
 8008748:	4770      	bx	lr

0800874a <__swhatbuf_r>:
 800874a:	b570      	push	{r4, r5, r6, lr}
 800874c:	460e      	mov	r6, r1
 800874e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008752:	2900      	cmp	r1, #0
 8008754:	b096      	sub	sp, #88	; 0x58
 8008756:	4614      	mov	r4, r2
 8008758:	461d      	mov	r5, r3
 800875a:	da08      	bge.n	800876e <__swhatbuf_r+0x24>
 800875c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	602a      	str	r2, [r5, #0]
 8008764:	061a      	lsls	r2, r3, #24
 8008766:	d410      	bmi.n	800878a <__swhatbuf_r+0x40>
 8008768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800876c:	e00e      	b.n	800878c <__swhatbuf_r+0x42>
 800876e:	466a      	mov	r2, sp
 8008770:	f000 fee0 	bl	8009534 <_fstat_r>
 8008774:	2800      	cmp	r0, #0
 8008776:	dbf1      	blt.n	800875c <__swhatbuf_r+0x12>
 8008778:	9a01      	ldr	r2, [sp, #4]
 800877a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800877e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008782:	425a      	negs	r2, r3
 8008784:	415a      	adcs	r2, r3
 8008786:	602a      	str	r2, [r5, #0]
 8008788:	e7ee      	b.n	8008768 <__swhatbuf_r+0x1e>
 800878a:	2340      	movs	r3, #64	; 0x40
 800878c:	2000      	movs	r0, #0
 800878e:	6023      	str	r3, [r4, #0]
 8008790:	b016      	add	sp, #88	; 0x58
 8008792:	bd70      	pop	{r4, r5, r6, pc}

08008794 <__smakebuf_r>:
 8008794:	898b      	ldrh	r3, [r1, #12]
 8008796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008798:	079d      	lsls	r5, r3, #30
 800879a:	4606      	mov	r6, r0
 800879c:	460c      	mov	r4, r1
 800879e:	d507      	bpl.n	80087b0 <__smakebuf_r+0x1c>
 80087a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	2301      	movs	r3, #1
 80087aa:	6163      	str	r3, [r4, #20]
 80087ac:	b002      	add	sp, #8
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	ab01      	add	r3, sp, #4
 80087b2:	466a      	mov	r2, sp
 80087b4:	f7ff ffc9 	bl	800874a <__swhatbuf_r>
 80087b8:	9900      	ldr	r1, [sp, #0]
 80087ba:	4605      	mov	r5, r0
 80087bc:	4630      	mov	r0, r6
 80087be:	f000 fc45 	bl	800904c <_malloc_r>
 80087c2:	b948      	cbnz	r0, 80087d8 <__smakebuf_r+0x44>
 80087c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c8:	059a      	lsls	r2, r3, #22
 80087ca:	d4ef      	bmi.n	80087ac <__smakebuf_r+0x18>
 80087cc:	f023 0303 	bic.w	r3, r3, #3
 80087d0:	f043 0302 	orr.w	r3, r3, #2
 80087d4:	81a3      	strh	r3, [r4, #12]
 80087d6:	e7e3      	b.n	80087a0 <__smakebuf_r+0xc>
 80087d8:	4b0d      	ldr	r3, [pc, #52]	; (8008810 <__smakebuf_r+0x7c>)
 80087da:	62b3      	str	r3, [r6, #40]	; 0x28
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	6020      	str	r0, [r4, #0]
 80087e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e4:	81a3      	strh	r3, [r4, #12]
 80087e6:	9b00      	ldr	r3, [sp, #0]
 80087e8:	6163      	str	r3, [r4, #20]
 80087ea:	9b01      	ldr	r3, [sp, #4]
 80087ec:	6120      	str	r0, [r4, #16]
 80087ee:	b15b      	cbz	r3, 8008808 <__smakebuf_r+0x74>
 80087f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087f4:	4630      	mov	r0, r6
 80087f6:	f000 feaf 	bl	8009558 <_isatty_r>
 80087fa:	b128      	cbz	r0, 8008808 <__smakebuf_r+0x74>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f023 0303 	bic.w	r3, r3, #3
 8008802:	f043 0301 	orr.w	r3, r3, #1
 8008806:	81a3      	strh	r3, [r4, #12]
 8008808:	89a0      	ldrh	r0, [r4, #12]
 800880a:	4305      	orrs	r5, r0
 800880c:	81a5      	strh	r5, [r4, #12]
 800880e:	e7cd      	b.n	80087ac <__smakebuf_r+0x18>
 8008810:	08008599 	.word	0x08008599

08008814 <malloc>:
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <malloc+0xc>)
 8008816:	4601      	mov	r1, r0
 8008818:	6818      	ldr	r0, [r3, #0]
 800881a:	f000 bc17 	b.w	800904c <_malloc_r>
 800881e:	bf00      	nop
 8008820:	20000024 	.word	0x20000024

08008824 <memcpy>:
 8008824:	440a      	add	r2, r1
 8008826:	4291      	cmp	r1, r2
 8008828:	f100 33ff 	add.w	r3, r0, #4294967295
 800882c:	d100      	bne.n	8008830 <memcpy+0xc>
 800882e:	4770      	bx	lr
 8008830:	b510      	push	{r4, lr}
 8008832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800883a:	4291      	cmp	r1, r2
 800883c:	d1f9      	bne.n	8008832 <memcpy+0xe>
 800883e:	bd10      	pop	{r4, pc}

08008840 <_Balloc>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	b976      	cbnz	r6, 8008868 <_Balloc+0x28>
 800884a:	2010      	movs	r0, #16
 800884c:	f7ff ffe2 	bl	8008814 <malloc>
 8008850:	4602      	mov	r2, r0
 8008852:	6260      	str	r0, [r4, #36]	; 0x24
 8008854:	b920      	cbnz	r0, 8008860 <_Balloc+0x20>
 8008856:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <_Balloc+0x78>)
 8008858:	4818      	ldr	r0, [pc, #96]	; (80088bc <_Balloc+0x7c>)
 800885a:	2166      	movs	r1, #102	; 0x66
 800885c:	f000 fe2a 	bl	80094b4 <__assert_func>
 8008860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008864:	6006      	str	r6, [r0, #0]
 8008866:	60c6      	str	r6, [r0, #12]
 8008868:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800886a:	68f3      	ldr	r3, [r6, #12]
 800886c:	b183      	cbz	r3, 8008890 <_Balloc+0x50>
 800886e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008876:	b9b8      	cbnz	r0, 80088a8 <_Balloc+0x68>
 8008878:	2101      	movs	r1, #1
 800887a:	fa01 f605 	lsl.w	r6, r1, r5
 800887e:	1d72      	adds	r2, r6, #5
 8008880:	0092      	lsls	r2, r2, #2
 8008882:	4620      	mov	r0, r4
 8008884:	f000 fb60 	bl	8008f48 <_calloc_r>
 8008888:	b160      	cbz	r0, 80088a4 <_Balloc+0x64>
 800888a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800888e:	e00e      	b.n	80088ae <_Balloc+0x6e>
 8008890:	2221      	movs	r2, #33	; 0x21
 8008892:	2104      	movs	r1, #4
 8008894:	4620      	mov	r0, r4
 8008896:	f000 fb57 	bl	8008f48 <_calloc_r>
 800889a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800889c:	60f0      	str	r0, [r6, #12]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e4      	bne.n	800886e <_Balloc+0x2e>
 80088a4:	2000      	movs	r0, #0
 80088a6:	bd70      	pop	{r4, r5, r6, pc}
 80088a8:	6802      	ldr	r2, [r0, #0]
 80088aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088ae:	2300      	movs	r3, #0
 80088b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088b4:	e7f7      	b.n	80088a6 <_Balloc+0x66>
 80088b6:	bf00      	nop
 80088b8:	080097d5 	.word	0x080097d5
 80088bc:	080098b8 	.word	0x080098b8

080088c0 <_Bfree>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088c4:	4605      	mov	r5, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	b976      	cbnz	r6, 80088e8 <_Bfree+0x28>
 80088ca:	2010      	movs	r0, #16
 80088cc:	f7ff ffa2 	bl	8008814 <malloc>
 80088d0:	4602      	mov	r2, r0
 80088d2:	6268      	str	r0, [r5, #36]	; 0x24
 80088d4:	b920      	cbnz	r0, 80088e0 <_Bfree+0x20>
 80088d6:	4b09      	ldr	r3, [pc, #36]	; (80088fc <_Bfree+0x3c>)
 80088d8:	4809      	ldr	r0, [pc, #36]	; (8008900 <_Bfree+0x40>)
 80088da:	218a      	movs	r1, #138	; 0x8a
 80088dc:	f000 fdea 	bl	80094b4 <__assert_func>
 80088e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088e4:	6006      	str	r6, [r0, #0]
 80088e6:	60c6      	str	r6, [r0, #12]
 80088e8:	b13c      	cbz	r4, 80088fa <_Bfree+0x3a>
 80088ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088ec:	6862      	ldr	r2, [r4, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088f4:	6021      	str	r1, [r4, #0]
 80088f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	080097d5 	.word	0x080097d5
 8008900:	080098b8 	.word	0x080098b8

08008904 <__multadd>:
 8008904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008908:	690d      	ldr	r5, [r1, #16]
 800890a:	4607      	mov	r7, r0
 800890c:	460c      	mov	r4, r1
 800890e:	461e      	mov	r6, r3
 8008910:	f101 0c14 	add.w	ip, r1, #20
 8008914:	2000      	movs	r0, #0
 8008916:	f8dc 3000 	ldr.w	r3, [ip]
 800891a:	b299      	uxth	r1, r3
 800891c:	fb02 6101 	mla	r1, r2, r1, r6
 8008920:	0c1e      	lsrs	r6, r3, #16
 8008922:	0c0b      	lsrs	r3, r1, #16
 8008924:	fb02 3306 	mla	r3, r2, r6, r3
 8008928:	b289      	uxth	r1, r1
 800892a:	3001      	adds	r0, #1
 800892c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008930:	4285      	cmp	r5, r0
 8008932:	f84c 1b04 	str.w	r1, [ip], #4
 8008936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800893a:	dcec      	bgt.n	8008916 <__multadd+0x12>
 800893c:	b30e      	cbz	r6, 8008982 <__multadd+0x7e>
 800893e:	68a3      	ldr	r3, [r4, #8]
 8008940:	42ab      	cmp	r3, r5
 8008942:	dc19      	bgt.n	8008978 <__multadd+0x74>
 8008944:	6861      	ldr	r1, [r4, #4]
 8008946:	4638      	mov	r0, r7
 8008948:	3101      	adds	r1, #1
 800894a:	f7ff ff79 	bl	8008840 <_Balloc>
 800894e:	4680      	mov	r8, r0
 8008950:	b928      	cbnz	r0, 800895e <__multadd+0x5a>
 8008952:	4602      	mov	r2, r0
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <__multadd+0x84>)
 8008956:	480d      	ldr	r0, [pc, #52]	; (800898c <__multadd+0x88>)
 8008958:	21b5      	movs	r1, #181	; 0xb5
 800895a:	f000 fdab 	bl	80094b4 <__assert_func>
 800895e:	6922      	ldr	r2, [r4, #16]
 8008960:	3202      	adds	r2, #2
 8008962:	f104 010c 	add.w	r1, r4, #12
 8008966:	0092      	lsls	r2, r2, #2
 8008968:	300c      	adds	r0, #12
 800896a:	f7ff ff5b 	bl	8008824 <memcpy>
 800896e:	4621      	mov	r1, r4
 8008970:	4638      	mov	r0, r7
 8008972:	f7ff ffa5 	bl	80088c0 <_Bfree>
 8008976:	4644      	mov	r4, r8
 8008978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800897c:	3501      	adds	r5, #1
 800897e:	615e      	str	r6, [r3, #20]
 8008980:	6125      	str	r5, [r4, #16]
 8008982:	4620      	mov	r0, r4
 8008984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008988:	08009847 	.word	0x08009847
 800898c:	080098b8 	.word	0x080098b8

08008990 <__hi0bits>:
 8008990:	0c03      	lsrs	r3, r0, #16
 8008992:	041b      	lsls	r3, r3, #16
 8008994:	b9d3      	cbnz	r3, 80089cc <__hi0bits+0x3c>
 8008996:	0400      	lsls	r0, r0, #16
 8008998:	2310      	movs	r3, #16
 800899a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800899e:	bf04      	itt	eq
 80089a0:	0200      	lsleq	r0, r0, #8
 80089a2:	3308      	addeq	r3, #8
 80089a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089a8:	bf04      	itt	eq
 80089aa:	0100      	lsleq	r0, r0, #4
 80089ac:	3304      	addeq	r3, #4
 80089ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089b2:	bf04      	itt	eq
 80089b4:	0080      	lsleq	r0, r0, #2
 80089b6:	3302      	addeq	r3, #2
 80089b8:	2800      	cmp	r0, #0
 80089ba:	db05      	blt.n	80089c8 <__hi0bits+0x38>
 80089bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089c0:	f103 0301 	add.w	r3, r3, #1
 80089c4:	bf08      	it	eq
 80089c6:	2320      	moveq	r3, #32
 80089c8:	4618      	mov	r0, r3
 80089ca:	4770      	bx	lr
 80089cc:	2300      	movs	r3, #0
 80089ce:	e7e4      	b.n	800899a <__hi0bits+0xa>

080089d0 <__lo0bits>:
 80089d0:	6803      	ldr	r3, [r0, #0]
 80089d2:	f013 0207 	ands.w	r2, r3, #7
 80089d6:	4601      	mov	r1, r0
 80089d8:	d00b      	beq.n	80089f2 <__lo0bits+0x22>
 80089da:	07da      	lsls	r2, r3, #31
 80089dc:	d423      	bmi.n	8008a26 <__lo0bits+0x56>
 80089de:	0798      	lsls	r0, r3, #30
 80089e0:	bf49      	itett	mi
 80089e2:	085b      	lsrmi	r3, r3, #1
 80089e4:	089b      	lsrpl	r3, r3, #2
 80089e6:	2001      	movmi	r0, #1
 80089e8:	600b      	strmi	r3, [r1, #0]
 80089ea:	bf5c      	itt	pl
 80089ec:	600b      	strpl	r3, [r1, #0]
 80089ee:	2002      	movpl	r0, #2
 80089f0:	4770      	bx	lr
 80089f2:	b298      	uxth	r0, r3
 80089f4:	b9a8      	cbnz	r0, 8008a22 <__lo0bits+0x52>
 80089f6:	0c1b      	lsrs	r3, r3, #16
 80089f8:	2010      	movs	r0, #16
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	b90a      	cbnz	r2, 8008a02 <__lo0bits+0x32>
 80089fe:	3008      	adds	r0, #8
 8008a00:	0a1b      	lsrs	r3, r3, #8
 8008a02:	071a      	lsls	r2, r3, #28
 8008a04:	bf04      	itt	eq
 8008a06:	091b      	lsreq	r3, r3, #4
 8008a08:	3004      	addeq	r0, #4
 8008a0a:	079a      	lsls	r2, r3, #30
 8008a0c:	bf04      	itt	eq
 8008a0e:	089b      	lsreq	r3, r3, #2
 8008a10:	3002      	addeq	r0, #2
 8008a12:	07da      	lsls	r2, r3, #31
 8008a14:	d403      	bmi.n	8008a1e <__lo0bits+0x4e>
 8008a16:	085b      	lsrs	r3, r3, #1
 8008a18:	f100 0001 	add.w	r0, r0, #1
 8008a1c:	d005      	beq.n	8008a2a <__lo0bits+0x5a>
 8008a1e:	600b      	str	r3, [r1, #0]
 8008a20:	4770      	bx	lr
 8008a22:	4610      	mov	r0, r2
 8008a24:	e7e9      	b.n	80089fa <__lo0bits+0x2a>
 8008a26:	2000      	movs	r0, #0
 8008a28:	4770      	bx	lr
 8008a2a:	2020      	movs	r0, #32
 8008a2c:	4770      	bx	lr
	...

08008a30 <__i2b>:
 8008a30:	b510      	push	{r4, lr}
 8008a32:	460c      	mov	r4, r1
 8008a34:	2101      	movs	r1, #1
 8008a36:	f7ff ff03 	bl	8008840 <_Balloc>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	b928      	cbnz	r0, 8008a4a <__i2b+0x1a>
 8008a3e:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <__i2b+0x24>)
 8008a40:	4805      	ldr	r0, [pc, #20]	; (8008a58 <__i2b+0x28>)
 8008a42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a46:	f000 fd35 	bl	80094b4 <__assert_func>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	6144      	str	r4, [r0, #20]
 8008a4e:	6103      	str	r3, [r0, #16]
 8008a50:	bd10      	pop	{r4, pc}
 8008a52:	bf00      	nop
 8008a54:	08009847 	.word	0x08009847
 8008a58:	080098b8 	.word	0x080098b8

08008a5c <__multiply>:
 8008a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a60:	4691      	mov	r9, r2
 8008a62:	690a      	ldr	r2, [r1, #16]
 8008a64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	bfb8      	it	lt
 8008a6c:	460b      	movlt	r3, r1
 8008a6e:	460c      	mov	r4, r1
 8008a70:	bfbc      	itt	lt
 8008a72:	464c      	movlt	r4, r9
 8008a74:	4699      	movlt	r9, r3
 8008a76:	6927      	ldr	r7, [r4, #16]
 8008a78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a7c:	68a3      	ldr	r3, [r4, #8]
 8008a7e:	6861      	ldr	r1, [r4, #4]
 8008a80:	eb07 060a 	add.w	r6, r7, sl
 8008a84:	42b3      	cmp	r3, r6
 8008a86:	b085      	sub	sp, #20
 8008a88:	bfb8      	it	lt
 8008a8a:	3101      	addlt	r1, #1
 8008a8c:	f7ff fed8 	bl	8008840 <_Balloc>
 8008a90:	b930      	cbnz	r0, 8008aa0 <__multiply+0x44>
 8008a92:	4602      	mov	r2, r0
 8008a94:	4b44      	ldr	r3, [pc, #272]	; (8008ba8 <__multiply+0x14c>)
 8008a96:	4845      	ldr	r0, [pc, #276]	; (8008bac <__multiply+0x150>)
 8008a98:	f240 115d 	movw	r1, #349	; 0x15d
 8008a9c:	f000 fd0a 	bl	80094b4 <__assert_func>
 8008aa0:	f100 0514 	add.w	r5, r0, #20
 8008aa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4543      	cmp	r3, r8
 8008aae:	d321      	bcc.n	8008af4 <__multiply+0x98>
 8008ab0:	f104 0314 	add.w	r3, r4, #20
 8008ab4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ab8:	f109 0314 	add.w	r3, r9, #20
 8008abc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ac0:	9202      	str	r2, [sp, #8]
 8008ac2:	1b3a      	subs	r2, r7, r4
 8008ac4:	3a15      	subs	r2, #21
 8008ac6:	f022 0203 	bic.w	r2, r2, #3
 8008aca:	3204      	adds	r2, #4
 8008acc:	f104 0115 	add.w	r1, r4, #21
 8008ad0:	428f      	cmp	r7, r1
 8008ad2:	bf38      	it	cc
 8008ad4:	2204      	movcc	r2, #4
 8008ad6:	9201      	str	r2, [sp, #4]
 8008ad8:	9a02      	ldr	r2, [sp, #8]
 8008ada:	9303      	str	r3, [sp, #12]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d80c      	bhi.n	8008afa <__multiply+0x9e>
 8008ae0:	2e00      	cmp	r6, #0
 8008ae2:	dd03      	ble.n	8008aec <__multiply+0x90>
 8008ae4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d05a      	beq.n	8008ba2 <__multiply+0x146>
 8008aec:	6106      	str	r6, [r0, #16]
 8008aee:	b005      	add	sp, #20
 8008af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af4:	f843 2b04 	str.w	r2, [r3], #4
 8008af8:	e7d8      	b.n	8008aac <__multiply+0x50>
 8008afa:	f8b3 a000 	ldrh.w	sl, [r3]
 8008afe:	f1ba 0f00 	cmp.w	sl, #0
 8008b02:	d024      	beq.n	8008b4e <__multiply+0xf2>
 8008b04:	f104 0e14 	add.w	lr, r4, #20
 8008b08:	46a9      	mov	r9, r5
 8008b0a:	f04f 0c00 	mov.w	ip, #0
 8008b0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b12:	f8d9 1000 	ldr.w	r1, [r9]
 8008b16:	fa1f fb82 	uxth.w	fp, r2
 8008b1a:	b289      	uxth	r1, r1
 8008b1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b24:	f8d9 2000 	ldr.w	r2, [r9]
 8008b28:	4461      	add	r1, ip
 8008b2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b36:	b289      	uxth	r1, r1
 8008b38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b3c:	4577      	cmp	r7, lr
 8008b3e:	f849 1b04 	str.w	r1, [r9], #4
 8008b42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b46:	d8e2      	bhi.n	8008b0e <__multiply+0xb2>
 8008b48:	9a01      	ldr	r2, [sp, #4]
 8008b4a:	f845 c002 	str.w	ip, [r5, r2]
 8008b4e:	9a03      	ldr	r2, [sp, #12]
 8008b50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b54:	3304      	adds	r3, #4
 8008b56:	f1b9 0f00 	cmp.w	r9, #0
 8008b5a:	d020      	beq.n	8008b9e <__multiply+0x142>
 8008b5c:	6829      	ldr	r1, [r5, #0]
 8008b5e:	f104 0c14 	add.w	ip, r4, #20
 8008b62:	46ae      	mov	lr, r5
 8008b64:	f04f 0a00 	mov.w	sl, #0
 8008b68:	f8bc b000 	ldrh.w	fp, [ip]
 8008b6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b70:	fb09 220b 	mla	r2, r9, fp, r2
 8008b74:	4492      	add	sl, r2
 8008b76:	b289      	uxth	r1, r1
 8008b78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b7c:	f84e 1b04 	str.w	r1, [lr], #4
 8008b80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b84:	f8be 1000 	ldrh.w	r1, [lr]
 8008b88:	0c12      	lsrs	r2, r2, #16
 8008b8a:	fb09 1102 	mla	r1, r9, r2, r1
 8008b8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b92:	4567      	cmp	r7, ip
 8008b94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b98:	d8e6      	bhi.n	8008b68 <__multiply+0x10c>
 8008b9a:	9a01      	ldr	r2, [sp, #4]
 8008b9c:	50a9      	str	r1, [r5, r2]
 8008b9e:	3504      	adds	r5, #4
 8008ba0:	e79a      	b.n	8008ad8 <__multiply+0x7c>
 8008ba2:	3e01      	subs	r6, #1
 8008ba4:	e79c      	b.n	8008ae0 <__multiply+0x84>
 8008ba6:	bf00      	nop
 8008ba8:	08009847 	.word	0x08009847
 8008bac:	080098b8 	.word	0x080098b8

08008bb0 <__pow5mult>:
 8008bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb4:	4615      	mov	r5, r2
 8008bb6:	f012 0203 	ands.w	r2, r2, #3
 8008bba:	4606      	mov	r6, r0
 8008bbc:	460f      	mov	r7, r1
 8008bbe:	d007      	beq.n	8008bd0 <__pow5mult+0x20>
 8008bc0:	4c25      	ldr	r4, [pc, #148]	; (8008c58 <__pow5mult+0xa8>)
 8008bc2:	3a01      	subs	r2, #1
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bca:	f7ff fe9b 	bl	8008904 <__multadd>
 8008bce:	4607      	mov	r7, r0
 8008bd0:	10ad      	asrs	r5, r5, #2
 8008bd2:	d03d      	beq.n	8008c50 <__pow5mult+0xa0>
 8008bd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bd6:	b97c      	cbnz	r4, 8008bf8 <__pow5mult+0x48>
 8008bd8:	2010      	movs	r0, #16
 8008bda:	f7ff fe1b 	bl	8008814 <malloc>
 8008bde:	4602      	mov	r2, r0
 8008be0:	6270      	str	r0, [r6, #36]	; 0x24
 8008be2:	b928      	cbnz	r0, 8008bf0 <__pow5mult+0x40>
 8008be4:	4b1d      	ldr	r3, [pc, #116]	; (8008c5c <__pow5mult+0xac>)
 8008be6:	481e      	ldr	r0, [pc, #120]	; (8008c60 <__pow5mult+0xb0>)
 8008be8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bec:	f000 fc62 	bl	80094b4 <__assert_func>
 8008bf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bf4:	6004      	str	r4, [r0, #0]
 8008bf6:	60c4      	str	r4, [r0, #12]
 8008bf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008bfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c00:	b94c      	cbnz	r4, 8008c16 <__pow5mult+0x66>
 8008c02:	f240 2171 	movw	r1, #625	; 0x271
 8008c06:	4630      	mov	r0, r6
 8008c08:	f7ff ff12 	bl	8008a30 <__i2b>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c12:	4604      	mov	r4, r0
 8008c14:	6003      	str	r3, [r0, #0]
 8008c16:	f04f 0900 	mov.w	r9, #0
 8008c1a:	07eb      	lsls	r3, r5, #31
 8008c1c:	d50a      	bpl.n	8008c34 <__pow5mult+0x84>
 8008c1e:	4639      	mov	r1, r7
 8008c20:	4622      	mov	r2, r4
 8008c22:	4630      	mov	r0, r6
 8008c24:	f7ff ff1a 	bl	8008a5c <__multiply>
 8008c28:	4639      	mov	r1, r7
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f7ff fe47 	bl	80088c0 <_Bfree>
 8008c32:	4647      	mov	r7, r8
 8008c34:	106d      	asrs	r5, r5, #1
 8008c36:	d00b      	beq.n	8008c50 <__pow5mult+0xa0>
 8008c38:	6820      	ldr	r0, [r4, #0]
 8008c3a:	b938      	cbnz	r0, 8008c4c <__pow5mult+0x9c>
 8008c3c:	4622      	mov	r2, r4
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4630      	mov	r0, r6
 8008c42:	f7ff ff0b 	bl	8008a5c <__multiply>
 8008c46:	6020      	str	r0, [r4, #0]
 8008c48:	f8c0 9000 	str.w	r9, [r0]
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	e7e4      	b.n	8008c1a <__pow5mult+0x6a>
 8008c50:	4638      	mov	r0, r7
 8008c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c56:	bf00      	nop
 8008c58:	08009a08 	.word	0x08009a08
 8008c5c:	080097d5 	.word	0x080097d5
 8008c60:	080098b8 	.word	0x080098b8

08008c64 <__lshift>:
 8008c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c68:	460c      	mov	r4, r1
 8008c6a:	6849      	ldr	r1, [r1, #4]
 8008c6c:	6923      	ldr	r3, [r4, #16]
 8008c6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c72:	68a3      	ldr	r3, [r4, #8]
 8008c74:	4607      	mov	r7, r0
 8008c76:	4691      	mov	r9, r2
 8008c78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c7c:	f108 0601 	add.w	r6, r8, #1
 8008c80:	42b3      	cmp	r3, r6
 8008c82:	db0b      	blt.n	8008c9c <__lshift+0x38>
 8008c84:	4638      	mov	r0, r7
 8008c86:	f7ff fddb 	bl	8008840 <_Balloc>
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	b948      	cbnz	r0, 8008ca2 <__lshift+0x3e>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	4b2a      	ldr	r3, [pc, #168]	; (8008d3c <__lshift+0xd8>)
 8008c92:	482b      	ldr	r0, [pc, #172]	; (8008d40 <__lshift+0xdc>)
 8008c94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c98:	f000 fc0c 	bl	80094b4 <__assert_func>
 8008c9c:	3101      	adds	r1, #1
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	e7ee      	b.n	8008c80 <__lshift+0x1c>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f100 0114 	add.w	r1, r0, #20
 8008ca8:	f100 0210 	add.w	r2, r0, #16
 8008cac:	4618      	mov	r0, r3
 8008cae:	4553      	cmp	r3, sl
 8008cb0:	db37      	blt.n	8008d22 <__lshift+0xbe>
 8008cb2:	6920      	ldr	r0, [r4, #16]
 8008cb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cb8:	f104 0314 	add.w	r3, r4, #20
 8008cbc:	f019 091f 	ands.w	r9, r9, #31
 8008cc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008cc8:	d02f      	beq.n	8008d2a <__lshift+0xc6>
 8008cca:	f1c9 0e20 	rsb	lr, r9, #32
 8008cce:	468a      	mov	sl, r1
 8008cd0:	f04f 0c00 	mov.w	ip, #0
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	fa02 f209 	lsl.w	r2, r2, r9
 8008cda:	ea42 020c 	orr.w	r2, r2, ip
 8008cde:	f84a 2b04 	str.w	r2, [sl], #4
 8008ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce6:	4298      	cmp	r0, r3
 8008ce8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008cec:	d8f2      	bhi.n	8008cd4 <__lshift+0x70>
 8008cee:	1b03      	subs	r3, r0, r4
 8008cf0:	3b15      	subs	r3, #21
 8008cf2:	f023 0303 	bic.w	r3, r3, #3
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	f104 0215 	add.w	r2, r4, #21
 8008cfc:	4290      	cmp	r0, r2
 8008cfe:	bf38      	it	cc
 8008d00:	2304      	movcc	r3, #4
 8008d02:	f841 c003 	str.w	ip, [r1, r3]
 8008d06:	f1bc 0f00 	cmp.w	ip, #0
 8008d0a:	d001      	beq.n	8008d10 <__lshift+0xac>
 8008d0c:	f108 0602 	add.w	r6, r8, #2
 8008d10:	3e01      	subs	r6, #1
 8008d12:	4638      	mov	r0, r7
 8008d14:	612e      	str	r6, [r5, #16]
 8008d16:	4621      	mov	r1, r4
 8008d18:	f7ff fdd2 	bl	80088c0 <_Bfree>
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d22:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d26:	3301      	adds	r3, #1
 8008d28:	e7c1      	b.n	8008cae <__lshift+0x4a>
 8008d2a:	3904      	subs	r1, #4
 8008d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d30:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d34:	4298      	cmp	r0, r3
 8008d36:	d8f9      	bhi.n	8008d2c <__lshift+0xc8>
 8008d38:	e7ea      	b.n	8008d10 <__lshift+0xac>
 8008d3a:	bf00      	nop
 8008d3c:	08009847 	.word	0x08009847
 8008d40:	080098b8 	.word	0x080098b8

08008d44 <__mcmp>:
 8008d44:	b530      	push	{r4, r5, lr}
 8008d46:	6902      	ldr	r2, [r0, #16]
 8008d48:	690c      	ldr	r4, [r1, #16]
 8008d4a:	1b12      	subs	r2, r2, r4
 8008d4c:	d10e      	bne.n	8008d6c <__mcmp+0x28>
 8008d4e:	f100 0314 	add.w	r3, r0, #20
 8008d52:	3114      	adds	r1, #20
 8008d54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d64:	42a5      	cmp	r5, r4
 8008d66:	d003      	beq.n	8008d70 <__mcmp+0x2c>
 8008d68:	d305      	bcc.n	8008d76 <__mcmp+0x32>
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	bd30      	pop	{r4, r5, pc}
 8008d70:	4283      	cmp	r3, r0
 8008d72:	d3f3      	bcc.n	8008d5c <__mcmp+0x18>
 8008d74:	e7fa      	b.n	8008d6c <__mcmp+0x28>
 8008d76:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7a:	e7f7      	b.n	8008d6c <__mcmp+0x28>

08008d7c <__mdiff>:
 8008d7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d80:	460c      	mov	r4, r1
 8008d82:	4606      	mov	r6, r0
 8008d84:	4611      	mov	r1, r2
 8008d86:	4620      	mov	r0, r4
 8008d88:	4690      	mov	r8, r2
 8008d8a:	f7ff ffdb 	bl	8008d44 <__mcmp>
 8008d8e:	1e05      	subs	r5, r0, #0
 8008d90:	d110      	bne.n	8008db4 <__mdiff+0x38>
 8008d92:	4629      	mov	r1, r5
 8008d94:	4630      	mov	r0, r6
 8008d96:	f7ff fd53 	bl	8008840 <_Balloc>
 8008d9a:	b930      	cbnz	r0, 8008daa <__mdiff+0x2e>
 8008d9c:	4b3a      	ldr	r3, [pc, #232]	; (8008e88 <__mdiff+0x10c>)
 8008d9e:	4602      	mov	r2, r0
 8008da0:	f240 2132 	movw	r1, #562	; 0x232
 8008da4:	4839      	ldr	r0, [pc, #228]	; (8008e8c <__mdiff+0x110>)
 8008da6:	f000 fb85 	bl	80094b4 <__assert_func>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db4:	bfa4      	itt	ge
 8008db6:	4643      	movge	r3, r8
 8008db8:	46a0      	movge	r8, r4
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008dc0:	bfa6      	itte	ge
 8008dc2:	461c      	movge	r4, r3
 8008dc4:	2500      	movge	r5, #0
 8008dc6:	2501      	movlt	r5, #1
 8008dc8:	f7ff fd3a 	bl	8008840 <_Balloc>
 8008dcc:	b920      	cbnz	r0, 8008dd8 <__mdiff+0x5c>
 8008dce:	4b2e      	ldr	r3, [pc, #184]	; (8008e88 <__mdiff+0x10c>)
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008dd6:	e7e5      	b.n	8008da4 <__mdiff+0x28>
 8008dd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ddc:	6926      	ldr	r6, [r4, #16]
 8008dde:	60c5      	str	r5, [r0, #12]
 8008de0:	f104 0914 	add.w	r9, r4, #20
 8008de4:	f108 0514 	add.w	r5, r8, #20
 8008de8:	f100 0e14 	add.w	lr, r0, #20
 8008dec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008df0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008df4:	f108 0210 	add.w	r2, r8, #16
 8008df8:	46f2      	mov	sl, lr
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e04:	fa1f f883 	uxth.w	r8, r3
 8008e08:	fa11 f18b 	uxtah	r1, r1, fp
 8008e0c:	0c1b      	lsrs	r3, r3, #16
 8008e0e:	eba1 0808 	sub.w	r8, r1, r8
 8008e12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e1a:	fa1f f888 	uxth.w	r8, r8
 8008e1e:	1419      	asrs	r1, r3, #16
 8008e20:	454e      	cmp	r6, r9
 8008e22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e26:	f84a 3b04 	str.w	r3, [sl], #4
 8008e2a:	d8e7      	bhi.n	8008dfc <__mdiff+0x80>
 8008e2c:	1b33      	subs	r3, r6, r4
 8008e2e:	3b15      	subs	r3, #21
 8008e30:	f023 0303 	bic.w	r3, r3, #3
 8008e34:	3304      	adds	r3, #4
 8008e36:	3415      	adds	r4, #21
 8008e38:	42a6      	cmp	r6, r4
 8008e3a:	bf38      	it	cc
 8008e3c:	2304      	movcc	r3, #4
 8008e3e:	441d      	add	r5, r3
 8008e40:	4473      	add	r3, lr
 8008e42:	469e      	mov	lr, r3
 8008e44:	462e      	mov	r6, r5
 8008e46:	4566      	cmp	r6, ip
 8008e48:	d30e      	bcc.n	8008e68 <__mdiff+0xec>
 8008e4a:	f10c 0203 	add.w	r2, ip, #3
 8008e4e:	1b52      	subs	r2, r2, r5
 8008e50:	f022 0203 	bic.w	r2, r2, #3
 8008e54:	3d03      	subs	r5, #3
 8008e56:	45ac      	cmp	ip, r5
 8008e58:	bf38      	it	cc
 8008e5a:	2200      	movcc	r2, #0
 8008e5c:	441a      	add	r2, r3
 8008e5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e62:	b17b      	cbz	r3, 8008e84 <__mdiff+0x108>
 8008e64:	6107      	str	r7, [r0, #16]
 8008e66:	e7a3      	b.n	8008db0 <__mdiff+0x34>
 8008e68:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e6c:	fa11 f288 	uxtah	r2, r1, r8
 8008e70:	1414      	asrs	r4, r2, #16
 8008e72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e76:	b292      	uxth	r2, r2
 8008e78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e7c:	f84e 2b04 	str.w	r2, [lr], #4
 8008e80:	1421      	asrs	r1, r4, #16
 8008e82:	e7e0      	b.n	8008e46 <__mdiff+0xca>
 8008e84:	3f01      	subs	r7, #1
 8008e86:	e7ea      	b.n	8008e5e <__mdiff+0xe2>
 8008e88:	08009847 	.word	0x08009847
 8008e8c:	080098b8 	.word	0x080098b8

08008e90 <__d2b>:
 8008e90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e94:	4689      	mov	r9, r1
 8008e96:	2101      	movs	r1, #1
 8008e98:	ec57 6b10 	vmov	r6, r7, d0
 8008e9c:	4690      	mov	r8, r2
 8008e9e:	f7ff fccf 	bl	8008840 <_Balloc>
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	b930      	cbnz	r0, 8008eb4 <__d2b+0x24>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	4b25      	ldr	r3, [pc, #148]	; (8008f40 <__d2b+0xb0>)
 8008eaa:	4826      	ldr	r0, [pc, #152]	; (8008f44 <__d2b+0xb4>)
 8008eac:	f240 310a 	movw	r1, #778	; 0x30a
 8008eb0:	f000 fb00 	bl	80094b4 <__assert_func>
 8008eb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008eb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ebc:	bb35      	cbnz	r5, 8008f0c <__d2b+0x7c>
 8008ebe:	2e00      	cmp	r6, #0
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	d028      	beq.n	8008f16 <__d2b+0x86>
 8008ec4:	4668      	mov	r0, sp
 8008ec6:	9600      	str	r6, [sp, #0]
 8008ec8:	f7ff fd82 	bl	80089d0 <__lo0bits>
 8008ecc:	9900      	ldr	r1, [sp, #0]
 8008ece:	b300      	cbz	r0, 8008f12 <__d2b+0x82>
 8008ed0:	9a01      	ldr	r2, [sp, #4]
 8008ed2:	f1c0 0320 	rsb	r3, r0, #32
 8008ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eda:	430b      	orrs	r3, r1
 8008edc:	40c2      	lsrs	r2, r0
 8008ede:	6163      	str	r3, [r4, #20]
 8008ee0:	9201      	str	r2, [sp, #4]
 8008ee2:	9b01      	ldr	r3, [sp, #4]
 8008ee4:	61a3      	str	r3, [r4, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bf14      	ite	ne
 8008eea:	2202      	movne	r2, #2
 8008eec:	2201      	moveq	r2, #1
 8008eee:	6122      	str	r2, [r4, #16]
 8008ef0:	b1d5      	cbz	r5, 8008f28 <__d2b+0x98>
 8008ef2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ef6:	4405      	add	r5, r0
 8008ef8:	f8c9 5000 	str.w	r5, [r9]
 8008efc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f00:	f8c8 0000 	str.w	r0, [r8]
 8008f04:	4620      	mov	r0, r4
 8008f06:	b003      	add	sp, #12
 8008f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f10:	e7d5      	b.n	8008ebe <__d2b+0x2e>
 8008f12:	6161      	str	r1, [r4, #20]
 8008f14:	e7e5      	b.n	8008ee2 <__d2b+0x52>
 8008f16:	a801      	add	r0, sp, #4
 8008f18:	f7ff fd5a 	bl	80089d0 <__lo0bits>
 8008f1c:	9b01      	ldr	r3, [sp, #4]
 8008f1e:	6163      	str	r3, [r4, #20]
 8008f20:	2201      	movs	r2, #1
 8008f22:	6122      	str	r2, [r4, #16]
 8008f24:	3020      	adds	r0, #32
 8008f26:	e7e3      	b.n	8008ef0 <__d2b+0x60>
 8008f28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f30:	f8c9 0000 	str.w	r0, [r9]
 8008f34:	6918      	ldr	r0, [r3, #16]
 8008f36:	f7ff fd2b 	bl	8008990 <__hi0bits>
 8008f3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f3e:	e7df      	b.n	8008f00 <__d2b+0x70>
 8008f40:	08009847 	.word	0x08009847
 8008f44:	080098b8 	.word	0x080098b8

08008f48 <_calloc_r>:
 8008f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f4a:	fba1 2402 	umull	r2, r4, r1, r2
 8008f4e:	b94c      	cbnz	r4, 8008f64 <_calloc_r+0x1c>
 8008f50:	4611      	mov	r1, r2
 8008f52:	9201      	str	r2, [sp, #4]
 8008f54:	f000 f87a 	bl	800904c <_malloc_r>
 8008f58:	9a01      	ldr	r2, [sp, #4]
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	b930      	cbnz	r0, 8008f6c <_calloc_r+0x24>
 8008f5e:	4628      	mov	r0, r5
 8008f60:	b003      	add	sp, #12
 8008f62:	bd30      	pop	{r4, r5, pc}
 8008f64:	220c      	movs	r2, #12
 8008f66:	6002      	str	r2, [r0, #0]
 8008f68:	2500      	movs	r5, #0
 8008f6a:	e7f8      	b.n	8008f5e <_calloc_r+0x16>
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	f7fd fdf3 	bl	8006b58 <memset>
 8008f72:	e7f4      	b.n	8008f5e <_calloc_r+0x16>

08008f74 <_free_r>:
 8008f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f76:	2900      	cmp	r1, #0
 8008f78:	d044      	beq.n	8009004 <_free_r+0x90>
 8008f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f7e:	9001      	str	r0, [sp, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f1a1 0404 	sub.w	r4, r1, #4
 8008f86:	bfb8      	it	lt
 8008f88:	18e4      	addlt	r4, r4, r3
 8008f8a:	f000 fb19 	bl	80095c0 <__malloc_lock>
 8008f8e:	4a1e      	ldr	r2, [pc, #120]	; (8009008 <_free_r+0x94>)
 8008f90:	9801      	ldr	r0, [sp, #4]
 8008f92:	6813      	ldr	r3, [r2, #0]
 8008f94:	b933      	cbnz	r3, 8008fa4 <_free_r+0x30>
 8008f96:	6063      	str	r3, [r4, #4]
 8008f98:	6014      	str	r4, [r2, #0]
 8008f9a:	b003      	add	sp, #12
 8008f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fa0:	f000 bb14 	b.w	80095cc <__malloc_unlock>
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	d908      	bls.n	8008fba <_free_r+0x46>
 8008fa8:	6825      	ldr	r5, [r4, #0]
 8008faa:	1961      	adds	r1, r4, r5
 8008fac:	428b      	cmp	r3, r1
 8008fae:	bf01      	itttt	eq
 8008fb0:	6819      	ldreq	r1, [r3, #0]
 8008fb2:	685b      	ldreq	r3, [r3, #4]
 8008fb4:	1949      	addeq	r1, r1, r5
 8008fb6:	6021      	streq	r1, [r4, #0]
 8008fb8:	e7ed      	b.n	8008f96 <_free_r+0x22>
 8008fba:	461a      	mov	r2, r3
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	b10b      	cbz	r3, 8008fc4 <_free_r+0x50>
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d9fa      	bls.n	8008fba <_free_r+0x46>
 8008fc4:	6811      	ldr	r1, [r2, #0]
 8008fc6:	1855      	adds	r5, r2, r1
 8008fc8:	42a5      	cmp	r5, r4
 8008fca:	d10b      	bne.n	8008fe4 <_free_r+0x70>
 8008fcc:	6824      	ldr	r4, [r4, #0]
 8008fce:	4421      	add	r1, r4
 8008fd0:	1854      	adds	r4, r2, r1
 8008fd2:	42a3      	cmp	r3, r4
 8008fd4:	6011      	str	r1, [r2, #0]
 8008fd6:	d1e0      	bne.n	8008f9a <_free_r+0x26>
 8008fd8:	681c      	ldr	r4, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	6053      	str	r3, [r2, #4]
 8008fde:	4421      	add	r1, r4
 8008fe0:	6011      	str	r1, [r2, #0]
 8008fe2:	e7da      	b.n	8008f9a <_free_r+0x26>
 8008fe4:	d902      	bls.n	8008fec <_free_r+0x78>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	e7d6      	b.n	8008f9a <_free_r+0x26>
 8008fec:	6825      	ldr	r5, [r4, #0]
 8008fee:	1961      	adds	r1, r4, r5
 8008ff0:	428b      	cmp	r3, r1
 8008ff2:	bf04      	itt	eq
 8008ff4:	6819      	ldreq	r1, [r3, #0]
 8008ff6:	685b      	ldreq	r3, [r3, #4]
 8008ff8:	6063      	str	r3, [r4, #4]
 8008ffa:	bf04      	itt	eq
 8008ffc:	1949      	addeq	r1, r1, r5
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	6054      	str	r4, [r2, #4]
 8009002:	e7ca      	b.n	8008f9a <_free_r+0x26>
 8009004:	b003      	add	sp, #12
 8009006:	bd30      	pop	{r4, r5, pc}
 8009008:	2000058c 	.word	0x2000058c

0800900c <sbrk_aligned>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	4e0e      	ldr	r6, [pc, #56]	; (8009048 <sbrk_aligned+0x3c>)
 8009010:	460c      	mov	r4, r1
 8009012:	6831      	ldr	r1, [r6, #0]
 8009014:	4605      	mov	r5, r0
 8009016:	b911      	cbnz	r1, 800901e <sbrk_aligned+0x12>
 8009018:	f000 f9e6 	bl	80093e8 <_sbrk_r>
 800901c:	6030      	str	r0, [r6, #0]
 800901e:	4621      	mov	r1, r4
 8009020:	4628      	mov	r0, r5
 8009022:	f000 f9e1 	bl	80093e8 <_sbrk_r>
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	d00a      	beq.n	8009040 <sbrk_aligned+0x34>
 800902a:	1cc4      	adds	r4, r0, #3
 800902c:	f024 0403 	bic.w	r4, r4, #3
 8009030:	42a0      	cmp	r0, r4
 8009032:	d007      	beq.n	8009044 <sbrk_aligned+0x38>
 8009034:	1a21      	subs	r1, r4, r0
 8009036:	4628      	mov	r0, r5
 8009038:	f000 f9d6 	bl	80093e8 <_sbrk_r>
 800903c:	3001      	adds	r0, #1
 800903e:	d101      	bne.n	8009044 <sbrk_aligned+0x38>
 8009040:	f04f 34ff 	mov.w	r4, #4294967295
 8009044:	4620      	mov	r0, r4
 8009046:	bd70      	pop	{r4, r5, r6, pc}
 8009048:	20000590 	.word	0x20000590

0800904c <_malloc_r>:
 800904c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009050:	1ccd      	adds	r5, r1, #3
 8009052:	f025 0503 	bic.w	r5, r5, #3
 8009056:	3508      	adds	r5, #8
 8009058:	2d0c      	cmp	r5, #12
 800905a:	bf38      	it	cc
 800905c:	250c      	movcc	r5, #12
 800905e:	2d00      	cmp	r5, #0
 8009060:	4607      	mov	r7, r0
 8009062:	db01      	blt.n	8009068 <_malloc_r+0x1c>
 8009064:	42a9      	cmp	r1, r5
 8009066:	d905      	bls.n	8009074 <_malloc_r+0x28>
 8009068:	230c      	movs	r3, #12
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	2600      	movs	r6, #0
 800906e:	4630      	mov	r0, r6
 8009070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009074:	4e2e      	ldr	r6, [pc, #184]	; (8009130 <_malloc_r+0xe4>)
 8009076:	f000 faa3 	bl	80095c0 <__malloc_lock>
 800907a:	6833      	ldr	r3, [r6, #0]
 800907c:	461c      	mov	r4, r3
 800907e:	bb34      	cbnz	r4, 80090ce <_malloc_r+0x82>
 8009080:	4629      	mov	r1, r5
 8009082:	4638      	mov	r0, r7
 8009084:	f7ff ffc2 	bl	800900c <sbrk_aligned>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	4604      	mov	r4, r0
 800908c:	d14d      	bne.n	800912a <_malloc_r+0xde>
 800908e:	6834      	ldr	r4, [r6, #0]
 8009090:	4626      	mov	r6, r4
 8009092:	2e00      	cmp	r6, #0
 8009094:	d140      	bne.n	8009118 <_malloc_r+0xcc>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	4631      	mov	r1, r6
 800909a:	4638      	mov	r0, r7
 800909c:	eb04 0803 	add.w	r8, r4, r3
 80090a0:	f000 f9a2 	bl	80093e8 <_sbrk_r>
 80090a4:	4580      	cmp	r8, r0
 80090a6:	d13a      	bne.n	800911e <_malloc_r+0xd2>
 80090a8:	6821      	ldr	r1, [r4, #0]
 80090aa:	3503      	adds	r5, #3
 80090ac:	1a6d      	subs	r5, r5, r1
 80090ae:	f025 0503 	bic.w	r5, r5, #3
 80090b2:	3508      	adds	r5, #8
 80090b4:	2d0c      	cmp	r5, #12
 80090b6:	bf38      	it	cc
 80090b8:	250c      	movcc	r5, #12
 80090ba:	4629      	mov	r1, r5
 80090bc:	4638      	mov	r0, r7
 80090be:	f7ff ffa5 	bl	800900c <sbrk_aligned>
 80090c2:	3001      	adds	r0, #1
 80090c4:	d02b      	beq.n	800911e <_malloc_r+0xd2>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	442b      	add	r3, r5
 80090ca:	6023      	str	r3, [r4, #0]
 80090cc:	e00e      	b.n	80090ec <_malloc_r+0xa0>
 80090ce:	6822      	ldr	r2, [r4, #0]
 80090d0:	1b52      	subs	r2, r2, r5
 80090d2:	d41e      	bmi.n	8009112 <_malloc_r+0xc6>
 80090d4:	2a0b      	cmp	r2, #11
 80090d6:	d916      	bls.n	8009106 <_malloc_r+0xba>
 80090d8:	1961      	adds	r1, r4, r5
 80090da:	42a3      	cmp	r3, r4
 80090dc:	6025      	str	r5, [r4, #0]
 80090de:	bf18      	it	ne
 80090e0:	6059      	strne	r1, [r3, #4]
 80090e2:	6863      	ldr	r3, [r4, #4]
 80090e4:	bf08      	it	eq
 80090e6:	6031      	streq	r1, [r6, #0]
 80090e8:	5162      	str	r2, [r4, r5]
 80090ea:	604b      	str	r3, [r1, #4]
 80090ec:	4638      	mov	r0, r7
 80090ee:	f104 060b 	add.w	r6, r4, #11
 80090f2:	f000 fa6b 	bl	80095cc <__malloc_unlock>
 80090f6:	f026 0607 	bic.w	r6, r6, #7
 80090fa:	1d23      	adds	r3, r4, #4
 80090fc:	1af2      	subs	r2, r6, r3
 80090fe:	d0b6      	beq.n	800906e <_malloc_r+0x22>
 8009100:	1b9b      	subs	r3, r3, r6
 8009102:	50a3      	str	r3, [r4, r2]
 8009104:	e7b3      	b.n	800906e <_malloc_r+0x22>
 8009106:	6862      	ldr	r2, [r4, #4]
 8009108:	42a3      	cmp	r3, r4
 800910a:	bf0c      	ite	eq
 800910c:	6032      	streq	r2, [r6, #0]
 800910e:	605a      	strne	r2, [r3, #4]
 8009110:	e7ec      	b.n	80090ec <_malloc_r+0xa0>
 8009112:	4623      	mov	r3, r4
 8009114:	6864      	ldr	r4, [r4, #4]
 8009116:	e7b2      	b.n	800907e <_malloc_r+0x32>
 8009118:	4634      	mov	r4, r6
 800911a:	6876      	ldr	r6, [r6, #4]
 800911c:	e7b9      	b.n	8009092 <_malloc_r+0x46>
 800911e:	230c      	movs	r3, #12
 8009120:	603b      	str	r3, [r7, #0]
 8009122:	4638      	mov	r0, r7
 8009124:	f000 fa52 	bl	80095cc <__malloc_unlock>
 8009128:	e7a1      	b.n	800906e <_malloc_r+0x22>
 800912a:	6025      	str	r5, [r4, #0]
 800912c:	e7de      	b.n	80090ec <_malloc_r+0xa0>
 800912e:	bf00      	nop
 8009130:	2000058c 	.word	0x2000058c

08009134 <__sfputc_r>:
 8009134:	6893      	ldr	r3, [r2, #8]
 8009136:	3b01      	subs	r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	b410      	push	{r4}
 800913c:	6093      	str	r3, [r2, #8]
 800913e:	da08      	bge.n	8009152 <__sfputc_r+0x1e>
 8009140:	6994      	ldr	r4, [r2, #24]
 8009142:	42a3      	cmp	r3, r4
 8009144:	db01      	blt.n	800914a <__sfputc_r+0x16>
 8009146:	290a      	cmp	r1, #10
 8009148:	d103      	bne.n	8009152 <__sfputc_r+0x1e>
 800914a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800914e:	f7fe ba03 	b.w	8007558 <__swbuf_r>
 8009152:	6813      	ldr	r3, [r2, #0]
 8009154:	1c58      	adds	r0, r3, #1
 8009156:	6010      	str	r0, [r2, #0]
 8009158:	7019      	strb	r1, [r3, #0]
 800915a:	4608      	mov	r0, r1
 800915c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009160:	4770      	bx	lr

08009162 <__sfputs_r>:
 8009162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009164:	4606      	mov	r6, r0
 8009166:	460f      	mov	r7, r1
 8009168:	4614      	mov	r4, r2
 800916a:	18d5      	adds	r5, r2, r3
 800916c:	42ac      	cmp	r4, r5
 800916e:	d101      	bne.n	8009174 <__sfputs_r+0x12>
 8009170:	2000      	movs	r0, #0
 8009172:	e007      	b.n	8009184 <__sfputs_r+0x22>
 8009174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009178:	463a      	mov	r2, r7
 800917a:	4630      	mov	r0, r6
 800917c:	f7ff ffda 	bl	8009134 <__sfputc_r>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	d1f3      	bne.n	800916c <__sfputs_r+0xa>
 8009184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009188 <_vfiprintf_r>:
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	460d      	mov	r5, r1
 800918e:	b09d      	sub	sp, #116	; 0x74
 8009190:	4614      	mov	r4, r2
 8009192:	4698      	mov	r8, r3
 8009194:	4606      	mov	r6, r0
 8009196:	b118      	cbz	r0, 80091a0 <_vfiprintf_r+0x18>
 8009198:	6983      	ldr	r3, [r0, #24]
 800919a:	b90b      	cbnz	r3, 80091a0 <_vfiprintf_r+0x18>
 800919c:	f7ff fa30 	bl	8008600 <__sinit>
 80091a0:	4b89      	ldr	r3, [pc, #548]	; (80093c8 <_vfiprintf_r+0x240>)
 80091a2:	429d      	cmp	r5, r3
 80091a4:	d11b      	bne.n	80091de <_vfiprintf_r+0x56>
 80091a6:	6875      	ldr	r5, [r6, #4]
 80091a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091aa:	07d9      	lsls	r1, r3, #31
 80091ac:	d405      	bmi.n	80091ba <_vfiprintf_r+0x32>
 80091ae:	89ab      	ldrh	r3, [r5, #12]
 80091b0:	059a      	lsls	r2, r3, #22
 80091b2:	d402      	bmi.n	80091ba <_vfiprintf_r+0x32>
 80091b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091b6:	f7ff fac6 	bl	8008746 <__retarget_lock_acquire_recursive>
 80091ba:	89ab      	ldrh	r3, [r5, #12]
 80091bc:	071b      	lsls	r3, r3, #28
 80091be:	d501      	bpl.n	80091c4 <_vfiprintf_r+0x3c>
 80091c0:	692b      	ldr	r3, [r5, #16]
 80091c2:	b9eb      	cbnz	r3, 8009200 <_vfiprintf_r+0x78>
 80091c4:	4629      	mov	r1, r5
 80091c6:	4630      	mov	r0, r6
 80091c8:	f7fe fa18 	bl	80075fc <__swsetup_r>
 80091cc:	b1c0      	cbz	r0, 8009200 <_vfiprintf_r+0x78>
 80091ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091d0:	07dc      	lsls	r4, r3, #31
 80091d2:	d50e      	bpl.n	80091f2 <_vfiprintf_r+0x6a>
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
 80091d8:	b01d      	add	sp, #116	; 0x74
 80091da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091de:	4b7b      	ldr	r3, [pc, #492]	; (80093cc <_vfiprintf_r+0x244>)
 80091e0:	429d      	cmp	r5, r3
 80091e2:	d101      	bne.n	80091e8 <_vfiprintf_r+0x60>
 80091e4:	68b5      	ldr	r5, [r6, #8]
 80091e6:	e7df      	b.n	80091a8 <_vfiprintf_r+0x20>
 80091e8:	4b79      	ldr	r3, [pc, #484]	; (80093d0 <_vfiprintf_r+0x248>)
 80091ea:	429d      	cmp	r5, r3
 80091ec:	bf08      	it	eq
 80091ee:	68f5      	ldreq	r5, [r6, #12]
 80091f0:	e7da      	b.n	80091a8 <_vfiprintf_r+0x20>
 80091f2:	89ab      	ldrh	r3, [r5, #12]
 80091f4:	0598      	lsls	r0, r3, #22
 80091f6:	d4ed      	bmi.n	80091d4 <_vfiprintf_r+0x4c>
 80091f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091fa:	f7ff faa5 	bl	8008748 <__retarget_lock_release_recursive>
 80091fe:	e7e9      	b.n	80091d4 <_vfiprintf_r+0x4c>
 8009200:	2300      	movs	r3, #0
 8009202:	9309      	str	r3, [sp, #36]	; 0x24
 8009204:	2320      	movs	r3, #32
 8009206:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800920a:	f8cd 800c 	str.w	r8, [sp, #12]
 800920e:	2330      	movs	r3, #48	; 0x30
 8009210:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80093d4 <_vfiprintf_r+0x24c>
 8009214:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009218:	f04f 0901 	mov.w	r9, #1
 800921c:	4623      	mov	r3, r4
 800921e:	469a      	mov	sl, r3
 8009220:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009224:	b10a      	cbz	r2, 800922a <_vfiprintf_r+0xa2>
 8009226:	2a25      	cmp	r2, #37	; 0x25
 8009228:	d1f9      	bne.n	800921e <_vfiprintf_r+0x96>
 800922a:	ebba 0b04 	subs.w	fp, sl, r4
 800922e:	d00b      	beq.n	8009248 <_vfiprintf_r+0xc0>
 8009230:	465b      	mov	r3, fp
 8009232:	4622      	mov	r2, r4
 8009234:	4629      	mov	r1, r5
 8009236:	4630      	mov	r0, r6
 8009238:	f7ff ff93 	bl	8009162 <__sfputs_r>
 800923c:	3001      	adds	r0, #1
 800923e:	f000 80aa 	beq.w	8009396 <_vfiprintf_r+0x20e>
 8009242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009244:	445a      	add	r2, fp
 8009246:	9209      	str	r2, [sp, #36]	; 0x24
 8009248:	f89a 3000 	ldrb.w	r3, [sl]
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 80a2 	beq.w	8009396 <_vfiprintf_r+0x20e>
 8009252:	2300      	movs	r3, #0
 8009254:	f04f 32ff 	mov.w	r2, #4294967295
 8009258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800925c:	f10a 0a01 	add.w	sl, sl, #1
 8009260:	9304      	str	r3, [sp, #16]
 8009262:	9307      	str	r3, [sp, #28]
 8009264:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009268:	931a      	str	r3, [sp, #104]	; 0x68
 800926a:	4654      	mov	r4, sl
 800926c:	2205      	movs	r2, #5
 800926e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009272:	4858      	ldr	r0, [pc, #352]	; (80093d4 <_vfiprintf_r+0x24c>)
 8009274:	f7f6 ffbc 	bl	80001f0 <memchr>
 8009278:	9a04      	ldr	r2, [sp, #16]
 800927a:	b9d8      	cbnz	r0, 80092b4 <_vfiprintf_r+0x12c>
 800927c:	06d1      	lsls	r1, r2, #27
 800927e:	bf44      	itt	mi
 8009280:	2320      	movmi	r3, #32
 8009282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009286:	0713      	lsls	r3, r2, #28
 8009288:	bf44      	itt	mi
 800928a:	232b      	movmi	r3, #43	; 0x2b
 800928c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009290:	f89a 3000 	ldrb.w	r3, [sl]
 8009294:	2b2a      	cmp	r3, #42	; 0x2a
 8009296:	d015      	beq.n	80092c4 <_vfiprintf_r+0x13c>
 8009298:	9a07      	ldr	r2, [sp, #28]
 800929a:	4654      	mov	r4, sl
 800929c:	2000      	movs	r0, #0
 800929e:	f04f 0c0a 	mov.w	ip, #10
 80092a2:	4621      	mov	r1, r4
 80092a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092a8:	3b30      	subs	r3, #48	; 0x30
 80092aa:	2b09      	cmp	r3, #9
 80092ac:	d94e      	bls.n	800934c <_vfiprintf_r+0x1c4>
 80092ae:	b1b0      	cbz	r0, 80092de <_vfiprintf_r+0x156>
 80092b0:	9207      	str	r2, [sp, #28]
 80092b2:	e014      	b.n	80092de <_vfiprintf_r+0x156>
 80092b4:	eba0 0308 	sub.w	r3, r0, r8
 80092b8:	fa09 f303 	lsl.w	r3, r9, r3
 80092bc:	4313      	orrs	r3, r2
 80092be:	9304      	str	r3, [sp, #16]
 80092c0:	46a2      	mov	sl, r4
 80092c2:	e7d2      	b.n	800926a <_vfiprintf_r+0xe2>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	1d19      	adds	r1, r3, #4
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	9103      	str	r1, [sp, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	bfbb      	ittet	lt
 80092d0:	425b      	neglt	r3, r3
 80092d2:	f042 0202 	orrlt.w	r2, r2, #2
 80092d6:	9307      	strge	r3, [sp, #28]
 80092d8:	9307      	strlt	r3, [sp, #28]
 80092da:	bfb8      	it	lt
 80092dc:	9204      	strlt	r2, [sp, #16]
 80092de:	7823      	ldrb	r3, [r4, #0]
 80092e0:	2b2e      	cmp	r3, #46	; 0x2e
 80092e2:	d10c      	bne.n	80092fe <_vfiprintf_r+0x176>
 80092e4:	7863      	ldrb	r3, [r4, #1]
 80092e6:	2b2a      	cmp	r3, #42	; 0x2a
 80092e8:	d135      	bne.n	8009356 <_vfiprintf_r+0x1ce>
 80092ea:	9b03      	ldr	r3, [sp, #12]
 80092ec:	1d1a      	adds	r2, r3, #4
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	9203      	str	r2, [sp, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bfb8      	it	lt
 80092f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80092fa:	3402      	adds	r4, #2
 80092fc:	9305      	str	r3, [sp, #20]
 80092fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80093e4 <_vfiprintf_r+0x25c>
 8009302:	7821      	ldrb	r1, [r4, #0]
 8009304:	2203      	movs	r2, #3
 8009306:	4650      	mov	r0, sl
 8009308:	f7f6 ff72 	bl	80001f0 <memchr>
 800930c:	b140      	cbz	r0, 8009320 <_vfiprintf_r+0x198>
 800930e:	2340      	movs	r3, #64	; 0x40
 8009310:	eba0 000a 	sub.w	r0, r0, sl
 8009314:	fa03 f000 	lsl.w	r0, r3, r0
 8009318:	9b04      	ldr	r3, [sp, #16]
 800931a:	4303      	orrs	r3, r0
 800931c:	3401      	adds	r4, #1
 800931e:	9304      	str	r3, [sp, #16]
 8009320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009324:	482c      	ldr	r0, [pc, #176]	; (80093d8 <_vfiprintf_r+0x250>)
 8009326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800932a:	2206      	movs	r2, #6
 800932c:	f7f6 ff60 	bl	80001f0 <memchr>
 8009330:	2800      	cmp	r0, #0
 8009332:	d03f      	beq.n	80093b4 <_vfiprintf_r+0x22c>
 8009334:	4b29      	ldr	r3, [pc, #164]	; (80093dc <_vfiprintf_r+0x254>)
 8009336:	bb1b      	cbnz	r3, 8009380 <_vfiprintf_r+0x1f8>
 8009338:	9b03      	ldr	r3, [sp, #12]
 800933a:	3307      	adds	r3, #7
 800933c:	f023 0307 	bic.w	r3, r3, #7
 8009340:	3308      	adds	r3, #8
 8009342:	9303      	str	r3, [sp, #12]
 8009344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009346:	443b      	add	r3, r7
 8009348:	9309      	str	r3, [sp, #36]	; 0x24
 800934a:	e767      	b.n	800921c <_vfiprintf_r+0x94>
 800934c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009350:	460c      	mov	r4, r1
 8009352:	2001      	movs	r0, #1
 8009354:	e7a5      	b.n	80092a2 <_vfiprintf_r+0x11a>
 8009356:	2300      	movs	r3, #0
 8009358:	3401      	adds	r4, #1
 800935a:	9305      	str	r3, [sp, #20]
 800935c:	4619      	mov	r1, r3
 800935e:	f04f 0c0a 	mov.w	ip, #10
 8009362:	4620      	mov	r0, r4
 8009364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009368:	3a30      	subs	r2, #48	; 0x30
 800936a:	2a09      	cmp	r2, #9
 800936c:	d903      	bls.n	8009376 <_vfiprintf_r+0x1ee>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0c5      	beq.n	80092fe <_vfiprintf_r+0x176>
 8009372:	9105      	str	r1, [sp, #20]
 8009374:	e7c3      	b.n	80092fe <_vfiprintf_r+0x176>
 8009376:	fb0c 2101 	mla	r1, ip, r1, r2
 800937a:	4604      	mov	r4, r0
 800937c:	2301      	movs	r3, #1
 800937e:	e7f0      	b.n	8009362 <_vfiprintf_r+0x1da>
 8009380:	ab03      	add	r3, sp, #12
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	462a      	mov	r2, r5
 8009386:	4b16      	ldr	r3, [pc, #88]	; (80093e0 <_vfiprintf_r+0x258>)
 8009388:	a904      	add	r1, sp, #16
 800938a:	4630      	mov	r0, r6
 800938c:	f7fd fc8c 	bl	8006ca8 <_printf_float>
 8009390:	4607      	mov	r7, r0
 8009392:	1c78      	adds	r0, r7, #1
 8009394:	d1d6      	bne.n	8009344 <_vfiprintf_r+0x1bc>
 8009396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009398:	07d9      	lsls	r1, r3, #31
 800939a:	d405      	bmi.n	80093a8 <_vfiprintf_r+0x220>
 800939c:	89ab      	ldrh	r3, [r5, #12]
 800939e:	059a      	lsls	r2, r3, #22
 80093a0:	d402      	bmi.n	80093a8 <_vfiprintf_r+0x220>
 80093a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093a4:	f7ff f9d0 	bl	8008748 <__retarget_lock_release_recursive>
 80093a8:	89ab      	ldrh	r3, [r5, #12]
 80093aa:	065b      	lsls	r3, r3, #25
 80093ac:	f53f af12 	bmi.w	80091d4 <_vfiprintf_r+0x4c>
 80093b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093b2:	e711      	b.n	80091d8 <_vfiprintf_r+0x50>
 80093b4:	ab03      	add	r3, sp, #12
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	462a      	mov	r2, r5
 80093ba:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <_vfiprintf_r+0x258>)
 80093bc:	a904      	add	r1, sp, #16
 80093be:	4630      	mov	r0, r6
 80093c0:	f7fd ff16 	bl	80071f0 <_printf_i>
 80093c4:	e7e4      	b.n	8009390 <_vfiprintf_r+0x208>
 80093c6:	bf00      	nop
 80093c8:	08009878 	.word	0x08009878
 80093cc:	08009898 	.word	0x08009898
 80093d0:	08009858 	.word	0x08009858
 80093d4:	08009a14 	.word	0x08009a14
 80093d8:	08009a1e 	.word	0x08009a1e
 80093dc:	08006ca9 	.word	0x08006ca9
 80093e0:	08009163 	.word	0x08009163
 80093e4:	08009a1a 	.word	0x08009a1a

080093e8 <_sbrk_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4d06      	ldr	r5, [pc, #24]	; (8009404 <_sbrk_r+0x1c>)
 80093ec:	2300      	movs	r3, #0
 80093ee:	4604      	mov	r4, r0
 80093f0:	4608      	mov	r0, r1
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	f7f9 f90e 	bl	8002614 <_sbrk>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_sbrk_r+0x1a>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_sbrk_r+0x1a>
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	20000594 	.word	0x20000594

08009408 <__sread>:
 8009408:	b510      	push	{r4, lr}
 800940a:	460c      	mov	r4, r1
 800940c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009410:	f000 f8e2 	bl	80095d8 <_read_r>
 8009414:	2800      	cmp	r0, #0
 8009416:	bfab      	itete	ge
 8009418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800941a:	89a3      	ldrhlt	r3, [r4, #12]
 800941c:	181b      	addge	r3, r3, r0
 800941e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009422:	bfac      	ite	ge
 8009424:	6563      	strge	r3, [r4, #84]	; 0x54
 8009426:	81a3      	strhlt	r3, [r4, #12]
 8009428:	bd10      	pop	{r4, pc}

0800942a <__swrite>:
 800942a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800942e:	461f      	mov	r7, r3
 8009430:	898b      	ldrh	r3, [r1, #12]
 8009432:	05db      	lsls	r3, r3, #23
 8009434:	4605      	mov	r5, r0
 8009436:	460c      	mov	r4, r1
 8009438:	4616      	mov	r6, r2
 800943a:	d505      	bpl.n	8009448 <__swrite+0x1e>
 800943c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009440:	2302      	movs	r3, #2
 8009442:	2200      	movs	r2, #0
 8009444:	f000 f898 	bl	8009578 <_lseek_r>
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800944e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009452:	81a3      	strh	r3, [r4, #12]
 8009454:	4632      	mov	r2, r6
 8009456:	463b      	mov	r3, r7
 8009458:	4628      	mov	r0, r5
 800945a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800945e:	f000 b817 	b.w	8009490 <_write_r>

08009462 <__sseek>:
 8009462:	b510      	push	{r4, lr}
 8009464:	460c      	mov	r4, r1
 8009466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800946a:	f000 f885 	bl	8009578 <_lseek_r>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	bf15      	itete	ne
 8009474:	6560      	strne	r0, [r4, #84]	; 0x54
 8009476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800947a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800947e:	81a3      	strheq	r3, [r4, #12]
 8009480:	bf18      	it	ne
 8009482:	81a3      	strhne	r3, [r4, #12]
 8009484:	bd10      	pop	{r4, pc}

08009486 <__sclose>:
 8009486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800948a:	f000 b831 	b.w	80094f0 <_close_r>
	...

08009490 <_write_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d07      	ldr	r5, [pc, #28]	; (80094b0 <_write_r+0x20>)
 8009494:	4604      	mov	r4, r0
 8009496:	4608      	mov	r0, r1
 8009498:	4611      	mov	r1, r2
 800949a:	2200      	movs	r2, #0
 800949c:	602a      	str	r2, [r5, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	f7f9 f867 	bl	8002572 <_write>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_write_r+0x1e>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_write_r+0x1e>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	20000594 	.word	0x20000594

080094b4 <__assert_func>:
 80094b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094b6:	4614      	mov	r4, r2
 80094b8:	461a      	mov	r2, r3
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <__assert_func+0x2c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4605      	mov	r5, r0
 80094c0:	68d8      	ldr	r0, [r3, #12]
 80094c2:	b14c      	cbz	r4, 80094d8 <__assert_func+0x24>
 80094c4:	4b07      	ldr	r3, [pc, #28]	; (80094e4 <__assert_func+0x30>)
 80094c6:	9100      	str	r1, [sp, #0]
 80094c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094cc:	4906      	ldr	r1, [pc, #24]	; (80094e8 <__assert_func+0x34>)
 80094ce:	462b      	mov	r3, r5
 80094d0:	f000 f81e 	bl	8009510 <fiprintf>
 80094d4:	f000 f89f 	bl	8009616 <abort>
 80094d8:	4b04      	ldr	r3, [pc, #16]	; (80094ec <__assert_func+0x38>)
 80094da:	461c      	mov	r4, r3
 80094dc:	e7f3      	b.n	80094c6 <__assert_func+0x12>
 80094de:	bf00      	nop
 80094e0:	20000024 	.word	0x20000024
 80094e4:	08009a25 	.word	0x08009a25
 80094e8:	08009a32 	.word	0x08009a32
 80094ec:	08009a60 	.word	0x08009a60

080094f0 <_close_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d06      	ldr	r5, [pc, #24]	; (800950c <_close_r+0x1c>)
 80094f4:	2300      	movs	r3, #0
 80094f6:	4604      	mov	r4, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	602b      	str	r3, [r5, #0]
 80094fc:	f7f9 f855 	bl	80025aa <_close>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_close_r+0x1a>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_close_r+0x1a>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	20000594 	.word	0x20000594

08009510 <fiprintf>:
 8009510:	b40e      	push	{r1, r2, r3}
 8009512:	b503      	push	{r0, r1, lr}
 8009514:	4601      	mov	r1, r0
 8009516:	ab03      	add	r3, sp, #12
 8009518:	4805      	ldr	r0, [pc, #20]	; (8009530 <fiprintf+0x20>)
 800951a:	f853 2b04 	ldr.w	r2, [r3], #4
 800951e:	6800      	ldr	r0, [r0, #0]
 8009520:	9301      	str	r3, [sp, #4]
 8009522:	f7ff fe31 	bl	8009188 <_vfiprintf_r>
 8009526:	b002      	add	sp, #8
 8009528:	f85d eb04 	ldr.w	lr, [sp], #4
 800952c:	b003      	add	sp, #12
 800952e:	4770      	bx	lr
 8009530:	20000024 	.word	0x20000024

08009534 <_fstat_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4d07      	ldr	r5, [pc, #28]	; (8009554 <_fstat_r+0x20>)
 8009538:	2300      	movs	r3, #0
 800953a:	4604      	mov	r4, r0
 800953c:	4608      	mov	r0, r1
 800953e:	4611      	mov	r1, r2
 8009540:	602b      	str	r3, [r5, #0]
 8009542:	f7f9 f83e 	bl	80025c2 <_fstat>
 8009546:	1c43      	adds	r3, r0, #1
 8009548:	d102      	bne.n	8009550 <_fstat_r+0x1c>
 800954a:	682b      	ldr	r3, [r5, #0]
 800954c:	b103      	cbz	r3, 8009550 <_fstat_r+0x1c>
 800954e:	6023      	str	r3, [r4, #0]
 8009550:	bd38      	pop	{r3, r4, r5, pc}
 8009552:	bf00      	nop
 8009554:	20000594 	.word	0x20000594

08009558 <_isatty_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d06      	ldr	r5, [pc, #24]	; (8009574 <_isatty_r+0x1c>)
 800955c:	2300      	movs	r3, #0
 800955e:	4604      	mov	r4, r0
 8009560:	4608      	mov	r0, r1
 8009562:	602b      	str	r3, [r5, #0]
 8009564:	f7f9 f83d 	bl	80025e2 <_isatty>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_isatty_r+0x1a>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_isatty_r+0x1a>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	20000594 	.word	0x20000594

08009578 <_lseek_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d07      	ldr	r5, [pc, #28]	; (8009598 <_lseek_r+0x20>)
 800957c:	4604      	mov	r4, r0
 800957e:	4608      	mov	r0, r1
 8009580:	4611      	mov	r1, r2
 8009582:	2200      	movs	r2, #0
 8009584:	602a      	str	r2, [r5, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	f7f9 f836 	bl	80025f8 <_lseek>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_lseek_r+0x1e>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_lseek_r+0x1e>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20000594 	.word	0x20000594

0800959c <__ascii_mbtowc>:
 800959c:	b082      	sub	sp, #8
 800959e:	b901      	cbnz	r1, 80095a2 <__ascii_mbtowc+0x6>
 80095a0:	a901      	add	r1, sp, #4
 80095a2:	b142      	cbz	r2, 80095b6 <__ascii_mbtowc+0x1a>
 80095a4:	b14b      	cbz	r3, 80095ba <__ascii_mbtowc+0x1e>
 80095a6:	7813      	ldrb	r3, [r2, #0]
 80095a8:	600b      	str	r3, [r1, #0]
 80095aa:	7812      	ldrb	r2, [r2, #0]
 80095ac:	1e10      	subs	r0, r2, #0
 80095ae:	bf18      	it	ne
 80095b0:	2001      	movne	r0, #1
 80095b2:	b002      	add	sp, #8
 80095b4:	4770      	bx	lr
 80095b6:	4610      	mov	r0, r2
 80095b8:	e7fb      	b.n	80095b2 <__ascii_mbtowc+0x16>
 80095ba:	f06f 0001 	mvn.w	r0, #1
 80095be:	e7f8      	b.n	80095b2 <__ascii_mbtowc+0x16>

080095c0 <__malloc_lock>:
 80095c0:	4801      	ldr	r0, [pc, #4]	; (80095c8 <__malloc_lock+0x8>)
 80095c2:	f7ff b8c0 	b.w	8008746 <__retarget_lock_acquire_recursive>
 80095c6:	bf00      	nop
 80095c8:	20000588 	.word	0x20000588

080095cc <__malloc_unlock>:
 80095cc:	4801      	ldr	r0, [pc, #4]	; (80095d4 <__malloc_unlock+0x8>)
 80095ce:	f7ff b8bb 	b.w	8008748 <__retarget_lock_release_recursive>
 80095d2:	bf00      	nop
 80095d4:	20000588 	.word	0x20000588

080095d8 <_read_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d07      	ldr	r5, [pc, #28]	; (80095f8 <_read_r+0x20>)
 80095dc:	4604      	mov	r4, r0
 80095de:	4608      	mov	r0, r1
 80095e0:	4611      	mov	r1, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	602a      	str	r2, [r5, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	f7f8 ffa6 	bl	8002538 <_read>
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d102      	bne.n	80095f6 <_read_r+0x1e>
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	b103      	cbz	r3, 80095f6 <_read_r+0x1e>
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	20000594 	.word	0x20000594

080095fc <__ascii_wctomb>:
 80095fc:	b149      	cbz	r1, 8009612 <__ascii_wctomb+0x16>
 80095fe:	2aff      	cmp	r2, #255	; 0xff
 8009600:	bf85      	ittet	hi
 8009602:	238a      	movhi	r3, #138	; 0x8a
 8009604:	6003      	strhi	r3, [r0, #0]
 8009606:	700a      	strbls	r2, [r1, #0]
 8009608:	f04f 30ff 	movhi.w	r0, #4294967295
 800960c:	bf98      	it	ls
 800960e:	2001      	movls	r0, #1
 8009610:	4770      	bx	lr
 8009612:	4608      	mov	r0, r1
 8009614:	4770      	bx	lr

08009616 <abort>:
 8009616:	b508      	push	{r3, lr}
 8009618:	2006      	movs	r0, #6
 800961a:	f000 f82b 	bl	8009674 <raise>
 800961e:	2001      	movs	r0, #1
 8009620:	f7f8 ff80 	bl	8002524 <_exit>

08009624 <_raise_r>:
 8009624:	291f      	cmp	r1, #31
 8009626:	b538      	push	{r3, r4, r5, lr}
 8009628:	4604      	mov	r4, r0
 800962a:	460d      	mov	r5, r1
 800962c:	d904      	bls.n	8009638 <_raise_r+0x14>
 800962e:	2316      	movs	r3, #22
 8009630:	6003      	str	r3, [r0, #0]
 8009632:	f04f 30ff 	mov.w	r0, #4294967295
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800963a:	b112      	cbz	r2, 8009642 <_raise_r+0x1e>
 800963c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009640:	b94b      	cbnz	r3, 8009656 <_raise_r+0x32>
 8009642:	4620      	mov	r0, r4
 8009644:	f000 f830 	bl	80096a8 <_getpid_r>
 8009648:	462a      	mov	r2, r5
 800964a:	4601      	mov	r1, r0
 800964c:	4620      	mov	r0, r4
 800964e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009652:	f000 b817 	b.w	8009684 <_kill_r>
 8009656:	2b01      	cmp	r3, #1
 8009658:	d00a      	beq.n	8009670 <_raise_r+0x4c>
 800965a:	1c59      	adds	r1, r3, #1
 800965c:	d103      	bne.n	8009666 <_raise_r+0x42>
 800965e:	2316      	movs	r3, #22
 8009660:	6003      	str	r3, [r0, #0]
 8009662:	2001      	movs	r0, #1
 8009664:	e7e7      	b.n	8009636 <_raise_r+0x12>
 8009666:	2400      	movs	r4, #0
 8009668:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800966c:	4628      	mov	r0, r5
 800966e:	4798      	blx	r3
 8009670:	2000      	movs	r0, #0
 8009672:	e7e0      	b.n	8009636 <_raise_r+0x12>

08009674 <raise>:
 8009674:	4b02      	ldr	r3, [pc, #8]	; (8009680 <raise+0xc>)
 8009676:	4601      	mov	r1, r0
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	f7ff bfd3 	b.w	8009624 <_raise_r>
 800967e:	bf00      	nop
 8009680:	20000024 	.word	0x20000024

08009684 <_kill_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d07      	ldr	r5, [pc, #28]	; (80096a4 <_kill_r+0x20>)
 8009688:	2300      	movs	r3, #0
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	4611      	mov	r1, r2
 8009690:	602b      	str	r3, [r5, #0]
 8009692:	f7f8 ff37 	bl	8002504 <_kill>
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	d102      	bne.n	80096a0 <_kill_r+0x1c>
 800969a:	682b      	ldr	r3, [r5, #0]
 800969c:	b103      	cbz	r3, 80096a0 <_kill_r+0x1c>
 800969e:	6023      	str	r3, [r4, #0]
 80096a0:	bd38      	pop	{r3, r4, r5, pc}
 80096a2:	bf00      	nop
 80096a4:	20000594 	.word	0x20000594

080096a8 <_getpid_r>:
 80096a8:	f7f8 bf24 	b.w	80024f4 <_getpid>

080096ac <_init>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	bf00      	nop
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr

080096b8 <_fini>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr
