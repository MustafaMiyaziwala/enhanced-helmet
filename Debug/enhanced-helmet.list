
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c554  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  0800c6f8  0800c6f8  0001c6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf24  0800cf24  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf24  0800cf24  0001cf24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf2c  0800cf2c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf2c  0800cf2c  0001cf2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf30  0800cf30  0001cf30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cf34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f68  200001f8  0800d128  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004160  0800d128  00024160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f87a  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005207  00000000  00000000  0004fa9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002a8e9  00000000  00000000  00054ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  0007f590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000058e8  00000000  00000000  000807a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006f06  00000000  00000000  00086090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003176a  00000000  00000000  0008cf96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1cdc  00000000  00000000  000be700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001603dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005480  00000000  00000000  0016042c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c6dc 	.word	0x0800c6dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800c6dc 	.word	0x0800c6dc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <audio_init>:
		HAL_GPIO_WritePin(audio->amp_enable_port, audio->amp_enable_pin, GPIO_PIN_SET);
		audio->dac_flag |= (1 << 2);
	}
}

void audio_init(Audio* audio) {
 8000f1c:	b510      	push	{r4, lr}
 8000f1e:	4604      	mov	r4, r0
	clear_queue(audio);
}

void clear_queue(Audio* audio) {
	HAL_TIM_Base_Stop_IT(audio->htim);
 8000f20:	68c0      	ldr	r0, [r0, #12]
 8000f22:	f005 fc31 	bl	8006788 <HAL_TIM_Base_Stop_IT>
	for (uint8_t i = 0; i < MAX_AUDIO_QUEUE_LEN; ++i) {
		audio->queue[i] = NULL;
 8000f26:	2300      	movs	r3, #0
	}

	audio->read_pos = 0;
	audio->write_pos = 0;
 8000f28:	f884 385b 	strb.w	r3, [r4, #2139]	; 0x85b
	audio->dac_flag = 0;
 8000f2c:	f8a4 3859 	strh.w	r3, [r4, #2137]	; 0x859
		audio->queue[i] = NULL;
 8000f30:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8000f34:	e9c4 3307 	strd	r3, r3, [r4, #28]
	audio->bytes_left = 0;
 8000f38:	f8c4 3850 	str.w	r3, [r4, #2128]	; 0x850
}
 8000f3c:	bd10      	pop	{r4, pc}
 8000f3e:	bf00      	nop

08000f40 <play_wav>:
	return audio->dac_flag & (1 << 2);
}


void play_wav(Audio* audio, const TCHAR* filename) {
	audio->queue[audio->write_pos] = filename;
 8000f40:	f890 285b 	ldrb.w	r2, [r0, #2139]	; 0x85b
void play_wav(Audio* audio, const TCHAR* filename) {
 8000f44:	4603      	mov	r3, r0
	audio->queue[audio->write_pos] = filename;
 8000f46:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
	audio->write_pos = (audio->write_pos + 1) % MAX_AUDIO_QUEUE_LEN;
 8000f4a:	3201      	adds	r2, #1
 8000f4c:	f002 0203 	and.w	r2, r2, #3
	HAL_TIM_Base_Start_IT(audio->htim);
 8000f50:	68c0      	ldr	r0, [r0, #12]
	audio->queue[audio->write_pos] = filename;
 8000f52:	f8cc 1014 	str.w	r1, [ip, #20]
	audio->write_pos = (audio->write_pos + 1) % MAX_AUDIO_QUEUE_LEN;
 8000f56:	f883 285b 	strb.w	r2, [r3, #2139]	; 0x85b
	HAL_TIM_Base_Start_IT(audio->htim);
 8000f5a:	f005 bbe1 	b.w	8006720 <HAL_TIM_Base_Start_IT>
 8000f5e:	bf00      	nop

08000f60 <check_and_fill_audio_buf>:
	return audio->dac_flag & (1 << 2);
 8000f60:	f890 3859 	ldrb.w	r3, [r0, #2137]	; 0x859
}

void check_and_fill_audio_buf(Audio* audio) {
	if (!(is_playing(audio))) {
 8000f64:	0759      	lsls	r1, r3, #29
 8000f66:	d53c      	bpl.n	8000fe2 <check_and_fill_audio_buf+0x82>
void check_and_fill_audio_buf(Audio* audio) {
 8000f68:	b510      	push	{r4, lr}
		return;
	}

	if (!(audio->dac_flag & 1)) {
 8000f6a:	07da      	lsls	r2, r3, #31
void check_and_fill_audio_buf(Audio* audio) {
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	4604      	mov	r4, r0
	if (!(audio->dac_flag & 1)) {
 8000f70:	d51e      	bpl.n	8000fb0 <check_and_fill_audio_buf+0x50>
		fill_audio_buffer(audio, 0);
	}

	if (!(audio->dac_flag & (1 << 1))) {
 8000f72:	079b      	lsls	r3, r3, #30
 8000f74:	d501      	bpl.n	8000f7a <check_and_fill_audio_buf+0x1a>
		fill_audio_buffer(audio, 1);
	}
}
 8000f76:	b002      	add	sp, #8
 8000f78:	bd10      	pop	{r4, pc}
	UINT bytes_to_read = audio->wav_header.file_size < AUDIO_BUF_LEN
 8000f7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 8000f7c:	6860      	ldr	r0, [r4, #4]
 8000f7e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000f82:	bf28      	it	cs
 8000f84:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8000f88:	ab01      	add	r3, sp, #4
 8000f8a:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 8000f8e:	f008 f88f 	bl	80090b0 <f_read>
	if (res != FR_OK || !bytes_read) {
 8000f92:	2800      	cmp	r0, #0
 8000f94:	d1ef      	bne.n	8000f76 <check_and_fill_audio_buf+0x16>
 8000f96:	9b01      	ldr	r3, [sp, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0ec      	beq.n	8000f76 <check_and_fill_audio_buf+0x16>
	audio->wav_header.file_size -= bytes_read;
 8000f9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000f9e:	f894 2859 	ldrb.w	r2, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 8000fa2:	1acb      	subs	r3, r1, r3
	audio->dac_flag |= (1 << buf_bank);
 8000fa4:	f042 0202 	orr.w	r2, r2, #2
	audio->wav_header.file_size -= bytes_read;
 8000fa8:	62a3      	str	r3, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000faa:	f884 2859 	strb.w	r2, [r4, #2137]	; 0x859
	return 1;
 8000fae:	e7e2      	b.n	8000f76 <check_and_fill_audio_buf+0x16>
	UINT bytes_to_read = audio->wav_header.file_size < AUDIO_BUF_LEN
 8000fb0:	6a82      	ldr	r2, [r0, #40]	; 0x28
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 8000fb2:	6840      	ldr	r0, [r0, #4]
 8000fb4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000fb8:	bf28      	it	cs
 8000fba:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8000fbe:	ab01      	add	r3, sp, #4
 8000fc0:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8000fc4:	f008 f874 	bl	80090b0 <f_read>
	if (res != FR_OK || !bytes_read) {
 8000fc8:	b960      	cbnz	r0, 8000fe4 <check_and_fill_audio_buf+0x84>
 8000fca:	9a01      	ldr	r2, [sp, #4]
 8000fcc:	b152      	cbz	r2, 8000fe4 <check_and_fill_audio_buf+0x84>
	audio->wav_header.file_size -= bytes_read;
 8000fce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000fd0:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 8000fd4:	1a8a      	subs	r2, r1, r2
	audio->dac_flag |= (1 << buf_bank);
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
	audio->wav_header.file_size -= bytes_read;
 8000fda:	62a2      	str	r2, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8000fdc:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
	return 1;
 8000fe0:	e7c7      	b.n	8000f72 <check_and_fill_audio_buf+0x12>
 8000fe2:	4770      	bx	lr
	if (!(audio->dac_flag & (1 << 1))) {
 8000fe4:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
 8000fe8:	079b      	lsls	r3, r3, #30
 8000fea:	d4c4      	bmi.n	8000f76 <check_and_fill_audio_buf+0x16>
 8000fec:	e7c5      	b.n	8000f7a <check_and_fill_audio_buf+0x1a>
 8000fee:	bf00      	nop

08000ff0 <audio_callback>:

void audio_callback(Audio* audio) {
 8000ff0:	b570      	push	{r4, r5, r6, lr}

	if (!audio->bytes_left) {
 8000ff2:	f8d0 5850 	ldr.w	r5, [r0, #2128]	; 0x850
void audio_callback(Audio* audio) {
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	4604      	mov	r4, r0
	if (!audio->bytes_left) {
 8000ffa:	2d00      	cmp	r5, #0
 8000ffc:	d052      	beq.n	80010a4 <audio_callback+0xb4>
		shutdown_dac(audio->ext_dac);
		play_next(audio);
		return;
	}

	if (audio->dac_buf_idx >= AUDIO_BUF_LEN) {
 8000ffe:	f8b0 3854 	ldrh.w	r3, [r0, #2132]	; 0x854
 8001002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001006:	d218      	bcs.n	800103a <audio_callback+0x4a>
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
		audio->dac_buf_idx = 0;
	}

	// ERROR CASE: stop and reinitialize
	if (!(audio->dac_flag & 0b11)) {
 8001008:	f890 5859 	ldrb.w	r5, [r0, #2137]	; 0x859
 800100c:	f015 0503 	ands.w	r5, r5, #3
 8001010:	d028      	beq.n	8001064 <audio_callback+0x74>
		audio_init(audio);
		return;
	}

	write_to_dac(audio->ext_dac,
			audio->dac_buf[audio->dac_buf_bank][audio->dac_buf_idx++]);
 8001012:	f894 2858 	ldrb.w	r2, [r4, #2136]	; 0x858
	write_to_dac(audio->ext_dac,
 8001016:	68a0      	ldr	r0, [r4, #8]
 8001018:	eb04 2282 	add.w	r2, r4, r2, lsl #10
			audio->dac_buf[audio->dac_buf_bank][audio->dac_buf_idx++]);
 800101c:	1c59      	adds	r1, r3, #1
	write_to_dac(audio->ext_dac,
 800101e:	4413      	add	r3, r2
			audio->dac_buf[audio->dac_buf_bank][audio->dac_buf_idx++]);
 8001020:	f8a4 1854 	strh.w	r1, [r4, #2132]	; 0x854
	write_to_dac(audio->ext_dac,
 8001024:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8001028:	f000 fac0 	bl	80015ac <write_to_dac>

	--audio->bytes_left;
 800102c:	f8d4 3850 	ldr.w	r3, [r4, #2128]	; 0x850
 8001030:	3b01      	subs	r3, #1
 8001032:	f8c4 3850 	str.w	r3, [r4, #2128]	; 0x850
}
 8001036:	b002      	add	sp, #8
 8001038:	bd70      	pop	{r4, r5, r6, pc}
		audio->dac_flag &= ~(1 << audio->dac_buf_bank);
 800103a:	f890 3858 	ldrb.w	r3, [r0, #2136]	; 0x858
 800103e:	f890 5859 	ldrb.w	r5, [r0, #2137]	; 0x859
 8001042:	2101      	movs	r1, #1
 8001044:	4099      	lsls	r1, r3
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
 8001046:	1c5a      	adds	r2, r3, #1
		audio->dac_flag &= ~(1 << audio->dac_buf_bank);
 8001048:	ea25 0501 	bic.w	r5, r5, r1
		audio->dac_buf_idx = 0;
 800104c:	2300      	movs	r3, #0
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
 800104e:	f002 0201 	and.w	r2, r2, #1
		audio->dac_flag &= ~(1 << audio->dac_buf_bank);
 8001052:	f880 5859 	strb.w	r5, [r0, #2137]	; 0x859
	if (!(audio->dac_flag & 0b11)) {
 8001056:	f015 0503 	ands.w	r5, r5, #3
		audio->dac_buf_bank = (audio->dac_buf_bank + 1) % 2;
 800105a:	f880 2858 	strb.w	r2, [r0, #2136]	; 0x858
		audio->dac_buf_idx = 0;
 800105e:	f8a0 3854 	strh.w	r3, [r0, #2132]	; 0x854
	if (!(audio->dac_flag & 0b11)) {
 8001062:	d1d6      	bne.n	8001012 <audio_callback+0x22>
	HAL_TIM_Base_Stop_IT(audio->htim);
 8001064:	68e0      	ldr	r0, [r4, #12]
 8001066:	f005 fb8f 	bl	8006788 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(audio->amp_enable_port, audio->amp_enable_pin, GPIO_PIN_RESET);
 800106a:	f8b4 1856 	ldrh.w	r1, [r4, #2134]	; 0x856
 800106e:	6920      	ldr	r0, [r4, #16]
 8001070:	462a      	mov	r2, r5
 8001072:	f003 fad9 	bl	8004628 <HAL_GPIO_WritePin>
	shutdown_dac(audio->ext_dac);
 8001076:	68a0      	ldr	r0, [r4, #8]
 8001078:	f000 fa78 	bl	800156c <shutdown_dac>
	f_close(audio->fil);
 800107c:	6860      	ldr	r0, [r4, #4]
 800107e:	f008 fb21 	bl	80096c4 <f_close>
	HAL_TIM_Base_Stop_IT(audio->htim);
 8001082:	68e0      	ldr	r0, [r4, #12]
	audio->dac_flag = 0;
 8001084:	f884 5859 	strb.w	r5, [r4, #2137]	; 0x859
	HAL_TIM_Base_Stop_IT(audio->htim);
 8001088:	f005 fb7e 	bl	8006788 <HAL_TIM_Base_Stop_IT>
		audio->queue[i] = NULL;
 800108c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001090:	e9c4 5507 	strd	r5, r5, [r4, #28]
	audio->write_pos = 0;
 8001094:	f884 585b 	strb.w	r5, [r4, #2139]	; 0x85b
	audio->dac_flag = 0;
 8001098:	f8a4 5859 	strh.w	r5, [r4, #2137]	; 0x859
	audio->bytes_left = 0;
 800109c:	f8c4 5850 	str.w	r5, [r4, #2128]	; 0x850
}
 80010a0:	b002      	add	sp, #8
 80010a2:	bd70      	pop	{r4, r5, r6, pc}
		shutdown_dac(audio->ext_dac);
 80010a4:	6880      	ldr	r0, [r0, #8]
 80010a6:	f000 fa61 	bl	800156c <shutdown_dac>
	const TCHAR* filename = audio->queue[audio->read_pos];
 80010aa:	f894 385a 	ldrb.w	r3, [r4, #2138]	; 0x85a
 80010ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80010b2:	695e      	ldr	r6, [r3, #20]
	if (!filename) {
 80010b4:	2e00      	cmp	r6, #0
 80010b6:	d059      	beq.n	800116c <audio_callback+0x17c>
	f_open(audio->fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80010b8:	2213      	movs	r2, #19
 80010ba:	4631      	mov	r1, r6
 80010bc:	6860      	ldr	r0, [r4, #4]
 80010be:	f007 fe7b 	bl	8008db8 <f_open>
	f_read(audio->fil, &audio->wav_header, sizeof(WAV_Header), &count);
 80010c2:	466b      	mov	r3, sp
 80010c4:	222c      	movs	r2, #44	; 0x2c
 80010c6:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80010ca:	6860      	ldr	r0, [r4, #4]
 80010cc:	f007 fff0 	bl	80090b0 <f_read>
	audio->queue[audio->read_pos] = NULL;
 80010d0:	f894 385a 	ldrb.w	r3, [r4, #2138]	; 0x85a
	audio->bytes_left = audio->wav_header.file_size;
 80010d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 80010d6:	6860      	ldr	r0, [r4, #4]
	audio->queue[audio->read_pos] = NULL;
 80010d8:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 	audio->read_pos = (audio->read_pos + 1) % MAX_AUDIO_QUEUE_LEN;
 80010dc:	3301      	adds	r3, #1
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 80010de:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 	audio->read_pos = (audio->read_pos + 1) % MAX_AUDIO_QUEUE_LEN;
 80010e2:	f003 0303 	and.w	r3, r3, #3
	audio->queue[audio->read_pos] = NULL;
 80010e6:	614d      	str	r5, [r1, #20]
	audio->bytes_left = audio->wav_header.file_size;
 80010e8:	f8c4 2850 	str.w	r2, [r4, #2128]	; 0x850
 	audio->read_pos = (audio->read_pos + 1) % MAX_AUDIO_QUEUE_LEN;
 80010ec:	f884 385a 	strb.w	r3, [r4, #2138]	; 0x85a
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 80010f0:	bf28      	it	cs
 80010f2:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80010f6:	ab01      	add	r3, sp, #4
 80010f8:	f104 0150 	add.w	r1, r4, #80	; 0x50
 80010fc:	f007 ffd8 	bl	80090b0 <f_read>
	UINT bytes_to_read = audio->wav_header.file_size < AUDIO_BUF_LEN
 8001100:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (res != FR_OK || !bytes_read) {
 8001102:	b948      	cbnz	r0, 8001118 <audio_callback+0x128>
 8001104:	9b01      	ldr	r3, [sp, #4]
 8001106:	b13b      	cbz	r3, 8001118 <audio_callback+0x128>
	audio->dac_flag |= (1 << buf_bank);
 8001108:	f894 1859 	ldrb.w	r1, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 800110c:	1ad2      	subs	r2, r2, r3
	audio->dac_flag |= (1 << buf_bank);
 800110e:	f041 0301 	orr.w	r3, r1, #1
	audio->wav_header.file_size -= bytes_read;
 8001112:	62a2      	str	r2, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8001114:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
	res = f_read(audio->fil, audio->dac_buf[buf_bank], bytes_to_read, &bytes_read);
 8001118:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800111c:	bf28      	it	cs
 800111e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8001122:	6860      	ldr	r0, [r4, #4]
 8001124:	ab01      	add	r3, sp, #4
 8001126:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 800112a:	f007 ffc1 	bl	80090b0 <f_read>
	if (res != FR_OK || !bytes_read) {
 800112e:	b9d0      	cbnz	r0, 8001166 <audio_callback+0x176>
 8001130:	9a01      	ldr	r2, [sp, #4]
 8001132:	b1c2      	cbz	r2, 8001166 <audio_callback+0x176>
	audio->wav_header.file_size -= bytes_read;
 8001134:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8001136:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
	audio->wav_header.file_size -= bytes_read;
 800113a:	1a8a      	subs	r2, r1, r2
	audio->dac_flag |= (1 << buf_bank);
 800113c:	f043 0302 	orr.w	r3, r3, #2
	audio->wav_header.file_size -= bytes_read;
 8001140:	62a2      	str	r2, [r4, #40]	; 0x28
	audio->dac_flag |= (1 << buf_bank);
 8001142:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
	if (!is_playing(audio)) {
 8001146:	075b      	lsls	r3, r3, #29
 8001148:	f53f af75 	bmi.w	8001036 <audio_callback+0x46>
		HAL_GPIO_WritePin(audio->amp_enable_port, audio->amp_enable_pin, GPIO_PIN_SET);
 800114c:	f8b4 1856 	ldrh.w	r1, [r4, #2134]	; 0x856
 8001150:	6920      	ldr	r0, [r4, #16]
 8001152:	2201      	movs	r2, #1
 8001154:	f003 fa68 	bl	8004628 <HAL_GPIO_WritePin>
		audio->dac_flag |= (1 << 2);
 8001158:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
 8001164:	e767      	b.n	8001036 <audio_callback+0x46>
	return audio->dac_flag & (1 << 2);
 8001166:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
 800116a:	e7ec      	b.n	8001146 <audio_callback+0x156>
	HAL_TIM_Base_Stop_IT(audio->htim);
 800116c:	68e0      	ldr	r0, [r4, #12]
 800116e:	f005 fb0b 	bl	8006788 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(audio->amp_enable_port, audio->amp_enable_pin, GPIO_PIN_RESET);
 8001172:	f8b4 1856 	ldrh.w	r1, [r4, #2134]	; 0x856
 8001176:	6920      	ldr	r0, [r4, #16]
 8001178:	4632      	mov	r2, r6
 800117a:	f003 fa55 	bl	8004628 <HAL_GPIO_WritePin>
	shutdown_dac(audio->ext_dac);
 800117e:	68a0      	ldr	r0, [r4, #8]
 8001180:	f000 f9f4 	bl	800156c <shutdown_dac>
	f_close(audio->fil);
 8001184:	6860      	ldr	r0, [r4, #4]
 8001186:	f008 fa9d 	bl	80096c4 <f_close>
	audio->dac_flag = 0;
 800118a:	f884 6859 	strb.w	r6, [r4, #2137]	; 0x859
		return;
 800118e:	e752      	b.n	8001036 <audio_callback+0x46>

08001190 <buttons_init>:
		write(btns, MPR121_RELEASETH_0 + 2 * i, release);
	}
}


void buttons_init(Buttons* btns) {
 8001190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	btns->status = 1;
 8001194:	2501      	movs	r5, #1
void buttons_init(Buttons* btns) {
 8001196:	b087      	sub	sp, #28

	for (uint8_t i = 0; i < NUM_BTNS; ++i) {
		btns->btns_state[i] = 0;
 8001198:	2600      	movs	r6, #0
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 800119a:	f04f 0864 	mov.w	r8, #100	; 0x64
		btns->btns_state[i] = 0;
 800119e:	6046      	str	r6, [r0, #4]
	btns->status = 1;
 80011a0:	7205      	strb	r5, [r0, #8]
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 80011a2:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80011a6:	f10d 0717 	add.w	r7, sp, #23
 80011aa:	2363      	movs	r3, #99	; 0x63
 80011ac:	9700      	str	r7, [sp, #0]
void buttons_init(Buttons* btns) {
 80011ae:	4604      	mov	r4, r0
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	21b4      	movs	r1, #180	; 0xb4
 80011b4:	f88d 3017 	strb.w	r3, [sp, #23]
 80011b8:	6800      	ldr	r0, [r0, #0]
 80011ba:	462b      	mov	r3, r5
 80011bc:	f004 f958 	bl	8005470 <HAL_I2C_Mem_Write>
 80011c0:	7a23      	ldrb	r3, [r4, #8]
 80011c2:	42b0      	cmp	r0, r6
 80011c4:	bf14      	ite	ne
 80011c6:	2300      	movne	r3, #0
 80011c8:	f003 0301 	andeq.w	r3, r3, #1
 80011cc:	7223      	strb	r3, [r4, #8]
	}
	write(btns, MPR121_SOFTRESET, 0x63);
	HAL_Delay(1);
 80011ce:	4628      	mov	r0, r5
 80011d0:	f002 fc3e 	bl	8003a50 <HAL_Delay>
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 80011d4:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80011d8:	9700      	str	r7, [sp, #0]
 80011da:	462b      	mov	r3, r5
 80011dc:	6820      	ldr	r0, [r4, #0]
 80011de:	f88d 6017 	strb.w	r6, [sp, #23]
 80011e2:	225e      	movs	r2, #94	; 0x5e
 80011e4:	21b4      	movs	r1, #180	; 0xb4
 80011e6:	f004 f943 	bl	8005470 <HAL_I2C_Mem_Write>
 80011ea:	7a23      	ldrb	r3, [r4, #8]
 80011ec:	42b0      	cmp	r0, r6
 80011ee:	bf14      	ite	ne
 80011f0:	2300      	movne	r3, #0
 80011f2:	f003 0301 	andeq.w	r3, r3, #1
 80011f6:	7223      	strb	r3, [r4, #8]

	write(btns, MPR121_ECR, 0x00);
 80011f8:	2641      	movs	r6, #65	; 0x41
 80011fa:	f04f 0930 	mov.w	r9, #48	; 0x30
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 80011fe:	2501      	movs	r5, #1
 8001200:	6820      	ldr	r0, [r4, #0]
 8001202:	9700      	str	r7, [sp, #0]
 8001204:	4632      	mov	r2, r6
 8001206:	462b      	mov	r3, r5
 8001208:	21b4      	movs	r1, #180	; 0xb4
 800120a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800120e:	f88d 9017 	strb.w	r9, [sp, #23]
 8001212:	f004 f92d 	bl	8005470 <HAL_I2C_Mem_Write>
 8001216:	7a23      	ldrb	r3, [r4, #8]
 8001218:	1972      	adds	r2, r6, r5
 800121a:	2800      	cmp	r0, #0
 800121c:	bf14      	ite	ne
 800121e:	2300      	movne	r3, #0
 8001220:	f003 0301 	andeq.w	r3, r3, #1
 8001224:	7223      	strb	r3, [r4, #8]
 8001226:	6820      	ldr	r0, [r4, #0]
 8001228:	9700      	str	r7, [sp, #0]
 800122a:	f04f 0c0c 	mov.w	ip, #12
 800122e:	462b      	mov	r3, r5
 8001230:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8001234:	b292      	uxth	r2, r2
 8001236:	21b4      	movs	r1, #180	; 0xb4
 8001238:	f88d c017 	strb.w	ip, [sp, #23]
 800123c:	f004 f918 	bl	8005470 <HAL_I2C_Mem_Write>
	for (uint8_t i = 0; i < 12; i++) {
 8001240:	3602      	adds	r6, #2
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 8001242:	7a23      	ldrb	r3, [r4, #8]
	for (uint8_t i = 0; i < 12; i++) {
 8001244:	b2b6      	uxth	r6, r6
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 8001246:	2800      	cmp	r0, #0
 8001248:	bf14      	ite	ne
 800124a:	2300      	movne	r3, #0
 800124c:	f003 0301 	andeq.w	r3, r3, #1
	for (uint8_t i = 0; i < 12; i++) {
 8001250:	2e59      	cmp	r6, #89	; 0x59
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 8001252:	7223      	strb	r3, [r4, #8]
	for (uint8_t i = 0; i < 12; i++) {
 8001254:	d1d3      	bne.n	80011fe <buttons_init+0x6e>
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 8001256:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800125a:	9700      	str	r7, [sp, #0]
 800125c:	462b      	mov	r3, r5
 800125e:	6820      	ldr	r0, [r4, #0]
 8001260:	f88d 5017 	strb.w	r5, [sp, #23]
 8001264:	222b      	movs	r2, #43	; 0x2b
 8001266:	21b4      	movs	r1, #180	; 0xb4
 8001268:	f004 f902 	bl	8005470 <HAL_I2C_Mem_Write>
 800126c:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8001270:	9700      	str	r7, [sp, #0]
 8001272:	7a23      	ldrb	r3, [r4, #8]
 8001274:	f88d 5017 	strb.w	r5, [sp, #23]
 8001278:	2800      	cmp	r0, #0
 800127a:	bf14      	ite	ne
 800127c:	2300      	movne	r3, #0
 800127e:	f003 0301 	andeq.w	r3, r3, #1
 8001282:	7223      	strb	r3, [r4, #8]
 8001284:	6820      	ldr	r0, [r4, #0]
 8001286:	462b      	mov	r3, r5
 8001288:	222c      	movs	r2, #44	; 0x2c
 800128a:	21b4      	movs	r1, #180	; 0xb4
 800128c:	f004 f8f0 	bl	8005470 <HAL_I2C_Mem_Write>
 8001290:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8001294:	9700      	str	r7, [sp, #0]
 8001296:	7a23      	ldrb	r3, [r4, #8]
 8001298:	2800      	cmp	r0, #0
 800129a:	bf14      	ite	ne
 800129c:	2300      	movne	r3, #0
 800129e:	f003 0301 	andeq.w	r3, r3, #1
 80012a2:	7223      	strb	r3, [r4, #8]
	set_thresholds(btns, MPR121_TOUCH_THRESHOLD, MPR121_RELEASE_THRESHOLD);
	write(btns, MPR121_MHDR, 0x01);
	write(btns, MPR121_NHDR, 0x01);
	write(btns, MPR121_NCLR, 0x0E);
 80012a4:	230e      	movs	r3, #14
 80012a6:	f88d 3017 	strb.w	r3, [sp, #23]
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 80012aa:	6820      	ldr	r0, [r4, #0]
 80012ac:	462b      	mov	r3, r5
 80012ae:	222d      	movs	r2, #45	; 0x2d
 80012b0:	21b4      	movs	r1, #180	; 0xb4
 80012b2:	f004 f8dd 	bl	8005470 <HAL_I2C_Mem_Write>
 80012b6:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80012ba:	9700      	str	r7, [sp, #0]
 80012bc:	7a23      	ldrb	r3, [r4, #8]
 80012be:	2800      	cmp	r0, #0
 80012c0:	bf14      	ite	ne
 80012c2:	2300      	movne	r3, #0
 80012c4:	f003 0301 	andeq.w	r3, r3, #1
 80012c8:	2600      	movs	r6, #0
 80012ca:	7223      	strb	r3, [r4, #8]
 80012cc:	6820      	ldr	r0, [r4, #0]
 80012ce:	f88d 6017 	strb.w	r6, [sp, #23]
 80012d2:	462b      	mov	r3, r5
 80012d4:	222e      	movs	r2, #46	; 0x2e
 80012d6:	21b4      	movs	r1, #180	; 0xb4
 80012d8:	f004 f8ca 	bl	8005470 <HAL_I2C_Mem_Write>
 80012dc:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80012e0:	9700      	str	r7, [sp, #0]
 80012e2:	7a23      	ldrb	r3, [r4, #8]
 80012e4:	f88d 5017 	strb.w	r5, [sp, #23]
 80012e8:	42b0      	cmp	r0, r6
 80012ea:	bf14      	ite	ne
 80012ec:	2300      	movne	r3, #0
 80012ee:	f003 0301 	andeq.w	r3, r3, #1
 80012f2:	7223      	strb	r3, [r4, #8]
 80012f4:	6820      	ldr	r0, [r4, #0]
 80012f6:	462b      	mov	r3, r5
 80012f8:	222f      	movs	r2, #47	; 0x2f
 80012fa:	21b4      	movs	r1, #180	; 0xb4
 80012fc:	f004 f8b8 	bl	8005470 <HAL_I2C_Mem_Write>
 8001300:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8001304:	9700      	str	r7, [sp, #0]
 8001306:	7a23      	ldrb	r3, [r4, #8]
 8001308:	42b0      	cmp	r0, r6
 800130a:	bf14      	ite	ne
 800130c:	2300      	movne	r3, #0
 800130e:	f003 0301 	andeq.w	r3, r3, #1
 8001312:	f04f 0c05 	mov.w	ip, #5
 8001316:	7223      	strb	r3, [r4, #8]
 8001318:	6820      	ldr	r0, [r4, #0]
 800131a:	f88d c017 	strb.w	ip, [sp, #23]
 800131e:	462b      	mov	r3, r5
 8001320:	2230      	movs	r2, #48	; 0x30
 8001322:	21b4      	movs	r1, #180	; 0xb4
 8001324:	f004 f8a4 	bl	8005470 <HAL_I2C_Mem_Write>
 8001328:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800132c:	9700      	str	r7, [sp, #0]
 800132e:	7a23      	ldrb	r3, [r4, #8]
 8001330:	f88d 5017 	strb.w	r5, [sp, #23]
 8001334:	42b0      	cmp	r0, r6
 8001336:	bf14      	ite	ne
 8001338:	2300      	movne	r3, #0
 800133a:	f003 0301 	andeq.w	r3, r3, #1
 800133e:	7223      	strb	r3, [r4, #8]
 8001340:	6820      	ldr	r0, [r4, #0]
 8001342:	462b      	mov	r3, r5
 8001344:	2231      	movs	r2, #49	; 0x31
 8001346:	21b4      	movs	r1, #180	; 0xb4
 8001348:	f004 f892 	bl	8005470 <HAL_I2C_Mem_Write>
 800134c:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8001350:	9700      	str	r7, [sp, #0]
 8001352:	7a23      	ldrb	r3, [r4, #8]
 8001354:	f88d 6017 	strb.w	r6, [sp, #23]
 8001358:	42b0      	cmp	r0, r6
 800135a:	bf14      	ite	ne
 800135c:	2300      	movne	r3, #0
 800135e:	f003 0301 	andeq.w	r3, r3, #1
 8001362:	7223      	strb	r3, [r4, #8]
 8001364:	6820      	ldr	r0, [r4, #0]
 8001366:	462b      	mov	r3, r5
 8001368:	2232      	movs	r2, #50	; 0x32
 800136a:	21b4      	movs	r1, #180	; 0xb4
 800136c:	f004 f880 	bl	8005470 <HAL_I2C_Mem_Write>
 8001370:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8001374:	9700      	str	r7, [sp, #0]
 8001376:	7a23      	ldrb	r3, [r4, #8]
 8001378:	f88d 6017 	strb.w	r6, [sp, #23]
 800137c:	42b0      	cmp	r0, r6
 800137e:	bf14      	ite	ne
 8001380:	2300      	movne	r3, #0
 8001382:	f003 0301 	andeq.w	r3, r3, #1
 8001386:	7223      	strb	r3, [r4, #8]
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	462b      	mov	r3, r5
 800138c:	2233      	movs	r2, #51	; 0x33
 800138e:	21b4      	movs	r1, #180	; 0xb4
 8001390:	f004 f86e 	bl	8005470 <HAL_I2C_Mem_Write>
 8001394:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8001398:	9700      	str	r7, [sp, #0]
 800139a:	7a23      	ldrb	r3, [r4, #8]
 800139c:	f88d 6017 	strb.w	r6, [sp, #23]
 80013a0:	42b0      	cmp	r0, r6
 80013a2:	bf14      	ite	ne
 80013a4:	2300      	movne	r3, #0
 80013a6:	f003 0301 	andeq.w	r3, r3, #1
 80013aa:	7223      	strb	r3, [r4, #8]
 80013ac:	6820      	ldr	r0, [r4, #0]
 80013ae:	462b      	mov	r3, r5
 80013b0:	2234      	movs	r2, #52	; 0x34
 80013b2:	21b4      	movs	r1, #180	; 0xb4
 80013b4:	f004 f85c 	bl	8005470 <HAL_I2C_Mem_Write>
 80013b8:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80013bc:	9700      	str	r7, [sp, #0]
 80013be:	7a23      	ldrb	r3, [r4, #8]
 80013c0:	f88d 6017 	strb.w	r6, [sp, #23]
 80013c4:	42b0      	cmp	r0, r6
 80013c6:	bf14      	ite	ne
 80013c8:	2300      	movne	r3, #0
 80013ca:	f003 0301 	andeq.w	r3, r3, #1
 80013ce:	7223      	strb	r3, [r4, #8]
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	462b      	mov	r3, r5
 80013d4:	2235      	movs	r2, #53	; 0x35
 80013d6:	21b4      	movs	r1, #180	; 0xb4
 80013d8:	f004 f84a 	bl	8005470 <HAL_I2C_Mem_Write>
 80013dc:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80013e0:	9700      	str	r7, [sp, #0]
 80013e2:	7a23      	ldrb	r3, [r4, #8]
 80013e4:	42b0      	cmp	r0, r6
 80013e6:	bf14      	ite	ne
 80013e8:	2300      	movne	r3, #0
 80013ea:	f003 0301 	andeq.w	r3, r3, #1
 80013ee:	7223      	strb	r3, [r4, #8]
	write(btns, MPR121_FDLF, 0x00);
	write(btns, MPR121_NHDT, 0x00);
	write(btns, MPR121_NCLT, 0x00);
	write(btns, MPR121_FDLT, 0x00);

	write(btns, MPR121_DEBOUNCE, 0b01110111);
 80013f0:	2377      	movs	r3, #119	; 0x77
 80013f2:	f88d 3017 	strb.w	r3, [sp, #23]
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 80013f6:	6820      	ldr	r0, [r4, #0]
 80013f8:	462b      	mov	r3, r5
 80013fa:	225b      	movs	r2, #91	; 0x5b
 80013fc:	21b4      	movs	r1, #180	; 0xb4
 80013fe:	f004 f837 	bl	8005470 <HAL_I2C_Mem_Write>
 8001402:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8001406:	9700      	str	r7, [sp, #0]
 8001408:	7a23      	ldrb	r3, [r4, #8]
 800140a:	42b0      	cmp	r0, r6
 800140c:	bf14      	ite	ne
 800140e:	2300      	movne	r3, #0
 8001410:	f003 0301 	andeq.w	r3, r3, #1
 8001414:	7223      	strb	r3, [r4, #8]
	write(btns, MPR121_CONFIG1, 0x10); // default, 16uA charge current
 8001416:	2310      	movs	r3, #16
 8001418:	f88d 3017 	strb.w	r3, [sp, #23]
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 800141c:	6820      	ldr	r0, [r4, #0]
 800141e:	462b      	mov	r3, r5
 8001420:	225c      	movs	r2, #92	; 0x5c
 8001422:	21b4      	movs	r1, #180	; 0xb4
 8001424:	f004 f824 	bl	8005470 <HAL_I2C_Mem_Write>
 8001428:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800142c:	9700      	str	r7, [sp, #0]
 800142e:	7a23      	ldrb	r3, [r4, #8]
 8001430:	42b0      	cmp	r0, r6
 8001432:	bf14      	ite	ne
 8001434:	2300      	movne	r3, #0
 8001436:	f003 0301 	andeq.w	r3, r3, #1
 800143a:	7223      	strb	r3, [r4, #8]
	write(btns, MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 800143c:	2320      	movs	r3, #32
 800143e:	f88d 3017 	strb.w	r3, [sp, #23]
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 8001442:	6820      	ldr	r0, [r4, #0]
 8001444:	462b      	mov	r3, r5
 8001446:	225d      	movs	r2, #93	; 0x5d
 8001448:	21b4      	movs	r1, #180	; 0xb4
 800144a:	f004 f811 	bl	8005470 <HAL_I2C_Mem_Write>
 800144e:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8001452:	9700      	str	r7, [sp, #0]
 8001454:	7a23      	ldrb	r3, [r4, #8]
 8001456:	42b0      	cmp	r0, r6
 8001458:	bf14      	ite	ne
 800145a:	2300      	movne	r3, #0
 800145c:	f003 0301 	andeq.w	r3, r3, #1
 8001460:	7223      	strb	r3, [r4, #8]

	write(btns, MPR121_AUTOCONFIG0, 0x0B);
 8001462:	230b      	movs	r3, #11
 8001464:	f88d 3017 	strb.w	r3, [sp, #23]
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 8001468:	6820      	ldr	r0, [r4, #0]
 800146a:	462b      	mov	r3, r5
 800146c:	227b      	movs	r2, #123	; 0x7b
 800146e:	21b4      	movs	r1, #180	; 0xb4
 8001470:	f003 fffe 	bl	8005470 <HAL_I2C_Mem_Write>
 8001474:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8001478:	9700      	str	r7, [sp, #0]
 800147a:	7a23      	ldrb	r3, [r4, #8]
 800147c:	42b0      	cmp	r0, r6
 800147e:	bf14      	ite	ne
 8001480:	2300      	movne	r3, #0
 8001482:	f003 0301 	andeq.w	r3, r3, #1
 8001486:	7223      	strb	r3, [r4, #8]

	// correct values for Vdd = 3.3V
	write(btns, MPR121_UPLIMIT, 200);     // ((Vdd - 0.7)/Vdd) * 256
 8001488:	23c8      	movs	r3, #200	; 0xc8
 800148a:	f88d 3017 	strb.w	r3, [sp, #23]
	btns->status &= HAL_I2C_Mem_Write(btns->hi2c, MPR121_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, &pData, 1, 100) == HAL_OK;
 800148e:	6820      	ldr	r0, [r4, #0]
 8001490:	462b      	mov	r3, r5
 8001492:	227d      	movs	r2, #125	; 0x7d
 8001494:	21b4      	movs	r1, #180	; 0xb4
 8001496:	f003 ffeb 	bl	8005470 <HAL_I2C_Mem_Write>
 800149a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800149e:	9700      	str	r7, [sp, #0]
 80014a0:	7a23      	ldrb	r3, [r4, #8]
 80014a2:	42b0      	cmp	r0, r6
 80014a4:	bf14      	ite	ne
 80014a6:	2300      	movne	r3, #0
 80014a8:	f003 0301 	andeq.w	r3, r3, #1
 80014ac:	26b4      	movs	r6, #180	; 0xb4
 80014ae:	7223      	strb	r3, [r4, #8]
 80014b0:	4631      	mov	r1, r6
 80014b2:	462b      	mov	r3, r5
 80014b4:	6820      	ldr	r0, [r4, #0]
 80014b6:	f88d 6017 	strb.w	r6, [sp, #23]
 80014ba:	227f      	movs	r2, #127	; 0x7f
 80014bc:	f003 ffd8 	bl	8005470 <HAL_I2C_Mem_Write>
 80014c0:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80014c4:	9700      	str	r7, [sp, #0]
 80014c6:	7a23      	ldrb	r3, [r4, #8]
 80014c8:	2800      	cmp	r0, #0
 80014ca:	bf14      	ite	ne
 80014cc:	2300      	movne	r3, #0
 80014ce:	f003 0301 	andeq.w	r3, r3, #1
 80014d2:	f04f 0c82 	mov.w	ip, #130	; 0x82
 80014d6:	7223      	strb	r3, [r4, #8]
 80014d8:	4631      	mov	r1, r6
 80014da:	462b      	mov	r3, r5
 80014dc:	6820      	ldr	r0, [r4, #0]
 80014de:	f88d c017 	strb.w	ip, [sp, #23]
 80014e2:	227e      	movs	r2, #126	; 0x7e
 80014e4:	f003 ffc4 	bl	8005470 <HAL_I2C_Mem_Write>
 80014e8:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80014ec:	9700      	str	r7, [sp, #0]
 80014ee:	462b      	mov	r3, r5
 80014f0:	7a25      	ldrb	r5, [r4, #8]
 80014f2:	2800      	cmp	r0, #0
 80014f4:	bf14      	ite	ne
 80014f6:	2500      	movne	r5, #0
 80014f8:	f005 0501 	andeq.w	r5, r5, #1
 80014fc:	2084      	movs	r0, #132	; 0x84
 80014fe:	f88d 0017 	strb.w	r0, [sp, #23]
 8001502:	225e      	movs	r2, #94	; 0x5e
 8001504:	6820      	ldr	r0, [r4, #0]
 8001506:	7225      	strb	r5, [r4, #8]
 8001508:	4631      	mov	r1, r6
 800150a:	f003 ffb1 	bl	8005470 <HAL_I2C_Mem_Write>
 800150e:	7a23      	ldrb	r3, [r4, #8]
 8001510:	2800      	cmp	r0, #0
 8001512:	bf14      	ite	ne
 8001514:	2300      	movne	r3, #0
 8001516:	f003 0301 	andeq.w	r3, r3, #1
 800151a:	7223      	strb	r3, [r4, #8]
	write(btns, MPR121_ECR, ECR_SETTING); // start with above ECR setting

	if (!btns->status) {
		//printf("Capacitive touch init failed!\n\r");
	}
}
 800151c:	b007      	add	sp, #28
 800151e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001522:	bf00      	nop

08001524 <get_released_button>:

uint8_t get_released_button(Buttons* btns) {
 8001524:	b510      	push	{r4, lr}
 8001526:	b086      	sub	sp, #24
	uint8_t read;
	HAL_I2C_Mem_Read(btns->hi2c, MPR121_ADDR, MPR121_TOUCHSTATUS_L, I2C_MEMADD_SIZE_8BIT, &read, 1,
 8001528:	2401      	movs	r4, #1
 800152a:	2264      	movs	r2, #100	; 0x64
 800152c:	f10d 0317 	add.w	r3, sp, #23
 8001530:	6800      	ldr	r0, [r0, #0]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8001538:	4623      	mov	r3, r4
 800153a:	2200      	movs	r2, #0
 800153c:	21b4      	movs	r1, #180	; 0xb4
 800153e:	f004 f88b 	bl	8005658 <HAL_I2C_Mem_Read>
		100);

	for (uint8_t i = 0; i < NUM_BTNS; ++i) {
		if (read & (1 << i)) {
 8001542:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001546:	07da      	lsls	r2, r3, #31
 8001548:	d40a      	bmi.n	8001560 <get_released_button+0x3c>
 800154a:	0799      	lsls	r1, r3, #30
 800154c:	d40a      	bmi.n	8001564 <get_released_button+0x40>
 800154e:	075a      	lsls	r2, r3, #29
 8001550:	d40a      	bmi.n	8001568 <get_released_button+0x44>
	for (uint8_t i = 0; i < NUM_BTNS; ++i) {
 8001552:	f013 0f08 	tst.w	r3, #8
 8001556:	bf0c      	ite	eq
 8001558:	2004      	moveq	r0, #4
 800155a:	2003      	movne	r0, #3
			return i;
		}
	}

	return NO_BTN;
}
 800155c:	b006      	add	sp, #24
 800155e:	bd10      	pop	{r4, pc}
	for (uint8_t i = 0; i < NUM_BTNS; ++i) {
 8001560:	2000      	movs	r0, #0
 8001562:	e7fb      	b.n	800155c <get_released_button+0x38>
 8001564:	4620      	mov	r0, r4
 8001566:	e7f9      	b.n	800155c <get_released_button+0x38>
 8001568:	2002      	movs	r0, #2
 800156a:	e7f7      	b.n	800155c <get_released_button+0x38>

0800156c <shutdown_dac>:
	while (HAL_SPI_GetState(ext_dac->hspi) != HAL_SPI_STATE_READY) {}

	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_SET);
}

void shutdown_dac(Ext_DAC_t* ext_dac) {
 800156c:	b510      	push	{r4, lr}
 800156e:	4604      	mov	r4, r0
 8001570:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_RESET);
 8001572:	8901      	ldrh	r1, [r0, #8]
 8001574:	6840      	ldr	r0, [r0, #4]
 8001576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157a:	2200      	movs	r2, #0
 800157c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001580:	f003 f852 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ext_dac->hspi, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);
 8001584:	6820      	ldr	r0, [r4, #0]
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	2201      	movs	r2, #1
 800158c:	f10d 0106 	add.w	r1, sp, #6
 8001590:	f004 fda8 	bl	80060e4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(ext_dac->hspi) != HAL_SPI_STATE_READY) {}
 8001594:	6820      	ldr	r0, [r4, #0]
 8001596:	f005 f841 	bl	800661c <HAL_SPI_GetState>
 800159a:	2801      	cmp	r0, #1
 800159c:	4602      	mov	r2, r0
 800159e:	d1f9      	bne.n	8001594 <shutdown_dac+0x28>
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_SET);
 80015a0:	8921      	ldrh	r1, [r4, #8]
 80015a2:	6860      	ldr	r0, [r4, #4]
 80015a4:	f003 f840 	bl	8004628 <HAL_GPIO_WritePin>
	transmit_cmd(ext_dac, SHUTDOWN_CMD);
}
 80015a8:	b002      	add	sp, #8
 80015aa:	bd10      	pop	{r4, pc}

080015ac <write_to_dac>:

void write_to_dac(Ext_DAC_t* ext_dac, uint8_t val) {
 80015ac:	b510      	push	{r4, lr}
	return (0b111 << 12) | (uint16_t)(val) << 4;
 80015ae:	010b      	lsls	r3, r1, #4
void write_to_dac(Ext_DAC_t* ext_dac, uint8_t val) {
 80015b0:	b082      	sub	sp, #8
 80015b2:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_RESET);
 80015b4:	8901      	ldrh	r1, [r0, #8]
 80015b6:	6840      	ldr	r0, [r0, #4]
	return (0b111 << 12) | (uint16_t)(val) << 4;
 80015b8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f8ad 3006 	strh.w	r3, [sp, #6]
 80015c2:	f003 f831 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ext_dac->hspi, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);
 80015c6:	6820      	ldr	r0, [r4, #0]
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	2201      	movs	r2, #1
 80015ce:	f10d 0106 	add.w	r1, sp, #6
 80015d2:	f004 fd87 	bl	80060e4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(ext_dac->hspi) != HAL_SPI_STATE_READY) {}
 80015d6:	6820      	ldr	r0, [r4, #0]
 80015d8:	f005 f820 	bl	800661c <HAL_SPI_GetState>
 80015dc:	2801      	cmp	r0, #1
 80015de:	4602      	mov	r2, r0
 80015e0:	d1f9      	bne.n	80015d6 <write_to_dac+0x2a>
	HAL_GPIO_WritePin(ext_dac->cs_port, ext_dac->cs_pin, GPIO_PIN_SET);
 80015e2:	8921      	ldrh	r1, [r4, #8]
 80015e4:	6860      	ldr	r0, [r4, #4]
 80015e6:	f003 f81f 	bl	8004628 <HAL_GPIO_WritePin>
	transmit_cmd(ext_dac, val_to_dac(val));
}
 80015ea:	b002      	add	sp, #8
 80015ec:	bd10      	pop	{r4, pc}
 80015ee:	bf00      	nop

080015f0 <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void)
{
 80015f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80015f4:	4834      	ldr	r0, [pc, #208]	; (80016c8 <SD_PowerOn+0xd8>)
 80015f6:	4d35      	ldr	r5, [pc, #212]	; (80016cc <SD_PowerOn+0xdc>)
{
 80015f8:	b086      	sub	sp, #24
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2102      	movs	r1, #2
 80015fe:	f003 f813 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f002 fa24 	bl	8003a50 <HAL_Delay>
 8001608:	240a      	movs	r4, #10
 800160a:	26ff      	movs	r6, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800160c:	682a      	ldr	r2, [r5, #0]
 800160e:	f88d 600d 	strb.w	r6, [sp, #13]
 8001612:	6893      	ldr	r3, [r2, #8]
 8001614:	079f      	lsls	r7, r3, #30
 8001616:	d5fc      	bpl.n	8001612 <SD_PowerOn+0x22>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001618:	2364      	movs	r3, #100	; 0x64
 800161a:	2201      	movs	r2, #1
 800161c:	f10d 010d 	add.w	r1, sp, #13
 8001620:	4628      	mov	r0, r5
 8001622:	f004 fd5f 	bl	80060e4 <HAL_SPI_Transmit>
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
	for(int i = 0; i < 10; i++)
 8001626:	3c01      	subs	r4, #1
 8001628:	d1f0      	bne.n	800160c <SD_PowerOn+0x1c>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800162a:	4622      	mov	r2, r4
 800162c:	2102      	movs	r1, #2
 800162e:	4826      	ldr	r0, [pc, #152]	; (80016c8 <SD_PowerOn+0xd8>)
 8001630:	f002 fffa 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f002 fa0b 	bl	8003a50 <HAL_Delay>

	/* slave select */
	SELECT();

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800163a:	2140      	movs	r1, #64	; 0x40
	args[1] = 0;
	args[2] = 0;
	args[3] = 0;
	args[4] = 0;
 800163c:	f44f 4315 	mov.w	r3, #38144	; 0x9500
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001640:	682a      	ldr	r2, [r5, #0]
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001642:	9104      	str	r1, [sp, #16]
	args[4] = 0;
 8001644:	f8ad 3014 	strh.w	r3, [sp, #20]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001648:	6893      	ldr	r3, [r2, #8]
 800164a:	0798      	lsls	r0, r3, #30
 800164c:	d5fc      	bpl.n	8001648 <SD_PowerOn+0x58>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800164e:	481f      	ldr	r0, [pc, #124]	; (80016cc <SD_PowerOn+0xdc>)
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001650:	4f1e      	ldr	r7, [pc, #120]	; (80016cc <SD_PowerOn+0xdc>)
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001652:	2364      	movs	r3, #100	; 0x64
 8001654:	2206      	movs	r2, #6
 8001656:	a904      	add	r1, sp, #16
 8001658:	f004 fd44 	bl	80060e4 <HAL_SPI_Transmit>
}
 800165c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	dummy = 0xFF;
 8001660:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001664:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001666:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001668:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800166c:	6893      	ldr	r3, [r2, #8]
 800166e:	0799      	lsls	r1, r3, #30
 8001670:	d5fc      	bpl.n	800166c <SD_PowerOn+0x7c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001672:	2301      	movs	r3, #1
 8001674:	9600      	str	r6, [sp, #0]
 8001676:	f10d 020f 	add.w	r2, sp, #15
 800167a:	f10d 010e 	add.w	r1, sp, #14
 800167e:	4638      	mov	r0, r7
 8001680:	f004 fe82 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001684:	f89d 300f 	ldrb.w	r3, [sp, #15]
	args[5] = 0x95;		/* CRC */

	SPI_TxBuffer(args, sizeof(args));

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001688:	2b01      	cmp	r3, #1
 800168a:	d001      	beq.n	8001690 <SD_PowerOn+0xa0>
 800168c:	3c01      	subs	r4, #1
 800168e:	d1ea      	bne.n	8001666 <SD_PowerOn+0x76>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001690:	2201      	movs	r2, #1
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <SD_PowerOn+0xd8>)
 8001694:	2102      	movs	r1, #2
 8001696:	f002 ffc7 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800169a:	2001      	movs	r0, #1
 800169c:	f002 f9d8 	bl	8003a50 <HAL_Delay>
static void SPI_TxByte(uint8_t data)
 80016a0:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80016a2:	682a      	ldr	r2, [r5, #0]
 80016a4:	f88d 300f 	strb.w	r3, [sp, #15]
 80016a8:	6893      	ldr	r3, [r2, #8]
 80016aa:	079b      	lsls	r3, r3, #30
 80016ac:	d5fc      	bpl.n	80016a8 <SD_PowerOn+0xb8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80016ae:	2364      	movs	r3, #100	; 0x64
 80016b0:	2201      	movs	r2, #1
 80016b2:	f10d 010f 	add.w	r1, sp, #15
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <SD_PowerOn+0xdc>)
 80016b8:	f004 fd14 	bl	80060e4 <HAL_SPI_Transmit>
	}

	DESELECT();
	SPI_TxByte(0XFF);

	PowerFlag = 1;
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SD_PowerOn+0xe0>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
}
 80016c2:	b006      	add	sp, #24
 80016c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016c8:	40020800 	.word	0x40020800
 80016cc:	20003da4 	.word	0x20003da4
 80016d0:	20000215 	.word	0x20000215

080016d4 <SD_RxDataBlock>:
	return PowerFlag;
}

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80016d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80016d8:	4e33      	ldr	r6, [pc, #204]	; (80017a8 <SD_RxDataBlock+0xd4>)
 80016da:	4c34      	ldr	r4, [pc, #208]	; (80017ac <SD_RxDataBlock+0xd8>)
 80016dc:	23c8      	movs	r3, #200	; 0xc8
{
 80016de:	b085      	sub	sp, #20
 80016e0:	4605      	mov	r5, r0
 80016e2:	4689      	mov	r9, r1
	Timer1 = 200;
 80016e4:	8033      	strh	r3, [r6, #0]
	dummy = 0xFF;
 80016e6:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80016ea:	2764      	movs	r7, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80016ec:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80016ee:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80016f2:	6893      	ldr	r3, [r2, #8]
 80016f4:	079b      	lsls	r3, r3, #30
 80016f6:	d5fc      	bpl.n	80016f2 <SD_RxDataBlock+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80016f8:	2301      	movs	r3, #1
 80016fa:	9700      	str	r7, [sp, #0]
 80016fc:	f10d 020f 	add.w	r2, sp, #15
 8001700:	f10d 010e 	add.w	r1, sp, #14
 8001704:	4620      	mov	r0, r4
 8001706:	f004 fe3f 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 800170a:	f89d 300f 	ldrb.w	r3, [sp, #15]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
	} while((token == 0xFF) && Timer1);
 800170e:	2bff      	cmp	r3, #255	; 0xff
 8001710:	d105      	bne.n	800171e <SD_RxDataBlock+0x4a>
 8001712:	8830      	ldrh	r0, [r6, #0]
 8001714:	2800      	cmp	r0, #0
 8001716:	d1e9      	bne.n	80016ec <SD_RxDataBlock+0x18>
	/* discard CRC */
	SPI_RxByte();
	SPI_RxByte();

	return TRUE;
}
 8001718:	b005      	add	sp, #20
 800171a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 800171e:	2bfe      	cmp	r3, #254	; 0xfe
 8001720:	d140      	bne.n	80017a4 <SD_RxDataBlock+0xd0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001722:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80017ac <SD_RxDataBlock+0xd8>
 8001726:	44a9      	add	r9, r5
	dummy = 0xFF;
 8001728:	27ff      	movs	r7, #255	; 0xff
 800172a:	3d01      	subs	r5, #1
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800172c:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800172e:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8001730:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001734:	6893      	ldr	r3, [r2, #8]
 8001736:	0798      	lsls	r0, r3, #30
 8001738:	d5fc      	bpl.n	8001734 <SD_RxDataBlock+0x60>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800173a:	2301      	movs	r3, #1
 800173c:	9600      	str	r6, [sp, #0]
 800173e:	f10d 020f 	add.w	r2, sp, #15
 8001742:	f10d 010e 	add.w	r1, sp, #14
 8001746:	4640      	mov	r0, r8
 8001748:	f004 fe1e 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 800174c:	f89d 300f 	ldrb.w	r3, [sp, #15]
	*buff = SPI_RxByte();
 8001750:	f805 3f01 	strb.w	r3, [r5, #1]!
	} while(len--);
 8001754:	45a9      	cmp	r9, r5
 8001756:	d1ea      	bne.n	800172e <SD_RxDataBlock+0x5a>
	dummy = 0xFF;
 8001758:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800175a:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800175c:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001760:	6893      	ldr	r3, [r2, #8]
 8001762:	0799      	lsls	r1, r3, #30
 8001764:	d5fc      	bpl.n	8001760 <SD_RxDataBlock+0x8c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001766:	2364      	movs	r3, #100	; 0x64
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	f10d 020f 	add.w	r2, sp, #15
 800176e:	2301      	movs	r3, #1
 8001770:	480e      	ldr	r0, [pc, #56]	; (80017ac <SD_RxDataBlock+0xd8>)
 8001772:	f10d 010e 	add.w	r1, sp, #14
 8001776:	f004 fe07 	bl	8006388 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 800177a:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800177c:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 800177e:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001782:	6893      	ldr	r3, [r2, #8]
 8001784:	079b      	lsls	r3, r3, #30
 8001786:	d5fc      	bpl.n	8001782 <SD_RxDataBlock+0xae>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	f10d 020f 	add.w	r2, sp, #15
 8001790:	2301      	movs	r3, #1
 8001792:	f10d 010e 	add.w	r1, sp, #14
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <SD_RxDataBlock+0xd8>)
 8001798:	f004 fdf6 	bl	8006388 <HAL_SPI_TransmitReceive>
	return TRUE;
 800179c:	2001      	movs	r0, #1
}
 800179e:	b005      	add	sp, #20
 80017a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(token != 0xFE) return FALSE;
 80017a4:	2000      	movs	r0, #0
 80017a6:	e7b7      	b.n	8001718 <SD_RxDataBlock+0x44>
 80017a8:	20000216 	.word	0x20000216
 80017ac:	20003da4 	.word	0x20003da4

080017b0 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80017b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Timer2 = 500;
 80017b4:	4d5b      	ldr	r5, [pc, #364]	; (8001924 <SD_SendCmd+0x174>)
 80017b6:	4c5c      	ldr	r4, [pc, #368]	; (8001928 <SD_SendCmd+0x178>)
 80017b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 80017bc:	b085      	sub	sp, #20
 80017be:	4681      	mov	r9, r0
 80017c0:	4688      	mov	r8, r1
	Timer2 = 500;
 80017c2:	802b      	strh	r3, [r5, #0]
	dummy = 0xFF;
 80017c4:	27ff      	movs	r7, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80017c6:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017c8:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80017ca:	f88d 700e 	strb.w	r7, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017ce:	6893      	ldr	r3, [r2, #8]
 80017d0:	0798      	lsls	r0, r3, #30
 80017d2:	d5fc      	bpl.n	80017ce <SD_SendCmd+0x1e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80017d4:	2301      	movs	r3, #1
 80017d6:	9600      	str	r6, [sp, #0]
 80017d8:	f10d 020f 	add.w	r2, sp, #15
 80017dc:	f10d 010e 	add.w	r1, sp, #14
 80017e0:	4620      	mov	r0, r4
 80017e2:	f004 fdd1 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 80017e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while ((res != 0xFF) && Timer2);
 80017ea:	2bff      	cmp	r3, #255	; 0xff
 80017ec:	d006      	beq.n	80017fc <SD_SendCmd+0x4c>
 80017ee:	882b      	ldrh	r3, [r5, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e9      	bne.n	80017c8 <SD_SendCmd+0x18>
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80017f4:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 80017f6:	b005      	add	sp, #20
 80017f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017fc:	6822      	ldr	r2, [r4, #0]
 80017fe:	f88d 900f 	strb.w	r9, [sp, #15]
 8001802:	6893      	ldr	r3, [r2, #8]
 8001804:	0799      	lsls	r1, r3, #30
 8001806:	d5fc      	bpl.n	8001802 <SD_SendCmd+0x52>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001808:	2364      	movs	r3, #100	; 0x64
 800180a:	2201      	movs	r2, #1
 800180c:	4846      	ldr	r0, [pc, #280]	; (8001928 <SD_SendCmd+0x178>)
 800180e:	f10d 010f 	add.w	r1, sp, #15
 8001812:	f004 fc67 	bl	80060e4 <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001816:	ea4f 6318 	mov.w	r3, r8, lsr #24
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800181a:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800181c:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001820:	6893      	ldr	r3, [r2, #8]
 8001822:	079b      	lsls	r3, r3, #30
 8001824:	d5fc      	bpl.n	8001820 <SD_SendCmd+0x70>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001826:	2364      	movs	r3, #100	; 0x64
 8001828:	2201      	movs	r2, #1
 800182a:	483f      	ldr	r0, [pc, #252]	; (8001928 <SD_SendCmd+0x178>)
 800182c:	f10d 010f 	add.w	r1, sp, #15
 8001830:	f004 fc58 	bl	80060e4 <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001834:	ea4f 4318 	mov.w	r3, r8, lsr #16
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001838:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800183a:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800183e:	6893      	ldr	r3, [r2, #8]
 8001840:	079f      	lsls	r7, r3, #30
 8001842:	d5fc      	bpl.n	800183e <SD_SendCmd+0x8e>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	2201      	movs	r2, #1
 8001848:	4837      	ldr	r0, [pc, #220]	; (8001928 <SD_SendCmd+0x178>)
 800184a:	f10d 010f 	add.w	r1, sp, #15
 800184e:	f004 fc49 	bl	80060e4 <HAL_SPI_Transmit>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001852:	ea4f 2318 	mov.w	r3, r8, lsr #8
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001856:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001858:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800185c:	6893      	ldr	r3, [r2, #8]
 800185e:	079e      	lsls	r6, r3, #30
 8001860:	d5fc      	bpl.n	800185c <SD_SendCmd+0xac>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001862:	2201      	movs	r2, #1
 8001864:	4830      	ldr	r0, [pc, #192]	; (8001928 <SD_SendCmd+0x178>)
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	f10d 010f 	add.w	r1, sp, #15
 800186c:	f004 fc3a 	bl	80060e4 <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001870:	6822      	ldr	r2, [r4, #0]
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001872:	f88d 800f 	strb.w	r8, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001876:	6893      	ldr	r3, [r2, #8]
 8001878:	079d      	lsls	r5, r3, #30
 800187a:	d5fc      	bpl.n	8001876 <SD_SendCmd+0xc6>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800187c:	482a      	ldr	r0, [pc, #168]	; (8001928 <SD_SendCmd+0x178>)
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	2201      	movs	r2, #1
 8001882:	f10d 010f 	add.w	r1, sp, #15
 8001886:	f004 fc2d 	bl	80060e4 <HAL_SPI_Transmit>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800188a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800188e:	d035      	beq.n	80018fc <SD_SendCmd+0x14c>
	else crc = 1;
 8001890:	f1b9 0f48 	cmp.w	r9, #72	; 0x48
 8001894:	bf0c      	ite	eq
 8001896:	2387      	moveq	r3, #135	; 0x87
 8001898:	2301      	movne	r3, #1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	f88d 300f 	strb.w	r3, [sp, #15]
 80018a0:	6893      	ldr	r3, [r2, #8]
 80018a2:	0798      	lsls	r0, r3, #30
 80018a4:	d5fc      	bpl.n	80018a0 <SD_SendCmd+0xf0>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80018a6:	4820      	ldr	r0, [pc, #128]	; (8001928 <SD_SendCmd+0x178>)
 80018a8:	2364      	movs	r3, #100	; 0x64
 80018aa:	2201      	movs	r2, #1
 80018ac:	f10d 010f 	add.w	r1, sp, #15
 80018b0:	f004 fc18 	bl	80060e4 <HAL_SPI_Transmit>
	if (cmd == CMD12) SPI_RxByte();
 80018b4:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
 80018b8:	d022      	beq.n	8001900 <SD_SendCmd+0x150>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80018ba:	4f1b      	ldr	r7, [pc, #108]	; (8001928 <SD_SendCmd+0x178>)
	else crc = 1;
 80018bc:	250a      	movs	r5, #10
	dummy = 0xFF;
 80018be:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80018c2:	2664      	movs	r6, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80018c4:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 80018c6:	f88d 800e 	strb.w	r8, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80018ca:	6893      	ldr	r3, [r2, #8]
 80018cc:	079b      	lsls	r3, r3, #30
 80018ce:	d5fc      	bpl.n	80018ca <SD_SendCmd+0x11a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80018d0:	2301      	movs	r3, #1
 80018d2:	9600      	str	r6, [sp, #0]
 80018d4:	f10d 020f 	add.w	r2, sp, #15
 80018d8:	f10d 010e 	add.w	r1, sp, #14
 80018dc:	4638      	mov	r0, r7
 80018de:	f004 fd53 	bl	8006388 <HAL_SPI_TransmitReceive>
	} while ((res & 0x80) && --n);
 80018e2:	f99d 300f 	ldrsb.w	r3, [sp, #15]
	return data;
 80018e6:	f89d 000f 	ldrb.w	r0, [sp, #15]
	} while ((res & 0x80) && --n);
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da83      	bge.n	80017f6 <SD_SendCmd+0x46>
 80018ee:	1e6b      	subs	r3, r5, #1
 80018f0:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 80018f4:	d1e6      	bne.n	80018c4 <SD_SendCmd+0x114>
}
 80018f6:	b005      	add	sp, #20
 80018f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80018fc:	2395      	movs	r3, #149	; 0x95
 80018fe:	e7cc      	b.n	800189a <SD_SendCmd+0xea>
	dummy = 0xFF;
 8001900:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001902:	6822      	ldr	r2, [r4, #0]
	dummy = 0xFF;
 8001904:	f88d 300e 	strb.w	r3, [sp, #14]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001908:	6893      	ldr	r3, [r2, #8]
 800190a:	0799      	lsls	r1, r3, #30
 800190c:	d5fc      	bpl.n	8001908 <SD_SendCmd+0x158>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800190e:	2364      	movs	r3, #100	; 0x64
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	f10d 020f 	add.w	r2, sp, #15
 8001916:	2301      	movs	r3, #1
 8001918:	f10d 010e 	add.w	r1, sp, #14
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <SD_SendCmd+0x178>)
 800191e:	f004 fd33 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001922:	e7ca      	b.n	80018ba <SD_SendCmd+0x10a>
 8001924:	20000218 	.word	0x20000218
 8001928:	20003da4 	.word	0x20003da4

0800192c <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800192c:	2800      	cmp	r0, #0
 800192e:	d145      	bne.n	80019bc <SD_disk_initialize+0x90>
{
 8001930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001934:	4d7f      	ldr	r5, [pc, #508]	; (8001b34 <SD_disk_initialize+0x208>)
 8001936:	782c      	ldrb	r4, [r5, #0]
 8001938:	f014 0402 	ands.w	r4, r4, #2
{
 800193c:	b087      	sub	sp, #28
	if(Stat & STA_NODISK) return Stat;
 800193e:	d004      	beq.n	800194a <SD_disk_initialize+0x1e>
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 8001940:	7828      	ldrb	r0, [r5, #0]
 8001942:	b2c0      	uxtb	r0, r0
}
 8001944:	b007      	add	sp, #28
 8001946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SD_PowerOn();
 800194a:	f7ff fe51 	bl	80015f0 <SD_PowerOn>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800194e:	4622      	mov	r2, r4
 8001950:	2102      	movs	r1, #2
 8001952:	4879      	ldr	r0, [pc, #484]	; (8001b38 <SD_disk_initialize+0x20c>)
 8001954:	f002 fe68 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001958:	2001      	movs	r0, #1
 800195a:	f002 f879 	bl	8003a50 <HAL_Delay>
	if (SD_SendCmd(CMD0, 0) == 1)
 800195e:	4621      	mov	r1, r4
 8001960:	2040      	movs	r0, #64	; 0x40
 8001962:	f7ff ff25 	bl	80017b0 <SD_SendCmd>
 8001966:	2801      	cmp	r0, #1
 8001968:	4607      	mov	r7, r0
 800196a:	d030      	beq.n	80019ce <SD_disk_initialize+0xa2>
 800196c:	4e73      	ldr	r6, [pc, #460]	; (8001b3c <SD_disk_initialize+0x210>)
 800196e:	f10d 0813 	add.w	r8, sp, #19
 8001972:	f10d 0712 	add.w	r7, sp, #18
	CardType = type;
 8001976:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <SD_disk_initialize+0x214>)
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001978:	486f      	ldr	r0, [pc, #444]	; (8001b38 <SD_disk_initialize+0x20c>)
	CardType = type;
 800197a:	701c      	strb	r4, [r3, #0]
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	2102      	movs	r1, #2
 8001980:	f002 fe52 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001984:	2001      	movs	r0, #1
 8001986:	f002 f863 	bl	8003a50 <HAL_Delay>
	dummy = 0xFF;
 800198a:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800198c:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 800198e:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001992:	6893      	ldr	r3, [r2, #8]
 8001994:	079b      	lsls	r3, r3, #30
 8001996:	d5fc      	bpl.n	8001992 <SD_disk_initialize+0x66>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001998:	2364      	movs	r3, #100	; 0x64
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	4867      	ldr	r0, [pc, #412]	; (8001b3c <SD_disk_initialize+0x210>)
 800199e:	2301      	movs	r3, #1
 80019a0:	4642      	mov	r2, r8
 80019a2:	4639      	mov	r1, r7
 80019a4:	f004 fcf0 	bl	8006388 <HAL_SPI_TransmitReceive>
	if (type)
 80019a8:	b154      	cbz	r4, 80019c0 <SD_disk_initialize+0x94>
		Stat &= ~STA_NOINIT;
 80019aa:	782b      	ldrb	r3, [r5, #0]
 80019ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80019b0:	702b      	strb	r3, [r5, #0]
	return Stat;
 80019b2:	7828      	ldrb	r0, [r5, #0]
 80019b4:	b2c0      	uxtb	r0, r0
}
 80019b6:	b007      	add	sp, #28
 80019b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(drv) return STA_NOINIT;
 80019bc:	2001      	movs	r0, #1
}
 80019be:	4770      	bx	lr
	return Stat;
 80019c0:	7828      	ldrb	r0, [r5, #0]
	PowerFlag = 0;
 80019c2:	4b60      	ldr	r3, [pc, #384]	; (8001b44 <SD_disk_initialize+0x218>)
	return Stat;
 80019c4:	b2c0      	uxtb	r0, r0
	PowerFlag = 0;
 80019c6:	701c      	strb	r4, [r3, #0]
}
 80019c8:	b007      	add	sp, #28
 80019ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Timer1 = 1000;
 80019ce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8001b48 <SD_disk_initialize+0x21c>
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80019d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80019da:	2048      	movs	r0, #72	; 0x48
		Timer1 = 1000;
 80019dc:	f8a9 3000 	strh.w	r3, [r9]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80019e0:	f7ff fee6 	bl	80017b0 <SD_SendCmd>
 80019e4:	2801      	cmp	r0, #1
 80019e6:	d167      	bne.n	8001ab8 <SD_disk_initialize+0x18c>
 80019e8:	4e54      	ldr	r6, [pc, #336]	; (8001b3c <SD_disk_initialize+0x210>)
 80019ea:	ab05      	add	r3, sp, #20
 80019ec:	9303      	str	r3, [sp, #12]
 80019ee:	469a      	mov	sl, r3
 80019f0:	f10d 0813 	add.w	r8, sp, #19
 80019f4:	f10d 0712 	add.w	r7, sp, #18
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80019f8:	46b3      	mov	fp, r6
	dummy = 0xFF;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019fe:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001a00:	f88d 3012 	strb.w	r3, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a04:	6893      	ldr	r3, [r2, #8]
 8001a06:	0799      	lsls	r1, r3, #30
 8001a08:	d5fc      	bpl.n	8001a04 <SD_disk_initialize+0xd8>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a0a:	2364      	movs	r3, #100	; 0x64
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	4642      	mov	r2, r8
 8001a10:	2301      	movs	r3, #1
 8001a12:	4639      	mov	r1, r7
 8001a14:	4658      	mov	r0, fp
 8001a16:	f004 fcb7 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001a1a:	f89d 3013 	ldrb.w	r3, [sp, #19]
				ocr[n] = SPI_RxByte();
 8001a1e:	f80a 3b01 	strb.w	r3, [sl], #1
			for (n = 0; n < 4; n++)
 8001a22:	ab06      	add	r3, sp, #24
 8001a24:	459a      	cmp	sl, r3
 8001a26:	d1e8      	bne.n	80019fa <SD_disk_initialize+0xce>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001a28:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d1a2      	bne.n	8001976 <SD_disk_initialize+0x4a>
 8001a30:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001a34:	2baa      	cmp	r3, #170	; 0xaa
 8001a36:	d19e      	bne.n	8001976 <SD_disk_initialize+0x4a>
 8001a38:	e003      	b.n	8001a42 <SD_disk_initialize+0x116>
				} while (Timer1);
 8001a3a:	f8b9 3000 	ldrh.w	r3, [r9]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d099      	beq.n	8001976 <SD_disk_initialize+0x4a>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001a42:	2100      	movs	r1, #0
 8001a44:	2077      	movs	r0, #119	; 0x77
 8001a46:	f7ff feb3 	bl	80017b0 <SD_SendCmd>
 8001a4a:	2801      	cmp	r0, #1
 8001a4c:	d8f5      	bhi.n	8001a3a <SD_disk_initialize+0x10e>
 8001a4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a52:	2069      	movs	r0, #105	; 0x69
 8001a54:	f7ff feac 	bl	80017b0 <SD_SendCmd>
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	d1ee      	bne.n	8001a3a <SD_disk_initialize+0x10e>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001a5c:	f8b9 3000 	ldrh.w	r3, [r9]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d088      	beq.n	8001976 <SD_disk_initialize+0x4a>
 8001a64:	4601      	mov	r1, r0
 8001a66:	207a      	movs	r0, #122	; 0x7a
 8001a68:	f7ff fea2 	bl	80017b0 <SD_SendCmd>
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d182      	bne.n	8001976 <SD_disk_initialize+0x4a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a70:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8001b3c <SD_disk_initialize+0x210>
 8001a74:	f8dd b00c 	ldr.w	fp, [sp, #12]
	dummy = 0xFF;
 8001a78:	24ff      	movs	r4, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a7a:	f04f 0a64 	mov.w	sl, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a7e:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8001a80:	f88d 4012 	strb.w	r4, [sp, #18]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a84:	6883      	ldr	r3, [r0, #8]
 8001a86:	079a      	lsls	r2, r3, #30
 8001a88:	d5fc      	bpl.n	8001a84 <SD_disk_initialize+0x158>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f8cd a000 	str.w	sl, [sp]
 8001a90:	4642      	mov	r2, r8
 8001a92:	4639      	mov	r1, r7
 8001a94:	4648      	mov	r0, r9
 8001a96:	f004 fc77 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001a9a:	f89d 3013 	ldrb.w	r3, [sp, #19]
						ocr[n] = SPI_RxByte();
 8001a9e:	f80b 3b01 	strb.w	r3, [fp], #1
					for (n = 0; n < 4; n++)
 8001aa2:	ab06      	add	r3, sp, #24
 8001aa4:	459b      	cmp	fp, r3
 8001aa6:	d1ea      	bne.n	8001a7e <SD_disk_initialize+0x152>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001aa8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001aac:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ab0:	bf14      	ite	ne
 8001ab2:	240c      	movne	r4, #12
 8001ab4:	2404      	moveq	r4, #4
 8001ab6:	e75e      	b.n	8001976 <SD_disk_initialize+0x4a>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001ab8:	4621      	mov	r1, r4
 8001aba:	2077      	movs	r0, #119	; 0x77
 8001abc:	f7ff fe78 	bl	80017b0 <SD_SendCmd>
 8001ac0:	2801      	cmp	r0, #1
 8001ac2:	d805      	bhi.n	8001ad0 <SD_disk_initialize+0x1a4>
 8001ac4:	e01c      	b.n	8001b00 <SD_disk_initialize+0x1d4>
			} while (Timer1);
 8001ac6:	f8b9 3000 	ldrh.w	r3, [r9]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f43f af4e 	beq.w	800196c <SD_disk_initialize+0x40>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2041      	movs	r0, #65	; 0x41
 8001ad4:	f7ff fe6c 	bl	80017b0 <SD_SendCmd>
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d1f4      	bne.n	8001ac6 <SD_disk_initialize+0x19a>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001adc:	f8b9 3000 	ldrh.w	r3, [r9]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f43f af43 	beq.w	800196c <SD_disk_initialize+0x40>
 8001ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aea:	2050      	movs	r0, #80	; 0x50
 8001aec:	f7ff fe60 	bl	80017b0 <SD_SendCmd>
 8001af0:	4e12      	ldr	r6, [pc, #72]	; (8001b3c <SD_disk_initialize+0x210>)
 8001af2:	b900      	cbnz	r0, 8001af6 <SD_disk_initialize+0x1ca>
 8001af4:	463c      	mov	r4, r7
 8001af6:	f10d 0813 	add.w	r8, sp, #19
 8001afa:	f10d 0712 	add.w	r7, sp, #18
 8001afe:	e73a      	b.n	8001976 <SD_disk_initialize+0x4a>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001b00:	4621      	mov	r1, r4
 8001b02:	2069      	movs	r0, #105	; 0x69
 8001b04:	f7ff fe54 	bl	80017b0 <SD_SendCmd>
 8001b08:	2801      	cmp	r0, #1
 8001b0a:	d8e1      	bhi.n	8001ad0 <SD_disk_initialize+0x1a4>
 8001b0c:	e004      	b.n	8001b18 <SD_disk_initialize+0x1ec>
			} while (Timer1);
 8001b0e:	f8b9 3000 	ldrh.w	r3, [r9]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f43f af2a 	beq.w	800196c <SD_disk_initialize+0x40>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2077      	movs	r0, #119	; 0x77
 8001b1c:	f7ff fe48 	bl	80017b0 <SD_SendCmd>
 8001b20:	2801      	cmp	r0, #1
 8001b22:	d8f4      	bhi.n	8001b0e <SD_disk_initialize+0x1e2>
 8001b24:	2100      	movs	r1, #0
 8001b26:	2069      	movs	r0, #105	; 0x69
 8001b28:	f7ff fe42 	bl	80017b0 <SD_SendCmd>
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	d1ee      	bne.n	8001b0e <SD_disk_initialize+0x1e2>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001b30:	2702      	movs	r7, #2
 8001b32:	e7d3      	b.n	8001adc <SD_disk_initialize+0x1b0>
 8001b34:	20000000 	.word	0x20000000
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	20003da4 	.word	0x20003da4
 8001b40:	20000214 	.word	0x20000214
 8001b44:	20000215 	.word	0x20000215
 8001b48:	20000216 	.word	0x20000216

08001b4c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
	if (drv) return STA_NOINIT;
 8001b4c:	b918      	cbnz	r0, 8001b56 <SD_disk_status+0xa>
	return Stat;
 8001b4e:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <SD_disk_status+0x10>)
 8001b50:	7818      	ldrb	r0, [r3, #0]
 8001b52:	b2c0      	uxtb	r0, r0
 8001b54:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 8001b56:	2001      	movs	r0, #1
}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000000 	.word	0x20000000

08001b60 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b64:	b089      	sub	sp, #36	; 0x24
 8001b66:	9303      	str	r3, [sp, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001b68:	2800      	cmp	r0, #0
 8001b6a:	d14e      	bne.n	8001c0a <SD_disk_read+0xaa>
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d04c      	beq.n	8001c0a <SD_disk_read+0xaa>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b70:	4b9b      	ldr	r3, [pc, #620]	; (8001de0 <SD_disk_read+0x280>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	07dc      	lsls	r4, r3, #31
 8001b76:	d46f      	bmi.n	8001c58 <SD_disk_read+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001b78:	4b9a      	ldr	r3, [pc, #616]	; (8001de4 <SD_disk_read+0x284>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	0758      	lsls	r0, r3, #29
 8001b7e:	4614      	mov	r4, r2
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001b80:	4899      	ldr	r0, [pc, #612]	; (8001de8 <SD_disk_read+0x288>)
	if (!(CardType & CT_SD2)) sector *= 512;
 8001b82:	bf58      	it	pl
 8001b84:	0254      	lslpl	r4, r2, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001b86:	468a      	mov	sl, r1
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	f002 fd4c 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f001 ff5d 	bl	8003a50 <HAL_Delay>

	SELECT();

	if (count == 1)
 8001b96:	9b03      	ldr	r3, [sp, #12]
 8001b98:	2b01      	cmp	r3, #1
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001b9a:	4621      	mov	r1, r4
	if (count == 1)
 8001b9c:	f000 80a9 	beq.w	8001cf2 <SD_disk_read+0x192>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001ba0:	2052      	movs	r0, #82	; 0x52
 8001ba2:	f7ff fe05 	bl	80017b0 <SD_SendCmd>
 8001ba6:	4e91      	ldr	r6, [pc, #580]	; (8001dec <SD_disk_read+0x28c>)
 8001ba8:	9004      	str	r0, [sp, #16]
 8001baa:	bba0      	cbnz	r0, 8001c16 <SD_disk_read+0xb6>
 8001bac:	f10d 051f 	add.w	r5, sp, #31
 8001bb0:	f10d 041e 	add.w	r4, sp, #30
 8001bb4:	f8df b238 	ldr.w	fp, [pc, #568]	; 8001df0 <SD_disk_read+0x290>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001bb8:	462a      	mov	r2, r5
	dummy = 0xFF;
 8001bba:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001bbe:	4637      	mov	r7, r6
 8001bc0:	4625      	mov	r5, r4
	Timer1 = 200;
 8001bc2:	f04f 03c8 	mov.w	r3, #200	; 0xc8
 8001bc6:	f8ab 3000 	strh.w	r3, [fp]
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001bca:	2464      	movs	r4, #100	; 0x64
 8001bcc:	4691      	mov	r9, r2
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001bce:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001bd0:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001bd4:	6893      	ldr	r3, [r2, #8]
 8001bd6:	0799      	lsls	r1, r3, #30
 8001bd8:	d5fc      	bpl.n	8001bd4 <SD_disk_read+0x74>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001bda:	2301      	movs	r3, #1
 8001bdc:	9400      	str	r4, [sp, #0]
 8001bde:	464a      	mov	r2, r9
 8001be0:	4629      	mov	r1, r5
 8001be2:	4638      	mov	r0, r7
 8001be4:	f004 fbd0 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001be8:	f89d 301f 	ldrb.w	r3, [sp, #31]
	} while((token == 0xFF) && Timer1);
 8001bec:	2bff      	cmp	r3, #255	; 0xff
 8001bee:	d139      	bne.n	8001c64 <SD_disk_read+0x104>
 8001bf0:	f8bb 3000 	ldrh.w	r3, [fp]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ea      	bne.n	8001bce <SD_disk_read+0x6e>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	462c      	mov	r4, r5
 8001bfc:	9304      	str	r3, [sp, #16]
 8001bfe:	464d      	mov	r5, r9
				if (!SD_RxDataBlock(buff, 512)) break;
				buff += 512;
			} while (--count);

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001c00:	2100      	movs	r1, #0
 8001c02:	204c      	movs	r0, #76	; 0x4c
 8001c04:	f7ff fdd4 	bl	80017b0 <SD_SendCmd>
 8001c08:	e00b      	b.n	8001c22 <SD_disk_read+0xc2>
	if (pdrv || !count) return RES_PARERR;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	9304      	str	r3, [sp, #16]
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 8001c0e:	9804      	ldr	r0, [sp, #16]
 8001c10:	b009      	add	sp, #36	; 0x24
 8001c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c16:	2301      	movs	r3, #1
 8001c18:	9304      	str	r3, [sp, #16]
 8001c1a:	f10d 051f 	add.w	r5, sp, #31
 8001c1e:	f10d 041e 	add.w	r4, sp, #30
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001c22:	2201      	movs	r2, #1
 8001c24:	4870      	ldr	r0, [pc, #448]	; (8001de8 <SD_disk_read+0x288>)
 8001c26:	2102      	movs	r1, #2
 8001c28:	f002 fcfe 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f001 ff0f 	bl	8003a50 <HAL_Delay>
	dummy = 0xFF;
 8001c32:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c34:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001c36:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c3a:	6893      	ldr	r3, [r2, #8]
 8001c3c:	079b      	lsls	r3, r3, #30
 8001c3e:	d5fc      	bpl.n	8001c3a <SD_disk_read+0xda>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c40:	2364      	movs	r3, #100	; 0x64
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	462a      	mov	r2, r5
 8001c46:	2301      	movs	r3, #1
 8001c48:	4621      	mov	r1, r4
 8001c4a:	4868      	ldr	r0, [pc, #416]	; (8001dec <SD_disk_read+0x28c>)
 8001c4c:	f004 fb9c 	bl	8006388 <HAL_SPI_TransmitReceive>
}
 8001c50:	9804      	ldr	r0, [sp, #16]
 8001c52:	b009      	add	sp, #36	; 0x24
 8001c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	9304      	str	r3, [sp, #16]
}
 8001c5c:	9804      	ldr	r0, [sp, #16]
 8001c5e:	b009      	add	sp, #36	; 0x24
 8001c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(token != 0xFE) return FALSE;
 8001c64:	2bfe      	cmp	r3, #254	; 0xfe
 8001c66:	464a      	mov	r2, r9
 8001c68:	d176      	bne.n	8001d58 <SD_disk_read+0x1f8>
 8001c6a:	f10a 39ff 	add.w	r9, sl, #4294967295
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c6e:	f8cd b014 	str.w	fp, [sp, #20]
 8001c72:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 8001c76:	2464      	movs	r4, #100	; 0x64
 8001c78:	4693      	mov	fp, r2
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c7a:	6831      	ldr	r1, [r6, #0]
	dummy = 0xFF;
 8001c7c:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c80:	688b      	ldr	r3, [r1, #8]
 8001c82:	079b      	lsls	r3, r3, #30
 8001c84:	d5fc      	bpl.n	8001c80 <SD_disk_read+0x120>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c86:	2301      	movs	r3, #1
 8001c88:	9400      	str	r4, [sp, #0]
 8001c8a:	465a      	mov	r2, fp
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	4638      	mov	r0, r7
 8001c90:	f004 fb7a 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001c94:	f89d 301f 	ldrb.w	r3, [sp, #31]
	*buff = SPI_RxByte();
 8001c98:	f809 3f01 	strb.w	r3, [r9, #1]!
	} while(len--);
 8001c9c:	45d1      	cmp	r9, sl
 8001c9e:	d1ec      	bne.n	8001c7a <SD_disk_read+0x11a>
	dummy = 0xFF;
 8001ca0:	465a      	mov	r2, fp
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ca2:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8001ca4:	f8dd b014 	ldr.w	fp, [sp, #20]
 8001ca8:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cac:	6883      	ldr	r3, [r0, #8]
 8001cae:	079c      	lsls	r4, r3, #30
 8001cb0:	d5fc      	bpl.n	8001cac <SD_disk_read+0x14c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001cb2:	2364      	movs	r3, #100	; 0x64
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	2301      	movs	r3, #1
 8001cba:	4638      	mov	r0, r7
 8001cbc:	9205      	str	r2, [sp, #20]
 8001cbe:	f004 fb63 	bl	8006388 <HAL_SPI_TransmitReceive>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cc2:	6830      	ldr	r0, [r6, #0]
 8001cc4:	9a05      	ldr	r2, [sp, #20]
	dummy = 0xFF;
 8001cc6:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cca:	6883      	ldr	r3, [r0, #8]
 8001ccc:	0799      	lsls	r1, r3, #30
 8001cce:	d5fc      	bpl.n	8001cca <SD_disk_read+0x16a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001cd0:	2364      	movs	r3, #100	; 0x64
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	4638      	mov	r0, r7
 8001cda:	9205      	str	r2, [sp, #20]
 8001cdc:	f004 fb54 	bl	8006388 <HAL_SPI_TransmitReceive>
			} while (--count);
 8001ce0:	9b03      	ldr	r3, [sp, #12]
 8001ce2:	9a05      	ldr	r2, [sp, #20]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	9303      	str	r3, [sp, #12]
 8001ce8:	f47f af6b 	bne.w	8001bc2 <SD_disk_read+0x62>
 8001cec:	462c      	mov	r4, r5
 8001cee:	4615      	mov	r5, r2
 8001cf0:	e786      	b.n	8001c00 <SD_disk_read+0xa0>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001cf2:	2051      	movs	r0, #81	; 0x51
 8001cf4:	f7ff fd5c 	bl	80017b0 <SD_SendCmd>
 8001cf8:	9004      	str	r0, [sp, #16]
 8001cfa:	b138      	cbz	r0, 8001d0c <SD_disk_read+0x1ac>
 8001cfc:	4e3b      	ldr	r6, [pc, #236]	; (8001dec <SD_disk_read+0x28c>)
 8001cfe:	f10d 051f 	add.w	r5, sp, #31
 8001d02:	f10d 041e 	add.w	r4, sp, #30
 8001d06:	2301      	movs	r3, #1
 8001d08:	9304      	str	r3, [sp, #16]
 8001d0a:	e78a      	b.n	8001c22 <SD_disk_read+0xc2>
	Timer1 = 200;
 8001d0c:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8001df0 <SD_disk_read+0x290>
 8001d10:	4e36      	ldr	r6, [pc, #216]	; (8001dec <SD_disk_read+0x28c>)
 8001d12:	23c8      	movs	r3, #200	; 0xc8
 8001d14:	f8ab 3000 	strh.w	r3, [fp]
 8001d18:	f10d 051f 	add.w	r5, sp, #31
 8001d1c:	f10d 041e 	add.w	r4, sp, #30
	dummy = 0xFF;
 8001d20:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d24:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d28:	4637      	mov	r7, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d2a:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8001d2c:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d30:	6893      	ldr	r3, [r2, #8]
 8001d32:	0799      	lsls	r1, r3, #30
 8001d34:	d5fc      	bpl.n	8001d30 <SD_disk_read+0x1d0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d36:	2301      	movs	r3, #1
 8001d38:	f8cd 9000 	str.w	r9, [sp]
 8001d3c:	462a      	mov	r2, r5
 8001d3e:	4621      	mov	r1, r4
 8001d40:	4638      	mov	r0, r7
 8001d42:	f004 fb21 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001d46:	f89d 301f 	ldrb.w	r3, [sp, #31]
	} while((token == 0xFF) && Timer1);
 8001d4a:	2bff      	cmp	r3, #255	; 0xff
 8001d4c:	d109      	bne.n	8001d62 <SD_disk_read+0x202>
 8001d4e:	f8bb 3000 	ldrh.w	r3, [fp]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1e9      	bne.n	8001d2a <SD_disk_read+0x1ca>
 8001d56:	e7d6      	b.n	8001d06 <SD_disk_read+0x1a6>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	462c      	mov	r4, r5
 8001d5c:	9304      	str	r3, [sp, #16]
 8001d5e:	464d      	mov	r5, r9
 8001d60:	e74e      	b.n	8001c00 <SD_disk_read+0xa0>
	if(token != 0xFE) return FALSE;
 8001d62:	2bfe      	cmp	r3, #254	; 0xfe
 8001d64:	d1cf      	bne.n	8001d06 <SD_disk_read+0x1a6>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d66:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001dec <SD_disk_read+0x28c>
 8001d6a:	f10a 37ff 	add.w	r7, sl, #4294967295
	dummy = 0xFF;
 8001d6e:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8001d72:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d76:	f04f 0b64 	mov.w	fp, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d7a:	6830      	ldr	r0, [r6, #0]
	dummy = 0xFF;
 8001d7c:	f88d 801e 	strb.w	r8, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d80:	6883      	ldr	r3, [r0, #8]
 8001d82:	079b      	lsls	r3, r3, #30
 8001d84:	d5fc      	bpl.n	8001d80 <SD_disk_read+0x220>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d86:	2301      	movs	r3, #1
 8001d88:	f8cd b000 	str.w	fp, [sp]
 8001d8c:	462a      	mov	r2, r5
 8001d8e:	4621      	mov	r1, r4
 8001d90:	4648      	mov	r0, r9
 8001d92:	f004 faf9 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001d96:	f89d 301f 	ldrb.w	r3, [sp, #31]
	*buff = SPI_RxByte();
 8001d9a:	f807 3f01 	strb.w	r3, [r7, #1]!
	} while(len--);
 8001d9e:	4557      	cmp	r7, sl
 8001da0:	d1eb      	bne.n	8001d7a <SD_disk_read+0x21a>
	dummy = 0xFF;
 8001da2:	23ff      	movs	r3, #255	; 0xff
 8001da4:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001da8:	6833      	ldr	r3, [r6, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	0797      	lsls	r7, r2, #30
 8001dae:	d5fc      	bpl.n	8001daa <SD_disk_read+0x24a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001db0:	2364      	movs	r3, #100	; 0x64
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <SD_disk_read+0x28c>)
 8001db6:	2301      	movs	r3, #1
 8001db8:	462a      	mov	r2, r5
 8001dba:	4621      	mov	r1, r4
 8001dbc:	f004 fae4 	bl	8006388 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 8001dc0:	23ff      	movs	r3, #255	; 0xff
 8001dc2:	f88d 301e 	strb.w	r3, [sp, #30]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001dc6:	6833      	ldr	r3, [r6, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	0790      	lsls	r0, r2, #30
 8001dcc:	d5fc      	bpl.n	8001dc8 <SD_disk_read+0x268>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001dce:	2364      	movs	r3, #100	; 0x64
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	462a      	mov	r2, r5
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <SD_disk_read+0x28c>)
 8001dda:	f004 fad5 	bl	8006388 <HAL_SPI_TransmitReceive>
	return TRUE;
 8001dde:	e720      	b.n	8001c22 <SD_disk_read+0xc2>
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000214 	.word	0x20000214
 8001de8:	40020800 	.word	0x40020800
 8001dec:	20003da4 	.word	0x20003da4
 8001df0:	20000216 	.word	0x20000216

08001df4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df8:	b087      	sub	sp, #28
 8001dfa:	e9cd 3102 	strd	r3, r1, [sp, #8]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001dfe:	2800      	cmp	r0, #0
 8001e00:	d16c      	bne.n	8001edc <SD_disk_write+0xe8>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d06a      	beq.n	8001edc <SD_disk_write+0xe8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001e06:	4bb3      	ldr	r3, [pc, #716]	; (80020d4 <SD_disk_write+0x2e0>)
 8001e08:	4614      	mov	r4, r2
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	07d6      	lsls	r6, r2, #31
 8001e0e:	f100 808a 	bmi.w	8001f26 <SD_disk_write+0x132>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	075d      	lsls	r5, r3, #29
 8001e16:	f100 8101 	bmi.w	800201c <SD_disk_write+0x228>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001e1a:	4daf      	ldr	r5, [pc, #700]	; (80020d8 <SD_disk_write+0x2e4>)
 8001e1c:	782b      	ldrb	r3, [r5, #0]
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
	if (!(CardType & CT_SD2)) sector *= 512;
 8001e20:	0758      	lsls	r0, r3, #29
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001e22:	f04f 0102 	mov.w	r1, #2
 8001e26:	48ad      	ldr	r0, [pc, #692]	; (80020dc <SD_disk_write+0x2e8>)
	if (!(CardType & CT_SD2)) sector *= 512;
 8001e28:	bf58      	it	pl
 8001e2a:	0264      	lslpl	r4, r4, #9
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001e2c:	f002 fbfc 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f001 fe0d 	bl	8003a50 <HAL_Delay>

	SELECT();

	if (count == 1)
 8001e36:	9b02      	ldr	r3, [sp, #8]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	f000 80fd 	beq.w	8002038 <SD_disk_write+0x244>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001e3e:	782b      	ldrb	r3, [r5, #0]
 8001e40:	079a      	lsls	r2, r3, #30
 8001e42:	f100 80f0 	bmi.w	8002026 <SD_disk_write+0x232>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001e46:	4621      	mov	r1, r4
 8001e48:	2059      	movs	r0, #89	; 0x59
 8001e4a:	f7ff fcb1 	bl	80017b0 <SD_SendCmd>
 8001e4e:	4da4      	ldr	r5, [pc, #656]	; (80020e0 <SD_disk_write+0x2ec>)
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d148      	bne.n	8001ee6 <SD_disk_write+0xf2>
 8001e54:	f8df a28c 	ldr.w	sl, [pc, #652]	; 80020e4 <SD_disk_write+0x2f0>
 8001e58:	f10d 0617 	add.w	r6, sp, #23
 8001e5c:	f10d 0716 	add.w	r7, sp, #22
	dummy = 0xFF;
 8001e60:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e64:	46a8      	mov	r8, r5
	Timer2 = 500;
 8001e66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e6a:	f8aa 3000 	strh.w	r3, [sl]
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e6e:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e70:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001e72:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001e76:	6883      	ldr	r3, [r0, #8]
 8001e78:	079b      	lsls	r3, r3, #30
 8001e7a:	d5fc      	bpl.n	8001e76 <SD_disk_write+0x82>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	9400      	str	r4, [sp, #0]
 8001e80:	4632      	mov	r2, r6
 8001e82:	4639      	mov	r1, r7
 8001e84:	4640      	mov	r0, r8
 8001e86:	f004 fa7f 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001e8a:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8001e8e:	2bff      	cmp	r3, #255	; 0xff
 8001e90:	d04e      	beq.n	8001f30 <SD_disk_write+0x13c>
 8001e92:	f8ba 3000 	ldrh.w	r3, [sl]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ea      	bne.n	8001e70 <SD_disk_write+0x7c>
	Timer2 = 500;
 8001e9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001e9e:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80020e0 <SD_disk_write+0x2ec>
	Timer2 = 500;
 8001ea2:	f8aa 3000 	strh.w	r3, [sl]
	dummy = 0xFF;
 8001ea6:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001eaa:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001eac:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001eae:	f88d 8016 	strb.w	r8, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001eb2:	6883      	ldr	r3, [r0, #8]
 8001eb4:	079b      	lsls	r3, r3, #30
 8001eb6:	d5fc      	bpl.n	8001eb2 <SD_disk_write+0xbe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9400      	str	r4, [sp, #0]
 8001ebc:	4632      	mov	r2, r6
 8001ebe:	4639      	mov	r1, r7
 8001ec0:	4648      	mov	r0, r9
 8001ec2:	f004 fa61 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001ec6:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	f000 80bf 	beq.w	800204e <SD_disk_write+0x25a>
 8001ed0:	f8ba 3000 	ldrh.w	r3, [sl]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1e9      	bne.n	8001eac <SD_disk_write+0xb8>
 8001ed8:	2401      	movs	r4, #1
 8001eda:	e009      	b.n	8001ef0 <SD_disk_write+0xfc>
	if (pdrv || !count) return RES_PARERR;
 8001edc:	2404      	movs	r4, #4
	/* Idle */
	DESELECT();
	SPI_RxByte();

	return count ? RES_ERROR : RES_OK;
}
 8001ede:	4620      	mov	r0, r4
 8001ee0:	b007      	add	sp, #28
 8001ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ee6:	2401      	movs	r4, #1
 8001ee8:	f10d 0617 	add.w	r6, sp, #23
 8001eec:	f10d 0716 	add.w	r7, sp, #22
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	487a      	ldr	r0, [pc, #488]	; (80020dc <SD_disk_write+0x2e8>)
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	f002 fb97 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f001 fda8 	bl	8003a50 <HAL_Delay>
	dummy = 0xFF;
 8001f00:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f02:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001f04:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f08:	6893      	ldr	r3, [r2, #8]
 8001f0a:	079b      	lsls	r3, r3, #30
 8001f0c:	d5fc      	bpl.n	8001f08 <SD_disk_write+0x114>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f0e:	2364      	movs	r3, #100	; 0x64
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	4632      	mov	r2, r6
 8001f14:	2301      	movs	r3, #1
 8001f16:	4639      	mov	r1, r7
 8001f18:	4871      	ldr	r0, [pc, #452]	; (80020e0 <SD_disk_write+0x2ec>)
 8001f1a:	f004 fa35 	bl	8006388 <HAL_SPI_TransmitReceive>
}
 8001f1e:	4620      	mov	r0, r4
 8001f20:	b007      	add	sp, #28
 8001f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f26:	2403      	movs	r4, #3
}
 8001f28:	4620      	mov	r0, r4
 8001f2a:	b007      	add	sp, #28
 8001f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SPI_TxByte(token);
 8001f30:	23fc      	movs	r3, #252	; 0xfc
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f32:	682a      	ldr	r2, [r5, #0]
 8001f34:	f88d 3017 	strb.w	r3, [sp, #23]
 8001f38:	6893      	ldr	r3, [r2, #8]
 8001f3a:	0799      	lsls	r1, r3, #30
 8001f3c:	d5fc      	bpl.n	8001f38 <SD_disk_write+0x144>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2364      	movs	r3, #100	; 0x64
 8001f42:	4631      	mov	r1, r6
 8001f44:	4640      	mov	r0, r8
 8001f46:	f004 f8cd 	bl	80060e4 <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f4a:	682a      	ldr	r2, [r5, #0]
 8001f4c:	6893      	ldr	r3, [r2, #8]
 8001f4e:	079b      	lsls	r3, r3, #30
 8001f50:	d5fc      	bpl.n	8001f4c <SD_disk_write+0x158>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f56:	9903      	ldr	r1, [sp, #12]
 8001f58:	2364      	movs	r3, #100	; 0x64
 8001f5a:	4640      	mov	r0, r8
 8001f5c:	f004 f8c2 	bl	80060e4 <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f60:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001f62:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f66:	6893      	ldr	r3, [r2, #8]
 8001f68:	079c      	lsls	r4, r3, #30
 8001f6a:	d5fc      	bpl.n	8001f66 <SD_disk_write+0x172>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f6c:	2364      	movs	r3, #100	; 0x64
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	4632      	mov	r2, r6
 8001f72:	2301      	movs	r3, #1
 8001f74:	4639      	mov	r1, r7
 8001f76:	4640      	mov	r0, r8
 8001f78:	f004 fa06 	bl	8006388 <HAL_SPI_TransmitReceive>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f7c:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001f7e:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f82:	6893      	ldr	r3, [r2, #8]
 8001f84:	0798      	lsls	r0, r3, #30
 8001f86:	d5fc      	bpl.n	8001f82 <SD_disk_write+0x18e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f88:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8001f8c:	f8cd b000 	str.w	fp, [sp]
 8001f90:	2301      	movs	r3, #1
 8001f92:	4632      	mov	r2, r6
 8001f94:	4639      	mov	r1, r7
 8001f96:	4640      	mov	r0, r8
 8001f98:	f004 f9f6 	bl	8006388 <HAL_SPI_TransmitReceive>
		while (i <= 64)
 8001f9c:	2441      	movs	r4, #65	; 0x41
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f9e:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 8001fa0:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001fa4:	6893      	ldr	r3, [r2, #8]
 8001fa6:	0799      	lsls	r1, r3, #30
 8001fa8:	d5fc      	bpl.n	8001fa4 <SD_disk_write+0x1b0>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001faa:	2301      	movs	r3, #1
 8001fac:	f8cd b000 	str.w	fp, [sp]
 8001fb0:	4632      	mov	r2, r6
 8001fb2:	4639      	mov	r1, r7
 8001fb4:	4640      	mov	r0, r8
 8001fb6:	f004 f9e7 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001fba:	f89d 3017 	ldrb.w	r3, [sp, #23]
			resp = SPI_RxByte();
 8001fbe:	f88d 3014 	strb.w	r3, [sp, #20]
			if ((resp & 0x1F) == 0x05) break;
 8001fc2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d003      	beq.n	8001fd6 <SD_disk_write+0x1e2>
		while (i <= 64)
 8001fce:	3c01      	subs	r4, #1
 8001fd0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001fd4:	d1e3      	bne.n	8001f9e <SD_disk_write+0x1aa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001fd6:	2464      	movs	r4, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001fd8:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8001fda:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001fde:	6883      	ldr	r3, [r0, #8]
 8001fe0:	079a      	lsls	r2, r3, #30
 8001fe2:	d5fc      	bpl.n	8001fde <SD_disk_write+0x1ea>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	9400      	str	r4, [sp, #0]
 8001fe8:	4632      	mov	r2, r6
 8001fea:	4639      	mov	r1, r7
 8001fec:	4640      	mov	r0, r8
 8001fee:	f004 f9cb 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8001ff2:	f89d 3017 	ldrb.w	r3, [sp, #23]
		while (SPI_RxByte() == 0);
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0ee      	beq.n	8001fd8 <SD_disk_write+0x1e4>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001ffa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	2b05      	cmp	r3, #5
 8002004:	f47f af49 	bne.w	8001e9a <SD_disk_write+0xa6>
				buff += 512;
 8002008:	9b03      	ldr	r3, [sp, #12]
 800200a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800200e:	9303      	str	r3, [sp, #12]
			} while (--count);
 8002010:	9b02      	ldr	r3, [sp, #8]
 8002012:	3b01      	subs	r3, #1
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	f47f af26 	bne.w	8001e66 <SD_disk_write+0x72>
 800201a:	e73e      	b.n	8001e9a <SD_disk_write+0xa6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800201c:	2402      	movs	r4, #2
}
 800201e:	4620      	mov	r0, r4
 8002020:	b007      	add	sp, #28
 8002022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SD_SendCmd(CMD55, 0);
 8002026:	2100      	movs	r1, #0
 8002028:	2077      	movs	r0, #119	; 0x77
 800202a:	f7ff fbc1 	bl	80017b0 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800202e:	9902      	ldr	r1, [sp, #8]
 8002030:	2057      	movs	r0, #87	; 0x57
 8002032:	f7ff fbbd 	bl	80017b0 <SD_SendCmd>
 8002036:	e706      	b.n	8001e46 <SD_disk_write+0x52>
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002038:	4621      	mov	r1, r4
 800203a:	2058      	movs	r0, #88	; 0x58
 800203c:	f7ff fbb8 	bl	80017b0 <SD_SendCmd>
 8002040:	b308      	cbz	r0, 8002086 <SD_disk_write+0x292>
 8002042:	4d27      	ldr	r5, [pc, #156]	; (80020e0 <SD_disk_write+0x2ec>)
 8002044:	f10d 0617 	add.w	r6, sp, #23
 8002048:	f10d 0716 	add.w	r7, sp, #22
 800204c:	e744      	b.n	8001ed8 <SD_disk_write+0xe4>
	SPI_TxByte(token);
 800204e:	23fd      	movs	r3, #253	; 0xfd
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002050:	682a      	ldr	r2, [r5, #0]
 8002052:	f88d 3017 	strb.w	r3, [sp, #23]
 8002056:	6893      	ldr	r3, [r2, #8]
 8002058:	0799      	lsls	r1, r3, #30
 800205a:	d5fc      	bpl.n	8002056 <SD_disk_write+0x262>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800205c:	2364      	movs	r3, #100	; 0x64
 800205e:	4820      	ldr	r0, [pc, #128]	; (80020e0 <SD_disk_write+0x2ec>)
 8002060:	2201      	movs	r2, #1
 8002062:	4631      	mov	r1, r6
 8002064:	f004 f83e 	bl	80060e4 <HAL_SPI_Transmit>
		resp = 0x05;
 8002068:	2305      	movs	r3, #5
 800206a:	f88d 3015 	strb.w	r3, [sp, #21]
	if ((resp & 0x1F) == 0x05) return TRUE;
 800206e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	2b05      	cmp	r3, #5
 8002078:	f47f af2e 	bne.w	8001ed8 <SD_disk_write+0xe4>
	return count ? RES_ERROR : RES_OK;
 800207c:	9b02      	ldr	r3, [sp, #8]
 800207e:	1e1c      	subs	r4, r3, #0
 8002080:	bf18      	it	ne
 8002082:	2401      	movne	r4, #1
 8002084:	e734      	b.n	8001ef0 <SD_disk_write+0xfc>
	Timer2 = 500;
 8002086:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80020e4 <SD_disk_write+0x2f0>
 800208a:	4d15      	ldr	r5, [pc, #84]	; (80020e0 <SD_disk_write+0x2ec>)
 800208c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002090:	f8aa 3000 	strh.w	r3, [sl]
 8002094:	f10d 0617 	add.w	r6, sp, #23
 8002098:	f10d 0716 	add.w	r7, sp, #22
	dummy = 0xFF;
 800209c:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80020a0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80020a4:	462c      	mov	r4, r5
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80020a6:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 80020a8:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80020ac:	6883      	ldr	r3, [r0, #8]
 80020ae:	0799      	lsls	r1, r3, #30
 80020b0:	d5fc      	bpl.n	80020ac <SD_disk_write+0x2b8>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80020b2:	2301      	movs	r3, #1
 80020b4:	f8cd 8000 	str.w	r8, [sp]
 80020b8:	4632      	mov	r2, r6
 80020ba:	4639      	mov	r1, r7
 80020bc:	4620      	mov	r0, r4
 80020be:	f004 f963 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 80020c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while ((res != 0xFF) && Timer2);
 80020c6:	2bff      	cmp	r3, #255	; 0xff
 80020c8:	d00e      	beq.n	80020e8 <SD_disk_write+0x2f4>
 80020ca:	f8ba 3000 	ldrh.w	r3, [sl]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e9      	bne.n	80020a6 <SD_disk_write+0x2b2>
 80020d2:	e701      	b.n	8001ed8 <SD_disk_write+0xe4>
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000214 	.word	0x20000214
 80020dc:	40020800 	.word	0x40020800
 80020e0:	20003da4 	.word	0x20003da4
 80020e4:	20000218 	.word	0x20000218
	SPI_TxByte(token);
 80020e8:	23fe      	movs	r3, #254	; 0xfe
 80020ea:	f88d 3017 	strb.w	r3, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80020ee:	682b      	ldr	r3, [r5, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	0792      	lsls	r2, r2, #30
 80020f4:	d5fc      	bpl.n	80020f0 <SD_disk_write+0x2fc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	4837      	ldr	r0, [pc, #220]	; (80021d8 <SD_disk_write+0x3e4>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	4631      	mov	r1, r6
 80020fe:	f003 fff1 	bl	80060e4 <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002102:	682b      	ldr	r3, [r5, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	0794      	lsls	r4, r2, #30
 8002108:	d5fc      	bpl.n	8002104 <SD_disk_write+0x310>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800210a:	2364      	movs	r3, #100	; 0x64
 800210c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002110:	9903      	ldr	r1, [sp, #12]
 8002112:	4831      	ldr	r0, [pc, #196]	; (80021d8 <SD_disk_write+0x3e4>)
 8002114:	f003 ffe6 	bl	80060e4 <HAL_SPI_Transmit>
	dummy = 0xFF;
 8002118:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800211a:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 800211c:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002120:	6893      	ldr	r3, [r2, #8]
 8002122:	0798      	lsls	r0, r3, #30
 8002124:	d5fc      	bpl.n	8002120 <SD_disk_write+0x32c>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002126:	2364      	movs	r3, #100	; 0x64
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	4632      	mov	r2, r6
 800212c:	2301      	movs	r3, #1
 800212e:	482a      	ldr	r0, [pc, #168]	; (80021d8 <SD_disk_write+0x3e4>)
 8002130:	4639      	mov	r1, r7
 8002132:	f004 f929 	bl	8006388 <HAL_SPI_TransmitReceive>
	dummy = 0xFF;
 8002136:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002138:	682a      	ldr	r2, [r5, #0]
	dummy = 0xFF;
 800213a:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800213e:	6893      	ldr	r3, [r2, #8]
 8002140:	0799      	lsls	r1, r3, #30
 8002142:	d5fc      	bpl.n	800213e <SD_disk_write+0x34a>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002144:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002148:	4823      	ldr	r0, [pc, #140]	; (80021d8 <SD_disk_write+0x3e4>)
 800214a:	f8cd 8000 	str.w	r8, [sp]
 800214e:	2301      	movs	r3, #1
 8002150:	4632      	mov	r2, r6
 8002152:	4639      	mov	r1, r7
 8002154:	f004 f918 	bl	8006388 <HAL_SPI_TransmitReceive>
 8002158:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80021d8 <SD_disk_write+0x3e4>
 800215c:	2441      	movs	r4, #65	; 0x41
	dummy = 0xFF;
 800215e:	f04f 09ff 	mov.w	r9, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002162:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 8002164:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002168:	6883      	ldr	r3, [r0, #8]
 800216a:	079b      	lsls	r3, r3, #30
 800216c:	d5fc      	bpl.n	8002168 <SD_disk_write+0x374>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800216e:	2301      	movs	r3, #1
 8002170:	f8cd 8000 	str.w	r8, [sp]
 8002174:	4632      	mov	r2, r6
 8002176:	4639      	mov	r1, r7
 8002178:	4650      	mov	r0, sl
 800217a:	f004 f905 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 800217e:	f89d 3017 	ldrb.w	r3, [sp, #23]
			resp = SPI_RxByte();
 8002182:	f88d 3013 	strb.w	r3, [sp, #19]
			if ((resp & 0x1F) == 0x05) break;
 8002186:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2b05      	cmp	r3, #5
 8002190:	d003      	beq.n	800219a <SD_disk_write+0x3a6>
		while (i <= 64)
 8002192:	3c01      	subs	r4, #1
 8002194:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002198:	d1e3      	bne.n	8002162 <SD_disk_write+0x36e>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800219a:	4c0f      	ldr	r4, [pc, #60]	; (80021d8 <SD_disk_write+0x3e4>)
	dummy = 0xFF;
 800219c:	f04f 09ff 	mov.w	r9, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80021a0:	f04f 0864 	mov.w	r8, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80021a4:	6828      	ldr	r0, [r5, #0]
	dummy = 0xFF;
 80021a6:	f88d 9016 	strb.w	r9, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80021aa:	6883      	ldr	r3, [r0, #8]
 80021ac:	0799      	lsls	r1, r3, #30
 80021ae:	d5fc      	bpl.n	80021aa <SD_disk_write+0x3b6>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80021b0:	2301      	movs	r3, #1
 80021b2:	f8cd 8000 	str.w	r8, [sp]
 80021b6:	4632      	mov	r2, r6
 80021b8:	4639      	mov	r1, r7
 80021ba:	4620      	mov	r0, r4
 80021bc:	f004 f8e4 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 80021c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
		while (SPI_RxByte() == 0);
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ed      	beq.n	80021a4 <SD_disk_write+0x3b0>
	if ((resp & 0x1F) == 0x05) return TRUE;
 80021c8:	f89d 4013 	ldrb.w	r4, [sp, #19]
 80021cc:	f004 041f 	and.w	r4, r4, #31
	return count ? RES_ERROR : RES_OK;
 80021d0:	3c05      	subs	r4, #5
 80021d2:	bf18      	it	ne
 80021d4:	2401      	movne	r4, #1
 80021d6:	e68b      	b.n	8001ef0 <SD_disk_write+0xfc>
 80021d8:	20003da4 	.word	0x20003da4

080021dc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80021dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e0:	b08b      	sub	sp, #44	; 0x2c
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80021e2:	bb08      	cbnz	r0, 8002228 <SD_disk_ioctl+0x4c>
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 80021e4:	2905      	cmp	r1, #5
 80021e6:	460d      	mov	r5, r1
 80021e8:	4617      	mov	r7, r2
 80021ea:	d017      	beq.n	800221c <SD_disk_ioctl+0x40>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80021ec:	4b86      	ldr	r3, [pc, #536]	; (8002408 <SD_disk_ioctl+0x22c>)
 80021ee:	781c      	ldrb	r4, [r3, #0]
 80021f0:	f014 0401 	ands.w	r4, r4, #1
 80021f4:	d11d      	bne.n	8002232 <SD_disk_ioctl+0x56>
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80021f6:	4885      	ldr	r0, [pc, #532]	; (800240c <SD_disk_ioctl+0x230>)
 80021f8:	4622      	mov	r2, r4
 80021fa:	2102      	movs	r1, #2
 80021fc:	f002 fa14 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002200:	2001      	movs	r0, #1
 8002202:	f001 fc25 	bl	8003a50 <HAL_Delay>

		SELECT();

		switch (ctrl)
 8002206:	2d0d      	cmp	r5, #13
 8002208:	d818      	bhi.n	800223c <SD_disk_ioctl+0x60>
 800220a:	e8df f005 	tbb	[pc, r5]
 800220e:	7550      	.short	0x7550
 8002210:	17171791 	.word	0x17171791
 8002214:	17171717 	.word	0x17171717
 8002218:	45988017 	.word	0x45988017
		switch (*ptr)
 800221c:	7814      	ldrb	r4, [r2, #0]
 800221e:	2c01      	cmp	r4, #1
 8002220:	d034      	beq.n	800228c <SD_disk_ioctl+0xb0>
 8002222:	2c02      	cmp	r4, #2
 8002224:	d02d      	beq.n	8002282 <SD_disk_ioctl+0xa6>
 8002226:	b34c      	cbz	r4, 800227c <SD_disk_ioctl+0xa0>
 8002228:	2404      	movs	r4, #4
		DESELECT();
		SPI_RxByte();
	}

	return res;
}
 800222a:	4620      	mov	r0, r4
 800222c:	b00b      	add	sp, #44	; 0x2c
 800222e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002232:	2403      	movs	r4, #3
}
 8002234:	4620      	mov	r0, r4
 8002236:	b00b      	add	sp, #44	; 0x2c
 8002238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800223c:	4e74      	ldr	r6, [pc, #464]	; (8002410 <SD_disk_ioctl+0x234>)
		switch (ctrl)
 800223e:	2404      	movs	r4, #4
 8002240:	f10d 0717 	add.w	r7, sp, #23
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002244:	2201      	movs	r2, #1
 8002246:	4871      	ldr	r0, [pc, #452]	; (800240c <SD_disk_ioctl+0x230>)
 8002248:	2102      	movs	r1, #2
 800224a:	f002 f9ed 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800224e:	2001      	movs	r0, #1
 8002250:	f001 fbfe 	bl	8003a50 <HAL_Delay>
	dummy = 0xFF;
 8002254:	23ff      	movs	r3, #255	; 0xff
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002256:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8002258:	f88d 3016 	strb.w	r3, [sp, #22]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800225c:	6893      	ldr	r3, [r2, #8]
 800225e:	079b      	lsls	r3, r3, #30
 8002260:	d5fc      	bpl.n	800225c <SD_disk_ioctl+0x80>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002262:	2364      	movs	r3, #100	; 0x64
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	463a      	mov	r2, r7
 8002268:	2301      	movs	r3, #1
 800226a:	f10d 0116 	add.w	r1, sp, #22
 800226e:	4868      	ldr	r0, [pc, #416]	; (8002410 <SD_disk_ioctl+0x234>)
 8002270:	f004 f88a 	bl	8006388 <HAL_SPI_TransmitReceive>
}
 8002274:	4620      	mov	r0, r4
 8002276:	b00b      	add	sp, #44	; 0x2c
 8002278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PowerFlag = 0;
 800227c:	4b65      	ldr	r3, [pc, #404]	; (8002414 <SD_disk_ioctl+0x238>)
 800227e:	701c      	strb	r4, [r3, #0]
			break;
 8002280:	e7d3      	b.n	800222a <SD_disk_ioctl+0x4e>
	return PowerFlag;
 8002282:	4b64      	ldr	r3, [pc, #400]	; (8002414 <SD_disk_ioctl+0x238>)
			*(ptr + 1) = SD_CheckPower();
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	7053      	strb	r3, [r2, #1]
			res = RES_OK;		/* Power Check */
 8002288:	4604      	mov	r4, r0
			break;
 800228a:	e7ce      	b.n	800222a <SD_disk_ioctl+0x4e>
 800228c:	9003      	str	r0, [sp, #12]
			SD_PowerOn();		/* Power On */
 800228e:	f7ff f9af 	bl	80015f0 <SD_PowerOn>
			res = RES_OK;
 8002292:	9803      	ldr	r0, [sp, #12]
 8002294:	4604      	mov	r4, r0
			break;
 8002296:	e7c8      	b.n	800222a <SD_disk_ioctl+0x4e>
			if (SD_SendCmd(CMD58, 0) == 0)
 8002298:	2100      	movs	r1, #0
 800229a:	207a      	movs	r0, #122	; 0x7a
 800229c:	f7ff fa88 	bl	80017b0 <SD_SendCmd>
 80022a0:	4e5b      	ldr	r6, [pc, #364]	; (8002410 <SD_disk_ioctl+0x234>)
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d054      	beq.n	8002350 <SD_disk_ioctl+0x174>
 80022a6:	f10d 0717 	add.w	r7, sp, #23
			res = RES_PARERR;
 80022aa:	2404      	movs	r4, #4
 80022ac:	e7ca      	b.n	8002244 <SD_disk_ioctl+0x68>
	Timer2 = 500;
 80022ae:	4c5a      	ldr	r4, [pc, #360]	; (8002418 <SD_disk_ioctl+0x23c>)
 80022b0:	4e57      	ldr	r6, [pc, #348]	; (8002410 <SD_disk_ioctl+0x234>)
 80022b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022b6:	8023      	strh	r3, [r4, #0]
 80022b8:	f10d 0b18 	add.w	fp, sp, #24
 80022bc:	f10d 0717 	add.w	r7, sp, #23
	dummy = 0xFF;
 80022c0:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80022c4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80022c8:	46b0      	mov	r8, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80022ca:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 80022cc:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80022d0:	6893      	ldr	r3, [r2, #8]
 80022d2:	0798      	lsls	r0, r3, #30
 80022d4:	d5fc      	bpl.n	80022d0 <SD_disk_ioctl+0xf4>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80022d6:	2301      	movs	r3, #1
 80022d8:	f8cd 9000 	str.w	r9, [sp]
 80022dc:	465a      	mov	r2, fp
 80022de:	4639      	mov	r1, r7
 80022e0:	4640      	mov	r0, r8
 80022e2:	f004 f851 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 80022e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
	} while ((res != 0xFF) && Timer2);
 80022ea:	2bff      	cmp	r3, #255	; 0xff
 80022ec:	d02e      	beq.n	800234c <SD_disk_ioctl+0x170>
 80022ee:	8823      	ldrh	r3, [r4, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ea      	bne.n	80022ca <SD_disk_ioctl+0xee>
	res = RES_ERROR;
 80022f4:	2401      	movs	r4, #1
 80022f6:	e7a5      	b.n	8002244 <SD_disk_ioctl+0x68>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80022f8:	2100      	movs	r1, #0
 80022fa:	2049      	movs	r0, #73	; 0x49
 80022fc:	f7ff fa58 	bl	80017b0 <SD_SendCmd>
 8002300:	4604      	mov	r4, r0
 8002302:	2800      	cmp	r0, #0
 8002304:	d044      	beq.n	8002390 <SD_disk_ioctl+0x1b4>
 8002306:	4e42      	ldr	r6, [pc, #264]	; (8002410 <SD_disk_ioctl+0x234>)
 8002308:	f10d 0717 	add.w	r7, sp, #23
 800230c:	e7f2      	b.n	80022f4 <SD_disk_ioctl+0x118>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800230e:	2100      	movs	r1, #0
 8002310:	2049      	movs	r0, #73	; 0x49
 8002312:	f7ff fa4d 	bl	80017b0 <SD_SendCmd>
 8002316:	2800      	cmp	r0, #0
 8002318:	d1f5      	bne.n	8002306 <SD_disk_ioctl+0x12a>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800231a:	4638      	mov	r0, r7
 800231c:	2110      	movs	r1, #16
 800231e:	f7ff f9d9 	bl	80016d4 <SD_RxDataBlock>
	res = RES_ERROR;
 8002322:	fab0 f480 	clz	r4, r0
 8002326:	4e3a      	ldr	r6, [pc, #232]	; (8002410 <SD_disk_ioctl+0x234>)
 8002328:	0964      	lsrs	r4, r4, #5
 800232a:	f10d 0717 	add.w	r7, sp, #23
 800232e:	e789      	b.n	8002244 <SD_disk_ioctl+0x68>
			*(WORD*) buff = 512;
 8002330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002334:	803b      	strh	r3, [r7, #0]
			break;
 8002336:	4e36      	ldr	r6, [pc, #216]	; (8002410 <SD_disk_ioctl+0x234>)
 8002338:	f10d 0717 	add.w	r7, sp, #23
 800233c:	e782      	b.n	8002244 <SD_disk_ioctl+0x68>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800233e:	2100      	movs	r1, #0
 8002340:	204a      	movs	r0, #74	; 0x4a
 8002342:	f7ff fa35 	bl	80017b0 <SD_SendCmd>
 8002346:	2800      	cmp	r0, #0
 8002348:	d1dd      	bne.n	8002306 <SD_disk_ioctl+0x12a>
 800234a:	e7e6      	b.n	800231a <SD_disk_ioctl+0x13e>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800234c:	462c      	mov	r4, r5
 800234e:	e779      	b.n	8002244 <SD_disk_ioctl+0x68>
 8002350:	1e7d      	subs	r5, r7, #1
 8002352:	1cfc      	adds	r4, r7, #3
 8002354:	f10d 0b18 	add.w	fp, sp, #24
 8002358:	f10d 0717 	add.w	r7, sp, #23
	dummy = 0xFF;
 800235c:	f04f 0aff 	mov.w	sl, #255	; 0xff
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002360:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002364:	46b0      	mov	r8, r6
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002366:	6832      	ldr	r2, [r6, #0]
	dummy = 0xFF;
 8002368:	f88d a017 	strb.w	sl, [sp, #23]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800236c:	6893      	ldr	r3, [r2, #8]
 800236e:	0799      	lsls	r1, r3, #30
 8002370:	d5fc      	bpl.n	800236c <SD_disk_ioctl+0x190>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002372:	2301      	movs	r3, #1
 8002374:	f8cd 9000 	str.w	r9, [sp]
 8002378:	465a      	mov	r2, fp
 800237a:	4639      	mov	r1, r7
 800237c:	4640      	mov	r0, r8
 800237e:	f004 f803 	bl	8006388 <HAL_SPI_TransmitReceive>
	return data;
 8002382:	f89d 3018 	ldrb.w	r3, [sp, #24]
					*ptr++ = SPI_RxByte();
 8002386:	f805 3f01 	strb.w	r3, [r5, #1]!
				for (n = 0; n < 4; n++)
 800238a:	42ac      	cmp	r4, r5
 800238c:	d1eb      	bne.n	8002366 <SD_disk_ioctl+0x18a>
 800238e:	e78c      	b.n	80022aa <SD_disk_ioctl+0xce>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002390:	2110      	movs	r1, #16
 8002392:	a806      	add	r0, sp, #24
 8002394:	f7ff f99e 	bl	80016d4 <SD_RxDataBlock>
 8002398:	2800      	cmp	r0, #0
 800239a:	d0b4      	beq.n	8002306 <SD_disk_ioctl+0x12a>
				if ((csd[0] >> 6) == 1)
 800239c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80023a0:	099b      	lsrs	r3, r3, #6
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d022      	beq.n	80023ec <SD_disk_ioctl+0x210>
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80023a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80023aa:	f89d 1020 	ldrb.w	r1, [sp, #32]
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80023ae:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80023b2:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 80023b6:	4e16      	ldr	r6, [pc, #88]	; (8002410 <SD_disk_ioctl+0x234>)
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 80023be:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80023c2:	0289      	lsls	r1, r1, #10
 80023c4:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80023c8:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80023ca:	440b      	add	r3, r1
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80023cc:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 80023d0:	f002 020f 	and.w	r2, r2, #15
 80023d4:	0049      	lsls	r1, r1, #1
 80023d6:	f001 0106 	and.w	r1, r1, #6
 80023da:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80023de:	440a      	add	r2, r1
 80023e0:	3a07      	subs	r2, #7
 80023e2:	4093      	lsls	r3, r2
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	f10d 0717 	add.w	r7, sp, #23
 80023ea:	e72b      	b.n	8002244 <SD_disk_ioctl+0x68>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80023ec:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80023f0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80023f4:	4e06      	ldr	r6, [pc, #24]	; (8002410 <SD_disk_ioctl+0x234>)
 80023f6:	3301      	adds	r3, #1
 80023f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
					*(DWORD*) buff = (DWORD) csize << 10;
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	029b      	lsls	r3, r3, #10
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	f10d 0717 	add.w	r7, sp, #23
 8002406:	e71d      	b.n	8002244 <SD_disk_ioctl+0x68>
 8002408:	20000000 	.word	0x20000000
 800240c:	40020800 	.word	0x40020800
 8002410:	20003da4 	.word	0x20003da4
 8002414:	20000215 	.word	0x20000215
 8002418:	20000218 	.word	0x20000218

0800241c <Headlamp_Init>:
#include "main.h"

int headlamp_on = 0;

void Headlamp_Init() {
	HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
 800241c:	2201      	movs	r2, #1
 800241e:	4802      	ldr	r0, [pc, #8]	; (8002428 <Headlamp_Init+0xc>)
 8002420:	4611      	mov	r1, r2
 8002422:	f002 b901 	b.w	8004628 <HAL_GPIO_WritePin>
 8002426:	bf00      	nop
 8002428:	40020800 	.word	0x40020800

0800242c <toggle_headlamp>:
}

void toggle_headlamp() {
 800242c:	b570      	push	{r4, r5, r6, lr}
	if (HAL_TIM_Base_GetState(HEADLAMP_TIMER) == HAL_TIM_STATE_READY) {
 800242e:	4d16      	ldr	r5, [pc, #88]	; (8002488 <toggle_headlamp+0x5c>)
 8002430:	4628      	mov	r0, r5
 8002432:	f004 fca9 	bl	8006d88 <HAL_TIM_Base_GetState>
 8002436:	2801      	cmp	r0, #1
 8002438:	d000      	beq.n	800243c <toggle_headlamp+0x10>
			printf("Light on\n");
			headlamp_on = 1;
		}
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
	}
}
 800243a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin,
 800243c:	4604      	mov	r4, r0
		if (headlamp_on) {
 800243e:	4e13      	ldr	r6, [pc, #76]	; (800248c <toggle_headlamp+0x60>)
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin,
 8002440:	4813      	ldr	r0, [pc, #76]	; (8002490 <toggle_headlamp+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	4621      	mov	r1, r4
 8002446:	f002 f8ef 	bl	8004628 <HAL_GPIO_WritePin>
		if (headlamp_on) {
 800244a:	6833      	ldr	r3, [r6, #0]
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 10000);
 800244c:	682a      	ldr	r2, [r5, #0]
		if (headlamp_on) {
 800244e:	b963      	cbnz	r3, 800246a <toggle_headlamp+0x3e>
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 2500);
 8002450:	f640 13c4 	movw	r3, #2500	; 0x9c4
			printf("Light on\n");
 8002454:	480f      	ldr	r0, [pc, #60]	; (8002494 <toggle_headlamp+0x68>)
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 2500);
 8002456:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002458:	60eb      	str	r3, [r5, #12]
			printf("Light on\n");
 800245a:	f008 f96d 	bl	800a738 <puts>
			headlamp_on = 1;
 800245e:	6034      	str	r4, [r6, #0]
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 8002460:	4809      	ldr	r0, [pc, #36]	; (8002488 <toggle_headlamp+0x5c>)
}
 8002462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 8002466:	f004 b95b 	b.w	8006720 <HAL_TIM_Base_Start_IT>
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 10000);
 800246a:	f242 7310 	movw	r3, #10000	; 0x2710
 800246e:	62d3      	str	r3, [r2, #44]	; 0x2c
			printf("Light off\n");
 8002470:	4809      	ldr	r0, [pc, #36]	; (8002498 <toggle_headlamp+0x6c>)
			__HAL_TIM_SET_AUTORELOAD(HEADLAMP_TIMER, 10000);
 8002472:	60eb      	str	r3, [r5, #12]
			printf("Light off\n");
 8002474:	f008 f960 	bl	800a738 <puts>
			headlamp_on = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	6033      	str	r3, [r6, #0]
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <toggle_headlamp+0x5c>)
}
 800247e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(HEADLAMP_TIMER);
 8002482:	f004 b94d 	b.w	8006720 <HAL_TIM_Base_Start_IT>
 8002486:	bf00      	nop
 8002488:	20003e54 	.word	0x20003e54
 800248c:	2000021c 	.word	0x2000021c
 8002490:	40020800 	.word	0x40020800
 8002494:	0800c704 	.word	0x0800c704
 8002498:	0800c6f8 	.word	0x0800c6f8

0800249c <imu_init>:
#define INT1_SRC		0x31
#define READ_START_REG	0x28 | 0x80



uint8_t imu_init(IMU* imu) {
 800249c:	b530      	push	{r4, r5, lr}
 800249e:	b085      	sub	sp, #20
	//	- normal power mode
	//	- all axis enabled
	buf[0] = CTRL_REG_1;
	buf[1] = 0b10010111;

	if (HAL_I2C_Master_Transmit(imu->hi2c,
 80024a0:	f04f 35ff 	mov.w	r5, #4294967295
	buf[0] = CTRL_REG_1;
 80024a4:	f249 7220 	movw	r2, #38688	; 0x9720
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 80024a8:	9500      	str	r5, [sp, #0]
uint8_t imu_init(IMU* imu) {
 80024aa:	4604      	mov	r4, r0
	buf[0] = CTRL_REG_1;
 80024ac:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 80024b0:	6800      	ldr	r0, [r0, #0]
 80024b2:	2302      	movs	r3, #2
 80024b4:	aa03      	add	r2, sp, #12
 80024b6:	2132      	movs	r1, #50	; 0x32
 80024b8:	f002 fbd8 	bl	8004c6c <HAL_I2C_Master_Transmit>
 80024bc:	b110      	cbz	r0, 80024c4 <imu_init+0x28>
		SAD_W, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
		return 0;
 80024be:	2000      	movs	r0, #0

	imu_clear_int1(imu);

	return 1;

}
 80024c0:	b005      	add	sp, #20
 80024c2:	bd30      	pop	{r4, r5, pc}
	buf[0] = CTRL_REG_5;
 80024c4:	f640 7224 	movw	r2, #3876	; 0xf24
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 80024c8:	9500      	str	r5, [sp, #0]
	buf[0] = CTRL_REG_5;
 80024ca:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 80024ce:	6820      	ldr	r0, [r4, #0]
 80024d0:	2302      	movs	r3, #2
 80024d2:	aa03      	add	r2, sp, #12
 80024d4:	2132      	movs	r1, #50	; 0x32
 80024d6:	f002 fbc9 	bl	8004c6c <HAL_I2C_Master_Transmit>
 80024da:	2800      	cmp	r0, #0
 80024dc:	d1ef      	bne.n	80024be <imu_init+0x22>
	buf[0] = CTRL_REG_3;
 80024de:	f244 0222 	movw	r2, #16418	; 0x4022
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 80024e2:	9500      	str	r5, [sp, #0]
	buf[0] = CTRL_REG_3;
 80024e4:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 80024e8:	6820      	ldr	r0, [r4, #0]
 80024ea:	2302      	movs	r3, #2
 80024ec:	aa03      	add	r2, sp, #12
 80024ee:	2132      	movs	r1, #50	; 0x32
 80024f0:	f002 fbbc 	bl	8004c6c <HAL_I2C_Master_Transmit>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d1e2      	bne.n	80024be <imu_init+0x22>
	buf[0] = CTRL_REG_4;
 80024f8:	f242 0223 	movw	r2, #8227	; 0x2023
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 80024fc:	9500      	str	r5, [sp, #0]
	buf[0] = CTRL_REG_4;
 80024fe:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 8002502:	6820      	ldr	r0, [r4, #0]
 8002504:	2302      	movs	r3, #2
 8002506:	aa03      	add	r2, sp, #12
 8002508:	2132      	movs	r1, #50	; 0x32
 800250a:	f002 fbaf 	bl	8004c6c <HAL_I2C_Master_Transmit>
 800250e:	2800      	cmp	r0, #0
 8002510:	d1d5      	bne.n	80024be <imu_init+0x22>
	buf[0] = INT1_CFG;
 8002512:	f242 0230 	movw	r2, #8240	; 0x2030
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 8002516:	9500      	str	r5, [sp, #0]
	buf[0] = INT1_CFG;
 8002518:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	2302      	movs	r3, #2
 8002520:	aa03      	add	r2, sp, #12
 8002522:	2132      	movs	r1, #50	; 0x32
 8002524:	f002 fba2 	bl	8004c6c <HAL_I2C_Master_Transmit>
 8002528:	2800      	cmp	r0, #0
 800252a:	d1c8      	bne.n	80024be <imu_init+0x22>
	buf[0] = INT1_THS;
 800252c:	f647 7132 	movw	r1, #32562	; 0x7f32
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 8002530:	9500      	str	r5, [sp, #0]
	buf[0] = INT1_THS;
 8002532:	f8ad 100c 	strh.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(imu->hi2c,
 8002536:	6820      	ldr	r0, [r4, #0]
 8002538:	2302      	movs	r3, #2
 800253a:	aa03      	add	r2, sp, #12
 800253c:	2132      	movs	r1, #50	; 0x32
 800253e:	f002 fb95 	bl	8004c6c <HAL_I2C_Master_Transmit>
 8002542:	2800      	cmp	r0, #0
 8002544:	d1bb      	bne.n	80024be <imu_init+0x22>
	return 1;
}


uint8_t imu_clear_int1(IMU* imu) {
	uint8_t reg = INT1_SRC;
 8002546:	2231      	movs	r2, #49	; 0x31

	if (HAL_I2C_Master_Transmit(imu->hi2c, SAD_W, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002548:	9500      	str	r5, [sp, #0]
	uint8_t reg = INT1_SRC;
 800254a:	f88d 200b 	strb.w	r2, [sp, #11]
	if (HAL_I2C_Master_Transmit(imu->hi2c, SAD_W, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800254e:	6820      	ldr	r0, [r4, #0]
 8002550:	2301      	movs	r3, #1
 8002552:	f10d 020b 	add.w	r2, sp, #11
 8002556:	2132      	movs	r1, #50	; 0x32
 8002558:	f002 fb88 	bl	8004c6c <HAL_I2C_Master_Transmit>
 800255c:	b938      	cbnz	r0, 800256e <imu_init+0xd2>
		return 0;
	}

	if (HAL_I2C_Master_Receive(imu->hi2c, SAD_R, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800255e:	6820      	ldr	r0, [r4, #0]
 8002560:	9500      	str	r5, [sp, #0]
 8002562:	2301      	movs	r3, #1
 8002564:	f10d 020b 	add.w	r2, sp, #11
 8002568:	2133      	movs	r1, #51	; 0x33
 800256a:	f002 fd11 	bl	8004f90 <HAL_I2C_Master_Receive>
	return 1;
 800256e:	2001      	movs	r0, #1
 8002570:	e7a6      	b.n	80024c0 <imu_init+0x24>
 8002572:	bf00      	nop

08002574 <imu_clear_int1>:
uint8_t imu_clear_int1(IMU* imu) {
 8002574:	b530      	push	{r4, r5, lr}
 8002576:	b085      	sub	sp, #20
	if (HAL_I2C_Master_Transmit(imu->hi2c, SAD_W, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002578:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t reg = INT1_SRC;
 800257c:	2231      	movs	r2, #49	; 0x31
	if (HAL_I2C_Master_Transmit(imu->hi2c, SAD_W, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800257e:	9500      	str	r5, [sp, #0]
uint8_t imu_clear_int1(IMU* imu) {
 8002580:	4604      	mov	r4, r0
	uint8_t reg = INT1_SRC;
 8002582:	f88d 200f 	strb.w	r2, [sp, #15]
	if (HAL_I2C_Master_Transmit(imu->hi2c, SAD_W, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002586:	6800      	ldr	r0, [r0, #0]
 8002588:	2301      	movs	r3, #1
 800258a:	f10d 020f 	add.w	r2, sp, #15
 800258e:	2132      	movs	r1, #50	; 0x32
 8002590:	f002 fb6c 	bl	8004c6c <HAL_I2C_Master_Transmit>
 8002594:	b110      	cbz	r0, 800259c <imu_clear_int1+0x28>
		return 0;
 8002596:	2000      	movs	r0, #0
		return 0;
	}

	return 1;
}
 8002598:	b005      	add	sp, #20
 800259a:	bd30      	pop	{r4, r5, pc}
	if (HAL_I2C_Master_Receive(imu->hi2c, SAD_R, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800259c:	6820      	ldr	r0, [r4, #0]
 800259e:	9500      	str	r5, [sp, #0]
 80025a0:	2301      	movs	r3, #1
 80025a2:	f10d 020f 	add.w	r2, sp, #15
 80025a6:	2133      	movs	r1, #51	; 0x33
 80025a8:	f002 fcf2 	bl	8004f90 <HAL_I2C_Master_Receive>
		return 0;
 80025ac:	fab0 f080 	clz	r0, r0
 80025b0:	0940      	lsrs	r0, r0, #5
}
 80025b2:	b005      	add	sp, #20
 80025b4:	bd30      	pop	{r4, r5, pc}
 80025b6:	bf00      	nop

080025b8 <testSD>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int testSD() {
 80025b8:	b570      	push	{r4, r5, r6, lr}
	/* Mount SD Card */
	int ret = 0;
	if(f_mount(&fs, "/", 0) != FR_OK) {
 80025ba:	494a      	ldr	r1, [pc, #296]	; (80026e4 <testSD+0x12c>)
 80025bc:	484a      	ldr	r0, [pc, #296]	; (80026e8 <testSD+0x130>)
int testSD() {
 80025be:	b082      	sub	sp, #8
	if(f_mount(&fs, "/", 0) != FR_OK) {
 80025c0:	2200      	movs	r2, #0
 80025c2:	f006 fbb7 	bl	8008d34 <f_mount>
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d15c      	bne.n	8002684 <testSD+0xcc>
		printf("Failed to mount SD Card\r\n");
		return -1;
	}

	/* Open file to write */
	ret = f_open(&fil, "/TEST.TXT", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80025ca:	4948      	ldr	r1, [pc, #288]	; (80026ec <testSD+0x134>)
 80025cc:	4848      	ldr	r0, [pc, #288]	; (80026f0 <testSD+0x138>)
 80025ce:	2213      	movs	r2, #19
 80025d0:	f006 fbf2 	bl	8008db8 <f_open>
	if(ret != FR_OK) {
 80025d4:	4601      	mov	r1, r0
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d15a      	bne.n	8002690 <testSD+0xd8>
		printf("Failed to open file (%i) \r\n", ret);
		return -1;
	}

	if(f_getfree("", &fre_clust, &pfs) != FR_OK) {
 80025da:	4d46      	ldr	r5, [pc, #280]	; (80026f4 <testSD+0x13c>)
 80025dc:	4c46      	ldr	r4, [pc, #280]	; (80026f8 <testSD+0x140>)
 80025de:	4847      	ldr	r0, [pc, #284]	; (80026fc <testSD+0x144>)
 80025e0:	462a      	mov	r2, r5
 80025e2:	4621      	mov	r1, r4
 80025e4:	f007 f8fe 	bl	80097e4 <f_getfree>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d175      	bne.n	80026d8 <testSD+0x120>
		printf("Free space check failed\r\n");
		return -1;
	}

	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80025ec:	682b      	ldr	r3, [r5, #0]
 80025ee:	4e44      	ldr	r6, [pc, #272]	; (8002700 <testSD+0x148>)
 80025f0:	6998      	ldr	r0, [r3, #24]
 80025f2:	895d      	ldrh	r5, [r3, #10]
 80025f4:	3802      	subs	r0, #2
 80025f6:	fb05 f000 	mul.w	r0, r5, r0
 80025fa:	f7fd ff9b 	bl	8000534 <__aeabi_ui2d>
 80025fe:	2200      	movs	r2, #0
 8002600:	4b40      	ldr	r3, [pc, #256]	; (8002704 <testSD+0x14c>)
 8002602:	f7fe f811 	bl	8000628 <__aeabi_dmul>
 8002606:	f7fe fae7 	bl	8000bd8 <__aeabi_d2uiz>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800260a:	6823      	ldr	r3, [r4, #0]
	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800260c:	6030      	str	r0, [r6, #0]
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800260e:	fb03 f005 	mul.w	r0, r3, r5
 8002612:	f7fd ff8f 	bl	8000534 <__aeabi_ui2d>
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <testSD+0x14c>)
 8002618:	2200      	movs	r2, #0
 800261a:	f7fe f805 	bl	8000628 <__aeabi_dmul>
 800261e:	f7fe fadb 	bl	8000bd8 <__aeabi_d2uiz>
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <testSD+0x150>)
 8002624:	6018      	str	r0, [r3, #0]

	/* free space is less than 1kb */
	if(free_space < 1) {
 8002626:	2800      	cmp	r0, #0
 8002628:	d038      	beq.n	800269c <testSD+0xe4>
		return -1;
	}

	//	printf("SD CARD MOUNTED! TESTING R/W...\r\n");

	f_puts("TEST", &fil);
 800262a:	4931      	ldr	r1, [pc, #196]	; (80026f0 <testSD+0x138>)
 800262c:	4837      	ldr	r0, [pc, #220]	; (800270c <testSD+0x154>)
 800262e:	f007 f9eb 	bl	8009a08 <f_puts>

	/* Close file */
	ret = f_close(&fil);
 8002632:	482f      	ldr	r0, [pc, #188]	; (80026f0 <testSD+0x138>)
 8002634:	f007 f846 	bl	80096c4 <f_close>
	if(ret != FR_OK) {
 8002638:	4601      	mov	r1, r0
 800263a:	2800      	cmp	r0, #0
 800263c:	d134      	bne.n	80026a8 <testSD+0xf0>
		printf("Failed to close file (%i) \r\n", ret);
		return -1;
	}

	/* Open file to read */
	ret = f_open(&fil, "/TEST.TXT", FA_READ);
 800263e:	492b      	ldr	r1, [pc, #172]	; (80026ec <testSD+0x134>)
 8002640:	482b      	ldr	r0, [pc, #172]	; (80026f0 <testSD+0x138>)
 8002642:	2201      	movs	r2, #1
 8002644:	f006 fbb8 	bl	8008db8 <f_open>
	if(ret != FR_OK) {
 8002648:	4601      	mov	r1, r0
 800264a:	bb98      	cbnz	r0, 80026b4 <testSD+0xfc>
		printf("Failed to open in read mode (%i) \r\n", ret);
		return -1;
	}

	char buffer[5];
	f_gets(buffer, sizeof(buffer), &fil);
 800264c:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <testSD+0x138>)
 800264e:	2105      	movs	r1, #5
 8002650:	4668      	mov	r0, sp
 8002652:	f007 f9ab 	bl	80099ac <f_gets>

	if (strcmp(buffer, "TEST")) {
 8002656:	492d      	ldr	r1, [pc, #180]	; (800270c <testSD+0x154>)
 8002658:	4668      	mov	r0, sp
 800265a:	f7fd fdc1 	bl	80001e0 <strcmp>
 800265e:	4604      	mov	r4, r0
 8002660:	bb70      	cbnz	r0, 80026c0 <testSD+0x108>
	}

	//	printf("PASSED: read file contents\r\n");

	/* Close file */
	if(f_close(&fil) != FR_OK) {
 8002662:	4823      	ldr	r0, [pc, #140]	; (80026f0 <testSD+0x138>)
 8002664:	f007 f82e 	bl	80096c4 <f_close>
 8002668:	bb80      	cbnz	r0, 80026cc <testSD+0x114>
		printf("Failed to close\r\n");
		return -1;
	}

	if(f_unlink("test.txt") != FR_OK) {
 800266a:	4829      	ldr	r0, [pc, #164]	; (8002710 <testSD+0x158>)
 800266c:	f007 f92c 	bl	80098c8 <f_unlink>
 8002670:	b910      	cbnz	r0, 8002678 <testSD+0xc0>
		printf("Failed to delete test file \r\n");
	}

	return 0;
}
 8002672:	4620      	mov	r0, r4
 8002674:	b002      	add	sp, #8
 8002676:	bd70      	pop	{r4, r5, r6, pc}
		printf("Failed to delete test file \r\n");
 8002678:	4826      	ldr	r0, [pc, #152]	; (8002714 <testSD+0x15c>)
 800267a:	f008 f85d 	bl	800a738 <puts>
}
 800267e:	4620      	mov	r0, r4
 8002680:	b002      	add	sp, #8
 8002682:	bd70      	pop	{r4, r5, r6, pc}
		printf("Failed to mount SD Card\r\n");
 8002684:	4824      	ldr	r0, [pc, #144]	; (8002718 <testSD+0x160>)
 8002686:	f008 f857 	bl	800a738 <puts>
		return -1;
 800268a:	f04f 34ff 	mov.w	r4, #4294967295
 800268e:	e7f0      	b.n	8002672 <testSD+0xba>
		printf("Failed to open file (%i) \r\n", ret);
 8002690:	4822      	ldr	r0, [pc, #136]	; (800271c <testSD+0x164>)
 8002692:	f007 ffcb 	bl	800a62c <iprintf>
		return -1;
 8002696:	f04f 34ff 	mov.w	r4, #4294967295
 800269a:	e7ea      	b.n	8002672 <testSD+0xba>
		printf("Drive is full\r\n");
 800269c:	4820      	ldr	r0, [pc, #128]	; (8002720 <testSD+0x168>)
 800269e:	f008 f84b 	bl	800a738 <puts>
		return -1;
 80026a2:	f04f 34ff 	mov.w	r4, #4294967295
 80026a6:	e7e4      	b.n	8002672 <testSD+0xba>
		printf("Failed to close file (%i) \r\n", ret);
 80026a8:	481e      	ldr	r0, [pc, #120]	; (8002724 <testSD+0x16c>)
 80026aa:	f007 ffbf 	bl	800a62c <iprintf>
		return -1;
 80026ae:	f04f 34ff 	mov.w	r4, #4294967295
 80026b2:	e7de      	b.n	8002672 <testSD+0xba>
		printf("Failed to open in read mode (%i) \r\n", ret);
 80026b4:	481c      	ldr	r0, [pc, #112]	; (8002728 <testSD+0x170>)
 80026b6:	f007 ffb9 	bl	800a62c <iprintf>
		return -1;
 80026ba:	f04f 34ff 	mov.w	r4, #4294967295
 80026be:	e7d8      	b.n	8002672 <testSD+0xba>
		printf("File contents MISMATCH. FAIL R/W test\r\n");
 80026c0:	481a      	ldr	r0, [pc, #104]	; (800272c <testSD+0x174>)
 80026c2:	f008 f839 	bl	800a738 <puts>
		return -1;
 80026c6:	f04f 34ff 	mov.w	r4, #4294967295
 80026ca:	e7d2      	b.n	8002672 <testSD+0xba>
		printf("Failed to close\r\n");
 80026cc:	4818      	ldr	r0, [pc, #96]	; (8002730 <testSD+0x178>)
 80026ce:	f008 f833 	bl	800a738 <puts>
		return -1;
 80026d2:	f04f 34ff 	mov.w	r4, #4294967295
 80026d6:	e7cc      	b.n	8002672 <testSD+0xba>
		printf("Free space check failed\r\n");
 80026d8:	4816      	ldr	r0, [pc, #88]	; (8002734 <testSD+0x17c>)
 80026da:	f008 f82d 	bl	800a738 <puts>
		return -1;
 80026de:	f04f 34ff 	mov.w	r4, #4294967295
 80026e2:	e7c6      	b.n	8002672 <testSD+0xba>
 80026e4:	0800c710 	.word	0x0800c710
 80026e8:	20002b58 	.word	0x20002b58
 80026ec:	0800c730 	.word	0x0800c730
 80026f0:	20001b20 	.word	0x20001b20
 80026f4:	20004060 	.word	0x20004060
 80026f8:	20002b50 	.word	0x20002b50
 80026fc:	0800c7a8 	.word	0x0800c7a8
 8002700:	20004068 	.word	0x20004068
 8002704:	3fe00000 	.word	0x3fe00000
 8002708:	20002b54 	.word	0x20002b54
 800270c:	0800c784 	.word	0x0800c784
 8002710:	0800c80c 	.word	0x0800c80c
 8002714:	0800c818 	.word	0x0800c818
 8002718:	0800c714 	.word	0x0800c714
 800271c:	0800c73c 	.word	0x0800c73c
 8002720:	0800c774 	.word	0x0800c774
 8002724:	0800c78c 	.word	0x0800c78c
 8002728:	0800c7ac 	.word	0x0800c7ac
 800272c:	0800c7d0 	.word	0x0800c7d0
 8002730:	0800c7f8 	.word	0x0800c7f8
 8002734:	0800c758 	.word	0x0800c758

08002738 <HAL_TIM_PeriodElapsedCallback>:

/* INTERRUPT CALLBACKS */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
	if (htim == audio.htim) {
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4282      	cmp	r2, r0
 800273e:	d019      	beq.n	8002774 <HAL_TIM_PeriodElapsedCallback+0x3c>
		audio_callback(&audio);
	}
	else if (htim == &DISTANCE_SENSOR_TIMER) {
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002742:	4298      	cmp	r0, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8002744:	b510      	push	{r4, lr}
 8002746:	4604      	mov	r4, r0
	else if (htim == &DISTANCE_SENSOR_TIMER) {
 8002748:	d017      	beq.n	800277a <HAL_TIM_PeriodElapsedCallback+0x42>
		update_readings_async(&distance_sensor_array);
	} else if (htim == &CAMERA_CAPTURE_TIMER) {
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800274c:	4298      	cmp	r0, r3
 800274e:	d006      	beq.n	800275e <HAL_TIM_PeriodElapsedCallback+0x26>
		capture_flag = 1;
	} else if (htim == HEADLAMP_TIMER) {
 8002750:	4b16      	ldr	r3, [pc, #88]	; (80027ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002752:	4298      	cmp	r0, r3
 8002754:	d019      	beq.n	800278a <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
	} else if (htim == FILE_TIMER) {
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002758:	4298      	cmp	r0, r3
 800275a:	d004      	beq.n	8002766 <HAL_TIM_PeriodElapsedCallback+0x2e>
		XBee_Transmit_File();
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
	}
}
 800275c:	bd10      	pop	{r4, pc}
		capture_flag = 1;
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]
}
 8002764:	bd10      	pop	{r4, pc}
		XBee_Transmit_File();
 8002766:	f000 ffa9 	bl	80036bc <XBee_Transmit_File>
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
 800276a:	4620      	mov	r0, r4
}
 800276c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_Base_Stop_IT(FILE_TIMER);
 8002770:	f004 b80a 	b.w	8006788 <HAL_TIM_Base_Stop_IT>
		audio_callback(&audio);
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe bc3b 	b.w	8000ff0 <audio_callback>
	ADC_HandleTypeDef* hadc;
	uint32_t readings[3];
} distance_sensor_array_t;

void update_readings_async(distance_sensor_array_t* ds) {
	HAL_ADC_Start_DMA(ds->hadc, ds->readings, 3);
 800277a:	490f      	ldr	r1, [pc, #60]	; (80027b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
}
 800277c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002780:	f851 0b04 	ldr.w	r0, [r1], #4
 8002784:	2203      	movs	r2, #3
 8002786:	f001 ba23 	b.w	8003bd0 <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(HEADLAMP_OUT_GPIO_Port, HEADLAMP_OUT_Pin, GPIO_PIN_SET);
 800278a:	2201      	movs	r2, #1
 800278c:	480b      	ldr	r0, [pc, #44]	; (80027bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800278e:	4611      	mov	r1, r2
 8002790:	f001 ff4a 	bl	8004628 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
 8002794:	4620      	mov	r0, r4
}
 8002796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_Base_Stop_IT(HEADLAMP_TIMER);
 800279a:	f003 bff5 	b.w	8006788 <HAL_TIM_Base_Stop_IT>
 800279e:	bf00      	nop
 80027a0:	20000220 	.word	0x20000220
 80027a4:	20003f2c 	.word	0x20003f2c
 80027a8:	20003ee4 	.word	0x20003ee4
 80027ac:	20003e54 	.word	0x20003e54
 80027b0:	20003e9c 	.word	0x20003e9c
 80027b4:	20001ab8 	.word	0x20001ab8
 80027b8:	20001b04 	.word	0x20001b04
 80027bc:	40020800 	.word	0x40020800

080027c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	// TODO: remove, this is just for testing
	if (GPIO_Pin == 0x2000) {
 80027c0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80027c4:	b508      	push	{r3, lr}
	if (GPIO_Pin == 0x2000) {
 80027c6:	d00d      	beq.n	80027e4 <HAL_GPIO_EXTI_Callback+0x24>
		printf("Save requested\r\n");
		save_requested = 1;
	} else if (GPIO_Pin & (1 << 7)) { // Buttons interrupt
 80027c8:	0602      	lsls	r2, r0, #24
 80027ca:	d402      	bmi.n	80027d2 <HAL_GPIO_EXTI_Callback+0x12>
			default:
				printf("None\r\n");
				break;

		}
	} else if (GPIO_Pin & (1 << 9)) { // IMU collision interrupt
 80027cc:	0583      	lsls	r3, r0, #22
 80027ce:	d410      	bmi.n	80027f2 <HAL_GPIO_EXTI_Callback+0x32>
		printf("Impact detected\r\n");
		imu_clear_int1(&imu);
	}
}
 80027d0:	bd08      	pop	{r3, pc}
		switch (get_released_button(&btns)) {
 80027d2:	481d      	ldr	r0, [pc, #116]	; (8002848 <HAL_GPIO_EXTI_Callback+0x88>)
 80027d4:	f7fe fea6 	bl	8001524 <get_released_button>
 80027d8:	2803      	cmp	r0, #3
 80027da:	d830      	bhi.n	800283e <HAL_GPIO_EXTI_Callback+0x7e>
 80027dc:	e8df f000 	tbb	[pc, r0]
 80027e0:	11181d2a 	.word	0x11181d2a
		printf("Save requested\r\n");
 80027e4:	4819      	ldr	r0, [pc, #100]	; (800284c <HAL_GPIO_EXTI_Callback+0x8c>)
 80027e6:	f007 ffa7 	bl	800a738 <puts>
		save_requested = 1;
 80027ea:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_GPIO_EXTI_Callback+0x90>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
}
 80027f0:	bd08      	pop	{r3, pc}
		printf("Impact detected\r\n");
 80027f2:	4818      	ldr	r0, [pc, #96]	; (8002854 <HAL_GPIO_EXTI_Callback+0x94>)
 80027f4:	f007 ffa0 	bl	800a738 <puts>
}
 80027f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		imu_clear_int1(&imu);
 80027fc:	4816      	ldr	r0, [pc, #88]	; (8002858 <HAL_GPIO_EXTI_Callback+0x98>)
 80027fe:	f7ff beb9 	b.w	8002574 <imu_clear_int1>
				printf("Lights\r\n");
 8002802:	4816      	ldr	r0, [pc, #88]	; (800285c <HAL_GPIO_EXTI_Callback+0x9c>)
 8002804:	f007 ff98 	bl	800a738 <puts>
}
 8002808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				toggle_headlamp();
 800280c:	f7ff be0e 	b.w	800242c <toggle_headlamp>
}
 8002810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				printf("Haptics\r\n");
 8002814:	4812      	ldr	r0, [pc, #72]	; (8002860 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002816:	f007 bf8f 	b.w	800a738 <puts>
				printf("Record\r\n");
 800281a:	4812      	ldr	r0, [pc, #72]	; (8002864 <HAL_GPIO_EXTI_Callback+0xa4>)
 800281c:	f007 ff8c 	bl	800a738 <puts>
				play_wav(&audio, "/audio/CHIME.WAV");
 8002820:	4911      	ldr	r1, [pc, #68]	; (8002868 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002822:	4812      	ldr	r0, [pc, #72]	; (800286c <HAL_GPIO_EXTI_Callback+0xac>)
 8002824:	f7fe fb8c 	bl	8000f40 <play_wav>
}
 8002828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				play_wav(&audio, "/audio/save_video.wav");
 800282c:	4910      	ldr	r1, [pc, #64]	; (8002870 <HAL_GPIO_EXTI_Callback+0xb0>)
 800282e:	480f      	ldr	r0, [pc, #60]	; (800286c <HAL_GPIO_EXTI_Callback+0xac>)
 8002830:	f7fe bb86 	b.w	8000f40 <play_wav>
}
 8002834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				printf("Help\r\n");
 8002838:	480e      	ldr	r0, [pc, #56]	; (8002874 <HAL_GPIO_EXTI_Callback+0xb4>)
 800283a:	f007 bf7d 	b.w	800a738 <puts>
}
 800283e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				printf("None\r\n");
 8002842:	480d      	ldr	r0, [pc, #52]	; (8002878 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002844:	f007 bf78 	b.w	800a738 <puts>
 8002848:	20001aac 	.word	0x20001aac
 800284c:	0800c838 	.word	0x0800c838
 8002850:	20004064 	.word	0x20004064
 8002854:	0800c8a0 	.word	0x0800c8a0
 8002858:	20004044 	.word	0x20004044
 800285c:	0800c890 	.word	0x0800c890
 8002860:	0800c884 	.word	0x0800c884
 8002864:	0800c850 	.word	0x0800c850
 8002868:	0800c858 	.word	0x0800c858
 800286c:	20000220 	.word	0x20000220
 8002870:	0800c86c 	.word	0x0800c86c
 8002874:	0800c848 	.word	0x0800c848
 8002878:	0800c898 	.word	0x0800c898
 800287c:	00000000 	.word	0x00000000

08002880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002880:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002882:	2300      	movs	r3, #0
{
 8002884:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002886:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800288a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800288e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002892:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4928      	ldr	r1, [pc, #160]	; (8002938 <SystemClock_Config+0xb8>)
 8002898:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800289a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800289c:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80028a0:	4a26      	ldr	r2, [pc, #152]	; (800293c <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80028a6:	6408      	str	r0, [r1, #64]	; 0x40
 80028a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028aa:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80028ae:	9100      	str	r1, [sp, #0]
 80028b0:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	6813      	ldr	r3, [r2, #0]
 80028b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	6813      	ldr	r3, [r2, #0]
 80028c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028c6:	9301      	str	r3, [sp, #4]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c8:	2002      	movs	r0, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80028ca:	9901      	ldr	r1, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028cc:	2100      	movs	r1, #0
 80028ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80028d2:	2010      	movs	r0, #16
 80028d4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80028d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80028dc:	2004      	movs	r0, #4
 80028de:	2107      	movs	r1, #7
 80028e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028e4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028e6:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028e8:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ea:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028ec:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028ee:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028f0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f2:	f003 f85f 	bl	80059b4 <HAL_RCC_OscConfig>
 80028f6:	b108      	cbz	r0, 80028fc <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028f8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80028fa:	e7fe      	b.n	80028fa <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028fc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002928 <SystemClock_Config+0xa8>
 8002900:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002904:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002930 <SystemClock_Config+0xb0>
 8002908:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800290a:	4621      	mov	r1, r4
 800290c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800290e:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002912:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002914:	f003 fa66 	bl	8005de4 <HAL_RCC_ClockConfig>
 8002918:	b108      	cbz	r0, 800291e <SystemClock_Config+0x9e>
 800291a:	b672      	cpsid	i
	while (1)
 800291c:	e7fe      	b.n	800291c <SystemClock_Config+0x9c>
}
 800291e:	b014      	add	sp, #80	; 0x50
 8002920:	bd10      	pop	{r4, pc}
 8002922:	bf00      	nop
 8002924:	f3af 8000 	nop.w
 8002928:	0000000f 	.word	0x0000000f
 800292c:	00000002 	.word	0x00000002
 8002930:	00000000 	.word	0x00000000
 8002934:	00001000 	.word	0x00001000
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000

08002940 <main>:
{
 8002940:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	2400      	movs	r4, #0
{
 8002946:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8002948:	f001 f856 	bl	80039f8 <HAL_Init>
  SystemClock_Config();
 800294c:	f7ff ff98 	bl	8002880 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8002954:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002958:	4dbc      	ldr	r5, [pc, #752]	; (8002c4c <main+0x30c>)
 800295a:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800295e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 8002960:	48bb      	ldr	r0, [pc, #748]	; (8002c50 <main+0x310>)
  hi2c1.Instance = I2C1;
 8002962:	4ebc      	ldr	r6, [pc, #752]	; (8002c54 <main+0x314>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	632b      	str	r3, [r5, #48]	; 0x30
 800296a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	9303      	str	r3, [sp, #12]
 8002972:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002974:	9404      	str	r4, [sp, #16]
 8002976:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800297c:	632b      	str	r3, [r5, #48]	; 0x30
 800297e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	9304      	str	r3, [sp, #16]
 8002986:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002988:	9405      	str	r4, [sp, #20]
 800298a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	632b      	str	r3, [r5, #48]	; 0x30
 8002992:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	9305      	str	r3, [sp, #20]
 800299a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800299c:	9406      	str	r4, [sp, #24]
 800299e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	632b      	str	r3, [r5, #48]	; 0x30
 80029a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	9306      	str	r3, [sp, #24]
 80029ae:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b0:	9407      	str	r4, [sp, #28]
 80029b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	632b      	str	r3, [r5, #48]	; 0x30
 80029ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80029bc:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 80029c0:	2133      	movs	r1, #51	; 0x33
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 80029c4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c6:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, HEADLAMP_OUT_Pin|SD_CS_Pin|CAM_CS_Pin|AMP_ENABLE_Pin, GPIO_PIN_RESET);
 80029c8:	f001 fe2e 	bl	8004628 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_CS_GPIO_Port, DAC_CS_Pin, GPIO_PIN_RESET);
 80029cc:	48a2      	ldr	r0, [pc, #648]	; (8002c58 <main+0x318>)
 80029ce:	4622      	mov	r2, r4
 80029d0:	2104      	movs	r1, #4
 80029d2:	f001 fe29 	bl	8004628 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80029d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029de:	489c      	ldr	r0, [pc, #624]	; (8002c50 <main+0x310>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029e2:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = B1_Pin;
 80029e4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin|CAM_CS_Pin|AMP_ENABLE_Pin;
 80029e8:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029ec:	f001 fd2a 	bl	8004444 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin|CAM_CS_Pin|AMP_ENABLE_Pin;
 80029f0:	f04f 0900 	mov.w	r9, #0
 80029f4:	2231      	movs	r2, #49	; 0x31
 80029f6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f8:	4895      	ldr	r0, [pc, #596]	; (8002c50 <main+0x310>)
 80029fa:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = HEADLAMP_OUT_Pin|CAM_CS_Pin|AMP_ENABLE_Pin;
 80029fc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002a00:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a04:	f001 fd1e 	bl	8004444 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002a08:	2202      	movs	r2, #2
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002a10:	488f      	ldr	r0, [pc, #572]	; (8002c50 <main+0x310>)
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002a12:	2201      	movs	r2, #1
 8002a14:	2300      	movs	r3, #0
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002a16:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002a18:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002a1c:	f001 fd12 	bl	8004444 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002a28:	4889      	ldr	r0, [pc, #548]	; (8002c50 <main+0x310>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002a2c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002a2e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f001 fd07 	bl	8004444 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin;
 8002a36:	2204      	movs	r2, #4
 8002a38:	2301      	movs	r3, #1
  HAL_GPIO_Init(DAC_CS_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	4887      	ldr	r0, [pc, #540]	; (8002c58 <main+0x318>)
 8002a3c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = DAC_CS_Pin;
 8002a3e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002a42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(DAC_CS_GPIO_Port, &GPIO_InitStruct);
 8002a46:	f001 fcfd 	bl	8004444 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8002a4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a4e:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002a50:	4882      	ldr	r0, [pc, #520]	; (8002c5c <main+0x31c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002a54:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8002a56:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	f001 fcf3 	bl	8004444 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002a5e:	4622      	mov	r2, r4
 8002a60:	2101      	movs	r1, #1
 8002a62:	2017      	movs	r0, #23
 8002a64:	f001 fa66 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a68:	2017      	movs	r0, #23
 8002a6a:	f001 faa1 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002a6e:	4622      	mov	r2, r4
 8002a70:	2101      	movs	r1, #1
 8002a72:	2028      	movs	r0, #40	; 0x28
 8002a74:	f001 fa5e 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a78:	2028      	movs	r0, #40	; 0x28
 8002a7a:	f001 fa99 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a7e:	9402      	str	r4, [sp, #8]
 8002a80:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002a82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a86:	632b      	str	r3, [r5, #48]	; 0x30
 8002a88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a8e:	4622      	mov	r2, r4
 8002a90:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a92:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a94:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a96:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a98:	f001 fa4c 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a9c:	2038      	movs	r0, #56	; 0x38
 8002a9e:	f001 fa87 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	203a      	movs	r0, #58	; 0x3a
 8002aa8:	f001 fa44 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002aac:	203a      	movs	r0, #58	; 0x3a
 8002aae:	f001 fa7f 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	2046      	movs	r0, #70	; 0x46
 8002ab8:	f001 fa3c 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002abc:	2046      	movs	r0, #70	; 0x46
 8002abe:	f001 fa77 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.ClockSpeed = 100000;
 8002ac2:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <main+0x320>)
 8002ac4:	4a67      	ldr	r2, [pc, #412]	; (8002c64 <main+0x324>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ac6:	6234      	str	r4, [r6, #32]
  hi2c1.Init.ClockSpeed = 100000;
 8002ac8:	e9c6 2300 	strd	r2, r3, [r6]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002acc:	4630      	mov	r0, r6
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ace:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002ad2:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ad6:	e9c6 3404 	strd	r3, r4, [r6, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ada:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ade:	f001 fffd 	bl	8004adc <HAL_I2C_Init>
 8002ae2:	b108      	cbz	r0, 8002ae8 <main+0x1a8>
 8002ae4:	b672      	cpsid	i
	while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <main+0x1a6>
  hspi2.Instance = SPI2;
 8002ae8:	4b5f      	ldr	r3, [pc, #380]	; (8002c68 <main+0x328>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002aea:	4a60      	ldr	r2, [pc, #384]	; (8002c6c <main+0x32c>)
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aec:	6298      	str	r0, [r3, #40]	; 0x28
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aee:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002af2:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002af6:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002afa:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi2.Init.CRCPolynomial = 10;
 8002afe:	240a      	movs	r4, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b00:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002b04:	f04f 0810 	mov.w	r8, #16
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b08:	4618      	mov	r0, r3
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b0a:	e9c3 2700 	strd	r2, r7, [r3]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b0e:	e9c3 5806 	strd	r5, r8, [r3, #24]
  hspi2.Init.CRCPolynomial = 10;
 8002b12:	62dc      	str	r4, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b14:	f003 fa84 	bl	8006020 <HAL_SPI_Init>
 8002b18:	b108      	cbz	r0, 8002b1e <main+0x1de>
 8002b1a:	b672      	cpsid	i
	while (1)
 8002b1c:	e7fe      	b.n	8002b1c <main+0x1dc>
  huart2.Instance = USART2;
 8002b1e:	4b54      	ldr	r3, [pc, #336]	; (8002c70 <main+0x330>)
  huart2.Init.BaudRate = 115200;
 8002b20:	f8df e15c 	ldr.w	lr, [pc, #348]	; 8002c80 <main+0x340>
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b24:	6118      	str	r0, [r3, #16]
  huart2.Init.BaudRate = 115200;
 8002b26:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b2a:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b2e:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart2.Init.BaudRate = 115200;
 8002b32:	e9c3 e200 	strd	lr, r2, [r3]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b36:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b38:	220c      	movs	r2, #12
 8002b3a:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b3c:	f004 f964 	bl	8006e08 <HAL_UART_Init>
 8002b40:	bb48      	cbnz	r0, 8002b96 <main+0x256>
  hadc1.Instance = ADC1;
 8002b42:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8002c84 <main+0x344>
 8002b46:	9001      	str	r0, [sp, #4]
  MX_FATFS_Init();
 8002b48:	f004 fe36 	bl	80077b8 <MX_FATFS_Init>
  hadc1.Init.ScanConvMode = ENABLE;
 8002b4c:	2301      	movs	r3, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002b4e:	f8df c138 	ldr.w	ip, [pc, #312]	; 8002c88 <main+0x348>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b52:	9801      	ldr	r0, [sp, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b54:	4a47      	ldr	r2, [pc, #284]	; (8002c74 <main+0x334>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b56:	f8c9 0008 	str.w	r0, [r9, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b5a:	e9c9 3304 	strd	r3, r3, [r9, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002b5e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002b62:	e9c9 c300 	strd	ip, r3, [r9]
  hadc1.Init.NbrOfConversion = 3;
 8002b66:	2303      	movs	r3, #3
 8002b68:	f8c9 301c 	str.w	r3, [r9, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b6c:	2300      	movs	r3, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b6e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002b72:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b76:	f889 0018 	strb.w	r0, [r9, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b7a:	f889 0020 	strb.w	r0, [r9, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b7e:	f8c9 000c 	str.w	r0, [r9, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b82:	f889 0030 	strb.w	r0, [r9, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b86:	e9c9 230a 	strd	r2, r3, [r9, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b8a:	4648      	mov	r0, r9
 8002b8c:	f000 ff72 	bl	8003a74 <HAL_ADC_Init>
 8002b90:	b118      	cbz	r0, 8002b9a <main+0x25a>
 8002b92:	b672      	cpsid	i
	while (1)
 8002b94:	e7fe      	b.n	8002b94 <main+0x254>
 8002b96:	b672      	cpsid	i
 8002b98:	e7fe      	b.n	8002b98 <main+0x258>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b9a:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.Channel = ADC_CHANNEL_0;
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ba0:	a90e      	add	r1, sp, #56	; 0x38
 8002ba2:	4648      	mov	r0, r9
  sConfig.Channel = ADC_CHANNEL_0;
 8002ba4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ba8:	f001 f904 	bl	8003db4 <HAL_ADC_ConfigChannel>
 8002bac:	b108      	cbz	r0, 8002bb2 <main+0x272>
 8002bae:	b672      	cpsid	i
	while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <main+0x270>
  sConfig.Channel = ADC_CHANNEL_1;
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bb6:	a90e      	add	r1, sp, #56	; 0x38
 8002bb8:	4648      	mov	r0, r9
  sConfig.Channel = ADC_CHANNEL_1;
 8002bba:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bbe:	f001 f8f9 	bl	8003db4 <HAL_ADC_ConfigChannel>
 8002bc2:	b108      	cbz	r0, 8002bc8 <main+0x288>
 8002bc4:	b672      	cpsid	i
	while (1)
 8002bc6:	e7fe      	b.n	8002bc6 <main+0x286>
  sConfig.Channel = ADC_CHANNEL_4;
 8002bc8:	2204      	movs	r2, #4
 8002bca:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bcc:	4648      	mov	r0, r9
 8002bce:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 8002bd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd4:	f001 f8ee 	bl	8003db4 <HAL_ADC_ConfigChannel>
 8002bd8:	b108      	cbz	r0, 8002bde <main+0x29e>
 8002bda:	b672      	cpsid	i
	while (1)
 8002bdc:	e7fe      	b.n	8002bdc <main+0x29c>
  hspi1.Instance = SPI1;
 8002bde:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8002c8c <main+0x34c>
 8002be2:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <main+0x338>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002be4:	f8c9 801c 	str.w	r8, [r9, #28]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002be8:	e9c9 7001 	strd	r7, r0, [r9, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bec:	e9c9 0003 	strd	r0, r0, [r9, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bf0:	e9c9 0505 	strd	r0, r5, [r9, #20]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bf4:	e9c9 0008 	strd	r0, r0, [r9, #32]
  hspi1.Init.CRCPolynomial = 10;
 8002bf8:	e9c9 040a 	strd	r0, r4, [r9, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bfc:	4648      	mov	r0, r9
  hspi1.Instance = SPI1;
 8002bfe:	f8c9 3000 	str.w	r3, [r9]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c02:	f003 fa0d 	bl	8006020 <HAL_SPI_Init>
 8002c06:	b108      	cbz	r0, 8002c0c <main+0x2cc>
 8002c08:	b672      	cpsid	i
	while (1)
 8002c0a:	e7fe      	b.n	8002c0a <main+0x2ca>
  hspi3.Instance = SPI3;
 8002c0c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002c90 <main+0x350>
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <main+0x33c>)
 8002c12:	f8c8 3000 	str.w	r3, [r8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c1a:	e9c8 0004 	strd	r0, r0, [r8, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c1e:	e9c8 0008 	strd	r0, r0, [r8, #32]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002c22:	f8c8 0008 	str.w	r0, [r8, #8]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c26:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002c2a:	f8c8 300c 	str.w	r3, [r8, #12]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002c2e:	4640      	mov	r0, r8
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c30:	2308      	movs	r3, #8
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002c32:	f8c8 7004 	str.w	r7, [r8, #4]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002c36:	f8c8 5018 	str.w	r5, [r8, #24]
  hspi3.Init.CRCPolynomial = 10;
 8002c3a:	f8c8 402c 	str.w	r4, [r8, #44]	; 0x2c
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002c3e:	f8c8 301c 	str.w	r3, [r8, #28]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002c42:	f003 f9ed 	bl	8006020 <HAL_SPI_Init>
 8002c46:	b328      	cbz	r0, 8002c94 <main+0x354>
 8002c48:	b672      	cpsid	i
	while (1)
 8002c4a:	e7fe      	b.n	8002c4a <main+0x30a>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40020800 	.word	0x40020800
 8002c54:	20003cf8 	.word	0x20003cf8
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	000186a0 	.word	0x000186a0
 8002c64:	40005400 	.word	0x40005400
 8002c68:	20003da4 	.word	0x20003da4
 8002c6c:	40003800 	.word	0x40003800
 8002c70:	20004000 	.word	0x20004000
 8002c74:	0f000001 	.word	0x0f000001
 8002c78:	40013000 	.word	0x40013000
 8002c7c:	40003c00 	.word	0x40003c00
 8002c80:	40004400 	.word	0x40004400
 8002c84:	20003b90 	.word	0x20003b90
 8002c88:	40012000 	.word	0x40012000
 8002c8c:	20003d4c 	.word	0x20003d4c
 8002c90:	20003dfc 	.word	0x20003dfc
  htim2.Instance = TIM2;
 8002c94:	4fa4      	ldr	r7, [pc, #656]	; (8002f28 <main+0x5e8>)
  htim2.Init.Period = 610000;
 8002c96:	4ba5      	ldr	r3, [pc, #660]	; (8002f2c <main+0x5ec>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c98:	60b8      	str	r0, [r7, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c9a:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002c9e:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca2:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca6:	6138      	str	r0, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca8:	61b8      	str	r0, [r7, #24]
  htim2.Init.Period = 610000;
 8002caa:	60fb      	str	r3, [r7, #12]
  htim2.Init.Prescaler = 8399;
 8002cac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cb0:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8002cb4:	e9c7 0300 	strd	r0, r3, [r7]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cb8:	4638      	mov	r0, r7
 8002cba:	f003 fcb3 	bl	8006624 <HAL_TIM_Base_Init>
 8002cbe:	b108      	cbz	r0, 8002cc4 <main+0x384>
 8002cc0:	b672      	cpsid	i
	while (1)
 8002cc2:	e7fe      	b.n	8002cc2 <main+0x382>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cc4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cc8:	4897      	ldr	r0, [pc, #604]	; (8002f28 <main+0x5e8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cca:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ccc:	a90e      	add	r1, sp, #56	; 0x38
 8002cce:	f003 fef9 	bl	8006ac4 <HAL_TIM_ConfigClockSource>
 8002cd2:	b108      	cbz	r0, 8002cd8 <main+0x398>
 8002cd4:	b672      	cpsid	i
	while (1)
 8002cd6:	e7fe      	b.n	8002cd6 <main+0x396>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cd8:	4893      	ldr	r0, [pc, #588]	; (8002f28 <main+0x5e8>)
 8002cda:	a90a      	add	r1, sp, #40	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cdc:	f04f 0a00 	mov.w	sl, #0
 8002ce0:	f04f 0b00 	mov.w	fp, #0
 8002ce4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ce8:	f004 f852 	bl	8006d90 <HAL_TIMEx_MasterConfigSynchronization>
 8002cec:	4603      	mov	r3, r0
 8002cee:	b108      	cbz	r0, 8002cf4 <main+0x3b4>
 8002cf0:	b672      	cpsid	i
	while (1)
 8002cf2:	e7fe      	b.n	8002cf2 <main+0x3b2>
  huart1.Instance = USART1;
 8002cf4:	488e      	ldr	r0, [pc, #568]	; (8002f30 <main+0x5f0>)
  huart1.Init.BaudRate = 115200;
 8002cf6:	f8df e28c 	ldr.w	lr, [pc, #652]	; 8002f84 <main+0x644>
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cfa:	6103      	str	r3, [r0, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cfc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d00:	61c3      	str	r3, [r0, #28]
  huart1.Init.BaudRate = 115200;
 8002d02:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d06:	e9c0 e300 	strd	lr, r3, [r0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002d0a:	220c      	movs	r2, #12
 8002d0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d10:	e9c0 2305 	strd	r2, r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d14:	f004 f878 	bl	8006e08 <HAL_UART_Init>
 8002d18:	b108      	cbz	r0, 8002d1e <main+0x3de>
 8002d1a:	b672      	cpsid	i
	while (1)
 8002d1c:	e7fe      	b.n	8002d1c <main+0x3dc>
  htim3.Instance = TIM3;
 8002d1e:	4c85      	ldr	r4, [pc, #532]	; (8002f34 <main+0x5f4>)
  htim3.Init.Prescaler = 8399;
 8002d20:	f8df c264 	ldr.w	ip, [pc, #612]	; 8002f88 <main+0x648>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d24:	9008      	str	r0, [sp, #32]
  htim3.Init.Prescaler = 8399;
 8002d26:	f242 03cf 	movw	r3, #8399	; 0x20cf
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d2a:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8002d2e:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d32:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002d36:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8002d3a:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  htim3.Init.Prescaler = 8399;
 8002d3e:	e9c4 c300 	strd	ip, r3, [r4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d42:	9014      	str	r0, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d44:	9009      	str	r0, [sp, #36]	; 0x24
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d46:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d48:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4a:	61a0      	str	r0, [r4, #24]
  htim3.Init.Period = 1000;
 8002d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d50:	4620      	mov	r0, r4
  htim3.Init.Period = 1000;
 8002d52:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d54:	f003 fc66 	bl	8006624 <HAL_TIM_Base_Init>
 8002d58:	b108      	cbz	r0, 8002d5e <main+0x41e>
 8002d5a:	b672      	cpsid	i
	while (1)
 8002d5c:	e7fe      	b.n	8002d5c <main+0x41c>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d5e:	a90a      	add	r1, sp, #40	; 0x28
 8002d60:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d62:	950a      	str	r5, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d64:	f003 feae 	bl	8006ac4 <HAL_TIM_ConfigClockSource>
 8002d68:	b108      	cbz	r0, 8002d6e <main+0x42e>
 8002d6a:	b672      	cpsid	i
	while (1)
 8002d6c:	e7fe      	b.n	8002d6c <main+0x42c>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f003 fd24 	bl	80067bc <HAL_TIM_PWM_Init>
 8002d74:	b108      	cbz	r0, 8002d7a <main+0x43a>
 8002d76:	b672      	cpsid	i
	while (1)
 8002d78:	e7fe      	b.n	8002d78 <main+0x438>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d7a:	a908      	add	r1, sp, #32
 8002d7c:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7e:	e9cd ab08 	strd	sl, fp, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d82:	f004 f805 	bl	8006d90 <HAL_TIMEx_MasterConfigSynchronization>
 8002d86:	4602      	mov	r2, r0
 8002d88:	b108      	cbz	r0, 8002d8e <main+0x44e>
 8002d8a:	b672      	cpsid	i
	while (1)
 8002d8c:	e7fe      	b.n	8002d8c <main+0x44c>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d8e:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d90:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d92:	f04f 0a60 	mov.w	sl, #96	; 0x60
 8002d96:	f04f 0b00 	mov.w	fp, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d9a:	a90e      	add	r1, sp, #56	; 0x38
 8002d9c:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d9e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002da2:	f003 fd89 	bl	80068b8 <HAL_TIM_PWM_ConfigChannel>
 8002da6:	b108      	cbz	r0, 8002dac <main+0x46c>
 8002da8:	b672      	cpsid	i
	while (1)
 8002daa:	e7fe      	b.n	8002daa <main+0x46a>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dac:	2204      	movs	r2, #4
 8002dae:	a90e      	add	r1, sp, #56	; 0x38
 8002db0:	4620      	mov	r0, r4
 8002db2:	f003 fd81 	bl	80068b8 <HAL_TIM_PWM_ConfigChannel>
 8002db6:	b108      	cbz	r0, 8002dbc <main+0x47c>
 8002db8:	b672      	cpsid	i
	while (1)
 8002dba:	e7fe      	b.n	8002dba <main+0x47a>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	a90e      	add	r1, sp, #56	; 0x38
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f003 fd79 	bl	80068b8 <HAL_TIM_PWM_ConfigChannel>
 8002dc6:	b108      	cbz	r0, 8002dcc <main+0x48c>
 8002dc8:	b672      	cpsid	i
	while (1)
 8002dca:	e7fe      	b.n	8002dca <main+0x48a>
  htim10.Instance = TIM10;
 8002dcc:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8002f8c <main+0x64c>
  HAL_TIM_MspPostInit(&htim3);
 8002dd0:	4858      	ldr	r0, [pc, #352]	; (8002f34 <main+0x5f4>)
 8002dd2:	f000 fac5 	bl	8003360 <HAL_TIM_MspPostInit>
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd6:	f242 0bcf 	movw	fp, #8399	; 0x20cf
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e9ca b301 	strd	fp, r3, [sl, #4]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de0:	f8ca 3010 	str.w	r3, [sl, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de4:	f8ca 3018 	str.w	r3, [sl, #24]
  htim10.Instance = TIM10;
 8002de8:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <main+0x5f8>)
 8002dea:	f8ca 3000 	str.w	r3, [sl]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002dee:	4650      	mov	r0, sl
  htim10.Init.Period = 20000;
 8002df0:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002df4:	f8ca 300c 	str.w	r3, [sl, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002df8:	f003 fc14 	bl	8006624 <HAL_TIM_Base_Init>
 8002dfc:	b108      	cbz	r0, 8002e02 <main+0x4c2>
 8002dfe:	b672      	cpsid	i
	while (1)
 8002e00:	e7fe      	b.n	8002e00 <main+0x4c0>
  htim4.Instance = TIM4;
 8002e02:	4d4e      	ldr	r5, [pc, #312]	; (8002f3c <main+0x5fc>)
 8002e04:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <main+0x600>)
 8002e06:	602b      	str	r3, [r5, #0]
  htim4.Init.Period = 7619;
 8002e08:	f641 53c3 	movw	r3, #7619	; 0x1dc3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e0c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002e10:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e14:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e18:	e9c5 0001 	strd	r0, r0, [r5, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1c:	6128      	str	r0, [r5, #16]
  htim4.Init.Period = 7619;
 8002e1e:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e20:	4628      	mov	r0, r5
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e26:	f003 fbfd 	bl	8006624 <HAL_TIM_Base_Init>
 8002e2a:	b108      	cbz	r0, 8002e30 <main+0x4f0>
 8002e2c:	b672      	cpsid	i
	while (1)
 8002e2e:	e7fe      	b.n	8002e2e <main+0x4ee>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e34:	a90e      	add	r1, sp, #56	; 0x38
 8002e36:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e38:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e3a:	f003 fe43 	bl	8006ac4 <HAL_TIM_ConfigClockSource>
 8002e3e:	b108      	cbz	r0, 8002e44 <main+0x504>
 8002e40:	b672      	cpsid	i
	while (1)
 8002e42:	e7fe      	b.n	8002e42 <main+0x502>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e48:	a90a      	add	r1, sp, #40	; 0x28
 8002e4a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e50:	f003 ff9e 	bl	8006d90 <HAL_TIMEx_MasterConfigSynchronization>
 8002e54:	4603      	mov	r3, r0
 8002e56:	b108      	cbz	r0, 8002e5c <main+0x51c>
 8002e58:	b672      	cpsid	i
	while (1)
 8002e5a:	e7fe      	b.n	8002e5a <main+0x51a>
  htim11.Instance = TIM11;
 8002e5c:	4839      	ldr	r0, [pc, #228]	; (8002f44 <main+0x604>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5e:	e9c0 b301 	strd	fp, r3, [r0, #4]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e62:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e64:	6183      	str	r3, [r0, #24]
  htim11.Instance = TIM11;
 8002e66:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <main+0x608>)
 8002e68:	6003      	str	r3, [r0, #0]
  htim11.Init.Period = 65535;
 8002e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e6e:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002e70:	f003 fbd8 	bl	8006624 <HAL_TIM_Base_Init>
 8002e74:	4683      	mov	fp, r0
 8002e76:	b108      	cbz	r0, 8002e7c <main+0x53c>
 8002e78:	b672      	cpsid	i
	while (1)
 8002e7a:	e7fe      	b.n	8002e7a <main+0x53a>
	FIX_TIMER_TRIGGER(&htim3);
 8002e7c:	6820      	ldr	r0, [r4, #0]
	FIX_TIMER_TRIGGER(&htim10);
 8002e7e:	f8da 2000 	ldr.w	r2, [sl]
	FIX_TIMER_TRIGGER(&htim4);
 8002e82:	6829      	ldr	r1, [r5, #0]
	FIX_TIMER_TRIGGER(&htim2);
 8002e84:	683f      	ldr	r7, [r7, #0]
 8002e86:	f06f 0301 	mvn.w	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
	FIX_TIMER_TRIGGER(&htim3);
 8002e8c:	6103      	str	r3, [r0, #16]
	FIX_TIMER_TRIGGER(&htim4);
 8002e8e:	610b      	str	r3, [r1, #16]
	HAL_TIM_Base_Start_IT(&htim2);
 8002e90:	4825      	ldr	r0, [pc, #148]	; (8002f28 <main+0x5e8>)
	FIX_TIMER_TRIGGER(&htim10);
 8002e92:	6113      	str	r3, [r2, #16]
	HAL_TIM_Base_Start_IT(&htim2);
 8002e94:	f003 fc44 	bl	8006720 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002e98:	482c      	ldr	r0, [pc, #176]	; (8002f4c <main+0x60c>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	2110      	movs	r1, #16
 8002e9e:	f001 fbc3 	bl	8004628 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8002ea2:	a90e      	add	r1, sp, #56	; 0x38
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	2364      	movs	r3, #100	; 0x64
 8002ea8:	4829      	ldr	r0, [pc, #164]	; (8002f50 <main+0x610>)
	uint8_t buf[1] = { 0x00 }; // dummy write
 8002eaa:	f88d b038 	strb.w	fp, [sp, #56]	; 0x38
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8002eae:	f003 f919 	bl	80060e4 <HAL_SPI_Transmit>
	ov5462.hi2c = &hi2c1;
 8002eb2:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <main+0x614>)
	printf("program start!\r\n");
 8002eb4:	4828      	ldr	r0, [pc, #160]	; (8002f58 <main+0x618>)
	ov5462.hspi = &CAMERA_SPI;
 8002eb6:	e9c3 6900 	strd	r6, r9, [r3]
	printf("program start!\r\n");
 8002eba:	f007 fc3d 	bl	800a738 <puts>
	HAL_Delay(1000);
 8002ebe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ec2:	f000 fdc5 	bl	8003a50 <HAL_Delay>
	if(testSD()) {
 8002ec6:	f7ff fb77 	bl	80025b8 <testSD>
 8002eca:	b348      	cbz	r0, 8002f20 <main+0x5e0>
		printf("SD test FAIL!\r\n");
 8002ecc:	4823      	ldr	r0, [pc, #140]	; (8002f5c <main+0x61c>)
 8002ece:	f007 fc33 	bl	800a738 <puts>
	Headlamp_Init();
 8002ed2:	f7ff faa3 	bl	800241c <Headlamp_Init>
	ext_dac.cs_port = GPIOD;
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <main+0x620>)
	audio.fs = &fs;
 8002ed8:	4c22      	ldr	r4, [pc, #136]	; (8002f64 <main+0x624>)
	ext_dac.cs_port = GPIOD;
 8002eda:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <main+0x628>)
 8002edc:	605a      	str	r2, [r3, #4]
	ext_dac.cs_pin = GPIO_PIN_2;
 8002ede:	2204      	movs	r2, #4
 8002ee0:	811a      	strh	r2, [r3, #8]
	ext_dac.hspi = &hspi3;
 8002ee2:	f8c3 8000 	str.w	r8, [r3]
	audio.amp_enable_port = GPIOC;
 8002ee6:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <main+0x60c>)
	audio.ext_dac = &ext_dac;
 8002ee8:	60a3      	str	r3, [r4, #8]
	audio.amp_enable_pin = GPIO_PIN_5;
 8002eea:	2320      	movs	r3, #32
	audio.amp_enable_port = GPIOC;
 8002eec:	6122      	str	r2, [r4, #16]
	audio.amp_enable_pin = GPIO_PIN_5;
 8002eee:	f8a4 3856 	strh.w	r3, [r4, #2134]	; 0x856
	audio.fs = &fs;
 8002ef2:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <main+0x62c>)
	audio.fil = &audio_fil;
 8002ef4:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <main+0x630>)
	audio.htim = &htim4;
 8002ef6:	60e5      	str	r5, [r4, #12]
	audio_init(&audio);
 8002ef8:	4620      	mov	r0, r4
	audio.fil = &audio_fil;
 8002efa:	e9c4 2300 	strd	r2, r3, [r4]
	audio_init(&audio);
 8002efe:	f7fe f80d 	bl	8000f1c <audio_init>
	btns.hi2c = &hi2c1;
 8002f02:	481c      	ldr	r0, [pc, #112]	; (8002f74 <main+0x634>)
 8002f04:	6006      	str	r6, [r0, #0]
	buttons_init(&btns);
 8002f06:	f7fe f943 	bl	8001190 <buttons_init>
	imu.hi2c = &hi2c1;
 8002f0a:	481b      	ldr	r0, [pc, #108]	; (8002f78 <main+0x638>)
 8002f0c:	6006      	str	r6, [r0, #0]
	imu_init(&imu);
 8002f0e:	f7ff fac5 	bl	800249c <imu_init>
	init_complete = 1;
 8002f12:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <main+0x63c>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
		check_and_fill_audio_buf(&audio);
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f7fe f821 	bl	8000f60 <check_and_fill_audio_buf>
	while (1)
 8002f1e:	e7fb      	b.n	8002f18 <main+0x5d8>
		printf("SD test PASS!\r\n");
 8002f20:	4817      	ldr	r0, [pc, #92]	; (8002f80 <main+0x640>)
 8002f22:	f007 fc09 	bl	800a738 <puts>
 8002f26:	e7d4      	b.n	8002ed2 <main+0x592>
 8002f28:	20003ee4 	.word	0x20003ee4
 8002f2c:	00094ed0 	.word	0x00094ed0
 8002f30:	20003fbc 	.word	0x20003fbc
 8002f34:	20003f2c 	.word	0x20003f2c
 8002f38:	40014400 	.word	0x40014400
 8002f3c:	20003f74 	.word	0x20003f74
 8002f40:	40000800 	.word	0x40000800
 8002f44:	20003e9c 	.word	0x20003e9c
 8002f48:	40014800 	.word	0x40014800
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	20003d4c 	.word	0x20003d4c
 8002f54:	20004058 	.word	0x20004058
 8002f58:	0800c8b4 	.word	0x0800c8b4
 8002f5c:	0800c8c4 	.word	0x0800c8c4
 8002f60:	20001b14 	.word	0x20001b14
 8002f64:	20000220 	.word	0x20000220
 8002f68:	40020c00 	.word	0x40020c00
 8002f6c:	20002b58 	.word	0x20002b58
 8002f70:	20000a7c 	.word	0x20000a7c
 8002f74:	20001aac 	.word	0x20001aac
 8002f78:	20004044 	.word	0x20004044
 8002f7c:	20004050 	.word	0x20004050
 8002f80:	0800c8d4 	.word	0x0800c8d4
 8002f84:	40011000 	.word	0x40011000
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	20003e54 	.word	0x20003e54

08002f90 <__io_putchar>:
{
 8002f90:	b500      	push	{lr}
 8002f92:	b083      	sub	sp, #12
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8002f98:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	a901      	add	r1, sp, #4
 8002f9e:	4803      	ldr	r0, [pc, #12]	; (8002fac <__io_putchar+0x1c>)
 8002fa0:	f003 ffcc 	bl	8006f3c <HAL_UART_Transmit>
}
 8002fa4:	9801      	ldr	r0, [sp, #4]
 8002fa6:	b003      	add	sp, #12
 8002fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fac:	20004000 	.word	0x20004000

08002fb0 <Error_Handler>:
 8002fb0:	b672      	cpsid	i
	while (1)
 8002fb2:	e7fe      	b.n	8002fb2 <Error_Handler+0x2>

08002fb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <HAL_MspInit+0x38>)
 8002fb8:	2100      	movs	r1, #0
 8002fba:	9100      	str	r1, [sp, #0]
 8002fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44
 8002fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002fca:	9200      	str	r2, [sp, #0]
 8002fcc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	9101      	str	r1, [sp, #4]
 8002fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002fe2:	2005      	movs	r0, #5
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe4:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002fe6:	f000 bf93 	b.w	8003f10 <HAL_NVIC_SetPriorityGrouping>
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800

08002ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ff0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002ff2:	4b25      	ldr	r3, [pc, #148]	; (8003088 <HAL_ADC_MspInit+0x98>)
 8002ff4:	6802      	ldr	r2, [r0, #0]
{
 8002ff6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8002ffa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003000:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003004:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8003006:	d001      	beq.n	800300c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003008:	b008      	add	sp, #32
 800300a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800300c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003010:	9400      	str	r4, [sp, #0]
 8003012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8003014:	4e1d      	ldr	r6, [pc, #116]	; (800308c <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301a:	645a      	str	r2, [r3, #68]	; 0x44
 800301c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800301e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003022:	9200      	str	r2, [sp, #0]
 8003024:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003026:	9401      	str	r4, [sp, #4]
 8003028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_Pin|ULTRA_LEFT_ADC_Pin|ULTRA_CENTER_ADC_Pin;
 8003038:	2213      	movs	r2, #19
 800303a:	2303      	movs	r3, #3
 800303c:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303e:	a902      	add	r1, sp, #8
 8003040:	4813      	ldr	r0, [pc, #76]	; (8003090 <HAL_ADC_MspInit+0xa0>)
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_Pin|ULTRA_LEFT_ADC_Pin|ULTRA_CENTER_ADC_Pin;
 8003042:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003048:	f001 f9fc 	bl	8004444 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800304c:	4a11      	ldr	r2, [pc, #68]	; (8003094 <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800304e:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003050:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003054:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003058:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800305a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800305e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003062:	e9c6 2305 	strd	r2, r3, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003066:	4630      	mov	r0, r6
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003068:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800306c:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003070:	e9c6 3407 	strd	r3, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003074:	f000 ffc4 	bl	8004000 <HAL_DMA_Init>
 8003078:	b918      	cbnz	r0, 8003082 <HAL_ADC_MspInit+0x92>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800307a:	63ae      	str	r6, [r5, #56]	; 0x38
 800307c:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800307e:	b008      	add	sp, #32
 8003080:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003082:	f7ff ff95 	bl	8002fb0 <Error_Handler>
 8003086:	e7f8      	b.n	800307a <HAL_ADC_MspInit+0x8a>
 8003088:	40012000 	.word	0x40012000
 800308c:	20003bd8 	.word	0x20003bd8
 8003090:	40020000 	.word	0x40020000
 8003094:	40026410 	.word	0x40026410

08003098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003098:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 800309a:	4b18      	ldr	r3, [pc, #96]	; (80030fc <HAL_I2C_MspInit+0x64>)
 800309c:	6802      	ldr	r2, [r0, #0]
{
 800309e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 80030a2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80030a8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80030ac:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 80030ae:	d001      	beq.n	80030b4 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030b0:	b009      	add	sp, #36	; 0x24
 80030b2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b4:	4d12      	ldr	r5, [pc, #72]	; (8003100 <HAL_I2C_MspInit+0x68>)
 80030b6:	9400      	str	r4, [sp, #0]
 80030b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ba:	4812      	ldr	r0, [pc, #72]	; (8003104 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	632b      	str	r3, [r5, #48]	; 0x30
 80030c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80030ce:	2312      	movs	r3, #18
 80030d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d4:	2303      	movs	r3, #3
 80030d6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030da:	2304      	movs	r3, #4
 80030dc:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030de:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e0:	f001 f9b0 	bl	8004444 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030e4:	9401      	str	r4, [sp, #4]
 80030e6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80030e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ec:	642b      	str	r3, [r5, #64]	; 0x40
 80030ee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80030f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	9b01      	ldr	r3, [sp, #4]
}
 80030f8:	b009      	add	sp, #36	; 0x24
 80030fa:	bd30      	pop	{r4, r5, pc}
 80030fc:	40005400 	.word	0x40005400
 8003100:	40023800 	.word	0x40023800
 8003104:	40020400 	.word	0x40020400

08003108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003108:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 800310a:	6802      	ldr	r2, [r0, #0]
 800310c:	4949      	ldr	r1, [pc, #292]	; (8003234 <HAL_SPI_MspInit+0x12c>)
{
 800310e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8003112:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8003118:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800311c:	930c      	str	r3, [sp, #48]	; 0x30
  if(hspi->Instance==SPI1)
 800311e:	d007      	beq.n	8003130 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8003120:	4945      	ldr	r1, [pc, #276]	; (8003238 <HAL_SPI_MspInit+0x130>)
 8003122:	428a      	cmp	r2, r1
 8003124:	d027      	beq.n	8003176 <HAL_SPI_MspInit+0x6e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8003126:	4945      	ldr	r1, [pc, #276]	; (800323c <HAL_SPI_MspInit+0x134>)
 8003128:	428a      	cmp	r2, r1
 800312a:	d05f      	beq.n	80031ec <HAL_SPI_MspInit+0xe4>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800312c:	b00e      	add	sp, #56	; 0x38
 800312e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003130:	4a43      	ldr	r2, [pc, #268]	; (8003240 <HAL_SPI_MspInit+0x138>)
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003136:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800313a:	6450      	str	r0, [r2, #68]	; 0x44
 800313c:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800313e:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8003142:	9001      	str	r0, [sp, #4]
 8003144:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003146:	9302      	str	r3, [sp, #8]
 8003148:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314a:	483e      	ldr	r0, [pc, #248]	; (8003244 <HAL_SPI_MspInit+0x13c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
 8003152:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315a:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800315c:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315e:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = CAM_SCK_Pin|CAM_MISO_Pin|CAM_MOSI_Pin;
 8003160:	26e0      	movs	r6, #224	; 0xe0
 8003162:	2702      	movs	r7, #2
 8003164:	e9cd 6708 	strd	r6, r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003168:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316c:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	f001 f969 	bl	8004444 <HAL_GPIO_Init>
}
 8003172:	b00e      	add	sp, #56	; 0x38
 8003174:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003176:	4a32      	ldr	r2, [pc, #200]	; (8003240 <HAL_SPI_MspInit+0x138>)
 8003178:	9303      	str	r3, [sp, #12]
 800317a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800317c:	4832      	ldr	r0, [pc, #200]	; (8003248 <HAL_SPI_MspInit+0x140>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800317e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003182:	6411      	str	r1, [r2, #64]	; 0x40
 8003184:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003186:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800318a:	9103      	str	r1, [sp, #12]
 800318c:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800318e:	9304      	str	r3, [sp, #16]
 8003190:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003192:	f041 0104 	orr.w	r1, r1, #4
 8003196:	6311      	str	r1, [r2, #48]	; 0x30
 8003198:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800319a:	f001 0104 	and.w	r1, r1, #4
 800319e:	9104      	str	r1, [sp, #16]
 80031a0:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a2:	9305      	str	r3, [sp, #20]
 80031a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	6313      	str	r3, [r2, #48]	; 0x30
 80031ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031b4:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b6:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = SD_MISO_Pin|SD_MOSI_Pin;
 80031b8:	220c      	movs	r2, #12
 80031ba:	2601      	movs	r6, #1
 80031bc:	2703      	movs	r7, #3
 80031be:	2302      	movs	r3, #2
 80031c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80031c4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031ca:	940c      	str	r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031cc:	f001 f93a 	bl	8004444 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 80031d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d4:	2302      	movs	r3, #2
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80031d6:	481d      	ldr	r0, [pc, #116]	; (800324c <HAL_SPI_MspInit+0x144>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031d8:	940c      	str	r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80031da:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 80031dc:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80031e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80031e4:	f001 f92e 	bl	8004444 <HAL_GPIO_Init>
}
 80031e8:	b00e      	add	sp, #56	; 0x38
 80031ea:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031ec:	4a14      	ldr	r2, [pc, #80]	; (8003240 <HAL_SPI_MspInit+0x138>)
 80031ee:	9306      	str	r3, [sp, #24]
 80031f0:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80031f2:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80031f6:	6410      	str	r0, [r2, #64]	; 0x40
 80031f8:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80031fa:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 80031fe:	9006      	str	r0, [sp, #24]
 8003200:	9806      	ldr	r0, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003202:	9307      	str	r3, [sp, #28]
 8003204:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003206:	4810      	ldr	r0, [pc, #64]	; (8003248 <HAL_SPI_MspInit+0x140>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003216:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003218:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = DAC_SCK_Pin|DAC_MOSI_Pin;
 800321c:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 8003220:	2702      	movs	r7, #2
 8003222:	e9cd 6708 	strd	r6, r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003226:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800322a:	9c07      	ldr	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322c:	f001 f90a 	bl	8004444 <HAL_GPIO_Init>
}
 8003230:	b00e      	add	sp, #56	; 0x38
 8003232:	bdd0      	pop	{r4, r6, r7, pc}
 8003234:	40013000 	.word	0x40013000
 8003238:	40003800 	.word	0x40003800
 800323c:	40003c00 	.word	0x40003c00
 8003240:	40023800 	.word	0x40023800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020800 	.word	0x40020800
 800324c:	40020400 	.word	0x40020400

08003250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003250:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8003252:	6803      	ldr	r3, [r0, #0]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8003258:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 800325a:	d024      	beq.n	80032a6 <HAL_TIM_Base_MspInit+0x56>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800325c:	4a3b      	ldr	r2, [pc, #236]	; (800334c <HAL_TIM_Base_MspInit+0xfc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d038      	beq.n	80032d4 <HAL_TIM_Base_MspInit+0x84>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8003262:	4a3b      	ldr	r2, [pc, #236]	; (8003350 <HAL_TIM_Base_MspInit+0x100>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d05a      	beq.n	800331e <HAL_TIM_Base_MspInit+0xce>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8003268:	4a3a      	ldr	r2, [pc, #232]	; (8003354 <HAL_TIM_Base_MspInit+0x104>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d005      	beq.n	800327a <HAL_TIM_Base_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 800326e:	4a3a      	ldr	r2, [pc, #232]	; (8003358 <HAL_TIM_Base_MspInit+0x108>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d045      	beq.n	8003300 <HAL_TIM_Base_MspInit+0xb0>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003274:	b007      	add	sp, #28
 8003276:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 800327a:	4b38      	ldr	r3, [pc, #224]	; (800335c <HAL_TIM_Base_MspInit+0x10c>)
 800327c:	2200      	movs	r2, #0
 800327e:	9204      	str	r2, [sp, #16]
 8003280:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003282:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003286:	6459      	str	r1, [r3, #68]	; 0x44
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8003290:	2019      	movs	r0, #25
 8003292:	2101      	movs	r1, #1
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003294:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8003296:	f000 fe4d 	bl	8003f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800329a:	2019      	movs	r0, #25
}
 800329c:	b007      	add	sp, #28
 800329e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032a2:	f000 be85 	b.w	8003fb0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032a6:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80032aa:	2200      	movs	r2, #0
 80032ac:	9201      	str	r2, [sp, #4]
 80032ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032b0:	f041 0101 	orr.w	r1, r1, #1
 80032b4:	6419      	str	r1, [r3, #64]	; 0x40
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80032be:	201c      	movs	r0, #28
 80032c0:	2102      	movs	r1, #2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032c2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80032c4:	f000 fe36 	bl	8003f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032c8:	201c      	movs	r0, #28
}
 80032ca:	b007      	add	sp, #28
 80032cc:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032d0:	f000 be6e 	b.w	8003fb0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032d4:	4b21      	ldr	r3, [pc, #132]	; (800335c <HAL_TIM_Base_MspInit+0x10c>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	9202      	str	r2, [sp, #8]
 80032da:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032dc:	f041 0102 	orr.w	r1, r1, #2
 80032e0:	6419      	str	r1, [r3, #64]	; 0x40
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80032ea:	201d      	movs	r0, #29
 80032ec:	2101      	movs	r1, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ee:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80032f0:	f000 fe20 	bl	8003f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032f4:	201d      	movs	r0, #29
}
 80032f6:	b007      	add	sp, #28
 80032f8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032fc:	f000 be58 	b.w	8003fb0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003300:	4b16      	ldr	r3, [pc, #88]	; (800335c <HAL_TIM_Base_MspInit+0x10c>)
 8003302:	2200      	movs	r2, #0
 8003304:	9205      	str	r2, [sp, #20]
 8003306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003308:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800330c:	645a      	str	r2, [r3, #68]	; 0x44
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003314:	9305      	str	r3, [sp, #20]
 8003316:	9b05      	ldr	r3, [sp, #20]
}
 8003318:	b007      	add	sp, #28
 800331a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 800331e:	4b0f      	ldr	r3, [pc, #60]	; (800335c <HAL_TIM_Base_MspInit+0x10c>)
 8003320:	2200      	movs	r2, #0
 8003322:	9203      	str	r2, [sp, #12]
 8003324:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003326:	f041 0104 	orr.w	r1, r1, #4
 800332a:	6419      	str	r1, [r3, #64]	; 0x40
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003334:	201e      	movs	r0, #30
 8003336:	2101      	movs	r1, #1
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003338:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800333a:	f000 fdfb 	bl	8003f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800333e:	201e      	movs	r0, #30
}
 8003340:	b007      	add	sp, #28
 8003342:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003346:	f000 be33 	b.w	8003fb0 <HAL_NVIC_EnableIRQ>
 800334a:	bf00      	nop
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40014400 	.word	0x40014400
 8003358:	40014800 	.word	0x40014800
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003360:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8003362:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <HAL_TIM_MspPostInit+0x58>)
 8003364:	6801      	ldr	r1, [r0, #0]
{
 8003366:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 800336a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003370:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003374:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM3)
 8003376:	d002      	beq.n	800337e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003378:	b009      	add	sp, #36	; 0x24
 800337a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800337e:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003386:	480d      	ldr	r0, [pc, #52]	; (80033bc <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = LEFT_HAPTIC_Pin|CENTER_HAPTIC_Pin|RIGHT_HAPTIC_Pin;
 8003390:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80033b0 <HAL_TIM_MspPostInit+0x50>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800339a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800339c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = LEFT_HAPTIC_Pin|CENTER_HAPTIC_Pin|RIGHT_HAPTIC_Pin;
 800339e:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a2:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033a4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a6:	f001 f84d 	bl	8004444 <HAL_GPIO_Init>
}
 80033aa:	b009      	add	sp, #36	; 0x24
 80033ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80033b0:	000001c0 	.word	0x000001c0
 80033b4:	00000002 	.word	0x00000002
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40020800 	.word	0x40020800

080033c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033c0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80033c2:	6803      	ldr	r3, [r0, #0]
 80033c4:	4a49      	ldr	r2, [pc, #292]	; (80034ec <HAL_UART_MspInit+0x12c>)
{
 80033c6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80033ca:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80033d0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80033d4:	9408      	str	r4, [sp, #32]
  if(huart->Instance==USART1)
 80033d6:	d004      	beq.n	80033e2 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80033d8:	4a45      	ldr	r2, [pc, #276]	; (80034f0 <HAL_UART_MspInit+0x130>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d05e      	beq.n	800349c <HAL_UART_MspInit+0xdc>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033de:	b00a      	add	sp, #40	; 0x28
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80033e2:	4b44      	ldr	r3, [pc, #272]	; (80034f4 <HAL_UART_MspInit+0x134>)
 80033e4:	9400      	str	r4, [sp, #0]
 80033e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80033e8:	4e43      	ldr	r6, [pc, #268]	; (80034f8 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80033ea:	f042 0210 	orr.w	r2, r2, #16
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
 80033f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f2:	f002 0210 	and.w	r2, r2, #16
 80033f6:	9200      	str	r2, [sp, #0]
 80033f8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	9401      	str	r4, [sp, #4]
 80033fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin|XBEE_CTS_Pin|XBEE_RTS_Pin;
 800340c:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
 8003410:	2302      	movs	r3, #2
 8003412:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003416:	2303      	movs	r3, #3
 8003418:	9307      	str	r3, [sp, #28]
 800341a:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341e:	4837      	ldr	r0, [pc, #220]	; (80034fc <HAL_UART_MspInit+0x13c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003420:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003422:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003424:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003426:	f001 f80d 	bl	8004444 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800342a:	4a35      	ldr	r2, [pc, #212]	; (8003500 <HAL_UART_MspInit+0x140>)
 800342c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003430:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003434:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003436:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800343a:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800343e:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003442:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003446:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800344a:	f000 fdd9 	bl	8004000 <HAL_DMA_Init>
 800344e:	2800      	cmp	r0, #0
 8003450:	d148      	bne.n	80034e4 <HAL_UART_MspInit+0x124>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003452:	4c2c      	ldr	r4, [pc, #176]	; (8003504 <HAL_UART_MspInit+0x144>)
 8003454:	492c      	ldr	r1, [pc, #176]	; (8003508 <HAL_UART_MspInit+0x148>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003456:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003458:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800345c:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800345e:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003462:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003464:	2140      	movs	r1, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003466:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800346a:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800346e:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003472:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003476:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003478:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800347a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800347c:	f000 fdc0 	bl	8004000 <HAL_DMA_Init>
 8003480:	2800      	cmp	r0, #0
 8003482:	d12c      	bne.n	80034de <HAL_UART_MspInit+0x11e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003484:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2101      	movs	r1, #1
 800348a:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800348c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800348e:	f000 fd51 	bl	8003f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003492:	2025      	movs	r0, #37	; 0x25
 8003494:	f000 fd8c 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
}
 8003498:	b00a      	add	sp, #40	; 0x28
 800349a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800349c:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_UART_MspInit+0x134>)
 800349e:	9402      	str	r4, [sp, #8]
 80034a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a2:	4816      	ldr	r0, [pc, #88]	; (80034fc <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80034a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
 80034aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80034b0:	9202      	str	r2, [sp, #8]
 80034b2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b4:	9403      	str	r4, [sp, #12]
 80034b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034c8:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 80034ca:	240c      	movs	r4, #12
 80034cc:	2502      	movs	r5, #2
 80034ce:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034d4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d6:	f000 ffb5 	bl	8004444 <HAL_GPIO_Init>
}
 80034da:	b00a      	add	sp, #40	; 0x28
 80034dc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80034de:	f7ff fd67 	bl	8002fb0 <Error_Handler>
 80034e2:	e7cf      	b.n	8003484 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 80034e4:	f7ff fd64 	bl	8002fb0 <Error_Handler>
 80034e8:	e7b3      	b.n	8003452 <HAL_UART_MspInit+0x92>
 80034ea:	bf00      	nop
 80034ec:	40011000 	.word	0x40011000
 80034f0:	40004400 	.word	0x40004400
 80034f4:	40023800 	.word	0x40023800
 80034f8:	20003c38 	.word	0x20003c38
 80034fc:	40020000 	.word	0x40020000
 8003500:	40026440 	.word	0x40026440
 8003504:	20003c98 	.word	0x20003c98
 8003508:	400264b8 	.word	0x400264b8

0800350c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800350c:	e7fe      	b.n	800350c <NMI_Handler>
 800350e:	bf00      	nop

08003510 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003510:	e7fe      	b.n	8003510 <HardFault_Handler>
 8003512:	bf00      	nop

08003514 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003514:	e7fe      	b.n	8003514 <MemManage_Handler>
 8003516:	bf00      	nop

08003518 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003518:	e7fe      	b.n	8003518 <BusFault_Handler>
 800351a:	bf00      	nop

0800351c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800351c:	e7fe      	b.n	800351c <UsageFault_Handler>
 800351e:	bf00      	nop

08003520 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop

08003524 <DebugMon_Handler>:
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <PendSV_Handler>:
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop

0800352c <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 800352c:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <SysTick_Handler+0x3c>)
 800352e:	7813      	ldrb	r3, [r2, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	7013      	strb	r3, [r2, #0]

	if (FatFsCnt >= 10) {
 8003536:	7813      	ldrb	r3, [r2, #0]
 8003538:	2b09      	cmp	r3, #9
 800353a:	d801      	bhi.n	8003540 <SysTick_Handler+0x14>
		FatFsCnt = 0;
		SDTimer_Handler();
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800353c:	f000 ba76 	b.w	8003a2c <HAL_IncTick>
	if (Timer1 > 0) {
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <SysTick_Handler+0x40>)
		FatFsCnt = 0;
 8003542:	2100      	movs	r1, #0
 8003544:	7011      	strb	r1, [r2, #0]
	if (Timer1 > 0) {
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	b11a      	cbz	r2, 8003552 <SysTick_Handler+0x26>
		--Timer1;
 800354a:	781a      	ldrb	r2, [r3, #0]
 800354c:	3a01      	subs	r2, #1
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0) {
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <SysTick_Handler+0x44>)
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	2a00      	cmp	r2, #0
 8003558:	d0f0      	beq.n	800353c <SysTick_Handler+0x10>
		--Timer2;
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	3a01      	subs	r2, #1
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]
  HAL_IncTick();
 8003562:	f000 ba63 	b.w	8003a2c <HAL_IncTick>
 8003566:	bf00      	nop
 8003568:	2000406c 	.word	0x2000406c
 800356c:	20000216 	.word	0x20000216
 8003570:	20000218 	.word	0x20000218

08003574 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003574:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_INT_Pin);
 8003576:	2080      	movs	r0, #128	; 0x80
 8003578:	f001 f85a 	bl	8004630 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800357c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8003580:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003584:	f001 b854 	b.w	8004630 <HAL_GPIO_EXTI_IRQHandler>

08003588 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003588:	4801      	ldr	r0, [pc, #4]	; (8003590 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800358a:	f003 bb53 	b.w	8006c34 <HAL_TIM_IRQHandler>
 800358e:	bf00      	nop
 8003590:	20003e54 	.word	0x20003e54

08003594 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003594:	4801      	ldr	r0, [pc, #4]	; (800359c <TIM2_IRQHandler+0x8>)
 8003596:	f003 bb4d 	b.w	8006c34 <HAL_TIM_IRQHandler>
 800359a:	bf00      	nop
 800359c:	20003ee4 	.word	0x20003ee4

080035a0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035a0:	4801      	ldr	r0, [pc, #4]	; (80035a8 <TIM3_IRQHandler+0x8>)
 80035a2:	f003 bb47 	b.w	8006c34 <HAL_TIM_IRQHandler>
 80035a6:	bf00      	nop
 80035a8:	20003f2c 	.word	0x20003f2c

080035ac <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035ac:	4801      	ldr	r0, [pc, #4]	; (80035b4 <TIM4_IRQHandler+0x8>)
 80035ae:	f003 bb41 	b.w	8006c34 <HAL_TIM_IRQHandler>
 80035b2:	bf00      	nop
 80035b4:	20003f74 	.word	0x20003f74

080035b8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035b8:	4801      	ldr	r0, [pc, #4]	; (80035c0 <USART1_IRQHandler+0x8>)
 80035ba:	f003 bf07 	b.w	80073cc <HAL_UART_IRQHandler>
 80035be:	bf00      	nop
 80035c0:	20003fbc 	.word	0x20003fbc

080035c4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80035c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80035c8:	f001 b832 	b.w	8004630 <HAL_GPIO_EXTI_IRQHandler>

080035cc <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035cc:	4801      	ldr	r0, [pc, #4]	; (80035d4 <DMA2_Stream0_IRQHandler+0x8>)
 80035ce:	f000 be49 	b.w	8004264 <HAL_DMA_IRQHandler>
 80035d2:	bf00      	nop
 80035d4:	20003bd8 	.word	0x20003bd8

080035d8 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80035d8:	4801      	ldr	r0, [pc, #4]	; (80035e0 <DMA2_Stream2_IRQHandler+0x8>)
 80035da:	f000 be43 	b.w	8004264 <HAL_DMA_IRQHandler>
 80035de:	bf00      	nop
 80035e0:	20003c38 	.word	0x20003c38

080035e4 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80035e4:	4801      	ldr	r0, [pc, #4]	; (80035ec <DMA2_Stream7_IRQHandler+0x8>)
 80035e6:	f000 be3d 	b.w	8004264 <HAL_DMA_IRQHandler>
 80035ea:	bf00      	nop
 80035ec:	20003c98 	.word	0x20003c98

080035f0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80035f0:	2001      	movs	r0, #1
 80035f2:	4770      	bx	lr

080035f4 <_kill>:

int _kill(int pid, int sig)
{
 80035f4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80035f6:	f006 fa8d 	bl	8009b14 <__errno>
 80035fa:	2316      	movs	r3, #22
 80035fc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80035fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003602:	bd08      	pop	{r3, pc}

08003604 <_exit>:

void _exit (int status)
{
 8003604:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003606:	f006 fa85 	bl	8009b14 <__errno>
 800360a:	2316      	movs	r3, #22
 800360c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800360e:	e7fe      	b.n	800360e <_exit+0xa>

08003610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003610:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003612:	1e16      	subs	r6, r2, #0
 8003614:	dd07      	ble.n	8003626 <_read+0x16>
 8003616:	460c      	mov	r4, r1
 8003618:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800361a:	f3af 8000 	nop.w
 800361e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003622:	42a5      	cmp	r5, r4
 8003624:	d1f9      	bne.n	800361a <_read+0xa>
	}

return len;
}
 8003626:	4630      	mov	r0, r6
 8003628:	bd70      	pop	{r4, r5, r6, pc}
 800362a:	bf00      	nop

0800362c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800362c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362e:	1e16      	subs	r6, r2, #0
 8003630:	dd07      	ble.n	8003642 <_write+0x16>
 8003632:	460c      	mov	r4, r1
 8003634:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003636:	f814 0b01 	ldrb.w	r0, [r4], #1
 800363a:	f7ff fca9 	bl	8002f90 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	42ac      	cmp	r4, r5
 8003640:	d1f9      	bne.n	8003636 <_write+0xa>
	}
	return len;
}
 8003642:	4630      	mov	r0, r6
 8003644:	bd70      	pop	{r4, r5, r6, pc}
 8003646:	bf00      	nop

08003648 <_close>:

int _close(int file)
{
	return -1;
}
 8003648:	f04f 30ff 	mov.w	r0, #4294967295
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop

08003650 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003654:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003656:	2000      	movs	r0, #0
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800365c:	2001      	movs	r0, #1
 800365e:	4770      	bx	lr

08003660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003660:	2000      	movs	r0, #0
 8003662:	4770      	bx	lr

08003664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003664:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003666:	4c0c      	ldr	r4, [pc, #48]	; (8003698 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <_sbrk+0x38>)
 800366a:	490d      	ldr	r1, [pc, #52]	; (80036a0 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 800366c:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800366e:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8003670:	b12a      	cbz	r2, 800367e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003672:	4410      	add	r0, r2
 8003674:	4288      	cmp	r0, r1
 8003676:	d807      	bhi.n	8003688 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003678:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 800367a:	4610      	mov	r0, r2
 800367c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <_sbrk+0x40>)
 8003680:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003682:	4410      	add	r0, r2
 8003684:	4288      	cmp	r0, r1
 8003686:	d9f7      	bls.n	8003678 <_sbrk+0x14>
    errno = ENOMEM;
 8003688:	f006 fa44 	bl	8009b14 <__errno>
 800368c:	230c      	movs	r3, #12
    return (void *)-1;
 800368e:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8003692:	6003      	str	r3, [r0, #0]
}
 8003694:	4610      	mov	r0, r2
 8003696:	bd10      	pop	{r4, pc}
 8003698:	20004070 	.word	0x20004070
 800369c:	20018000 	.word	0x20018000
 80036a0:	00000400 	.word	0x00000400
 80036a4:	20004160 	.word	0x20004160

080036a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036a8:	4a03      	ldr	r2, [pc, #12]	; (80036b8 <SystemInit+0x10>)
 80036aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <XBee_Transmit_File>:
	}
	printf("Already transmitting file\n");
	return -1;
}

void XBee_Transmit_File() {
 80036bc:	b508      	push	{r3, lr}
	printf("Transmitting file\n");
 80036be:	4807      	ldr	r0, [pc, #28]	; (80036dc <XBee_Transmit_File+0x20>)
 80036c0:	f007 f83a 	bl	800a738 <puts>
	HAL_UART_Transmit_DMA(XBEE_UART, file_buf, fsize);
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <XBee_Transmit_File+0x24>)
 80036c6:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <XBee_Transmit_File+0x28>)
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	8812      	ldrh	r2, [r2, #0]
 80036cc:	4806      	ldr	r0, [pc, #24]	; (80036e8 <XBee_Transmit_File+0x2c>)
 80036ce:	f003 fce3 	bl	8007098 <HAL_UART_Transmit_DMA>
	transmitting_file = 2;
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <XBee_Transmit_File+0x30>)
 80036d4:	2202      	movs	r2, #2
 80036d6:	601a      	str	r2, [r3, #0]
}
 80036d8:	bd08      	pop	{r3, pc}
 80036da:	bf00      	nop
 80036dc:	0800c950 	.word	0x0800c950
 80036e0:	200040e8 	.word	0x200040e8
 80036e4:	200040ec 	.word	0x200040ec
 80036e8:	20003fbc 	.word	0x20003fbc
 80036ec:	2000410c 	.word	0x2000410c

080036f0 <XBee_Resolve_File>:
			XBee_Receive(&XBee_Received);
		}
	}
}

int XBee_Resolve_File() {
 80036f0:	b530      	push	{r4, r5, lr}
	int ret = 0;
	ret = f_open(&fil, rpath, FA_OPEN_ALWAYS | FA_WRITE);
 80036f2:	491d      	ldr	r1, [pc, #116]	; (8003768 <XBee_Resolve_File+0x78>)
 80036f4:	481d      	ldr	r0, [pc, #116]	; (800376c <XBee_Resolve_File+0x7c>)
int XBee_Resolve_File() {
 80036f6:	b083      	sub	sp, #12
	ret = f_open(&fil, rpath, FA_OPEN_ALWAYS | FA_WRITE);
 80036f8:	2212      	movs	r2, #18
 80036fa:	f005 fb5d 	bl	8008db8 <f_open>
	if(ret != FR_OK) {
 80036fe:	b9f0      	cbnz	r0, 800373e <XBee_Resolve_File+0x4e>
		printf("Failed to open file (%i) \r\n", ret);
		return -1;
	}
	UINT bytes_written;
	ret = f_write(&fil, file_buf, rsize, &bytes_written);
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <XBee_Resolve_File+0x80>)
 8003702:	4d1c      	ldr	r5, [pc, #112]	; (8003774 <XBee_Resolve_File+0x84>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	6829      	ldr	r1, [r5, #0]
 8003708:	4818      	ldr	r0, [pc, #96]	; (800376c <XBee_Resolve_File+0x7c>)
 800370a:	ab01      	add	r3, sp, #4
 800370c:	f005 fe48 	bl	80093a0 <f_write>
	if(ret != FR_OK) {
 8003710:	4601      	mov	r1, r0
 8003712:	b9d8      	cbnz	r0, 800374c <XBee_Resolve_File+0x5c>
		printf("Failed to write file (%i) \r\n", ret);
		return -1;
	}
	ret = f_close(&fil);
 8003714:	4815      	ldr	r0, [pc, #84]	; (800376c <XBee_Resolve_File+0x7c>)
 8003716:	f005 ffd5 	bl	80096c4 <f_close>
	if(ret != FR_OK) {
 800371a:	4604      	mov	r4, r0
 800371c:	b9e0      	cbnz	r0, 8003758 <XBee_Resolve_File+0x68>
		printf("Failed to close file (%i) \r\n", ret);
		return -1;
	}
	printf("Received file\n");
 800371e:	4816      	ldr	r0, [pc, #88]	; (8003778 <XBee_Resolve_File+0x88>)
 8003720:	f007 f80a 	bl	800a738 <puts>
	free(file_buf);
 8003724:	6828      	ldr	r0, [r5, #0]
 8003726:	f006 fa27 	bl	8009b78 <free>
	receiving_file = 0;
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <XBee_Resolve_File+0x8c>)
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 800372c:	4914      	ldr	r1, [pc, #80]	; (8003780 <XBee_Resolve_File+0x90>)
 800372e:	4815      	ldr	r0, [pc, #84]	; (8003784 <XBee_Resolve_File+0x94>)
	receiving_file = 0;
 8003730:	601c      	str	r4, [r3, #0]
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8003732:	2270      	movs	r2, #112	; 0x70
 8003734:	f004 f824 	bl	8007780 <HAL_UART_Receive_DMA>
	XBee_Receive(&XBee_Received);
	return ret;
}
 8003738:	4620      	mov	r0, r4
 800373a:	b003      	add	sp, #12
 800373c:	bd30      	pop	{r4, r5, pc}
 800373e:	4601      	mov	r1, r0
		printf("Failed to open file (%i) \r\n", ret);
 8003740:	4811      	ldr	r0, [pc, #68]	; (8003788 <XBee_Resolve_File+0x98>)
 8003742:	f006 ff73 	bl	800a62c <iprintf>
		return -1;
 8003746:	f04f 34ff 	mov.w	r4, #4294967295
 800374a:	e7f5      	b.n	8003738 <XBee_Resolve_File+0x48>
		printf("Failed to write file (%i) \r\n", ret);
 800374c:	480f      	ldr	r0, [pc, #60]	; (800378c <XBee_Resolve_File+0x9c>)
 800374e:	f006 ff6d 	bl	800a62c <iprintf>
		return -1;
 8003752:	f04f 34ff 	mov.w	r4, #4294967295
 8003756:	e7ef      	b.n	8003738 <XBee_Resolve_File+0x48>
		printf("Failed to close file (%i) \r\n", ret);
 8003758:	4601      	mov	r1, r0
 800375a:	480d      	ldr	r0, [pc, #52]	; (8003790 <XBee_Resolve_File+0xa0>)
 800375c:	f006 ff66 	bl	800a62c <iprintf>
		return -1;
 8003760:	f04f 34ff 	mov.w	r4, #4294967295
 8003764:	e7e8      	b.n	8003738 <XBee_Resolve_File+0x48>
 8003766:	bf00      	nop
 8003768:	200040f4 	.word	0x200040f4
 800376c:	20001b20 	.word	0x20001b20
 8003770:	20004108 	.word	0x20004108
 8003774:	200040e8 	.word	0x200040e8
 8003778:	0800ca80 	.word	0x0800ca80
 800377c:	200040f0 	.word	0x200040f0
 8003780:	20004078 	.word	0x20004078
 8003784:	20003fbc 	.word	0x20003fbc
 8003788:	0800c73c 	.word	0x0800c73c
 800378c:	0800ca60 	.word	0x0800ca60
 8003790:	0800c78c 	.word	0x0800c78c

08003794 <HAL_UART_ErrorCallback>:
	__HAL_TIM_SET_AUTORELOAD(FILE_TIMER, 5000);
	XBee_Receive(&XBee_Received);
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
	if (huart == XBEE_UART) {
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_UART_ErrorCallback+0x10>)
 8003796:	4283      	cmp	r3, r0
 8003798:	d000      	beq.n	800379c <HAL_UART_ErrorCallback+0x8>
		printf("XBee Error\n");
	}
}
 800379a:	4770      	bx	lr
		printf("XBee Error\n");
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <HAL_UART_ErrorCallback+0x14>)
 800379e:	f006 bfcb 	b.w	800a738 <puts>
 80037a2:	bf00      	nop
 80037a4:	20003fbc 	.word	0x20003fbc
 80037a8:	0800ca90 	.word	0x0800ca90

080037ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == XBEE_UART) {
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_UART_TxCpltCallback+0x4c>)
 80037ae:	4283      	cmp	r3, r0
 80037b0:	d000      	beq.n	80037b4 <HAL_UART_TxCpltCallback+0x8>
 80037b2:	4770      	bx	lr
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80037b4:	b510      	push	{r4, lr}
		if (transmitting_file == 1) {
 80037b6:	4c11      	ldr	r4, [pc, #68]	; (80037fc <HAL_UART_TxCpltCallback+0x50>)
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d003      	beq.n	80037c6 <HAL_UART_TxCpltCallback+0x1a>
			while (HAL_TIM_Base_GetState(FILE_TIMER) != HAL_TIM_STATE_READY);
			FIX_TIMER_TRIGGER(FILE_TIMER);
			HAL_TIM_Base_Start_IT(FILE_TIMER);
		} else if (transmitting_file == 2) {
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d00f      	beq.n	80037e4 <HAL_UART_TxCpltCallback+0x38>
			printf("Transmitted file\n");
			free(file_buf);
			transmitting_file = 0;
		}
	}
}
 80037c4:	bd10      	pop	{r4, pc}
 80037c6:	4c0e      	ldr	r4, [pc, #56]	; (8003800 <HAL_UART_TxCpltCallback+0x54>)
			while (HAL_TIM_Base_GetState(FILE_TIMER) != HAL_TIM_STATE_READY);
 80037c8:	4620      	mov	r0, r4
 80037ca:	f003 fadd 	bl	8006d88 <HAL_TIM_Base_GetState>
 80037ce:	2801      	cmp	r0, #1
 80037d0:	d1fa      	bne.n	80037c8 <HAL_UART_TxCpltCallback+0x1c>
			FIX_TIMER_TRIGGER(FILE_TIMER);
 80037d2:	6823      	ldr	r3, [r4, #0]
			HAL_TIM_Base_Start_IT(FILE_TIMER);
 80037d4:	480a      	ldr	r0, [pc, #40]	; (8003800 <HAL_UART_TxCpltCallback+0x54>)
			FIX_TIMER_TRIGGER(FILE_TIMER);
 80037d6:	f06f 0201 	mvn.w	r2, #1
}
 80037da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			FIX_TIMER_TRIGGER(FILE_TIMER);
 80037de:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(FILE_TIMER);
 80037e0:	f002 bf9e 	b.w	8006720 <HAL_TIM_Base_Start_IT>
			printf("Transmitted file\n");
 80037e4:	4807      	ldr	r0, [pc, #28]	; (8003804 <HAL_UART_TxCpltCallback+0x58>)
 80037e6:	f006 ffa7 	bl	800a738 <puts>
			free(file_buf);
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <HAL_UART_TxCpltCallback+0x5c>)
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	f006 f9c3 	bl	8009b78 <free>
			transmitting_file = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	6023      	str	r3, [r4, #0]
}
 80037f6:	bd10      	pop	{r4, pc}
 80037f8:	20003fbc 	.word	0x20003fbc
 80037fc:	2000410c 	.word	0x2000410c
 8003800:	20003e9c 	.word	0x20003e9c
 8003804:	0800ca9c 	.word	0x0800ca9c
 8003808:	200040e8 	.word	0x200040e8

0800380c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart == XBEE_UART) {
 800380e:	4b40      	ldr	r3, [pc, #256]	; (8003910 <HAL_UART_RxCpltCallback+0x104>)
 8003810:	4283      	cmp	r3, r0
 8003812:	d000      	beq.n	8003816 <HAL_UART_RxCpltCallback+0xa>
			XBee_Resolve();
		} else {
			XBee_Resolve_File();
		}
	}
}
 8003814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!receiving_file) {
 8003816:	4c3f      	ldr	r4, [pc, #252]	; (8003914 <HAL_UART_RxCpltCallback+0x108>)
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	b97b      	cbnz	r3, 800383c <HAL_UART_RxCpltCallback+0x30>
	if (XBee_Received.target == 0 || XBee_Received.target == UID) {
 800381c:	4d3e      	ldr	r5, [pc, #248]	; (8003918 <HAL_UART_RxCpltCallback+0x10c>)
 800381e:	68ab      	ldr	r3, [r5, #8]
 8003820:	b93b      	cbnz	r3, 8003832 <HAL_UART_RxCpltCallback+0x26>
		switch (XBee_Received.command) {
 8003822:	782b      	ldrb	r3, [r5, #0]
 8003824:	2b05      	cmp	r3, #5
 8003826:	d862      	bhi.n	80038ee <HAL_UART_RxCpltCallback+0xe2>
 8003828:	e8df f003 	tbb	[pc, r3]
 800382c:	6161385d 	.word	0x6161385d
 8003830:	0c1a      	.short	0x0c1a
	if (XBee_Received.target == 0 || XBee_Received.target == UID) {
 8003832:	4a3a      	ldr	r2, [pc, #232]	; (800391c <HAL_UART_RxCpltCallback+0x110>)
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	4293      	cmp	r3, r2
 8003838:	d0f3      	beq.n	8003822 <HAL_UART_RxCpltCallback+0x16>
}
 800383a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800383c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			XBee_Resolve_File();
 8003840:	f7ff bf56 	b.w	80036f0 <XBee_Resolve_File>
			printf("Impacted detected on device %u\n", XBee_Received.data[0]);
 8003844:	7b29      	ldrb	r1, [r5, #12]
 8003846:	4836      	ldr	r0, [pc, #216]	; (8003920 <HAL_UART_RxCpltCallback+0x114>)
 8003848:	f006 fef0 	bl	800a62c <iprintf>
		if (!receiving_file) {
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e0      	bne.n	8003814 <HAL_UART_RxCpltCallback+0x8>
}
 8003852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_UART_Receive_DMA(XBEE_UART, (uint8_t*) data, sizeof(XBee_Data));
 8003856:	4930      	ldr	r1, [pc, #192]	; (8003918 <HAL_UART_RxCpltCallback+0x10c>)
 8003858:	482d      	ldr	r0, [pc, #180]	; (8003910 <HAL_UART_RxCpltCallback+0x104>)
 800385a:	2270      	movs	r2, #112	; 0x70
 800385c:	f003 bf90 	b.w	8007780 <HAL_UART_Receive_DMA>
			printf("Preparing to receive file\n");
 8003860:	4830      	ldr	r0, [pc, #192]	; (8003924 <HAL_UART_RxCpltCallback+0x118>)
			rsize = *((FSIZE_t *) XBee_Received.data);
 8003862:	4e31      	ldr	r6, [pc, #196]	; (8003928 <HAL_UART_RxCpltCallback+0x11c>)
			printf("Preparing to receive file\n");
 8003864:	f006 ff68 	bl	800a738 <puts>
			rsize = *((FSIZE_t *) XBee_Received.data);
 8003868:	68eb      	ldr	r3, [r5, #12]
			strcpy(rpath, (TCHAR *) &XBee_Received.data[sizeof(FSIZE_t)]);
 800386a:	4930      	ldr	r1, [pc, #192]	; (800392c <HAL_UART_RxCpltCallback+0x120>)
 800386c:	4830      	ldr	r0, [pc, #192]	; (8003930 <HAL_UART_RxCpltCallback+0x124>)
			rsize = *((FSIZE_t *) XBee_Received.data);
 800386e:	6033      	str	r3, [r6, #0]
			strcpy(rpath, (TCHAR *) &XBee_Received.data[sizeof(FSIZE_t)]);
 8003870:	f006 ff7a 	bl	800a768 <strcpy>
	if (!receiving_file) {
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d13d      	bne.n	80038f6 <HAL_UART_RxCpltCallback+0xea>
		printf("Receiving file\n");
 800387a:	482e      	ldr	r0, [pc, #184]	; (8003934 <HAL_UART_RxCpltCallback+0x128>)
 800387c:	f006 ff5c 	bl	800a738 <puts>
		file_buf = (uint8_t *) malloc(rsize);
 8003880:	6835      	ldr	r5, [r6, #0]
 8003882:	4628      	mov	r0, r5
 8003884:	f006 f970 	bl	8009b68 <malloc>
 8003888:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <HAL_UART_RxCpltCallback+0x12c>)
		HAL_UART_Receive_DMA(XBEE_UART, file_buf, rsize);
 800388a:	4601      	mov	r1, r0
		file_buf = (uint8_t *) malloc(rsize);
 800388c:	6018      	str	r0, [r3, #0]
		HAL_UART_Receive_DMA(XBEE_UART, file_buf, rsize);
 800388e:	b2aa      	uxth	r2, r5
 8003890:	481f      	ldr	r0, [pc, #124]	; (8003910 <HAL_UART_RxCpltCallback+0x104>)
 8003892:	f003 ff75 	bl	8007780 <HAL_UART_Receive_DMA>
		receiving_file = 1;
 8003896:	2301      	movs	r3, #1
 8003898:	6023      	str	r3, [r4, #0]
}
 800389a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (num_registered_devices == MAX_DEVICES) {
 800389c:	4f27      	ldr	r7, [pc, #156]	; (800393c <HAL_UART_RxCpltCallback+0x130>)
 800389e:	683e      	ldr	r6, [r7, #0]
 80038a0:	2e03      	cmp	r6, #3
 80038a2:	d031      	beq.n	8003908 <HAL_UART_RxCpltCallback+0xfc>
			for (int i = 0; i < num_registered_devices; i++) {
 80038a4:	2e00      	cmp	r6, #0
			uint32_t uid = *((uint32_t *) XBee_Received.data);
 80038a6:	68ed      	ldr	r5, [r5, #12]
				if (devices_removed[i].uid == uid) {
 80038a8:	4825      	ldr	r0, [pc, #148]	; (8003940 <HAL_UART_RxCpltCallback+0x134>)
			for (int i = 0; i < num_registered_devices; i++) {
 80038aa:	dd0c      	ble.n	80038c6 <HAL_UART_RxCpltCallback+0xba>
				if (devices_removed[i].uid == uid) {
 80038ac:	6802      	ldr	r2, [r0, #0]
 80038ae:	4295      	cmp	r5, r2
 80038b0:	d025      	beq.n	80038fe <HAL_UART_RxCpltCallback+0xf2>
			for (int i = 0; i < num_registered_devices; i++) {
 80038b2:	2e01      	cmp	r6, #1
 80038b4:	d007      	beq.n	80038c6 <HAL_UART_RxCpltCallback+0xba>
				if (devices_removed[i].uid == uid) {
 80038b6:	6982      	ldr	r2, [r0, #24]
 80038b8:	4295      	cmp	r5, r2
 80038ba:	d020      	beq.n	80038fe <HAL_UART_RxCpltCallback+0xf2>
			for (int i = 0; i < num_registered_devices; i++) {
 80038bc:	2e02      	cmp	r6, #2
 80038be:	d002      	beq.n	80038c6 <HAL_UART_RxCpltCallback+0xba>
				if (devices_removed[i].uid == uid) {
 80038c0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80038c2:	4295      	cmp	r5, r2
 80038c4:	d01b      	beq.n	80038fe <HAL_UART_RxCpltCallback+0xf2>
			devices_removed[num_registered_devices].uid = uid;
 80038c6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80038ca:	00d2      	lsls	r2, r2, #3
			strcpy(devices_removed[num_registered_devices].file_path, (TCHAR *) &XBee_Received.data[sizeof(uint32_t)]);
 80038cc:	4917      	ldr	r1, [pc, #92]	; (800392c <HAL_UART_RxCpltCallback+0x120>)
			devices_removed[num_registered_devices].uid = uid;
 80038ce:	5085      	str	r5, [r0, r2]
			strcpy(devices_removed[num_registered_devices].file_path, (TCHAR *) &XBee_Received.data[sizeof(uint32_t)]);
 80038d0:	3204      	adds	r2, #4
 80038d2:	4410      	add	r0, r2
 80038d4:	f006 ff48 	bl	800a768 <strcpy>
			num_registered_devices++;
 80038d8:	3601      	adds	r6, #1
			printf("Registered new device with UID %u\n", (unsigned int) uid);
 80038da:	4629      	mov	r1, r5
 80038dc:	4819      	ldr	r0, [pc, #100]	; (8003944 <HAL_UART_RxCpltCallback+0x138>)
			num_registered_devices++;
 80038de:	603e      	str	r6, [r7, #0]
			printf("Registered new device with UID %u\n", (unsigned int) uid);
 80038e0:	f006 fea4 	bl	800a62c <iprintf>
 80038e4:	e7b2      	b.n	800384c <HAL_UART_RxCpltCallback+0x40>
			printf("%s\n", (char *) XBee_Received.data);
 80038e6:	4818      	ldr	r0, [pc, #96]	; (8003948 <HAL_UART_RxCpltCallback+0x13c>)
 80038e8:	f006 ff26 	bl	800a738 <puts>
			break;
 80038ec:	e7ae      	b.n	800384c <HAL_UART_RxCpltCallback+0x40>
			printf("Unknown command received over network\n");
 80038ee:	4817      	ldr	r0, [pc, #92]	; (800394c <HAL_UART_RxCpltCallback+0x140>)
 80038f0:	f006 ff22 	bl	800a738 <puts>
 80038f4:	e7aa      	b.n	800384c <HAL_UART_RxCpltCallback+0x40>
		printf("Already receiving file\n");
 80038f6:	4816      	ldr	r0, [pc, #88]	; (8003950 <HAL_UART_RxCpltCallback+0x144>)
 80038f8:	f006 ff1e 	bl	800a738 <puts>
 80038fc:	e7a6      	b.n	800384c <HAL_UART_RxCpltCallback+0x40>
					printf("Already registered device %u\n", (unsigned int) uid);
 80038fe:	4629      	mov	r1, r5
 8003900:	4814      	ldr	r0, [pc, #80]	; (8003954 <HAL_UART_RxCpltCallback+0x148>)
 8003902:	f006 fe93 	bl	800a62c <iprintf>
					goto done;
 8003906:	e7a1      	b.n	800384c <HAL_UART_RxCpltCallback+0x40>
				printf("Maximum registered network devices reached\n");
 8003908:	4813      	ldr	r0, [pc, #76]	; (8003958 <HAL_UART_RxCpltCallback+0x14c>)
 800390a:	f006 ff15 	bl	800a738 <puts>
				break;
 800390e:	e79d      	b.n	800384c <HAL_UART_RxCpltCallback+0x40>
 8003910:	20003fbc 	.word	0x20003fbc
 8003914:	200040f0 	.word	0x200040f0
 8003918:	20004078 	.word	0x20004078
 800391c:	20004074 	.word	0x20004074
 8003920:	0800ca18 	.word	0x0800ca18
 8003924:	0800c9fc 	.word	0x0800c9fc
 8003928:	20004108 	.word	0x20004108
 800392c:	20004088 	.word	0x20004088
 8003930:	200040f4 	.word	0x200040f4
 8003934:	0800c964 	.word	0x0800c964
 8003938:	200040e8 	.word	0x200040e8
 800393c:	20004054 	.word	0x20004054
 8003940:	20001abc 	.word	0x20001abc
 8003944:	0800c9d8 	.word	0x0800c9d8
 8003948:	20004084 	.word	0x20004084
 800394c:	0800ca38 	.word	0x0800ca38
 8003950:	0800c974 	.word	0x0800c974
 8003954:	0800c9b8 	.word	0x0800c9b8
 8003958:	0800c98c 	.word	0x0800c98c

0800395c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800395c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003994 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003960:	480d      	ldr	r0, [pc, #52]	; (8003998 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003962:	490e      	ldr	r1, [pc, #56]	; (800399c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003964:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003968:	e002      	b.n	8003970 <LoopCopyDataInit>

0800396a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800396a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800396c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800396e:	3304      	adds	r3, #4

08003970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003974:	d3f9      	bcc.n	800396a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003978:	4c0b      	ldr	r4, [pc, #44]	; (80039a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800397a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800397c:	e001      	b.n	8003982 <LoopFillZerobss>

0800397e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800397e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003980:	3204      	adds	r2, #4

08003982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003984:	d3fb      	bcc.n	800397e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003986:	f7ff fe8f 	bl	80036a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800398a:	f006 f8c9 	bl	8009b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800398e:	f7fe ffd7 	bl	8002940 <main>
  bx  lr    
 8003992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003994:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800399c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80039a0:	0800cf34 	.word	0x0800cf34
  ldr r2, =_sbss
 80039a4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80039a8:	20004160 	.word	0x20004160

080039ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039ac:	e7fe      	b.n	80039ac <ADC_IRQHandler>
	...

080039b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <HAL_InitTick+0x3c>)
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_InitTick+0x40>)
 80039b6:	7812      	ldrb	r2, [r2, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
{
 80039ba:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039c0:	fbb0 f0f2 	udiv	r0, r0, r2
 80039c4:	fbb3 f0f0 	udiv	r0, r3, r0
 80039c8:	f000 fb00 	bl	8003fcc <HAL_SYSTICK_Config>
 80039cc:	b908      	cbnz	r0, 80039d2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039ce:	2d0f      	cmp	r5, #15
 80039d0:	d901      	bls.n	80039d6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80039d2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80039d4:	bd38      	pop	{r3, r4, r5, pc}
 80039d6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039d8:	4602      	mov	r2, r0
 80039da:	4629      	mov	r1, r5
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	f000 faa8 	bl	8003f34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_InitTick+0x44>)
 80039e6:	4620      	mov	r0, r4
 80039e8:	601d      	str	r5, [r3, #0]
}
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	20000008 	.word	0x20000008
 80039f0:	20000004 	.word	0x20000004
 80039f4:	2000000c 	.word	0x2000000c

080039f8 <HAL_Init>:
{
 80039f8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_Init+0x30>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a0a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a12:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a14:	2003      	movs	r0, #3
 8003a16:	f000 fa7b 	bl	8003f10 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f7ff ffc8 	bl	80039b0 <HAL_InitTick>
  HAL_MspInit();
 8003a20:	f7ff fac8 	bl	8002fb4 <HAL_MspInit>
}
 8003a24:	2000      	movs	r0, #0
 8003a26:	bd08      	pop	{r3, pc}
 8003a28:	40023c00 	.word	0x40023c00

08003a2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003a2c:	4a03      	ldr	r2, [pc, #12]	; (8003a3c <HAL_IncTick+0x10>)
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <HAL_IncTick+0x14>)
 8003a30:	6811      	ldr	r1, [r2, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	440b      	add	r3, r1
 8003a36:	6013      	str	r3, [r2, #0]
}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20004110 	.word	0x20004110
 8003a40:	20000008 	.word	0x20000008

08003a44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003a44:	4b01      	ldr	r3, [pc, #4]	; (8003a4c <HAL_GetTick+0x8>)
 8003a46:	6818      	ldr	r0, [r3, #0]
}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20004110 	.word	0x20004110

08003a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003a54:	f7ff fff6 	bl	8003a44 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a58:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003a5a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003a5c:	d002      	beq.n	8003a64 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <HAL_Delay+0x20>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a64:	f7ff ffee 	bl	8003a44 <HAL_GetTick>
 8003a68:	1b43      	subs	r3, r0, r5
 8003a6a:	42a3      	cmp	r3, r4
 8003a6c:	d3fa      	bcc.n	8003a64 <HAL_Delay+0x14>
  {
  }
}
 8003a6e:	bd38      	pop	{r3, r4, r5, pc}
 8003a70:	20000008 	.word	0x20000008

08003a74 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a74:	2800      	cmp	r0, #0
 8003a76:	f000 809f 	beq.w	8003bb8 <HAL_ADC_Init+0x144>
{
 8003a7a:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a7c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003a7e:	4604      	mov	r4, r0
 8003a80:	b13d      	cbz	r5, 8003a92 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a84:	06db      	lsls	r3, r3, #27
 8003a86:	d50c      	bpl.n	8003aa2 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003a8e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003a90:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003a92:	f7ff faad 	bl	8002ff0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003a96:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a98:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003a9a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a9e:	06db      	lsls	r3, r3, #27
 8003aa0:	d4f2      	bmi.n	8003a88 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003aa4:	4a48      	ldr	r2, [pc, #288]	; (8003bc8 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8003aa6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003aaa:	f023 0302 	bic.w	r3, r3, #2
 8003aae:	f043 0302 	orr.w	r3, r3, #2
 8003ab2:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ab4:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ab6:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ab8:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003abc:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003abe:	6851      	ldr	r1, [r2, #4]
 8003ac0:	6860      	ldr	r0, [r4, #4]
 8003ac2:	4301      	orrs	r1, r0
 8003ac4:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ac6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ac8:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003aca:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8003ad8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8003ae0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	4302      	orrs	r2, r0
 8003ae6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ae8:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003aea:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003aec:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003af0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003af2:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003af4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003af6:	4302      	orrs	r2, r0
 8003af8:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003afa:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <HAL_ADC_Init+0x158>)
 8003afc:	4291      	cmp	r1, r2
 8003afe:	d052      	beq.n	8003ba6 <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b00:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b02:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b04:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8003b08:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	4311      	orrs	r1, r2
 8003b0e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003b16:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	432a      	orrs	r2, r5
 8003b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	f022 0202 	bic.w	r2, r2, #2
 8003b24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	7e21      	ldrb	r1, [r4, #24]
 8003b2a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003b2e:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b30:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	d041      	beq.n	8003bbc <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b38:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b3c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003b40:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b42:	6858      	ldr	r0, [r3, #4]
 8003b44:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8003b48:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b4a:	1e51      	subs	r1, r2, #1
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003b52:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b56:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b58:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b62:	3901      	subs	r1, #1
 8003b64:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b6a:	6899      	ldr	r1, [r3, #8]
 8003b6c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003b70:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b72:	6899      	ldr	r1, [r3, #8]
 8003b74:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003b78:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003b7c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003b84:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b86:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003b88:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b8a:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003b8e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003b90:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b94:	f023 0303 	bic.w	r3, r3, #3
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003ba4:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bb4:	609a      	str	r2, [r3, #8]
 8003bb6:	e7b2      	b.n	8003b1e <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8003bb8:	2001      	movs	r0, #1
}
 8003bba:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	e7c6      	b.n	8003b54 <HAL_ADC_Init+0xe0>
 8003bc6:	bf00      	nop
 8003bc8:	40012300 	.word	0x40012300
 8003bcc:	0f000001 	.word	0x0f000001

08003bd0 <HAL_ADC_Start_DMA>:
{
 8003bd0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003bd2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8003bda:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003be2:	f000 8087 	beq.w	8003cf4 <HAL_ADC_Start_DMA+0x124>
 8003be6:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003be8:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8003bea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bee:	68b3      	ldr	r3, [r6, #8]
 8003bf0:	07dc      	lsls	r4, r3, #31
 8003bf2:	d414      	bmi.n	8003c1e <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8003bf4:	68b3      	ldr	r3, [r6, #8]
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <HAL_ADC_Start_DMA+0x12c>)
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	4b3f      	ldr	r3, [pc, #252]	; (8003d00 <HAL_ADC_Start_DMA+0x130>)
 8003c02:	fba3 3000 	umull	r3, r0, r3, r0
 8003c06:	0c80      	lsrs	r0, r0, #18
 8003c08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003c0c:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8003c0e:	9b01      	ldr	r3, [sp, #4]
 8003c10:	b12b      	cbz	r3, 8003c1e <HAL_ADC_Start_DMA+0x4e>
      counter--;
 8003c12:	9c01      	ldr	r4, [sp, #4]
 8003c14:	3c01      	subs	r4, #1
 8003c16:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8003c18:	9801      	ldr	r0, [sp, #4]
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d1f9      	bne.n	8003c12 <HAL_ADC_Start_DMA+0x42>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c1e:	68b3      	ldr	r3, [r6, #8]
 8003c20:	05d8      	lsls	r0, r3, #23
 8003c22:	d503      	bpl.n	8003c2c <HAL_ADC_Start_DMA+0x5c>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c24:	68b3      	ldr	r3, [r6, #8]
 8003c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c2a:	60b3      	str	r3, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c2c:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8003c2e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c30:	f010 0001 	ands.w	r0, r0, #1
 8003c34:	d042      	beq.n	8003cbc <HAL_ADC_Start_DMA+0xec>
    ADC_STATE_CLR_SET(hadc->State,
 8003c36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c42:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c44:	6873      	ldr	r3, [r6, #4]
 8003c46:	055b      	lsls	r3, r3, #21
 8003c48:	d505      	bpl.n	8003c56 <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c4a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003c4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c54:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c56:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c58:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c5a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c5e:	bf1c      	itt	ne
 8003c60:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 8003c62:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003c66:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8003c68:	2400      	movs	r4, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c6e:	4925      	ldr	r1, [pc, #148]	; (8003d04 <HAL_ADC_Start_DMA+0x134>)
    __HAL_UNLOCK(hadc);   
 8003c70:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c74:	63c1      	str	r1, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c76:	4924      	ldr	r1, [pc, #144]	; (8003d08 <HAL_ADC_Start_DMA+0x138>)
 8003c78:	6401      	str	r1, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c7a:	4924      	ldr	r1, [pc, #144]	; (8003d0c <HAL_ADC_Start_DMA+0x13c>)
 8003c7c:	64c1      	str	r1, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c7e:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8003c82:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c84:	6871      	ldr	r1, [r6, #4]
 8003c86:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8003c8a:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c8c:	68b1      	ldr	r1, [r6, #8]
 8003c8e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003c92:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c94:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8003c98:	f000 fa4a 	bl	8004130 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <HAL_ADC_Start_DMA+0x140>)
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	f012 021f 	ands.w	r2, r2, #31
 8003ca4:	d113      	bne.n	8003cce <HAL_ADC_Start_DMA+0xfe>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ca6:	6829      	ldr	r1, [r5, #0]
 8003ca8:	6888      	ldr	r0, [r1, #8]
 8003caa:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8003cae:	d115      	bne.n	8003cdc <HAL_ADC_Start_DMA+0x10c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cb0:	688b      	ldr	r3, [r1, #8]
 8003cb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cb6:	608b      	str	r3, [r1, #8]
}
 8003cb8:	b002      	add	sp, #8
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbc:	f043 0310 	orr.w	r3, r3, #16
 8003cc0:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	646b      	str	r3, [r5, #68]	; 0x44
}
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cce:	4a11      	ldr	r2, [pc, #68]	; (8003d14 <HAL_ADC_Start_DMA+0x144>)
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d005      	beq.n	8003ce2 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 8003cd6:	4620      	mov	r0, r4
}
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003cdc:	4610      	mov	r0, r2
}
 8003cde:	b002      	add	sp, #8
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ce2:	6898      	ldr	r0, [r3, #8]
 8003ce4:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8003ce8:	d1f5      	bne.n	8003cd6 <HAL_ADC_Start_DMA+0x106>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cf0:	609a      	str	r2, [r3, #8]
 8003cf2:	e7ea      	b.n	8003cca <HAL_ADC_Start_DMA+0xfa>
  __HAL_LOCK(hadc);
 8003cf4:	2002      	movs	r0, #2
}
 8003cf6:	b002      	add	sp, #8
 8003cf8:	bd70      	pop	{r4, r5, r6, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000004 	.word	0x20000004
 8003d00:	431bde83 	.word	0x431bde83
 8003d04:	08003d49 	.word	0x08003d49
 8003d08:	08003d21 	.word	0x08003d21
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	40012300 	.word	0x40012300
 8003d14:	40012000 	.word	0x40012000

08003d18 <HAL_ADC_ConvCpltCallback>:
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop

08003d1c <HAL_ADC_ConvHalfCpltCallback>:
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop

08003d20 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d20:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d22:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003d24:	f7ff fffa 	bl	8003d1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d28:	bd08      	pop	{r3, pc}
 8003d2a:	bf00      	nop

08003d2c <HAL_ADC_ErrorCallback>:
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop

08003d30 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d30:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003d32:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d34:	2340      	movs	r3, #64	; 0x40
 8003d36:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d38:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003d3a:	f043 0304 	orr.w	r3, r3, #4
 8003d3e:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d40:	f7ff fff4 	bl	8003d2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d44:	bd08      	pop	{r3, pc}
 8003d46:	bf00      	nop

08003d48 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d48:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d4c:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8003d50:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d54:	d123      	bne.n	8003d9e <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d5a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d5e:	688a      	ldr	r2, [r1, #8]
 8003d60:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8003d64:	d117      	bne.n	8003d96 <ADC_DMAConvCplt+0x4e>
 8003d66:	7e1a      	ldrb	r2, [r3, #24]
 8003d68:	b9aa      	cbnz	r2, 8003d96 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d6a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d6c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8003d70:	d002      	beq.n	8003d78 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d72:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d74:	0550      	lsls	r0, r2, #21
 8003d76:	d40e      	bmi.n	8003d96 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d78:	684a      	ldr	r2, [r1, #4]
 8003d7a:	f022 0220 	bic.w	r2, r2, #32
 8003d7e:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8a:	04d1      	lsls	r1, r2, #19
 8003d8c:	d403      	bmi.n	8003d96 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff ffbe 	bl	8003d18 <HAL_ADC_ConvCpltCallback>
}
 8003d9c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d9e:	06d2      	lsls	r2, r2, #27
 8003da0:	d404      	bmi.n	8003dac <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ffbd 	bl	8003d2c <HAL_ADC_ErrorCallback>
}
 8003db2:	bd10      	pop	{r4, pc}

08003db4 <HAL_ADC_ConfigChannel>:
{
 8003db4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8003db6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003dba:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003dbc:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003dbe:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003dc0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003dc2:	f000 809c 	beq.w	8003efe <HAL_ADC_ConfigChannel+0x14a>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003dcc:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003dce:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003dd0:	2c09      	cmp	r4, #9
 8003dd2:	d82d      	bhi.n	8003e30 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dd4:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dd6:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dd8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003ddc:	f04f 0c07 	mov.w	ip, #7
 8003de0:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003de4:	ea25 050c 	bic.w	r5, r5, ip
 8003de8:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dea:	691d      	ldr	r5, [r3, #16]
 8003dec:	fa02 f20e 	lsl.w	r2, r2, lr
 8003df0:	432a      	orrs	r2, r5
 8003df2:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8003df4:	684a      	ldr	r2, [r1, #4]
 8003df6:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003df8:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8003dfa:	d82f      	bhi.n	8003e5c <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dfc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003e00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e02:	3a05      	subs	r2, #5
 8003e04:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e08:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e0c:	fa0e f202 	lsl.w	r2, lr, r2
 8003e10:	ea21 0202 	bic.w	r2, r1, r2
 8003e14:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e18:	ea4c 0202 	orr.w	r2, ip, r2
 8003e1c:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e1e:	4a39      	ldr	r2, [pc, #228]	; (8003f04 <HAL_ADC_ConfigChannel+0x150>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d030      	beq.n	8003e86 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 8003e24:	2300      	movs	r3, #0
 8003e26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003e2a:	4618      	mov	r0, r3
}
 8003e2c:	b003      	add	sp, #12
 8003e2e:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e30:	fa1f fc84 	uxth.w	ip, r4
 8003e34:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8003e38:	68dd      	ldr	r5, [r3, #12]
 8003e3a:	f1a2 0e1e 	sub.w	lr, r2, #30
 8003e3e:	2207      	movs	r2, #7
 8003e40:	fa02 f20e 	lsl.w	r2, r2, lr
 8003e44:	ea25 0202 	bic.w	r2, r5, r2
 8003e48:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e4a:	688a      	ldr	r2, [r1, #8]
 8003e4c:	68dd      	ldr	r5, [r3, #12]
 8003e4e:	fa02 f20e 	lsl.w	r2, r2, lr
 8003e52:	432a      	orrs	r2, r5
 8003e54:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8003e56:	684a      	ldr	r2, [r1, #4]
 8003e58:	2a06      	cmp	r2, #6
 8003e5a:	d9cf      	bls.n	8003dfc <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8003e5c:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8003e62:	d836      	bhi.n	8003ed2 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e66:	3a23      	subs	r2, #35	; 0x23
 8003e68:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e6a:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e6e:	fa05 f202 	lsl.w	r2, r5, r2
 8003e72:	ea21 0202 	bic.w	r2, r1, r2
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7a:	ea4c 0202 	orr.w	r2, ip, r2
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <HAL_ADC_ConfigChannel+0x150>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d1ce      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
 8003e86:	2c12      	cmp	r4, #18
 8003e88:	d032      	beq.n	8003ef0 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e8a:	f1a4 0310 	sub.w	r3, r4, #16
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d8c8      	bhi.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e92:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <HAL_ADC_ConfigChannel+0x154>)
 8003e94:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e96:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e9c:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e9e:	d1c1      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_ADC_ConfigChannel+0x158>)
 8003ea2:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8003eac:	f202 3283 	addw	r2, r2, #899	; 0x383
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	0c9b      	lsrs	r3, r3, #18
 8003eb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003ebe:	9b01      	ldr	r3, [sp, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0af      	beq.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8003ec4:	9b01      	ldr	r3, [sp, #4]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003eca:	9b01      	ldr	r3, [sp, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f9      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x110>
 8003ed0:	e7a8      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ed2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ed4:	3a41      	subs	r2, #65	; 0x41
 8003ed6:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ed8:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003edc:	fa05 f202 	lsl.w	r2, r5, r2
 8003ee0:	ea21 0202 	bic.w	r2, r1, r2
 8003ee4:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8003eec:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eee:	e796      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ef0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8003ef4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ef8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003efc:	e792      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003efe:	2002      	movs	r0, #2
}
 8003f00:	b003      	add	sp, #12
 8003f02:	bd30      	pop	{r4, r5, pc}
 8003f04:	40012000 	.word	0x40012000
 8003f08:	40012300 	.word	0x40012300
 8003f0c:	20000004 	.word	0x20000004

08003f10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f10:	4907      	ldr	r1, [pc, #28]	; (8003f30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003f12:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f14:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f16:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f20:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f22:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003f2a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f34:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <HAL_NVIC_SetPriority+0x74>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f3c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f3e:	f1c3 0e07 	rsb	lr, r3, #7
 8003f42:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f46:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f4a:	bf28      	it	cs
 8003f4c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f50:	f1bc 0f06 	cmp.w	ip, #6
 8003f54:	d91b      	bls.n	8003f8e <HAL_NVIC_SetPriority+0x5a>
 8003f56:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f58:	f04f 3cff 	mov.w	ip, #4294967295
 8003f5c:	fa0c fc03 	lsl.w	ip, ip, r3
 8003f60:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f64:	f04f 3cff 	mov.w	ip, #4294967295
 8003f68:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003f6c:	ea21 010c 	bic.w	r1, r1, ip
 8003f70:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003f72:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f74:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003f78:	db0c      	blt.n	8003f94 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003f7e:	0109      	lsls	r1, r1, #4
 8003f80:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003f84:	b2c9      	uxtb	r1, r1
 8003f86:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f8e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f90:	4613      	mov	r3, r2
 8003f92:	e7e7      	b.n	8003f64 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_NVIC_SetPriority+0x78>)
 8003f96:	f000 000f 	and.w	r0, r0, #15
 8003f9a:	0109      	lsls	r1, r1, #4
 8003f9c:	4403      	add	r3, r0
 8003f9e:	b2c9      	uxtb	r1, r1
 8003fa0:	7619      	strb	r1, [r3, #24]
 8003fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fa6:	bf00      	nop
 8003fa8:	e000ed00 	.word	0xe000ed00
 8003fac:	e000ecfc 	.word	0xe000ecfc

08003fb0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	db08      	blt.n	8003fc6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb4:	0941      	lsrs	r1, r0, #5
 8003fb6:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <HAL_NVIC_EnableIRQ+0x18>)
 8003fb8:	f000 001f 	and.w	r0, r0, #31
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8003fc2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003fc6:	4770      	bx	lr
 8003fc8:	e000e100 	.word	0xe000e100

08003fcc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fcc:	3801      	subs	r0, #1
 8003fce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003fd2:	d210      	bcs.n	8003ff6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fd4:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fda:	4c08      	ldr	r4, [pc, #32]	; (8003ffc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fdc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fde:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003fe2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fe8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fea:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fec:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003fee:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ff2:	6119      	str	r1, [r3, #16]
 8003ff4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8004004:	f7ff fd1e 	bl	8003a44 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004008:	2c00      	cmp	r4, #0
 800400a:	d052      	beq.n	80040b2 <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800400c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800400e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004010:	2102      	movs	r1, #2
 8004012:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8004016:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	f022 0201 	bic.w	r2, r2, #1
 8004020:	4605      	mov	r5, r0
 8004022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004024:	e005      	b.n	8004032 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004026:	f7ff fd0d 	bl	8003a44 <HAL_GetTick>
 800402a:	1b43      	subs	r3, r0, r5
 800402c:	2b05      	cmp	r3, #5
 800402e:	d839      	bhi.n	80040a4 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	07d1      	lsls	r1, r2, #31
 8004036:	d4f6      	bmi.n	8004026 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004038:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800403c:	68e1      	ldr	r1, [r4, #12]
 800403e:	4302      	orrs	r2, r0
 8004040:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004042:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004046:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004048:	432a      	orrs	r2, r5
 800404a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800404c:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 800404e:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004050:	4302      	orrs	r2, r0
 8004052:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004054:	4933      	ldr	r1, [pc, #204]	; (8004124 <HAL_DMA_Init+0x124>)
 8004056:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004058:	6a25      	ldr	r5, [r4, #32]
 800405a:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800405c:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800405e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004060:	2904      	cmp	r1, #4
 8004062:	d028      	beq.n	80040b6 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004064:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004066:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004068:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800406c:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800406e:	b2d8      	uxtb	r0, r3
 8004070:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8004072:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004074:	3810      	subs	r0, #16
 8004076:	fba2 5200 	umull	r5, r2, r2, r0
 800407a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800407c:	492b      	ldr	r1, [pc, #172]	; (800412c <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800407e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004082:	5c89      	ldrb	r1, [r1, r2]
 8004084:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004086:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 800408a:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800408c:	bf88      	it	hi
 800408e:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004090:	223f      	movs	r2, #63	; 0x3f
 8004092:	408a      	lsls	r2, r1
 8004094:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004096:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004098:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800409a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800409c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800409e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040a6:	2220      	movs	r2, #32
 80040a8:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80040ae:	4618      	mov	r0, r3
}
 80040b0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80040b2:	2001      	movs	r0, #1
}
 80040b4:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040b6:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 80040ba:	4329      	orrs	r1, r5
 80040bc:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 80040be:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80040c0:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80040c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040c4:	f021 0107 	bic.w	r1, r1, #7
 80040c8:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 80040ca:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	d0cd      	beq.n	800406e <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040d2:	b178      	cbz	r0, 80040f4 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040d4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80040d8:	d016      	beq.n	8004108 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040da:	2a02      	cmp	r2, #2
 80040dc:	d903      	bls.n	80040e6 <HAL_DMA_Init+0xe6>
 80040de:	2a03      	cmp	r2, #3
 80040e0:	d1c5      	bne.n	800406e <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e2:	01ea      	lsls	r2, r5, #7
 80040e4:	d5c3      	bpl.n	800406e <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 80040e6:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040e8:	2240      	movs	r2, #64	; 0x40
 80040ea:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80040ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80040f0:	4618      	mov	r0, r3
}
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 80040f4:	2a01      	cmp	r2, #1
 80040f6:	d003      	beq.n	8004100 <HAL_DMA_Init+0x100>
 80040f8:	f032 0202 	bics.w	r2, r2, #2
 80040fc:	d1b7      	bne.n	800406e <HAL_DMA_Init+0x6e>
 80040fe:	e7f0      	b.n	80040e2 <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004100:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004104:	d1b3      	bne.n	800406e <HAL_DMA_Init+0x6e>
 8004106:	e7ee      	b.n	80040e6 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8004108:	2a03      	cmp	r2, #3
 800410a:	d8b0      	bhi.n	800406e <HAL_DMA_Init+0x6e>
 800410c:	a001      	add	r0, pc, #4	; (adr r0, 8004114 <HAL_DMA_Init+0x114>)
 800410e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004112:	bf00      	nop
 8004114:	080040e7 	.word	0x080040e7
 8004118:	080040e3 	.word	0x080040e3
 800411c:	080040e7 	.word	0x080040e7
 8004120:	08004101 	.word	0x08004101
 8004124:	f010803f 	.word	0xf010803f
 8004128:	aaaaaaab 	.word	0xaaaaaaab
 800412c:	0800cab0 	.word	0x0800cab0

08004130 <HAL_DMA_Start_IT>:
{
 8004130:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8004132:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004136:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8004138:	2c01      	cmp	r4, #1
 800413a:	d035      	beq.n	80041a8 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 800413c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8004140:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004144:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8004146:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800414a:	d005      	beq.n	8004158 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800414c:	2300      	movs	r3, #0
 800414e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8004152:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8004154:	2002      	movs	r0, #2
}
 8004156:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004158:	2602      	movs	r6, #2
 800415a:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800415e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004160:	2600      	movs	r6, #0
 8004162:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004164:	6826      	ldr	r6, [r4, #0]
 8004166:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800416a:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800416c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800416e:	6883      	ldr	r3, [r0, #8]
 8004170:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8004172:	bf0e      	itee	eq
 8004174:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8004176:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8004178:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800417a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800417c:	bf08      	it	eq
 800417e:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004180:	233f      	movs	r3, #63	; 0x3f
 8004182:	4093      	lsls	r3, r2
 8004184:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004186:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004188:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800418a:	f043 0316 	orr.w	r3, r3, #22
 800418e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004190:	b11a      	cbz	r2, 800419a <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	f043 0308 	orr.w	r3, r3, #8
 8004198:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80041a2:	6023      	str	r3, [r4, #0]
}
 80041a4:	bc70      	pop	{r4, r5, r6}
 80041a6:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80041a8:	2002      	movs	r0, #2
}
 80041aa:	bc70      	pop	{r4, r5, r6}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop

080041b0 <HAL_DMA_Abort>:
{
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80041b6:	f7ff fc45 	bl	8003a44 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d006      	beq.n	80041d0 <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 80041c2:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c4:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80041c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ca:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80041cc:	2001      	movs	r0, #1
}
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	f022 0216 	bic.w	r2, r2, #22
 80041d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e0:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80041e4:	4605      	mov	r5, r0
 80041e6:	b332      	cbz	r2, 8004236 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	f022 0208 	bic.w	r2, r2, #8
 80041ee:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041f8:	e005      	b.n	8004206 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041fa:	f7ff fc23 	bl	8003a44 <HAL_GetTick>
 80041fe:	1b43      	subs	r3, r0, r5
 8004200:	2b05      	cmp	r3, #5
 8004202:	d80f      	bhi.n	8004224 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f013 0301 	ands.w	r3, r3, #1
 800420c:	d1f5      	bne.n	80041fa <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800420e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004210:	223f      	movs	r2, #63	; 0x3f
 8004212:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8004214:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004216:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004218:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800421c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8004220:	4618      	mov	r0, r3
}
 8004222:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004224:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004226:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8004228:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800422a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800422c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004230:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004234:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004236:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004238:	2a00      	cmp	r2, #0
 800423a:	d1d5      	bne.n	80041e8 <HAL_DMA_Abort+0x38>
 800423c:	e7d8      	b.n	80041f0 <HAL_DMA_Abort+0x40>
 800423e:	bf00      	nop

08004240 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004240:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004244:	2b02      	cmp	r3, #2
 8004246:	d003      	beq.n	8004250 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800424c:	2001      	movs	r0, #1
 800424e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8004250:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8004252:	2305      	movs	r3, #5
 8004254:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004258:	6813      	ldr	r3, [r2, #0]
 800425a:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 800425e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004260:	6013      	str	r3, [r2, #0]
}
 8004262:	4770      	bx	lr

08004264 <HAL_DMA_IRQHandler>:
{
 8004264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004268:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 800426a:	4a74      	ldr	r2, [pc, #464]	; (800443c <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800426c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800426e:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004274:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8004276:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004278:	2208      	movs	r2, #8
 800427a:	409a      	lsls	r2, r3
 800427c:	4222      	tst	r2, r4
{
 800427e:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004280:	d004      	beq.n	800428c <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004282:	6801      	ldr	r1, [r0, #0]
 8004284:	680f      	ldr	r7, [r1, #0]
 8004286:	0778      	lsls	r0, r7, #29
 8004288:	f100 808a 	bmi.w	80043a0 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800428c:	2201      	movs	r2, #1
 800428e:	409a      	lsls	r2, r3
 8004290:	4222      	tst	r2, r4
 8004292:	d004      	beq.n	800429e <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004294:	f8d8 1000 	ldr.w	r1, [r8]
 8004298:	6949      	ldr	r1, [r1, #20]
 800429a:	0609      	lsls	r1, r1, #24
 800429c:	d478      	bmi.n	8004390 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800429e:	2204      	movs	r2, #4
 80042a0:	409a      	lsls	r2, r3
 80042a2:	4222      	tst	r2, r4
 80042a4:	d004      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042a6:	f8d8 1000 	ldr.w	r1, [r8]
 80042aa:	6809      	ldr	r1, [r1, #0]
 80042ac:	078f      	lsls	r7, r1, #30
 80042ae:	d467      	bmi.n	8004380 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042b0:	2210      	movs	r2, #16
 80042b2:	409a      	lsls	r2, r3
 80042b4:	4222      	tst	r2, r4
 80042b6:	d004      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042b8:	f8d8 1000 	ldr.w	r1, [r8]
 80042bc:	680f      	ldr	r7, [r1, #0]
 80042be:	0738      	lsls	r0, r7, #28
 80042c0:	d449      	bmi.n	8004356 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042c2:	2220      	movs	r2, #32
 80042c4:	409a      	lsls	r2, r3
 80042c6:	4222      	tst	r2, r4
 80042c8:	d017      	beq.n	80042fa <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042ca:	f8d8 1000 	ldr.w	r1, [r8]
 80042ce:	680c      	ldr	r4, [r1, #0]
 80042d0:	06e0      	lsls	r0, r4, #27
 80042d2:	d512      	bpl.n	80042fa <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042d4:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042d6:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 80042da:	2a05      	cmp	r2, #5
 80042dc:	d073      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042de:	680b      	ldr	r3, [r1, #0]
 80042e0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042e4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042e6:	f000 8090 	beq.w	800440a <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042ea:	0319      	lsls	r1, r3, #12
 80042ec:	f140 809b 	bpl.w	8004426 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80042f0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80042f4:	b10b      	cbz	r3, 80042fa <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 80042f6:	4640      	mov	r0, r8
 80042f8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042fa:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80042fe:	b33b      	cbz	r3, 8004350 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004300:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8004304:	07da      	lsls	r2, r3, #31
 8004306:	d51b      	bpl.n	8004340 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8004308:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800430c:	494c      	ldr	r1, [pc, #304]	; (8004440 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800430e:	2305      	movs	r3, #5
 8004310:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004314:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004316:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800431a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800431e:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e002      	b.n	800432a <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004324:	6813      	ldr	r3, [r2, #0]
 8004326:	07db      	lsls	r3, r3, #31
 8004328:	d504      	bpl.n	8004334 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800432a:	9b01      	ldr	r3, [sp, #4]
 800432c:	3301      	adds	r3, #1
 800432e:	42ab      	cmp	r3, r5
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	d9f7      	bls.n	8004324 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8004334:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8004336:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8004338:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800433c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8004340:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8004344:	b123      	cbz	r3, 8004350 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8004346:	4640      	mov	r0, r8
}
 8004348:	b002      	add	sp, #8
 800434a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800434e:	4718      	bx	r3
}
 8004350:	b002      	add	sp, #8
 8004352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004356:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004358:	680a      	ldr	r2, [r1, #0]
 800435a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800435e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004360:	d12a      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004362:	05d7      	lsls	r7, r2, #23
 8004364:	d403      	bmi.n	800436e <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004366:	680a      	ldr	r2, [r1, #0]
 8004368:	f022 0208 	bic.w	r2, r2, #8
 800436c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800436e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8004372:	2a00      	cmp	r2, #0
 8004374:	d0a5      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8004376:	4640      	mov	r0, r8
 8004378:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800437a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800437e:	e7a0      	b.n	80042c2 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004380:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004382:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8004386:	f042 0204 	orr.w	r2, r2, #4
 800438a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800438e:	e78f      	b.n	80042b0 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004390:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004392:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8004396:	f042 0202 	orr.w	r2, r2, #2
 800439a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800439e:	e77e      	b.n	800429e <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043a0:	680f      	ldr	r7, [r1, #0]
 80043a2:	f027 0704 	bic.w	r7, r7, #4
 80043a6:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043a8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043aa:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80043b6:	e769      	b.n	800428c <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043b8:	0312      	lsls	r2, r2, #12
 80043ba:	d5d8      	bpl.n	800436e <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043bc:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80043c0:	2a00      	cmp	r2, #0
 80043c2:	d1d8      	bne.n	8004376 <HAL_DMA_IRQHandler+0x112>
 80043c4:	e77d      	b.n	80042c2 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043c6:	680a      	ldr	r2, [r1, #0]
 80043c8:	f022 0216 	bic.w	r2, r2, #22
 80043cc:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043ce:	694a      	ldr	r2, [r1, #20]
 80043d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043d4:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043d6:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80043da:	b352      	cbz	r2, 8004432 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043dc:	680a      	ldr	r2, [r1, #0]
 80043de:	f022 0208 	bic.w	r2, r2, #8
 80043e2:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e4:	223f      	movs	r2, #63	; 0x3f
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80043ea:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043ee:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80043f0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80043f2:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80043f4:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80043f8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80043fc:	2900      	cmp	r1, #0
 80043fe:	d0a7      	beq.n	8004350 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8004400:	4640      	mov	r0, r8
}
 8004402:	b002      	add	sp, #8
 8004404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8004408:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800440a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800440e:	f47f af6f 	bne.w	80042f0 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004412:	680a      	ldr	r2, [r1, #0]
 8004414:	f022 0210 	bic.w	r2, r2, #16
 8004418:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800441a:	2201      	movs	r2, #1
 800441c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8004420:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8004424:	e764      	b.n	80042f0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8004426:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800442a:	2b00      	cmp	r3, #0
 800442c:	f47f af63 	bne.w	80042f6 <HAL_DMA_IRQHandler+0x92>
 8004430:	e763      	b.n	80042fa <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004432:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8004436:	2a00      	cmp	r2, #0
 8004438:	d1d0      	bne.n	80043dc <HAL_DMA_IRQHandler+0x178>
 800443a:	e7d3      	b.n	80043e4 <HAL_DMA_IRQHandler+0x180>
 800443c:	20000004 	.word	0x20000004
 8004440:	1b4e81b5 	.word	0x1b4e81b5

08004444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004448:	2200      	movs	r2, #0
 800444a:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800444c:	4e70      	ldr	r6, [pc, #448]	; (8004610 <HAL_GPIO_Init+0x1cc>)
{
 800444e:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004450:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8004452:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004456:	4689      	mov	r9, r1
 8004458:	e004      	b.n	8004464 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800445a:	3301      	adds	r3, #1
 800445c:	2b10      	cmp	r3, #16
 800445e:	f102 0202 	add.w	r2, r2, #2
 8004462:	d078      	beq.n	8004556 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8004464:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004468:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 800446c:	43a1      	bics	r1, r4
 800446e:	d1f4      	bne.n	800445a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004470:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8004474:	f00c 0103 	and.w	r1, ip, #3
 8004478:	1e4d      	subs	r5, r1, #1
 800447a:	2d01      	cmp	r5, #1
 800447c:	d96e      	bls.n	800455c <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800447e:	2903      	cmp	r1, #3
 8004480:	f040 80ae 	bne.w	80045e0 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004484:	4091      	lsls	r1, r2
 8004486:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8004488:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800448a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800448c:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800448e:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004492:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004494:	d0e1      	beq.n	800445a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004496:	4d5f      	ldr	r5, [pc, #380]	; (8004614 <HAL_GPIO_Init+0x1d0>)
 8004498:	2100      	movs	r1, #0
 800449a:	9103      	str	r1, [sp, #12]
 800449c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800449e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80044a2:	6469      	str	r1, [r5, #68]	; 0x44
 80044a4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80044a6:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80044aa:	9103      	str	r1, [sp, #12]
 80044ac:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80044ae:	f023 0103 	bic.w	r1, r3, #3
 80044b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80044b6:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044ba:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80044be:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044c2:	00bf      	lsls	r7, r7, #2
 80044c4:	250f      	movs	r5, #15
 80044c6:	40bd      	lsls	r5, r7
 80044c8:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044cc:	4d52      	ldr	r5, [pc, #328]	; (8004618 <HAL_GPIO_Init+0x1d4>)
 80044ce:	42a8      	cmp	r0, r5
 80044d0:	d017      	beq.n	8004502 <HAL_GPIO_Init+0xbe>
 80044d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80044d6:	42a8      	cmp	r0, r5
 80044d8:	f000 8086 	beq.w	80045e8 <HAL_GPIO_Init+0x1a4>
 80044dc:	4d4f      	ldr	r5, [pc, #316]	; (800461c <HAL_GPIO_Init+0x1d8>)
 80044de:	42a8      	cmp	r0, r5
 80044e0:	f000 8087 	beq.w	80045f2 <HAL_GPIO_Init+0x1ae>
 80044e4:	4d4e      	ldr	r5, [pc, #312]	; (8004620 <HAL_GPIO_Init+0x1dc>)
 80044e6:	42a8      	cmp	r0, r5
 80044e8:	f000 808a 	beq.w	8004600 <HAL_GPIO_Init+0x1bc>
 80044ec:	4d4d      	ldr	r5, [pc, #308]	; (8004624 <HAL_GPIO_Init+0x1e0>)
 80044ee:	42a8      	cmp	r0, r5
 80044f0:	bf0c      	ite	eq
 80044f2:	f04f 0e04 	moveq.w	lr, #4
 80044f6:	f04f 0e07 	movne.w	lr, #7
 80044fa:	fa0e f707 	lsl.w	r7, lr, r7
 80044fe:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004502:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8004506:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004508:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800450c:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004510:	bf0c      	ite	eq
 8004512:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8004514:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8004518:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 800451a:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800451c:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004520:	bf0c      	ite	eq
 8004522:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004524:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8004528:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 800452a:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800452c:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004530:	bf0c      	ite	eq
 8004532:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004534:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8004538:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800453a:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800453c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004540:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8004544:	bf0c      	ite	eq
 8004546:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8004548:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800454c:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800454e:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004550:	f102 0202 	add.w	r2, r2, #2
 8004554:	d186      	bne.n	8004464 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004556:	b005      	add	sp, #20
 8004558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800455c:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8004560:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004562:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004566:	2503      	movs	r5, #3
 8004568:	fa05 fe02 	lsl.w	lr, r5, r2
 800456c:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004570:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8004574:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004576:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004578:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800457c:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004580:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8004584:	409f      	lsls	r7, r3
 8004586:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800458a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800458c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800458e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004592:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004596:	4097      	lsls	r7, r2
 8004598:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800459c:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 800459e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045a0:	fa01 f102 	lsl.w	r1, r1, r2
 80045a4:	f47f af70 	bne.w	8004488 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 80045a8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80045ac:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045b0:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80045b4:	f8de 7020 	ldr.w	r7, [lr, #32]
 80045b8:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045ba:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045be:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045c2:	fa07 f708 	lsl.w	r7, r7, r8
 80045c6:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045c8:	270f      	movs	r7, #15
 80045ca:	fa07 f808 	lsl.w	r8, r7, r8
 80045ce:	9f00      	ldr	r7, [sp, #0]
 80045d0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045d4:	9f01      	ldr	r7, [sp, #4]
 80045d6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80045da:	f8ce 7020 	str.w	r7, [lr, #32]
 80045de:	e753      	b.n	8004488 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045e0:	2503      	movs	r5, #3
 80045e2:	4095      	lsls	r5, r2
 80045e4:	43ed      	mvns	r5, r5
 80045e6:	e7d1      	b.n	800458c <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045e8:	fa0a f707 	lsl.w	r7, sl, r7
 80045ec:	ea48 0807 	orr.w	r8, r8, r7
 80045f0:	e787      	b.n	8004502 <HAL_GPIO_Init+0xbe>
 80045f2:	f04f 0e02 	mov.w	lr, #2
 80045f6:	fa0e f707 	lsl.w	r7, lr, r7
 80045fa:	ea48 0807 	orr.w	r8, r8, r7
 80045fe:	e780      	b.n	8004502 <HAL_GPIO_Init+0xbe>
 8004600:	f04f 0e03 	mov.w	lr, #3
 8004604:	fa0e f707 	lsl.w	r7, lr, r7
 8004608:	ea48 0807 	orr.w	r8, r8, r7
 800460c:	e779      	b.n	8004502 <HAL_GPIO_Init+0xbe>
 800460e:	bf00      	nop
 8004610:	40013c00 	.word	0x40013c00
 8004614:	40023800 	.word	0x40023800
 8004618:	40020000 	.word	0x40020000
 800461c:	40020800 	.word	0x40020800
 8004620:	40020c00 	.word	0x40020c00
 8004624:	40021000 	.word	0x40021000

08004628 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004628:	b902      	cbnz	r2, 800462c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800462a:	0409      	lsls	r1, r1, #16
 800462c:	6181      	str	r1, [r0, #24]
  }
}
 800462e:	4770      	bx	lr

08004630 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004630:	4a04      	ldr	r2, [pc, #16]	; (8004644 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004632:	6951      	ldr	r1, [r2, #20]
 8004634:	4201      	tst	r1, r0
 8004636:	d100      	bne.n	800463a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004638:	4770      	bx	lr
{
 800463a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800463c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800463e:	f7fe f8bf 	bl	80027c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004642:	bd08      	pop	{r3, pc}
 8004644:	40013c00 	.word	0x40013c00

08004648 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464c:	6804      	ldr	r4, [r0, #0]
{
 800464e:	b083      	sub	sp, #12
 8004650:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004652:	6823      	ldr	r3, [r4, #0]
{
 8004654:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8004658:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8004660:	4606      	mov	r6, r0
 8004662:	468a      	mov	sl, r1
 8004664:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004666:	6023      	str	r3, [r4, #0]
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004668:	f1b9 3fff 	cmp.w	r9, #4294967295
 800466c:	d135      	bne.n	80046da <I2C_RequestMemoryWrite+0x92>
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800466e:	6965      	ldr	r5, [r4, #20]
 8004670:	07e8      	lsls	r0, r5, #31
 8004672:	d5fc      	bpl.n	800466e <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004674:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 8004678:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800467a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800467e:	d003      	beq.n	8004688 <I2C_RequestMemoryWrite+0x40>
 8004680:	e04e      	b.n	8004720 <I2C_RequestMemoryWrite+0xd8>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004682:	6961      	ldr	r1, [r4, #20]
 8004684:	054d      	lsls	r5, r1, #21
 8004686:	d45c      	bmi.n	8004742 <I2C_RequestMemoryWrite+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004688:	6961      	ldr	r1, [r4, #20]
 800468a:	078b      	lsls	r3, r1, #30
 800468c:	d5f9      	bpl.n	8004682 <I2C_RequestMemoryWrite+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468e:	2300      	movs	r3, #0
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	6963      	ldr	r3, [r4, #20]
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	69a3      	ldr	r3, [r4, #24]
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800469c:	f1b9 3fff 	cmp.w	r9, #4294967295
 80046a0:	f040 8087 	bne.w	80047b2 <I2C_RequestMemoryWrite+0x16a>
 80046a4:	6963      	ldr	r3, [r4, #20]
 80046a6:	061a      	lsls	r2, r3, #24
 80046a8:	d463      	bmi.n	8004772 <I2C_RequestMemoryWrite+0x12a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046aa:	6963      	ldr	r3, [r4, #20]
 80046ac:	055b      	lsls	r3, r3, #21
 80046ae:	d5f9      	bpl.n	80046a4 <I2C_RequestMemoryWrite+0x5c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046b0:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80046b2:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80046b8:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80046ba:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046bc:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c0:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046c4:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046ca:	f043 0304 	orr.w	r3, r3, #4
 80046ce:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d0:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d066      	beq.n	80047a4 <I2C_RequestMemoryWrite+0x15c>
    return HAL_ERROR;
 80046d6:	2001      	movs	r0, #1
 80046d8:	e01f      	b.n	800471a <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046da:	6963      	ldr	r3, [r4, #20]
 80046dc:	07d9      	lsls	r1, r3, #31
 80046de:	d4c9      	bmi.n	8004674 <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e0:	f7ff f9b0 	bl	8003a44 <HAL_GetTick>
 80046e4:	eba0 000b 	sub.w	r0, r0, fp
 80046e8:	4581      	cmp	r9, r0
 80046ea:	d304      	bcc.n	80046f6 <I2C_RequestMemoryWrite+0xae>
 80046ec:	f1b9 0f00 	cmp.w	r9, #0
 80046f0:	d001      	beq.n	80046f6 <I2C_RequestMemoryWrite+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f2:	6834      	ldr	r4, [r6, #0]
 80046f4:	e7b8      	b.n	8004668 <I2C_RequestMemoryWrite+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046f6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80046f8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046fa:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046fc:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004700:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004704:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004706:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8004708:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800470c:	f042 0220 	orr.w	r2, r2, #32
 8004710:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004712:	680b      	ldr	r3, [r1, #0]
 8004714:	05dc      	lsls	r4, r3, #23
 8004716:	d435      	bmi.n	8004784 <I2C_RequestMemoryWrite+0x13c>
    return HAL_TIMEOUT;
 8004718:	2003      	movs	r0, #3
}
 800471a:	b003      	add	sp, #12
 800471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004720:	6963      	ldr	r3, [r4, #20]
 8004722:	0798      	lsls	r0, r3, #30
 8004724:	d4b3      	bmi.n	800468e <I2C_RequestMemoryWrite+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004726:	6963      	ldr	r3, [r4, #20]
 8004728:	055a      	lsls	r2, r3, #21
 800472a:	d40a      	bmi.n	8004742 <I2C_RequestMemoryWrite+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472c:	f7ff f98a 	bl	8003a44 <HAL_GetTick>
 8004730:	eba0 000b 	sub.w	r0, r0, fp
 8004734:	4581      	cmp	r9, r0
 8004736:	d34e      	bcc.n	80047d6 <I2C_RequestMemoryWrite+0x18e>
 8004738:	f1b9 0f00 	cmp.w	r9, #0
 800473c:	d04b      	beq.n	80047d6 <I2C_RequestMemoryWrite+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800473e:	6834      	ldr	r4, [r6, #0]
 8004740:	e79b      	b.n	800467a <I2C_RequestMemoryWrite+0x32>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004748:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800474a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800474c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004750:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004752:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004754:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004756:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475a:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800475e:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004760:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004764:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8004768:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800476a:	6433      	str	r3, [r6, #64]	; 0x40
}
 800476c:	b003      	add	sp, #12
 800476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004772:	f1b8 0f01 	cmp.w	r8, #1
 8004776:	d109      	bne.n	800478c <I2C_RequestMemoryWrite+0x144>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004778:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 800477a:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800477c:	6127      	str	r7, [r4, #16]
}
 800477e:	b003      	add	sp, #12
 8004780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004788:	6433      	str	r3, [r6, #64]	; 0x40
 800478a:	e7c5      	b.n	8004718 <I2C_RequestMemoryWrite+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800478c:	0a3b      	lsrs	r3, r7, #8
 800478e:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004790:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004794:	d12e      	bne.n	80047f4 <I2C_RequestMemoryWrite+0x1ac>
 8004796:	6963      	ldr	r3, [r4, #20]
 8004798:	0619      	lsls	r1, r3, #24
 800479a:	d4ed      	bmi.n	8004778 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800479c:	6963      	ldr	r3, [r4, #20]
 800479e:	055a      	lsls	r2, r3, #21
 80047a0:	d5f9      	bpl.n	8004796 <I2C_RequestMemoryWrite+0x14e>
 80047a2:	e785      	b.n	80046b0 <I2C_RequestMemoryWrite+0x68>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	6832      	ldr	r2, [r6, #0]
 80047a6:	6813      	ldr	r3, [r2, #0]
 80047a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 80047ac:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	e7b3      	b.n	800471a <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b2:	6963      	ldr	r3, [r4, #20]
 80047b4:	061d      	lsls	r5, r3, #24
 80047b6:	d4dc      	bmi.n	8004772 <I2C_RequestMemoryWrite+0x12a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047b8:	6963      	ldr	r3, [r4, #20]
 80047ba:	0559      	lsls	r1, r3, #21
 80047bc:	f53f af78 	bmi.w	80046b0 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c0:	f7ff f940 	bl	8003a44 <HAL_GetTick>
 80047c4:	eba0 000b 	sub.w	r0, r0, fp
 80047c8:	4581      	cmp	r9, r0
 80047ca:	d325      	bcc.n	8004818 <I2C_RequestMemoryWrite+0x1d0>
 80047cc:	f1b9 0f00 	cmp.w	r9, #0
 80047d0:	d022      	beq.n	8004818 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047d2:	6834      	ldr	r4, [r6, #0]
 80047d4:	e762      	b.n	800469c <I2C_RequestMemoryWrite+0x54>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047d6:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80047d8:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047da:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047dc:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e0:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047e4:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80047e6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ea:	f043 0320 	orr.w	r3, r3, #32
 80047ee:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 80047f0:	2001      	movs	r0, #1
 80047f2:	e792      	b.n	800471a <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047f4:	6963      	ldr	r3, [r4, #20]
 80047f6:	061b      	lsls	r3, r3, #24
 80047f8:	d4be      	bmi.n	8004778 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047fa:	6963      	ldr	r3, [r4, #20]
 80047fc:	0558      	lsls	r0, r3, #21
 80047fe:	f53f af57 	bmi.w	80046b0 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7ff f91f 	bl	8003a44 <HAL_GetTick>
 8004806:	eba0 000b 	sub.w	r0, r0, fp
 800480a:	4581      	cmp	r9, r0
 800480c:	d304      	bcc.n	8004818 <I2C_RequestMemoryWrite+0x1d0>
 800480e:	f1b9 0f00 	cmp.w	r9, #0
 8004812:	d001      	beq.n	8004818 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004814:	6834      	ldr	r4, [r6, #0]
 8004816:	e7bb      	b.n	8004790 <I2C_RequestMemoryWrite+0x148>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004818:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800481a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800481c:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800481e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004822:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004826:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004828:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800482c:	f043 0320 	orr.w	r3, r3, #32
 8004830:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004832:	e74d      	b.n	80046d0 <I2C_RequestMemoryWrite+0x88>

08004834 <I2C_RequestMemoryRead>:
{
 8004834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004838:	6804      	ldr	r4, [r0, #0]
{
 800483a:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004842:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004844:	6823      	ldr	r3, [r4, #0]
{
 8004846:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800484c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004850:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004854:	6023      	str	r3, [r4, #0]
{
 8004856:	4606      	mov	r6, r0
 8004858:	468b      	mov	fp, r1
 800485a:	4617      	mov	r7, r2
 800485c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004860:	d139      	bne.n	80048d6 <I2C_RequestMemoryRead+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004862:	6965      	ldr	r5, [r4, #20]
 8004864:	07eb      	lsls	r3, r5, #31
 8004866:	d5fc      	bpl.n	8004862 <I2C_RequestMemoryRead+0x2e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004868:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	fa5f fb8b 	uxtb.w	fp, fp
 8004872:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004876:	d003      	beq.n	8004880 <I2C_RequestMemoryRead+0x4c>
 8004878:	e068      	b.n	800494c <I2C_RequestMemoryRead+0x118>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800487a:	6961      	ldr	r1, [r4, #20]
 800487c:	054a      	lsls	r2, r1, #21
 800487e:	d450      	bmi.n	8004922 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004880:	6961      	ldr	r1, [r4, #20]
 8004882:	0789      	lsls	r1, r1, #30
 8004884:	d5f9      	bpl.n	800487a <I2C_RequestMemoryRead+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004886:	2300      	movs	r3, #0
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	6963      	ldr	r3, [r4, #20]
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	69a3      	ldr	r3, [r4, #24]
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004894:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004898:	f040 80b8 	bne.w	8004a0c <I2C_RequestMemoryRead+0x1d8>
 800489c:	6963      	ldr	r3, [r4, #20]
 800489e:	0618      	lsls	r0, r3, #24
 80048a0:	d467      	bmi.n	8004972 <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048a2:	6963      	ldr	r3, [r4, #20]
 80048a4:	0559      	lsls	r1, r3, #21
 80048a6:	d5f9      	bpl.n	800489c <I2C_RequestMemoryRead+0x68>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80048a8:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80048aa:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ac:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80048b0:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80048b2:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048b4:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b8:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048bc:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80048be:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048c2:	f043 0304 	orr.w	r3, r3, #4
 80048c6:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048c8:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d06c      	beq.n	80049a8 <I2C_RequestMemoryRead+0x174>
    return HAL_ERROR;
 80048ce:	2001      	movs	r0, #1
}
 80048d0:	b003      	add	sp, #12
 80048d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d6:	6963      	ldr	r3, [r4, #20]
 80048d8:	07dd      	lsls	r5, r3, #31
 80048da:	d4c5      	bmi.n	8004868 <I2C_RequestMemoryRead+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048dc:	f7ff f8b2 	bl	8003a44 <HAL_GetTick>
 80048e0:	eba0 0009 	sub.w	r0, r0, r9
 80048e4:	4582      	cmp	sl, r0
 80048e6:	d304      	bcc.n	80048f2 <I2C_RequestMemoryRead+0xbe>
 80048e8:	f1ba 0f00 	cmp.w	sl, #0
 80048ec:	d001      	beq.n	80048f2 <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ee:	6834      	ldr	r4, [r6, #0]
 80048f0:	e7b4      	b.n	800485c <I2C_RequestMemoryRead+0x28>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048f2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80048f4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048f6:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048f8:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048fc:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004900:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004902:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8004904:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004908:	f042 0220 	orr.w	r2, r2, #32
 800490c:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800490e:	680b      	ldr	r3, [r1, #0]
 8004910:	05dc      	lsls	r4, r3, #23
 8004912:	d502      	bpl.n	800491a <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004918:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 800491a:	2003      	movs	r0, #3
}
 800491c:	b003      	add	sp, #12
 800491e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004928:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800492a:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800492c:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800492e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004932:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004934:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004936:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493a:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800493e:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004940:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	6433      	str	r3, [r6, #64]	; 0x40
 800494a:	e7c0      	b.n	80048ce <I2C_RequestMemoryRead+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800494c:	6963      	ldr	r3, [r4, #20]
 800494e:	079b      	lsls	r3, r3, #30
 8004950:	d499      	bmi.n	8004886 <I2C_RequestMemoryRead+0x52>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004952:	6963      	ldr	r3, [r4, #20]
 8004954:	0558      	lsls	r0, r3, #21
 8004956:	d4e4      	bmi.n	8004922 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004958:	f7ff f874 	bl	8003a44 <HAL_GetTick>
 800495c:	eba0 0009 	sub.w	r0, r0, r9
 8004960:	4582      	cmp	sl, r0
 8004962:	f0c0 808b 	bcc.w	8004a7c <I2C_RequestMemoryRead+0x248>
 8004966:	f1ba 0f00 	cmp.w	sl, #0
 800496a:	f000 8087 	beq.w	8004a7c <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800496e:	6834      	ldr	r4, [r6, #0]
 8004970:	e77f      	b.n	8004872 <I2C_RequestMemoryRead+0x3e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004972:	f1b8 0f01 	cmp.w	r8, #1
 8004976:	d10b      	bne.n	8004990 <I2C_RequestMemoryRead+0x15c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004978:	b2ff      	uxtb	r7, r7
 800497a:	6127      	str	r7, [r4, #16]
 800497c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004980:	d16a      	bne.n	8004a58 <I2C_RequestMemoryRead+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004982:	6963      	ldr	r3, [r4, #20]
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	d416      	bmi.n	80049b6 <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004988:	6963      	ldr	r3, [r4, #20]
 800498a:	055f      	lsls	r7, r3, #21
 800498c:	d5f9      	bpl.n	8004982 <I2C_RequestMemoryRead+0x14e>
 800498e:	e78b      	b.n	80048a8 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004990:	0a3b      	lsrs	r3, r7, #8
 8004992:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004994:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004998:	d17f      	bne.n	8004a9a <I2C_RequestMemoryRead+0x266>
 800499a:	6963      	ldr	r3, [r4, #20]
 800499c:	061d      	lsls	r5, r3, #24
 800499e:	d4eb      	bmi.n	8004978 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049a0:	6963      	ldr	r3, [r4, #20]
 80049a2:	0558      	lsls	r0, r3, #21
 80049a4:	d5f9      	bpl.n	800499a <I2C_RequestMemoryRead+0x166>
 80049a6:	e77f      	b.n	80048a8 <I2C_RequestMemoryRead+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a8:	6832      	ldr	r2, [r6, #0]
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 80049b0:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e78c      	b.n	80048d0 <I2C_RequestMemoryRead+0x9c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049bc:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80049be:	f1ba 3fff 	cmp.w	sl, #4294967295
 80049c2:	d113      	bne.n	80049ec <I2C_RequestMemoryRead+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c4:	6963      	ldr	r3, [r4, #20]
 80049c6:	07d8      	lsls	r0, r3, #31
 80049c8:	d5fc      	bpl.n	80049c4 <I2C_RequestMemoryRead+0x190>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049ca:	f04b 0301 	orr.w	r3, fp, #1
 80049ce:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80049d0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80049d4:	d003      	beq.n	80049de <I2C_RequestMemoryRead+0x1aa>
 80049d6:	e02b      	b.n	8004a30 <I2C_RequestMemoryRead+0x1fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049d8:	6963      	ldr	r3, [r4, #20]
 80049da:	055b      	lsls	r3, r3, #21
 80049dc:	d4a1      	bmi.n	8004922 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049de:	6963      	ldr	r3, [r4, #20]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	f013 0302 	ands.w	r3, r3, #2
 80049e6:	d1f7      	bne.n	80049d8 <I2C_RequestMemoryRead+0x1a4>
  return HAL_OK;
 80049e8:	4618      	mov	r0, r3
 80049ea:	e771      	b.n	80048d0 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049ec:	6963      	ldr	r3, [r4, #20]
 80049ee:	07d9      	lsls	r1, r3, #31
 80049f0:	d4eb      	bmi.n	80049ca <I2C_RequestMemoryRead+0x196>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f2:	f7ff f827 	bl	8003a44 <HAL_GetTick>
 80049f6:	eba0 0009 	sub.w	r0, r0, r9
 80049fa:	4582      	cmp	sl, r0
 80049fc:	f4ff af79 	bcc.w	80048f2 <I2C_RequestMemoryRead+0xbe>
 8004a00:	f1ba 0f00 	cmp.w	sl, #0
 8004a04:	f43f af75 	beq.w	80048f2 <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a08:	6834      	ldr	r4, [r6, #0]
 8004a0a:	e7d8      	b.n	80049be <I2C_RequestMemoryRead+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a0c:	6963      	ldr	r3, [r4, #20]
 8004a0e:	061a      	lsls	r2, r3, #24
 8004a10:	d4af      	bmi.n	8004972 <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a12:	6963      	ldr	r3, [r4, #20]
 8004a14:	055d      	lsls	r5, r3, #21
 8004a16:	f53f af47 	bmi.w	80048a8 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7ff f813 	bl	8003a44 <HAL_GetTick>
 8004a1e:	eba0 0009 	sub.w	r0, r0, r9
 8004a22:	4582      	cmp	sl, r0
 8004a24:	d34c      	bcc.n	8004ac0 <I2C_RequestMemoryRead+0x28c>
 8004a26:	f1ba 0f00 	cmp.w	sl, #0
 8004a2a:	d049      	beq.n	8004ac0 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a2c:	6834      	ldr	r4, [r6, #0]
 8004a2e:	e731      	b.n	8004894 <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a30:	6963      	ldr	r3, [r4, #20]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	f013 0302 	ands.w	r3, r3, #2
 8004a38:	d0d6      	beq.n	80049e8 <I2C_RequestMemoryRead+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a3a:	6963      	ldr	r3, [r4, #20]
 8004a3c:	055a      	lsls	r2, r3, #21
 8004a3e:	f53f af70 	bmi.w	8004922 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a42:	f7fe ffff 	bl	8003a44 <HAL_GetTick>
 8004a46:	eba0 0009 	sub.w	r0, r0, r9
 8004a4a:	4582      	cmp	sl, r0
 8004a4c:	d316      	bcc.n	8004a7c <I2C_RequestMemoryRead+0x248>
 8004a4e:	f1ba 0f00 	cmp.w	sl, #0
 8004a52:	d013      	beq.n	8004a7c <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a54:	6834      	ldr	r4, [r6, #0]
 8004a56:	e7bb      	b.n	80049d0 <I2C_RequestMemoryRead+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a58:	6963      	ldr	r3, [r4, #20]
 8004a5a:	061d      	lsls	r5, r3, #24
 8004a5c:	d4ab      	bmi.n	80049b6 <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a5e:	6963      	ldr	r3, [r4, #20]
 8004a60:	055a      	lsls	r2, r3, #21
 8004a62:	f53f af21 	bmi.w	80048a8 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fe ffed 	bl	8003a44 <HAL_GetTick>
 8004a6a:	eba0 0009 	sub.w	r0, r0, r9
 8004a6e:	4582      	cmp	sl, r0
 8004a70:	d326      	bcc.n	8004ac0 <I2C_RequestMemoryRead+0x28c>
 8004a72:	f1ba 0f00 	cmp.w	sl, #0
 8004a76:	d023      	beq.n	8004ac0 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a78:	6834      	ldr	r4, [r6, #0]
 8004a7a:	e77f      	b.n	800497c <I2C_RequestMemoryRead+0x148>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7c:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a7e:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a80:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a82:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a86:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a8a:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004a8c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a90:	f043 0320 	orr.w	r3, r3, #32
 8004a94:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8004a96:	2001      	movs	r0, #1
 8004a98:	e71a      	b.n	80048d0 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a9a:	6963      	ldr	r3, [r4, #20]
 8004a9c:	0619      	lsls	r1, r3, #24
 8004a9e:	f53f af6b 	bmi.w	8004978 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa2:	6963      	ldr	r3, [r4, #20]
 8004aa4:	055b      	lsls	r3, r3, #21
 8004aa6:	f53f aeff 	bmi.w	80048a8 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fe ffcb 	bl	8003a44 <HAL_GetTick>
 8004aae:	eba0 0009 	sub.w	r0, r0, r9
 8004ab2:	4582      	cmp	sl, r0
 8004ab4:	d304      	bcc.n	8004ac0 <I2C_RequestMemoryRead+0x28c>
 8004ab6:	f1ba 0f00 	cmp.w	sl, #0
 8004aba:	d001      	beq.n	8004ac0 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004abc:	6834      	ldr	r4, [r6, #0]
 8004abe:	e769      	b.n	8004994 <I2C_RequestMemoryRead+0x160>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ac0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ac2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ac4:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ac6:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004aca:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ace:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004ad0:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ad4:	f043 0320 	orr.w	r3, r3, #32
 8004ad8:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004ada:	e6f5      	b.n	80048c8 <I2C_RequestMemoryRead+0x94>

08004adc <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004adc:	2800      	cmp	r0, #0
 8004ade:	f000 80b9 	beq.w	8004c54 <HAL_I2C_Init+0x178>
{
 8004ae2:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ae4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ae8:	4604      	mov	r4, r0
 8004aea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 8098 	beq.w	8004c24 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8004af4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af6:	2224      	movs	r2, #36	; 0x24
 8004af8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b12:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b14:	f001 fa04 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	494f      	ldr	r1, [pc, #316]	; (8004c58 <HAL_I2C_Init+0x17c>)
 8004b1c:	428b      	cmp	r3, r1
 8004b1e:	d84f      	bhi.n	8004bc0 <HAL_I2C_Init+0xe4>
 8004b20:	4a4e      	ldr	r2, [pc, #312]	; (8004c5c <HAL_I2C_Init+0x180>)
 8004b22:	4290      	cmp	r0, r2
 8004b24:	d97c      	bls.n	8004c20 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8004b26:	4d4e      	ldr	r5, [pc, #312]	; (8004c60 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b28:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8004b2a:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b2e:	1e43      	subs	r3, r0, #1
 8004b30:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	6850      	ldr	r0, [r2, #4]
 8004b38:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8004b3c:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8004b40:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004b42:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b44:	f101 0c01 	add.w	ip, r1, #1
 8004b48:	6a11      	ldr	r1, [r2, #32]
 8004b4a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004b4e:	ea41 010c 	orr.w	r1, r1, ip
 8004b52:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b54:	69d1      	ldr	r1, [r2, #28]
 8004b56:	f640 7efc 	movw	lr, #4092	; 0xffc
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004b60:	ea13 0f0e 	tst.w	r3, lr
 8004b64:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004b68:	d161      	bne.n	8004c2e <HAL_I2C_Init+0x152>
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b70:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8004b74:	6811      	ldr	r1, [r2, #0]
 8004b76:	4303      	orrs	r3, r0
 8004b78:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b80:	6891      	ldr	r1, [r2, #8]
 8004b82:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8004b86:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004b8a:	4303      	orrs	r3, r0
 8004b8c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004b90:	430b      	orrs	r3, r1
 8004b92:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b94:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8004b98:	68d1      	ldr	r1, [r2, #12]
 8004b9a:	4303      	orrs	r3, r0
 8004b9c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004ba4:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba6:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8004ba8:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8004bac:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8004bae:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb0:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bb6:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8004bbc:	4618      	mov	r0, r3
}
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bc0:	4a28      	ldr	r2, [pc, #160]	; (8004c64 <HAL_I2C_Init+0x188>)
 8004bc2:	4290      	cmp	r0, r2
 8004bc4:	d92c      	bls.n	8004c20 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8004bc6:	4d26      	ldr	r5, [pc, #152]	; (8004c60 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bc8:	4e27      	ldr	r6, [pc, #156]	; (8004c68 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8004bca:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	6855      	ldr	r5, [r2, #4]
 8004bd2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004bd6:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8004bda:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004bdc:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004be0:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8004be4:	fb05 f101 	mul.w	r1, r5, r1
 8004be8:	fba6 5101 	umull	r5, r1, r6, r1
 8004bec:	6a15      	ldr	r5, [r2, #32]
 8004bee:	0989      	lsrs	r1, r1, #6
 8004bf0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004bf4:	3101      	adds	r1, #1
 8004bf6:	4329      	orrs	r1, r5
 8004bf8:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bfa:	69d1      	ldr	r1, [r2, #28]
 8004bfc:	68a5      	ldr	r5, [r4, #8]
 8004bfe:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004c02:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004c06:	b9ad      	cbnz	r5, 8004c34 <HAL_I2C_Init+0x158>
 8004c08:	3801      	subs	r0, #1
 8004c0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c12:	3301      	adds	r3, #1
 8004c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c18:	b1d3      	cbz	r3, 8004c50 <HAL_I2C_Init+0x174>
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1e:	e7a5      	b.n	8004b6c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004c20:	2001      	movs	r0, #1
}
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004c24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004c28:	f7fe fa36 	bl	8003098 <HAL_I2C_MspInit>
 8004c2c:	e762      	b.n	8004af4 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c32:	e79b      	b.n	8004b6c <HAL_I2C_Init+0x90>
 8004c34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c38:	3801      	subs	r0, #1
 8004c3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c42:	3301      	adds	r3, #1
 8004c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c48:	b113      	cbz	r3, 8004c50 <HAL_I2C_Init+0x174>
 8004c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c4e:	e78d      	b.n	8004b6c <HAL_I2C_Init+0x90>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e78b      	b.n	8004b6c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004c54:	2001      	movs	r0, #1
}
 8004c56:	4770      	bx	lr
 8004c58:	000186a0 	.word	0x000186a0
 8004c5c:	001e847f 	.word	0x001e847f
 8004c60:	431bde83 	.word	0x431bde83
 8004c64:	003d08ff 	.word	0x003d08ff
 8004c68:	10624dd3 	.word	0x10624dd3

08004c6c <HAL_I2C_Master_Transmit>:
{
 8004c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c70:	4605      	mov	r5, r0
 8004c72:	b083      	sub	sp, #12
 8004c74:	4699      	mov	r9, r3
 8004c76:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004c78:	4688      	mov	r8, r1
 8004c7a:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8004c7c:	f7fe fee2 	bl	8003a44 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c80:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d003      	beq.n	8004c90 <HAL_I2C_Master_Transmit+0x24>
      return HAL_BUSY;
 8004c88:	2002      	movs	r0, #2
}
 8004c8a:	b003      	add	sp, #12
 8004c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c90:	4606      	mov	r6, r0
 8004c92:	e005      	b.n	8004ca0 <HAL_I2C_Master_Transmit+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c94:	f7fe fed6 	bl	8003a44 <HAL_GetTick>
 8004c98:	1b80      	subs	r0, r0, r6
 8004c9a:	2819      	cmp	r0, #25
 8004c9c:	f200 80f5 	bhi.w	8004e8a <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca0:	682c      	ldr	r4, [r5, #0]
 8004ca2:	69a3      	ldr	r3, [r4, #24]
 8004ca4:	ea6f 0c03 	mvn.w	ip, r3
 8004ca8:	f01c 0b02 	ands.w	fp, ip, #2
 8004cac:	d0f2      	beq.n	8004c94 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8004cae:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d0e8      	beq.n	8004c88 <HAL_I2C_Master_Transmit+0x1c>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	07d9      	lsls	r1, r3, #31
 8004cc0:	d56f      	bpl.n	8004da2 <HAL_I2C_Master_Transmit+0x136>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc2:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc4:	4a97      	ldr	r2, [pc, #604]	; (8004f24 <HAL_I2C_Master_Transmit+0x2b8>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cca:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ccc:	2321      	movs	r3, #33	; 0x21
 8004cce:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cd2:	2310      	movs	r3, #16
 8004cd4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004cdc:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ce0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ce2:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004ce4:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ce6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8004ce8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d006      	beq.n	8004cfe <HAL_I2C_Master_Transmit+0x92>
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d004      	beq.n	8004cfe <HAL_I2C_Master_Transmit+0x92>
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d002      	beq.n	8004cfe <HAL_I2C_Master_Transmit+0x92>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004cf8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004cfa:	2b12      	cmp	r3, #18
 8004cfc:	d103      	bne.n	8004d06 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	1c7b      	adds	r3, r7, #1
 8004d08:	d13d      	bne.n	8004d86 <HAL_I2C_Master_Transmit+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d0a:	6963      	ldr	r3, [r4, #20]
 8004d0c:	07d8      	lsls	r0, r3, #31
 8004d0e:	d5fc      	bpl.n	8004d0a <HAL_I2C_Master_Transmit+0x9e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d10:	692b      	ldr	r3, [r5, #16]
 8004d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d16:	d149      	bne.n	8004dac <HAL_I2C_Master_Transmit+0x140>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d18:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8004d1c:	6121      	str	r1, [r4, #16]
 8004d1e:	1c78      	adds	r0, r7, #1
 8004d20:	d004      	beq.n	8004d2c <HAL_I2C_Master_Transmit+0xc0>
 8004d22:	e0d8      	b.n	8004ed6 <HAL_I2C_Master_Transmit+0x26a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d24:	6963      	ldr	r3, [r4, #20]
 8004d26:	055a      	lsls	r2, r3, #21
 8004d28:	f100 80bd 	bmi.w	8004ea6 <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d2c:	6963      	ldr	r3, [r4, #20]
 8004d2e:	0799      	lsls	r1, r3, #30
 8004d30:	d5f8      	bpl.n	8004d24 <HAL_I2C_Master_Transmit+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d32:	2300      	movs	r3, #0
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	6963      	ldr	r3, [r4, #20]
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	69a3      	ldr	r3, [r4, #24]
 8004d3c:	9301      	str	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 8004d3e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d40:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d074      	beq.n	8004e30 <HAL_I2C_Master_Transmit+0x1c4>
 8004d46:	1c79      	adds	r1, r7, #1
 8004d48:	d17f      	bne.n	8004e4a <HAL_I2C_Master_Transmit+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d4a:	6963      	ldr	r3, [r4, #20]
 8004d4c:	061a      	lsls	r2, r3, #24
 8004d4e:	d441      	bmi.n	8004dd4 <HAL_I2C_Master_Transmit+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d50:	6963      	ldr	r3, [r4, #20]
 8004d52:	055b      	lsls	r3, r3, #21
 8004d54:	d5f9      	bpl.n	8004d4a <HAL_I2C_Master_Transmit+0xde>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d56:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d58:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d5a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004d5e:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d60:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d62:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d66:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d6a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004d6c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d70:	f043 0304 	orr.w	r3, r3, #4
 8004d74:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d76:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	f000 80e4 	beq.w	8004f46 <HAL_I2C_Master_Transmit+0x2da>
      return HAL_ERROR;
 8004d7e:	2001      	movs	r0, #1
}
 8004d80:	b003      	add	sp, #12
 8004d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d86:	6963      	ldr	r3, [r4, #20]
 8004d88:	07d9      	lsls	r1, r3, #31
 8004d8a:	d4c1      	bmi.n	8004d10 <HAL_I2C_Master_Transmit+0xa4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8c:	f7fe fe5a 	bl	8003a44 <HAL_GetTick>
 8004d90:	1b80      	subs	r0, r0, r6
 8004d92:	4287      	cmp	r7, r0
 8004d94:	f0c0 80af 	bcc.w	8004ef6 <HAL_I2C_Master_Transmit+0x28a>
 8004d98:	2f00      	cmp	r7, #0
 8004d9a:	f000 80ac 	beq.w	8004ef6 <HAL_I2C_Master_Transmit+0x28a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d9e:	682c      	ldr	r4, [r5, #0]
 8004da0:	e7b1      	b.n	8004d06 <HAL_I2C_Master_Transmit+0x9a>
      __HAL_I2C_ENABLE(hi2c);
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	e78a      	b.n	8004cc2 <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dac:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8004db0:	f003 0306 	and.w	r3, r3, #6
 8004db4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8004db8:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8004dba:	1c7b      	adds	r3, r7, #1
 8004dbc:	d003      	beq.n	8004dc6 <HAL_I2C_Master_Transmit+0x15a>
 8004dbe:	e0b3      	b.n	8004f28 <HAL_I2C_Master_Transmit+0x2bc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dc0:	6963      	ldr	r3, [r4, #20]
 8004dc2:	0559      	lsls	r1, r3, #21
 8004dc4:	d46f      	bmi.n	8004ea6 <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dc6:	6963      	ldr	r3, [r4, #20]
 8004dc8:	0718      	lsls	r0, r3, #28
 8004dca:	d5f9      	bpl.n	8004dc0 <HAL_I2C_Master_Transmit+0x154>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dcc:	fa5f f388 	uxtb.w	r3, r8
 8004dd0:	6123      	str	r3, [r4, #16]
 8004dd2:	e7a4      	b.n	8004d1e <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd4:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8004dd6:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dda:	4601      	mov	r1, r0
      hi2c->XferSize--;
 8004ddc:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004de4:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8004de6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004de8:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004df0:	6963      	ldr	r3, [r4, #20]
      hi2c->XferSize--;
 8004df2:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004df4:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8004df6:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004df8:	d50c      	bpl.n	8004e14 <HAL_I2C_Master_Transmit+0x1a8>
 8004dfa:	b15a      	cbz	r2, 8004e14 <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dfc:	7843      	ldrb	r3, [r0, #1]
 8004dfe:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8004e00:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8004e02:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8004e04:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 8004e08:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8004e0a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8004e0c:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004e10:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8004e12:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8004e14:	1c78      	adds	r0, r7, #1
 8004e16:	d128      	bne.n	8004e6a <HAL_I2C_Master_Transmit+0x1fe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e18:	6963      	ldr	r3, [r4, #20]
 8004e1a:	0759      	lsls	r1, r3, #29
 8004e1c:	d405      	bmi.n	8004e2a <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e1e:	6963      	ldr	r3, [r4, #20]
 8004e20:	055a      	lsls	r2, r3, #21
 8004e22:	d498      	bmi.n	8004d56 <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e24:	6963      	ldr	r3, [r4, #20]
 8004e26:	0759      	lsls	r1, r3, #29
 8004e28:	d5f9      	bpl.n	8004e1e <HAL_I2C_Master_Transmit+0x1b2>
    while (hi2c->XferSize > 0U)
 8004e2a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d18a      	bne.n	8004d46 <HAL_I2C_Master_Transmit+0xda>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e30:	6823      	ldr	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e32:	2000      	movs	r0, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8004e38:	2220      	movs	r2, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3a:	6023      	str	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e3c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004e40:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e44:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8004e48:	e71f      	b.n	8004c8a <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e4a:	6963      	ldr	r3, [r4, #20]
 8004e4c:	0618      	lsls	r0, r3, #24
 8004e4e:	d4c1      	bmi.n	8004dd4 <HAL_I2C_Master_Transmit+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e50:	6963      	ldr	r3, [r4, #20]
 8004e52:	0558      	lsls	r0, r3, #21
 8004e54:	f53f af7f 	bmi.w	8004d56 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e58:	f7fe fdf4 	bl	8003a44 <HAL_GetTick>
 8004e5c:	1b80      	subs	r0, r0, r6
 8004e5e:	4287      	cmp	r7, r0
 8004e60:	d378      	bcc.n	8004f54 <HAL_I2C_Master_Transmit+0x2e8>
 8004e62:	2f00      	cmp	r7, #0
 8004e64:	d076      	beq.n	8004f54 <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e66:	682c      	ldr	r4, [r5, #0]
 8004e68:	e76d      	b.n	8004d46 <HAL_I2C_Master_Transmit+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e6a:	6963      	ldr	r3, [r4, #20]
 8004e6c:	075b      	lsls	r3, r3, #29
 8004e6e:	d4dc      	bmi.n	8004e2a <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e70:	6963      	ldr	r3, [r4, #20]
 8004e72:	055b      	lsls	r3, r3, #21
 8004e74:	f53f af6f 	bmi.w	8004d56 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e78:	f7fe fde4 	bl	8003a44 <HAL_GetTick>
 8004e7c:	1b80      	subs	r0, r0, r6
 8004e7e:	4287      	cmp	r7, r0
 8004e80:	d368      	bcc.n	8004f54 <HAL_I2C_Master_Transmit+0x2e8>
 8004e82:	2f00      	cmp	r7, #0
 8004e84:	d066      	beq.n	8004f54 <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e86:	682c      	ldr	r4, [r5, #0]
 8004e88:	e7c4      	b.n	8004e14 <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e8a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e8c:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e90:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e94:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e98:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004e9a:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e9e:	f043 0320 	orr.w	r3, r3, #32
 8004ea2:	642b      	str	r3, [r5, #64]	; 0x40
 8004ea4:	e6f0      	b.n	8004c88 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eac:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eae:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb0:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eb4:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb6:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb8:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eba:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebe:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ec2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004ec4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ec8:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8004ecc:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ece:	642b      	str	r3, [r5, #64]	; 0x40
}
 8004ed0:	b003      	add	sp, #12
 8004ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ed6:	6963      	ldr	r3, [r4, #20]
 8004ed8:	079b      	lsls	r3, r3, #30
 8004eda:	f53f af2a 	bmi.w	8004d32 <HAL_I2C_Master_Transmit+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ede:	6963      	ldr	r3, [r4, #20]
 8004ee0:	055b      	lsls	r3, r3, #21
 8004ee2:	d4e0      	bmi.n	8004ea6 <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee4:	f7fe fdae 	bl	8003a44 <HAL_GetTick>
 8004ee8:	1b80      	subs	r0, r0, r6
 8004eea:	4287      	cmp	r7, r0
 8004eec:	d340      	bcc.n	8004f70 <HAL_I2C_Master_Transmit+0x304>
 8004eee:	2f00      	cmp	r7, #0
 8004ef0:	d03e      	beq.n	8004f70 <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ef2:	682c      	ldr	r4, [r5, #0]
 8004ef4:	e713      	b.n	8004d1e <HAL_I2C_Master_Transmit+0xb2>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ef6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ef8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004efa:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004efc:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f00:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f04:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f06:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 8004f08:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f0c:	f042 0220 	orr.w	r2, r2, #32
 8004f10:	642a      	str	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f12:	680b      	ldr	r3, [r1, #0]
 8004f14:	05da      	lsls	r2, r3, #23
 8004f16:	f57f af32 	bpl.w	8004d7e <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f1e:	642b      	str	r3, [r5, #64]	; 0x40
 8004f20:	e72d      	b.n	8004d7e <HAL_I2C_Master_Transmit+0x112>
 8004f22:	bf00      	nop
 8004f24:	ffff0000 	.word	0xffff0000
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f28:	6963      	ldr	r3, [r4, #20]
 8004f2a:	071a      	lsls	r2, r3, #28
 8004f2c:	f53f af4e 	bmi.w	8004dcc <HAL_I2C_Master_Transmit+0x160>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f30:	6963      	ldr	r3, [r4, #20]
 8004f32:	055a      	lsls	r2, r3, #21
 8004f34:	d4b7      	bmi.n	8004ea6 <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f36:	f7fe fd85 	bl	8003a44 <HAL_GetTick>
 8004f3a:	1b80      	subs	r0, r0, r6
 8004f3c:	4287      	cmp	r7, r0
 8004f3e:	d317      	bcc.n	8004f70 <HAL_I2C_Master_Transmit+0x304>
 8004f40:	b1b7      	cbz	r7, 8004f70 <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f42:	682c      	ldr	r4, [r5, #0]
 8004f44:	e739      	b.n	8004dba <HAL_I2C_Master_Transmit+0x14e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f46:	682a      	ldr	r2, [r5, #0]
 8004f48:	6813      	ldr	r3, [r2, #0]
 8004f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        return HAL_ERROR;
 8004f4e:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e69a      	b.n	8004c8a <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f54:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f56:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f58:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f5a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f5e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f62:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004f64:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f68:	f043 0320 	orr.w	r3, r3, #32
 8004f6c:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8004f6e:	e702      	b.n	8004d76 <HAL_I2C_Master_Transmit+0x10a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f70:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f72:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f74:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f76:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004f80:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f84:	f043 0320 	orr.w	r3, r3, #32
 8004f88:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	e67d      	b.n	8004c8a <HAL_I2C_Master_Transmit+0x1e>
 8004f8e:	bf00      	nop

08004f90 <HAL_I2C_Master_Receive>:
{
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	4605      	mov	r5, r0
 8004f96:	b087      	sub	sp, #28
 8004f98:	4699      	mov	r9, r3
 8004f9a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8004f9c:	4688      	mov	r8, r1
 8004f9e:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8004fa0:	f7fe fd50 	bl	8003a44 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fa4:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d003      	beq.n	8004fb4 <HAL_I2C_Master_Receive+0x24>
      return HAL_BUSY;
 8004fac:	2002      	movs	r0, #2
}
 8004fae:	b007      	add	sp, #28
 8004fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	e005      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb8:	f7fe fd44 	bl	8003a44 <HAL_GetTick>
 8004fbc:	1bc0      	subs	r0, r0, r7
 8004fbe:	2819      	cmp	r0, #25
 8004fc0:	f200 80a7 	bhi.w	8005112 <HAL_I2C_Master_Receive+0x182>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fc4:	682c      	ldr	r4, [r5, #0]
 8004fc6:	69a0      	ldr	r0, [r4, #24]
 8004fc8:	43c0      	mvns	r0, r0
 8004fca:	f010 0b02 	ands.w	fp, r0, #2
 8004fce:	d0f3      	beq.n	8004fb8 <HAL_I2C_Master_Receive+0x28>
    __HAL_LOCK(hi2c);
 8004fd0:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d0e9      	beq.n	8004fac <HAL_I2C_Master_Receive+0x1c>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	07db      	lsls	r3, r3, #31
 8004fe2:	d560      	bpl.n	80050a6 <HAL_I2C_Master_Receive+0x116>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe4:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe6:	4a8d      	ldr	r2, [pc, #564]	; (800521c <HAL_I2C_Master_Receive+0x28c>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fec:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fee:	2322      	movs	r3, #34	; 0x22
 8004ff0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004ffe:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005002:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005004:	62ea      	str	r2, [r5, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005006:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005008:	852b      	strh	r3, [r5, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500a:	6823      	ldr	r3, [r4, #0]
    hi2c->pBuffPtr    = pData;
 800500c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005014:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005016:	6023      	str	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005018:	d007      	beq.n	800502a <HAL_I2C_Master_Receive+0x9a>
 800501a:	2a01      	cmp	r2, #1
 800501c:	d005      	beq.n	800502a <HAL_I2C_Master_Receive+0x9a>
 800501e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005022:	d002      	beq.n	800502a <HAL_I2C_Master_Receive+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005024:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005026:	2b11      	cmp	r3, #17
 8005028:	d103      	bne.n	8005032 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	1c70      	adds	r0, r6, #1
 8005034:	d129      	bne.n	800508a <HAL_I2C_Master_Receive+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005036:	6963      	ldr	r3, [r4, #20]
 8005038:	07d9      	lsls	r1, r3, #31
 800503a:	d5fc      	bpl.n	8005036 <HAL_I2C_Master_Receive+0xa6>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800503c:	692b      	ldr	r3, [r5, #16]
 800503e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005042:	d135      	bne.n	80050b0 <HAL_I2C_Master_Receive+0x120>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005044:	f048 0301 	orr.w	r3, r8, #1
 8005048:	b2db      	uxtb	r3, r3
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	1c72      	adds	r2, r6, #1
 800504e:	d003      	beq.n	8005058 <HAL_I2C_Master_Receive+0xc8>
 8005050:	e107      	b.n	8005262 <HAL_I2C_Master_Receive+0x2d2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005052:	6963      	ldr	r3, [r4, #20]
 8005054:	0558      	lsls	r0, r3, #21
 8005056:	d46a      	bmi.n	800512e <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005058:	6963      	ldr	r3, [r4, #20]
 800505a:	079b      	lsls	r3, r3, #30
 800505c:	d5f9      	bpl.n	8005052 <HAL_I2C_Master_Receive+0xc2>
    if (hi2c->XferSize == 0U)
 800505e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8005060:	2b00      	cmp	r3, #0
 8005062:	d17c      	bne.n	800515e <HAL_I2C_Master_Receive+0x1ce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	6963      	ldr	r3, [r4, #20]
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	69a3      	ldr	r3, [r4, #24]
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005076:	6023      	str	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800507a:	2320      	movs	r3, #32
 800507c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8005080:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005084:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8005088:	e791      	b.n	8004fae <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800508a:	6963      	ldr	r3, [r4, #20]
 800508c:	07da      	lsls	r2, r3, #31
 800508e:	d4d5      	bmi.n	800503c <HAL_I2C_Master_Receive+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005090:	f7fe fcd8 	bl	8003a44 <HAL_GetTick>
 8005094:	1bc0      	subs	r0, r0, r7
 8005096:	4286      	cmp	r6, r0
 8005098:	f0c0 810c 	bcc.w	80052b4 <HAL_I2C_Master_Receive+0x324>
 800509c:	2e00      	cmp	r6, #0
 800509e:	f000 8109 	beq.w	80052b4 <HAL_I2C_Master_Receive+0x324>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a2:	682c      	ldr	r4, [r5, #0]
 80050a4:	e7c5      	b.n	8005032 <HAL_I2C_Master_Receive+0xa2>
      __HAL_I2C_ENABLE(hi2c);
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	e799      	b.n	8004fe4 <HAL_I2C_Master_Receive+0x54>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050b0:	ea4f 19e8 	mov.w	r9, r8, asr #7
 80050b4:	f009 0906 	and.w	r9, r9, #6
 80050b8:	f049 03f0 	orr.w	r3, r9, #240	; 0xf0
 80050bc:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80050be:	1c70      	adds	r0, r6, #1
 80050c0:	d003      	beq.n	80050ca <HAL_I2C_Master_Receive+0x13a>
 80050c2:	e11d      	b.n	8005300 <HAL_I2C_Master_Receive+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050c4:	6963      	ldr	r3, [r4, #20]
 80050c6:	055a      	lsls	r2, r3, #21
 80050c8:	d431      	bmi.n	800512e <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050ca:	6963      	ldr	r3, [r4, #20]
 80050cc:	0719      	lsls	r1, r3, #28
 80050ce:	d5f9      	bpl.n	80050c4 <HAL_I2C_Master_Receive+0x134>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050d0:	fa5f f388 	uxtb.w	r3, r8
 80050d4:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80050d6:	1c71      	adds	r1, r6, #1
 80050d8:	d003      	beq.n	80050e2 <HAL_I2C_Master_Receive+0x152>
 80050da:	e1a6      	b.n	800542a <HAL_I2C_Master_Receive+0x49a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050dc:	6963      	ldr	r3, [r4, #20]
 80050de:	055b      	lsls	r3, r3, #21
 80050e0:	d425      	bmi.n	800512e <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050e2:	6963      	ldr	r3, [r4, #20]
 80050e4:	079a      	lsls	r2, r3, #30
 80050e6:	d5f9      	bpl.n	80050dc <HAL_I2C_Master_Receive+0x14c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e8:	2300      	movs	r3, #0
 80050ea:	9305      	str	r3, [sp, #20]
 80050ec:	6963      	ldr	r3, [r4, #20]
 80050ee:	9305      	str	r3, [sp, #20]
 80050f0:	69a3      	ldr	r3, [r4, #24]
 80050f2:	9305      	str	r3, [sp, #20]
 80050f4:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fc:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80050fe:	1c72      	adds	r2, r6, #1
 8005100:	f040 81a6 	bne.w	8005450 <HAL_I2C_Master_Receive+0x4c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005104:	6963      	ldr	r3, [r4, #20]
 8005106:	07db      	lsls	r3, r3, #31
 8005108:	d5fc      	bpl.n	8005104 <HAL_I2C_Master_Receive+0x174>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800510a:	f049 03f1 	orr.w	r3, r9, #241	; 0xf1
 800510e:	6123      	str	r3, [r4, #16]
 8005110:	e79c      	b.n	800504c <HAL_I2C_Master_Receive+0xbc>
        hi2c->State             = HAL_I2C_STATE_READY;
 8005112:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005114:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005118:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800511c:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005120:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005122:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005126:	f043 0320 	orr.w	r3, r3, #32
 800512a:	642b      	str	r3, [r5, #64]	; 0x40
 800512c:	e73e      	b.n	8004fac <HAL_I2C_Master_Receive+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005134:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005136:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005138:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800513c:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800513e:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005140:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005142:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005146:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800514a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800514c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005150:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8005154:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005156:	642b      	str	r3, [r5, #64]	; 0x40
}
 8005158:	b007      	add	sp, #28
 800515a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (hi2c->XferSize == 1U)
 800515e:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005160:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 8005162:	f000 8153 	beq.w	800540c <HAL_I2C_Master_Receive+0x47c>
    else if (hi2c->XferSize == 2U)
 8005166:	2b02      	cmp	r3, #2
 8005168:	f000 810b 	beq.w	8005382 <HAL_I2C_Master_Receive+0x3f2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005170:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005172:	2200      	movs	r2, #0
 8005174:	9204      	str	r2, [sp, #16]
 8005176:	6962      	ldr	r2, [r4, #20]
 8005178:	9204      	str	r2, [sp, #16]
 800517a:	69a2      	ldr	r2, [r4, #24]
 800517c:	9204      	str	r2, [sp, #16]
 800517e:	9a04      	ldr	r2, [sp, #16]
      if (hi2c->XferSize <= 3U)
 8005180:	2b03      	cmp	r3, #3
 8005182:	d848      	bhi.n	8005216 <HAL_I2C_Master_Receive+0x286>
        if (hi2c->XferSize == 1U)
 8005184:	2b01      	cmp	r3, #1
 8005186:	f000 8128 	beq.w	80053da <HAL_I2C_Master_Receive+0x44a>
        else if (hi2c->XferSize == 2U)
 800518a:	2b02      	cmp	r3, #2
 800518c:	f000 80d4 	beq.w	8005338 <HAL_I2C_Master_Receive+0x3a8>
 8005190:	1c72      	adds	r2, r6, #1
 8005192:	f040 8105 	bne.w	80053a0 <HAL_I2C_Master_Receive+0x410>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005196:	6963      	ldr	r3, [r4, #20]
 8005198:	075b      	lsls	r3, r3, #29
 800519a:	d5fc      	bpl.n	8005196 <HAL_I2C_Master_Receive+0x206>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051a4:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	7013      	strb	r3, [r2, #0]
          hi2c->XferCount--;
 80051aa:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80051ac:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80051ae:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 80051b0:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80051b2:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80051b4:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80051b6:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80051b8:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80051ba:	852a      	strh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 80051bc:	856b      	strh	r3, [r5, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80051be:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c0:	682a      	ldr	r2, [r5, #0]
 80051c2:	f040 80fc 	bne.w	80053be <HAL_I2C_Master_Receive+0x42e>
 80051c6:	6953      	ldr	r3, [r2, #20]
 80051c8:	075b      	lsls	r3, r3, #29
 80051ca:	d5fc      	bpl.n	80051c6 <HAL_I2C_Master_Receive+0x236>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051cc:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ce:	6a69      	ldr	r1, [r5, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051d4:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d6:	6913      	ldr	r3, [r2, #16]
 80051d8:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80051da:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80051dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80051de:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e0:	6828      	ldr	r0, [r5, #0]
          hi2c->XferCount--;
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e8:	6900      	ldr	r0, [r0, #16]
          hi2c->XferSize--;
 80051ea:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 80051ec:	1c4c      	adds	r4, r1, #1
 80051ee:	626c      	str	r4, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80051f0:	852b      	strh	r3, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f2:	7048      	strb	r0, [r1, #1]
          hi2c->XferSize--;
 80051f4:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 80051f6:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80051f8:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80051fa:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 80051fc:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 80051fe:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8005200:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8005202:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8005204:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8005206:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8005208:	856a      	strh	r2, [r5, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800520a:	2b00      	cmp	r3, #0
 800520c:	f43f af34 	beq.w	8005078 <HAL_I2C_Master_Receive+0xe8>
      if (hi2c->XferSize <= 3U)
 8005210:	2b03      	cmp	r3, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005212:	682c      	ldr	r4, [r5, #0]
      if (hi2c->XferSize <= 3U)
 8005214:	d9b6      	bls.n	8005184 <HAL_I2C_Master_Receive+0x1f4>
 8005216:	b966      	cbnz	r6, 8005232 <HAL_I2C_Master_Receive+0x2a2>
 8005218:	e033      	b.n	8005282 <HAL_I2C_Master_Receive+0x2f2>
 800521a:	bf00      	nop
 800521c:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005220:	6963      	ldr	r3, [r4, #20]
 8005222:	06db      	lsls	r3, r3, #27
 8005224:	d45c      	bmi.n	80052e0 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005226:	f7fe fc0d 	bl	8003a44 <HAL_GetTick>
 800522a:	1bc0      	subs	r0, r0, r7
 800522c:	4286      	cmp	r6, r0
 800522e:	d330      	bcc.n	8005292 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005230:	682c      	ldr	r4, [r5, #0]
 8005232:	6963      	ldr	r3, [r4, #20]
 8005234:	065a      	lsls	r2, r3, #25
 8005236:	d5f3      	bpl.n	8005220 <HAL_I2C_Master_Receive+0x290>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800523a:	6922      	ldr	r2, [r4, #16]
 800523c:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 800523e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005240:	6828      	ldr	r0, [r5, #0]
        hi2c->XferSize--;
 8005242:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8005244:	6a69      	ldr	r1, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8005246:	3a01      	subs	r2, #1
 8005248:	b292      	uxth	r2, r2
 800524a:	856a      	strh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800524c:	6942      	ldr	r2, [r0, #20]
        hi2c->XferSize--;
 800524e:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8005250:	1c4c      	adds	r4, r1, #1
        hi2c->XferSize--;
 8005252:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005254:	0752      	lsls	r2, r2, #29
        hi2c->pBuffPtr++;
 8005256:	626c      	str	r4, [r5, #36]	; 0x24
        hi2c->XferSize--;
 8005258:	852b      	strh	r3, [r5, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800525a:	d5d6      	bpl.n	800520a <HAL_I2C_Master_Receive+0x27a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525c:	6903      	ldr	r3, [r0, #16]
 800525e:	704b      	strb	r3, [r1, #1]
 8005260:	e083      	b.n	800536a <HAL_I2C_Master_Receive+0x3da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005262:	6963      	ldr	r3, [r4, #20]
 8005264:	0799      	lsls	r1, r3, #30
 8005266:	f53f aefa 	bmi.w	800505e <HAL_I2C_Master_Receive+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800526a:	6963      	ldr	r3, [r4, #20]
 800526c:	0559      	lsls	r1, r3, #21
 800526e:	f53f af5e 	bmi.w	800512e <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fe fbe7 	bl	8003a44 <HAL_GetTick>
 8005276:	1bc0      	subs	r0, r0, r7
 8005278:	4286      	cmp	r6, r0
 800527a:	d30a      	bcc.n	8005292 <HAL_I2C_Master_Receive+0x302>
 800527c:	b14e      	cbz	r6, 8005292 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800527e:	682c      	ldr	r4, [r5, #0]
 8005280:	e6e4      	b.n	800504c <HAL_I2C_Master_Receive+0xbc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005282:	6963      	ldr	r3, [r4, #20]
 8005284:	0659      	lsls	r1, r3, #25
 8005286:	d4d7      	bmi.n	8005238 <HAL_I2C_Master_Receive+0x2a8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005288:	6963      	ldr	r3, [r4, #20]
 800528a:	06d8      	lsls	r0, r3, #27
 800528c:	d428      	bmi.n	80052e0 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fe fbd9 	bl	8003a44 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005292:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005294:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005296:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005298:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800529c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052a0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80052a2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052a6:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 80052aa:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052ac:	642b      	str	r3, [r5, #64]	; 0x40
}
 80052ae:	b007      	add	sp, #28
 80052b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052b4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80052b6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052b8:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052ba:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052be:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052c2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052c4:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 80052c6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052ca:	f042 0220 	orr.w	r2, r2, #32
 80052ce:	642a      	str	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052d0:	680b      	ldr	r3, [r1, #0]
 80052d2:	05d9      	lsls	r1, r3, #23
 80052d4:	d512      	bpl.n	80052fc <HAL_I2C_Master_Receive+0x36c>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052da:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80052dc:	2001      	movs	r0, #1
 80052de:	e666      	b.n	8004fae <HAL_I2C_Master_Receive+0x1e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052e0:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80052e2:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e4:	f06f 0110 	mvn.w	r1, #16
 80052e8:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ea:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052ec:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052f4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80052f6:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80052f8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 80052fc:	2001      	movs	r0, #1
 80052fe:	e656      	b.n	8004fae <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005300:	6963      	ldr	r3, [r4, #20]
 8005302:	071b      	lsls	r3, r3, #28
 8005304:	f53f aee4 	bmi.w	80050d0 <HAL_I2C_Master_Receive+0x140>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005308:	6963      	ldr	r3, [r4, #20]
 800530a:	055b      	lsls	r3, r3, #21
 800530c:	f53f af0f 	bmi.w	800512e <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005310:	f7fe fb98 	bl	8003a44 <HAL_GetTick>
 8005314:	1bc0      	subs	r0, r0, r7
 8005316:	4286      	cmp	r6, r0
 8005318:	d3bb      	bcc.n	8005292 <HAL_I2C_Master_Receive+0x302>
 800531a:	2e00      	cmp	r6, #0
 800531c:	d0b9      	beq.n	8005292 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800531e:	682c      	ldr	r4, [r5, #0]
 8005320:	e6cd      	b.n	80050be <HAL_I2C_Master_Receive+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005322:	6963      	ldr	r3, [r4, #20]
 8005324:	0759      	lsls	r1, r3, #29
 8005326:	d40c      	bmi.n	8005342 <HAL_I2C_Master_Receive+0x3b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005328:	f7fe fb8c 	bl	8003a44 <HAL_GetTick>
 800532c:	1bc0      	subs	r0, r0, r7
 800532e:	4286      	cmp	r6, r0
 8005330:	d3af      	bcc.n	8005292 <HAL_I2C_Master_Receive+0x302>
 8005332:	2e00      	cmp	r6, #0
 8005334:	d0ad      	beq.n	8005292 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005336:	682c      	ldr	r4, [r5, #0]
 8005338:	1c73      	adds	r3, r6, #1
 800533a:	d1f2      	bne.n	8005322 <HAL_I2C_Master_Receive+0x392>
 800533c:	6963      	ldr	r3, [r4, #20]
 800533e:	0758      	lsls	r0, r3, #29
 8005340:	d5fc      	bpl.n	800533c <HAL_I2C_Master_Receive+0x3ac>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005348:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800534c:	6922      	ldr	r2, [r4, #16]
 800534e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005350:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8005352:	1c53      	adds	r3, r2, #1
 8005354:	626b      	str	r3, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8005356:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 800535c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800535e:	3b01      	subs	r3, #1
 8005360:	b29b      	uxth	r3, r3
 8005362:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 800536a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 800536c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800536e:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8005370:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8005372:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8005374:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8005376:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8005378:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 800537a:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferCount--;
 800537c:	856a      	strh	r2, [r5, #42]	; 0x2a
          hi2c->XferSize--;
 800537e:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8005380:	e743      	b.n	800520a <HAL_I2C_Master_Receive+0x27a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005386:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005388:	6822      	ldr	r2, [r4, #0]
 800538a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538e:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005390:	2200      	movs	r2, #0
 8005392:	9203      	str	r2, [sp, #12]
 8005394:	6962      	ldr	r2, [r4, #20]
 8005396:	9203      	str	r2, [sp, #12]
 8005398:	69a2      	ldr	r2, [r4, #24]
 800539a:	9203      	str	r2, [sp, #12]
 800539c:	9a03      	ldr	r2, [sp, #12]
 800539e:	e6ef      	b.n	8005180 <HAL_I2C_Master_Receive+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053a0:	6963      	ldr	r3, [r4, #20]
 80053a2:	0758      	lsls	r0, r3, #29
 80053a4:	f53f aefa 	bmi.w	800519c <HAL_I2C_Master_Receive+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a8:	f7fe fb4c 	bl	8003a44 <HAL_GetTick>
 80053ac:	1bc0      	subs	r0, r0, r7
 80053ae:	4286      	cmp	r6, r0
 80053b0:	f4ff af6f 	bcc.w	8005292 <HAL_I2C_Master_Receive+0x302>
 80053b4:	2e00      	cmp	r6, #0
 80053b6:	f43f af6c 	beq.w	8005292 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ba:	682c      	ldr	r4, [r5, #0]
 80053bc:	e6e8      	b.n	8005190 <HAL_I2C_Master_Receive+0x200>
 80053be:	6953      	ldr	r3, [r2, #20]
 80053c0:	075c      	lsls	r4, r3, #29
 80053c2:	f53f af03 	bmi.w	80051cc <HAL_I2C_Master_Receive+0x23c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c6:	f7fe fb3d 	bl	8003a44 <HAL_GetTick>
 80053ca:	1bc0      	subs	r0, r0, r7
 80053cc:	4286      	cmp	r6, r0
 80053ce:	f4ff af60 	bcc.w	8005292 <HAL_I2C_Master_Receive+0x302>
 80053d2:	2e00      	cmp	r6, #0
 80053d4:	f47f aef3 	bne.w	80051be <HAL_I2C_Master_Receive+0x22e>
 80053d8:	e75b      	b.n	8005292 <HAL_I2C_Master_Receive+0x302>
 80053da:	b95e      	cbnz	r6, 80053f4 <HAL_I2C_Master_Receive+0x464>
 80053dc:	e011      	b.n	8005402 <HAL_I2C_Master_Receive+0x472>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053de:	6963      	ldr	r3, [r4, #20]
 80053e0:	06d9      	lsls	r1, r3, #27
 80053e2:	f53f af7d 	bmi.w	80052e0 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e6:	f7fe fb2d 	bl	8003a44 <HAL_GetTick>
 80053ea:	1bc0      	subs	r0, r0, r7
 80053ec:	4286      	cmp	r6, r0
 80053ee:	f4ff af50 	bcc.w	8005292 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053f2:	682c      	ldr	r4, [r5, #0]
 80053f4:	6963      	ldr	r3, [r4, #20]
 80053f6:	0658      	lsls	r0, r3, #25
 80053f8:	d5f1      	bpl.n	80053de <HAL_I2C_Master_Receive+0x44e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053fc:	6922      	ldr	r2, [r4, #16]
 80053fe:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005400:	e7b3      	b.n	800536a <HAL_I2C_Master_Receive+0x3da>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005402:	6963      	ldr	r3, [r4, #20]
 8005404:	065a      	lsls	r2, r3, #25
 8005406:	f57f af3f 	bpl.w	8005288 <HAL_I2C_Master_Receive+0x2f8>
 800540a:	e7f6      	b.n	80053fa <HAL_I2C_Master_Receive+0x46a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005410:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005412:	2200      	movs	r2, #0
 8005414:	9202      	str	r2, [sp, #8]
 8005416:	6962      	ldr	r2, [r4, #20]
 8005418:	9202      	str	r2, [sp, #8]
 800541a:	69a2      	ldr	r2, [r4, #24]
 800541c:	9202      	str	r2, [sp, #8]
 800541e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005420:	6822      	ldr	r2, [r4, #0]
 8005422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005426:	6022      	str	r2, [r4, #0]
 8005428:	e6aa      	b.n	8005180 <HAL_I2C_Master_Receive+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800542a:	6963      	ldr	r3, [r4, #20]
 800542c:	0798      	lsls	r0, r3, #30
 800542e:	f53f ae5b 	bmi.w	80050e8 <HAL_I2C_Master_Receive+0x158>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005432:	6963      	ldr	r3, [r4, #20]
 8005434:	0558      	lsls	r0, r3, #21
 8005436:	f53f ae7a 	bmi.w	800512e <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543a:	f7fe fb03 	bl	8003a44 <HAL_GetTick>
 800543e:	1bc0      	subs	r0, r0, r7
 8005440:	4286      	cmp	r6, r0
 8005442:	f4ff af26 	bcc.w	8005292 <HAL_I2C_Master_Receive+0x302>
 8005446:	2e00      	cmp	r6, #0
 8005448:	f43f af23 	beq.w	8005292 <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800544c:	682c      	ldr	r4, [r5, #0]
 800544e:	e642      	b.n	80050d6 <HAL_I2C_Master_Receive+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005450:	6963      	ldr	r3, [r4, #20]
 8005452:	07d8      	lsls	r0, r3, #31
 8005454:	f53f ae59 	bmi.w	800510a <HAL_I2C_Master_Receive+0x17a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005458:	f7fe faf4 	bl	8003a44 <HAL_GetTick>
 800545c:	1bc0      	subs	r0, r0, r7
 800545e:	4286      	cmp	r6, r0
 8005460:	f4ff af28 	bcc.w	80052b4 <HAL_I2C_Master_Receive+0x324>
 8005464:	2e00      	cmp	r6, #0
 8005466:	f43f af25 	beq.w	80052b4 <HAL_I2C_Master_Receive+0x324>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800546a:	682c      	ldr	r4, [r5, #0]
 800546c:	e647      	b.n	80050fe <HAL_I2C_Master_Receive+0x16e>
 800546e:	bf00      	nop

08005470 <HAL_I2C_Mem_Write>:
{
 8005470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	4604      	mov	r4, r0
 8005476:	b083      	sub	sp, #12
 8005478:	4699      	mov	r9, r3
 800547a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800547e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005480:	460f      	mov	r7, r1
 8005482:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005484:	f7fe fade 	bl	8003a44 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005488:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800548c:	2b20      	cmp	r3, #32
 800548e:	d004      	beq.n	800549a <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 8005490:	2702      	movs	r7, #2
}
 8005492:	4638      	mov	r0, r7
 8005494:	b003      	add	sp, #12
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549a:	4605      	mov	r5, r0
 800549c:	e005      	b.n	80054aa <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549e:	f7fe fad1 	bl	8003a44 <HAL_GetTick>
 80054a2:	1b40      	subs	r0, r0, r5
 80054a4:	2819      	cmp	r0, #25
 80054a6:	f200 80aa 	bhi.w	80055fe <HAL_I2C_Mem_Write+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054aa:	6820      	ldr	r0, [r4, #0]
 80054ac:	6983      	ldr	r3, [r0, #24]
 80054ae:	ea6f 0c03 	mvn.w	ip, r3
 80054b2:	f01c 0b02 	ands.w	fp, ip, #2
 80054b6:	d0f2      	beq.n	800549e <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 80054b8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d0e7      	beq.n	8005490 <HAL_I2C_Mem_Write+0x20>
 80054c0:	2301      	movs	r3, #1
 80054c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054c6:	6803      	ldr	r3, [r0, #0]
 80054c8:	07db      	lsls	r3, r3, #31
 80054ca:	d571      	bpl.n	80055b0 <HAL_I2C_Mem_Write+0x140>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054cc:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054ce:	6807      	ldr	r7, [r0, #0]
 80054d0:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 80054d4:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80054d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80054d8:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054da:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054dc:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054e0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054e4:	2040      	movs	r0, #64	; 0x40
 80054e6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ea:	2000      	movs	r0, #0
 80054ec:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80054ee:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054f2:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80054f4:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054f6:	4857      	ldr	r0, [pc, #348]	; (8005654 <HAL_I2C_Mem_Write+0x1e4>)
 80054f8:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054fa:	464b      	mov	r3, r9
 80054fc:	4642      	mov	r2, r8
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff f8a2 	bl	8004648 <I2C_RequestMemoryWrite>
 8005504:	4607      	mov	r7, r0
 8005506:	b9f8      	cbnz	r0, 8005548 <HAL_I2C_Mem_Write+0xd8>
    while (hi2c->XferSize > 0U)
 8005508:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80a0 	beq.w	8005650 <HAL_I2C_Mem_Write+0x1e0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	1c72      	adds	r2, r6, #1
 8005514:	d158      	bne.n	80055c8 <HAL_I2C_Mem_Write+0x158>
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	0610      	lsls	r0, r2, #24
 800551a:	d41a      	bmi.n	8005552 <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800551c:	695a      	ldr	r2, [r3, #20]
 800551e:	0551      	lsls	r1, r2, #21
 8005520:	d5f9      	bpl.n	8005516 <HAL_I2C_Mem_Write+0xa6>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005522:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005524:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8005528:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800552a:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800552c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800552e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005532:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005536:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8005538:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800553c:	f043 0304 	orr.w	r3, r3, #4
 8005540:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005544:	2b04      	cmp	r3, #4
 8005546:	d038      	beq.n	80055ba <HAL_I2C_Mem_Write+0x14a>
      return HAL_ERROR;
 8005548:	2701      	movs	r7, #1
}
 800554a:	4638      	mov	r0, r7
 800554c:	b003      	add	sp, #12
 800554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005552:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005556:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800555a:	4661      	mov	r1, ip
      hi2c->XferSize--;
 800555c:	f10e 30ff 	add.w	r0, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005560:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005564:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8005566:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005568:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800556a:	3a01      	subs	r2, #1
 800556c:	b292      	uxth	r2, r2
 800556e:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005570:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005572:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 8005574:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005576:	0740      	lsls	r0, r0, #29
 8005578:	d517      	bpl.n	80055aa <HAL_I2C_Mem_Write+0x13a>
 800557a:	b942      	cbnz	r2, 800558e <HAL_I2C_Mem_Write+0x11e>
 800557c:	1c72      	adds	r2, r6, #1
 800557e:	d159      	bne.n	8005634 <HAL_I2C_Mem_Write+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	0750      	lsls	r0, r2, #29
 8005584:	d449      	bmi.n	800561a <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	0551      	lsls	r1, r2, #21
 800558a:	d5f9      	bpl.n	8005580 <HAL_I2C_Mem_Write+0x110>
 800558c:	e7c9      	b.n	8005522 <HAL_I2C_Mem_Write+0xb2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800558e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8005592:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 8005594:	f10c 0102 	add.w	r1, ip, #2
 8005598:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800559a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800559c:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 80055a0:	3901      	subs	r1, #1
        hi2c->XferSize--;
 80055a2:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 80055a4:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 80055a6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80055a8:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	d1b1      	bne.n	8005512 <HAL_I2C_Mem_Write+0xa2>
 80055ae:	e7e5      	b.n	800557c <HAL_I2C_Mem_Write+0x10c>
      __HAL_I2C_ENABLE(hi2c);
 80055b0:	6803      	ldr	r3, [r0, #0]
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	6003      	str	r3, [r0, #0]
 80055b8:	e788      	b.n	80054cc <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	6813      	ldr	r3, [r2, #0]
 80055be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 80055c2:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e764      	b.n	8005492 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	0612      	lsls	r2, r2, #24
 80055cc:	d4c1      	bmi.n	8005552 <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	0551      	lsls	r1, r2, #21
 80055d2:	d4a6      	bmi.n	8005522 <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d4:	f7fe fa36 	bl	8003a44 <HAL_GetTick>
 80055d8:	1b40      	subs	r0, r0, r5
 80055da:	4286      	cmp	r6, r0
 80055dc:	d301      	bcc.n	80055e2 <HAL_I2C_Mem_Write+0x172>
 80055de:	2e00      	cmp	r6, #0
 80055e0:	d196      	bne.n	8005510 <HAL_I2C_Mem_Write+0xa0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055e2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80055e4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055e6:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055ec:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80055f2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055f6:	f043 0320 	orr.w	r3, r3, #32
 80055fa:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80055fc:	e7a1      	b.n	8005542 <HAL_I2C_Mem_Write+0xd2>
        hi2c->State             = HAL_I2C_STATE_READY;
 80055fe:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005600:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005604:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005608:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800560c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800560e:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005612:	f043 0320 	orr.w	r3, r3, #32
 8005616:	6423      	str	r3, [r4, #64]	; 0x40
 8005618:	e73a      	b.n	8005490 <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561a:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800561c:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8005622:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005624:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005626:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800562a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800562e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8005632:	e72e      	b.n	8005492 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	0752      	lsls	r2, r2, #29
 8005638:	d4ef      	bmi.n	800561a <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	0551      	lsls	r1, r2, #21
 800563e:	f53f af70 	bmi.w	8005522 <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fe f9ff 	bl	8003a44 <HAL_GetTick>
 8005646:	1b40      	subs	r0, r0, r5
 8005648:	4286      	cmp	r6, r0
 800564a:	d3ca      	bcc.n	80055e2 <HAL_I2C_Mem_Write+0x172>
 800564c:	2e00      	cmp	r6, #0
 800564e:	d0c8      	beq.n	80055e2 <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	e793      	b.n	800557c <HAL_I2C_Mem_Write+0x10c>
 8005654:	ffff0000 	.word	0xffff0000

08005658 <HAL_I2C_Mem_Read>:
{
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	4604      	mov	r4, r0
 800565e:	b087      	sub	sp, #28
 8005660:	4699      	mov	r9, r3
 8005662:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8005666:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005668:	460f      	mov	r7, r1
 800566a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800566c:	f7fe f9ea 	bl	8003a44 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005670:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005674:	2b20      	cmp	r3, #32
 8005676:	d004      	beq.n	8005682 <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8005678:	2702      	movs	r7, #2
}
 800567a:	4638      	mov	r0, r7
 800567c:	b007      	add	sp, #28
 800567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005682:	4606      	mov	r6, r0
 8005684:	e005      	b.n	8005692 <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005686:	f7fe f9dd 	bl	8003a44 <HAL_GetTick>
 800568a:	1b80      	subs	r0, r0, r6
 800568c:	2819      	cmp	r0, #25
 800568e:	f200 80d2 	bhi.w	8005836 <HAL_I2C_Mem_Read+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005692:	f8d4 c000 	ldr.w	ip, [r4]
 8005696:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800569a:	43c0      	mvns	r0, r0
 800569c:	f010 0b02 	ands.w	fp, r0, #2
 80056a0:	d0f1      	beq.n	8005686 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 80056a2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d0e6      	beq.n	8005678 <HAL_I2C_Mem_Read+0x20>
 80056aa:	2301      	movs	r3, #1
 80056ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056b0:	f8dc 3000 	ldr.w	r3, [ip]
 80056b4:	07d9      	lsls	r1, r3, #31
 80056b6:	d537      	bpl.n	8005728 <HAL_I2C_Mem_Read+0xd0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056b8:	f8dc 0000 	ldr.w	r0, [ip]
 80056bc:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80056c0:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 80056c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80056c6:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056c8:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056ca:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056ce:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056d2:	2040      	movs	r0, #64	; 0x40
 80056d4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d8:	2000      	movs	r0, #0
 80056da:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80056dc:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056e0:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80056e2:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056e4:	4893      	ldr	r0, [pc, #588]	; (8005934 <HAL_I2C_Mem_Read+0x2dc>)
 80056e6:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056e8:	4639      	mov	r1, r7
 80056ea:	464b      	mov	r3, r9
 80056ec:	4642      	mov	r2, r8
 80056ee:	4620      	mov	r0, r4
 80056f0:	f7ff f8a0 	bl	8004834 <I2C_RequestMemoryRead>
 80056f4:	4607      	mov	r7, r0
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f040 80ab 	bne.w	8005852 <HAL_I2C_Mem_Read+0x1fa>
    if (hi2c->XferSize == 0U)
 80056fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80056fe:	b9d2      	cbnz	r2, 8005736 <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	9002      	str	r0, [sp, #8]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	9202      	str	r2, [sp, #8]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	9202      	str	r2, [sp, #8]
 800570c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005714:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005716:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005718:	2220      	movs	r2, #32
 800571a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800571e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005722:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005726:	e7a8      	b.n	800567a <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 8005728:	f8dc 3000 	ldr.w	r3, [ip]
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	f8cc 3000 	str.w	r3, [ip]
 8005734:	e7c0      	b.n	80056b8 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8005736:	2a01      	cmp	r2, #1
 8005738:	f000 812c 	beq.w	8005994 <HAL_I2C_Mem_Read+0x33c>
    else if (hi2c->XferSize == 2U)
 800573c:	2a02      	cmp	r2, #2
 800573e:	f000 80bd 	beq.w	80058bc <HAL_I2C_Mem_Read+0x264>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	9005      	str	r0, [sp, #20]
 8005746:	6959      	ldr	r1, [r3, #20]
 8005748:	9105      	str	r1, [sp, #20]
 800574a:	6999      	ldr	r1, [r3, #24]
 800574c:	9105      	str	r1, [sp, #20]
 800574e:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8005750:	2a03      	cmp	r2, #3
 8005752:	d849      	bhi.n	80057e8 <HAL_I2C_Mem_Read+0x190>
        if (hi2c->XferSize == 1U)
 8005754:	2a01      	cmp	r2, #1
 8005756:	f000 80eb 	beq.w	8005930 <HAL_I2C_Mem_Read+0x2d8>
        else if (hi2c->XferSize == 2U)
 800575a:	2a02      	cmp	r2, #2
 800575c:	f000 8089 	beq.w	8005872 <HAL_I2C_Mem_Read+0x21a>
 8005760:	1c69      	adds	r1, r5, #1
 8005762:	f040 80bb 	bne.w	80058dc <HAL_I2C_Mem_Read+0x284>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005766:	695a      	ldr	r2, [r3, #20]
 8005768:	0752      	lsls	r2, r2, #29
 800576a:	d5fc      	bpl.n	8005766 <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576c:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005774:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800577a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800577c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800577e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005780:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8005782:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8005784:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8005786:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8005788:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800578a:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800578c:	8563      	strh	r3, [r4, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800578e:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005790:	6822      	ldr	r2, [r4, #0]
 8005792:	f040 80af 	bne.w	80058f4 <HAL_I2C_Mem_Read+0x29c>
 8005796:	6953      	ldr	r3, [r2, #20]
 8005798:	075b      	lsls	r3, r3, #29
 800579a:	d5fc      	bpl.n	8005796 <HAL_I2C_Mem_Read+0x13e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579c:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057a4:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a6:	6913      	ldr	r3, [r2, #16]
 80057a8:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80057aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80057ac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80057ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b0:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b8:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 80057ba:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 80057bc:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 80057c0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80057c2:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c6:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 80057c8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80057ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80057cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80057ce:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80057d0:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80057d2:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80057d4:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80057d6:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80057d8:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80057da:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80057dc:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057de:	2a00      	cmp	r2, #0
 80057e0:	d099      	beq.n	8005716 <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 80057e2:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057e4:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 80057e6:	d9b5      	bls.n	8005754 <HAL_I2C_Mem_Read+0xfc>
 80057e8:	b95d      	cbnz	r5, 8005802 <HAL_I2C_Mem_Read+0x1aa>
 80057ea:	e0c5      	b.n	8005978 <HAL_I2C_Mem_Read+0x320>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	06d0      	lsls	r0, r2, #27
 80057f0:	f100 80b2 	bmi.w	8005958 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f4:	f7fe f926 	bl	8003a44 <HAL_GetTick>
 80057f8:	1b80      	subs	r0, r0, r6
 80057fa:	4285      	cmp	r5, r0
 80057fc:	f0c0 8086 	bcc.w	800590c <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	0652      	lsls	r2, r2, #25
 8005806:	d5f1      	bpl.n	80057ec <HAL_I2C_Mem_Read+0x194>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005808:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 800580e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005810:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8005812:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8005814:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005816:	3b01      	subs	r3, #1
 8005818:	b29b      	uxth	r3, r3
 800581a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800581c:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 800581e:	3a01      	subs	r2, #1
 8005820:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8005822:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005826:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8005828:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800582a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800582e:	d5d6      	bpl.n	80057de <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005830:	6903      	ldr	r3, [r0, #16]
 8005832:	704b      	strb	r3, [r1, #1]
 8005834:	e036      	b.n	80058a4 <HAL_I2C_Mem_Read+0x24c>
        hi2c->State             = HAL_I2C_STATE_READY;
 8005836:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005838:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800583c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005840:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005844:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005846:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800584a:	f043 0320 	orr.w	r3, r3, #32
 800584e:	6423      	str	r3, [r4, #64]	; 0x40
 8005850:	e712      	b.n	8005678 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 8005852:	2701      	movs	r7, #1
}
 8005854:	4638      	mov	r0, r7
 8005856:	b007      	add	sp, #28
 8005858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	0750      	lsls	r0, r2, #29
 8005860:	d40c      	bmi.n	800587c <HAL_I2C_Mem_Read+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005862:	f7fe f8ef 	bl	8003a44 <HAL_GetTick>
 8005866:	1b80      	subs	r0, r0, r6
 8005868:	4285      	cmp	r5, r0
 800586a:	d34f      	bcc.n	800590c <HAL_I2C_Mem_Read+0x2b4>
 800586c:	2d00      	cmp	r5, #0
 800586e:	d04d      	beq.n	800590c <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	1c69      	adds	r1, r5, #1
 8005874:	d1f2      	bne.n	800585c <HAL_I2C_Mem_Read+0x204>
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	0752      	lsls	r2, r2, #29
 800587a:	d5fc      	bpl.n	8005876 <HAL_I2C_Mem_Read+0x21e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005882:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005888:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 800588a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800588c:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 800588e:	3b01      	subs	r3, #1
 8005890:	b29b      	uxth	r3, r3
 8005892:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005894:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005896:	3b01      	subs	r3, #1
 8005898:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589a:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 800589c:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589e:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 80058a0:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a2:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80058a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80058a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80058a8:	3301      	adds	r3, #1
 80058aa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 80058ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80058ae:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80058b0:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80058b2:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80058b4:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 80058b6:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80058b8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80058ba:	e790      	b.n	80057de <HAL_I2C_Mem_Read+0x186>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	6819      	ldr	r1, [r3, #0]
 80058c0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80058c4:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058c6:	6819      	ldr	r1, [r3, #0]
 80058c8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80058cc:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ce:	9004      	str	r0, [sp, #16]
 80058d0:	6959      	ldr	r1, [r3, #20]
 80058d2:	9104      	str	r1, [sp, #16]
 80058d4:	6999      	ldr	r1, [r3, #24]
 80058d6:	9104      	str	r1, [sp, #16]
 80058d8:	9904      	ldr	r1, [sp, #16]
 80058da:	e739      	b.n	8005750 <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	0750      	lsls	r0, r2, #29
 80058e0:	f53f af44 	bmi.w	800576c <HAL_I2C_Mem_Read+0x114>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e4:	f7fe f8ae 	bl	8003a44 <HAL_GetTick>
 80058e8:	1b80      	subs	r0, r0, r6
 80058ea:	4285      	cmp	r5, r0
 80058ec:	d30e      	bcc.n	800590c <HAL_I2C_Mem_Read+0x2b4>
 80058ee:	b16d      	cbz	r5, 800590c <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	e735      	b.n	8005760 <HAL_I2C_Mem_Read+0x108>
 80058f4:	6953      	ldr	r3, [r2, #20]
 80058f6:	0758      	lsls	r0, r3, #29
 80058f8:	f53f af50 	bmi.w	800579c <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fc:	f7fe f8a2 	bl	8003a44 <HAL_GetTick>
 8005900:	1b80      	subs	r0, r0, r6
 8005902:	4285      	cmp	r5, r0
 8005904:	d302      	bcc.n	800590c <HAL_I2C_Mem_Read+0x2b4>
 8005906:	2d00      	cmp	r5, #0
 8005908:	f47f af41 	bne.w	800578e <HAL_I2C_Mem_Read+0x136>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800590c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800590e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005910:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005912:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005916:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800591a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800591c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005920:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005922:	f043 0320 	orr.w	r3, r3, #32
}
 8005926:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005928:	6423      	str	r3, [r4, #64]	; 0x40
}
 800592a:	b007      	add	sp, #28
 800592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005930:	b95d      	cbnz	r5, 800594a <HAL_I2C_Mem_Read+0x2f2>
 8005932:	e02b      	b.n	800598c <HAL_I2C_Mem_Read+0x334>
 8005934:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	06d2      	lsls	r2, r2, #27
 800593c:	d40c      	bmi.n	8005958 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593e:	f7fe f881 	bl	8003a44 <HAL_GetTick>
 8005942:	1b80      	subs	r0, r0, r6
 8005944:	4285      	cmp	r5, r0
 8005946:	d3e1      	bcc.n	800590c <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	0651      	lsls	r1, r2, #25
 800594e:	d5f3      	bpl.n	8005938 <HAL_I2C_Mem_Read+0x2e0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005954:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005956:	e7a5      	b.n	80058a4 <HAL_I2C_Mem_Read+0x24c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005958:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800595a:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 800595e:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005960:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005962:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005964:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005968:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800596c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800596e:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005970:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005974:	2701      	movs	r7, #1
 8005976:	e680      	b.n	800567a <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	0652      	lsls	r2, r2, #25
 800597c:	f53f af44 	bmi.w	8005808 <HAL_I2C_Mem_Read+0x1b0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	06d1      	lsls	r1, r2, #27
 8005984:	d4e8      	bmi.n	8005958 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005986:	f7fe f85d 	bl	8003a44 <HAL_GetTick>
 800598a:	e7bf      	b.n	800590c <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800598c:	695a      	ldr	r2, [r3, #20]
 800598e:	0650      	lsls	r0, r2, #25
 8005990:	d5f6      	bpl.n	8005980 <HAL_I2C_Mem_Read+0x328>
 8005992:	e7dd      	b.n	8005950 <HAL_I2C_Mem_Read+0x2f8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	6819      	ldr	r1, [r3, #0]
 8005998:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800599c:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800599e:	9003      	str	r0, [sp, #12]
 80059a0:	6959      	ldr	r1, [r3, #20]
 80059a2:	9103      	str	r1, [sp, #12]
 80059a4:	6999      	ldr	r1, [r3, #24]
 80059a6:	9103      	str	r1, [sp, #12]
 80059a8:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059aa:	6819      	ldr	r1, [r3, #0]
 80059ac:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80059b0:	6019      	str	r1, [r3, #0]
 80059b2:	e6cd      	b.n	8005750 <HAL_I2C_Mem_Read+0xf8>

080059b4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f000 81a2 	beq.w	8005cfe <HAL_RCC_OscConfig+0x34a>
{
 80059ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059be:	6803      	ldr	r3, [r0, #0]
 80059c0:	07dd      	lsls	r5, r3, #31
{
 80059c2:	b082      	sub	sp, #8
 80059c4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059c6:	d52f      	bpl.n	8005a28 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059c8:	499e      	ldr	r1, [pc, #632]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
 80059ca:	688a      	ldr	r2, [r1, #8]
 80059cc:	f002 020c 	and.w	r2, r2, #12
 80059d0:	2a04      	cmp	r2, #4
 80059d2:	f000 80ed 	beq.w	8005bb0 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059d6:	688a      	ldr	r2, [r1, #8]
 80059d8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059dc:	2a08      	cmp	r2, #8
 80059de:	f000 80e3 	beq.w	8005ba8 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e2:	6863      	ldr	r3, [r4, #4]
 80059e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e8:	f000 80ec 	beq.w	8005bc4 <HAL_RCC_OscConfig+0x210>
 80059ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059f0:	f000 8175 	beq.w	8005cde <HAL_RCC_OscConfig+0x32a>
 80059f4:	4d93      	ldr	r5, [pc, #588]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
 80059f6:	682a      	ldr	r2, [r5, #0]
 80059f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059fc:	602a      	str	r2, [r5, #0]
 80059fe:	682a      	ldr	r2, [r5, #0]
 8005a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a04:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f040 80e1 	bne.w	8005bce <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fe f81a 	bl	8003a44 <HAL_GetTick>
 8005a10:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a12:	e005      	b.n	8005a20 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a14:	f7fe f816 	bl	8003a44 <HAL_GetTick>
 8005a18:	1b80      	subs	r0, r0, r6
 8005a1a:	2864      	cmp	r0, #100	; 0x64
 8005a1c:	f200 8101 	bhi.w	8005c22 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	039b      	lsls	r3, r3, #14
 8005a24:	d4f6      	bmi.n	8005a14 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	079f      	lsls	r7, r3, #30
 8005a2a:	d528      	bpl.n	8005a7e <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a2c:	4a85      	ldr	r2, [pc, #532]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
 8005a2e:	6891      	ldr	r1, [r2, #8]
 8005a30:	f011 0f0c 	tst.w	r1, #12
 8005a34:	f000 8090 	beq.w	8005b58 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a38:	6891      	ldr	r1, [r2, #8]
 8005a3a:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a3e:	2908      	cmp	r1, #8
 8005a40:	f000 8086 	beq.w	8005b50 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a44:	68e3      	ldr	r3, [r4, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 810e 	beq.w	8005c68 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a4c:	4b7e      	ldr	r3, [pc, #504]	; (8005c48 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4e:	4e7d      	ldr	r6, [pc, #500]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8005a50:	2201      	movs	r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005a54:	f7fd fff6 	bl	8003a44 <HAL_GetTick>
 8005a58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a5a:	e005      	b.n	8005a68 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a5c:	f7fd fff2 	bl	8003a44 <HAL_GetTick>
 8005a60:	1b40      	subs	r0, r0, r5
 8005a62:	2802      	cmp	r0, #2
 8005a64:	f200 80dd 	bhi.w	8005c22 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a68:	6833      	ldr	r3, [r6, #0]
 8005a6a:	0798      	lsls	r0, r3, #30
 8005a6c:	d5f6      	bpl.n	8005a5c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6e:	6833      	ldr	r3, [r6, #0]
 8005a70:	6922      	ldr	r2, [r4, #16]
 8005a72:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005a76:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005a7a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	071a      	lsls	r2, r3, #28
 8005a80:	d451      	bmi.n	8005b26 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a82:	0758      	lsls	r0, r3, #29
 8005a84:	d52f      	bpl.n	8005ae6 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a86:	4a6f      	ldr	r2, [pc, #444]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
 8005a88:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005a8a:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	d07f      	beq.n	8005b90 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8005a90:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a92:	4e6e      	ldr	r6, [pc, #440]	; (8005c4c <HAL_RCC_OscConfig+0x298>)
 8005a94:	6833      	ldr	r3, [r6, #0]
 8005a96:	05d9      	lsls	r1, r3, #23
 8005a98:	f140 80b3 	bpl.w	8005c02 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a9c:	68a3      	ldr	r3, [r4, #8]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	f000 80c3 	beq.w	8005c2a <HAL_RCC_OscConfig+0x276>
 8005aa4:	2b05      	cmp	r3, #5
 8005aa6:	f000 812c 	beq.w	8005d02 <HAL_RCC_OscConfig+0x34e>
 8005aaa:	4e66      	ldr	r6, [pc, #408]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
 8005aac:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	6732      	str	r2, [r6, #112]	; 0x70
 8005ab4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005ab6:	f022 0204 	bic.w	r2, r2, #4
 8005aba:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 80b9 	bne.w	8005c34 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac2:	f7fd ffbf 	bl	8003a44 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005aca:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005acc:	e005      	b.n	8005ada <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ace:	f7fd ffb9 	bl	8003a44 <HAL_GetTick>
 8005ad2:	1bc0      	subs	r0, r0, r7
 8005ad4:	4540      	cmp	r0, r8
 8005ad6:	f200 80a4 	bhi.w	8005c22 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ada:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005adc:	0798      	lsls	r0, r3, #30
 8005ade:	d4f6      	bmi.n	8005ace <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	f040 8106 	bne.w	8005cf2 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ae6:	69a0      	ldr	r0, [r4, #24]
 8005ae8:	b1c8      	cbz	r0, 8005b1e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aea:	4d56      	ldr	r5, [pc, #344]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
 8005aec:	68ab      	ldr	r3, [r5, #8]
 8005aee:	f003 030c 	and.w	r3, r3, #12
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	f000 80c9 	beq.w	8005c8a <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af8:	4b53      	ldr	r3, [pc, #332]	; (8005c48 <HAL_RCC_OscConfig+0x294>)
 8005afa:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005afc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005afe:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b00:	f000 8109 	beq.w	8005d16 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b04:	f7fd ff9e 	bl	8003a44 <HAL_GetTick>
 8005b08:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0a:	e005      	b.n	8005b18 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b0c:	f7fd ff9a 	bl	8003a44 <HAL_GetTick>
 8005b10:	1b00      	subs	r0, r0, r4
 8005b12:	2802      	cmp	r0, #2
 8005b14:	f200 8085 	bhi.w	8005c22 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	019b      	lsls	r3, r3, #6
 8005b1c:	d4f6      	bmi.n	8005b0c <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005b1e:	2000      	movs	r0, #0
}
 8005b20:	b002      	add	sp, #8
 8005b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b26:	6963      	ldr	r3, [r4, #20]
 8005b28:	b30b      	cbz	r3, 8005b6e <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8005b2a:	4b47      	ldr	r3, [pc, #284]	; (8005c48 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2c:	4e45      	ldr	r6, [pc, #276]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8005b34:	f7fd ff86 	bl	8003a44 <HAL_GetTick>
 8005b38:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3a:	e004      	b.n	8005b46 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b3c:	f7fd ff82 	bl	8003a44 <HAL_GetTick>
 8005b40:	1b40      	subs	r0, r0, r5
 8005b42:	2802      	cmp	r0, #2
 8005b44:	d86d      	bhi.n	8005c22 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b46:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005b48:	079b      	lsls	r3, r3, #30
 8005b4a:	d5f7      	bpl.n	8005b3c <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	e798      	b.n	8005a82 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b50:	6852      	ldr	r2, [r2, #4]
 8005b52:	0256      	lsls	r6, r2, #9
 8005b54:	f53f af76 	bmi.w	8005a44 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b58:	4a3a      	ldr	r2, [pc, #232]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	0795      	lsls	r5, r2, #30
 8005b5e:	d544      	bpl.n	8005bea <HAL_RCC_OscConfig+0x236>
 8005b60:	68e2      	ldr	r2, [r4, #12]
 8005b62:	2a01      	cmp	r2, #1
 8005b64:	d041      	beq.n	8005bea <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8005b66:	2001      	movs	r0, #1
}
 8005b68:	b002      	add	sp, #8
 8005b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005b6e:	4a36      	ldr	r2, [pc, #216]	; (8005c48 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b70:	4e34      	ldr	r6, [pc, #208]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8005b72:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8005b76:	f7fd ff65 	bl	8003a44 <HAL_GetTick>
 8005b7a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b7c:	e004      	b.n	8005b88 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b7e:	f7fd ff61 	bl	8003a44 <HAL_GetTick>
 8005b82:	1b40      	subs	r0, r0, r5
 8005b84:	2802      	cmp	r0, #2
 8005b86:	d84c      	bhi.n	8005c22 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b88:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005b8a:	079f      	lsls	r7, r3, #30
 8005b8c:	d4f7      	bmi.n	8005b7e <HAL_RCC_OscConfig+0x1ca>
 8005b8e:	e7dd      	b.n	8005b4c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b98:	6413      	str	r3, [r2, #64]	; 0x40
 8005b9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005ba4:	2501      	movs	r5, #1
 8005ba6:	e774      	b.n	8005a92 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ba8:	684a      	ldr	r2, [r1, #4]
 8005baa:	0250      	lsls	r0, r2, #9
 8005bac:	f57f af19 	bpl.w	80059e2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb0:	4a24      	ldr	r2, [pc, #144]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	0391      	lsls	r1, r2, #14
 8005bb6:	f57f af37 	bpl.w	8005a28 <HAL_RCC_OscConfig+0x74>
 8005bba:	6862      	ldr	r2, [r4, #4]
 8005bbc:	2a00      	cmp	r2, #0
 8005bbe:	f47f af33 	bne.w	8005a28 <HAL_RCC_OscConfig+0x74>
 8005bc2:	e7d0      	b.n	8005b66 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc4:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
 8005bc6:	6813      	ldr	r3, [r2, #0]
 8005bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bcc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005bce:	f7fd ff39 	bl	8003a44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bd2:	4e1c      	ldr	r6, [pc, #112]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8005bd4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bd6:	e004      	b.n	8005be2 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bd8:	f7fd ff34 	bl	8003a44 <HAL_GetTick>
 8005bdc:	1b40      	subs	r0, r0, r5
 8005bde:	2864      	cmp	r0, #100	; 0x64
 8005be0:	d81f      	bhi.n	8005c22 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be2:	6833      	ldr	r3, [r6, #0]
 8005be4:	039a      	lsls	r2, r3, #14
 8005be6:	d5f7      	bpl.n	8005bd8 <HAL_RCC_OscConfig+0x224>
 8005be8:	e71d      	b.n	8005a26 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bea:	4916      	ldr	r1, [pc, #88]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
 8005bec:	6920      	ldr	r0, [r4, #16]
 8005bee:	680a      	ldr	r2, [r1, #0]
 8005bf0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005bf4:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005bf8:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bfa:	071a      	lsls	r2, r3, #28
 8005bfc:	f57f af41 	bpl.w	8005a82 <HAL_RCC_OscConfig+0xce>
 8005c00:	e791      	b.n	8005b26 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c02:	6833      	ldr	r3, [r6, #0]
 8005c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c08:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005c0a:	f7fd ff1b 	bl	8003a44 <HAL_GetTick>
 8005c0e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c10:	6833      	ldr	r3, [r6, #0]
 8005c12:	05da      	lsls	r2, r3, #23
 8005c14:	f53f af42 	bmi.w	8005a9c <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c18:	f7fd ff14 	bl	8003a44 <HAL_GetTick>
 8005c1c:	1bc0      	subs	r0, r0, r7
 8005c1e:	2802      	cmp	r0, #2
 8005c20:	d9f6      	bls.n	8005c10 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8005c22:	2003      	movs	r0, #3
}
 8005c24:	b002      	add	sp, #8
 8005c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c2a:	4a06      	ldr	r2, [pc, #24]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
 8005c2c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005c34:	f7fd ff06 	bl	8003a44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c38:	4f02      	ldr	r7, [pc, #8]	; (8005c44 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8005c3a:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c3c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c40:	e00b      	b.n	8005c5a <HAL_RCC_OscConfig+0x2a6>
 8005c42:	bf00      	nop
 8005c44:	40023800 	.word	0x40023800
 8005c48:	42470000 	.word	0x42470000
 8005c4c:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c50:	f7fd fef8 	bl	8003a44 <HAL_GetTick>
 8005c54:	1b80      	subs	r0, r0, r6
 8005c56:	4540      	cmp	r0, r8
 8005c58:	d8e3      	bhi.n	8005c22 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c5c:	079b      	lsls	r3, r3, #30
 8005c5e:	d5f7      	bpl.n	8005c50 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8005c60:	2d00      	cmp	r5, #0
 8005c62:	f43f af40 	beq.w	8005ae6 <HAL_RCC_OscConfig+0x132>
 8005c66:	e044      	b.n	8005cf2 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8005c68:	4a42      	ldr	r2, [pc, #264]	; (8005d74 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c6a:	4e43      	ldr	r6, [pc, #268]	; (8005d78 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8005c6c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005c6e:	f7fd fee9 	bl	8003a44 <HAL_GetTick>
 8005c72:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c74:	e004      	b.n	8005c80 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c76:	f7fd fee5 	bl	8003a44 <HAL_GetTick>
 8005c7a:	1b40      	subs	r0, r0, r5
 8005c7c:	2802      	cmp	r0, #2
 8005c7e:	d8d0      	bhi.n	8005c22 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c80:	6833      	ldr	r3, [r6, #0]
 8005c82:	0799      	lsls	r1, r3, #30
 8005c84:	d4f7      	bmi.n	8005c76 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	e6f9      	b.n	8005a7e <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c8a:	2801      	cmp	r0, #1
 8005c8c:	f43f af48 	beq.w	8005b20 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8005c90:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c92:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c94:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c98:	4291      	cmp	r1, r2
 8005c9a:	f47f af64 	bne.w	8005b66 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ca0:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca4:	4291      	cmp	r1, r2
 8005ca6:	f47f af5e 	bne.w	8005b66 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005caa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005cac:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005cb0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cb2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005cb6:	f47f af56 	bne.w	8005b66 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005cbc:	0852      	lsrs	r2, r2, #1
 8005cbe:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8005cc2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cc4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005cc8:	f47f af4d 	bne.w	8005b66 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ccc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005cce:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cd2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8005cd6:	bf14      	ite	ne
 8005cd8:	2001      	movne	r0, #1
 8005cda:	2000      	moveq	r0, #0
 8005cdc:	e720      	b.n	8005b20 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cde:	4b26      	ldr	r3, [pc, #152]	; (8005d78 <HAL_RCC_OscConfig+0x3c4>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005cee:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cf0:	e76d      	b.n	8005bce <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf2:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <HAL_RCC_OscConfig+0x3c4>)
 8005cf4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8005cfc:	e6f3      	b.n	8005ae6 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8005cfe:	2001      	movs	r0, #1
}
 8005d00:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d02:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <HAL_RCC_OscConfig+0x3c4>)
 8005d04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d06:	f042 0204 	orr.w	r2, r2, #4
 8005d0a:	671a      	str	r2, [r3, #112]	; 0x70
 8005d0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d14:	e78e      	b.n	8005c34 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8005d16:	f7fd fe95 	bl	8003a44 <HAL_GetTick>
 8005d1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1c:	e005      	b.n	8005d2a <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d1e:	f7fd fe91 	bl	8003a44 <HAL_GetTick>
 8005d22:	1b80      	subs	r0, r0, r6
 8005d24:	2802      	cmp	r0, #2
 8005d26:	f63f af7c 	bhi.w	8005c22 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2a:	682b      	ldr	r3, [r5, #0]
 8005d2c:	0199      	lsls	r1, r3, #6
 8005d2e:	d4f6      	bmi.n	8005d1e <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d30:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8005d34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005d36:	430b      	orrs	r3, r1
 8005d38:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005d3c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8005d40:	0852      	lsrs	r2, r2, #1
 8005d42:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005d46:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8005d48:	490a      	ldr	r1, [pc, #40]	; (8005d74 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8005d4e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d50:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005d52:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005d54:	f7fd fe76 	bl	8003a44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d58:	4d07      	ldr	r5, [pc, #28]	; (8005d78 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8005d5a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d5c:	e005      	b.n	8005d6a <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d5e:	f7fd fe71 	bl	8003a44 <HAL_GetTick>
 8005d62:	1b00      	subs	r0, r0, r4
 8005d64:	2802      	cmp	r0, #2
 8005d66:	f63f af5c 	bhi.w	8005c22 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6a:	682b      	ldr	r3, [r5, #0]
 8005d6c:	019a      	lsls	r2, r3, #6
 8005d6e:	d5f6      	bpl.n	8005d5e <HAL_RCC_OscConfig+0x3aa>
 8005d70:	e6d5      	b.n	8005b1e <HAL_RCC_OscConfig+0x16a>
 8005d72:	bf00      	nop
 8005d74:	42470000 	.word	0x42470000
 8005d78:	40023800 	.word	0x40023800

08005d7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d7c:	4916      	ldr	r1, [pc, #88]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8005d7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d80:	688b      	ldr	r3, [r1, #8]
 8005d82:	f003 030c 	and.w	r3, r3, #12
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d01b      	beq.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x46>
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d117      	bne.n	8005dbe <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d8e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d90:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d92:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d94:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d9c:	d113      	bne.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d9e:	480f      	ldr	r0, [pc, #60]	; (8005ddc <HAL_RCC_GetSysClockFreq+0x60>)
 8005da0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005da4:	fba1 0100 	umull	r0, r1, r1, r0
 8005da8:	f7fa ff36 	bl	8000c18 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005db4:	3301      	adds	r3, #1
 8005db6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005db8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005dbc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8005dbe:	4807      	ldr	r0, [pc, #28]	; (8005ddc <HAL_RCC_GetSysClockFreq+0x60>)
}
 8005dc0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc2:	4807      	ldr	r0, [pc, #28]	; (8005de0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8005dc4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc6:	4806      	ldr	r0, [pc, #24]	; (8005de0 <HAL_RCC_GetSysClockFreq+0x64>)
 8005dc8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005dcc:	2300      	movs	r3, #0
 8005dce:	fba1 0100 	umull	r0, r1, r1, r0
 8005dd2:	f7fa ff21 	bl	8000c18 <__aeabi_uldivmod>
 8005dd6:	e7e9      	b.n	8005dac <HAL_RCC_GetSysClockFreq+0x30>
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	00f42400 	.word	0x00f42400
 8005de0:	007a1200 	.word	0x007a1200

08005de4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f000 8087 	beq.w	8005ef8 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dea:	4a48      	ldr	r2, [pc, #288]	; (8005f0c <HAL_RCC_ClockConfig+0x128>)
 8005dec:	6813      	ldr	r3, [r2, #0]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	428b      	cmp	r3, r1
{
 8005df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df8:	460d      	mov	r5, r1
 8005dfa:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dfc:	d209      	bcs.n	8005e12 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfe:	b2cb      	uxtb	r3, r1
 8005e00:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	428b      	cmp	r3, r1
 8005e0a:	d002      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005e0c:	2001      	movs	r0, #1
}
 8005e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	0798      	lsls	r0, r3, #30
 8005e16:	d514      	bpl.n	8005e42 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e18:	0759      	lsls	r1, r3, #29
 8005e1a:	d504      	bpl.n	8005e26 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e1c:	493c      	ldr	r1, [pc, #240]	; (8005f10 <HAL_RCC_ClockConfig+0x12c>)
 8005e1e:	688a      	ldr	r2, [r1, #8]
 8005e20:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8005e24:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e26:	071a      	lsls	r2, r3, #28
 8005e28:	d504      	bpl.n	8005e34 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e2a:	4939      	ldr	r1, [pc, #228]	; (8005f10 <HAL_RCC_ClockConfig+0x12c>)
 8005e2c:	688a      	ldr	r2, [r1, #8]
 8005e2e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8005e32:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e34:	4936      	ldr	r1, [pc, #216]	; (8005f10 <HAL_RCC_ClockConfig+0x12c>)
 8005e36:	68a0      	ldr	r0, [r4, #8]
 8005e38:	688a      	ldr	r2, [r1, #8]
 8005e3a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005e3e:	4302      	orrs	r2, r0
 8005e40:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e42:	07df      	lsls	r7, r3, #31
 8005e44:	d521      	bpl.n	8005e8a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	2a01      	cmp	r2, #1
 8005e4a:	d057      	beq.n	8005efc <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e4c:	1e93      	subs	r3, r2, #2
 8005e4e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e50:	4b2f      	ldr	r3, [pc, #188]	; (8005f10 <HAL_RCC_ClockConfig+0x12c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e54:	d94d      	bls.n	8005ef2 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e56:	0799      	lsls	r1, r3, #30
 8005e58:	d5d8      	bpl.n	8005e0c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e5a:	4e2d      	ldr	r6, [pc, #180]	; (8005f10 <HAL_RCC_ClockConfig+0x12c>)
 8005e5c:	68b3      	ldr	r3, [r6, #8]
 8005e5e:	f023 0303 	bic.w	r3, r3, #3
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005e66:	f7fd fded 	bl	8003a44 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e6a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005e6e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e70:	e004      	b.n	8005e7c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e72:	f7fd fde7 	bl	8003a44 <HAL_GetTick>
 8005e76:	1bc0      	subs	r0, r0, r7
 8005e78:	4540      	cmp	r0, r8
 8005e7a:	d844      	bhi.n	8005f06 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7c:	68b3      	ldr	r3, [r6, #8]
 8005e7e:	6862      	ldr	r2, [r4, #4]
 8005e80:	f003 030c 	and.w	r3, r3, #12
 8005e84:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005e88:	d1f3      	bne.n	8005e72 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e8a:	4a20      	ldr	r2, [pc, #128]	; (8005f0c <HAL_RCC_ClockConfig+0x128>)
 8005e8c:	6813      	ldr	r3, [r2, #0]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	42ab      	cmp	r3, r5
 8005e94:	d906      	bls.n	8005ea4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e96:	b2eb      	uxtb	r3, r5
 8005e98:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	42ab      	cmp	r3, r5
 8005ea2:	d1b3      	bne.n	8005e0c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	075a      	lsls	r2, r3, #29
 8005ea8:	d506      	bpl.n	8005eb8 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eaa:	4919      	ldr	r1, [pc, #100]	; (8005f10 <HAL_RCC_ClockConfig+0x12c>)
 8005eac:	68e0      	ldr	r0, [r4, #12]
 8005eae:	688a      	ldr	r2, [r1, #8]
 8005eb0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8005eb4:	4302      	orrs	r2, r0
 8005eb6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb8:	071b      	lsls	r3, r3, #28
 8005eba:	d507      	bpl.n	8005ecc <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ebc:	4a14      	ldr	r2, [pc, #80]	; (8005f10 <HAL_RCC_ClockConfig+0x12c>)
 8005ebe:	6921      	ldr	r1, [r4, #16]
 8005ec0:	6893      	ldr	r3, [r2, #8]
 8005ec2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005ec6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005eca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ecc:	f7ff ff56 	bl	8005d7c <HAL_RCC_GetSysClockFreq>
 8005ed0:	4a0f      	ldr	r2, [pc, #60]	; (8005f10 <HAL_RCC_ClockConfig+0x12c>)
 8005ed2:	4c10      	ldr	r4, [pc, #64]	; (8005f14 <HAL_RCC_ClockConfig+0x130>)
 8005ed4:	6892      	ldr	r2, [r2, #8]
 8005ed6:	4910      	ldr	r1, [pc, #64]	; (8005f18 <HAL_RCC_ClockConfig+0x134>)
 8005ed8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005edc:	4603      	mov	r3, r0
 8005ede:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8005ee0:	480e      	ldr	r0, [pc, #56]	; (8005f1c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ee2:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8005ee4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ee6:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8005ee8:	f7fd fd62 	bl	80039b0 <HAL_InitTick>
  return HAL_OK;
 8005eec:	2000      	movs	r0, #0
}
 8005eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ef2:	0198      	lsls	r0, r3, #6
 8005ef4:	d4b1      	bmi.n	8005e5a <HAL_RCC_ClockConfig+0x76>
 8005ef6:	e789      	b.n	8005e0c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8005ef8:	2001      	movs	r0, #1
}
 8005efa:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efc:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <HAL_RCC_ClockConfig+0x12c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	039e      	lsls	r6, r3, #14
 8005f02:	d4aa      	bmi.n	8005e5a <HAL_RCC_ClockConfig+0x76>
 8005f04:	e782      	b.n	8005e0c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8005f06:	2003      	movs	r0, #3
 8005f08:	e781      	b.n	8005e0e <HAL_RCC_ClockConfig+0x2a>
 8005f0a:	bf00      	nop
 8005f0c:	40023c00 	.word	0x40023c00
 8005f10:	40023800 	.word	0x40023800
 8005f14:	0800c8e4 	.word	0x0800c8e4
 8005f18:	20000004 	.word	0x20000004
 8005f1c:	2000000c 	.word	0x2000000c

08005f20 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f20:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8005f22:	4905      	ldr	r1, [pc, #20]	; (8005f38 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	4a05      	ldr	r2, [pc, #20]	; (8005f3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005f28:	6808      	ldr	r0, [r1, #0]
 8005f2a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005f2e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005f30:	40d8      	lsrs	r0, r3
 8005f32:	4770      	bx	lr
 8005f34:	40023800 	.word	0x40023800
 8005f38:	20000004 	.word	0x20000004
 8005f3c:	0800c8f4 	.word	0x0800c8f4

08005f40 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8005f42:	4905      	ldr	r1, [pc, #20]	; (8005f58 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	4a05      	ldr	r2, [pc, #20]	; (8005f5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005f48:	6808      	ldr	r0, [r1, #0]
 8005f4a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005f4e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005f50:	40d8      	lsrs	r0, r3
 8005f52:	4770      	bx	lr
 8005f54:	40023800 	.word	0x40023800
 8005f58:	20000004 	.word	0x20000004
 8005f5c:	0800c8f4 	.word	0x0800c8f4

08005f60 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	461d      	mov	r5, r3
 8005f68:	4616      	mov	r6, r2
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f6e:	f7fd fd69 	bl	8003a44 <HAL_GetTick>
 8005f72:	4435      	add	r5, r6
 8005f74:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005f76:	f7fd fd65 	bl	8003a44 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f7a:	4b28      	ldr	r3, [pc, #160]	; (800601c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005f82:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8005f86:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f88:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f8a:	1c73      	adds	r3, r6, #1
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	d107      	bne.n	8005fa0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
 8005f90:	688b      	ldr	r3, [r1, #8]
 8005f92:	ea34 0303 	bics.w	r3, r4, r3
 8005f96:	d0fb      	beq.n	8005f90 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8005f98:	2000      	movs	r0, #0
}
 8005f9a:	b002      	add	sp, #8
 8005f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fa0:	688b      	ldr	r3, [r1, #8]
 8005fa2:	ea34 0303 	bics.w	r3, r4, r3
 8005fa6:	d1f7      	bne.n	8005f98 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fa8:	f7fd fd4c 	bl	8003a44 <HAL_GetTick>
 8005fac:	eba0 0008 	sub.w	r0, r0, r8
 8005fb0:	42a8      	cmp	r0, r5
 8005fb2:	d208      	bcs.n	8005fc6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
      if (count == 0U)
 8005fb4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005fb6:	2b00      	cmp	r3, #0
      count--;
 8005fb8:	9b01      	ldr	r3, [sp, #4]
 8005fba:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005fbe:	bf08      	it	eq
 8005fc0:	2500      	moveq	r5, #0
      count--;
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	e7e1      	b.n	8005f8a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fc6:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fca:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fcc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fd4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd6:	d014      	beq.n	8006002 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fda:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005fde:	d007      	beq.n	8005ff0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 8005fe0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8005fe2:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005fe4:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005fe8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8005fec:	2003      	movs	r0, #3
 8005fee:	e7d4      	b.n	8005f9a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	e7ee      	b.n	8005fe0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006008:	d002      	beq.n	8006010 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800600a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800600e:	d1e3      	bne.n	8005fd8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e7de      	b.n	8005fd8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
 800601a:	bf00      	nop
 800601c:	20000004 	.word	0x20000004

08006020 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006020:	2800      	cmp	r0, #0
 8006022:	d05c      	beq.n	80060de <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006024:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8006026:	b570      	push	{r4, r5, r6, lr}
 8006028:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800602a:	2900      	cmp	r1, #0
 800602c:	d047      	beq.n	80060be <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800602e:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006030:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006034:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006038:	2300      	movs	r3, #0
 800603a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800603c:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8006040:	2a00      	cmp	r2, #0
 8006042:	d042      	beq.n	80060ca <HAL_SPI_Init+0xaa>
 8006044:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 8006046:	6825      	ldr	r5, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006048:	68a2      	ldr	r2, [r4, #8]
  hspi->State = HAL_SPI_STATE_BUSY;
 800604a:	2302      	movs	r3, #2
 800604c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006056:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006058:	6863      	ldr	r3, [r4, #4]
 800605a:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800605e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8006062:	4313      	orrs	r3, r2
 8006064:	68e2      	ldr	r2, [r4, #12]
 8006066:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800606a:	4313      	orrs	r3, r2
 800606c:	6922      	ldr	r2, [r4, #16]
 800606e:	f002 0202 	and.w	r2, r2, #2
 8006072:	4313      	orrs	r3, r2
 8006074:	6962      	ldr	r2, [r4, #20]
 8006076:	f002 0201 	and.w	r2, r2, #1
 800607a:	431a      	orrs	r2, r3
 800607c:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800607e:	f001 0010 	and.w	r0, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006082:	f003 0638 	and.w	r6, r3, #56	; 0x38
 8006086:	69a1      	ldr	r1, [r4, #24]
 8006088:	6a23      	ldr	r3, [r4, #32]
 800608a:	f003 0e80 	and.w	lr, r3, #128	; 0x80
 800608e:	f401 7300 	and.w	r3, r1, #512	; 0x200
 8006092:	4313      	orrs	r3, r2
 8006094:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006096:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006098:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800609c:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060a0:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060a4:	4301      	orrs	r1, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060a6:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060a8:	6069      	str	r1, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060aa:	69eb      	ldr	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ac:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80060b2:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060b4:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060b6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060b8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060be:	6843      	ldr	r3, [r0, #4]
 80060c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c4:	d0b6      	beq.n	8006034 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060c6:	61c1      	str	r1, [r0, #28]
 80060c8:	e7b4      	b.n	8006034 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 80060ca:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80060ce:	4620      	mov	r0, r4
 80060d0:	f7fd f81a 	bl	8003108 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060d4:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d8:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 80060dc:	e7b3      	b.n	8006046 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 80060de:	2001      	movs	r0, #1
}
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop

080060e4 <HAL_SPI_Transmit>:
{
 80060e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80060ea:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80060ee:	2801      	cmp	r0, #1
{
 80060f0:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80060f2:	f000 8087 	beq.w	8006204 <HAL_SPI_Transmit+0x120>
 80060f6:	461d      	mov	r5, r3
 80060f8:	2301      	movs	r3, #1
 80060fa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80060fe:	4688      	mov	r8, r1
 8006100:	4617      	mov	r7, r2
 8006102:	f7fd fc9f 	bl	8003a44 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006106:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800610a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800610c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800610e:	b2d8      	uxtb	r0, r3
 8006110:	d009      	beq.n	8006126 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8006112:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006114:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8006116:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8006118:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800611c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006120:	b002      	add	sp, #8
 8006122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8006126:	f1b8 0f00 	cmp.w	r8, #0
 800612a:	d0f3      	beq.n	8006114 <HAL_SPI_Transmit+0x30>
 800612c:	2f00      	cmp	r7, #0
 800612e:	d0f1      	beq.n	8006114 <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006130:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8006132:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006134:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006138:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800613a:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006140:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
 8006144:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006148:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
 800614a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 800614c:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800614e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006150:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006152:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006154:	f000 8083 	beq.w	800625e <HAL_SPI_Transmit+0x17a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006158:	6803      	ldr	r3, [r0, #0]
 800615a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_DISABLE(hspi);
 800615c:	4684      	mov	ip, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800615e:	d403      	bmi.n	8006168 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8006160:	6803      	ldr	r3, [r0, #0]
 8006162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006166:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006168:	68e3      	ldr	r3, [r4, #12]
 800616a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800616e:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006170:	d04c      	beq.n	800620c <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8095 	beq.w	80062a2 <HAL_SPI_Transmit+0x1be>
 8006178:	2f01      	cmp	r7, #1
 800617a:	f000 8092 	beq.w	80062a2 <HAL_SPI_Transmit+0x1be>
    while (hspi->TxXferCount > 0U)
 800617e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006180:	b29b      	uxth	r3, r3
 8006182:	b1bb      	cbz	r3, 80061b4 <HAL_SPI_Transmit+0xd0>
 8006184:	2d00      	cmp	r5, #0
 8006186:	f000 80cb 	beq.w	8006320 <HAL_SPI_Transmit+0x23c>
 800618a:	1c6f      	adds	r7, r5, #1
 800618c:	d17e      	bne.n	800628c <HAL_SPI_Transmit+0x1a8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	0790      	lsls	r0, r2, #30
 8006194:	f140 8090 	bpl.w	80062b8 <HAL_SPI_Transmit+0x1d4>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006198:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800619a:	7812      	ldrb	r2, [r2, #0]
 800619c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800619e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80061a2:	3901      	subs	r1, #1
 80061a4:	b289      	uxth	r1, r1
 80061a6:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80061a8:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061aa:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 80061ac:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061ae:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80061b0:	2900      	cmp	r1, #0
 80061b2:	d1ec      	bne.n	800618e <HAL_SPI_Transmit+0xaa>
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061b4:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061b6:	4b72      	ldr	r3, [pc, #456]	; (8006380 <HAL_SPI_Transmit+0x29c>)
 80061b8:	4972      	ldr	r1, [pc, #456]	; (8006384 <HAL_SPI_Transmit+0x2a0>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	fba1 1303 	umull	r1, r3, r1, r3
 80061c0:	0d5b      	lsrs	r3, r3, #21
 80061c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061c6:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ca:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061ce:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061d0:	d107      	bne.n	80061e2 <HAL_SPI_Transmit+0xfe>
 80061d2:	e0c6      	b.n	8006362 <HAL_SPI_Transmit+0x27e>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 80061d4:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061d6:	6822      	ldr	r2, [r4, #0]
      count--;
 80061d8:	3b01      	subs	r3, #1
 80061da:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061dc:	6893      	ldr	r3, [r2, #8]
 80061de:	061b      	lsls	r3, r3, #24
 80061e0:	d502      	bpl.n	80061e8 <HAL_SPI_Transmit+0x104>
      if (count == 0U)
 80061e2:	9b01      	ldr	r3, [sp, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1f5      	bne.n	80061d4 <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061e8:	68a3      	ldr	r3, [r4, #8]
 80061ea:	b933      	cbnz	r3, 80061fa <HAL_SPI_Transmit+0x116>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ec:	6822      	ldr	r2, [r4, #0]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	68d3      	ldr	r3, [r2, #12]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	6893      	ldr	r3, [r2, #8]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80061fc:	3800      	subs	r0, #0
 80061fe:	bf18      	it	ne
 8006200:	2001      	movne	r0, #1
error:
 8006202:	e787      	b.n	8006114 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8006204:	2002      	movs	r0, #2
}
 8006206:	b002      	add	sp, #8
 8006208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800620c:	461a      	mov	r2, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d174      	bne.n	80062fc <HAL_SPI_Transmit+0x218>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006212:	4641      	mov	r1, r8
 8006214:	f831 7b02 	ldrh.w	r7, [r1], #2
 8006218:	60c7      	str	r7, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800621a:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800621c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800621e:	3901      	subs	r1, #1
 8006220:	b289      	uxth	r1, r1
 8006222:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006224:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8006226:	b289      	uxth	r1, r1
 8006228:	2900      	cmp	r1, #0
 800622a:	d0c4      	beq.n	80061b6 <HAL_SPI_Transmit+0xd2>
 800622c:	2d00      	cmp	r5, #0
 800622e:	f000 808b 	beq.w	8006348 <HAL_SPI_Transmit+0x264>
 8006232:	1c69      	adds	r1, r5, #1
 8006234:	d158      	bne.n	80062e8 <HAL_SPI_Transmit+0x204>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006236:	6883      	ldr	r3, [r0, #8]
 8006238:	079a      	lsls	r2, r3, #30
 800623a:	f140 8089 	bpl.w	8006350 <HAL_SPI_Transmit+0x26c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800623e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006240:	f832 3b02 	ldrh.w	r3, [r2], #2
 8006244:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8006246:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006248:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800624a:	3b01      	subs	r3, #1
 800624c:	b29b      	uxth	r3, r3
 800624e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006250:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006252:	b29b      	uxth	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1ee      	bne.n	8006236 <HAL_SPI_Transmit+0x152>
 8006258:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800625a:	461a      	mov	r2, r3
 800625c:	e7ab      	b.n	80061b6 <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 800625e:	6803      	ldr	r3, [r0, #0]
 8006260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006264:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8006266:	6803      	ldr	r3, [r0, #0]
 8006268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800626c:	6003      	str	r3, [r0, #0]
 800626e:	e773      	b.n	8006158 <HAL_SPI_Transmit+0x74>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006270:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006272:	7812      	ldrb	r2, [r2, #0]
 8006274:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8006276:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006278:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800627a:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800627c:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800627e:	b29b      	uxth	r3, r3
 8006280:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006282:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8006284:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d093      	beq.n	80061b4 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	0791      	lsls	r1, r2, #30
 8006292:	d4ed      	bmi.n	8006270 <HAL_SPI_Transmit+0x18c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006294:	f7fd fbd6 	bl	8003a44 <HAL_GetTick>
 8006298:	1b80      	subs	r0, r0, r6
 800629a:	4285      	cmp	r5, r0
 800629c:	d8f2      	bhi.n	8006284 <HAL_SPI_Transmit+0x1a0>
          errorcode = HAL_TIMEOUT;
 800629e:	2003      	movs	r0, #3
 80062a0:	e738      	b.n	8006114 <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062a2:	f898 3000 	ldrb.w	r3, [r8]
 80062a6:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80062a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80062ac:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062ae:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80062b0:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062b2:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80062b4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80062b6:	e762      	b.n	800617e <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b8:	f7fd fbc4 	bl	8003a44 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80062bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f47f af64 	bne.w	800618e <HAL_SPI_Transmit+0xaa>
 80062c6:	e775      	b.n	80061b4 <HAL_SPI_Transmit+0xd0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80062ca:	f832 3b02 	ldrh.w	r3, [r2], #2
 80062ce:	f8cc 300c 	str.w	r3, [ip, #12]
        hspi->TxXferCount--;
 80062d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d4:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29b      	uxth	r3, r3
 80062da:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80062dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0b9      	beq.n	8006258 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062e4:	f8d4 c000 	ldr.w	ip, [r4]
 80062e8:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80062ec:	079b      	lsls	r3, r3, #30
 80062ee:	d4eb      	bmi.n	80062c8 <HAL_SPI_Transmit+0x1e4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062f0:	f7fd fba8 	bl	8003a44 <HAL_GetTick>
 80062f4:	1b80      	subs	r0, r0, r6
 80062f6:	4285      	cmp	r5, r0
 80062f8:	d9d1      	bls.n	800629e <HAL_SPI_Transmit+0x1ba>
 80062fa:	e7ef      	b.n	80062dc <HAL_SPI_Transmit+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062fc:	2f01      	cmp	r7, #1
 80062fe:	d191      	bne.n	8006224 <HAL_SPI_Transmit+0x140>
 8006300:	e787      	b.n	8006212 <HAL_SPI_Transmit+0x12e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006302:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8006308:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800630a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800630c:	3b01      	subs	r3, #1
 800630e:	b29b      	uxth	r3, r3
 8006310:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006312:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006314:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 8006316:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006318:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800631a:	2b00      	cmp	r3, #0
 800631c:	f43f af4a 	beq.w	80061b4 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	0792      	lsls	r2, r2, #30
 8006326:	d4ec      	bmi.n	8006302 <HAL_SPI_Transmit+0x21e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006328:	f7fd fb8c 	bl	8003a44 <HAL_GetTick>
 800632c:	e7b7      	b.n	800629e <HAL_SPI_Transmit+0x1ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800632e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006330:	f831 2b02 	ldrh.w	r2, [r1], #2
 8006334:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 8006336:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006338:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800633a:	3a01      	subs	r2, #1
 800633c:	b292      	uxth	r2, r2
 800633e:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006340:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006342:	b292      	uxth	r2, r2
 8006344:	2a00      	cmp	r2, #0
 8006346:	d088      	beq.n	800625a <HAL_SPI_Transmit+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006348:	6882      	ldr	r2, [r0, #8]
 800634a:	0797      	lsls	r7, r2, #30
 800634c:	d5ec      	bpl.n	8006328 <HAL_SPI_Transmit+0x244>
 800634e:	e7ee      	b.n	800632e <HAL_SPI_Transmit+0x24a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006350:	f7fd fb78 	bl	8003a44 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8006354:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	f43f af7d 	beq.w	8006258 <HAL_SPI_Transmit+0x174>
 800635e:	6820      	ldr	r0, [r4, #0]
 8006360:	e769      	b.n	8006236 <HAL_SPI_Transmit+0x152>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006362:	4633      	mov	r3, r6
 8006364:	462a      	mov	r2, r5
 8006366:	2180      	movs	r1, #128	; 0x80
 8006368:	4620      	mov	r0, r4
 800636a:	f7ff fdf9 	bl	8005f60 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800636e:	2800      	cmp	r0, #0
 8006370:	f43f af3a 	beq.w	80061e8 <HAL_SPI_Transmit+0x104>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006374:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006376:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006378:	4313      	orrs	r3, r2
 800637a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800637c:	6562      	str	r2, [r4, #84]	; 0x54
 800637e:	e733      	b.n	80061e8 <HAL_SPI_Transmit+0x104>
 8006380:	20000004 	.word	0x20000004
 8006384:	165e9f81 	.word	0x165e9f81

08006388 <HAL_SPI_TransmitReceive>:
{
 8006388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800638c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800638e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 8006392:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8006394:	2801      	cmp	r0, #1
{
 8006396:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8006398:	f000 8083 	beq.w	80064a2 <HAL_SPI_TransmitReceive+0x11a>
 800639c:	461f      	mov	r7, r3
 800639e:	2301      	movs	r3, #1
 80063a0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80063a4:	4689      	mov	r9, r1
 80063a6:	4690      	mov	r8, r2
 80063a8:	f7fd fb4c 	bl	8003a44 <HAL_GetTick>
 80063ac:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80063ae:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80063b2:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063b4:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 80063b6:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063b8:	d011      	beq.n	80063de <HAL_SPI_TransmitReceive+0x56>
 80063ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063be:	d009      	beq.n	80063d4 <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 80063c0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80063c2:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80063c4:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80063c6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80063ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80063ce:	b003      	add	sp, #12
 80063d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063d4:	68a2      	ldr	r2, [r4, #8]
 80063d6:	2a00      	cmp	r2, #0
 80063d8:	d1f2      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x38>
 80063da:	2904      	cmp	r1, #4
 80063dc:	d1f0      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063de:	f1b9 0f00 	cmp.w	r9, #0
 80063e2:	d062      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x122>
 80063e4:	f1b8 0f00 	cmp.w	r8, #0
 80063e8:	d05f      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x122>
 80063ea:	2f00      	cmp	r7, #0
 80063ec:	d05d      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x122>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063ee:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063f2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063f6:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063f8:	bf1c      	itt	ne
 80063fa:	2205      	movne	r2, #5
 80063fc:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006400:	2200      	movs	r2, #0
 8006402:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8006404:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006408:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 800640a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800640c:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800640e:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 8006410:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006412:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006414:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006418:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800641a:	d403      	bmi.n	8006424 <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 800641c:	6811      	ldr	r1, [r2, #0]
 800641e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006422:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006424:	68e1      	ldr	r1, [r4, #12]
 8006426:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800642a:	d04e      	beq.n	80064ca <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800642c:	2b00      	cmp	r3, #0
 800642e:	d03e      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x126>
 8006430:	2f01      	cmp	r7, #1
 8006432:	d03c      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 8006434:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006436:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006438:	b29b      	uxth	r3, r3
 800643a:	b91b      	cbnz	r3, 8006444 <HAL_SPI_TransmitReceive+0xbc>
 800643c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d07f      	beq.n	8006544 <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	6893      	ldr	r3, [r2, #8]
 8006448:	0799      	lsls	r1, r3, #30
 800644a:	d50f      	bpl.n	800646c <HAL_SPI_TransmitReceive+0xe4>
 800644c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800644e:	b29b      	uxth	r3, r3
 8006450:	b163      	cbz	r3, 800646c <HAL_SPI_TransmitReceive+0xe4>
 8006452:	b15f      	cbz	r7, 800646c <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006454:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800645a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800645c:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800645e:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8006460:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8006462:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8006464:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006466:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8006468:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800646a:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800646c:	6893      	ldr	r3, [r2, #8]
 800646e:	f013 0301 	ands.w	r3, r3, #1
 8006472:	d00d      	beq.n	8006490 <HAL_SPI_TransmitReceive+0x108>
 8006474:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006476:	b289      	uxth	r1, r1
 8006478:	b151      	cbz	r1, 8006490 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 800647a:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800647c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800647e:	68d2      	ldr	r2, [r2, #12]
 8006480:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006482:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006484:	3301      	adds	r3, #1
 8006486:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006488:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800648a:	3b01      	subs	r3, #1
 800648c:	b29b      	uxth	r3, r3
 800648e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006490:	f7fd fad8 	bl	8003a44 <HAL_GetTick>
 8006494:	1b80      	subs	r0, r0, r6
 8006496:	42a8      	cmp	r0, r5
 8006498:	d314      	bcc.n	80064c4 <HAL_SPI_TransmitReceive+0x13c>
 800649a:	1c6a      	adds	r2, r5, #1
 800649c:	d0cb      	beq.n	8006436 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 800649e:	2003      	movs	r0, #3
 80064a0:	e78f      	b.n	80063c2 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80064a2:	2002      	movs	r0, #2
}
 80064a4:	b003      	add	sp, #12
 80064a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80064aa:	2001      	movs	r0, #1
 80064ac:	e789      	b.n	80063c2 <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064ae:	f899 3000 	ldrb.w	r3, [r9]
 80064b2:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 80064b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80064b8:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064ba:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80064bc:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064be:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80064c0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80064c2:	e7b7      	b.n	8006434 <HAL_SPI_TransmitReceive+0xac>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064c4:	2d00      	cmp	r5, #0
 80064c6:	d1b6      	bne.n	8006436 <HAL_SPI_TransmitReceive+0xae>
 80064c8:	e7e9      	b.n	800649e <HAL_SPI_TransmitReceive+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d16c      	bne.n	80065a8 <HAL_SPI_TransmitReceive+0x220>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064ce:	4649      	mov	r1, r9
 80064d0:	f831 3b02 	ldrh.w	r3, [r1], #2
 80064d4:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80064d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d8:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29b      	uxth	r3, r3
 80064de:	86e3      	strh	r3, [r4, #54]	; 0x36
 80064e0:	1c6a      	adds	r2, r5, #1
{
 80064e2:	f04f 0701 	mov.w	r7, #1
 80064e6:	d025      	beq.n	8006534 <HAL_SPI_TransmitReceive+0x1ac>
 80064e8:	e061      	b.n	80065ae <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	6893      	ldr	r3, [r2, #8]
 80064ee:	079b      	lsls	r3, r3, #30
 80064f0:	d50d      	bpl.n	800650e <HAL_SPI_TransmitReceive+0x186>
 80064f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	b153      	cbz	r3, 800650e <HAL_SPI_TransmitReceive+0x186>
 80064f8:	b14f      	cbz	r7, 800650e <HAL_SPI_TransmitReceive+0x186>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80064fc:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006500:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8006502:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006504:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006506:	3b01      	subs	r3, #1
 8006508:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800650a:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 800650c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800650e:	6893      	ldr	r3, [r2, #8]
 8006510:	f013 0301 	ands.w	r3, r3, #1
 8006514:	d00c      	beq.n	8006530 <HAL_SPI_TransmitReceive+0x1a8>
 8006516:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006518:	b289      	uxth	r1, r1
 800651a:	b149      	cbz	r1, 8006530 <HAL_SPI_TransmitReceive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800651c:	68d1      	ldr	r1, [r2, #12]
 800651e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006520:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8006524:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8006526:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006528:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800652a:	3b01      	subs	r3, #1
 800652c:	b29b      	uxth	r3, r3
 800652e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006530:	f7fd fa88 	bl	8003a44 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006534:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1d6      	bne.n	80064ea <HAL_SPI_TransmitReceive+0x162>
 800653c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1d2      	bne.n	80064ea <HAL_SPI_TransmitReceive+0x162>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006544:	4b33      	ldr	r3, [pc, #204]	; (8006614 <HAL_SPI_TransmitReceive+0x28c>)
 8006546:	4a34      	ldr	r2, [pc, #208]	; (8006618 <HAL_SPI_TransmitReceive+0x290>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	0d5b      	lsrs	r3, r3, #21
 8006550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006554:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006558:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800655a:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800655c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006560:	d114      	bne.n	800658c <HAL_SPI_TransmitReceive+0x204>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006562:	4633      	mov	r3, r6
 8006564:	462a      	mov	r2, r5
 8006566:	2180      	movs	r1, #128	; 0x80
 8006568:	4620      	mov	r0, r4
 800656a:	f7ff fcf9 	bl	8005f60 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800656e:	b180      	cbz	r0, 8006592 <HAL_SPI_TransmitReceive+0x20a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006570:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006572:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006574:	4313      	orrs	r3, r2
 8006576:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006578:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800657a:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 800657c:	e721      	b.n	80063c2 <HAL_SPI_TransmitReceive+0x3a>
      count--;
 800657e:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006580:	6822      	ldr	r2, [r4, #0]
      count--;
 8006582:	3b01      	subs	r3, #1
 8006584:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006586:	6893      	ldr	r3, [r2, #8]
 8006588:	061b      	lsls	r3, r3, #24
 800658a:	d502      	bpl.n	8006592 <HAL_SPI_TransmitReceive+0x20a>
      if (count == 0U)
 800658c:	9b01      	ldr	r3, [sp, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f5      	bne.n	800657e <HAL_SPI_TransmitReceive+0x1f6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006592:	68a0      	ldr	r0, [r4, #8]
 8006594:	2800      	cmp	r0, #0
 8006596:	d13a      	bne.n	800660e <HAL_SPI_TransmitReceive+0x286>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	9000      	str	r0, [sp, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	9200      	str	r2, [sp, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	9b00      	ldr	r3, [sp, #0]
 80065a6:	e70c      	b.n	80063c2 <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a8:	2f01      	cmp	r7, #1
 80065aa:	d199      	bne.n	80064e0 <HAL_SPI_TransmitReceive+0x158>
 80065ac:	e78f      	b.n	80064ce <HAL_SPI_TransmitReceive+0x146>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	b91b      	cbnz	r3, 80065bc <HAL_SPI_TransmitReceive+0x234>
 80065b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0c3      	beq.n	8006544 <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	6893      	ldr	r3, [r2, #8]
 80065c0:	0798      	lsls	r0, r3, #30
 80065c2:	d50d      	bpl.n	80065e0 <HAL_SPI_TransmitReceive+0x258>
 80065c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	b153      	cbz	r3, 80065e0 <HAL_SPI_TransmitReceive+0x258>
 80065ca:	b14f      	cbz	r7, 80065e0 <HAL_SPI_TransmitReceive+0x258>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065ce:	f833 1b02 	ldrh.w	r1, [r3], #2
 80065d2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80065d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80065dc:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 80065de:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065e0:	6893      	ldr	r3, [r2, #8]
 80065e2:	f013 0301 	ands.w	r3, r3, #1
 80065e6:	d00c      	beq.n	8006602 <HAL_SPI_TransmitReceive+0x27a>
 80065e8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80065ea:	b289      	uxth	r1, r1
 80065ec:	b149      	cbz	r1, 8006602 <HAL_SPI_TransmitReceive+0x27a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065ee:	68d1      	ldr	r1, [r2, #12]
 80065f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80065f2:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 80065f6:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80065f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065fa:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29b      	uxth	r3, r3
 8006600:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006602:	f7fd fa1f 	bl	8003a44 <HAL_GetTick>
 8006606:	1b80      	subs	r0, r0, r6
 8006608:	42a8      	cmp	r0, r5
 800660a:	d3d0      	bcc.n	80065ae <HAL_SPI_TransmitReceive+0x226>
 800660c:	e747      	b.n	800649e <HAL_SPI_TransmitReceive+0x116>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800660e:	2000      	movs	r0, #0
 8006610:	e6d7      	b.n	80063c2 <HAL_SPI_TransmitReceive+0x3a>
 8006612:	bf00      	nop
 8006614:	20000004 	.word	0x20000004
 8006618:	165e9f81 	.word	0x165e9f81

0800661c <HAL_SPI_GetState>:
  return hspi->State;
 800661c:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop

08006624 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006624:	2800      	cmp	r0, #0
 8006626:	d076      	beq.n	8006716 <HAL_TIM_Base_Init+0xf2>
{
 8006628:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800662e:	4604      	mov	r4, r0
 8006630:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006634:	2b00      	cmp	r3, #0
 8006636:	d055      	beq.n	80066e4 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006638:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800663a:	4938      	ldr	r1, [pc, #224]	; (800671c <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	2302      	movs	r3, #2
 800663e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006642:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006644:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006646:	d052      	beq.n	80066ee <HAL_TIM_Base_Init+0xca>
 8006648:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800664c:	d021      	beq.n	8006692 <HAL_TIM_Base_Init+0x6e>
 800664e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8006652:	428a      	cmp	r2, r1
 8006654:	d01d      	beq.n	8006692 <HAL_TIM_Base_Init+0x6e>
 8006656:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800665a:	428a      	cmp	r2, r1
 800665c:	d019      	beq.n	8006692 <HAL_TIM_Base_Init+0x6e>
 800665e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006662:	428a      	cmp	r2, r1
 8006664:	d015      	beq.n	8006692 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006666:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800666a:	428a      	cmp	r2, r1
 800666c:	d015      	beq.n	800669a <HAL_TIM_Base_Init+0x76>
 800666e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006672:	428a      	cmp	r2, r1
 8006674:	d011      	beq.n	800669a <HAL_TIM_Base_Init+0x76>
 8006676:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800667a:	428a      	cmp	r2, r1
 800667c:	d00d      	beq.n	800669a <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800667e:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006680:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006686:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006688:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800668a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800668c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800668e:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006690:	e010      	b.n	80066b4 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8006692:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006698:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800669a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800669c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800669e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066a2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066aa:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80066ac:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80066ae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80066b2:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b4:	2301      	movs	r3, #1
 80066b6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066b8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80066c0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80066c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80066c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80066d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80066dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80066e0:	2000      	movs	r0, #0
}
 80066e2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80066e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80066e8:	f7fc fdb2 	bl	8003250 <HAL_TIM_Base_MspInit>
 80066ec:	e7a4      	b.n	8006638 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80066ee:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066f0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80066f6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80066f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066fc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066fe:	69a1      	ldr	r1, [r4, #24]
 8006700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006704:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006706:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006708:	68e3      	ldr	r3, [r4, #12]
 800670a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800670c:	6863      	ldr	r3, [r4, #4]
 800670e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006710:	6963      	ldr	r3, [r4, #20]
 8006712:	6313      	str	r3, [r2, #48]	; 0x30
 8006714:	e7ce      	b.n	80066b4 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8006716:	2001      	movs	r0, #1
}
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40010000 	.word	0x40010000

08006720 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006720:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006724:	2b01      	cmp	r3, #1
 8006726:	d127      	bne.n	8006778 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006728:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800672a:	4915      	ldr	r1, [pc, #84]	; (8006780 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 800672c:	2202      	movs	r2, #2
 800672e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006732:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006734:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800673c:	d011      	beq.n	8006762 <HAL_TIM_Base_Start_IT+0x42>
 800673e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006742:	d00e      	beq.n	8006762 <HAL_TIM_Base_Start_IT+0x42>
 8006744:	4a0f      	ldr	r2, [pc, #60]	; (8006784 <HAL_TIM_Base_Start_IT+0x64>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00b      	beq.n	8006762 <HAL_TIM_Base_Start_IT+0x42>
 800674a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800674e:	4293      	cmp	r3, r2
 8006750:	d007      	beq.n	8006762 <HAL_TIM_Base_Start_IT+0x42>
 8006752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006756:	4293      	cmp	r3, r2
 8006758:	d003      	beq.n	8006762 <HAL_TIM_Base_Start_IT+0x42>
 800675a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800675e:	4293      	cmp	r3, r2
 8006760:	d104      	bne.n	800676c <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006768:	2a06      	cmp	r2, #6
 800676a:	d007      	beq.n	800677c <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8006772:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	4770      	bx	lr
    return HAL_ERROR;
 8006778:	2001      	movs	r0, #1
 800677a:	4770      	bx	lr
  return HAL_OK;
 800677c:	2000      	movs	r0, #0
}
 800677e:	4770      	bx	lr
 8006780:	40010000 	.word	0x40010000
 8006784:	40000400 	.word	0x40000400

08006788 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006788:	6803      	ldr	r3, [r0, #0]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8006792:	6a1a      	ldr	r2, [r3, #32]
 8006794:	f241 1111 	movw	r1, #4369	; 0x1111
 8006798:	420a      	tst	r2, r1
 800679a:	d108      	bne.n	80067ae <HAL_TIM_Base_Stop_IT+0x26>
 800679c:	6a19      	ldr	r1, [r3, #32]
 800679e:	f240 4244 	movw	r2, #1092	; 0x444
 80067a2:	4211      	tst	r1, r2
 80067a4:	d103      	bne.n	80067ae <HAL_TIM_Base_Stop_IT+0x26>
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	f022 0201 	bic.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80067b4:	2000      	movs	r0, #0
 80067b6:	4770      	bx	lr

080067b8 <HAL_TIM_PWM_MspInit>:
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop

080067bc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80067bc:	2800      	cmp	r0, #0
 80067be:	d076      	beq.n	80068ae <HAL_TIM_PWM_Init+0xf2>
{
 80067c0:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80067c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80067c6:	4604      	mov	r4, r0
 80067c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d055      	beq.n	800687c <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d0:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d2:	4938      	ldr	r1, [pc, #224]	; (80068b4 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	2302      	movs	r3, #2
 80067d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067da:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80067dc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067de:	d052      	beq.n	8006886 <HAL_TIM_PWM_Init+0xca>
 80067e0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80067e4:	d021      	beq.n	800682a <HAL_TIM_PWM_Init+0x6e>
 80067e6:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80067ea:	428a      	cmp	r2, r1
 80067ec:	d01d      	beq.n	800682a <HAL_TIM_PWM_Init+0x6e>
 80067ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067f2:	428a      	cmp	r2, r1
 80067f4:	d019      	beq.n	800682a <HAL_TIM_PWM_Init+0x6e>
 80067f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067fa:	428a      	cmp	r2, r1
 80067fc:	d015      	beq.n	800682a <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067fe:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8006802:	428a      	cmp	r2, r1
 8006804:	d015      	beq.n	8006832 <HAL_TIM_PWM_Init+0x76>
 8006806:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800680a:	428a      	cmp	r2, r1
 800680c:	d011      	beq.n	8006832 <HAL_TIM_PWM_Init+0x76>
 800680e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006812:	428a      	cmp	r2, r1
 8006814:	d00d      	beq.n	8006832 <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006816:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006818:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800681a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800681e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006820:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8006822:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006824:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006826:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006828:	e010      	b.n	800684c <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800682a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006830:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006832:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006834:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800683c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006840:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006842:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006844:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006846:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006848:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800684a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800684c:	2301      	movs	r3, #1
 800684e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006850:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006854:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006858:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800685c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006860:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800686c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006870:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006874:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006878:	2000      	movs	r0, #0
}
 800687a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800687c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006880:	f7ff ff9a 	bl	80067b8 <HAL_TIM_PWM_MspInit>
 8006884:	e7a4      	b.n	80067d0 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8006886:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006888:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800688e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006894:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006896:	69a1      	ldr	r1, [r4, #24]
 8006898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800689c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800689e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068a0:	68e3      	ldr	r3, [r4, #12]
 80068a2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80068a4:	6863      	ldr	r3, [r4, #4]
 80068a6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80068a8:	6963      	ldr	r3, [r4, #20]
 80068aa:	6313      	str	r3, [r2, #48]	; 0x30
 80068ac:	e7ce      	b.n	800684c <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 80068ae:	2001      	movs	r0, #1
}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40010000 	.word	0x40010000

080068b8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80068b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80068bc:	2b01      	cmp	r3, #1
 80068be:	f000 80ca 	beq.w	8006a56 <HAL_TIM_PWM_ConfigChannel+0x19e>
 80068c2:	2301      	movs	r3, #1
{
 80068c4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80068c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80068ca:	2a0c      	cmp	r2, #12
 80068cc:	d808      	bhi.n	80068e0 <HAL_TIM_PWM_ConfigChannel+0x28>
 80068ce:	e8df f002 	tbb	[pc, r2]
 80068d2:	073d      	.short	0x073d
 80068d4:	07680707 	.word	0x07680707
 80068d8:	07960707 	.word	0x07960707
 80068dc:	0707      	.short	0x0707
 80068de:	0e          	.byte	0x0e
 80068df:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80068e0:	2300      	movs	r3, #0
 80068e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80068e6:	2201      	movs	r2, #1
}
 80068e8:	4610      	mov	r0, r2
 80068ea:	bcf0      	pop	{r4, r5, r6, r7}
 80068ec:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068ee:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068f2:	6a1a      	ldr	r2, [r3, #32]
 80068f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068f8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80068fa:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80068fc:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80068fe:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006900:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006904:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006908:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800690a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800690e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006912:	4e6b      	ldr	r6, [pc, #428]	; (8006ac0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8006914:	42b3      	cmp	r3, r6
 8006916:	f000 80bd 	beq.w	8006a94 <HAL_TIM_PWM_ConfigChannel+0x1dc>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691a:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800691c:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800691e:	684c      	ldr	r4, [r1, #4]
 8006920:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006922:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006924:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006926:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800692c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800692e:	69dc      	ldr	r4, [r3, #28]
 8006930:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8006934:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006936:	69d9      	ldr	r1, [r3, #28]
 8006938:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800693c:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 800693e:	2300      	movs	r3, #0
 8006940:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006944:	2200      	movs	r2, #0
}
 8006946:	4610      	mov	r0, r2
 8006948:	bcf0      	pop	{r4, r5, r6, r7}
 800694a:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800694c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800694e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006950:	6a1a      	ldr	r2, [r3, #32]
 8006952:	f022 0201 	bic.w	r2, r2, #1
 8006956:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006958:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800695a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800695c:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800695e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006962:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8006964:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006966:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 800696a:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800696c:	4e54      	ldr	r6, [pc, #336]	; (8006ac0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800696e:	42b3      	cmp	r3, r6
 8006970:	d074      	beq.n	8006a5c <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CR2 = tmpcr2;
 8006972:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006974:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8006976:	684c      	ldr	r4, [r1, #4]
 8006978:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800697a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800697c:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800697e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006980:	f042 0208 	orr.w	r2, r2, #8
 8006984:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006986:	699c      	ldr	r4, [r3, #24]
 8006988:	f024 0404 	bic.w	r4, r4, #4
 800698c:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800698e:	6999      	ldr	r1, [r3, #24]
 8006990:	4329      	orrs	r1, r5
 8006992:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8006994:	2300      	movs	r3, #0
 8006996:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800699a:	2200      	movs	r2, #0
}
 800699c:	4610      	mov	r0, r2
 800699e:	bcf0      	pop	{r4, r5, r6, r7}
 80069a0:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069a2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a4:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a6:	6a1a      	ldr	r2, [r3, #32]
 80069a8:	f022 0210 	bic.w	r2, r2, #16
 80069ac:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80069ae:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80069b0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80069b2:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069b4:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b8:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069bc:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80069be:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069c2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069c6:	4e3e      	ldr	r6, [pc, #248]	; (8006ac0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80069c8:	42b3      	cmp	r3, r6
 80069ca:	d054      	beq.n	8006a76 <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 80069cc:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80069ce:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80069d0:	684c      	ldr	r4, [r1, #4]
 80069d2:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80069d4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069d6:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069d8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069e0:	699c      	ldr	r4, [r3, #24]
 80069e2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80069e6:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069e8:	6999      	ldr	r1, [r3, #24]
 80069ea:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80069ee:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 80069f0:	2300      	movs	r3, #0
 80069f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2200      	movs	r2, #0
}
 80069f8:	4610      	mov	r0, r2
 80069fa:	bcf0      	pop	{r4, r5, r6, r7}
 80069fc:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069fe:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006a00:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a02:	6a1a      	ldr	r2, [r3, #32]
 8006a04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a08:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006a0a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006a0c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006a0e:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a10:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a16:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006a18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a1c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a20:	4e27      	ldr	r6, [pc, #156]	; (8006ac0 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8006a22:	42b3      	cmp	r3, r6
 8006a24:	d03c      	beq.n	8006aa0 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CR2 = tmpcr2;
 8006a26:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006a28:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006a2a:	684c      	ldr	r4, [r1, #4]
 8006a2c:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006a2e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a30:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a32:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a34:	f042 0208 	orr.w	r2, r2, #8
 8006a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a3a:	69dc      	ldr	r4, [r3, #28]
 8006a3c:	f024 0404 	bic.w	r4, r4, #4
 8006a40:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a42:	69d9      	ldr	r1, [r3, #28]
 8006a44:	4329      	orrs	r1, r5
 8006a46:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006a4e:	2200      	movs	r2, #0
}
 8006a50:	4610      	mov	r0, r2
 8006a52:	bcf0      	pop	{r4, r5, r6, r7}
 8006a54:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006a56:	2202      	movs	r2, #2
}
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8006a5c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a5e:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006a62:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a64:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a68:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a6c:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a6e:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a72:	4335      	orrs	r5, r6
 8006a74:	e77d      	b.n	8006972 <HAL_TIM_PWM_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a76:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a7c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a80:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a84:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a88:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a8e:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8006a92:	e79b      	b.n	80069cc <HAL_TIM_PWM_ConfigChannel+0x114>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a94:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a96:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a9a:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8006a9e:	e73c      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aa0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aa6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aaa:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aae:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ab2:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ab8:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8006abc:	e7b3      	b.n	8006a26 <HAL_TIM_PWM_ConfigChannel+0x16e>
 8006abe:	bf00      	nop
 8006ac0:	40010000 	.word	0x40010000

08006ac4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006ac4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d075      	beq.n	8006bb8 <HAL_TIM_ConfigClockSource+0xf4>
 8006acc:	4602      	mov	r2, r0
{
 8006ace:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad0:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8006ad2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad4:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8006ad8:	2001      	movs	r0, #1
 8006ada:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006ade:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ae4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006ae8:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006aea:	680b      	ldr	r3, [r1, #0]
 8006aec:	2b60      	cmp	r3, #96	; 0x60
 8006aee:	d065      	beq.n	8006bbc <HAL_TIM_ConfigClockSource+0xf8>
 8006af0:	d824      	bhi.n	8006b3c <HAL_TIM_ConfigClockSource+0x78>
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d07c      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0x12c>
 8006af6:	d94b      	bls.n	8006b90 <HAL_TIM_ConfigClockSource+0xcc>
 8006af8:	2b50      	cmp	r3, #80	; 0x50
 8006afa:	d117      	bne.n	8006b2c <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afc:	6848      	ldr	r0, [r1, #4]
 8006afe:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b00:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b02:	6a23      	ldr	r3, [r4, #32]
 8006b04:	f023 0301 	bic.w	r3, r3, #1
 8006b08:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b0a:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b0c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006b14:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b16:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b1a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006b1c:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b1e:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b24:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8006b28:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b2a:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006b2c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006b2e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006b30:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006b34:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8006b38:	bc30      	pop	{r4, r5}
 8006b3a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b40:	d038      	beq.n	8006bb4 <HAL_TIM_ConfigClockSource+0xf0>
 8006b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b46:	d110      	bne.n	8006b6a <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b48:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006b4c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b4e:	432b      	orrs	r3, r5
 8006b50:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b52:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006b5a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b5c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8006b64:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b66:	60a3      	str	r3, [r4, #8]
      break;
 8006b68:	e7e0      	b.n	8006b2c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006b6a:	2b70      	cmp	r3, #112	; 0x70
 8006b6c:	d1de      	bne.n	8006b2c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b6e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006b72:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b74:	432b      	orrs	r3, r5
 8006b76:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b78:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b7c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006b80:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8006b82:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006b84:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8006b8a:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8006b8c:	60a3      	str	r3, [r4, #8]
      break;
 8006b8e:	e7cd      	b.n	8006b2c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d002      	beq.n	8006b9a <HAL_TIM_ConfigClockSource+0xd6>
 8006b94:	d90a      	bls.n	8006bac <HAL_TIM_ConfigClockSource+0xe8>
 8006b96:	2b30      	cmp	r3, #48	; 0x30
 8006b98:	d1c8      	bne.n	8006b2c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8006b9a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b9c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8006ba6:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006ba8:	60a3      	str	r3, [r4, #8]
}
 8006baa:	e7bf      	b.n	8006b2c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006bac:	f033 0110 	bics.w	r1, r3, #16
 8006bb0:	d1bc      	bne.n	8006b2c <HAL_TIM_ConfigClockSource+0x68>
 8006bb2:	e7f2      	b.n	8006b9a <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	e7b9      	b.n	8006b2c <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8006bb8:	2002      	movs	r0, #2
}
 8006bba:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bbc:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bbe:	68cb      	ldr	r3, [r1, #12]
 8006bc0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc2:	f020 0010 	bic.w	r0, r0, #16
 8006bc6:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc8:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bca:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bce:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8006bd2:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8006bd4:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bda:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8006bde:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006be0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006be6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8006bea:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006bec:	60a3      	str	r3, [r4, #8]
}
 8006bee:	e79d      	b.n	8006b2c <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bf0:	6848      	ldr	r0, [r1, #4]
 8006bf2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006bf4:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bf6:	6a23      	ldr	r3, [r4, #32]
 8006bf8:	f023 0301 	bic.w	r3, r3, #1
 8006bfc:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bfe:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c00:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006c08:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c0a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006c0e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006c10:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006c12:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c18:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8006c1c:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006c1e:	60a3      	str	r3, [r4, #8]
}
 8006c20:	e784      	b.n	8006b2c <HAL_TIM_ConfigClockSource+0x68>
 8006c22:	bf00      	nop

08006c24 <HAL_TIM_OC_DelayElapsedCallback>:
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <HAL_TIM_IC_CaptureCallback>:
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop

08006c2c <HAL_TIM_PWM_PulseFinishedCallback>:
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop

08006c30 <HAL_TIM_TriggerCallback>:
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop

08006c34 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c34:	6803      	ldr	r3, [r0, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	0791      	lsls	r1, r2, #30
{
 8006c3a:	b510      	push	{r4, lr}
 8006c3c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c3e:	d502      	bpl.n	8006c46 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	0792      	lsls	r2, r2, #30
 8006c44:	d45f      	bmi.n	8006d06 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c46:	691a      	ldr	r2, [r3, #16]
 8006c48:	0750      	lsls	r0, r2, #29
 8006c4a:	d502      	bpl.n	8006c52 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	0751      	lsls	r1, r2, #29
 8006c50:	d446      	bmi.n	8006ce0 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	0712      	lsls	r2, r2, #28
 8006c56:	d502      	bpl.n	8006c5e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	0710      	lsls	r0, r2, #28
 8006c5c:	d42e      	bmi.n	8006cbc <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	06d2      	lsls	r2, r2, #27
 8006c62:	d502      	bpl.n	8006c6a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	06d0      	lsls	r0, r2, #27
 8006c68:	d418      	bmi.n	8006c9c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	07d1      	lsls	r1, r2, #31
 8006c6e:	d502      	bpl.n	8006c76 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	07d2      	lsls	r2, r2, #31
 8006c74:	d45d      	bmi.n	8006d32 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	0610      	lsls	r0, r2, #24
 8006c7a:	d502      	bpl.n	8006c82 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	0611      	lsls	r1, r2, #24
 8006c80:	d45f      	bmi.n	8006d42 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	0652      	lsls	r2, r2, #25
 8006c86:	d502      	bpl.n	8006c8e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	0650      	lsls	r0, r2, #25
 8006c8c:	d461      	bmi.n	8006d52 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	0691      	lsls	r1, r2, #26
 8006c92:	d502      	bpl.n	8006c9a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	0692      	lsls	r2, r2, #26
 8006c98:	d443      	bmi.n	8006d22 <HAL_TIM_IRQHandler+0xee>
}
 8006c9a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c9c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ca0:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ca2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ca4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006cac:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cae:	d064      	beq.n	8006d7a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb0:	f7ff ffba 	bl	8006c28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cb6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb8:	7722      	strb	r2, [r4, #28]
 8006cba:	e7d6      	b.n	8006c6a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cbc:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cc0:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cc2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cc4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006cca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ccc:	d152      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cce:	f7ff ffa9 	bl	8006c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f7ff ffaa 	bl	8006c2c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cda:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cdc:	7722      	strb	r2, [r4, #28]
 8006cde:	e7be      	b.n	8006c5e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ce0:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ce4:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ce6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ce8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cf2:	d13c      	bne.n	8006d6e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf4:	f7ff ff96 	bl	8006c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7ff ff97 	bl	8006c2c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfe:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d00:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d02:	7722      	strb	r2, [r4, #28]
 8006d04:	e7a5      	b.n	8006c52 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d06:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d0a:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d0c:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d0e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	079b      	lsls	r3, r3, #30
 8006d14:	d025      	beq.n	8006d62 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006d16:	f7ff ff87 	bl	8006c28 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d1c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1e:	7722      	strb	r2, [r4, #28]
 8006d20:	e791      	b.n	8006c46 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d22:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006d26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d28:	611a      	str	r2, [r3, #16]
}
 8006d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006d2e:	f000 b867 	b.w	8006e00 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d32:	f06f 0201 	mvn.w	r2, #1
 8006d36:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f7fb fcfd 	bl	8002738 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	e799      	b.n	8006c76 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 f85b 	bl	8006e04 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	e797      	b.n	8006c82 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d56:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f7ff ff69 	bl	8006c30 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	e795      	b.n	8006c8e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d62:	f7ff ff5f 	bl	8006c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d66:	4620      	mov	r0, r4
 8006d68:	f7ff ff60 	bl	8006c2c <HAL_TIM_PWM_PulseFinishedCallback>
 8006d6c:	e7d5      	b.n	8006d1a <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d6e:	f7ff ff5b 	bl	8006c28 <HAL_TIM_IC_CaptureCallback>
 8006d72:	e7c4      	b.n	8006cfe <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d74:	f7ff ff58 	bl	8006c28 <HAL_TIM_IC_CaptureCallback>
 8006d78:	e7ae      	b.n	8006cd8 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7a:	f7ff ff53 	bl	8006c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7ff ff54 	bl	8006c2c <HAL_TIM_PWM_PulseFinishedCallback>
 8006d84:	e796      	b.n	8006cb4 <HAL_TIM_IRQHandler+0x80>
 8006d86:	bf00      	nop

08006d88 <HAL_TIM_Base_GetState>:
  return htim->State;
 8006d88:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d02f      	beq.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d98:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9a:	2202      	movs	r2, #2
{
 8006d9c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8006da2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da4:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006da6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dac:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db0:	4a12      	ldr	r2, [pc, #72]	; (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d012      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dba:	d00f      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dbc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00b      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d007      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d003      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dd4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d104      	bne.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ddc:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dde:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de2:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006de4:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006de6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006de8:	2201      	movs	r2, #1
 8006dea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006dee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006df2:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8006df4:	4618      	mov	r0, r3
}
 8006df6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006df8:	2002      	movs	r0, #2
}
 8006dfa:	4770      	bx	lr
 8006dfc:	40010000 	.word	0x40010000

08006e00 <HAL_TIMEx_CommutCallback>:
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop

08006e04 <HAL_TIMEx_BreakCallback>:
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop

08006e08 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	f000 808f 	beq.w	8006f2c <HAL_UART_Init+0x124>
{
 8006e0e:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006e14:	4604      	mov	r4, r0
 8006e16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 8081 	beq.w	8006f22 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e20:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e22:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8006e24:	2224      	movs	r2, #36	; 0x24
 8006e26:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e30:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e32:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e34:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e36:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006e3a:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e3c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e3e:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e40:	4302      	orrs	r2, r0
 8006e42:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8006e44:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e46:	4302      	orrs	r2, r0
 8006e48:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8006e4a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8006e4e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e52:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006e54:	430a      	orrs	r2, r1
 8006e56:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e58:	695a      	ldr	r2, [r3, #20]
 8006e5a:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e5c:	4934      	ldr	r1, [pc, #208]	; (8006f30 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006e62:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e64:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e66:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e68:	d035      	beq.n	8006ed6 <HAL_UART_Init+0xce>
 8006e6a:	4a32      	ldr	r2, [pc, #200]	; (8006f34 <HAL_UART_Init+0x12c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d032      	beq.n	8006ed6 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e70:	f7ff f856 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e74:	69e3      	ldr	r3, [r4, #28]
 8006e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e7a:	d032      	beq.n	8006ee2 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e7c:	6863      	ldr	r3, [r4, #4]
 8006e7e:	2119      	movs	r1, #25
 8006e80:	009a      	lsls	r2, r3, #2
 8006e82:	fba0 0101 	umull	r0, r1, r0, r1
 8006e86:	0f9b      	lsrs	r3, r3, #30
 8006e88:	f7f9 fec6 	bl	8000c18 <__aeabi_uldivmod>
 8006e8c:	492a      	ldr	r1, [pc, #168]	; (8006f38 <HAL_UART_Init+0x130>)
 8006e8e:	fba1 3200 	umull	r3, r2, r1, r0
 8006e92:	0952      	lsrs	r2, r2, #5
 8006e94:	2564      	movs	r5, #100	; 0x64
 8006e96:	fb05 0012 	mls	r0, r5, r2, r0
 8006e9a:	0100      	lsls	r0, r0, #4
 8006e9c:	3032      	adds	r0, #50	; 0x32
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	fba1 1000 	umull	r1, r0, r1, r0
 8006ea4:	0112      	lsls	r2, r2, #4
 8006ea6:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8006eaa:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eac:	691a      	ldr	r2, [r3, #16]
 8006eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eb2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eb4:	695a      	ldr	r2, [r3, #20]
 8006eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eba:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006ebc:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ebe:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8006ec0:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8006ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec8:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006eca:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ece:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8006ed2:	4628      	mov	r0, r5
}
 8006ed4:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ed6:	f7ff f833 	bl	8005f40 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eda:	69e3      	ldr	r3, [r4, #28]
 8006edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee0:	d1cc      	bne.n	8006e7c <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ee2:	6862      	ldr	r2, [r4, #4]
 8006ee4:	2119      	movs	r1, #25
 8006ee6:	1892      	adds	r2, r2, r2
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	415b      	adcs	r3, r3
 8006eee:	fba0 0101 	umull	r0, r1, r0, r1
 8006ef2:	f7f9 fe91 	bl	8000c18 <__aeabi_uldivmod>
 8006ef6:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <HAL_UART_Init+0x130>)
 8006ef8:	fba3 2100 	umull	r2, r1, r3, r0
 8006efc:	094d      	lsrs	r5, r1, #5
 8006efe:	2264      	movs	r2, #100	; 0x64
 8006f00:	fb02 0215 	mls	r2, r2, r5, r0
 8006f04:	00d2      	lsls	r2, r2, #3
 8006f06:	3232      	adds	r2, #50	; 0x32
 8006f08:	fba3 3202 	umull	r3, r2, r3, r2
 8006f0c:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8006f10:	0912      	lsrs	r2, r2, #4
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8006f18:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8006f1c:	440a      	add	r2, r1
 8006f1e:	609a      	str	r2, [r3, #8]
 8006f20:	e7c4      	b.n	8006eac <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8006f22:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006f26:	f7fc fa4b 	bl	80033c0 <HAL_UART_MspInit>
 8006f2a:	e779      	b.n	8006e20 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8006f2c:	2001      	movs	r0, #1
}
 8006f2e:	4770      	bx	lr
 8006f30:	40011000 	.word	0x40011000
 8006f34:	40011400 	.word	0x40011400
 8006f38:	51eb851f 	.word	0x51eb851f

08006f3c <HAL_UART_Transmit>:
{
 8006f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f40:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8006f42:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8006f46:	2820      	cmp	r0, #32
 8006f48:	d177      	bne.n	800703a <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8006f4a:	4689      	mov	r9, r1
 8006f4c:	2900      	cmp	r1, #0
 8006f4e:	d040      	beq.n	8006fd2 <HAL_UART_Transmit+0x96>
 8006f50:	4614      	mov	r4, r2
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	d03d      	beq.n	8006fd2 <HAL_UART_Transmit+0x96>
 8006f56:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8006f58:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d06c      	beq.n	800703a <HAL_UART_Transmit+0xfe>
 8006f60:	2301      	movs	r3, #1
 8006f62:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f66:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f6a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6c:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f70:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8006f74:	f7fc fd66 	bl	8003a44 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f78:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 8006f7a:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8006f80:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8006f82:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f84:	d05c      	beq.n	8007040 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8006f86:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8006f88:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8006f8a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8006f8c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d07e      	beq.n	8007092 <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f94:	682c      	ldr	r4, [r5, #0]
 8006f96:	1c72      	adds	r2, r6, #1
 8006f98:	d11e      	bne.n	8006fd8 <HAL_UART_Transmit+0x9c>
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	0613      	lsls	r3, r2, #24
 8006f9e:	d5fc      	bpl.n	8006f9a <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8006fa0:	f1b9 0f00 	cmp.w	r9, #0
 8006fa4:	d044      	beq.n	8007030 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fa6:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006faa:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8006fac:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fb4:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1ec      	bne.n	8006f96 <HAL_UART_Transmit+0x5a>
 8006fbc:	1c71      	adds	r1, r6, #1
 8006fbe:	d145      	bne.n	800704c <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	065a      	lsls	r2, r3, #25
 8006fc4:	d5fc      	bpl.n	8006fc0 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8006fc6:	2320      	movs	r3, #32
 8006fc8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8006fcc:	2000      	movs	r0, #0
}
 8006fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8006fd2:	2001      	movs	r0, #1
}
 8006fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	0618      	lsls	r0, r3, #24
 8006fdc:	d4e0      	bmi.n	8006fa0 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fde:	b12e      	cbz	r6, 8006fec <HAL_UART_Transmit+0xb0>
 8006fe0:	f7fc fd30 	bl	8003a44 <HAL_GetTick>
 8006fe4:	1bc0      	subs	r0, r0, r7
 8006fe6:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fe8:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fea:	d2d4      	bcs.n	8006f96 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	f104 030c 	add.w	r3, r4, #12
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	f104 010c 	add.w	r1, r4, #12
 8006ffc:	e841 3200 	strex	r2, r3, [r1]
 8007000:	2a00      	cmp	r2, #0
 8007002:	d1f3      	bne.n	8006fec <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	f104 0314 	add.w	r3, r4, #20
 8007008:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	f104 0114 	add.w	r1, r4, #20
 8007014:	e841 3200 	strex	r2, r3, [r1]
 8007018:	2a00      	cmp	r2, #0
 800701a:	d1f3      	bne.n	8007004 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 800701c:	2320      	movs	r3, #32
 800701e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8007022:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8007026:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 800702a:	2003      	movs	r0, #3
}
 800702c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007030:	f838 3b02 	ldrh.w	r3, [r8], #2
 8007034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007038:	e7b7      	b.n	8006faa <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 800703a:	2002      	movs	r0, #2
}
 800703c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007040:	692b      	ldr	r3, [r5, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d19f      	bne.n	8006f86 <HAL_UART_Transmit+0x4a>
 8007046:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8007048:	4699      	mov	r9, r3
 800704a:	e79c      	b.n	8006f86 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	065b      	lsls	r3, r3, #25
 8007050:	d4b9      	bmi.n	8006fc6 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007052:	b12e      	cbz	r6, 8007060 <HAL_UART_Transmit+0x124>
 8007054:	f7fc fcf6 	bl	8003a44 <HAL_GetTick>
 8007058:	1bc0      	subs	r0, r0, r7
 800705a:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800705c:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800705e:	d2ad      	bcs.n	8006fbc <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	f104 030c 	add.w	r3, r4, #12
 8007064:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	f104 010c 	add.w	r1, r4, #12
 8007070:	e841 3200 	strex	r2, r3, [r1]
 8007074:	2a00      	cmp	r2, #0
 8007076:	d1f3      	bne.n	8007060 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	f104 0314 	add.w	r3, r4, #20
 800707c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007080:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	f104 0114 	add.w	r1, r4, #20
 8007088:	e841 3200 	strex	r2, r3, [r1]
 800708c:	2a00      	cmp	r2, #0
 800708e:	d1f3      	bne.n	8007078 <HAL_UART_Transmit+0x13c>
 8007090:	e7c4      	b.n	800701c <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007092:	682c      	ldr	r4, [r5, #0]
 8007094:	e792      	b.n	8006fbc <HAL_UART_Transmit+0x80>
 8007096:	bf00      	nop

08007098 <HAL_UART_Transmit_DMA>:
{
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800709c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80070a0:	2820      	cmp	r0, #32
 80070a2:	d135      	bne.n	8007110 <HAL_UART_Transmit_DMA+0x78>
    if ((pData == NULL) || (Size == 0U))
 80070a4:	b391      	cbz	r1, 800710c <HAL_UART_Transmit_DMA+0x74>
 80070a6:	b38a      	cbz	r2, 800710c <HAL_UART_Transmit_DMA+0x74>
    __HAL_LOCK(huart);
 80070a8:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80070ac:	2801      	cmp	r0, #1
 80070ae:	d02f      	beq.n	8007110 <HAL_UART_Transmit_DMA+0x78>
 80070b0:	2001      	movs	r0, #1
    huart->TxXferCount = Size;
 80070b2:	84e2      	strh	r2, [r4, #38]	; 0x26
    __HAL_LOCK(huart);
 80070b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    huart->TxXferSize = Size;
 80070b8:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80070ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80070bc:	f8df c05c 	ldr.w	ip, [pc, #92]	; 800711c <HAL_UART_Transmit_DMA+0x84>
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80070c0:	4f14      	ldr	r7, [pc, #80]	; (8007114 <HAL_UART_Transmit_DMA+0x7c>)
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80070c2:	4e15      	ldr	r6, [pc, #84]	; (8007118 <HAL_UART_Transmit_DMA+0x80>)
    huart->pTxBuffPtr = pData;
 80070c4:	6221      	str	r1, [r4, #32]
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80070c6:	4613      	mov	r3, r2
 80070c8:	6822      	ldr	r2, [r4, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ca:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070cc:	f04f 0e21 	mov.w	lr, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d0:	6425      	str	r5, [r4, #64]	; 0x40
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80070d2:	3204      	adds	r2, #4
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d4:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80070d8:	e9c0 c70f 	strd	ip, r7, [r0, #60]	; 0x3c
    huart->hdmatx->XferAbortCallback = NULL;
 80070dc:	e9c0 6513 	strd	r6, r5, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80070e0:	f7fd f826 	bl	8004130 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80070e4:	6822      	ldr	r2, [r4, #0]
 80070e6:	f06f 0340 	mvn.w	r3, #64	; 0x40
 80070ea:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 80070ec:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	f102 0314 	add.w	r3, r2, #20
 80070f4:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	f102 0014 	add.w	r0, r2, #20
 8007100:	e840 3100 	strex	r1, r3, [r0]
 8007104:	2900      	cmp	r1, #0
 8007106:	d1f3      	bne.n	80070f0 <HAL_UART_Transmit_DMA+0x58>
    return HAL_OK;
 8007108:	2000      	movs	r0, #0
}
 800710a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800710c:	2001      	movs	r0, #1
}
 800710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8007110:	2002      	movs	r0, #2
}
 8007112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007114:	08007171 	.word	0x08007171
 8007118:	08007181 	.word	0x08007181
 800711c:	08007121 	.word	0x08007121

08007120 <UART_DMATransmitCplt>:
{
 8007120:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007122:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007124:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800712c:	d11a      	bne.n	8007164 <UART_DMATransmitCplt+0x44>
    huart->TxXferCount = 0x00U;
 800712e:	6802      	ldr	r2, [r0, #0]
 8007130:	84c3      	strh	r3, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	f102 0314 	add.w	r3, r2, #20
 8007136:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800713a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	f102 0014 	add.w	r0, r2, #20
 8007142:	e840 3100 	strex	r1, r3, [r0]
 8007146:	2900      	cmp	r1, #0
 8007148:	d1f3      	bne.n	8007132 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	f102 030c 	add.w	r3, r2, #12
 800714e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	f102 000c 	add.w	r0, r2, #12
 800715a:	e840 3100 	strex	r1, r3, [r0]
 800715e:	2900      	cmp	r1, #0
 8007160:	d1f3      	bne.n	800714a <UART_DMATransmitCplt+0x2a>
}
 8007162:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007164:	f7fc fb22 	bl	80037ac <HAL_UART_TxCpltCallback>
}
 8007168:	bd08      	pop	{r3, pc}
 800716a:	bf00      	nop

0800716c <HAL_UART_TxHalfCpltCallback>:
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop

08007170 <UART_DMATxHalfCplt>:
{
 8007170:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007172:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007174:	f7ff fffa 	bl	800716c <HAL_UART_TxHalfCpltCallback>
}
 8007178:	bd08      	pop	{r3, pc}
 800717a:	bf00      	nop

0800717c <HAL_UART_RxHalfCpltCallback>:
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop

08007180 <UART_DMAError>:
{
 8007180:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007182:	6b80      	ldr	r0, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007184:	6803      	ldr	r3, [r0, #0]
 8007186:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007188:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800718c:	2a21      	cmp	r2, #33	; 0x21
 800718e:	d00b      	beq.n	80071a8 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007190:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007192:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8007196:	2a22      	cmp	r2, #34	; 0x22
 8007198:	d01e      	beq.n	80071d8 <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800719a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800719c:	f043 0310 	orr.w	r3, r3, #16
 80071a0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 80071a2:	f7fc faf7 	bl	8003794 <HAL_UART_ErrorCallback>
}
 80071a6:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80071a8:	0609      	lsls	r1, r1, #24
 80071aa:	d5f1      	bpl.n	8007190 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80071ac:	2200      	movs	r2, #0
 80071ae:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	f103 020c 	add.w	r2, r3, #12
 80071b4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	f103 0c0c 	add.w	ip, r3, #12
 80071c0:	e84c 2100 	strex	r1, r2, [ip]
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d1f3      	bne.n	80071b0 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 80071c8:	2220      	movs	r2, #32
 80071ca:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071ce:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071d0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80071d4:	2a22      	cmp	r2, #34	; 0x22
 80071d6:	d1e0      	bne.n	800719a <UART_DMAError+0x1a>
 80071d8:	064a      	lsls	r2, r1, #25
 80071da:	d5de      	bpl.n	800719a <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 80071dc:	2200      	movs	r2, #0
 80071de:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	f103 020c 	add.w	r2, r3, #12
 80071e4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	f103 0c0c 	add.w	ip, r3, #12
 80071f0:	e84c 2100 	strex	r1, r2, [ip]
 80071f4:	2900      	cmp	r1, #0
 80071f6:	d1f3      	bne.n	80071e0 <UART_DMAError+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	f103 0214 	add.w	r2, r3, #20
 80071fc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007200:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	f103 0c14 	add.w	ip, r3, #20
 8007208:	e84c 2100 	strex	r1, r2, [ip]
 800720c:	2900      	cmp	r1, #0
 800720e:	d1f3      	bne.n	80071f8 <UART_DMAError+0x78>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007210:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007212:	2a01      	cmp	r2, #1
 8007214:	d005      	beq.n	8007222 <UART_DMAError+0xa2>
  huart->RxState = HAL_UART_STATE_READY;
 8007216:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007218:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800721a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721e:	6303      	str	r3, [r0, #48]	; 0x30
}
 8007220:	e7bb      	b.n	800719a <UART_DMAError+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	f103 020c 	add.w	r2, r3, #12
 8007226:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	f103 0c0c 	add.w	ip, r3, #12
 8007232:	e84c 2100 	strex	r1, r2, [ip]
 8007236:	2900      	cmp	r1, #0
 8007238:	d1f3      	bne.n	8007222 <UART_DMAError+0xa2>
 800723a:	e7ec      	b.n	8007216 <UART_DMAError+0x96>

0800723c <UART_DMAAbortOnError>:
{
 800723c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800723e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8007240:	2300      	movs	r3, #0
 8007242:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007244:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007246:	f7fc faa5 	bl	8003794 <HAL_UART_ErrorCallback>
}
 800724a:	bd08      	pop	{r3, pc}

0800724c <HAL_UARTEx_RxEventCallback>:
}
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop

08007250 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007250:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007252:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007254:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007256:	2b01      	cmp	r3, #1
 8007258:	d002      	beq.n	8007260 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800725a:	f7ff ff8f 	bl	800717c <HAL_UART_RxHalfCpltCallback>
}
 800725e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007260:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007262:	0849      	lsrs	r1, r1, #1
 8007264:	f7ff fff2 	bl	800724c <HAL_UARTEx_RxEventCallback>
}
 8007268:	bd08      	pop	{r3, pc}
 800726a:	bf00      	nop

0800726c <UART_DMAReceiveCplt>:
{
 800726c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800726e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007270:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8007278:	d12b      	bne.n	80072d2 <UART_DMAReceiveCplt+0x66>
    huart->RxXferCount = 0U;
 800727a:	6803      	ldr	r3, [r0, #0]
 800727c:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	f103 020c 	add.w	r2, r3, #12
 8007282:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	f103 0c0c 	add.w	ip, r3, #12
 800728e:	e84c 2100 	strex	r1, r2, [ip]
 8007292:	2900      	cmp	r1, #0
 8007294:	d1f3      	bne.n	800727e <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	f103 0214 	add.w	r2, r3, #20
 800729a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	f103 0c14 	add.w	ip, r3, #20
 80072a6:	e84c 2100 	strex	r1, r2, [ip]
 80072aa:	2900      	cmp	r1, #0
 80072ac:	d1f3      	bne.n	8007296 <UART_DMAReceiveCplt+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	f103 0214 	add.w	r2, r3, #20
 80072b2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	f103 0c14 	add.w	ip, r3, #20
 80072be:	e84c 2100 	strex	r1, r2, [ip]
 80072c2:	2900      	cmp	r1, #0
 80072c4:	d1f3      	bne.n	80072ae <UART_DMAReceiveCplt+0x42>
    huart->RxState = HAL_UART_STATE_READY;
 80072c6:	2220      	movs	r2, #32
 80072c8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072cc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80072ce:	2a01      	cmp	r2, #1
 80072d0:	d005      	beq.n	80072de <UART_DMAReceiveCplt+0x72>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d00f      	beq.n	80072f8 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 80072d8:	f7fc fa98 	bl	800380c <HAL_UART_RxCpltCallback>
}
 80072dc:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	f103 020c 	add.w	r2, r3, #12
 80072e2:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	f103 0c0c 	add.w	ip, r3, #12
 80072ee:	e84c 2100 	strex	r1, r2, [ip]
 80072f2:	2900      	cmp	r1, #0
 80072f4:	d1f3      	bne.n	80072de <UART_DMAReceiveCplt+0x72>
 80072f6:	e7ec      	b.n	80072d2 <UART_DMAReceiveCplt+0x66>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80072fa:	f7ff ffa7 	bl	800724c <HAL_UARTEx_RxEventCallback>
}
 80072fe:	bd08      	pop	{r3, pc}

08007300 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007300:	6883      	ldr	r3, [r0, #8]
 8007302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007306:	d044      	beq.n	8007392 <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007308:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800730a:	2b00      	cmp	r3, #0
 800730c:	d039      	beq.n	8007382 <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800730e:	6803      	ldr	r3, [r0, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007316:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8007318:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800731a:	3301      	adds	r3, #1
 800731c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800731e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007320:	3b01      	subs	r3, #1
 8007322:	b29b      	uxth	r3, r3
 8007324:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007326:	2b00      	cmp	r3, #0
 8007328:	d132      	bne.n	8007390 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800732a:	6802      	ldr	r2, [r0, #0]
 800732c:	68d1      	ldr	r1, [r2, #12]
 800732e:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007332:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007334:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007336:	68d1      	ldr	r1, [r2, #12]
 8007338:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800733c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800733e:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007340:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007344:	f021 0101 	bic.w	r1, r1, #1
 8007348:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800734a:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800734e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007350:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007352:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007354:	d128      	bne.n	80073a8 <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007356:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	f102 030c 	add.w	r3, r2, #12
 800735c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007360:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	f102 0c0c 	add.w	ip, r2, #12
 8007368:	e84c 3100 	strex	r1, r3, [ip]
 800736c:	2900      	cmp	r1, #0
 800736e:	d1f3      	bne.n	8007358 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007370:	6813      	ldr	r3, [r2, #0]
 8007372:	06db      	lsls	r3, r3, #27
 8007374:	d422      	bmi.n	80073bc <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007376:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007378:	f7ff ff68 	bl	800724c <HAL_UARTEx_RxEventCallback>
}
 800737c:	b003      	add	sp, #12
 800737e:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007382:	6903      	ldr	r3, [r0, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1c2      	bne.n	800730e <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007388:	6803      	ldr	r3, [r0, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	7013      	strb	r3, [r2, #0]
 800738e:	e7c3      	b.n	8007318 <UART_Receive_IT.part.0.isra.0+0x18>
 8007390:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007392:	6903      	ldr	r3, [r0, #16]
 8007394:	b96b      	cbnz	r3, 80073b2 <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007396:	6802      	ldr	r2, [r0, #0]
 8007398:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800739a:	6852      	ldr	r2, [r2, #4]
 800739c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073a0:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80073a4:	6283      	str	r3, [r0, #40]	; 0x28
 80073a6:	e7ba      	b.n	800731e <UART_Receive_IT.part.0.isra.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 80073a8:	f7fc fa30 	bl	800380c <HAL_UART_RxCpltCallback>
}
 80073ac:	b003      	add	sp, #12
 80073ae:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073b2:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	7013      	strb	r3, [r2, #0]
 80073ba:	e7ad      	b.n	8007318 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073bc:	2300      	movs	r3, #0
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	6813      	ldr	r3, [r2, #0]
 80073c2:	9301      	str	r3, [sp, #4]
 80073c4:	6853      	ldr	r3, [r2, #4]
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	9b01      	ldr	r3, [sp, #4]
 80073ca:	e7d4      	b.n	8007376 <UART_Receive_IT.part.0.isra.0+0x76>

080073cc <HAL_UART_IRQHandler>:
{
 80073cc:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073ce:	6803      	ldr	r3, [r0, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073d2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073d4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80073d6:	f012 0f0f 	tst.w	r2, #15
{
 80073da:	b083      	sub	sp, #12
 80073dc:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80073de:	d16e      	bne.n	80074be <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073e0:	0695      	lsls	r5, r2, #26
 80073e2:	d502      	bpl.n	80073ea <HAL_UART_IRQHandler+0x1e>
 80073e4:	068d      	lsls	r5, r1, #26
 80073e6:	f100 80b1 	bmi.w	800754c <HAL_UART_IRQHandler+0x180>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80073ec:	2801      	cmp	r0, #1
 80073ee:	d00b      	beq.n	8007408 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073f0:	0610      	lsls	r0, r2, #24
 80073f2:	d502      	bpl.n	80073fa <HAL_UART_IRQHandler+0x2e>
 80073f4:	060d      	lsls	r5, r1, #24
 80073f6:	f100 80b3 	bmi.w	8007560 <HAL_UART_IRQHandler+0x194>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073fa:	0650      	lsls	r0, r2, #25
 80073fc:	d502      	bpl.n	8007404 <HAL_UART_IRQHandler+0x38>
 80073fe:	064a      	lsls	r2, r1, #25
 8007400:	f100 80cd 	bmi.w	800759e <HAL_UART_IRQHandler+0x1d2>
}
 8007404:	b003      	add	sp, #12
 8007406:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007408:	06d5      	lsls	r5, r2, #27
 800740a:	d5f1      	bpl.n	80073f0 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800740c:	06c8      	lsls	r0, r1, #27
 800740e:	d5ef      	bpl.n	80073f0 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007410:	2200      	movs	r2, #0
 8007412:	9201      	str	r2, [sp, #4]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	9201      	str	r2, [sp, #4]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	9201      	str	r2, [sp, #4]
 800741c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741e:	695a      	ldr	r2, [r3, #20]
 8007420:	0655      	lsls	r5, r2, #25
 8007422:	f140 8116 	bpl.w	8007652 <HAL_UART_IRQHandler+0x286>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007426:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007428:	6802      	ldr	r2, [r0, #0]
 800742a:	6852      	ldr	r2, [r2, #4]
 800742c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800742e:	2a00      	cmp	r2, #0
 8007430:	d0e8      	beq.n	8007404 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007432:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007434:	4291      	cmp	r1, r2
 8007436:	d9e5      	bls.n	8007404 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8007438:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800743a:	69c2      	ldr	r2, [r0, #28]
 800743c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007440:	d036      	beq.n	80074b0 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	f103 020c 	add.w	r2, r3, #12
 8007446:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800744a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	f103 050c 	add.w	r5, r3, #12
 8007452:	e845 2100 	strex	r1, r2, [r5]
 8007456:	2900      	cmp	r1, #0
 8007458:	d1f3      	bne.n	8007442 <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	f103 0214 	add.w	r2, r3, #20
 800745e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007462:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	f103 0514 	add.w	r5, r3, #20
 800746a:	e845 2100 	strex	r1, r2, [r5]
 800746e:	2900      	cmp	r1, #0
 8007470:	d1f3      	bne.n	800745a <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	f103 0214 	add.w	r2, r3, #20
 8007476:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800747a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	f103 0514 	add.w	r5, r3, #20
 8007482:	e845 2100 	strex	r1, r2, [r5]
 8007486:	2900      	cmp	r1, #0
 8007488:	d1f3      	bne.n	8007472 <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 800748a:	2220      	movs	r2, #32
 800748c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007490:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	f103 020c 	add.w	r2, r3, #12
 8007496:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	f103 050c 	add.w	r5, r3, #12
 80074a2:	e845 2100 	strex	r1, r2, [r5]
 80074a6:	2900      	cmp	r1, #0
 80074a8:	d1f3      	bne.n	8007492 <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074aa:	f7fc fe81 	bl	80041b0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074ae:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80074b0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80074b2:	1ac9      	subs	r1, r1, r3
 80074b4:	4620      	mov	r0, r4
 80074b6:	b289      	uxth	r1, r1
 80074b8:	f7ff fec8 	bl	800724c <HAL_UARTEx_RxEventCallback>
 80074bc:	e7a2      	b.n	8007404 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074be:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074c2:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80074c6:	4328      	orrs	r0, r5
 80074c8:	d08f      	beq.n	80073ea <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074ca:	07d0      	lsls	r0, r2, #31
 80074cc:	d505      	bpl.n	80074da <HAL_UART_IRQHandler+0x10e>
 80074ce:	05c8      	lsls	r0, r1, #23
 80074d0:	d503      	bpl.n	80074da <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80074d4:	f040 0001 	orr.w	r0, r0, #1
 80074d8:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074da:	0750      	lsls	r0, r2, #29
 80074dc:	d531      	bpl.n	8007542 <HAL_UART_IRQHandler+0x176>
 80074de:	b14d      	cbz	r5, 80074f4 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80074e2:	f040 0002 	orr.w	r0, r0, #2
 80074e6:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074e8:	0790      	lsls	r0, r2, #30
 80074ea:	d503      	bpl.n	80074f4 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074ec:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80074ee:	f040 0004 	orr.w	r0, r0, #4
 80074f2:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074f4:	0710      	lsls	r0, r2, #28
 80074f6:	d507      	bpl.n	8007508 <HAL_UART_IRQHandler+0x13c>
 80074f8:	f001 0020 	and.w	r0, r1, #32
 80074fc:	4328      	orrs	r0, r5
 80074fe:	d003      	beq.n	8007508 <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007500:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007502:	f040 0008 	orr.w	r0, r0, #8
 8007506:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007508:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800750a:	2800      	cmp	r0, #0
 800750c:	f43f af7a 	beq.w	8007404 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007510:	0690      	lsls	r0, r2, #26
 8007512:	d509      	bpl.n	8007528 <HAL_UART_IRQHandler+0x15c>
 8007514:	0689      	lsls	r1, r1, #26
 8007516:	d507      	bpl.n	8007528 <HAL_UART_IRQHandler+0x15c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007518:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800751c:	2a22      	cmp	r2, #34	; 0x22
 800751e:	d103      	bne.n	8007528 <HAL_UART_IRQHandler+0x15c>
 8007520:	4620      	mov	r0, r4
 8007522:	f7ff feed 	bl	8007300 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800752a:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800752c:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007530:	f005 0508 	and.w	r5, r5, #8
 8007534:	4315      	orrs	r5, r2
 8007536:	d13d      	bne.n	80075b4 <HAL_UART_IRQHandler+0x1e8>
        HAL_UART_ErrorCallback(huart);
 8007538:	4620      	mov	r0, r4
 800753a:	f7fc f92b 	bl	8003794 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753e:	6425      	str	r5, [r4, #64]	; 0x40
 8007540:	e760      	b.n	8007404 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007542:	0790      	lsls	r0, r2, #30
 8007544:	d5d6      	bpl.n	80074f4 <HAL_UART_IRQHandler+0x128>
 8007546:	2d00      	cmp	r5, #0
 8007548:	d1d0      	bne.n	80074ec <HAL_UART_IRQHandler+0x120>
 800754a:	e7d3      	b.n	80074f4 <HAL_UART_IRQHandler+0x128>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800754c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007550:	2b22      	cmp	r3, #34	; 0x22
 8007552:	f47f af57 	bne.w	8007404 <HAL_UART_IRQHandler+0x38>
}
 8007556:	b003      	add	sp, #12
 8007558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800755c:	f7ff bed0 	b.w	8007300 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007560:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8007564:	2a21      	cmp	r2, #33	; 0x21
 8007566:	f47f af4d 	bne.w	8007404 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800756a:	68a2      	ldr	r2, [r4, #8]
 800756c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007570:	f000 80a8 	beq.w	80076c4 <HAL_UART_IRQHandler+0x2f8>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007574:	6a22      	ldr	r2, [r4, #32]
 8007576:	1c51      	adds	r1, r2, #1
 8007578:	6221      	str	r1, [r4, #32]
 800757a:	7812      	ldrb	r2, [r2, #0]
 800757c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800757e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007580:	3a01      	subs	r2, #1
 8007582:	b292      	uxth	r2, r2
 8007584:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007586:	2a00      	cmp	r2, #0
 8007588:	f47f af3c 	bne.w	8007404 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007592:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007594:	68da      	ldr	r2, [r3, #12]
 8007596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800759a:	60da      	str	r2, [r3, #12]
 800759c:	e732      	b.n	8007404 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800759e:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80075a0:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a6:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80075a8:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80075aa:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80075ae:	f7fc f8fd 	bl	80037ac <HAL_UART_TxCpltCallback>
    return;
 80075b2:	e727      	b.n	8007404 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	f103 020c 	add.w	r2, r3, #12
 80075b8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	f103 000c 	add.w	r0, r3, #12
 80075c4:	e840 2100 	strex	r1, r2, [r0]
 80075c8:	2900      	cmp	r1, #0
 80075ca:	d1f3      	bne.n	80075b4 <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	f103 0214 	add.w	r2, r3, #20
 80075d0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	f103 0014 	add.w	r0, r3, #20
 80075dc:	e840 2100 	strex	r1, r2, [r0]
 80075e0:	2900      	cmp	r1, #0
 80075e2:	d1f3      	bne.n	80075cc <HAL_UART_IRQHandler+0x200>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80075e6:	2a01      	cmp	r2, #1
 80075e8:	d022      	beq.n	8007630 <HAL_UART_IRQHandler+0x264>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ea:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80075ec:	2120      	movs	r1, #32
 80075ee:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f2:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f4:	695a      	ldr	r2, [r3, #20]
 80075f6:	0652      	lsls	r2, r2, #25
 80075f8:	d527      	bpl.n	800764a <HAL_UART_IRQHandler+0x27e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	f103 0214 	add.w	r2, r3, #20
 80075fe:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	f103 0014 	add.w	r0, r3, #20
 800760a:	e840 2100 	strex	r1, r2, [r0]
 800760e:	2900      	cmp	r1, #0
 8007610:	d1f3      	bne.n	80075fa <HAL_UART_IRQHandler+0x22e>
          if (huart->hdmarx != NULL)
 8007612:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007614:	b1c8      	cbz	r0, 800764a <HAL_UART_IRQHandler+0x27e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007616:	4b31      	ldr	r3, [pc, #196]	; (80076dc <HAL_UART_IRQHandler+0x310>)
 8007618:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800761a:	f7fc fe11 	bl	8004240 <HAL_DMA_Abort_IT>
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f aef0 	beq.w	8007404 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007624:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007626:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8007628:	b003      	add	sp, #12
 800762a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800762e:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	f103 020c 	add.w	r2, r3, #12
 8007634:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007638:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	f103 000c 	add.w	r0, r3, #12
 8007640:	e840 2100 	strex	r1, r2, [r0]
 8007644:	2900      	cmp	r1, #0
 8007646:	d1f3      	bne.n	8007630 <HAL_UART_IRQHandler+0x264>
 8007648:	e7cf      	b.n	80075ea <HAL_UART_IRQHandler+0x21e>
            HAL_UART_ErrorCallback(huart);
 800764a:	4620      	mov	r0, r4
 800764c:	f7fc f8a2 	bl	8003794 <HAL_UART_ErrorCallback>
 8007650:	e6d8      	b.n	8007404 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007652:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8007654:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8007656:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007658:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800765a:	2a00      	cmp	r2, #0
 800765c:	f43f aed2 	beq.w	8007404 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007660:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8007662:	1a51      	subs	r1, r2, r1
 8007664:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007666:	2900      	cmp	r1, #0
 8007668:	f43f aecc 	beq.w	8007404 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	f103 020c 	add.w	r2, r3, #12
 8007670:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007674:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	f103 050c 	add.w	r5, r3, #12
 800767c:	e845 2000 	strex	r0, r2, [r5]
 8007680:	2800      	cmp	r0, #0
 8007682:	d1f3      	bne.n	800766c <HAL_UART_IRQHandler+0x2a0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	f103 0214 	add.w	r2, r3, #20
 8007688:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	f103 0514 	add.w	r5, r3, #20
 8007694:	e845 2000 	strex	r0, r2, [r5]
 8007698:	2800      	cmp	r0, #0
 800769a:	d1f3      	bne.n	8007684 <HAL_UART_IRQHandler+0x2b8>
        huart->RxState = HAL_UART_STATE_READY;
 800769c:	2220      	movs	r2, #32
 800769e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a2:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	f103 020c 	add.w	r2, r3, #12
 80076a8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	f103 050c 	add.w	r5, r3, #12
 80076b4:	e845 2000 	strex	r0, r2, [r5]
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d1f3      	bne.n	80076a4 <HAL_UART_IRQHandler+0x2d8>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076bc:	4620      	mov	r0, r4
 80076be:	f7ff fdc5 	bl	800724c <HAL_UARTEx_RxEventCallback>
 80076c2:	e69f      	b.n	8007404 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c4:	6922      	ldr	r2, [r4, #16]
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	f47f af54 	bne.w	8007574 <HAL_UART_IRQHandler+0x1a8>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076cc:	6a22      	ldr	r2, [r4, #32]
 80076ce:	f832 1b02 	ldrh.w	r1, [r2], #2
 80076d2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80076d6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076d8:	6222      	str	r2, [r4, #32]
 80076da:	e750      	b.n	800757e <HAL_UART_IRQHandler+0x1b2>
 80076dc:	0800723d 	.word	0x0800723d

080076e0 <UART_Start_Receive_DMA>:
{
 80076e0:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076e2:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e4:	2500      	movs	r5, #0
{
 80076e6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e8:	6405      	str	r5, [r0, #64]	; 0x40
  huart->pRxBuffPtr = pData;
 80076ea:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076ec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->RxXferSize = Size;
 80076f0:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80076f4:	4e1f      	ldr	r6, [pc, #124]	; (8007774 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 80076f6:	6505      	str	r5, [r0, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80076f8:	4613      	mov	r3, r2
 80076fa:	460a      	mov	r2, r1
 80076fc:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076fe:	63c6      	str	r6, [r0, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007700:	4e1d      	ldr	r6, [pc, #116]	; (8007778 <UART_Start_Receive_DMA+0x98>)
 8007702:	6406      	str	r6, [r0, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007704:	4e1d      	ldr	r6, [pc, #116]	; (800777c <UART_Start_Receive_DMA+0x9c>)
 8007706:	64c6      	str	r6, [r0, #76]	; 0x4c
{
 8007708:	b082      	sub	sp, #8
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800770a:	3104      	adds	r1, #4
 800770c:	f7fc fd10 	bl	8004130 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	9501      	str	r5, [sp, #4]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	9201      	str	r2, [sp, #4]
 8007718:	6859      	ldr	r1, [r3, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800771a:	6922      	ldr	r2, [r4, #16]
  __HAL_UART_CLEAR_OREFLAG(huart);
 800771c:	9101      	str	r1, [sp, #4]
 800771e:	9901      	ldr	r1, [sp, #4]
  __HAL_UNLOCK(huart);
 8007720:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007724:	b15a      	cbz	r2, 800773e <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	f103 020c 	add.w	r2, r3, #12
 800772a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800772e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	f103 000c 	add.w	r0, r3, #12
 8007736:	e840 2100 	strex	r1, r2, [r0]
 800773a:	2900      	cmp	r1, #0
 800773c:	d1f3      	bne.n	8007726 <UART_Start_Receive_DMA+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	f103 0214 	add.w	r2, r3, #20
 8007742:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007746:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	f103 0014 	add.w	r0, r3, #20
 800774e:	e840 2100 	strex	r1, r2, [r0]
 8007752:	2900      	cmp	r1, #0
 8007754:	d1f3      	bne.n	800773e <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	f103 0214 	add.w	r2, r3, #20
 800775a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800775e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	f103 0114 	add.w	r1, r3, #20
 8007766:	e841 2000 	strex	r0, r2, [r1]
 800776a:	2800      	cmp	r0, #0
 800776c:	d1f3      	bne.n	8007756 <UART_Start_Receive_DMA+0x76>
}
 800776e:	b002      	add	sp, #8
 8007770:	bd70      	pop	{r4, r5, r6, pc}
 8007772:	bf00      	nop
 8007774:	0800726d 	.word	0x0800726d
 8007778:	08007251 	.word	0x08007251
 800777c:	08007181 	.word	0x08007181

08007780 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007780:	f890 c03e 	ldrb.w	ip, [r0, #62]	; 0x3e
 8007784:	f1bc 0f20 	cmp.w	ip, #32
 8007788:	d111      	bne.n	80077ae <HAL_UART_Receive_DMA+0x2e>
{
 800778a:	b430      	push	{r4, r5}
    if ((pData == NULL) || (Size == 0U))
 800778c:	b161      	cbz	r1, 80077a8 <HAL_UART_Receive_DMA+0x28>
 800778e:	b15a      	cbz	r2, 80077a8 <HAL_UART_Receive_DMA+0x28>
    __HAL_LOCK(huart);
 8007790:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8007794:	2c01      	cmp	r4, #1
 8007796:	d00c      	beq.n	80077b2 <HAL_UART_Receive_DMA+0x32>
 8007798:	2401      	movs	r4, #1
 800779a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779e:	2400      	movs	r4, #0
 80077a0:	6304      	str	r4, [r0, #48]	; 0x30
}
 80077a2:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80077a4:	f7ff bf9c 	b.w	80076e0 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 80077a8:	2001      	movs	r0, #1
}
 80077aa:	bc30      	pop	{r4, r5}
 80077ac:	4770      	bx	lr
    return HAL_BUSY;
 80077ae:	2002      	movs	r0, #2
}
 80077b0:	4770      	bx	lr
    return HAL_BUSY;
 80077b2:	2002      	movs	r0, #2
}
 80077b4:	bc30      	pop	{r4, r5}
 80077b6:	4770      	bx	lr

080077b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80077b8:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80077ba:	4903      	ldr	r1, [pc, #12]	; (80077c8 <MX_FATFS_Init+0x10>)
 80077bc:	4803      	ldr	r0, [pc, #12]	; (80077cc <MX_FATFS_Init+0x14>)
 80077be:	f002 f985 	bl	8009acc <FATFS_LinkDriver>
 80077c2:	4b03      	ldr	r3, [pc, #12]	; (80077d0 <MX_FATFS_Init+0x18>)
 80077c4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80077c6:	bd08      	pop	{r3, pc}
 80077c8:	20004114 	.word	0x20004114
 80077cc:	20000010 	.word	0x20000010
 80077d0:	20004118 	.word	0x20004118

080077d4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80077d4:	2000      	movs	r0, #0
 80077d6:	4770      	bx	lr

080077d8 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80077d8:	f7fa b8a8 	b.w	800192c <SD_disk_initialize>

080077dc <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80077dc:	f7fa b9b6 	b.w	8001b4c <SD_disk_status>

080077e0 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80077e0:	f7fa b9be 	b.w	8001b60 <SD_disk_read>

080077e4 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80077e4:	f7fa bb06 	b.w	8001df4 <SD_disk_write>

080077e8 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80077e8:	f7fa bcf8 	b.w	80021dc <SD_disk_ioctl>

080077ec <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80077ec:	4b03      	ldr	r3, [pc, #12]	; (80077fc <disk_status+0x10>)
 80077ee:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80077f2:	4403      	add	r3, r0
 80077f4:	6852      	ldr	r2, [r2, #4]
 80077f6:	7a18      	ldrb	r0, [r3, #8]
 80077f8:	6853      	ldr	r3, [r2, #4]
 80077fa:	4718      	bx	r3
 80077fc:	20004144 	.word	0x20004144

08007800 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8007800:	4b06      	ldr	r3, [pc, #24]	; (800781c <disk_initialize+0x1c>)
 8007802:	5c1a      	ldrb	r2, [r3, r0]
 8007804:	b942      	cbnz	r2, 8007818 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007806:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    disk.is_initialized[pdrv] = 1;
 800780a:	2101      	movs	r1, #1
 800780c:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800780e:	6852      	ldr	r2, [r2, #4]
 8007810:	4418      	add	r0, r3
 8007812:	6813      	ldr	r3, [r2, #0]
 8007814:	7a00      	ldrb	r0, [r0, #8]
 8007816:	4718      	bx	r3
  }
  return stat;
}
 8007818:	2000      	movs	r0, #0
 800781a:	4770      	bx	lr
 800781c:	20004144 	.word	0x20004144

08007820 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007820:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007822:	4c05      	ldr	r4, [pc, #20]	; (8007838 <disk_read+0x18>)
 8007824:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007828:	4404      	add	r4, r0
 800782a:	686d      	ldr	r5, [r5, #4]
 800782c:	7a20      	ldrb	r0, [r4, #8]
 800782e:	68ac      	ldr	r4, [r5, #8]
 8007830:	46a4      	mov	ip, r4
  return res;
}
 8007832:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007834:	4760      	bx	ip
 8007836:	bf00      	nop
 8007838:	20004144 	.word	0x20004144

0800783c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800783c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800783e:	4c05      	ldr	r4, [pc, #20]	; (8007854 <disk_write+0x18>)
 8007840:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007844:	4404      	add	r4, r0
 8007846:	686d      	ldr	r5, [r5, #4]
 8007848:	7a20      	ldrb	r0, [r4, #8]
 800784a:	68ec      	ldr	r4, [r5, #12]
 800784c:	46a4      	mov	ip, r4
  return res;
}
 800784e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007850:	4760      	bx	ip
 8007852:	bf00      	nop
 8007854:	20004144 	.word	0x20004144

08007858 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007858:	4b04      	ldr	r3, [pc, #16]	; (800786c <disk_ioctl+0x14>)
 800785a:	eb03 0c00 	add.w	ip, r3, r0
 800785e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007862:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	4718      	bx	r3
 800786c:	20004144 	.word	0x20004144

08007870 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8007870:	4b2a      	ldr	r3, [pc, #168]	; (800791c <inc_lock+0xac>)
{
 8007872:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	6805      	ldr	r5, [r0, #0]
 8007878:	4295      	cmp	r5, r2
 800787a:	d01d      	beq.n	80078b8 <inc_lock+0x48>
 800787c:	691c      	ldr	r4, [r3, #16]
 800787e:	42ac      	cmp	r4, r5
 8007880:	d007      	beq.n	8007892 <inc_lock+0x22>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007882:	2a00      	cmp	r2, #0
 8007884:	d02e      	beq.n	80078e4 <inc_lock+0x74>
 8007886:	2c00      	cmp	r4, #0
 8007888:	d044      	beq.n	8007914 <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800788a:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800788c:	4620      	mov	r0, r4
 800788e:	bcf0      	pop	{r4, r5, r6, r7}
 8007890:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 8007892:	695e      	ldr	r6, [r3, #20]
 8007894:	6887      	ldr	r7, [r0, #8]
 8007896:	42be      	cmp	r6, r7
 8007898:	d1f3      	bne.n	8007882 <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 800789a:	699e      	ldr	r6, [r3, #24]
 800789c:	6947      	ldr	r7, [r0, #20]
 800789e:	42be      	cmp	r6, r7
 80078a0:	d1ef      	bne.n	8007882 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078a2:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80078a4:	b999      	cbnz	r1, 80078ce <inc_lock+0x5e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80078a6:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 80078aa:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 80078ae:	8989      	ldrh	r1, [r1, #12]
	return i + 1;
 80078b0:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80078b2:	1c4a      	adds	r2, r1, #1
 80078b4:	b292      	uxth	r2, r2
 80078b6:	e028      	b.n	800790a <inc_lock+0x9a>
		if (Files[i].fs == dp->obj.fs &&
 80078b8:	6884      	ldr	r4, [r0, #8]
 80078ba:	685e      	ldr	r6, [r3, #4]
 80078bc:	42a6      	cmp	r6, r4
 80078be:	d1dd      	bne.n	800787c <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 80078c0:	689c      	ldr	r4, [r3, #8]
 80078c2:	6946      	ldr	r6, [r0, #20]
 80078c4:	42a6      	cmp	r6, r4
 80078c6:	d1d9      	bne.n	800787c <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078c8:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80078ca:	2900      	cmp	r1, #0
 80078cc:	d0eb      	beq.n	80078a6 <inc_lock+0x36>
 80078ce:	eb03 1102 	add.w	r1, r3, r2, lsl #4
 80078d2:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 80078d6:	8989      	ldrh	r1, [r1, #12]
 80078d8:	2900      	cmp	r1, #0
 80078da:	d1d6      	bne.n	800788a <inc_lock+0x1a>
	return i + 1;
 80078dc:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80078de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078e2:	e012      	b.n	800790a <inc_lock+0x9a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80078e4:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80078e6:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 80078e8:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 80078ec:	eb03 1102 	add.w	r1, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
 80078f0:	6942      	ldr	r2, [r0, #20]
 80078f2:	6880      	ldr	r0, [r0, #8]
		Files[i].fs = dp->obj.fs;
 80078f4:	f843 500c 	str.w	r5, [r3, ip]
		Files[i].clu = dp->obj.sclust;
 80078f8:	e9c1 0201 	strd	r0, r2, [r1, #4]
		Files[i].ctr = 0;
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007902:	bf14      	ite	ne
 8007904:	f44f 7280 	movne.w	r2, #256	; 0x100
 8007908:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800790a:	4463      	add	r3, ip
}
 800790c:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800790e:	819a      	strh	r2, [r3, #12]
}
 8007910:	bcf0      	pop	{r4, r5, r6, r7}
 8007912:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007914:	2402      	movs	r4, #2
 8007916:	2201      	movs	r2, #1
 8007918:	e7e5      	b.n	80078e6 <inc_lock+0x76>
 800791a:	bf00      	nop
 800791c:	20004120 	.word	0x20004120

08007920 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007920:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007922:	f04f 36ff 	mov.w	r6, #4294967295
 8007926:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007928:	42b1      	cmp	r1, r6
{
 800792a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800792c:	70c3      	strb	r3, [r0, #3]
 800792e:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007930:	d00c      	beq.n	800794c <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007932:	460d      	mov	r5, r1
 8007934:	460a      	mov	r2, r1
 8007936:	7840      	ldrb	r0, [r0, #1]
 8007938:	2301      	movs	r3, #1
 800793a:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800793e:	f7ff ff6f 	bl	8007820 <disk_read>
 8007942:	b110      	cbz	r0, 800794a <check_fs+0x2a>
			fs->winsect = sector;
 8007944:	6326      	str	r6, [r4, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007946:	2004      	movs	r0, #4
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8007948:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800794a:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800794c:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 8007950:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007954:	429a      	cmp	r2, r3
 8007956:	d11a      	bne.n	800798e <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007958:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800795c:	2be9      	cmp	r3, #233	; 0xe9
 800795e:	d007      	beq.n	8007970 <check_fs+0x50>
 8007960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007962:	4a0d      	ldr	r2, [pc, #52]	; (8007998 <check_fs+0x78>)
 8007964:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8007968:	4293      	cmp	r3, r2
 800796a:	d001      	beq.n	8007970 <check_fs+0x50>
	return 2;
 800796c:	2002      	movs	r0, #2
}
 800796e:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 8007970:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007974:	4a09      	ldr	r2, [pc, #36]	; (800799c <check_fs+0x7c>)
 8007976:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800797a:	4293      	cmp	r3, r2
 800797c:	d009      	beq.n	8007992 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 800797e:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <check_fs+0x80>)
 8007984:	4298      	cmp	r0, r3
 8007986:	bf14      	ite	ne
 8007988:	2002      	movne	r0, #2
 800798a:	2000      	moveq	r0, #0
}
 800798c:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800798e:	2003      	movs	r0, #3
}
 8007990:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007992:	2000      	movs	r0, #0
}
 8007994:	bd70      	pop	{r4, r5, r6, pc}
 8007996:	bf00      	nop
 8007998:	009000eb 	.word	0x009000eb
 800799c:	00544146 	.word	0x00544146
 80079a0:	33544146 	.word	0x33544146

080079a4 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80079a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80079a6:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80079a8:	b083      	sub	sp, #12
 80079aa:	4604      	mov	r4, r0
 80079ac:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80079ae:	b973      	cbnz	r3, 80079ce <move_window.part.0+0x2a>
 80079b0:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80079b4:	462a      	mov	r2, r5
 80079b6:	7860      	ldrb	r0, [r4, #1]
 80079b8:	2301      	movs	r3, #1
 80079ba:	f7ff ff31 	bl	8007820 <disk_read>
				res = FR_DISK_ERR;
 80079be:	2800      	cmp	r0, #0
 80079c0:	bf1c      	itt	ne
 80079c2:	2001      	movne	r0, #1
 80079c4:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 80079c8:	6325      	str	r5, [r4, #48]	; 0x30
}
 80079ca:	b003      	add	sp, #12
 80079cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 80079ce:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80079d0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80079d4:	2301      	movs	r3, #1
 80079d6:	7840      	ldrb	r0, [r0, #1]
 80079d8:	9101      	str	r1, [sp, #4]
 80079da:	4632      	mov	r2, r6
 80079dc:	f7ff ff2e 	bl	800783c <disk_write>
 80079e0:	b9b8      	cbnz	r0, 8007a12 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80079e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80079e4:	69e3      	ldr	r3, [r4, #28]
 80079e6:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 80079e8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80079ea:	1ab2      	subs	r2, r6, r2
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d2e1      	bcs.n	80079b4 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079f0:	78a7      	ldrb	r7, [r4, #2]
 80079f2:	2f01      	cmp	r7, #1
 80079f4:	d801      	bhi.n	80079fa <move_window.part.0+0x56>
 80079f6:	e7dd      	b.n	80079b4 <move_window.part.0+0x10>
					wsect += fs->fsize;
 80079f8:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 80079fa:	7860      	ldrb	r0, [r4, #1]
 80079fc:	9101      	str	r1, [sp, #4]
					wsect += fs->fsize;
 80079fe:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007a00:	4632      	mov	r2, r6
 8007a02:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a04:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8007a06:	f7ff ff19 	bl	800783c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a0a:	2f01      	cmp	r7, #1
 8007a0c:	9901      	ldr	r1, [sp, #4]
 8007a0e:	d1f3      	bne.n	80079f8 <move_window.part.0+0x54>
 8007a10:	e7d0      	b.n	80079b4 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8007a12:	2001      	movs	r0, #1
}
 8007a14:	b003      	add	sp, #12
 8007a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a18 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (*path) {	/* If the pointer is not a null */
 8007a1c:	6805      	ldr	r5, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8007a22:	b175      	cbz	r5, 8007a42 <find_volume+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007a24:	782c      	ldrb	r4, [r5, #0]
 8007a26:	2c20      	cmp	r4, #32
 8007a28:	d914      	bls.n	8007a54 <find_volume+0x3c>
 8007a2a:	4623      	mov	r3, r4
 8007a2c:	46ac      	mov	ip, r5
 8007a2e:	e003      	b.n	8007a38 <find_volume+0x20>
 8007a30:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	d90d      	bls.n	8007a54 <find_volume+0x3c>
 8007a38:	2b3a      	cmp	r3, #58	; 0x3a
 8007a3a:	d1f9      	bne.n	8007a30 <find_volume+0x18>
			i = *tp++ - '0';
 8007a3c:	3501      	adds	r5, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007a3e:	45ac      	cmp	ip, r5
 8007a40:	d003      	beq.n	8007a4a <find_volume+0x32>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a42:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8007a44:	4620      	mov	r0, r4
 8007a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007a4a:	2c30      	cmp	r4, #48	; 0x30
 8007a4c:	d1f9      	bne.n	8007a42 <find_volume+0x2a>
					*path = ++tt;
 8007a4e:	f10c 0301 	add.w	r3, ip, #1
 8007a52:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a54:	4bb5      	ldr	r3, [pc, #724]	; (8007d2c <find_volume+0x314>)
 8007a56:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	f000 80f8 	beq.w	8007c4e <find_volume+0x236>
	*rfs = fs;							/* Return pointer to the file system object */
 8007a5e:	600d      	str	r5, [r1, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a60:	782b      	ldrb	r3, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007a62:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a66:	b17b      	cbz	r3, 8007a88 <find_volume+0x70>
		stat = disk_status(fs->drv);
 8007a68:	7868      	ldrb	r0, [r5, #1]
 8007a6a:	f7ff febf 	bl	80077ec <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a6e:	07c1      	lsls	r1, r0, #31
 8007a70:	d40a      	bmi.n	8007a88 <find_volume+0x70>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007a72:	2c00      	cmp	r4, #0
 8007a74:	f000 80e4 	beq.w	8007c40 <find_volume+0x228>
 8007a78:	f010 0404 	ands.w	r4, r0, #4
 8007a7c:	f000 80e0 	beq.w	8007c40 <find_volume+0x228>
				return FR_WRITE_PROTECTED;
 8007a80:	240a      	movs	r4, #10
}
 8007a82:	4620      	mov	r0, r4
 8007a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8007a88:	2000      	movs	r0, #0
 8007a8a:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a8c:	f7ff feb8 	bl	8007800 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007a90:	07c2      	lsls	r2, r0, #31
 8007a92:	f100 80d8 	bmi.w	8007c46 <find_volume+0x22e>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a96:	b10c      	cbz	r4, 8007a9c <find_volume+0x84>
 8007a98:	0743      	lsls	r3, r0, #29
 8007a9a:	d4f1      	bmi.n	8007a80 <find_volume+0x68>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007a9c:	7868      	ldrb	r0, [r5, #1]
 8007a9e:	f105 020c 	add.w	r2, r5, #12
 8007aa2:	2102      	movs	r1, #2
 8007aa4:	f7ff fed8 	bl	8007858 <disk_ioctl>
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f040 80c7 	bne.w	8007c3e <find_volume+0x226>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007ab0:	89ab      	ldrh	r3, [r5, #12]
 8007ab2:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8007ab6:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8007aba:	f200 80c0 	bhi.w	8007c3e <find_volume+0x226>
 8007abe:	1e5a      	subs	r2, r3, #1
 8007ac0:	421a      	tst	r2, r3
 8007ac2:	f040 80bc 	bne.w	8007c3e <find_volume+0x226>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f7ff ff29 	bl	8007920 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007ace:	2802      	cmp	r0, #2
 8007ad0:	f000 808e 	beq.w	8007bf0 <find_volume+0x1d8>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007ad4:	2804      	cmp	r0, #4
 8007ad6:	f000 80b2 	beq.w	8007c3e <find_volume+0x226>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007ada:	2801      	cmp	r0, #1
	bsect = 0;
 8007adc:	bf98      	it	ls
 8007ade:	4626      	movls	r6, r4
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007ae0:	f200 80b7 	bhi.w	8007c52 <find_volume+0x23a>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ae4:	89a8      	ldrh	r0, [r5, #12]
 8007ae6:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 8007aea:	4283      	cmp	r3, r0
 8007aec:	f040 80b1 	bne.w	8007c52 <find_volume+0x23a>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007af0:	f8b5 c04a 	ldrh.w	ip, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007af4:	f1bc 0f00 	cmp.w	ip, #0
 8007af8:	d101      	bne.n	8007afe <find_volume+0xe6>
	rv = rv << 8 | ptr[0];
 8007afa:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007afe:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 8007b02:	f8c5 c01c 	str.w	ip, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007b06:	1e5a      	subs	r2, r3, #1
 8007b08:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007b0a:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007b0c:	f200 80a1 	bhi.w	8007c52 <find_volume+0x23a>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007b10:	f895 8041 	ldrb.w	r8, [r5, #65]	; 0x41
 8007b14:	fa1f f288 	uxth.w	r2, r8
 8007b18:	816a      	strh	r2, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007b1a:	2a00      	cmp	r2, #0
 8007b1c:	f000 8099 	beq.w	8007c52 <find_volume+0x23a>
 8007b20:	f108 32ff 	add.w	r2, r8, #4294967295
 8007b24:	ea12 0f08 	tst.w	r2, r8
 8007b28:	f040 8093 	bne.w	8007c52 <find_volume+0x23a>
	rv = ptr[1];
 8007b2c:	f8b5 e045 	ldrh.w	lr, [r5, #69]	; 0x45
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007b30:	f8a5 e008 	strh.w	lr, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007b34:	0942      	lsrs	r2, r0, #5
 8007b36:	fbbe faf2 	udiv	sl, lr, r2
 8007b3a:	fb02 e21a 	mls	r2, r2, sl, lr
 8007b3e:	b292      	uxth	r2, r2
 8007b40:	2a00      	cmp	r2, #0
 8007b42:	f040 8086 	bne.w	8007c52 <find_volume+0x23a>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007b46:	f8b5 9047 	ldrh.w	r9, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007b4a:	f1b9 0f00 	cmp.w	r9, #0
 8007b4e:	d101      	bne.n	8007b54 <find_volume+0x13c>
	rv = rv << 8 | ptr[0];
 8007b50:	f8d5 9054 	ldr.w	r9, [r5, #84]	; 0x54
	rv = ptr[1];
 8007b54:	f8b5 1042 	ldrh.w	r1, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007b58:	2900      	cmp	r1, #0
 8007b5a:	d07a      	beq.n	8007c52 <find_volume+0x23a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007b5c:	fb0c f703 	mul.w	r7, ip, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007b60:	eb0a 0201 	add.w	r2, sl, r1
 8007b64:	443a      	add	r2, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007b66:	4591      	cmp	r9, r2
 8007b68:	d373      	bcc.n	8007c52 <find_volume+0x23a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007b6a:	eba9 0902 	sub.w	r9, r9, r2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007b6e:	45c1      	cmp	r9, r8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007b70:	fbb9 f3f8 	udiv	r3, r9, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007b74:	d36d      	bcc.n	8007c52 <find_volume+0x23a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007b76:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 8007b7a:	4543      	cmp	r3, r8
 8007b7c:	f200 8087 	bhi.w	8007c8e <find_volume+0x276>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007b80:	f640 78f5 	movw	r8, #4085	; 0xff5
 8007b84:	4543      	cmp	r3, r8
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007b86:	4431      	add	r1, r6
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007b88:	f103 0302 	add.w	r3, r3, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8007b8c:	4432      	add	r2, r6
		fs->volbase = bsect;							/* Volume start sector */
 8007b8e:	622e      	str	r6, [r5, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007b90:	62ea      	str	r2, [r5, #44]	; 0x2c
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007b92:	61ab      	str	r3, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007b94:	6269      	str	r1, [r5, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007b96:	f200 809b 	bhi.w	8007cd0 <find_volume+0x2b8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007b9a:	f1be 0f00 	cmp.w	lr, #0
 8007b9e:	d058      	beq.n	8007c52 <find_volume+0x23a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007ba0:	4439      	add	r1, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007ba2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007ba6:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007baa:	62a9      	str	r1, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007bac:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8007bb0:	2101      	movs	r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007bb2:	1e42      	subs	r2, r0, #1
 8007bb4:	4413      	add	r3, r2
 8007bb6:	fbb3 f0f0 	udiv	r0, r3, r0
 8007bba:	4584      	cmp	ip, r0
 8007bbc:	d349      	bcc.n	8007c52 <find_volume+0x23a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc2:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 8007bc6:	2280      	movs	r2, #128	; 0x80
 8007bc8:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8007bca:	4859      	ldr	r0, [pc, #356]	; (8007d30 <find_volume+0x318>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007bcc:	4a59      	ldr	r2, [pc, #356]	; (8007d34 <find_volume+0x31c>)
	fs->id = ++Fsid;		/* File system mount ID */
 8007bce:	8803      	ldrh	r3, [r0, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 8007bd0:	7029      	strb	r1, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	8003      	strh	r3, [r0, #0]
 8007bd8:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007bda:	6813      	ldr	r3, [r2, #0]
 8007bdc:	42ab      	cmp	r3, r5
 8007bde:	bf04      	itt	eq
 8007be0:	2300      	moveq	r3, #0
 8007be2:	6013      	streq	r3, [r2, #0]
 8007be4:	6913      	ldr	r3, [r2, #16]
 8007be6:	429d      	cmp	r5, r3
 8007be8:	d12a      	bne.n	8007c40 <find_volume+0x228>
 8007bea:	2300      	movs	r3, #0
 8007bec:	6113      	str	r3, [r2, #16]
 8007bee:	e027      	b.n	8007c40 <find_volume+0x228>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007bf0:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d048      	beq.n	8007c8a <find_volume+0x272>
	rv = rv << 8 | ptr[0];
 8007bf8:	f8d5 91fa 	ldr.w	r9, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007bfc:	f895 3206 	ldrb.w	r3, [r5, #518]	; 0x206
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d040      	beq.n	8007c86 <find_volume+0x26e>
	rv = rv << 8 | ptr[0];
 8007c04:	f8d5 820a 	ldr.w	r8, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007c08:	f895 7216 	ldrb.w	r7, [r5, #534]	; 0x216
 8007c0c:	b10f      	cbz	r7, 8007c12 <find_volume+0x1fa>
	rv = rv << 8 | ptr[0];
 8007c0e:	f8d5 721a 	ldr.w	r7, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007c12:	f895 6226 	ldrb.w	r6, [r5, #550]	; 0x226
 8007c16:	b10e      	cbz	r6, 8007c1c <find_volume+0x204>
	rv = rv << 8 | ptr[0];
 8007c18:	f8d5 622a 	ldr.w	r6, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c1c:	f1b9 0f00 	cmp.w	r9, #0
 8007c20:	d121      	bne.n	8007c66 <find_volume+0x24e>
 8007c22:	f1b8 0f00 	cmp.w	r8, #0
 8007c26:	d116      	bne.n	8007c56 <find_volume+0x23e>
 8007c28:	bb2f      	cbnz	r7, 8007c76 <find_volume+0x25e>
 8007c2a:	b196      	cbz	r6, 8007c52 <find_volume+0x23a>
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f7ff fe76 	bl	8007920 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007c34:	2801      	cmp	r0, #1
 8007c36:	f67f af55 	bls.w	8007ae4 <find_volume+0xcc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c3a:	2804      	cmp	r0, #4
 8007c3c:	d109      	bne.n	8007c52 <find_volume+0x23a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007c3e:	2401      	movs	r4, #1
}
 8007c40:	4620      	mov	r0, r4
 8007c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007c46:	2403      	movs	r4, #3
}
 8007c48:	4620      	mov	r0, r4
 8007c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c4e:	240c      	movs	r4, #12
 8007c50:	e7f6      	b.n	8007c40 <find_volume+0x228>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007c52:	240d      	movs	r4, #13
 8007c54:	e7f4      	b.n	8007c40 <find_volume+0x228>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c56:	4641      	mov	r1, r8
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f7ff fe61 	bl	8007920 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007c5e:	2801      	cmp	r0, #1
 8007c60:	d8e2      	bhi.n	8007c28 <find_volume+0x210>
 8007c62:	4646      	mov	r6, r8
 8007c64:	e73e      	b.n	8007ae4 <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c66:	4649      	mov	r1, r9
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f7ff fe59 	bl	8007920 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007c6e:	2801      	cmp	r0, #1
 8007c70:	d8d7      	bhi.n	8007c22 <find_volume+0x20a>
 8007c72:	464e      	mov	r6, r9
 8007c74:	e736      	b.n	8007ae4 <find_volume+0xcc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c76:	4639      	mov	r1, r7
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f7ff fe51 	bl	8007920 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007c7e:	2801      	cmp	r0, #1
 8007c80:	d8d3      	bhi.n	8007c2a <find_volume+0x212>
 8007c82:	463e      	mov	r6, r7
 8007c84:	e72e      	b.n	8007ae4 <find_volume+0xcc>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007c86:	4698      	mov	r8, r3
 8007c88:	e7be      	b.n	8007c08 <find_volume+0x1f0>
 8007c8a:	46a1      	mov	r9, r4
 8007c8c:	e7b6      	b.n	8007bfc <find_volume+0x1e4>
		fs->database = bsect + sysect;					/* Data start sector */
 8007c8e:	4432      	add	r2, r6
 8007c90:	62ea      	str	r2, [r5, #44]	; 0x2c
	rv = rv << 8 | ptr[0];
 8007c92:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
		fs->volbase = bsect;							/* Volume start sector */
 8007c96:	622e      	str	r6, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007c98:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007c9a:	4431      	add	r1, r6
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007c9c:	ea52 020e 	orrs.w	r2, r2, lr
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007ca0:	6269      	str	r1, [r5, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007ca2:	61ab      	str	r3, [r5, #24]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ca4:	d1d5      	bne.n	8007c52 <find_volume+0x23a>
	rv = rv << 8 | ptr[0];
 8007ca6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007ca8:	62aa      	str	r2, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007caa:	1e42      	subs	r2, r0, #1
 8007cac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cb0:	fbb3 f0f0 	udiv	r0, r3, r0
 8007cb4:	4584      	cmp	ip, r0
 8007cb6:	d3cc      	bcc.n	8007c52 <find_volume+0x23a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cbc:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007cc0:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
		fs->fsi_flag = 0x80;
 8007cc4:	2280      	movs	r2, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007cc6:	2b01      	cmp	r3, #1
		fs->fsi_flag = 0x80;
 8007cc8:	712a      	strb	r2, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007cca:	d009      	beq.n	8007ce0 <find_volume+0x2c8>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007ccc:	2103      	movs	r1, #3
 8007cce:	e77c      	b.n	8007bca <find_volume+0x1b2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007cd0:	f1be 0f00 	cmp.w	lr, #0
 8007cd4:	d0bd      	beq.n	8007c52 <find_volume+0x23a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007cd6:	4439      	add	r1, r7
 8007cd8:	62a9      	str	r1, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	2102      	movs	r1, #2
 8007cde:	e768      	b.n	8007bb2 <find_volume+0x19a>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ce0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			&& move_window(fs, bsect + 1) == FR_OK)
 8007ce2:	1c71      	adds	r1, r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ce4:	4299      	cmp	r1, r3
 8007ce6:	d004      	beq.n	8007cf2 <find_volume+0x2da>
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f7ff fe5b 	bl	80079a4 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d1ec      	bne.n	8007ccc <find_volume+0x2b4>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007cf2:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
 8007cf6:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 8007cfa:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007cfc:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 8007cfe:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007d00:	d1e4      	bne.n	8007ccc <find_volume+0x2b4>
	rv = rv << 8 | ptr[0];
 8007d02:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007d04:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <find_volume+0x320>)
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d1e0      	bne.n	8007ccc <find_volume+0x2b4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007d0a:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8007d0e:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007d12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007d16:	3320      	adds	r3, #32
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d1d7      	bne.n	8007ccc <find_volume+0x2b4>
	rv = rv << 8 | ptr[0];
 8007d1c:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007d20:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 8007d24:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8007d28:	e7d0      	b.n	8007ccc <find_volume+0x2b4>
 8007d2a:	bf00      	nop
 8007d2c:	2000411c 	.word	0x2000411c
 8007d30:	20004140 	.word	0x20004140
 8007d34:	20004120 	.word	0x20004120
 8007d38:	41615252 	.word	0x41615252

08007d3c <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8007d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 8007d40:	7803      	ldrb	r3, [r0, #0]
 8007d42:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8007d44:	4604      	mov	r4, r0
 8007d46:	460d      	mov	r5, r1
 8007d48:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8007d4a:	d006      	beq.n	8007d5a <put_fat.part.0+0x1e>
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d05f      	beq.n	8007e10 <put_fat.part.0+0xd4>
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d021      	beq.n	8007d98 <put_fat.part.0+0x5c>
 8007d54:	2002      	movs	r0, #2
}
 8007d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007d5a:	8987      	ldrh	r7, [r0, #12]
 8007d5c:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d5e:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007d60:	0879      	lsrs	r1, r7, #1
 8007d62:	fbb5 f1f1 	udiv	r1, r5, r1
 8007d66:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d68:	4299      	cmp	r1, r3
 8007d6a:	d004      	beq.n	8007d76 <put_fat.part.0+0x3a>
 8007d6c:	f7ff fe1a 	bl	80079a4 <move_window.part.0>
			if (res != FR_OK) break;
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d1f0      	bne.n	8007d56 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d74:	89a7      	ldrh	r7, [r4, #12]
 8007d76:	006d      	lsls	r5, r5, #1
 8007d78:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8007d7c:	fbb5 f2f7 	udiv	r2, r5, r7
 8007d80:	fb07 5512 	mls	r5, r7, r2, r5
 8007d84:	1959      	adds	r1, r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8007d86:	555e      	strb	r6, [r3, r5]
 8007d88:	f3c6 2607 	ubfx	r6, r6, #8, #8
			fs->wflag = 1;
 8007d8c:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8007d8e:	704e      	strb	r6, [r1, #1]
			fs->wflag = 1;
 8007d90:	70e3      	strb	r3, [r4, #3]
			break;
 8007d92:	2000      	movs	r0, #0
}
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bc = (UINT)clst; bc += bc / 2;
 8007d98:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d9c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d9e:	6b02      	ldr	r2, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007da0:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8007da4:	fbb7 f3fc 	udiv	r3, r7, ip
 8007da8:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007daa:	4291      	cmp	r1, r2
 8007dac:	d007      	beq.n	8007dbe <put_fat.part.0+0x82>
 8007dae:	f7ff fdf9 	bl	80079a4 <move_window.part.0>
			if (res != FR_OK) break;
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d1cf      	bne.n	8007d56 <put_fat.part.0+0x1a>
			p = fs->win + bc++ % SS(fs);
 8007db6:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 8007dba:	fbb7 f3fc 	udiv	r3, r7, ip
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007dbe:	07ea      	lsls	r2, r5, #31
			p = fs->win + bc++ % SS(fs);
 8007dc0:	fb0c 7313 	mls	r3, ip, r3, r7
 8007dc4:	f104 0834 	add.w	r8, r4, #52	; 0x34
 8007dc8:	f107 0701 	add.w	r7, r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007dcc:	d548      	bpl.n	8007e60 <put_fat.part.0+0x124>
 8007dce:	f818 2003 	ldrb.w	r2, [r8, r3]
 8007dd2:	f002 020f 	and.w	r2, r2, #15
 8007dd6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
 8007dda:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007dde:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007de0:	6b22      	ldr	r2, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007de2:	89a0      	ldrh	r0, [r4, #12]
			fs->wflag = 1;
 8007de4:	2301      	movs	r3, #1
 8007de6:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007de8:	fbb7 f3f0 	udiv	r3, r7, r0
 8007dec:	4419      	add	r1, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007dee:	4291      	cmp	r1, r2
 8007df0:	d05b      	beq.n	8007eaa <put_fat.part.0+0x16e>
 8007df2:	4620      	mov	r0, r4
 8007df4:	f7ff fdd6 	bl	80079a4 <move_window.part.0>
			if (res != FR_OK) break;
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d1ac      	bne.n	8007d56 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8007dfc:	89a2      	ldrh	r2, [r4, #12]
 8007dfe:	fbb7 f3f2 	udiv	r3, r7, r2
 8007e02:	fb02 7713 	mls	r7, r2, r3, r7
 8007e06:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007e0a:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8007e0e:	e046      	b.n	8007e9e <put_fat.part.0+0x162>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e10:	8987      	ldrh	r7, [r0, #12]
 8007e12:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e14:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e16:	08b9      	lsrs	r1, r7, #2
 8007e18:	fbb5 f1f1 	udiv	r1, r5, r1
 8007e1c:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d004      	beq.n	8007e2c <put_fat.part.0+0xf0>
 8007e22:	f7ff fdbf 	bl	80079a4 <move_window.part.0>
			if (res != FR_OK) break;
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d195      	bne.n	8007d56 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e2a:	89a7      	ldrh	r7, [r4, #12]
 8007e2c:	00ad      	lsls	r5, r5, #2
 8007e2e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007e32:	fbb5 f3f7 	udiv	r3, r5, r7
 8007e36:	fb07 5513 	mls	r5, r7, r3, r5
 8007e3a:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[0];
 8007e3e:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e40:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e44:	1941      	adds	r1, r0, r5
 8007e46:	431e      	orrs	r6, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8007e48:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007e4a:	5546      	strb	r6, [r0, r5]
 8007e4c:	0a32      	lsrs	r2, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007e4e:	708b      	strb	r3, [r1, #2]
 8007e50:	0e36      	lsrs	r6, r6, #24
			fs->wflag = 1;
 8007e52:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8007e54:	704a      	strb	r2, [r1, #1]
	*ptr++ = (BYTE)val;
 8007e56:	70ce      	strb	r6, [r1, #3]
			fs->wflag = 1;
 8007e58:	70e3      	strb	r3, [r4, #3]
			break;
 8007e5a:	2000      	movs	r0, #0
}
 8007e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007e60:	f808 6003 	strb.w	r6, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e64:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e66:	6b20      	ldr	r0, [r4, #48]	; 0x30
			fs->wflag = 1;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e6c:	89a3      	ldrh	r3, [r4, #12]
 8007e6e:	fbb7 f2f3 	udiv	r2, r7, r3
 8007e72:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e74:	4288      	cmp	r0, r1
 8007e76:	d008      	beq.n	8007e8a <put_fat.part.0+0x14e>
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f7ff fd93 	bl	80079a4 <move_window.part.0>
			if (res != FR_OK) break;
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	f47f af69 	bne.w	8007d56 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8007e84:	89a2      	ldrh	r2, [r4, #12]
 8007e86:	fbb7 f3f2 	udiv	r3, r7, r2
 8007e8a:	fb02 7713 	mls	r7, r2, r3, r7
 8007e8e:	eb08 0307 	add.w	r3, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007e92:	f3c6 2203 	ubfx	r2, r6, #8, #4
 8007e96:	7819      	ldrb	r1, [r3, #0]
 8007e98:	f021 060f 	bic.w	r6, r1, #15
 8007e9c:	4316      	orrs	r6, r2
			fs->wflag = 1;
 8007e9e:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007ea0:	701e      	strb	r6, [r3, #0]
			fs->wflag = 1;
 8007ea2:	70e2      	strb	r2, [r4, #3]
			break;
 8007ea4:	2000      	movs	r0, #0
}
 8007ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p = fs->win + bc % SS(fs);
 8007eaa:	fb00 7313 	mls	r3, r0, r3, r7
 8007eae:	4443      	add	r3, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007eb0:	e7ab      	b.n	8007e0a <put_fat.part.0+0xce>
 8007eb2:	bf00      	nop

08007eb4 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007eb4:	2901      	cmp	r1, #1
 8007eb6:	d90e      	bls.n	8007ed6 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007eba:	6983      	ldr	r3, [r0, #24]
 8007ebc:	4299      	cmp	r1, r3
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	d206      	bcs.n	8007ed2 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 8007ec4:	7803      	ldrb	r3, [r0, #0]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d056      	beq.n	8007f78 <get_fat.isra.0+0xc4>
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d03d      	beq.n	8007f4a <get_fat.isra.0+0x96>
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d003      	beq.n	8007eda <get_fat.isra.0+0x26>
 8007ed2:	2001      	movs	r0, #1
}
 8007ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8007ed6:	2001      	movs	r0, #1
}
 8007ed8:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007eda:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007edc:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ee0:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
			bc = (UINT)clst; bc += bc / 2;
 8007ee4:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ee8:	fbb7 f3fc 	udiv	r3, r7, ip
 8007eec:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007eee:	4571      	cmp	r1, lr
 8007ef0:	d00a      	beq.n	8007f08 <get_fat.isra.0+0x54>
 8007ef2:	f7ff fd57 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d153      	bne.n	8007fa2 <get_fat.isra.0+0xee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007efa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007efc:	f8d5 e030 	ldr.w	lr, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8007f00:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8007f04:	fbb7 f3fc 	udiv	r3, r7, ip
 8007f08:	fb0c 7313 	mls	r3, ip, r3, r7
 8007f0c:	442b      	add	r3, r5
 8007f0e:	3701      	adds	r7, #1
 8007f10:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f14:	fbb7 f3fc 	udiv	r3, r7, ip
 8007f18:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f1a:	4571      	cmp	r1, lr
 8007f1c:	d008      	beq.n	8007f30 <get_fat.isra.0+0x7c>
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f7ff fd40 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d13c      	bne.n	8007fa2 <get_fat.isra.0+0xee>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007f28:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8007f2c:	fbb7 f3fc 	udiv	r3, r7, ip
 8007f30:	fb0c 7713 	mls	r7, ip, r3, r7
 8007f34:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007f36:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8007f38:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8007f3c:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007f40:	bf4c      	ite	mi
 8007f42:	0900      	lsrmi	r0, r0, #4
 8007f44:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8007f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f4a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007f4c:	8983      	ldrh	r3, [r0, #12]
 8007f4e:	0899      	lsrs	r1, r3, #2
 8007f50:	fbb4 f1f1 	udiv	r1, r4, r1
 8007f54:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f56:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007f58:	4291      	cmp	r1, r2
 8007f5a:	d003      	beq.n	8007f64 <get_fat.isra.0+0xb0>
 8007f5c:	f7ff fd22 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f60:	b9f8      	cbnz	r0, 8007fa2 <get_fat.isra.0+0xee>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007f62:	89ab      	ldrh	r3, [r5, #12]
 8007f64:	00a4      	lsls	r4, r4, #2
 8007f66:	fbb4 f2f3 	udiv	r2, r4, r3
 8007f6a:	fb03 4412 	mls	r4, r3, r2, r4
	rv = rv << 8 | ptr[0];
 8007f6e:	442c      	add	r4, r5
 8007f70:	6b60      	ldr	r0, [r4, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007f72:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8007f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007f78:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007f7a:	8983      	ldrh	r3, [r0, #12]
 8007f7c:	0859      	lsrs	r1, r3, #1
 8007f7e:	fbb4 f1f1 	udiv	r1, r4, r1
 8007f82:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f84:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007f86:	4291      	cmp	r1, r2
 8007f88:	d003      	beq.n	8007f92 <get_fat.isra.0+0xde>
 8007f8a:	f7ff fd0b 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007f8e:	b940      	cbnz	r0, 8007fa2 <get_fat.isra.0+0xee>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007f90:	89ab      	ldrh	r3, [r5, #12]
 8007f92:	0064      	lsls	r4, r4, #1
 8007f94:	fbb4 f2f3 	udiv	r2, r4, r3
 8007f98:	fb03 4412 	mls	r4, r3, r2, r4
 8007f9c:	4425      	add	r5, r4
 8007f9e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 8007fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007fa2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fa8 <dir_read.constprop.0>:
FRESULT dir_read (
 8007fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while (dp->sect) {
 8007fac:	f8d0 801c 	ldr.w	r8, [r0, #28]
	FATFS *fs = dp->obj.fs;
 8007fb0:	6806      	ldr	r6, [r0, #0]
FRESULT dir_read (
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	4604      	mov	r4, r0
	while (dp->sect) {
 8007fb6:	f1b8 0f00 	cmp.w	r8, #0
 8007fba:	d05d      	beq.n	8008078 <dir_read.constprop.0+0xd0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007fbc:	f106 0734 	add.w	r7, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007fc0:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8007fc2:	4545      	cmp	r5, r8
 8007fc4:	d014      	beq.n	8007ff0 <dir_read.constprop.0+0x48>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007fc6:	78f3      	ldrb	r3, [r6, #3]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d15c      	bne.n	8008086 <dir_read.constprop.0+0xde>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007fcc:	7870      	ldrb	r0, [r6, #1]
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7ff fc24 	bl	8007820 <disk_read>
 8007fd8:	b140      	cbz	r0, 8007fec <dir_read.constprop.0+0x44>
			fs->winsect = sector;
 8007fda:	f04f 33ff 	mov.w	r3, #4294967295
 8007fde:	6333      	str	r3, [r6, #48]	; 0x30
				res = FR_DISK_ERR;
 8007fe0:	2001      	movs	r0, #1
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	61e3      	str	r3, [r4, #28]
}
 8007fe6:	b003      	add	sp, #12
 8007fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			fs->winsect = sector;
 8007fec:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007ff0:	6a23      	ldr	r3, [r4, #32]
 8007ff2:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 8007ff4:	2a00      	cmp	r2, #0
 8007ff6:	d03f      	beq.n	8008078 <dir_read.constprop.0+0xd0>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007ff8:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007ffa:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008000:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8008002:	d007      	beq.n	8008014 <dir_read.constprop.0+0x6c>
 8008004:	2a2e      	cmp	r2, #46	; 0x2e
 8008006:	d005      	beq.n	8008014 <dir_read.constprop.0+0x6c>
 8008008:	2b0f      	cmp	r3, #15
 800800a:	d003      	beq.n	8008014 <dir_read.constprop.0+0x6c>
 800800c:	f023 0320 	bic.w	r3, r3, #32
 8008010:	2b08      	cmp	r3, #8
 8008012:	d122      	bne.n	800805a <dir_read.constprop.0+0xb2>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008014:	6963      	ldr	r3, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008016:	f8d4 801c 	ldr.w	r8, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800801a:	3320      	adds	r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800801c:	f1b8 0f00 	cmp.w	r8, #0
 8008020:	d02a      	beq.n	8008078 <dir_read.constprop.0+0xd0>
 8008022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008026:	d227      	bcs.n	8008078 <dir_read.constprop.0+0xd0>
	FATFS *fs = dp->obj.fs;
 8008028:	6825      	ldr	r5, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800802a:	89aa      	ldrh	r2, [r5, #12]
 800802c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008030:	fb02 3210 	mls	r2, r2, r0, r3
 8008034:	bb12      	cbnz	r2, 800807c <dir_read.constprop.0+0xd4>
		if (!dp->clust) {		/* Static table */
 8008036:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8008038:	f108 0801 	add.w	r8, r8, #1
 800803c:	f8c4 801c 	str.w	r8, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8008040:	2900      	cmp	r1, #0
 8008042:	d142      	bne.n	80080ca <dir_read.constprop.0+0x122>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008044:	892a      	ldrh	r2, [r5, #8]
 8008046:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800804a:	d915      	bls.n	8008078 <dir_read.constprop.0+0xd0>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800804c:	3534      	adds	r5, #52	; 0x34
 800804e:	440d      	add	r5, r1
	dp->dptr = ofs;						/* Current entry */
 8008050:	6163      	str	r3, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008052:	6225      	str	r5, [r4, #32]
	while (dp->sect) {
 8008054:	f1b8 0f00 	cmp.w	r8, #0
 8008058:	d1b2      	bne.n	8007fc0 <dir_read.constprop.0+0x18>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800805a:	2000      	movs	r0, #0
}
 800805c:	b003      	add	sp, #12
 800805e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008062:	4628      	mov	r0, r5
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	f7ff ff25 	bl	8007eb4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800806a:	2801      	cmp	r0, #1
 800806c:	d94c      	bls.n	8008108 <dir_read.constprop.0+0x160>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800806e:	1c43      	adds	r3, r0, #1
 8008070:	d0b6      	beq.n	8007fe0 <dir_read.constprop.0+0x38>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008072:	69aa      	ldr	r2, [r5, #24]
 8008074:	4290      	cmp	r0, r2
 8008076:	d331      	bcc.n	80080dc <dir_read.constprop.0+0x134>
	FRESULT res = FR_NO_FILE;
 8008078:	2004      	movs	r0, #4
 800807a:	e7b2      	b.n	8007fe2 <dir_read.constprop.0+0x3a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800807c:	3534      	adds	r5, #52	; 0x34
 800807e:	4415      	add	r5, r2
	dp->dptr = ofs;						/* Current entry */
 8008080:	6163      	str	r3, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008082:	6225      	str	r5, [r4, #32]
	while (dp->sect) {
 8008084:	e79c      	b.n	8007fc0 <dir_read.constprop.0+0x18>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008086:	7870      	ldrb	r0, [r6, #1]
 8008088:	2301      	movs	r3, #1
 800808a:	462a      	mov	r2, r5
 800808c:	4639      	mov	r1, r7
 800808e:	f7ff fbd5 	bl	800783c <disk_write>
 8008092:	2800      	cmp	r0, #0
 8008094:	d1a4      	bne.n	8007fe0 <dir_read.constprop.0+0x38>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008096:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008098:	69f3      	ldr	r3, [r6, #28]
			fs->wflag = 0;
 800809a:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800809c:	1aaa      	subs	r2, r5, r2
 800809e:	429a      	cmp	r2, r3
 80080a0:	d294      	bcs.n	8007fcc <dir_read.constprop.0+0x24>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080a2:	f896 9002 	ldrb.w	r9, [r6, #2]
 80080a6:	f1b9 0f01 	cmp.w	r9, #1
 80080aa:	d801      	bhi.n	80080b0 <dir_read.constprop.0+0x108>
 80080ac:	e78e      	b.n	8007fcc <dir_read.constprop.0+0x24>
					wsect += fs->fsize;
 80080ae:	69f3      	ldr	r3, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 80080b0:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80080b2:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80080b4:	462a      	mov	r2, r5
 80080b6:	2301      	movs	r3, #1
 80080b8:	4639      	mov	r1, r7
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080ba:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80080be:	f7ff fbbd 	bl	800783c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080c2:	f1b9 0f01 	cmp.w	r9, #1
 80080c6:	d1f2      	bne.n	80080ae <dir_read.constprop.0+0x106>
 80080c8:	e780      	b.n	8007fcc <dir_read.constprop.0+0x24>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80080ca:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 80080ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80080d2:	ea1c 0900 	ands.w	r9, ip, r0
 80080d6:	d0c4      	beq.n	8008062 <dir_read.constprop.0+0xba>
 80080d8:	4611      	mov	r1, r2
 80080da:	e7b7      	b.n	800804c <dir_read.constprop.0+0xa4>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80080dc:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80080de:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80080e0:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80080e2:	4290      	cmp	r0, r2
	return clst * fs->csize + fs->database;
 80080e4:	bf3c      	itt	cc
 80080e6:	6aea      	ldrcc	r2, [r5, #44]	; 0x2c
 80080e8:	f8b5 800a 	ldrhcc.w	r8, [r5, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80080ec:	9b01      	ldr	r3, [sp, #4]
	return clst * fs->csize + fs->database;
 80080ee:	bf38      	it	cc
 80080f0:	fb00 2808 	mlacc	r8, r0, r8, r2
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80080f4:	89aa      	ldrh	r2, [r5, #12]
 80080f6:	fbb3 f1f2 	udiv	r1, r3, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80080fa:	bf28      	it	cs
 80080fc:	46c8      	movcs	r8, r9
				dp->sect = clust2sect(fs, clst);
 80080fe:	f8c4 801c 	str.w	r8, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008102:	fb02 3111 	mls	r1, r2, r1, r3
 8008106:	e7a1      	b.n	800804c <dir_read.constprop.0+0xa4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008108:	2002      	movs	r0, #2
 800810a:	e76a      	b.n	8007fe2 <dir_read.constprop.0+0x3a>

0800810c <sync_fs>:
{
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800810e:	78c3      	ldrb	r3, [r0, #3]
{
 8008110:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008112:	b95b      	cbnz	r3, 800812c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008114:	7823      	ldrb	r3, [r4, #0]
 8008116:	2b03      	cmp	r3, #3
 8008118:	d029      	beq.n	800816e <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800811a:	2200      	movs	r2, #0
 800811c:	7860      	ldrb	r0, [r4, #1]
 800811e:	4611      	mov	r1, r2
 8008120:	f7ff fb9a 	bl	8007858 <disk_ioctl>
			res = FR_DISK_ERR;
 8008124:	3800      	subs	r0, #0
 8008126:	bf18      	it	ne
 8008128:	2001      	movne	r0, #1
}
 800812a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800812c:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800812e:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8008132:	2301      	movs	r3, #1
 8008134:	7840      	ldrb	r0, [r0, #1]
 8008136:	462a      	mov	r2, r5
 8008138:	4639      	mov	r1, r7
 800813a:	f7ff fb7f 	bl	800783c <disk_write>
 800813e:	2800      	cmp	r0, #0
 8008140:	d14f      	bne.n	80081e2 <sync_fs+0xd6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008142:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008144:	69e3      	ldr	r3, [r4, #28]
			fs->wflag = 0;
 8008146:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008148:	1aaa      	subs	r2, r5, r2
 800814a:	429a      	cmp	r2, r3
 800814c:	d2e2      	bcs.n	8008114 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800814e:	78a6      	ldrb	r6, [r4, #2]
 8008150:	2e01      	cmp	r6, #1
 8008152:	d801      	bhi.n	8008158 <sync_fs+0x4c>
 8008154:	e7de      	b.n	8008114 <sync_fs+0x8>
					wsect += fs->fsize;
 8008156:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008158:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800815a:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800815c:	462a      	mov	r2, r5
 800815e:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008160:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8008162:	4639      	mov	r1, r7
 8008164:	f7ff fb6a 	bl	800783c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008168:	2e01      	cmp	r6, #1
 800816a:	d1f4      	bne.n	8008156 <sync_fs+0x4a>
 800816c:	e7d2      	b.n	8008114 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800816e:	7926      	ldrb	r6, [r4, #4]
 8008170:	2e01      	cmp	r6, #1
 8008172:	d1d2      	bne.n	800811a <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8008174:	f104 0734 	add.w	r7, r4, #52	; 0x34
		*d++ = (BYTE)val;
 8008178:	89a2      	ldrh	r2, [r4, #12]
 800817a:	2100      	movs	r1, #0
 800817c:	4638      	mov	r0, r7
 800817e:	f001 fd03 	bl	8009b88 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8008182:	4b19      	ldr	r3, [pc, #100]	; (80081e8 <sync_fs+0xdc>)
 8008184:	6363      	str	r3, [r4, #52]	; 0x34
 8008186:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800818a:	6962      	ldr	r2, [r4, #20]
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800818c:	6925      	ldr	r5, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800818e:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 8008192:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008196:	3320      	adds	r3, #32
 8008198:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
 800819c:	0a13      	lsrs	r3, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800819e:	f884 321d 	strb.w	r3, [r4, #541]	; 0x21d
 80081a2:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80081a4:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val;
 80081a6:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
			fs->winsect = fs->volbase + 1;
 80081aa:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 80081ac:	f884 5220 	strb.w	r5, [r4, #544]	; 0x220
 80081b0:	0a28      	lsrs	r0, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80081b2:	f64a 2155 	movw	r1, #43605	; 0xaa55
			fs->winsect = fs->volbase + 1;
 80081b6:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80081b8:	f884 0221 	strb.w	r0, [r4, #545]	; 0x221
 80081bc:	0c28      	lsrs	r0, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80081be:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80081c0:	f8a4 1232 	strh.w	r1, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val; val >>= 8;
 80081c4:	f884 321e 	strb.w	r3, [r4, #542]	; 0x21e
 80081c8:	f884 0222 	strb.w	r0, [r4, #546]	; 0x222
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80081cc:	4633      	mov	r3, r6
 80081ce:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80081d0:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80081d2:	4639      	mov	r1, r7
	*ptr++ = (BYTE)val;
 80081d4:	f884 5223 	strb.w	r5, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80081d8:	f7ff fb30 	bl	800783c <disk_write>
			fs->fsi_flag = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	7123      	strb	r3, [r4, #4]
 80081e0:	e79b      	b.n	800811a <sync_fs+0xe>
			res = FR_DISK_ERR;
 80081e2:	2001      	movs	r0, #1
}
 80081e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081e6:	bf00      	nop
 80081e8:	41615252 	.word	0x41615252

080081ec <create_chain>:
{
 80081ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 80081f0:	f8d0 8000 	ldr.w	r8, [r0]
{
 80081f4:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 80081f6:	4689      	mov	r9, r1
 80081f8:	2900      	cmp	r1, #0
 80081fa:	f040 80a5 	bne.w	8008348 <create_chain+0x15c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80081fe:	f8d8 6010 	ldr.w	r6, [r8, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008202:	f8d8 3018 	ldr.w	r3, [r8, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008206:	b9be      	cbnz	r6, 8008238 <create_chain+0x4c>
 8008208:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 800820a:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800820c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800820e:	429c      	cmp	r4, r3
 8008210:	d316      	bcc.n	8008240 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8008212:	2e01      	cmp	r6, #1
 8008214:	f000 80a8 	beq.w	8008368 <create_chain+0x17c>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008218:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 800821a:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800821c:	69ab      	ldr	r3, [r5, #24]
 800821e:	42a3      	cmp	r3, r4
 8008220:	d906      	bls.n	8008230 <create_chain+0x44>
		switch (fs->fs_type) {
 8008222:	782b      	ldrb	r3, [r5, #0]
 8008224:	2b02      	cmp	r3, #2
 8008226:	d078      	beq.n	800831a <create_chain+0x12e>
 8008228:	2b03      	cmp	r3, #3
 800822a:	d05d      	beq.n	80082e8 <create_chain+0xfc>
 800822c:	2b01      	cmp	r3, #1
 800822e:	d00b      	beq.n	8008248 <create_chain+0x5c>
 8008230:	2401      	movs	r4, #1
}
 8008232:	4620      	mov	r0, r4
 8008234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008238:	42b3      	cmp	r3, r6
 800823a:	bf98      	it	ls
 800823c:	2601      	movls	r6, #1
 800823e:	e7e4      	b.n	800820a <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008240:	2c01      	cmp	r4, #1
 8008242:	683d      	ldr	r5, [r7, #0]
 8008244:	d9f4      	bls.n	8008230 <create_chain+0x44>
 8008246:	e7e9      	b.n	800821c <create_chain+0x30>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008248:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800824a:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800824e:	89aa      	ldrh	r2, [r5, #12]
			bc = (UINT)clst; bc += bc / 2;
 8008250:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008254:	fbbb f3f2 	udiv	r3, fp, r2
 8008258:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800825a:	4561      	cmp	r1, ip
 800825c:	d00a      	beq.n	8008274 <create_chain+0x88>
 800825e:	4628      	mov	r0, r5
 8008260:	f7ff fba0 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008264:	2800      	cmp	r0, #0
 8008266:	d13a      	bne.n	80082de <create_chain+0xf2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008268:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800826a:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800826e:	89aa      	ldrh	r2, [r5, #12]
 8008270:	fbbb f3f2 	udiv	r3, fp, r2
 8008274:	fb02 b313 	mls	r3, r2, r3, fp
 8008278:	442b      	add	r3, r5
 800827a:	f10b 0b01 	add.w	fp, fp, #1
 800827e:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008282:	fbbb f3f2 	udiv	r3, fp, r2
 8008286:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008288:	4561      	cmp	r1, ip
 800828a:	d006      	beq.n	800829a <create_chain+0xae>
 800828c:	4628      	mov	r0, r5
 800828e:	f7ff fb89 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008292:	bb20      	cbnz	r0, 80082de <create_chain+0xf2>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008294:	89aa      	ldrh	r2, [r5, #12]
 8008296:	fbbb f3f2 	udiv	r3, fp, r2
 800829a:	fb02 b213 	mls	r2, r2, r3, fp
 800829e:	4415      	add	r5, r2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80082a0:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80082a2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80082a6:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80082aa:	bf4c      	ite	mi
 80082ac:	091b      	lsrmi	r3, r3, #4
 80082ae:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 80082b2:	b133      	cbz	r3, 80082c2 <create_chain+0xd6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d0bb      	beq.n	8008230 <create_chain+0x44>
			if (ncl == scl) return 0;		/* No free cluster */
 80082b8:	42a6      	cmp	r6, r4
 80082ba:	d055      	beq.n	8008368 <create_chain+0x17c>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80082bc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80082c0:	e7a4      	b.n	800820c <create_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80082c2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80082c6:	42a3      	cmp	r3, r4
 80082c8:	d9b2      	bls.n	8008230 <create_chain+0x44>
 80082ca:	f04f 32ff 	mov.w	r2, #4294967295
 80082ce:	4621      	mov	r1, r4
 80082d0:	4640      	mov	r0, r8
 80082d2:	f7ff fd33 	bl	8007d3c <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d04a      	beq.n	8008370 <create_chain+0x184>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80082da:	2801      	cmp	r0, #1
 80082dc:	d1a8      	bne.n	8008230 <create_chain+0x44>
 80082de:	f04f 34ff 	mov.w	r4, #4294967295
}
 80082e2:	4620      	mov	r0, r4
 80082e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80082e8:	89a8      	ldrh	r0, [r5, #12]
 80082ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80082ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80082ee:	0881      	lsrs	r1, r0, #2
 80082f0:	fbb4 f1f1 	udiv	r1, r4, r1
 80082f4:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80082f6:	4299      	cmp	r1, r3
 80082f8:	d005      	beq.n	8008306 <create_chain+0x11a>
 80082fa:	4628      	mov	r0, r5
 80082fc:	f7ff fb52 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008300:	2800      	cmp	r0, #0
 8008302:	d1ec      	bne.n	80082de <create_chain+0xf2>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008304:	89a8      	ldrh	r0, [r5, #12]
 8008306:	00a3      	lsls	r3, r4, #2
 8008308:	fbb3 f2f0 	udiv	r2, r3, r0
 800830c:	fb00 3312 	mls	r3, r0, r2, r3
	rv = rv << 8 | ptr[0];
 8008310:	441d      	add	r5, r3
 8008312:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008314:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			break;
 8008318:	e7cb      	b.n	80082b2 <create_chain+0xc6>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800831a:	89a8      	ldrh	r0, [r5, #12]
 800831c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800831e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008320:	0841      	lsrs	r1, r0, #1
 8008322:	fbb4 f1f1 	udiv	r1, r4, r1
 8008326:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008328:	4299      	cmp	r1, r3
 800832a:	d005      	beq.n	8008338 <create_chain+0x14c>
 800832c:	4628      	mov	r0, r5
 800832e:	f7ff fb39 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008332:	2800      	cmp	r0, #0
 8008334:	d1d3      	bne.n	80082de <create_chain+0xf2>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008336:	89a8      	ldrh	r0, [r5, #12]
 8008338:	0063      	lsls	r3, r4, #1
 800833a:	fbb3 f2f0 	udiv	r2, r3, r0
 800833e:	fb00 3312 	mls	r3, r0, r2, r3
 8008342:	441d      	add	r5, r3
 8008344:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 8008346:	e7b4      	b.n	80082b2 <create_chain+0xc6>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008348:	4640      	mov	r0, r8
 800834a:	f7ff fdb3 	bl	8007eb4 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800834e:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008350:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008352:	f67f af6d 	bls.w	8008230 <create_chain+0x44>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008356:	1c41      	adds	r1, r0, #1
 8008358:	d0c1      	beq.n	80082de <create_chain+0xf2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800835a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800835e:	4283      	cmp	r3, r0
 8008360:	f63f af67 	bhi.w	8008232 <create_chain+0x46>
 8008364:	464e      	mov	r6, r9
 8008366:	e750      	b.n	800820a <create_chain+0x1e>
				if (ncl > scl) return 0;	/* No free cluster */
 8008368:	2400      	movs	r4, #0
}
 800836a:	4620      	mov	r0, r4
 800836c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK && clst != 0) {
 8008370:	f1b9 0f00 	cmp.w	r9, #0
 8008374:	d00f      	beq.n	8008396 <create_chain+0x1aa>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008376:	f1b9 0f01 	cmp.w	r9, #1
 800837a:	f43f af59 	beq.w	8008230 <create_chain+0x44>
 800837e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008382:	4599      	cmp	r9, r3
 8008384:	f4bf af54 	bcs.w	8008230 <create_chain+0x44>
 8008388:	4622      	mov	r2, r4
 800838a:	4649      	mov	r1, r9
 800838c:	4640      	mov	r0, r8
 800838e:	f7ff fcd5 	bl	8007d3c <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008392:	2800      	cmp	r0, #0
 8008394:	d1a1      	bne.n	80082da <create_chain+0xee>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008396:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 800839a:	3b02      	subs	r3, #2
 800839c:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 800839e:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80083a2:	d802      	bhi.n	80083aa <create_chain+0x1be>
 80083a4:	3a01      	subs	r2, #1
 80083a6:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 80083aa:	f898 3004 	ldrb.w	r3, [r8, #4]
 80083ae:	f043 0301 	orr.w	r3, r3, #1
 80083b2:	f888 3004 	strb.w	r3, [r8, #4]
 80083b6:	e73c      	b.n	8008232 <create_chain+0x46>

080083b8 <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80083b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80083bc:	6884      	ldr	r4, [r0, #8]
	FATFS *fs = dp->obj.fs;
 80083be:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80083c0:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80083c2:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 80083c4:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083c6:	b9bc      	cbnz	r4, 80083f8 <dir_sdi.constprop.0+0x40>
 80083c8:	783b      	ldrb	r3, [r7, #0]
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d810      	bhi.n	80083f0 <dir_sdi.constprop.0+0x38>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80083ce:	893b      	ldrh	r3, [r7, #8]
 80083d0:	b15b      	cbz	r3, 80083ea <dir_sdi.constprop.0+0x32>
		dp->sect = fs->dirbase;
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80083d6:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80083d8:	b13b      	cbz	r3, 80083ea <dir_sdi.constprop.0+0x32>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80083da:	3734      	adds	r7, #52	; 0x34
 80083dc:	6237      	str	r7, [r6, #32]
	return FR_OK;
 80083de:	2000      	movs	r0, #0
}
 80083e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		dp->sect = clust2sect(fs, clst);
 80083e4:	2300      	movs	r3, #0
	dp->clust = clst;					/* Current cluster# */
 80083e6:	e9c6 4306 	strd	r4, r3, [r6, #24]
		switch (fs->fs_type) {
 80083ea:	2002      	movs	r0, #2
}
 80083ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		clst = fs->dirbase;
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0eb      	beq.n	80083ce <dir_sdi.constprop.0+0x16>
 80083f6:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80083f8:	897a      	ldrh	r2, [r7, #10]
 80083fa:	89bb      	ldrh	r3, [r7, #12]
 80083fc:	fb02 f303 	mul.w	r3, r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8008400:	2b00      	cmp	r3, #0
 8008402:	d179      	bne.n	80084f8 <dir_sdi.constprop.0+0x140>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008404:	2c01      	cmp	r4, #1
 8008406:	d9f0      	bls.n	80083ea <dir_sdi.constprop.0+0x32>
 8008408:	6835      	ldr	r5, [r6, #0]
 800840a:	69ab      	ldr	r3, [r5, #24]
 800840c:	429c      	cmp	r4, r3
 800840e:	d2ec      	bcs.n	80083ea <dir_sdi.constprop.0+0x32>
		switch (fs->fs_type) {
 8008410:	782b      	ldrb	r3, [r5, #0]
 8008412:	2b02      	cmp	r3, #2
 8008414:	d058      	beq.n	80084c8 <dir_sdi.constprop.0+0x110>
 8008416:	2b03      	cmp	r3, #3
 8008418:	d039      	beq.n	800848e <dir_sdi.constprop.0+0xd6>
 800841a:	2b01      	cmp	r3, #1
 800841c:	d1e5      	bne.n	80083ea <dir_sdi.constprop.0+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800841e:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008420:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008424:	89aa      	ldrh	r2, [r5, #12]
			bc = (UINT)clst; bc += bc / 2;
 8008426:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800842a:	fbb8 f3f2 	udiv	r3, r8, r2
 800842e:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008430:	4561      	cmp	r1, ip
 8008432:	d00a      	beq.n	800844a <dir_sdi.constprop.0+0x92>
 8008434:	4628      	mov	r0, r5
 8008436:	f7ff fab5 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800843a:	2800      	cmp	r0, #0
 800843c:	d15a      	bne.n	80084f4 <dir_sdi.constprop.0+0x13c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800843e:	6a68      	ldr	r0, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008440:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8008444:	89aa      	ldrh	r2, [r5, #12]
 8008446:	fbb8 f3f2 	udiv	r3, r8, r2
 800844a:	fb02 8313 	mls	r3, r2, r3, r8
 800844e:	442b      	add	r3, r5
 8008450:	f108 0801 	add.w	r8, r8, #1
 8008454:	f893 9034 	ldrb.w	r9, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008458:	fbb8 f3f2 	udiv	r3, r8, r2
 800845c:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800845e:	4561      	cmp	r1, ip
 8008460:	d007      	beq.n	8008472 <dir_sdi.constprop.0+0xba>
 8008462:	4628      	mov	r0, r5
 8008464:	f7ff fa9e 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008468:	2800      	cmp	r0, #0
 800846a:	d143      	bne.n	80084f4 <dir_sdi.constprop.0+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800846c:	89aa      	ldrh	r2, [r5, #12]
 800846e:	fbb8 f3f2 	udiv	r3, r8, r2
 8008472:	fb02 8813 	mls	r8, r2, r3, r8
 8008476:	4445      	add	r5, r8
 8008478:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800847c:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008480:	07e3      	lsls	r3, r4, #31
 8008482:	bf4c      	ite	mi
 8008484:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 8008488:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
 800848c:	e016      	b.n	80084bc <dir_sdi.constprop.0+0x104>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800848e:	89a8      	ldrh	r0, [r5, #12]
 8008490:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008492:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008494:	0881      	lsrs	r1, r0, #2
 8008496:	fbb4 f1f1 	udiv	r1, r4, r1
 800849a:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800849c:	4299      	cmp	r1, r3
 800849e:	d004      	beq.n	80084aa <dir_sdi.constprop.0+0xf2>
 80084a0:	4628      	mov	r0, r5
 80084a2:	f7ff fa7f 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084a6:	bb28      	cbnz	r0, 80084f4 <dir_sdi.constprop.0+0x13c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80084a8:	89a8      	ldrh	r0, [r5, #12]
 80084aa:	00a4      	lsls	r4, r4, #2
 80084ac:	fbb4 f3f0 	udiv	r3, r4, r0
 80084b0:	fb00 4413 	mls	r4, r0, r3, r4
	rv = rv << 8 | ptr[0];
 80084b4:	4425      	add	r5, r4
 80084b6:	6b6c      	ldr	r4, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80084b8:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80084bc:	2c01      	cmp	r4, #1
 80084be:	d994      	bls.n	80083ea <dir_sdi.constprop.0+0x32>
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	42a3      	cmp	r3, r4
 80084c4:	d89e      	bhi.n	8008404 <dir_sdi.constprop.0+0x4c>
 80084c6:	e790      	b.n	80083ea <dir_sdi.constprop.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084c8:	89a8      	ldrh	r0, [r5, #12]
 80084ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80084cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084ce:	0841      	lsrs	r1, r0, #1
 80084d0:	fbb4 f1f1 	udiv	r1, r4, r1
 80084d4:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80084d6:	4299      	cmp	r1, r3
 80084d8:	d004      	beq.n	80084e4 <dir_sdi.constprop.0+0x12c>
 80084da:	4628      	mov	r0, r5
 80084dc:	f7ff fa62 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084e0:	b940      	cbnz	r0, 80084f4 <dir_sdi.constprop.0+0x13c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80084e2:	89a8      	ldrh	r0, [r5, #12]
 80084e4:	0064      	lsls	r4, r4, #1
 80084e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80084ea:	fb00 4413 	mls	r4, r0, r3, r4
 80084ee:	4425      	add	r5, r4
 80084f0:	8eac      	ldrh	r4, [r5, #52]	; 0x34
			break;
 80084f2:	e7e3      	b.n	80084bc <dir_sdi.constprop.0+0x104>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80084f4:	2001      	movs	r0, #1
 80084f6:	e773      	b.n	80083e0 <dir_sdi.constprop.0+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80084f8:	69b9      	ldr	r1, [r7, #24]
	clst -= 2;
 80084fa:	1ea0      	subs	r0, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80084fc:	3902      	subs	r1, #2
 80084fe:	4288      	cmp	r0, r1
 8008500:	f4bf af70 	bcs.w	80083e4 <dir_sdi.constprop.0+0x2c>
	return clst * fs->csize + fs->database;
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	fb00 3302 	mla	r3, r0, r2, r3
		dp->sect = clust2sect(fs, clst);
 800850a:	61f3      	str	r3, [r6, #28]
 800850c:	e763      	b.n	80083d6 <dir_sdi.constprop.0+0x1e>
 800850e:	bf00      	nop

08008510 <follow_path>:
{
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8008514:	f8d0 a000 	ldr.w	sl, [r0]
{
 8008518:	b083      	sub	sp, #12
 800851a:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800851c:	780b      	ldrb	r3, [r1, #0]
 800851e:	2b2f      	cmp	r3, #47	; 0x2f
 8008520:	4689      	mov	r9, r1
 8008522:	f101 0101 	add.w	r1, r1, #1
 8008526:	d0f9      	beq.n	800851c <follow_path+0xc>
 8008528:	2b5c      	cmp	r3, #92	; 0x5c
 800852a:	d0f7      	beq.n	800851c <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800852c:	2300      	movs	r3, #0
 800852e:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008530:	f899 3000 	ldrb.w	r3, [r9]
 8008534:	2b1f      	cmp	r3, #31
 8008536:	f240 8172 	bls.w	800881e <follow_path+0x30e>
	p = *path; sfn = dp->fn;
 800853a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800853e:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 8008540:	2320      	movs	r3, #32
 8008542:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
 8008546:	6262      	str	r2, [r4, #36]	; 0x24
 8008548:	62a2      	str	r2, [r4, #40]	; 0x28
 800854a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800854e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8008552:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		c = (BYTE)p[si++];
 8008556:	f899 3000 	ldrb.w	r3, [r9]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800855a:	2b20      	cmp	r3, #32
 800855c:	d90b      	bls.n	8008576 <follow_path+0x66>
 800855e:	464f      	mov	r7, r9
	si = i = 0; ni = 8;
 8008560:	2500      	movs	r5, #0
 8008562:	2608      	movs	r6, #8
		c = (BYTE)p[si++];
 8008564:	2101      	movs	r1, #1
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008566:	2b2f      	cmp	r3, #47	; 0x2f
 8008568:	d03e      	beq.n	80085e8 <follow_path+0xd8>
 800856a:	2b5c      	cmp	r3, #92	; 0x5c
 800856c:	d03c      	beq.n	80085e8 <follow_path+0xd8>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800856e:	2b2e      	cmp	r3, #46	; 0x2e
 8008570:	d005      	beq.n	800857e <follow_path+0x6e>
 8008572:	42b5      	cmp	r5, r6
 8008574:	d321      	bcc.n	80085ba <follow_path+0xaa>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008576:	2006      	movs	r0, #6
}
 8008578:	b003      	add	sp, #12
 800857a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800857e:	2e0b      	cmp	r6, #11
 8008580:	d0f9      	beq.n	8008576 <follow_path+0x66>
			i = 8; ni = 11;				/* Goto extension */
 8008582:	2508      	movs	r5, #8
 8008584:	260b      	movs	r6, #11
		c = (BYTE)p[si++];
 8008586:	f817 3f01 	ldrb.w	r3, [r7, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800858a:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 800858c:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008590:	d8e9      	bhi.n	8008566 <follow_path+0x56>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008592:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008596:	2be5      	cmp	r3, #229	; 0xe5
	*path = p + si;						/* Return pointer to the next segment */
 8008598:	4489      	add	r9, r1
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800859a:	f000 814b 	beq.w	8008834 <follow_path+0x324>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800859e:	2304      	movs	r3, #4
 80085a0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80085a4:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 80085a6:	6827      	ldr	r7, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80085a8:	f7ff ff06 	bl	80083b8 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d035      	beq.n	800861c <follow_path+0x10c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80085b0:	2804      	cmp	r0, #4
			ns = dp->fn[NSFLAG];
 80085b2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 80085b6:	d1df      	bne.n	8008578 <follow_path+0x68>
 80085b8:	e0d2      	b.n	8008760 <follow_path+0x250>
		if (c >= 0x80) {				/* Extended character? */
 80085ba:	061a      	lsls	r2, r3, #24
 80085bc:	d502      	bpl.n	80085c4 <follow_path+0xb4>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80085be:	4aa2      	ldr	r2, [pc, #648]	; (8008848 <follow_path+0x338>)
 80085c0:	3b80      	subs	r3, #128	; 0x80
 80085c2:	5cd3      	ldrb	r3, [r2, r3]
	while (*str && *str != chr) str++;
 80085c4:	48a1      	ldr	r0, [pc, #644]	; (800884c <follow_path+0x33c>)
 80085c6:	2222      	movs	r2, #34	; 0x22
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d0d4      	beq.n	8008576 <follow_path+0x66>
 80085cc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80085d0:	2a00      	cmp	r2, #0
 80085d2:	d1f9      	bne.n	80085c8 <follow_path+0xb8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80085d4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80085d8:	2a19      	cmp	r2, #25
 80085da:	d801      	bhi.n	80085e0 <follow_path+0xd0>
 80085dc:	3b20      	subs	r3, #32
 80085de:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 80085e0:	9a01      	ldr	r2, [sp, #4]
 80085e2:	5553      	strb	r3, [r2, r5]
 80085e4:	3501      	adds	r5, #1
 80085e6:	e7ce      	b.n	8008586 <follow_path+0x76>
 80085e8:	eb09 0301 	add.w	r3, r9, r1
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80085ec:	781a      	ldrb	r2, [r3, #0]
 80085ee:	2a2f      	cmp	r2, #47	; 0x2f
 80085f0:	4699      	mov	r9, r3
 80085f2:	f103 0301 	add.w	r3, r3, #1
 80085f6:	d0f9      	beq.n	80085ec <follow_path+0xdc>
 80085f8:	2a5c      	cmp	r2, #92	; 0x5c
 80085fa:	d0f7      	beq.n	80085ec <follow_path+0xdc>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80085fc:	2d00      	cmp	r5, #0
 80085fe:	d0ba      	beq.n	8008576 <follow_path+0x66>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008600:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008604:	2be5      	cmp	r3, #229	; 0xe5
 8008606:	f000 8119 	beq.w	800883c <follow_path+0x32c>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800860a:	2300      	movs	r3, #0
 800860c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008610:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 8008612:	6827      	ldr	r7, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008614:	f7ff fed0 	bl	80083b8 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 8008618:	2800      	cmp	r0, #0
 800861a:	d1c9      	bne.n	80085b0 <follow_path+0xa0>
		res = move_window(fs, dp->sect);
 800861c:	f8d4 b01c 	ldr.w	fp, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008620:	465b      	mov	r3, fp
 8008622:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8008626:	46bb      	mov	fp, r7
 8008628:	461f      	mov	r7, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800862a:	f8db 5030 	ldr.w	r5, [fp, #48]	; 0x30
 800862e:	42bd      	cmp	r5, r7
 8008630:	d016      	beq.n	8008660 <follow_path+0x150>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008632:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f040 8096 	bne.w	8008768 <follow_path+0x258>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800863c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8008640:	2301      	movs	r3, #1
 8008642:	463a      	mov	r2, r7
 8008644:	4631      	mov	r1, r6
 8008646:	f7ff f8eb 	bl	8007820 <disk_read>
 800864a:	b138      	cbz	r0, 800865c <follow_path+0x14c>
			fs->winsect = sector;
 800864c:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8008650:	2001      	movs	r0, #1
			fs->winsect = sector;
 8008652:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
}
 8008656:	b003      	add	sp, #12
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800865c:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
		c = dp->dir[DIR_Name];
 8008660:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	2a00      	cmp	r2, #0
 8008666:	d079      	beq.n	800875c <follow_path+0x24c>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008668:	7ad9      	ldrb	r1, [r3, #11]
 800866a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800866e:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008670:	7ada      	ldrb	r2, [r3, #11]
 8008672:	f012 0208 	ands.w	r2, r2, #8
 8008676:	d01e      	beq.n	80086b6 <follow_path+0x1a6>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008678:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800867a:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800867c:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800867e:	2f00      	cmp	r7, #0
 8008680:	d06c      	beq.n	800875c <follow_path+0x24c>
 8008682:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8008686:	d269      	bcs.n	800875c <follow_path+0x24c>
	FATFS *fs = dp->obj.fs;
 8008688:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800868a:	899a      	ldrh	r2, [r3, #12]
 800868c:	fbb5 f0f2 	udiv	r0, r5, r2
 8008690:	fb02 5210 	mls	r2, r2, r0, r5
 8008694:	b952      	cbnz	r2, 80086ac <follow_path+0x19c>
		if (!dp->clust) {		/* Static table */
 8008696:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8008698:	3701      	adds	r7, #1
 800869a:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800869c:	2900      	cmp	r1, #0
 800869e:	f040 808b 	bne.w	80087b8 <follow_path+0x2a8>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80086a2:	8918      	ldrh	r0, [r3, #8]
 80086a4:	ebb0 1f55 	cmp.w	r0, r5, lsr #5
 80086a8:	f240 80a1 	bls.w	80087ee <follow_path+0x2de>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80086ac:	3334      	adds	r3, #52	; 0x34
 80086ae:	4413      	add	r3, r2
	dp->dptr = ofs;						/* Current entry */
 80086b0:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80086b2:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 80086b4:	e7b9      	b.n	800862a <follow_path+0x11a>
	} while (--cnt && r == 0);
 80086b6:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 80086ba:	7818      	ldrb	r0, [r3, #0]
 80086bc:	4285      	cmp	r5, r0
 80086be:	d1db      	bne.n	8008678 <follow_path+0x168>
 80086c0:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 80086c4:	7858      	ldrb	r0, [r3, #1]
 80086c6:	4285      	cmp	r5, r0
 80086c8:	d1d6      	bne.n	8008678 <follow_path+0x168>
 80086ca:	789d      	ldrb	r5, [r3, #2]
 80086cc:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 80086d0:	4285      	cmp	r5, r0
 80086d2:	d1d1      	bne.n	8008678 <follow_path+0x168>
 80086d4:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 80086d8:	78d8      	ldrb	r0, [r3, #3]
 80086da:	4285      	cmp	r5, r0
 80086dc:	d1cc      	bne.n	8008678 <follow_path+0x168>
 80086de:	791d      	ldrb	r5, [r3, #4]
 80086e0:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80086e4:	4285      	cmp	r5, r0
 80086e6:	d1c7      	bne.n	8008678 <follow_path+0x168>
 80086e8:	795d      	ldrb	r5, [r3, #5]
 80086ea:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80086ee:	4285      	cmp	r5, r0
 80086f0:	d1c2      	bne.n	8008678 <follow_path+0x168>
 80086f2:	799d      	ldrb	r5, [r3, #6]
 80086f4:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80086f8:	4285      	cmp	r5, r0
 80086fa:	d1bd      	bne.n	8008678 <follow_path+0x168>
 80086fc:	79dd      	ldrb	r5, [r3, #7]
 80086fe:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 8008702:	4285      	cmp	r5, r0
 8008704:	d1b8      	bne.n	8008678 <follow_path+0x168>
 8008706:	7a1d      	ldrb	r5, [r3, #8]
 8008708:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800870c:	4285      	cmp	r5, r0
 800870e:	d1b3      	bne.n	8008678 <follow_path+0x168>
 8008710:	7a5d      	ldrb	r5, [r3, #9]
 8008712:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8008716:	4285      	cmp	r5, r0
 8008718:	d1ae      	bne.n	8008678 <follow_path+0x168>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800871a:	7a98      	ldrb	r0, [r3, #10]
 800871c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8008720:	4298      	cmp	r0, r3
 8008722:	d1a9      	bne.n	8008678 <follow_path+0x168>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008724:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8008728:	075b      	lsls	r3, r3, #29
 800872a:	4610      	mov	r0, r2
 800872c:	f53f af24 	bmi.w	8008578 <follow_path+0x68>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008730:	06ca      	lsls	r2, r1, #27
 8008732:	d517      	bpl.n	8008764 <follow_path+0x254>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008734:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 8008738:	6962      	ldr	r2, [r4, #20]
 800873a:	fbb2 f0f1 	udiv	r0, r2, r1
 800873e:	f10a 0334 	add.w	r3, sl, #52	; 0x34
 8008742:	fb01 2210 	mls	r2, r1, r0, r2
	if (fs->fs_type == FS_FAT32) {
 8008746:	f89a 1000 	ldrb.w	r1, [sl]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800874a:	4413      	add	r3, r2
	if (fs->fs_type == FS_FAT32) {
 800874c:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800874e:	8b5a      	ldrh	r2, [r3, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008750:	bf04      	itt	eq
 8008752:	8a9b      	ldrheq	r3, [r3, #20]
 8008754:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008758:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800875a:	e6f1      	b.n	8008540 <follow_path+0x30>
			ns = dp->fn[NSFLAG];
 800875c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008760:	0759      	lsls	r1, r3, #29
 8008762:	d465      	bmi.n	8008830 <follow_path+0x320>
 8008764:	2005      	movs	r0, #5
 8008766:	e707      	b.n	8008578 <follow_path+0x68>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008768:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800876c:	2301      	movs	r3, #1
 800876e:	462a      	mov	r2, r5
 8008770:	4631      	mov	r1, r6
 8008772:	f7ff f863 	bl	800783c <disk_write>
 8008776:	bbc0      	cbnz	r0, 80087ea <follow_path+0x2da>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008778:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800877c:	f8db 301c 	ldr.w	r3, [fp, #28]
			fs->wflag = 0;
 8008780:	f88b 0003 	strb.w	r0, [fp, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008784:	1aaa      	subs	r2, r5, r2
 8008786:	429a      	cmp	r2, r3
 8008788:	f4bf af58 	bcs.w	800863c <follow_path+0x12c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800878c:	f89b 8002 	ldrb.w	r8, [fp, #2]
 8008790:	f1b8 0f01 	cmp.w	r8, #1
 8008794:	d802      	bhi.n	800879c <follow_path+0x28c>
 8008796:	e751      	b.n	800863c <follow_path+0x12c>
					wsect += fs->fsize;
 8008798:	f8db 301c 	ldr.w	r3, [fp, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800879c:	f89b 0001 	ldrb.w	r0, [fp, #1]
					wsect += fs->fsize;
 80087a0:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80087a2:	462a      	mov	r2, r5
 80087a4:	2301      	movs	r3, #1
 80087a6:	4631      	mov	r1, r6
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087a8:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80087ac:	f7ff f846 	bl	800783c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087b0:	f1b8 0f01 	cmp.w	r8, #1
 80087b4:	d1f0      	bne.n	8008798 <follow_path+0x288>
 80087b6:	e741      	b.n	800863c <follow_path+0x12c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80087b8:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 80087bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087c0:	ea1c 0800 	ands.w	r8, ip, r0
 80087c4:	f47f af72 	bne.w	80086ac <follow_path+0x19c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80087c8:	4618      	mov	r0, r3
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	f7ff fb72 	bl	8007eb4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80087d0:	2801      	cmp	r0, #1
 80087d2:	d922      	bls.n	800881a <follow_path+0x30a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80087d4:	1c47      	adds	r7, r0, #1
 80087d6:	d008      	beq.n	80087ea <follow_path+0x2da>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80087d8:	9b00      	ldr	r3, [sp, #0]
 80087da:	699a      	ldr	r2, [r3, #24]
 80087dc:	4290      	cmp	r0, r2
 80087de:	d30a      	bcc.n	80087f6 <follow_path+0x2e6>
			ns = dp->fn[NSFLAG];
 80087e0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
						dp->sect = 0; return FR_NO_FILE;
 80087e4:	f8c4 801c 	str.w	r8, [r4, #28]
				if (res == FR_NO_FILE) {	/* Object is not found */
 80087e8:	e7ba      	b.n	8008760 <follow_path+0x250>
			res = FR_DISK_ERR;
 80087ea:	2001      	movs	r0, #1
 80087ec:	e6c4      	b.n	8008578 <follow_path+0x68>
			ns = dp->fn[NSFLAG];
 80087ee:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
				dp->sect = 0; return FR_NO_FILE;
 80087f2:	61e1      	str	r1, [r4, #28]
				if (res == FR_NO_FILE) {	/* Object is not found */
 80087f4:	e7b4      	b.n	8008760 <follow_path+0x250>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80087f6:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80087f8:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80087fa:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80087fc:	4290      	cmp	r0, r2
	return clst * fs->csize + fs->database;
 80087fe:	bf3e      	ittt	cc
 8008800:	895a      	ldrhcc	r2, [r3, #10]
 8008802:	6adf      	ldrcc	r7, [r3, #44]	; 0x2c
 8008804:	fb00 7702 	mlacc	r7, r0, r2, r7
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008808:	899a      	ldrh	r2, [r3, #12]
 800880a:	fbb5 f1f2 	udiv	r1, r5, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800880e:	bf28      	it	cs
 8008810:	4647      	movcs	r7, r8
				dp->sect = clust2sect(fs, clst);
 8008812:	61e7      	str	r7, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008814:	fb02 5211 	mls	r2, r2, r1, r5
 8008818:	e748      	b.n	80086ac <follow_path+0x19c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800881a:	2002      	movs	r0, #2
	return res;
 800881c:	e6ac      	b.n	8008578 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800881e:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8008820:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 8008822:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 8008826:	b003      	add	sp, #12
 8008828:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800882c:	f7ff bdc4 	b.w	80083b8 <dir_sdi.constprop.0>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008830:	2004      	movs	r0, #4
 8008832:	e6a1      	b.n	8008578 <follow_path+0x68>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008834:	2305      	movs	r3, #5
 8008836:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800883a:	e6b0      	b.n	800859e <follow_path+0x8e>
 800883c:	2305      	movs	r3, #5
 800883e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008842:	2300      	movs	r3, #0
 8008844:	e6e2      	b.n	800860c <follow_path+0xfc>
 8008846:	bf00      	nop
 8008848:	0800cac8 	.word	0x0800cac8
 800884c:	0800cab8 	.word	0x0800cab8

08008850 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008850:	2901      	cmp	r1, #1
{
 8008852:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8008856:	6806      	ldr	r6, [r0, #0]
{
 8008858:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800885a:	d910      	bls.n	800887e <remove_chain+0x2e>
 800885c:	69b3      	ldr	r3, [r6, #24]
 800885e:	428b      	cmp	r3, r1
 8008860:	d90d      	bls.n	800887e <remove_chain+0x2e>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008862:	4605      	mov	r5, r0
 8008864:	4611      	mov	r1, r2
 8008866:	b96a      	cbnz	r2, 8008884 <remove_chain+0x34>
 8008868:	4637      	mov	r7, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800886a:	429c      	cmp	r4, r3
 800886c:	d207      	bcs.n	800887e <remove_chain+0x2e>
		switch (fs->fs_type) {
 800886e:	783b      	ldrb	r3, [r7, #0]
 8008870:	2b02      	cmp	r3, #2
 8008872:	f000 8089 	beq.w	8008988 <remove_chain+0x138>
 8008876:	2b03      	cmp	r3, #3
 8008878:	d06a      	beq.n	8008950 <remove_chain+0x100>
 800887a:	2b01      	cmp	r3, #1
 800887c:	d010      	beq.n	80088a0 <remove_chain+0x50>
 800887e:	2002      	movs	r0, #2
}
 8008880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008884:	2a01      	cmp	r2, #1
 8008886:	d0fa      	beq.n	800887e <remove_chain+0x2e>
 8008888:	4293      	cmp	r3, r2
 800888a:	d9f8      	bls.n	800887e <remove_chain+0x2e>
 800888c:	f04f 32ff 	mov.w	r2, #4294967295
 8008890:	4630      	mov	r0, r6
 8008892:	f7ff fa53 	bl	8007d3c <put_fat.part.0>
		if (res != FR_OK) return res;
 8008896:	2800      	cmp	r0, #0
 8008898:	d1f2      	bne.n	8008880 <remove_chain+0x30>
 800889a:	682f      	ldr	r7, [r5, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	e7e4      	b.n	800886a <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80088a2:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088a6:	89ba      	ldrh	r2, [r7, #12]
			bc = (UINT)clst; bc += bc / 2;
 80088a8:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088ac:	fbb8 f3f2 	udiv	r3, r8, r2
 80088b0:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80088b2:	4561      	cmp	r1, ip
 80088b4:	d00a      	beq.n	80088cc <remove_chain+0x7c>
 80088b6:	4638      	mov	r0, r7
 80088b8:	f7ff f874 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088bc:	2800      	cmp	r0, #0
 80088be:	d17d      	bne.n	80089bc <remove_chain+0x16c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80088c2:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80088c6:	89ba      	ldrh	r2, [r7, #12]
 80088c8:	fbb8 f3f2 	udiv	r3, r8, r2
 80088cc:	fb02 8313 	mls	r3, r2, r3, r8
 80088d0:	443b      	add	r3, r7
 80088d2:	f108 0801 	add.w	r8, r8, #1
 80088d6:	f893 9034 	ldrb.w	r9, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088da:	fbb8 f3f2 	udiv	r3, r8, r2
 80088de:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80088e0:	4561      	cmp	r1, ip
 80088e2:	d007      	beq.n	80088f4 <remove_chain+0xa4>
 80088e4:	4638      	mov	r0, r7
 80088e6:	f7ff f85d 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d166      	bne.n	80089bc <remove_chain+0x16c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80088ee:	89ba      	ldrh	r2, [r7, #12]
 80088f0:	fbb8 f3f2 	udiv	r3, r8, r2
 80088f4:	fb02 8813 	mls	r8, r2, r3, r8
 80088f8:	4447      	add	r7, r8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80088fa:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80088fc:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
 8008900:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008904:	bf4c      	ite	mi
 8008906:	ea4f 1818 	movmi.w	r8, r8, lsr #4
 800890a:	f3c8 080b 	ubfxpl	r8, r8, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 800890e:	f1b8 0f00 	cmp.w	r8, #0
 8008912:	d055      	beq.n	80089c0 <remove_chain+0x170>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008914:	f1b8 0f01 	cmp.w	r8, #1
 8008918:	d0b1      	beq.n	800887e <remove_chain+0x2e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800891a:	69b3      	ldr	r3, [r6, #24]
 800891c:	42a3      	cmp	r3, r4
 800891e:	d9ae      	bls.n	800887e <remove_chain+0x2e>
 8008920:	2200      	movs	r2, #0
 8008922:	4621      	mov	r1, r4
 8008924:	4630      	mov	r0, r6
 8008926:	f7ff fa09 	bl	8007d3c <put_fat.part.0>
			if (res != FR_OK) return res;
 800892a:	2800      	cmp	r0, #0
 800892c:	d1a8      	bne.n	8008880 <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800892e:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
 8008932:	1e91      	subs	r1, r2, #2
 8008934:	428b      	cmp	r3, r1
 8008936:	d205      	bcs.n	8008944 <remove_chain+0xf4>
			fs->free_clst++;
 8008938:	3301      	adds	r3, #1
 800893a:	6173      	str	r3, [r6, #20]
			fs->fsi_flag |= 1;
 800893c:	7933      	ldrb	r3, [r6, #4]
 800893e:	f043 0301 	orr.w	r3, r3, #1
 8008942:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008944:	4542      	cmp	r2, r8
 8008946:	d93b      	bls.n	80089c0 <remove_chain+0x170>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008948:	682f      	ldr	r7, [r5, #0]
 800894a:	4644      	mov	r4, r8
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	e78c      	b.n	800886a <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008950:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8008954:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008958:	ea4f 019c 	mov.w	r1, ip, lsr #2
 800895c:	fbb4 f1f1 	udiv	r1, r4, r1
 8008960:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008962:	4291      	cmp	r1, r2
 8008964:	d005      	beq.n	8008972 <remove_chain+0x122>
 8008966:	4638      	mov	r0, r7
 8008968:	f7ff f81c 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800896c:	bb30      	cbnz	r0, 80089bc <remove_chain+0x16c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800896e:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 8008972:	00a3      	lsls	r3, r4, #2
 8008974:	fbb3 f2fc 	udiv	r2, r3, ip
 8008978:	fb0c 3312 	mls	r3, ip, r2, r3
	rv = rv << 8 | ptr[0];
 800897c:	441f      	add	r7, r3
 800897e:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008982:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8008986:	e7c2      	b.n	800890e <remove_chain+0xbe>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008988:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 800898c:	6a78      	ldr	r0, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800898e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008990:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8008994:	fbb4 f1f1 	udiv	r1, r4, r1
 8008998:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800899a:	4291      	cmp	r1, r2
 800899c:	d005      	beq.n	80089aa <remove_chain+0x15a>
 800899e:	4638      	mov	r0, r7
 80089a0:	f7ff f800 	bl	80079a4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089a4:	b950      	cbnz	r0, 80089bc <remove_chain+0x16c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80089a6:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
 80089aa:	0063      	lsls	r3, r4, #1
 80089ac:	fbb3 f2fc 	udiv	r2, r3, ip
 80089b0:	fb0c 3312 	mls	r3, ip, r2, r3
 80089b4:	441f      	add	r7, r3
 80089b6:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 80089ba:	e7a8      	b.n	800890e <remove_chain+0xbe>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80089bc:	2001      	movs	r0, #1
 80089be:	e75f      	b.n	8008880 <remove_chain+0x30>
	return FR_OK;
 80089c0:	2000      	movs	r0, #0
 80089c2:	e75d      	b.n	8008880 <remove_chain+0x30>

080089c4 <dir_register>:
{
 80089c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c8:	ed2d 8b02 	vpush	{d8}
 80089cc:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 80089ce:	6806      	ldr	r6, [r0, #0]
{
 80089d0:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);
 80089d2:	f7ff fcf1 	bl	80083b8 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 80089d6:	9001      	str	r0, [sp, #4]
 80089d8:	b310      	cbz	r0, 8008a20 <dir_register+0x5c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80089da:	9b01      	ldr	r3, [sp, #4]
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d119      	bne.n	8008a14 <dir_register+0x50>
 80089e0:	2307      	movs	r3, #7
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	4618      	mov	r0, r3
}
 80089e6:	b005      	add	sp, #20
 80089e8:	ecbd 8b02 	vpop	{d8}
 80089ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80089f0:	f8b8 700a 	ldrh.w	r7, [r8, #10]
 80089f4:	3f01      	subs	r7, #1
 80089f6:	4217      	tst	r7, r2
 80089f8:	f040 8084 	bne.w	8008b04 <dir_register+0x140>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80089fc:	4640      	mov	r0, r8
 80089fe:	f7ff fa59 	bl	8007eb4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008a02:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008a04:	9002      	str	r0, [sp, #8]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008a06:	f240 8150 	bls.w	8008caa <dir_register+0x2e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	f040 809f 	bne.w	8008b4e <dir_register+0x18a>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008a10:	2301      	movs	r3, #1
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	4618      	mov	r0, r3
}
 8008a16:	b005      	add	sp, #20
 8008a18:	ecbd 8b02 	vpop	{d8}
 8008a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 8008a20:	f8d4 901c 	ldr.w	r9, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a24:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a28:	f106 0b34 	add.w	fp, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a2c:	45d1      	cmp	r9, sl
 8008a2e:	d018      	beq.n	8008a62 <dir_register+0x9e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a30:	78f3      	ldrb	r3, [r6, #3]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d16b      	bne.n	8008b0e <dir_register+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008a36:	7870      	ldrb	r0, [r6, #1]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	464a      	mov	r2, r9
 8008a3c:	4659      	mov	r1, fp
 8008a3e:	f7fe feef 	bl	8007820 <disk_read>
 8008a42:	b150      	cbz	r0, 8008a5a <dir_register+0x96>
			fs->winsect = sector;
 8008a44:	f04f 33ff 	mov.w	r3, #4294967295
 8008a48:	6333      	str	r3, [r6, #48]	; 0x30
				res = FR_DISK_ERR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	9301      	str	r3, [sp, #4]
}
 8008a50:	b005      	add	sp, #20
 8008a52:	ecbd 8b02 	vpop	{d8}
 8008a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008a5a:	f8d4 a01c 	ldr.w	sl, [r4, #28]
			fs->winsect = sector;
 8008a5e:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008a62:	6a20      	ldr	r0, [r4, #32]
 8008a64:	7803      	ldrb	r3, [r0, #0]
 8008a66:	2be5      	cmp	r3, #229	; 0xe5
 8008a68:	d000      	beq.n	8008a6c <dir_register+0xa8>
 8008a6a:	bb2b      	cbnz	r3, 8008ab8 <dir_register+0xf4>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a6c:	45d1      	cmp	r9, sl
 8008a6e:	d007      	beq.n	8008a80 <dir_register+0xbc>
 8008a70:	4651      	mov	r1, sl
 8008a72:	4630      	mov	r0, r6
 8008a74:	f7fe ff96 	bl	80079a4 <move_window.part.0>
		if (res == FR_OK) {
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	f040 808a 	bne.w	8008b92 <dir_register+0x1ce>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008a7e:	6a20      	ldr	r0, [r4, #32]
		*d++ = (BYTE)val;
 8008a80:	2220      	movs	r2, #32
 8008a82:	2100      	movs	r1, #0
 8008a84:	f001 f880 	bl	8009b88 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008a88:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008a8a:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8008a8e:	1a9a      	subs	r2, r3, r2
 8008a90:	2a02      	cmp	r2, #2
 8008a92:	f240 80f1 	bls.w	8008c78 <dir_register+0x2b4>
			*d++ = *s++;
 8008a96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008a9c:	605a      	str	r2, [r3, #4]
 8008a9e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8008aa2:	721a      	strb	r2, [r3, #8]
 8008aa4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8008aa8:	725a      	strb	r2, [r3, #9]
 8008aaa:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8008aae:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	9801      	ldr	r0, [sp, #4]
 8008ab4:	70f3      	strb	r3, [r6, #3]
 8008ab6:	e796      	b.n	80089e6 <dir_register+0x22>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008ab8:	6965      	ldr	r5, [r4, #20]
 8008aba:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008abc:	f1ba 0f00 	cmp.w	sl, #0
 8008ac0:	d08e      	beq.n	80089e0 <dir_register+0x1c>
 8008ac2:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8008ac6:	d28b      	bcs.n	80089e0 <dir_register+0x1c>
	FATFS *fs = dp->obj.fs;
 8008ac8:	f8d4 8000 	ldr.w	r8, [r4]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008acc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008ad0:	fbb5 f2f3 	udiv	r2, r5, r3
 8008ad4:	fb03 5312 	mls	r3, r3, r2, r5
 8008ad8:	b143      	cbz	r3, 8008aec <dir_register+0x128>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008ada:	464a      	mov	r2, r9
 8008adc:	f108 0734 	add.w	r7, r8, #52	; 0x34
 8008ae0:	46d1      	mov	r9, sl
 8008ae2:	4692      	mov	sl, r2
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008ae4:	443b      	add	r3, r7
	dp->dptr = ofs;						/* Current entry */
 8008ae6:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008ae8:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008aea:	e79f      	b.n	8008a2c <dir_register+0x68>
		if (!dp->clust) {		/* Static table */
 8008aec:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8008aee:	f10a 0001 	add.w	r0, sl, #1
 8008af2:	61e0      	str	r0, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8008af4:	2900      	cmp	r1, #0
 8008af6:	f47f af7b 	bne.w	80089f0 <dir_register+0x2c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008afa:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8008afe:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8008b02:	d948      	bls.n	8008b96 <dir_register+0x1d2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008b04:	46ca      	mov	sl, r9
 8008b06:	f108 0734 	add.w	r7, r8, #52	; 0x34
 8008b0a:	4681      	mov	r9, r0
 8008b0c:	e7ea      	b.n	8008ae4 <dir_register+0x120>
 8008b0e:	7870      	ldrb	r0, [r6, #1]
 8008b10:	2301      	movs	r3, #1
 8008b12:	4652      	mov	r2, sl
 8008b14:	4659      	mov	r1, fp
 8008b16:	f7fe fe91 	bl	800783c <disk_write>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	f47f af78 	bne.w	8008a10 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008b20:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 8008b22:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008b24:	ebaa 0203 	sub.w	r2, sl, r3
 8008b28:	69f3      	ldr	r3, [r6, #28]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d283      	bcs.n	8008a36 <dir_register+0x72>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b2e:	78b5      	ldrb	r5, [r6, #2]
 8008b30:	2d01      	cmp	r5, #1
 8008b32:	d801      	bhi.n	8008b38 <dir_register+0x174>
 8008b34:	e77f      	b.n	8008a36 <dir_register+0x72>
					wsect += fs->fsize;
 8008b36:	69f3      	ldr	r3, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008b38:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8008b3a:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008b3c:	4652      	mov	r2, sl
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4659      	mov	r1, fp
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b42:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8008b44:	f7fe fe7a 	bl	800783c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b48:	2d01      	cmp	r5, #1
 8008b4a:	d1f4      	bne.n	8008b36 <dir_register+0x172>
 8008b4c:	e773      	b.n	8008a36 <dir_register+0x72>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008b4e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008b52:	4298      	cmp	r0, r3
 8008b54:	d221      	bcs.n	8008b9a <dir_register+0x1d6>
	clst -= 2;
 8008b56:	1e82      	subs	r2, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b58:	3b02      	subs	r3, #2
	clst -= 2;
 8008b5a:	9203      	str	r2, [sp, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008b5c:	f108 0734 	add.w	r7, r8, #52	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8008b60:	9a02      	ldr	r2, [sp, #8]
 8008b62:	61a2      	str	r2, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b64:	9a03      	ldr	r2, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b66:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b6a:	4293      	cmp	r3, r2
	return clst * fs->csize + fs->database;
 8008b6c:	bf82      	ittt	hi
 8008b6e:	f8d8 302c 	ldrhi.w	r3, [r8, #44]	; 0x2c
 8008b72:	f8b8 900a 	ldrhhi.w	r9, [r8, #10]
 8008b76:	fb02 3909 	mlahi	r9, r2, r9, r3
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008b7a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008b7e:	fbb5 f2f3 	udiv	r2, r5, r3
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b82:	bf98      	it	ls
 8008b84:	f04f 0900 	movls.w	r9, #0
				dp->sect = clust2sect(fs, clst);
 8008b88:	f8c4 901c 	str.w	r9, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008b8c:	fb03 5312 	mls	r3, r3, r2, r5
 8008b90:	e7a8      	b.n	8008ae4 <dir_register+0x120>
 8008b92:	9001      	str	r0, [sp, #4]
 8008b94:	e727      	b.n	80089e6 <dir_register+0x22>
				dp->sect = 0; return FR_NO_FILE;
 8008b96:	61e1      	str	r1, [r4, #28]
 8008b98:	e722      	b.n	80089e0 <dir_register+0x1c>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008b9a:	69a1      	ldr	r1, [r4, #24]
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7ff fb25 	bl	80081ec <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	9002      	str	r0, [sp, #8]
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f43f af1a 	beq.w	80089e0 <dir_register+0x1c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008bac:	2801      	cmp	r0, #1
 8008bae:	d07c      	beq.n	8008caa <dir_register+0x2e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	f43f af2d 	beq.w	8008a10 <dir_register+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008bb6:	f898 3003 	ldrb.w	r3, [r8, #3]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d179      	bne.n	8008cb2 <dir_register+0x2ee>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008bbe:	f108 0734 	add.w	r7, r8, #52	; 0x34
		*d++ = (BYTE)val;
 8008bc2:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	4638      	mov	r0, r7
 8008bca:	f000 ffdd 	bl	8009b88 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bce:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 8008bd2:	9a02      	ldr	r2, [sp, #8]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bd4:	3b02      	subs	r3, #2
	clst -= 2;
 8008bd6:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bd8:	429a      	cmp	r2, r3
	clst -= 2;
 8008bda:	9203      	str	r2, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008bdc:	f080 80a4 	bcs.w	8008d28 <dir_register+0x364>
	return clst * fs->csize + fs->database;
 8008be0:	4610      	mov	r0, r2
 8008be2:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8008be6:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8008bea:	fb00 2a01 	mla	sl, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008bee:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
 8008bf2:	2900      	cmp	r1, #0
 8008bf4:	f000 8095 	beq.w	8008d22 <dir_register+0x35e>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	ee08 ba10 	vmov	s16, fp
 8008bfe:	46bb      	mov	fp, r7
 8008c00:	4627      	mov	r7, r4
 8008c02:	4654      	mov	r4, sl
 8008c04:	469a      	mov	sl, r3
						fs->wflag = 1;
 8008c06:	f04f 0301 	mov.w	r3, #1
 8008c0a:	f888 3003 	strb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008c0e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008c12:	2301      	movs	r3, #1
 8008c14:	4622      	mov	r2, r4
 8008c16:	4659      	mov	r1, fp
 8008c18:	f7fe fe10 	bl	800783c <disk_write>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	f47f aef7 	bne.w	8008a10 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008c22:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8008c26:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008c2a:	1ae2      	subs	r2, r4, r3
 8008c2c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d214      	bcs.n	8008c5e <dir_register+0x29a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c34:	f898 9002 	ldrb.w	r9, [r8, #2]
 8008c38:	f1b9 0f01 	cmp.w	r9, #1
 8008c3c:	d802      	bhi.n	8008c44 <dir_register+0x280>
 8008c3e:	e00e      	b.n	8008c5e <dir_register+0x29a>
					wsect += fs->fsize;
 8008c40:	f8d8 301c 	ldr.w	r3, [r8, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c44:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 8008c48:	441c      	add	r4, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c4a:	4622      	mov	r2, r4
 8008c4c:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c4e:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c52:	4659      	mov	r1, fp
 8008c54:	f7fe fdf2 	bl	800783c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c58:	f1b9 0f01 	cmp.w	r9, #1
 8008c5c:	d1f0      	bne.n	8008c40 <dir_register+0x27c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c5e:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
 8008c62:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8008c66:	f10a 0301 	add.w	r3, sl, #1
 8008c6a:	1c4c      	adds	r4, r1, #1
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	f8c8 4030 	str.w	r4, [r8, #48]	; 0x30
 8008c72:	d24d      	bcs.n	8008d10 <dir_register+0x34c>
 8008c74:	469a      	mov	sl, r3
 8008c76:	e7c6      	b.n	8008c06 <dir_register+0x242>
			*d++ = *s++;
 8008c78:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8008c82:	705a      	strb	r2, [r3, #1]
 8008c84:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8008c88:	709a      	strb	r2, [r3, #2]
 8008c8a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8008c8e:	70da      	strb	r2, [r3, #3]
 8008c90:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8008c94:	711a      	strb	r2, [r3, #4]
 8008c96:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8008c9a:	715a      	strb	r2, [r3, #5]
 8008c9c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8008ca0:	719a      	strb	r2, [r3, #6]
 8008ca2:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8008ca6:	71da      	strb	r2, [r3, #7]
 8008ca8:	e6f9      	b.n	8008a9e <dir_register+0xda>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008caa:	2302      	movs	r3, #2
 8008cac:	9301      	str	r3, [sp, #4]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	e699      	b.n	80089e6 <dir_register+0x22>
		wsect = fs->winsect;	/* Current sector number */
 8008cb2:	f8d8 a030 	ldr.w	sl, [r8, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008cb6:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008cba:	f108 0734 	add.w	r7, r8, #52	; 0x34
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	4652      	mov	r2, sl
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	f7fe fdba 	bl	800783c <disk_write>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	f47f aea1 	bne.w	8008a10 <dir_register+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cce:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8008cd2:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cd6:	ebaa 0103 	sub.w	r1, sl, r3
 8008cda:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8008cde:	4299      	cmp	r1, r3
 8008ce0:	f4bf af6f 	bcs.w	8008bc2 <dir_register+0x1fe>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ce4:	f898 9002 	ldrb.w	r9, [r8, #2]
 8008ce8:	f1b9 0f01 	cmp.w	r9, #1
 8008cec:	d802      	bhi.n	8008cf4 <dir_register+0x330>
 8008cee:	e768      	b.n	8008bc2 <dir_register+0x1fe>
					wsect += fs->fsize;
 8008cf0:	f8d8 301c 	ldr.w	r3, [r8, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008cf4:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 8008cf8:	449a      	add	sl, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008cfa:	4652      	mov	r2, sl
 8008cfc:	2301      	movs	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cfe:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7fe fd9a 	bl	800783c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d08:	f1b9 0f01 	cmp.w	r9, #1
 8008d0c:	d1f0      	bne.n	8008cf0 <dir_register+0x32c>
 8008d0e:	e758      	b.n	8008bc2 <dir_register+0x1fe>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008d10:	f8d8 3018 	ldr.w	r3, [r8, #24]
					fs->winsect -= n;							/* Restore window offset */
 8008d14:	463c      	mov	r4, r7
 8008d16:	465f      	mov	r7, fp
 8008d18:	ee18 ba10 	vmov	fp, s16
 8008d1c:	eba1 0a0a 	sub.w	sl, r1, sl
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008d20:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8008d22:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
 8008d26:	e71b      	b.n	8008b60 <dir_register+0x19c>
	return clst * fs->csize + fs->database;
 8008d28:	f8b8 100a 	ldrh.w	r1, [r8, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008d2c:	f04f 0a00 	mov.w	sl, #0
 8008d30:	e75d      	b.n	8008bee <dir_register+0x22a>
 8008d32:	bf00      	nop

08008d34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008d34:	b510      	push	{r4, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8008d3c:	b181      	cbz	r1, 8008d60 <f_mount+0x2c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008d3e:	f891 c000 	ldrb.w	ip, [r1]
 8008d42:	f1bc 0f20 	cmp.w	ip, #32
 8008d46:	d911      	bls.n	8008d6c <f_mount+0x38>
 8008d48:	4663      	mov	r3, ip
 8008d4a:	4608      	mov	r0, r1
 8008d4c:	e003      	b.n	8008d56 <f_mount+0x22>
 8008d4e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	d90a      	bls.n	8008d6c <f_mount+0x38>
 8008d56:	2b3a      	cmp	r3, #58	; 0x3a
 8008d58:	d1f9      	bne.n	8008d4e <f_mount+0x1a>
			i = *tp++ - '0';
 8008d5a:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008d5c:	4288      	cmp	r0, r1
 8008d5e:	d002      	beq.n	8008d66 <f_mount+0x32>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d60:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8008d62:	b002      	add	sp, #8
 8008d64:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008d66:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008d6a:	d1f9      	bne.n	8008d60 <f_mount+0x2c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008d6c:	4910      	ldr	r1, [pc, #64]	; (8008db0 <f_mount+0x7c>)
 8008d6e:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 8008d70:	b163      	cbz	r3, 8008d8c <f_mount+0x58>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008d72:	4810      	ldr	r0, [pc, #64]	; (8008db4 <f_mount+0x80>)
 8008d74:	6804      	ldr	r4, [r0, #0]
 8008d76:	42a3      	cmp	r3, r4
 8008d78:	bf04      	itt	eq
 8008d7a:	2400      	moveq	r4, #0
 8008d7c:	6004      	streq	r4, [r0, #0]
 8008d7e:	6904      	ldr	r4, [r0, #16]
 8008d80:	429c      	cmp	r4, r3
 8008d82:	bf04      	itt	eq
 8008d84:	2400      	moveq	r4, #0
 8008d86:	6104      	streq	r4, [r0, #16]
		cfs->fs_type = 0;				/* Clear old fs object */
 8008d88:	2000      	movs	r0, #0
 8008d8a:	7018      	strb	r0, [r3, #0]
	if (fs) {
 8008d8c:	9b01      	ldr	r3, [sp, #4]
 8008d8e:	b15b      	cbz	r3, 8008da8 <f_mount+0x74>
		fs->fs_type = 0;				/* Clear new fs object */
 8008d90:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008d92:	2a01      	cmp	r2, #1
		fs->fs_type = 0;				/* Clear new fs object */
 8008d94:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8008d96:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008d98:	d1e3      	bne.n	8008d62 <f_mount+0x2e>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	a901      	add	r1, sp, #4
 8008d9e:	4668      	mov	r0, sp
 8008da0:	f7fe fe3a 	bl	8007a18 <find_volume>
}
 8008da4:	b002      	add	sp, #8
 8008da6:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008da8:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8008daa:	600b      	str	r3, [r1, #0]
}
 8008dac:	b002      	add	sp, #8
 8008dae:	bd10      	pop	{r4, pc}
 8008db0:	2000411c 	.word	0x2000411c
 8008db4:	20004120 	.word	0x20004120

08008db8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dbc:	b090      	sub	sp, #64	; 0x40
 8008dbe:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	f000 809c 	beq.w	8008efe <f_open+0x146>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008dc6:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8008dca:	4616      	mov	r6, r2
 8008dcc:	4604      	mov	r4, r0
 8008dce:	463a      	mov	r2, r7
 8008dd0:	a903      	add	r1, sp, #12
 8008dd2:	a801      	add	r0, sp, #4
 8008dd4:	f7fe fe20 	bl	8007a18 <find_volume>
	if (res == FR_OK) {
 8008dd8:	4605      	mov	r5, r0
 8008dda:	b128      	cbz	r0, 8008de8 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008ddc:	2300      	movs	r3, #0
 8008dde:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8008de0:	4628      	mov	r0, r5
 8008de2:	b010      	add	sp, #64	; 0x40
 8008de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 8008de8:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008dea:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8008dec:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008dee:	a804      	add	r0, sp, #16
 8008df0:	f7ff fb8e 	bl	8008510 <follow_path>
		if (res == FR_OK) {
 8008df4:	bb00      	cbnz	r0, 8008e38 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008df6:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f2c0 8086 	blt.w	8008f0c <f_open+0x154>
		if (Files[i].fs) {	/* Existing entry */
 8008e00:	4baa      	ldr	r3, [pc, #680]	; (80090ac <f_open+0x2f4>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e02:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 8008e04:	f8d3 8000 	ldr.w	r8, [r3]
				Files[i].clu == dp->obj.sclust &&
 8008e08:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 8008e0c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e10:	f027 0201 	bic.w	r2, r7, #1
 8008e14:	4611      	mov	r1, r2
		if (Files[i].fs) {	/* Existing entry */
 8008e16:	f1b8 0f00 	cmp.w	r8, #0
 8008e1a:	f000 80fb 	beq.w	8009014 <f_open+0x25c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e1e:	4580      	cmp	r8, r0
 8008e20:	d076      	beq.n	8008f10 <f_open+0x158>
		if (Files[i].fs) {	/* Existing entry */
 8008e22:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8008e26:	f1b8 0f00 	cmp.w	r8, #0
 8008e2a:	f000 8088 	beq.w	8008f3e <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e2e:	4580      	cmp	r8, r0
 8008e30:	f000 8129 	beq.w	8009086 <f_open+0x2ce>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008e34:	2512      	movs	r5, #18
 8008e36:	e7d1      	b.n	8008ddc <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008e38:	f016 0f1c 	tst.w	r6, #28
 8008e3c:	d064      	beq.n	8008f08 <f_open+0x150>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008e3e:	2804      	cmp	r0, #4
 8008e40:	d162      	bne.n	8008f08 <f_open+0x150>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e42:	4b9a      	ldr	r3, [pc, #616]	; (80090ac <f_open+0x2f4>)
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	b112      	cbz	r2, 8008e4e <f_open+0x96>
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1f2      	bne.n	8008e34 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008e4e:	a804      	add	r0, sp, #16
 8008e50:	f7ff fdb8 	bl	80089c4 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008e54:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d155      	bne.n	8008f08 <f_open+0x150>
				dw = GET_FATTIME();
 8008e5c:	f7fe fcba 	bl	80077d4 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8008e62:	b2c6      	uxtb	r6, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8008e64:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8008e68:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 8008e6c:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8008e6e:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val;
 8008e70:	7458      	strb	r0, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e72:	739e      	strb	r6, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e74:	741a      	strb	r2, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8008e78:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val;
 8008e7a:	7658      	strb	r0, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e7c:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e7e:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008e82:	9b03      	ldr	r3, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008e84:	2120      	movs	r1, #32
 8008e86:	72d1      	strb	r1, [r2, #11]
	if (fs->fs_type == FS_FAT32) {
 8008e88:	7819      	ldrb	r1, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8008e8c:	2903      	cmp	r1, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008e8e:	bf08      	it	eq
 8008e90:	8a91      	ldrheq	r1, [r2, #20]
	cl = ld_word(dir + DIR_FstClusLO);
 8008e92:	8b56      	ldrh	r6, [r2, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008e94:	bf08      	it	eq
 8008e96:	ea46 4601 	orreq.w	r6, r6, r1, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	8351      	strh	r1, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 8008e9e:	7818      	ldrb	r0, [r3, #0]
 8008ea0:	2803      	cmp	r0, #3
 8008ea2:	d100      	bne.n	8008ea6 <f_open+0xee>
	*ptr++ = (BYTE)val; val >>= 8;
 8008ea4:	8291      	strh	r1, [r2, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 8008ea6:	990c      	ldr	r1, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 8008eac:	2101      	movs	r1, #1
 8008eae:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8008eb0:	b19e      	cbz	r6, 8008eda <f_open+0x122>
						res = remove_chain(&dj.obj, cl, 0);
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8008eb6:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8008eba:	f7ff fcc9 	bl	8008850 <remove_chain>
						if (res == FR_OK) {
 8008ebe:	bb18      	cbnz	r0, 8008f08 <f_open+0x150>
							res = move_window(fs, dw);
 8008ec0:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ec4:	4590      	cmp	r8, r2
 8008ec6:	f000 80eb 	beq.w	80090a0 <f_open+0x2e8>
 8008eca:	4618      	mov	r0, r3
 8008ecc:	4641      	mov	r1, r8
 8008ece:	f7fe fd69 	bl	80079a4 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008ed2:	9b03      	ldr	r3, [sp, #12]
 8008ed4:	3e01      	subs	r6, #1
 8008ed6:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8008ed8:	b9b0      	cbnz	r0, 8008f08 <f_open+0x150>
				mode |= FA_MODIFIED;
 8008eda:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ede:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee4:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ee6:	3900      	subs	r1, #0
			fp->dir_ptr = dj.dir;
 8008ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eea:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008eec:	bf18      	it	ne
 8008eee:	2101      	movne	r1, #1
 8008ef0:	a804      	add	r0, sp, #16
 8008ef2:	f7fe fcbd 	bl	8007870 <inc_lock>
 8008ef6:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008ef8:	bb68      	cbnz	r0, 8008f56 <f_open+0x19e>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008efa:	2502      	movs	r5, #2
 8008efc:	e76e      	b.n	8008ddc <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8008efe:	2509      	movs	r5, #9
}
 8008f00:	4628      	mov	r0, r5
 8008f02:	b010      	add	sp, #64	; 0x40
 8008f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f08:	4605      	mov	r5, r0
 8008f0a:	e767      	b.n	8008ddc <f_open+0x24>
				res = FR_INVALID_NAME;
 8008f0c:	2506      	movs	r5, #6
 8008f0e:	e765      	b.n	8008ddc <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f10:	6858      	ldr	r0, [r3, #4]
 8008f12:	4560      	cmp	r0, ip
 8008f14:	f000 80bc 	beq.w	8009090 <f_open+0x2d8>
		if (Files[i].fs) {	/* Existing entry */
 8008f18:	6918      	ldr	r0, [r3, #16]
 8008f1a:	b180      	cbz	r0, 8008f3e <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f1c:	4540      	cmp	r0, r8
 8008f1e:	d189      	bne.n	8008e34 <f_open+0x7c>
 8008f20:	6958      	ldr	r0, [r3, #20]
 8008f22:	4584      	cmp	ip, r0
 8008f24:	d186      	bne.n	8008e34 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8008f26:	6998      	ldr	r0, [r3, #24]
 8008f28:	4570      	cmp	r0, lr
 8008f2a:	d183      	bne.n	8008e34 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f2c:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	d167      	bne.n	8009002 <f_open+0x24a>
 8008f32:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8008f36:	899b      	ldrh	r3, [r3, #12]
 8008f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f3c:	d061      	beq.n	8009002 <f_open+0x24a>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008f3e:	f016 0f1c 	tst.w	r6, #28
 8008f42:	d04c      	beq.n	8008fde <f_open+0x226>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008f44:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008f48:	f013 0f11 	tst.w	r3, #17
 8008f4c:	d160      	bne.n	8009010 <f_open+0x258>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008f4e:	0773      	lsls	r3, r6, #29
 8008f50:	d559      	bpl.n	8009006 <f_open+0x24e>
 8008f52:	2508      	movs	r5, #8
 8008f54:	e742      	b.n	8008ddc <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008f56:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8008f5c:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 8008f60:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8008f62:	2a03      	cmp	r2, #3
 8008f64:	d102      	bne.n	8008f6c <f_open+0x1b4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008f66:	8a9a      	ldrh	r2, [r3, #20]
 8008f68:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008f6c:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 8008f6e:	f8d3 801c 	ldr.w	r8, [r3, #28]
			fp->obj.id = fs->id;
 8008f72:	f8b9 3006 	ldrh.w	r3, [r9, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008f76:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008f7a:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008f7c:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->flag = mode;		/* Set file access mode */
 8008f80:	7527      	strb	r7, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008f82:	f8c4 9000 	str.w	r9, [r4]
			fp->obj.id = fs->id;
 8008f86:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008f88:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 8008f8a:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008f8c:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008f8e:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 8008f90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f94:	4650      	mov	r0, sl
 8008f96:	f000 fdf7 	bl	8009b88 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008f9a:	06bf      	lsls	r7, r7, #26
 8008f9c:	f57f af20 	bpl.w	8008de0 <f_open+0x28>
 8008fa0:	f1b8 0f00 	cmp.w	r8, #0
 8008fa4:	f43f af1c 	beq.w	8008de0 <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008fa8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008fac:	f8b9 700a 	ldrh.w	r7, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008fb0:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008fb4:	fb03 f707 	mul.w	r7, r3, r7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008fb8:	4547      	cmp	r7, r8
 8008fba:	d306      	bcc.n	8008fca <f_open+0x212>
 8008fbc:	e03e      	b.n	800903c <f_open+0x284>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008fbe:	1c70      	adds	r0, r6, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008fc0:	eba8 0807 	sub.w	r8, r8, r7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008fc4:	d01b      	beq.n	8008ffe <f_open+0x246>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008fc6:	4547      	cmp	r7, r8
 8008fc8:	d234      	bcs.n	8009034 <f_open+0x27c>
					clst = get_fat(&fp->obj, clst);
 8008fca:	4631      	mov	r1, r6
 8008fcc:	6820      	ldr	r0, [r4, #0]
 8008fce:	f7fe ff71 	bl	8007eb4 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8008fd2:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8008fd4:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 8008fd6:	d8f2      	bhi.n	8008fbe <f_open+0x206>
 8008fd8:	2502      	movs	r5, #2
				fp->clust = clst;
 8008fda:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008fdc:	e6fe      	b.n	8008ddc <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008fde:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008fe2:	06d9      	lsls	r1, r3, #27
 8008fe4:	d424      	bmi.n	8009030 <f_open+0x278>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008fe6:	07b1      	lsls	r1, r6, #30
 8008fe8:	d501      	bpl.n	8008fee <f_open+0x236>
 8008fea:	07db      	lsls	r3, r3, #31
 8008fec:	d410      	bmi.n	8009010 <f_open+0x258>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008fee:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008ff2:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008ff4:	2e00      	cmp	r6, #0
 8008ff6:	f47f af70 	bne.w	8008eda <f_open+0x122>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	e771      	b.n	8008ee2 <f_open+0x12a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008ffe:	2501      	movs	r5, #1
 8009000:	e7eb      	b.n	8008fda <f_open+0x222>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009002:	2510      	movs	r5, #16
 8009004:	e6ea      	b.n	8008ddc <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009006:	0730      	lsls	r0, r6, #28
 8009008:	f53f af28 	bmi.w	8008e5c <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	e768      	b.n	8008ee2 <f_open+0x12a>
						res = FR_DENIED;
 8009010:	2507      	movs	r5, #7
 8009012:	e6e3      	b.n	8008ddc <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 8009014:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8009018:	f1b8 0f00 	cmp.w	r8, #0
 800901c:	d08f      	beq.n	8008f3e <f_open+0x186>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800901e:	4540      	cmp	r0, r8
 8009020:	d18d      	bne.n	8008f3e <f_open+0x186>
 8009022:	6958      	ldr	r0, [r3, #20]
 8009024:	4560      	cmp	r0, ip
 8009026:	d18a      	bne.n	8008f3e <f_open+0x186>
				Files[i].clu == dp->obj.sclust &&
 8009028:	6998      	ldr	r0, [r3, #24]
 800902a:	4570      	cmp	r0, lr
 800902c:	d187      	bne.n	8008f3e <f_open+0x186>
 800902e:	e77d      	b.n	8008f2c <f_open+0x174>
					res = FR_NO_FILE;
 8009030:	2504      	movs	r5, #4
 8009032:	e6d3      	b.n	8008ddc <f_open+0x24>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009034:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009038:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800903c:	fbb8 f2f3 	udiv	r2, r8, r3
 8009040:	fb03 8312 	mls	r3, r3, r2, r8
				fp->clust = clst;
 8009044:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009046:	2b00      	cmp	r3, #0
 8009048:	f43f aeca 	beq.w	8008de0 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800904c:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8009050:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009052:	3b02      	subs	r3, #2
 8009054:	429e      	cmp	r6, r3
 8009056:	f4bf af50 	bcs.w	8008efa <f_open+0x142>
	return clst * fs->csize + fs->database;
 800905a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800905e:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8009062:	fb06 3301 	mla	r3, r6, r1, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009066:	2b00      	cmp	r3, #0
 8009068:	f43f af47 	beq.w	8008efa <f_open+0x142>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800906c:	441a      	add	r2, r3
 800906e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009070:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009074:	4651      	mov	r1, sl
 8009076:	2301      	movs	r3, #1
 8009078:	f7fe fbd2 	bl	8007820 <disk_read>
 800907c:	2800      	cmp	r0, #0
 800907e:	f43f aeaf 	beq.w	8008de0 <f_open+0x28>
 8009082:	2501      	movs	r5, #1
 8009084:	e6aa      	b.n	8008ddc <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009086:	6958      	ldr	r0, [r3, #20]
 8009088:	4560      	cmp	r0, ip
 800908a:	f47f aed3 	bne.w	8008e34 <f_open+0x7c>
 800908e:	e74a      	b.n	8008f26 <f_open+0x16e>
				Files[i].clu == dp->obj.sclust &&
 8009090:	6898      	ldr	r0, [r3, #8]
 8009092:	4570      	cmp	r0, lr
 8009094:	d007      	beq.n	80090a6 <f_open+0x2ee>
		if (Files[i].fs) {	/* Existing entry */
 8009096:	6918      	ldr	r0, [r3, #16]
 8009098:	2800      	cmp	r0, #0
 800909a:	f47f aec8 	bne.w	8008e2e <f_open+0x76>
 800909e:	e74e      	b.n	8008f3e <f_open+0x186>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80090a0:	3e01      	subs	r6, #1
 80090a2:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 80090a4:	e719      	b.n	8008eda <f_open+0x122>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80090a6:	4628      	mov	r0, r5
 80090a8:	e741      	b.n	8008f2e <f_open+0x176>
 80090aa:	bf00      	nop
 80090ac:	20004120 	.word	0x20004120

080090b0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80090b6:	2300      	movs	r3, #0
{
 80090b8:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 80090ba:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80090bc:	b150      	cbz	r0, 80090d4 <f_read+0x24>
 80090be:	6803      	ldr	r3, [r0, #0]
 80090c0:	4604      	mov	r4, r0
 80090c2:	b13b      	cbz	r3, 80090d4 <f_read+0x24>
 80090c4:	4690      	mov	r8, r2
 80090c6:	781a      	ldrb	r2, [r3, #0]
 80090c8:	b122      	cbz	r2, 80090d4 <f_read+0x24>
 80090ca:	88da      	ldrh	r2, [r3, #6]
 80090cc:	460e      	mov	r6, r1
 80090ce:	8881      	ldrh	r1, [r0, #4]
 80090d0:	4291      	cmp	r1, r2
 80090d2:	d005      	beq.n	80090e0 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80090d4:	f04f 0909 	mov.w	r9, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80090d8:	4648      	mov	r0, r9
 80090da:	b005      	add	sp, #20
 80090dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80090e0:	7858      	ldrb	r0, [r3, #1]
 80090e2:	f7fe fb83 	bl	80077ec <disk_status>
 80090e6:	07c2      	lsls	r2, r0, #31
 80090e8:	d4f4      	bmi.n	80090d4 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80090ea:	f894 9015 	ldrb.w	r9, [r4, #21]
 80090ee:	f1b9 0f00 	cmp.w	r9, #0
 80090f2:	d1f1      	bne.n	80090d8 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80090f4:	7d23      	ldrb	r3, [r4, #20]
 80090f6:	f013 0301 	ands.w	r3, r3, #1
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	f000 80f1 	beq.w	80092e2 <f_read+0x232>
	remain = fp->obj.objsize - fp->fptr;
 8009100:	69a1      	ldr	r1, [r4, #24]
 8009102:	68e3      	ldr	r3, [r4, #12]
 8009104:	1a5b      	subs	r3, r3, r1
 8009106:	4598      	cmp	r8, r3
 8009108:	bf28      	it	cs
 800910a:	4698      	movcs	r8, r3
	for ( ;  btr;								/* Repeat until all data read */
 800910c:	f1b8 0f00 	cmp.w	r8, #0
 8009110:	d0e2      	beq.n	80090d8 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009112:	46a3      	mov	fp, r4
 8009114:	f104 0331 	add.w	r3, r4, #49	; 0x31
 8009118:	f85b ab30 	ldr.w	sl, [fp], #48
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009122:	4618      	mov	r0, r3
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009124:	fbb1 f3f0 	udiv	r3, r1, r0
 8009128:	fb00 1513 	mls	r5, r0, r3, r1
 800912c:	2d00      	cmp	r5, #0
 800912e:	d147      	bne.n	80091c0 <f_read+0x110>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009130:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8009134:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8009136:	401a      	ands	r2, r3
 8009138:	d07a      	beq.n	8009230 <f_read+0x180>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800913a:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800913c:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;
 8009140:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009142:	3b02      	subs	r3, #2
 8009144:	4298      	cmp	r0, r3
 8009146:	f080 8081 	bcs.w	800924c <f_read+0x19c>
	return clst * fs->csize + fs->database;
 800914a:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800914e:	f8da 502c 	ldr.w	r5, [sl, #44]	; 0x2c
 8009152:	fb01 5500 	mla	r5, r1, r0, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009156:	2d00      	cmp	r5, #0
 8009158:	d078      	beq.n	800924c <f_read+0x19c>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800915a:	f8ba 000c 	ldrh.w	r0, [sl, #12]
			if (cc) {							/* Read maximum contiguous sectors directly */
 800915e:	4540      	cmp	r0, r8
			sect += csect;
 8009160:	4415      	add	r5, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009162:	d87b      	bhi.n	800925c <f_read+0x1ac>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009164:	fbb8 f3f0 	udiv	r3, r8, r0
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009168:	18d0      	adds	r0, r2, r3
 800916a:	4288      	cmp	r0, r1
					cc = fs->csize - csect;
 800916c:	bf88      	it	hi
 800916e:	1a8b      	subhi	r3, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009170:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8009174:	9302      	str	r3, [sp, #8]
 8009176:	462a      	mov	r2, r5
 8009178:	4631      	mov	r1, r6
 800917a:	f7fe fb51 	bl	8007820 <disk_read>
 800917e:	2800      	cmp	r0, #0
 8009180:	f040 80a7 	bne.w	80092d2 <f_read+0x222>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009184:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8009188:	9b02      	ldr	r3, [sp, #8]
 800918a:	2a00      	cmp	r2, #0
 800918c:	f2c0 80c1 	blt.w	8009312 <f_read+0x262>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009190:	f8ba 000c 	ldrh.w	r0, [sl, #12]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009194:	69a1      	ldr	r1, [r4, #24]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009196:	fb00 f303 	mul.w	r3, r0, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800919a:	441e      	add	r6, r3
 800919c:	eba8 0803 	sub.w	r8, r8, r3
 80091a0:	4419      	add	r1, r3
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	61a1      	str	r1, [r4, #24]
 80091a6:	4413      	add	r3, r2
 80091a8:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 80091aa:	f1b8 0f00 	cmp.w	r8, #0
 80091ae:	d093      	beq.n	80090d8 <f_read+0x28>
 80091b0:	f8ba 000c 	ldrh.w	r0, [sl, #12]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80091b4:	fbb1 f3f0 	udiv	r3, r1, r0
 80091b8:	fb00 1513 	mls	r5, r0, r3, r1
 80091bc:	2d00      	cmp	r5, #0
 80091be:	d0b7      	beq.n	8009130 <f_read+0x80>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80091c0:	1b43      	subs	r3, r0, r5
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80091c2:	4543      	cmp	r3, r8
 80091c4:	bf28      	it	cs
 80091c6:	4643      	movcs	r3, r8
	if (cnt) {
 80091c8:	b383      	cbz	r3, 800922c <f_read+0x17c>
 80091ca:	1c6a      	adds	r2, r5, #1
 80091cc:	445a      	add	r2, fp
 80091ce:	1ab2      	subs	r2, r6, r2
 80091d0:	2a02      	cmp	r2, #2
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80091d2:	445d      	add	r5, fp
 80091d4:	f103 3eff 	add.w	lr, r3, #4294967295
 80091d8:	f240 8086 	bls.w	80092e8 <f_read+0x238>
 80091dc:	f1be 0f07 	cmp.w	lr, #7
 80091e0:	f240 8082 	bls.w	80092e8 <f_read+0x238>
 80091e4:	f023 0c03 	bic.w	ip, r3, #3
 80091e8:	44ac      	add	ip, r5
 80091ea:	462a      	mov	r2, r5
 80091ec:	4631      	mov	r1, r6
			*d++ = *s++;
 80091ee:	f852 0b04 	ldr.w	r0, [r2], #4
 80091f2:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
 80091f6:	4562      	cmp	r2, ip
 80091f8:	d1f9      	bne.n	80091ee <f_read+0x13e>
 80091fa:	f023 0203 	bic.w	r2, r3, #3
 80091fe:	4293      	cmp	r3, r2
 8009200:	eb06 0102 	add.w	r1, r6, r2
 8009204:	eb05 0002 	add.w	r0, r5, r2
 8009208:	d00a      	beq.n	8009220 <f_read+0x170>
			*d++ = *s++;
 800920a:	5cad      	ldrb	r5, [r5, r2]
 800920c:	54b5      	strb	r5, [r6, r2]
		} while (--cnt);
 800920e:	ebbe 0202 	subs.w	r2, lr, r2
 8009212:	d005      	beq.n	8009220 <f_read+0x170>
			*d++ = *s++;
 8009214:	7845      	ldrb	r5, [r0, #1]
 8009216:	704d      	strb	r5, [r1, #1]
		} while (--cnt);
 8009218:	2a01      	cmp	r2, #1
 800921a:	d001      	beq.n	8009220 <f_read+0x170>
			*d++ = *s++;
 800921c:	7882      	ldrb	r2, [r0, #2]
 800921e:	708a      	strb	r2, [r1, #2]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009220:	69a1      	ldr	r1, [r4, #24]
 8009222:	441e      	add	r6, r3
 8009224:	eba8 0803 	sub.w	r8, r8, r3
 8009228:	4419      	add	r1, r3
 800922a:	e7ba      	b.n	80091a2 <f_read+0xf2>
 800922c:	61a1      	str	r1, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800922e:	e779      	b.n	8009124 <f_read+0x74>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009230:	bb61      	cbnz	r1, 800928c <f_read+0x1dc>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009232:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009234:	2801      	cmp	r0, #1
 8009236:	d909      	bls.n	800924c <f_read+0x19c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d04a      	beq.n	80092d2 <f_read+0x222>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800923c:	f8da 3018 	ldr.w	r3, [sl, #24]
				fp->clust = clst;				/* Update current cluster */
 8009240:	61e0      	str	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009242:	3b02      	subs	r3, #2
	clst -= 2;
 8009244:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009246:	4298      	cmp	r0, r3
 8009248:	f4ff af7f 	bcc.w	800914a <f_read+0x9a>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800924c:	f04f 0902 	mov.w	r9, #2
}
 8009250:	4648      	mov	r0, r9
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009252:	f884 9015 	strb.w	r9, [r4, #21]
}
 8009256:	b005      	add	sp, #20
 8009258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800925c:	6a22      	ldr	r2, [r4, #32]
 800925e:	42aa      	cmp	r2, r5
 8009260:	d00d      	beq.n	800927e <f_read+0x1ce>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009262:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	db2c      	blt.n	80092c4 <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800926a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800926e:	2301      	movs	r3, #1
 8009270:	462a      	mov	r2, r5
 8009272:	4659      	mov	r1, fp
 8009274:	f7fe fad4 	bl	8007820 <disk_read>
 8009278:	bb58      	cbnz	r0, 80092d2 <f_read+0x222>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800927a:	f8ba 000c 	ldrh.w	r0, [sl, #12]
 800927e:	69a1      	ldr	r1, [r4, #24]
			fp->sect = sect;
 8009280:	6225      	str	r5, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009282:	fbb1 f5f0 	udiv	r5, r1, r0
 8009286:	fb00 1515 	mls	r5, r0, r5, r1
 800928a:	e799      	b.n	80091c0 <f_read+0x110>
					if (fp->cltbl) {
 800928c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800928e:	b3a5      	cbz	r5, 80092fa <f_read+0x24a>
	FATFS *fs = fp->obj.fs;
 8009290:	f8d4 c000 	ldr.w	ip, [r4]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009294:	6868      	ldr	r0, [r5, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009296:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 800929a:	fbb1 f3f3 	udiv	r3, r1, r3
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800929e:	3504      	adds	r5, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80092a0:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 80092a4:	fbb3 f3f1 	udiv	r3, r3, r1
		if (ncl == 0) return 0;	/* End of table? (error) */
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d0cf      	beq.n	800924c <f_read+0x19c>
 80092ac:	4629      	mov	r1, r5
 80092ae:	e004      	b.n	80092ba <f_read+0x20a>
		cl -= ncl; tbl++;		/* Next fragment */
 80092b0:	1a1b      	subs	r3, r3, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80092b2:	f851 0f08 	ldr.w	r0, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d0c8      	beq.n	800924c <f_read+0x19c>
		if (cl < ncl) break;	/* In this fragment? */
 80092ba:	4283      	cmp	r3, r0
 80092bc:	d2f8      	bcs.n	80092b0 <f_read+0x200>
	return cl + *tbl;	/* Return the cluster number */
 80092be:	6848      	ldr	r0, [r1, #4]
 80092c0:	4418      	add	r0, r3
 80092c2:	e7b7      	b.n	8009234 <f_read+0x184>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80092c4:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80092c8:	2301      	movs	r3, #1
 80092ca:	4659      	mov	r1, fp
 80092cc:	f7fe fab6 	bl	800783c <disk_write>
 80092d0:	b1d0      	cbz	r0, 8009308 <f_read+0x258>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092d2:	f8dd 9000 	ldr.w	r9, [sp]
 80092d6:	2301      	movs	r3, #1
}
 80092d8:	4648      	mov	r0, r9
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092da:	7563      	strb	r3, [r4, #21]
}
 80092dc:	b005      	add	sp, #20
 80092de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80092e2:	f04f 0907 	mov.w	r9, #7
 80092e6:	e6f7      	b.n	80090d8 <f_read+0x28>
 80092e8:	1e72      	subs	r2, r6, #1
 80092ea:	18e8      	adds	r0, r5, r3
			*d++ = *s++;
 80092ec:	f815 1b01 	ldrb.w	r1, [r5], #1
 80092f0:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 80092f4:	4285      	cmp	r5, r0
 80092f6:	d1f9      	bne.n	80092ec <f_read+0x23c>
 80092f8:	e792      	b.n	8009220 <f_read+0x170>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80092fa:	69e1      	ldr	r1, [r4, #28]
 80092fc:	6820      	ldr	r0, [r4, #0]
 80092fe:	9202      	str	r2, [sp, #8]
 8009300:	f7fe fdd8 	bl	8007eb4 <get_fat.isra.0>
 8009304:	9a02      	ldr	r2, [sp, #8]
 8009306:	e795      	b.n	8009234 <f_read+0x184>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009308:	7d23      	ldrb	r3, [r4, #20]
 800930a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800930e:	7523      	strb	r3, [r4, #20]
 8009310:	e7ab      	b.n	800926a <f_read+0x1ba>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009312:	6a22      	ldr	r2, [r4, #32]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009314:	f8ba 000c 	ldrh.w	r0, [sl, #12]
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009318:	1b55      	subs	r5, r2, r5
 800931a:	429d      	cmp	r5, r3
 800931c:	f4bf af3a 	bcs.w	8009194 <f_read+0xe4>
	if (cnt) {
 8009320:	2800      	cmp	r0, #0
 8009322:	f43f af37 	beq.w	8009194 <f_read+0xe4>
 8009326:	9a01      	ldr	r2, [sp, #4]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009328:	fb00 6105 	mla	r1, r0, r5, r6
 800932c:	1a8a      	subs	r2, r1, r2
 800932e:	1e45      	subs	r5, r0, #1
 8009330:	2a02      	cmp	r2, #2
 8009332:	9102      	str	r1, [sp, #8]
 8009334:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8009338:	9503      	str	r5, [sp, #12]
 800933a:	d928      	bls.n	800938e <f_read+0x2de>
 800933c:	2d07      	cmp	r5, #7
 800933e:	d926      	bls.n	800938e <f_read+0x2de>
 8009340:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 8009344:	460a      	mov	r2, r1
 8009346:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 800934a:	4671      	mov	r1, lr
			*d++ = *s++;
 800934c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009350:	f842 5b04 	str.w	r5, [r2], #4
		} while (--cnt);
 8009354:	4562      	cmp	r2, ip
 8009356:	d1f9      	bne.n	800934c <f_read+0x29c>
 8009358:	f020 0203 	bic.w	r2, r0, #3
 800935c:	9902      	ldr	r1, [sp, #8]
 800935e:	4290      	cmp	r0, r2
 8009360:	eb01 0c02 	add.w	ip, r1, r2
 8009364:	eb0e 0502 	add.w	r5, lr, r2
 8009368:	f43f af12 	beq.w	8009190 <f_read+0xe0>
			*d++ = *s++;
 800936c:	f81e 0002 	ldrb.w	r0, [lr, r2]
 8009370:	5488      	strb	r0, [r1, r2]
		} while (--cnt);
 8009372:	9903      	ldr	r1, [sp, #12]
 8009374:	1a8a      	subs	r2, r1, r2
 8009376:	f43f af0b 	beq.w	8009190 <f_read+0xe0>
			*d++ = *s++;
 800937a:	7868      	ldrb	r0, [r5, #1]
 800937c:	f88c 0001 	strb.w	r0, [ip, #1]
		} while (--cnt);
 8009380:	2a01      	cmp	r2, #1
 8009382:	f43f af05 	beq.w	8009190 <f_read+0xe0>
			*d++ = *s++;
 8009386:	78aa      	ldrb	r2, [r5, #2]
 8009388:	f88c 2002 	strb.w	r2, [ip, #2]
		} while (--cnt);
 800938c:	e700      	b.n	8009190 <f_read+0xe0>
 800938e:	9a02      	ldr	r2, [sp, #8]
 8009390:	4410      	add	r0, r2
			*d++ = *s++;
 8009392:	f81e 1b01 	ldrb.w	r1, [lr], #1
 8009396:	f802 1b01 	strb.w	r1, [r2], #1
		} while (--cnt);
 800939a:	4290      	cmp	r0, r2
 800939c:	d1f9      	bne.n	8009392 <f_read+0x2e2>
 800939e:	e6f7      	b.n	8009190 <f_read+0xe0>

080093a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80093a6:	2300      	movs	r3, #0
{
 80093a8:	b083      	sub	sp, #12
	*bw = 0;	/* Clear write byte counter */
 80093aa:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80093ac:	b150      	cbz	r0, 80093c4 <f_write+0x24>
 80093ae:	6803      	ldr	r3, [r0, #0]
 80093b0:	4604      	mov	r4, r0
 80093b2:	b13b      	cbz	r3, 80093c4 <f_write+0x24>
 80093b4:	4616      	mov	r6, r2
 80093b6:	781a      	ldrb	r2, [r3, #0]
 80093b8:	b122      	cbz	r2, 80093c4 <f_write+0x24>
 80093ba:	88da      	ldrh	r2, [r3, #6]
 80093bc:	460d      	mov	r5, r1
 80093be:	8881      	ldrh	r1, [r0, #4]
 80093c0:	4291      	cmp	r1, r2
 80093c2:	d005      	beq.n	80093d0 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80093c4:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 80093c8:	4640      	mov	r0, r8
 80093ca:	b003      	add	sp, #12
 80093cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80093d0:	7858      	ldrb	r0, [r3, #1]
 80093d2:	f7fe fa0b 	bl	80077ec <disk_status>
 80093d6:	07c1      	lsls	r1, r0, #31
 80093d8:	d4f4      	bmi.n	80093c4 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80093da:	f894 8015 	ldrb.w	r8, [r4, #21]
 80093de:	f1b8 0f00 	cmp.w	r8, #0
 80093e2:	d1f1      	bne.n	80093c8 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80093e4:	7d23      	ldrb	r3, [r4, #20]
 80093e6:	079a      	lsls	r2, r3, #30
 80093e8:	f140 8138 	bpl.w	800965c <f_write+0x2bc>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80093ec:	69a1      	ldr	r1, [r4, #24]
 80093ee:	42f1      	cmn	r1, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80093f0:	bf28      	it	cs
 80093f2:	43ce      	mvncs	r6, r1
	for ( ;  btw;							/* Repeat until all data written */
 80093f4:	2e00      	cmp	r6, #0
 80093f6:	f000 80a8 	beq.w	800954a <f_write+0x1aa>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80093fa:	46a3      	mov	fp, r4
 80093fc:	f85b 9b30 	ldr.w	r9, [fp], #48
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009400:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009404:	fbb1 f0f3 	udiv	r0, r1, r3
 8009408:	fb03 1210 	mls	r2, r3, r0, r1
 800940c:	2a00      	cmp	r2, #0
 800940e:	f040 80ad 	bne.w	800956c <f_write+0x1cc>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009412:	f8b9 a00a 	ldrh.w	sl, [r9, #10]
 8009416:	f10a 3aff 	add.w	sl, sl, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 800941a:	ea1a 0a00 	ands.w	sl, sl, r0
 800941e:	d110      	bne.n	8009442 <f_write+0xa2>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009420:	2900      	cmp	r1, #0
 8009422:	f040 80e6 	bne.w	80095f2 <f_write+0x252>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009426:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8009428:	2800      	cmp	r0, #0
 800942a:	f000 812b 	beq.w	8009684 <f_write+0x2e4>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800942e:	2801      	cmp	r0, #1
 8009430:	f000 80d7 	beq.w	80095e2 <f_write+0x242>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	f000 8109 	beq.w	800964c <f_write+0x2ac>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800943a:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800943c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800943e:	b903      	cbnz	r3, 8009442 <f_write+0xa2>
 8009440:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009442:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f2c0 80f3 	blt.w	8009632 <f_write+0x292>
	clst -= 2;
 800944c:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800944e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8009452:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009454:	3b02      	subs	r3, #2
 8009456:	429a      	cmp	r2, r3
 8009458:	f080 80c3 	bcs.w	80095e2 <f_write+0x242>
	return clst * fs->csize + fs->database;
 800945c:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8009460:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8009464:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009468:	2a00      	cmp	r2, #0
 800946a:	f000 80ba 	beq.w	80095e2 <f_write+0x242>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800946e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009472:	42b3      	cmp	r3, r6
			sect += csect;
 8009474:	4452      	add	r2, sl
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009476:	d86c      	bhi.n	8009552 <f_write+0x1b2>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009478:	fbb6 f3f3 	udiv	r3, r6, r3
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800947c:	eb0a 0003 	add.w	r0, sl, r3
 8009480:	4288      	cmp	r0, r1
					cc = fs->csize - csect;
 8009482:	bf88      	it	hi
 8009484:	eba1 030a 	subhi.w	r3, r1, sl
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009488:	f899 0001 	ldrb.w	r0, [r9, #1]
 800948c:	4629      	mov	r1, r5
 800948e:	e9cd 2300 	strd	r2, r3, [sp]
 8009492:	f7fe f9d3 	bl	800783c <disk_write>
 8009496:	2800      	cmp	r0, #0
 8009498:	f040 80d8 	bne.w	800964c <f_write+0x2ac>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800949c:	6a21      	ldr	r1, [r4, #32]
 800949e:	9a00      	ldr	r2, [sp, #0]
 80094a0:	9b01      	ldr	r3, [sp, #4]
 80094a2:	1a8a      	subs	r2, r1, r2
 80094a4:	429a      	cmp	r2, r3
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80094a6:	f8b9 100c 	ldrh.w	r1, [r9, #12]
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80094aa:	d23b      	bcs.n	8009524 <f_write+0x184>
	if (cnt) {
 80094ac:	b3b1      	cbz	r1, 800951c <f_write+0x17c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80094ae:	fb01 f202 	mul.w	r2, r1, r2
 80094b2:	1c50      	adds	r0, r2, #1
 80094b4:	4428      	add	r0, r5
 80094b6:	ebab 0c00 	sub.w	ip, fp, r0
 80094ba:	f1bc 0f02 	cmp.w	ip, #2
 80094be:	f101 30ff 	add.w	r0, r1, #4294967295
 80094c2:	442a      	add	r2, r5
 80094c4:	9000      	str	r0, [sp, #0]
 80094c6:	f240 80f3 	bls.w	80096b0 <f_write+0x310>
 80094ca:	2807      	cmp	r0, #7
 80094cc:	f240 80f0 	bls.w	80096b0 <f_write+0x310>
 80094d0:	ea4f 0a91 	mov.w	sl, r1, lsr #2
 80094d4:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
 80094d8:	4658      	mov	r0, fp
 80094da:	4694      	mov	ip, r2
			*d++ = *s++;
 80094dc:	f85c eb04 	ldr.w	lr, [ip], #4
 80094e0:	f840 eb04 	str.w	lr, [r0], #4
		} while (--cnt);
 80094e4:	4582      	cmp	sl, r0
 80094e6:	d1f9      	bne.n	80094dc <f_write+0x13c>
 80094e8:	f021 0003 	bic.w	r0, r1, #3
 80094ec:	4281      	cmp	r1, r0
 80094ee:	eb0b 0c00 	add.w	ip, fp, r0
 80094f2:	eb02 0e00 	add.w	lr, r2, r0
 80094f6:	d00f      	beq.n	8009518 <f_write+0x178>
			*d++ = *s++;
 80094f8:	5c12      	ldrb	r2, [r2, r0]
 80094fa:	f80b 2000 	strb.w	r2, [fp, r0]
		} while (--cnt);
 80094fe:	9a00      	ldr	r2, [sp, #0]
 8009500:	1a10      	subs	r0, r2, r0
 8009502:	d009      	beq.n	8009518 <f_write+0x178>
			*d++ = *s++;
 8009504:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8009508:	f88c 2001 	strb.w	r2, [ip, #1]
		} while (--cnt);
 800950c:	2801      	cmp	r0, #1
 800950e:	d003      	beq.n	8009518 <f_write+0x178>
			*d++ = *s++;
 8009510:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8009514:	f88c 2002 	strb.w	r2, [ip, #2]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009518:	f8b9 100c 	ldrh.w	r1, [r9, #12]
					fp->flag &= (BYTE)~FA_DIRTY;
 800951c:	7d22      	ldrb	r2, [r4, #20]
 800951e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009522:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009524:	fb01 f303 	mul.w	r3, r1, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009528:	69a1      	ldr	r1, [r4, #24]
 800952a:	18e8      	adds	r0, r5, r3
 800952c:	68e2      	ldr	r2, [r4, #12]
 800952e:	4419      	add	r1, r3
 8009530:	428a      	cmp	r2, r1
 8009532:	bf38      	it	cc
 8009534:	460a      	movcc	r2, r1
 8009536:	60e2      	str	r2, [r4, #12]
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	61a1      	str	r1, [r4, #24]
 800953c:	441a      	add	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 800953e:	1af6      	subs	r6, r6, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009540:	4605      	mov	r5, r0
 8009542:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8009544:	f47f af5c 	bne.w	8009400 <f_write+0x60>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009548:	7d23      	ldrb	r3, [r4, #20]
 800954a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800954e:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8009550:	e73a      	b.n	80093c8 <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009552:	6a21      	ldr	r1, [r4, #32]
 8009554:	4291      	cmp	r1, r2
				fp->fptr < fp->obj.objsize &&
 8009556:	69a1      	ldr	r1, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009558:	d003      	beq.n	8009562 <f_write+0x1c2>
 800955a:	68e0      	ldr	r0, [r4, #12]
 800955c:	4281      	cmp	r1, r0
 800955e:	f0c0 8099 	bcc.w	8009694 <f_write+0x2f4>
			fp->sect = sect;
 8009562:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009564:	fbb1 f2f3 	udiv	r2, r1, r3
 8009568:	fb03 1212 	mls	r2, r3, r2, r1
 800956c:	1a9b      	subs	r3, r3, r2
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800956e:	42b3      	cmp	r3, r6
 8009570:	bf28      	it	cs
 8009572:	4633      	movcs	r3, r6
	if (cnt) {
 8009574:	b92b      	cbnz	r3, 8009582 <f_write+0x1e2>
 8009576:	4628      	mov	r0, r5
		fp->flag |= FA_DIRTY;
 8009578:	7d22      	ldrb	r2, [r4, #20]
 800957a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800957e:	7522      	strb	r2, [r4, #20]
 8009580:	e7d4      	b.n	800952c <f_write+0x18c>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009582:	eb0b 0102 	add.w	r1, fp, r2
 8009586:	1c6a      	adds	r2, r5, #1
 8009588:	1a8a      	subs	r2, r1, r2
 800958a:	2a02      	cmp	r2, #2
 800958c:	f103 3aff 	add.w	sl, r3, #4294967295
 8009590:	d967      	bls.n	8009662 <f_write+0x2c2>
 8009592:	f1ba 0f07 	cmp.w	sl, #7
 8009596:	d964      	bls.n	8009662 <f_write+0x2c2>
 8009598:	f023 0e03 	bic.w	lr, r3, #3
 800959c:	448e      	add	lr, r1
 800959e:	460a      	mov	r2, r1
 80095a0:	4628      	mov	r0, r5
			*d++ = *s++;
 80095a2:	f850 cb04 	ldr.w	ip, [r0], #4
 80095a6:	f842 cb04 	str.w	ip, [r2], #4
		} while (--cnt);
 80095aa:	4572      	cmp	r2, lr
 80095ac:	d1f9      	bne.n	80095a2 <f_write+0x202>
 80095ae:	f023 0203 	bic.w	r2, r3, #3
 80095b2:	4293      	cmp	r3, r2
 80095b4:	eb01 0c02 	add.w	ip, r1, r2
 80095b8:	eb05 0002 	add.w	r0, r5, r2
 80095bc:	d00f      	beq.n	80095de <f_write+0x23e>
			*d++ = *s++;
 80095be:	f815 e002 	ldrb.w	lr, [r5, r2]
 80095c2:	f801 e002 	strb.w	lr, [r1, r2]
		} while (--cnt);
 80095c6:	ebba 0202 	subs.w	r2, sl, r2
 80095ca:	d007      	beq.n	80095dc <f_write+0x23c>
			*d++ = *s++;
 80095cc:	7841      	ldrb	r1, [r0, #1]
 80095ce:	f88c 1001 	strb.w	r1, [ip, #1]
		} while (--cnt);
 80095d2:	2a01      	cmp	r2, #1
			*d++ = *s++;
 80095d4:	bf1c      	itt	ne
 80095d6:	7882      	ldrbne	r2, [r0, #2]
 80095d8:	f88c 2002 	strbne.w	r2, [ip, #2]
		} while (--cnt);
 80095dc:	18e8      	adds	r0, r5, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80095de:	69a1      	ldr	r1, [r4, #24]
 80095e0:	e7ca      	b.n	8009578 <f_write+0x1d8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80095e2:	f04f 0802 	mov.w	r8, #2
}
 80095e6:	4640      	mov	r0, r8
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80095e8:	f884 8015 	strb.w	r8, [r4, #21]
}
 80095ec:	b003      	add	sp, #12
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 80095f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d03d      	beq.n	8009674 <f_write+0x2d4>
	FATFS *fs = fp->obj.fs;
 80095f8:	f8d4 c000 	ldr.w	ip, [r4]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80095fc:	6842      	ldr	r2, [r0, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80095fe:	f8bc 300c 	ldrh.w	r3, [ip, #12]
 8009602:	fbb1 f1f3 	udiv	r1, r1, r3
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009606:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009608:	f8bc 300a 	ldrh.w	r3, [ip, #10]
 800960c:	fbb1 f1f3 	udiv	r1, r1, r3
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009610:	2a00      	cmp	r2, #0
 8009612:	d099      	beq.n	8009548 <f_write+0x1a8>
 8009614:	4603      	mov	r3, r0
 8009616:	e004      	b.n	8009622 <f_write+0x282>
		cl -= ncl; tbl++;		/* Next fragment */
 8009618:	1a89      	subs	r1, r1, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800961a:	f853 2f08 	ldr.w	r2, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800961e:	2a00      	cmp	r2, #0
 8009620:	d092      	beq.n	8009548 <f_write+0x1a8>
		if (cl < ncl) break;	/* In this fragment? */
 8009622:	4291      	cmp	r1, r2
 8009624:	d2f8      	bcs.n	8009618 <f_write+0x278>
	return cl + *tbl;	/* Return the cluster number */
 8009626:	6858      	ldr	r0, [r3, #4]
 8009628:	4408      	add	r0, r1
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800962a:	2800      	cmp	r0, #0
 800962c:	f47f aeff 	bne.w	800942e <f_write+0x8e>
 8009630:	e78a      	b.n	8009548 <f_write+0x1a8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009632:	6a22      	ldr	r2, [r4, #32]
 8009634:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009638:	2301      	movs	r3, #1
 800963a:	4659      	mov	r1, fp
 800963c:	f7fe f8fe 	bl	800783c <disk_write>
 8009640:	b920      	cbnz	r0, 800964c <f_write+0x2ac>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009642:	7d23      	ldrb	r3, [r4, #20]
 8009644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009648:	7523      	strb	r3, [r4, #20]
 800964a:	e6ff      	b.n	800944c <f_write+0xac>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800964c:	f04f 0801 	mov.w	r8, #1
}
 8009650:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009652:	f884 8015 	strb.w	r8, [r4, #21]
}
 8009656:	b003      	add	sp, #12
 8009658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800965c:	f04f 0807 	mov.w	r8, #7
 8009660:	e6b2      	b.n	80093c8 <f_write+0x28>
 8009662:	1e4a      	subs	r2, r1, #1
 8009664:	18e8      	adds	r0, r5, r3
			*d++ = *s++;
 8009666:	f815 1b01 	ldrb.w	r1, [r5], #1
 800966a:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 800966e:	42a8      	cmp	r0, r5
 8009670:	d1f9      	bne.n	8009666 <f_write+0x2c6>
 8009672:	e7b4      	b.n	80095de <f_write+0x23e>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009674:	69e1      	ldr	r1, [r4, #28]
 8009676:	4620      	mov	r0, r4
 8009678:	f7fe fdb8 	bl	80081ec <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800967c:	2800      	cmp	r0, #0
 800967e:	f47f aed6 	bne.w	800942e <f_write+0x8e>
 8009682:	e761      	b.n	8009548 <f_write+0x1a8>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009684:	4651      	mov	r1, sl
 8009686:	4620      	mov	r0, r4
 8009688:	f7fe fdb0 	bl	80081ec <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800968c:	2800      	cmp	r0, #0
 800968e:	f47f aece 	bne.w	800942e <f_write+0x8e>
 8009692:	e759      	b.n	8009548 <f_write+0x1a8>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009694:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009698:	9200      	str	r2, [sp, #0]
 800969a:	2301      	movs	r3, #1
 800969c:	4659      	mov	r1, fp
 800969e:	f7fe f8bf 	bl	8007820 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d1d2      	bne.n	800964c <f_write+0x2ac>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80096a6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80096aa:	69a1      	ldr	r1, [r4, #24]
 80096ac:	9a00      	ldr	r2, [sp, #0]
 80096ae:	e758      	b.n	8009562 <f_write+0x1c2>
 80096b0:	4411      	add	r1, r2
 80096b2:	f104 002f 	add.w	r0, r4, #47	; 0x2f
			*d++ = *s++;
 80096b6:	f812 cb01 	ldrb.w	ip, [r2], #1
 80096ba:	f800 cf01 	strb.w	ip, [r0, #1]!
		} while (--cnt);
 80096be:	4291      	cmp	r1, r2
 80096c0:	d1f9      	bne.n	80096b6 <f_write+0x316>
 80096c2:	e729      	b.n	8009518 <f_write+0x178>

080096c4 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80096c4:	b158      	cbz	r0, 80096de <f_close+0x1a>
 80096c6:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80096c8:	b570      	push	{r4, r5, r6, lr}
 80096ca:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80096cc:	b12b      	cbz	r3, 80096da <f_close+0x16>
 80096ce:	781a      	ldrb	r2, [r3, #0]
 80096d0:	b11a      	cbz	r2, 80096da <f_close+0x16>
 80096d2:	8881      	ldrh	r1, [r0, #4]
 80096d4:	88da      	ldrh	r2, [r3, #6]
 80096d6:	4291      	cmp	r1, r2
 80096d8:	d003      	beq.n	80096e2 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 80096da:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80096dc:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 80096de:	2009      	movs	r0, #9
}
 80096e0:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80096e2:	7858      	ldrb	r0, [r3, #1]
 80096e4:	f7fe f882 	bl	80077ec <disk_status>
 80096e8:	07c1      	lsls	r1, r0, #31
 80096ea:	d4f6      	bmi.n	80096da <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80096ec:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80096ee:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80096f0:	065a      	lsls	r2, r3, #25
 80096f2:	d53c      	bpl.n	800976e <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80096f4:	061b      	lsls	r3, r3, #24
 80096f6:	d45d      	bmi.n	80097b4 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 80096f8:	f7fe f86c 	bl	80077d4 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 80096fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80096fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009700:	4299      	cmp	r1, r3
			tm = GET_FATTIME();				/* Modified time */
 8009702:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009704:	d004      	beq.n	8009710 <f_close+0x4c>
 8009706:	4628      	mov	r0, r5
 8009708:	f7fe f94c 	bl	80079a4 <move_window.part.0>
				if (res == FR_OK) {
 800970c:	2800      	cmp	r0, #0
 800970e:	d1e5      	bne.n	80096dc <f_close+0x18>
					dir = fp->dir_ptr;
 8009710:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009712:	7ad3      	ldrb	r3, [r2, #11]
 8009714:	f043 0320 	orr.w	r3, r3, #32
 8009718:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800971a:	68a3      	ldr	r3, [r4, #8]
 800971c:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800971e:	7693      	strb	r3, [r2, #26]
 8009720:	f3c3 2007 	ubfx	r0, r3, #8, #8
	*ptr++ = (BYTE)val;
 8009724:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 8009726:	7809      	ldrb	r1, [r1, #0]
 8009728:	2903      	cmp	r1, #3
 800972a:	d103      	bne.n	8009734 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800972c:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800972e:	7513      	strb	r3, [r2, #20]
 8009730:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8009732:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009734:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8009736:	7713      	strb	r3, [r2, #28]
 8009738:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800973a:	7751      	strb	r1, [r2, #29]
 800973c:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800973e:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val;
 8009740:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 8009742:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8009744:	75d3      	strb	r3, [r2, #23]
 8009746:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8009748:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 800974a:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800974c:	7596      	strb	r6, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800974e:	8253      	strh	r3, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8009750:	0e36      	lsrs	r6, r6, #24
					fs->wflag = 1;
 8009752:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8009754:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 8009756:	7656      	strb	r6, [r2, #25]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009758:	4628      	mov	r0, r5
					fs->wflag = 1;
 800975a:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800975c:	f7fe fcd6 	bl	800810c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009760:	7d23      	ldrb	r3, [r4, #20]
 8009762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009766:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8009768:	2800      	cmp	r0, #0
 800976a:	d1b7      	bne.n	80096dc <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800976c:	6825      	ldr	r5, [r4, #0]
 800976e:	2d00      	cmp	r5, #0
 8009770:	d0b3      	beq.n	80096da <f_close+0x16>
 8009772:	782b      	ldrb	r3, [r5, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d0b0      	beq.n	80096da <f_close+0x16>
 8009778:	88a2      	ldrh	r2, [r4, #4]
 800977a:	88eb      	ldrh	r3, [r5, #6]
 800977c:	429a      	cmp	r2, r3
 800977e:	d1ac      	bne.n	80096da <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009780:	7868      	ldrb	r0, [r5, #1]
 8009782:	f7fe f833 	bl	80077ec <disk_status>
 8009786:	f010 0001 	ands.w	r0, r0, #1
 800978a:	d1a6      	bne.n	80096da <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	3b01      	subs	r3, #1
 8009790:	2b01      	cmp	r3, #1
 8009792:	d81c      	bhi.n	80097ce <f_close+0x10a>
		n = Files[i].ctr;
 8009794:	4912      	ldr	r1, [pc, #72]	; (80097e0 <f_close+0x11c>)
 8009796:	011d      	lsls	r5, r3, #4
 8009798:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800979c:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800979e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80097a2:	d016      	beq.n	80097d2 <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 80097a4:	b1b2      	cbz	r2, 80097d4 <f_close+0x110>
 80097a6:	3a01      	subs	r2, #1
 80097a8:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 80097aa:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80097ac:	b192      	cbz	r2, 80097d4 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 80097ae:	2300      	movs	r3, #0
 80097b0:	6023      	str	r3, [r4, #0]
}
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80097b4:	6a22      	ldr	r2, [r4, #32]
 80097b6:	7868      	ldrb	r0, [r5, #1]
 80097b8:	2301      	movs	r3, #1
 80097ba:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80097be:	f7fe f83d 	bl	800783c <disk_write>
 80097c2:	b950      	cbnz	r0, 80097da <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 80097c4:	7d23      	ldrb	r3, [r4, #20]
 80097c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ca:	7523      	strb	r3, [r4, #20]
 80097cc:	e794      	b.n	80096f8 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 80097ce:	2002      	movs	r0, #2
}
 80097d0:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 80097d2:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80097d4:	2300      	movs	r3, #0
 80097d6:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 80097d8:	e7e9      	b.n	80097ae <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80097da:	2001      	movs	r0, #1
}
 80097dc:	bd70      	pop	{r4, r5, r6, pc}
 80097de:	bf00      	nop
 80097e0:	20004120 	.word	0x20004120

080097e4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80097e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097e8:	b085      	sub	sp, #20
 80097ea:	460f      	mov	r7, r1
 80097ec:	9001      	str	r0, [sp, #4]
 80097ee:	4615      	mov	r5, r2
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80097f0:	a903      	add	r1, sp, #12
 80097f2:	2200      	movs	r2, #0
 80097f4:	a801      	add	r0, sp, #4
 80097f6:	f7fe f90f 	bl	8007a18 <find_volume>
	if (res == FR_OK) {
 80097fa:	4606      	mov	r6, r0
 80097fc:	b938      	cbnz	r0, 800980e <f_getfree+0x2a>
		*fatfs = fs;				/* Return ptr to the fs object */
 80097fe:	9c03      	ldr	r4, [sp, #12]
 8009800:	602c      	str	r4, [r5, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009802:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
 8009806:	1eaa      	subs	r2, r5, #2
 8009808:	4293      	cmp	r3, r2
 800980a:	d804      	bhi.n	8009816 <f_getfree+0x32>
			*nclst = fs->free_clst;
 800980c:	603b      	str	r3, [r7, #0]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
		}
	}

	LEAVE_FF(fs, res);
}
 800980e:	4630      	mov	r0, r6
 8009810:	b005      	add	sp, #20
 8009812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009816:	7820      	ldrb	r0, [r4, #0]
 8009818:	2801      	cmp	r0, #1
 800981a:	d02d      	beq.n	8009878 <f_getfree+0x94>
					clst = fs->n_fatent; sect = fs->fatbase;
 800981c:	6a61      	ldr	r1, [r4, #36]	; 0x24
					i = 0; p = 0;
 800981e:	4632      	mov	r2, r6
 8009820:	4633      	mov	r3, r6
			nfree = 0;
 8009822:	46b0      	mov	r8, r6
						if (i == 0) {
 8009824:	b97b      	cbnz	r3, 8009846 <f_getfree+0x62>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009826:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009828:	4299      	cmp	r1, r3
							res = move_window(fs, sect++);
 800982a:	f101 0901 	add.w	r9, r1, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800982e:	d006      	beq.n	800983e <f_getfree+0x5a>
 8009830:	4620      	mov	r0, r4
 8009832:	f7fe f8b7 	bl	80079a4 <move_window.part.0>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009836:	9c03      	ldr	r4, [sp, #12]
							if (res != FR_OK) break;
 8009838:	2800      	cmp	r0, #0
 800983a:	d13e      	bne.n	80098ba <f_getfree+0xd6>
						if (fs->fs_type == FS_FAT16) {
 800983c:	7820      	ldrb	r0, [r4, #0]
							i = SS(fs);
 800983e:	89a3      	ldrh	r3, [r4, #12]
							res = move_window(fs, sect++);
 8009840:	4649      	mov	r1, r9
							p = fs->win;
 8009842:	f104 0234 	add.w	r2, r4, #52	; 0x34
						if (fs->fs_type == FS_FAT16) {
 8009846:	2802      	cmp	r0, #2
 8009848:	d02d      	beq.n	80098a6 <f_getfree+0xc2>
	rv = rv << 8 | ptr[0];
 800984a:	f8d2 c000 	ldr.w	ip, [r2]
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800984e:	f03c 4c70 	bics.w	ip, ip, #4026531840	; 0xf0000000
 8009852:	bf08      	it	eq
 8009854:	f108 0801 	addeq.w	r8, r8, #1
							p += 4; i -= 4;
 8009858:	3204      	adds	r2, #4
 800985a:	3b04      	subs	r3, #4
					} while (--clst);
 800985c:	3d01      	subs	r5, #1
 800985e:	d1e1      	bne.n	8009824 <f_getfree+0x40>
			*nclst = nfree;			/* Return the free clusters */
 8009860:	f8c7 8000 	str.w	r8, [r7]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009864:	7923      	ldrb	r3, [r4, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009866:	f8c4 8014 	str.w	r8, [r4, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800986a:	f043 0301 	orr.w	r3, r3, #1
}
 800986e:	4630      	mov	r0, r6
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009870:	7123      	strb	r3, [r4, #4]
}
 8009872:	b005      	add	sp, #20
 8009874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				clst = 2; obj.fs = fs;
 8009878:	2502      	movs	r5, #2
			nfree = 0;
 800987a:	46b0      	mov	r8, r6
 800987c:	e008      	b.n	8009890 <f_getfree+0xac>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800987e:	2801      	cmp	r0, #1
 8009880:	d01d      	beq.n	80098be <f_getfree+0xda>
					if (stat == 0) nfree++;
 8009882:	b908      	cbnz	r0, 8009888 <f_getfree+0xa4>
 8009884:	f108 0801 	add.w	r8, r8, #1
				} while (++clst < fs->n_fatent);
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	699a      	ldr	r2, [r3, #24]
 800988c:	42aa      	cmp	r2, r5
 800988e:	d919      	bls.n	80098c4 <f_getfree+0xe0>
					stat = get_fat(&obj, clst);
 8009890:	4629      	mov	r1, r5
 8009892:	4620      	mov	r0, r4
 8009894:	f7fe fb0e 	bl	8007eb4 <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009898:	1c43      	adds	r3, r0, #1
				} while (++clst < fs->n_fatent);
 800989a:	f105 0501 	add.w	r5, r5, #1
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800989e:	d1ee      	bne.n	800987e <f_getfree+0x9a>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80098a0:	9c03      	ldr	r4, [sp, #12]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80098a2:	2601      	movs	r6, #1
 80098a4:	e7dc      	b.n	8009860 <f_getfree+0x7c>
							if (ld_word(p) == 0) nfree++;
 80098a6:	f8b2 c000 	ldrh.w	ip, [r2]
 80098aa:	f1bc 0f00 	cmp.w	ip, #0
 80098ae:	d101      	bne.n	80098b4 <f_getfree+0xd0>
 80098b0:	f108 0801 	add.w	r8, r8, #1
							p += 2; i -= 2;
 80098b4:	3202      	adds	r2, #2
 80098b6:	3b02      	subs	r3, #2
 80098b8:	e7d0      	b.n	800985c <f_getfree+0x78>
 80098ba:	4606      	mov	r6, r0
 80098bc:	e7d0      	b.n	8009860 <f_getfree+0x7c>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80098be:	9c03      	ldr	r4, [sp, #12]
					if (stat == 1) { res = FR_INT_ERR; break; }
 80098c0:	2602      	movs	r6, #2
 80098c2:	e7cd      	b.n	8009860 <f_getfree+0x7c>
 80098c4:	461c      	mov	r4, r3
 80098c6:	e7cb      	b.n	8009860 <f_getfree+0x7c>

080098c8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80098c8:	b530      	push	{r4, r5, lr}
 80098ca:	b09d      	sub	sp, #116	; 0x74
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80098cc:	2202      	movs	r2, #2
{
 80098ce:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 80098d0:	a903      	add	r1, sp, #12
 80098d2:	a801      	add	r0, sp, #4
 80098d4:	f7fe f8a0 	bl	8007a18 <find_volume>
	dj.obj.fs = fs;
 80098d8:	9b03      	ldr	r3, [sp, #12]
 80098da:	9304      	str	r3, [sp, #16]
	if (res == FR_OK) {
 80098dc:	b108      	cbz	r0, 80098e2 <f_unlink+0x1a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 80098de:	b01d      	add	sp, #116	; 0x74
 80098e0:	bd30      	pop	{r4, r5, pc}
		res = follow_path(&dj, path);		/* Follow the file path */
 80098e2:	9901      	ldr	r1, [sp, #4]
 80098e4:	a804      	add	r0, sp, #16
 80098e6:	f7fe fe13 	bl	8008510 <follow_path>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d1f7      	bne.n	80098de <f_unlink+0x16>
		if (Files[i].fs) {	/* Existing entry */
 80098ee:	4b2e      	ldr	r3, [pc, #184]	; (80099a8 <f_unlink+0xe0>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80098f0:	9c04      	ldr	r4, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 80098f2:	681a      	ldr	r2, [r3, #0]
				Files[i].clu == dp->obj.sclust &&
 80098f4:	9906      	ldr	r1, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 80098f6:	9809      	ldr	r0, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 80098f8:	b10a      	cbz	r2, 80098fe <f_unlink+0x36>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80098fa:	42a2      	cmp	r2, r4
 80098fc:	d02d      	beq.n	800995a <f_unlink+0x92>
		if (Files[i].fs) {	/* Existing entry */
 80098fe:	691a      	ldr	r2, [r3, #16]
 8009900:	b10a      	cbz	r2, 8009906 <f_unlink+0x3e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009902:	42a2      	cmp	r2, r4
 8009904:	d031      	beq.n	800996a <f_unlink+0xa2>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009906:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800990a:	2b00      	cmp	r3, #0
 800990c:	db23      	blt.n	8009956 <f_unlink+0x8e>
				if (dj.obj.attr & AM_RDO) {
 800990e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009912:	07da      	lsls	r2, r3, #31
 8009914:	d41d      	bmi.n	8009952 <f_unlink+0x8a>
					dclst = ld_clust(fs, dj.dir);
 8009916:	9a03      	ldr	r2, [sp, #12]
 8009918:	990c      	ldr	r1, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800991a:	7810      	ldrb	r0, [r2, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 800991c:	8b4d      	ldrh	r5, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 800991e:	2803      	cmp	r0, #3
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009920:	bf04      	itt	eq
 8009922:	8a89      	ldrheq	r1, [r1, #20]
 8009924:	ea45 4501 	orreq.w	r5, r5, r1, lsl #16
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009928:	06db      	lsls	r3, r3, #27
 800992a:	d425      	bmi.n	8009978 <f_unlink+0xb0>
	res = move_window(fs, dp->sect);
 800992c:	990b      	ldr	r1, [sp, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800992e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009930:	4299      	cmp	r1, r3
 8009932:	d004      	beq.n	800993e <f_unlink+0x76>
 8009934:	4620      	mov	r0, r4
 8009936:	f7fe f835 	bl	80079a4 <move_window.part.0>
	if (res == FR_OK) {
 800993a:	2800      	cmp	r0, #0
 800993c:	d1cf      	bne.n	80098de <f_unlink+0x16>
		dp->dir[DIR_Name] = DDEM;
 800993e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009940:	22e5      	movs	r2, #229	; 0xe5
 8009942:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8009944:	2301      	movs	r3, #1
 8009946:	70e3      	strb	r3, [r4, #3]
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8009948:	bb35      	cbnz	r5, 8009998 <f_unlink+0xd0>
				if (res == FR_OK) res = sync_fs(fs);
 800994a:	9803      	ldr	r0, [sp, #12]
 800994c:	f7fe fbde 	bl	800810c <sync_fs>
 8009950:	e7c5      	b.n	80098de <f_unlink+0x16>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009952:	2007      	movs	r0, #7
 8009954:	e7c3      	b.n	80098de <f_unlink+0x16>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009956:	2006      	movs	r0, #6
	LEAVE_FF(fs, res);
 8009958:	e7c1      	b.n	80098de <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	428a      	cmp	r2, r1
 800995e:	d1ce      	bne.n	80098fe <f_unlink+0x36>
				Files[i].clu == dp->obj.sclust &&
 8009960:	689a      	ldr	r2, [r3, #8]
 8009962:	4282      	cmp	r2, r0
 8009964:	d1cb      	bne.n	80098fe <f_unlink+0x36>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009966:	2010      	movs	r0, #16
 8009968:	e7b9      	b.n	80098de <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800996a:	695a      	ldr	r2, [r3, #20]
 800996c:	428a      	cmp	r2, r1
 800996e:	d1ca      	bne.n	8009906 <f_unlink+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	4283      	cmp	r3, r0
 8009974:	d1c7      	bne.n	8009906 <f_unlink+0x3e>
 8009976:	e7f6      	b.n	8009966 <f_unlink+0x9e>
						res = dir_sdi(&sdj, 0);
 8009978:	a810      	add	r0, sp, #64	; 0x40
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800997a:	9210      	str	r2, [sp, #64]	; 0x40
						sdj.obj.sclust = dclst;
 800997c:	9512      	str	r5, [sp, #72]	; 0x48
						res = dir_sdi(&sdj, 0);
 800997e:	f7fe fd1b 	bl	80083b8 <dir_sdi.constprop.0>
						if (res == FR_OK) {
 8009982:	2800      	cmp	r0, #0
 8009984:	d1ab      	bne.n	80098de <f_unlink+0x16>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009986:	a810      	add	r0, sp, #64	; 0x40
 8009988:	f7fe fb0e 	bl	8007fa8 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800998c:	2800      	cmp	r0, #0
 800998e:	d0e0      	beq.n	8009952 <f_unlink+0x8a>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009990:	2804      	cmp	r0, #4
 8009992:	d1a4      	bne.n	80098de <f_unlink+0x16>
	FATFS *fs = dp->obj.fs;
 8009994:	9c04      	ldr	r4, [sp, #16]
 8009996:	e7c9      	b.n	800992c <f_unlink+0x64>
					res = remove_chain(&dj.obj, dclst, 0);
 8009998:	2200      	movs	r2, #0
 800999a:	4629      	mov	r1, r5
 800999c:	a804      	add	r0, sp, #16
 800999e:	f7fe ff57 	bl	8008850 <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d19b      	bne.n	80098de <f_unlink+0x16>
 80099a6:	e7d0      	b.n	800994a <f_unlink+0x82>
 80099a8:	20004120 	.word	0x20004120

080099ac <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80099ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b0:	4680      	mov	r8, r0
 80099b2:	b082      	sub	sp, #8
 80099b4:	4616      	mov	r6, r2
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80099b6:	1e4f      	subs	r7, r1, #1
	TCHAR c, *p = buff;
 80099b8:	4605      	mov	r5, r0
	int n = 0;
 80099ba:	2400      	movs	r4, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80099bc:	e009      	b.n	80099d2 <f_gets+0x26>
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
		if (rc != 1) break;
		c = s[0];
 80099be:	f89d 3000 	ldrb.w	r3, [sp]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80099c2:	2b0d      	cmp	r3, #13
 80099c4:	d007      	beq.n	80099d6 <f_gets+0x2a>
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
 80099c6:	2b0a      	cmp	r3, #10
		*p++ = c;
 80099c8:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 80099cc:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 80099d0:	d013      	beq.n	80099fa <f_gets+0x4e>
 80099d2:	42bc      	cmp	r4, r7
 80099d4:	da08      	bge.n	80099e8 <f_gets+0x3c>
		f_read(fp, s, 1, &rc);
 80099d6:	ab01      	add	r3, sp, #4
 80099d8:	2201      	movs	r2, #1
 80099da:	4669      	mov	r1, sp
 80099dc:	4630      	mov	r0, r6
 80099de:	f7ff fb67 	bl	80090b0 <f_read>
		if (rc != 1) break;
 80099e2:	9b01      	ldr	r3, [sp, #4]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d0ea      	beq.n	80099be <f_gets+0x12>
	}
	*p = 0;
 80099e8:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80099ea:	429c      	cmp	r4, r3
 80099ec:	bf08      	it	eq
 80099ee:	4698      	moveq	r8, r3
}
 80099f0:	4640      	mov	r0, r8
	*p = 0;
 80099f2:	702b      	strb	r3, [r5, #0]
}
 80099f4:	b002      	add	sp, #8
 80099f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*p = 0;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4640      	mov	r0, r8
	*p = 0;
 80099fe:	702b      	strb	r3, [r5, #0]
}
 8009a00:	b002      	add	sp, #8
 8009a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a06:	bf00      	nop

08009a08 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a0a:	b095      	sub	sp, #84	; 0x54
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009a0c:	7804      	ldrb	r4, [r0, #0]
	pb->nchr = pb->idx = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8009a14:	9303      	str	r3, [sp, #12]
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009a16:	2c00      	cmp	r4, #0
 8009a18:	d054      	beq.n	8009ac4 <f_puts+0xbc>
 8009a1a:	4606      	mov	r6, r0
	pb->buf[i++] = (BYTE)c;
 8009a1c:	270d      	movs	r7, #13
 8009a1e:	e007      	b.n	8009a30 <f_puts+0x28>
	pb->nchr++;
 8009a20:	9b03      	ldr	r3, [sp, #12]
	pb->idx = i;
 8009a22:	9502      	str	r5, [sp, #8]
	pb->nchr++;
 8009a24:	3301      	adds	r3, #1
 8009a26:	9303      	str	r3, [sp, #12]
 8009a28:	462b      	mov	r3, r5
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009a2a:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8009a2e:	b34c      	cbz	r4, 8009a84 <f_puts+0x7c>
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009a30:	2c0a      	cmp	r4, #10
 8009a32:	d016      	beq.n	8009a62 <f_puts+0x5a>
	pb->buf[i++] = (BYTE)c;
 8009a34:	f103 0250 	add.w	r2, r3, #80	; 0x50
	if (i < 0) return;
 8009a38:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8009a3a:	446a      	add	r2, sp
 8009a3c:	f103 0501 	add.w	r5, r3, #1
	if (i < 0) return;
 8009a40:	dbf3      	blt.n	8009a2a <f_puts+0x22>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009a42:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8009a44:	f802 4c40 	strb.w	r4, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009a48:	ddea      	ble.n	8009a20 <f_puts+0x18>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009a4a:	462a      	mov	r2, r5
 8009a4c:	466b      	mov	r3, sp
 8009a4e:	9801      	ldr	r0, [sp, #4]
 8009a50:	a904      	add	r1, sp, #16
 8009a52:	f7ff fca5 	bl	80093a0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009a56:	9b00      	ldr	r3, [sp, #0]
 8009a58:	1b5d      	subs	r5, r3, r5
 8009a5a:	bf18      	it	ne
 8009a5c:	f04f 35ff 	movne.w	r5, #4294967295
 8009a60:	e7de      	b.n	8009a20 <f_puts+0x18>
	pb->buf[i++] = (BYTE)c;
 8009a62:	f103 0250 	add.w	r2, r3, #80	; 0x50
	if (i < 0) return;
 8009a66:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8009a68:	446a      	add	r2, sp
 8009a6a:	f103 0501 	add.w	r5, r3, #1
	if (i < 0) return;
 8009a6e:	dbdc      	blt.n	8009a2a <f_puts+0x22>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009a70:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8009a72:	f802 7c40 	strb.w	r7, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009a76:	dc15      	bgt.n	8009aa4 <f_puts+0x9c>
	pb->nchr++;
 8009a78:	9b03      	ldr	r3, [sp, #12]
	pb->idx = i;
 8009a7a:	9502      	str	r5, [sp, #8]
	pb->nchr++;
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	9303      	str	r3, [sp, #12]
 8009a80:	462b      	mov	r3, r5
 8009a82:	e7d7      	b.n	8009a34 <f_puts+0x2c>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	db19      	blt.n	8009abc <f_puts+0xb4>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009a88:	9801      	ldr	r0, [sp, #4]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	466b      	mov	r3, sp
 8009a8e:	a904      	add	r1, sp, #16
 8009a90:	f7ff fc86 	bl	80093a0 <f_write>
 8009a94:	b990      	cbnz	r0, 8009abc <f_puts+0xb4>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009a96:	9a02      	ldr	r2, [sp, #8]
 8009a98:	9b00      	ldr	r3, [sp, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d10e      	bne.n	8009abc <f_puts+0xb4>
 8009a9e:	9803      	ldr	r0, [sp, #12]
	return putc_flush(&pb);
}
 8009aa0:	b015      	add	sp, #84	; 0x54
 8009aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009aa4:	466b      	mov	r3, sp
 8009aa6:	462a      	mov	r2, r5
 8009aa8:	9801      	ldr	r0, [sp, #4]
 8009aaa:	a904      	add	r1, sp, #16
 8009aac:	f7ff fc78 	bl	80093a0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009ab0:	9b00      	ldr	r3, [sp, #0]
 8009ab2:	1b5d      	subs	r5, r3, r5
 8009ab4:	bf18      	it	ne
 8009ab6:	f04f 35ff 	movne.w	r5, #4294967295
 8009aba:	e7dd      	b.n	8009a78 <f_puts+0x70>
	return EOF;
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009ac0:	b015      	add	sp, #84	; 0x54
 8009ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac4:	4608      	mov	r0, r1
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	e7e0      	b.n	8009a8c <f_puts+0x84>
 8009aca:	bf00      	nop

08009acc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009acc:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8009ace:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <FATFS_LinkDriver+0x44>)
 8009ad0:	7a5c      	ldrb	r4, [r3, #9]
 8009ad2:	b9cc      	cbnz	r4, 8009b08 <FATFS_LinkDriver+0x3c>
 8009ad4:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8009ad6:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8009ada:	7a5c      	ldrb	r4, [r3, #9]
 8009adc:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8009ade:	7a5c      	ldrb	r4, [r3, #9]
 8009ae0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ae4:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8009ae6:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8009ae8:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8009aea:	441c      	add	r4, r3
 8009aec:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8009aee:	1c54      	adds	r4, r2, #1
 8009af0:	b2e4      	uxtb	r4, r4
 8009af2:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8009af4:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8009af6:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8009af8:	232f      	movs	r3, #47	; 0x2f
    path[1] = ':';
 8009afa:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 8009afc:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8009afe:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8009b02:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009b04:	70c8      	strb	r0, [r1, #3]
}
 8009b06:	4770      	bx	lr
  uint8_t ret = 1;
 8009b08:	2001      	movs	r0, #1
}
 8009b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	20004144 	.word	0x20004144

08009b14 <__errno>:
 8009b14:	4b01      	ldr	r3, [pc, #4]	; (8009b1c <__errno+0x8>)
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	20000024 	.word	0x20000024

08009b20 <__libc_init_array>:
 8009b20:	b570      	push	{r4, r5, r6, lr}
 8009b22:	4d0d      	ldr	r5, [pc, #52]	; (8009b58 <__libc_init_array+0x38>)
 8009b24:	4c0d      	ldr	r4, [pc, #52]	; (8009b5c <__libc_init_array+0x3c>)
 8009b26:	1b64      	subs	r4, r4, r5
 8009b28:	10a4      	asrs	r4, r4, #2
 8009b2a:	2600      	movs	r6, #0
 8009b2c:	42a6      	cmp	r6, r4
 8009b2e:	d109      	bne.n	8009b44 <__libc_init_array+0x24>
 8009b30:	4d0b      	ldr	r5, [pc, #44]	; (8009b60 <__libc_init_array+0x40>)
 8009b32:	4c0c      	ldr	r4, [pc, #48]	; (8009b64 <__libc_init_array+0x44>)
 8009b34:	f002 fdd2 	bl	800c6dc <_init>
 8009b38:	1b64      	subs	r4, r4, r5
 8009b3a:	10a4      	asrs	r4, r4, #2
 8009b3c:	2600      	movs	r6, #0
 8009b3e:	42a6      	cmp	r6, r4
 8009b40:	d105      	bne.n	8009b4e <__libc_init_array+0x2e>
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
 8009b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b48:	4798      	blx	r3
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7ee      	b.n	8009b2c <__libc_init_array+0xc>
 8009b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b52:	4798      	blx	r3
 8009b54:	3601      	adds	r6, #1
 8009b56:	e7f2      	b.n	8009b3e <__libc_init_array+0x1e>
 8009b58:	0800cf2c 	.word	0x0800cf2c
 8009b5c:	0800cf2c 	.word	0x0800cf2c
 8009b60:	0800cf2c 	.word	0x0800cf2c
 8009b64:	0800cf30 	.word	0x0800cf30

08009b68 <malloc>:
 8009b68:	4b02      	ldr	r3, [pc, #8]	; (8009b74 <malloc+0xc>)
 8009b6a:	4601      	mov	r1, r0
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	f000 b87f 	b.w	8009c70 <_malloc_r>
 8009b72:	bf00      	nop
 8009b74:	20000024 	.word	0x20000024

08009b78 <free>:
 8009b78:	4b02      	ldr	r3, [pc, #8]	; (8009b84 <free+0xc>)
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	6818      	ldr	r0, [r3, #0]
 8009b7e:	f000 b80b 	b.w	8009b98 <_free_r>
 8009b82:	bf00      	nop
 8009b84:	20000024 	.word	0x20000024

08009b88 <memset>:
 8009b88:	4402      	add	r2, r0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d100      	bne.n	8009b92 <memset+0xa>
 8009b90:	4770      	bx	lr
 8009b92:	f803 1b01 	strb.w	r1, [r3], #1
 8009b96:	e7f9      	b.n	8009b8c <memset+0x4>

08009b98 <_free_r>:
 8009b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b9a:	2900      	cmp	r1, #0
 8009b9c:	d044      	beq.n	8009c28 <_free_r+0x90>
 8009b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba2:	9001      	str	r0, [sp, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f1a1 0404 	sub.w	r4, r1, #4
 8009baa:	bfb8      	it	lt
 8009bac:	18e4      	addlt	r4, r4, r3
 8009bae:	f001 ff4f 	bl	800ba50 <__malloc_lock>
 8009bb2:	4a1e      	ldr	r2, [pc, #120]	; (8009c2c <_free_r+0x94>)
 8009bb4:	9801      	ldr	r0, [sp, #4]
 8009bb6:	6813      	ldr	r3, [r2, #0]
 8009bb8:	b933      	cbnz	r3, 8009bc8 <_free_r+0x30>
 8009bba:	6063      	str	r3, [r4, #4]
 8009bbc:	6014      	str	r4, [r2, #0]
 8009bbe:	b003      	add	sp, #12
 8009bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bc4:	f001 bf4a 	b.w	800ba5c <__malloc_unlock>
 8009bc8:	42a3      	cmp	r3, r4
 8009bca:	d908      	bls.n	8009bde <_free_r+0x46>
 8009bcc:	6825      	ldr	r5, [r4, #0]
 8009bce:	1961      	adds	r1, r4, r5
 8009bd0:	428b      	cmp	r3, r1
 8009bd2:	bf01      	itttt	eq
 8009bd4:	6819      	ldreq	r1, [r3, #0]
 8009bd6:	685b      	ldreq	r3, [r3, #4]
 8009bd8:	1949      	addeq	r1, r1, r5
 8009bda:	6021      	streq	r1, [r4, #0]
 8009bdc:	e7ed      	b.n	8009bba <_free_r+0x22>
 8009bde:	461a      	mov	r2, r3
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	b10b      	cbz	r3, 8009be8 <_free_r+0x50>
 8009be4:	42a3      	cmp	r3, r4
 8009be6:	d9fa      	bls.n	8009bde <_free_r+0x46>
 8009be8:	6811      	ldr	r1, [r2, #0]
 8009bea:	1855      	adds	r5, r2, r1
 8009bec:	42a5      	cmp	r5, r4
 8009bee:	d10b      	bne.n	8009c08 <_free_r+0x70>
 8009bf0:	6824      	ldr	r4, [r4, #0]
 8009bf2:	4421      	add	r1, r4
 8009bf4:	1854      	adds	r4, r2, r1
 8009bf6:	42a3      	cmp	r3, r4
 8009bf8:	6011      	str	r1, [r2, #0]
 8009bfa:	d1e0      	bne.n	8009bbe <_free_r+0x26>
 8009bfc:	681c      	ldr	r4, [r3, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	6053      	str	r3, [r2, #4]
 8009c02:	4421      	add	r1, r4
 8009c04:	6011      	str	r1, [r2, #0]
 8009c06:	e7da      	b.n	8009bbe <_free_r+0x26>
 8009c08:	d902      	bls.n	8009c10 <_free_r+0x78>
 8009c0a:	230c      	movs	r3, #12
 8009c0c:	6003      	str	r3, [r0, #0]
 8009c0e:	e7d6      	b.n	8009bbe <_free_r+0x26>
 8009c10:	6825      	ldr	r5, [r4, #0]
 8009c12:	1961      	adds	r1, r4, r5
 8009c14:	428b      	cmp	r3, r1
 8009c16:	bf04      	itt	eq
 8009c18:	6819      	ldreq	r1, [r3, #0]
 8009c1a:	685b      	ldreq	r3, [r3, #4]
 8009c1c:	6063      	str	r3, [r4, #4]
 8009c1e:	bf04      	itt	eq
 8009c20:	1949      	addeq	r1, r1, r5
 8009c22:	6021      	streq	r1, [r4, #0]
 8009c24:	6054      	str	r4, [r2, #4]
 8009c26:	e7ca      	b.n	8009bbe <_free_r+0x26>
 8009c28:	b003      	add	sp, #12
 8009c2a:	bd30      	pop	{r4, r5, pc}
 8009c2c:	20004150 	.word	0x20004150

08009c30 <sbrk_aligned>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	4e0e      	ldr	r6, [pc, #56]	; (8009c6c <sbrk_aligned+0x3c>)
 8009c34:	460c      	mov	r4, r1
 8009c36:	6831      	ldr	r1, [r6, #0]
 8009c38:	4605      	mov	r5, r0
 8009c3a:	b911      	cbnz	r1, 8009c42 <sbrk_aligned+0x12>
 8009c3c:	f000 fd84 	bl	800a748 <_sbrk_r>
 8009c40:	6030      	str	r0, [r6, #0]
 8009c42:	4621      	mov	r1, r4
 8009c44:	4628      	mov	r0, r5
 8009c46:	f000 fd7f 	bl	800a748 <_sbrk_r>
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	d00a      	beq.n	8009c64 <sbrk_aligned+0x34>
 8009c4e:	1cc4      	adds	r4, r0, #3
 8009c50:	f024 0403 	bic.w	r4, r4, #3
 8009c54:	42a0      	cmp	r0, r4
 8009c56:	d007      	beq.n	8009c68 <sbrk_aligned+0x38>
 8009c58:	1a21      	subs	r1, r4, r0
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f000 fd74 	bl	800a748 <_sbrk_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	d101      	bne.n	8009c68 <sbrk_aligned+0x38>
 8009c64:	f04f 34ff 	mov.w	r4, #4294967295
 8009c68:	4620      	mov	r0, r4
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	20004154 	.word	0x20004154

08009c70 <_malloc_r>:
 8009c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c74:	1ccd      	adds	r5, r1, #3
 8009c76:	f025 0503 	bic.w	r5, r5, #3
 8009c7a:	3508      	adds	r5, #8
 8009c7c:	2d0c      	cmp	r5, #12
 8009c7e:	bf38      	it	cc
 8009c80:	250c      	movcc	r5, #12
 8009c82:	2d00      	cmp	r5, #0
 8009c84:	4607      	mov	r7, r0
 8009c86:	db01      	blt.n	8009c8c <_malloc_r+0x1c>
 8009c88:	42a9      	cmp	r1, r5
 8009c8a:	d905      	bls.n	8009c98 <_malloc_r+0x28>
 8009c8c:	230c      	movs	r3, #12
 8009c8e:	603b      	str	r3, [r7, #0]
 8009c90:	2600      	movs	r6, #0
 8009c92:	4630      	mov	r0, r6
 8009c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c98:	4e2e      	ldr	r6, [pc, #184]	; (8009d54 <_malloc_r+0xe4>)
 8009c9a:	f001 fed9 	bl	800ba50 <__malloc_lock>
 8009c9e:	6833      	ldr	r3, [r6, #0]
 8009ca0:	461c      	mov	r4, r3
 8009ca2:	bb34      	cbnz	r4, 8009cf2 <_malloc_r+0x82>
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	f7ff ffc2 	bl	8009c30 <sbrk_aligned>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	4604      	mov	r4, r0
 8009cb0:	d14d      	bne.n	8009d4e <_malloc_r+0xde>
 8009cb2:	6834      	ldr	r4, [r6, #0]
 8009cb4:	4626      	mov	r6, r4
 8009cb6:	2e00      	cmp	r6, #0
 8009cb8:	d140      	bne.n	8009d3c <_malloc_r+0xcc>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	4631      	mov	r1, r6
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	eb04 0803 	add.w	r8, r4, r3
 8009cc4:	f000 fd40 	bl	800a748 <_sbrk_r>
 8009cc8:	4580      	cmp	r8, r0
 8009cca:	d13a      	bne.n	8009d42 <_malloc_r+0xd2>
 8009ccc:	6821      	ldr	r1, [r4, #0]
 8009cce:	3503      	adds	r5, #3
 8009cd0:	1a6d      	subs	r5, r5, r1
 8009cd2:	f025 0503 	bic.w	r5, r5, #3
 8009cd6:	3508      	adds	r5, #8
 8009cd8:	2d0c      	cmp	r5, #12
 8009cda:	bf38      	it	cc
 8009cdc:	250c      	movcc	r5, #12
 8009cde:	4629      	mov	r1, r5
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f7ff ffa5 	bl	8009c30 <sbrk_aligned>
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	d02b      	beq.n	8009d42 <_malloc_r+0xd2>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	442b      	add	r3, r5
 8009cee:	6023      	str	r3, [r4, #0]
 8009cf0:	e00e      	b.n	8009d10 <_malloc_r+0xa0>
 8009cf2:	6822      	ldr	r2, [r4, #0]
 8009cf4:	1b52      	subs	r2, r2, r5
 8009cf6:	d41e      	bmi.n	8009d36 <_malloc_r+0xc6>
 8009cf8:	2a0b      	cmp	r2, #11
 8009cfa:	d916      	bls.n	8009d2a <_malloc_r+0xba>
 8009cfc:	1961      	adds	r1, r4, r5
 8009cfe:	42a3      	cmp	r3, r4
 8009d00:	6025      	str	r5, [r4, #0]
 8009d02:	bf18      	it	ne
 8009d04:	6059      	strne	r1, [r3, #4]
 8009d06:	6863      	ldr	r3, [r4, #4]
 8009d08:	bf08      	it	eq
 8009d0a:	6031      	streq	r1, [r6, #0]
 8009d0c:	5162      	str	r2, [r4, r5]
 8009d0e:	604b      	str	r3, [r1, #4]
 8009d10:	4638      	mov	r0, r7
 8009d12:	f104 060b 	add.w	r6, r4, #11
 8009d16:	f001 fea1 	bl	800ba5c <__malloc_unlock>
 8009d1a:	f026 0607 	bic.w	r6, r6, #7
 8009d1e:	1d23      	adds	r3, r4, #4
 8009d20:	1af2      	subs	r2, r6, r3
 8009d22:	d0b6      	beq.n	8009c92 <_malloc_r+0x22>
 8009d24:	1b9b      	subs	r3, r3, r6
 8009d26:	50a3      	str	r3, [r4, r2]
 8009d28:	e7b3      	b.n	8009c92 <_malloc_r+0x22>
 8009d2a:	6862      	ldr	r2, [r4, #4]
 8009d2c:	42a3      	cmp	r3, r4
 8009d2e:	bf0c      	ite	eq
 8009d30:	6032      	streq	r2, [r6, #0]
 8009d32:	605a      	strne	r2, [r3, #4]
 8009d34:	e7ec      	b.n	8009d10 <_malloc_r+0xa0>
 8009d36:	4623      	mov	r3, r4
 8009d38:	6864      	ldr	r4, [r4, #4]
 8009d3a:	e7b2      	b.n	8009ca2 <_malloc_r+0x32>
 8009d3c:	4634      	mov	r4, r6
 8009d3e:	6876      	ldr	r6, [r6, #4]
 8009d40:	e7b9      	b.n	8009cb6 <_malloc_r+0x46>
 8009d42:	230c      	movs	r3, #12
 8009d44:	603b      	str	r3, [r7, #0]
 8009d46:	4638      	mov	r0, r7
 8009d48:	f001 fe88 	bl	800ba5c <__malloc_unlock>
 8009d4c:	e7a1      	b.n	8009c92 <_malloc_r+0x22>
 8009d4e:	6025      	str	r5, [r4, #0]
 8009d50:	e7de      	b.n	8009d10 <_malloc_r+0xa0>
 8009d52:	bf00      	nop
 8009d54:	20004150 	.word	0x20004150

08009d58 <__cvt>:
 8009d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d5c:	ec55 4b10 	vmov	r4, r5, d0
 8009d60:	2d00      	cmp	r5, #0
 8009d62:	460e      	mov	r6, r1
 8009d64:	4619      	mov	r1, r3
 8009d66:	462b      	mov	r3, r5
 8009d68:	bfbb      	ittet	lt
 8009d6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d6e:	461d      	movlt	r5, r3
 8009d70:	2300      	movge	r3, #0
 8009d72:	232d      	movlt	r3, #45	; 0x2d
 8009d74:	700b      	strb	r3, [r1, #0]
 8009d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d7c:	4691      	mov	r9, r2
 8009d7e:	f023 0820 	bic.w	r8, r3, #32
 8009d82:	bfbc      	itt	lt
 8009d84:	4622      	movlt	r2, r4
 8009d86:	4614      	movlt	r4, r2
 8009d88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d8c:	d005      	beq.n	8009d9a <__cvt+0x42>
 8009d8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d92:	d100      	bne.n	8009d96 <__cvt+0x3e>
 8009d94:	3601      	adds	r6, #1
 8009d96:	2102      	movs	r1, #2
 8009d98:	e000      	b.n	8009d9c <__cvt+0x44>
 8009d9a:	2103      	movs	r1, #3
 8009d9c:	ab03      	add	r3, sp, #12
 8009d9e:	9301      	str	r3, [sp, #4]
 8009da0:	ab02      	add	r3, sp, #8
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	ec45 4b10 	vmov	d0, r4, r5
 8009da8:	4653      	mov	r3, sl
 8009daa:	4632      	mov	r2, r6
 8009dac:	f000 fe30 	bl	800aa10 <_dtoa_r>
 8009db0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009db4:	4607      	mov	r7, r0
 8009db6:	d102      	bne.n	8009dbe <__cvt+0x66>
 8009db8:	f019 0f01 	tst.w	r9, #1
 8009dbc:	d022      	beq.n	8009e04 <__cvt+0xac>
 8009dbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dc2:	eb07 0906 	add.w	r9, r7, r6
 8009dc6:	d110      	bne.n	8009dea <__cvt+0x92>
 8009dc8:	783b      	ldrb	r3, [r7, #0]
 8009dca:	2b30      	cmp	r3, #48	; 0x30
 8009dcc:	d10a      	bne.n	8009de4 <__cvt+0x8c>
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f7f6 fe8f 	bl	8000af8 <__aeabi_dcmpeq>
 8009dda:	b918      	cbnz	r0, 8009de4 <__cvt+0x8c>
 8009ddc:	f1c6 0601 	rsb	r6, r6, #1
 8009de0:	f8ca 6000 	str.w	r6, [sl]
 8009de4:	f8da 3000 	ldr.w	r3, [sl]
 8009de8:	4499      	add	r9, r3
 8009dea:	2200      	movs	r2, #0
 8009dec:	2300      	movs	r3, #0
 8009dee:	4620      	mov	r0, r4
 8009df0:	4629      	mov	r1, r5
 8009df2:	f7f6 fe81 	bl	8000af8 <__aeabi_dcmpeq>
 8009df6:	b108      	cbz	r0, 8009dfc <__cvt+0xa4>
 8009df8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009dfc:	2230      	movs	r2, #48	; 0x30
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	454b      	cmp	r3, r9
 8009e02:	d307      	bcc.n	8009e14 <__cvt+0xbc>
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e08:	1bdb      	subs	r3, r3, r7
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	b004      	add	sp, #16
 8009e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e14:	1c59      	adds	r1, r3, #1
 8009e16:	9103      	str	r1, [sp, #12]
 8009e18:	701a      	strb	r2, [r3, #0]
 8009e1a:	e7f0      	b.n	8009dfe <__cvt+0xa6>

08009e1c <__exponent>:
 8009e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2900      	cmp	r1, #0
 8009e22:	bfb8      	it	lt
 8009e24:	4249      	neglt	r1, r1
 8009e26:	f803 2b02 	strb.w	r2, [r3], #2
 8009e2a:	bfb4      	ite	lt
 8009e2c:	222d      	movlt	r2, #45	; 0x2d
 8009e2e:	222b      	movge	r2, #43	; 0x2b
 8009e30:	2909      	cmp	r1, #9
 8009e32:	7042      	strb	r2, [r0, #1]
 8009e34:	dd2a      	ble.n	8009e8c <__exponent+0x70>
 8009e36:	f10d 0407 	add.w	r4, sp, #7
 8009e3a:	46a4      	mov	ip, r4
 8009e3c:	270a      	movs	r7, #10
 8009e3e:	46a6      	mov	lr, r4
 8009e40:	460a      	mov	r2, r1
 8009e42:	fb91 f6f7 	sdiv	r6, r1, r7
 8009e46:	fb07 1516 	mls	r5, r7, r6, r1
 8009e4a:	3530      	adds	r5, #48	; 0x30
 8009e4c:	2a63      	cmp	r2, #99	; 0x63
 8009e4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009e56:	4631      	mov	r1, r6
 8009e58:	dcf1      	bgt.n	8009e3e <__exponent+0x22>
 8009e5a:	3130      	adds	r1, #48	; 0x30
 8009e5c:	f1ae 0502 	sub.w	r5, lr, #2
 8009e60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009e64:	1c44      	adds	r4, r0, #1
 8009e66:	4629      	mov	r1, r5
 8009e68:	4561      	cmp	r1, ip
 8009e6a:	d30a      	bcc.n	8009e82 <__exponent+0x66>
 8009e6c:	f10d 0209 	add.w	r2, sp, #9
 8009e70:	eba2 020e 	sub.w	r2, r2, lr
 8009e74:	4565      	cmp	r5, ip
 8009e76:	bf88      	it	hi
 8009e78:	2200      	movhi	r2, #0
 8009e7a:	4413      	add	r3, r2
 8009e7c:	1a18      	subs	r0, r3, r0
 8009e7e:	b003      	add	sp, #12
 8009e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009e8a:	e7ed      	b.n	8009e68 <__exponent+0x4c>
 8009e8c:	2330      	movs	r3, #48	; 0x30
 8009e8e:	3130      	adds	r1, #48	; 0x30
 8009e90:	7083      	strb	r3, [r0, #2]
 8009e92:	70c1      	strb	r1, [r0, #3]
 8009e94:	1d03      	adds	r3, r0, #4
 8009e96:	e7f1      	b.n	8009e7c <__exponent+0x60>

08009e98 <_printf_float>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	ed2d 8b02 	vpush	{d8}
 8009ea0:	b08d      	sub	sp, #52	; 0x34
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ea8:	4616      	mov	r6, r2
 8009eaa:	461f      	mov	r7, r3
 8009eac:	4605      	mov	r5, r0
 8009eae:	f001 fd55 	bl	800b95c <_localeconv_r>
 8009eb2:	f8d0 a000 	ldr.w	sl, [r0]
 8009eb6:	4650      	mov	r0, sl
 8009eb8:	f7f6 f99c 	bl	80001f4 <strlen>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	9305      	str	r3, [sp, #20]
 8009ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ec8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ecc:	3307      	adds	r3, #7
 8009ece:	f023 0307 	bic.w	r3, r3, #7
 8009ed2:	f103 0208 	add.w	r2, r3, #8
 8009ed6:	f8c8 2000 	str.w	r2, [r8]
 8009eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ede:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009ee2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009ee6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009eea:	9307      	str	r3, [sp, #28]
 8009eec:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ef0:	ee08 0a10 	vmov	s16, r0
 8009ef4:	4b9f      	ldr	r3, [pc, #636]	; (800a174 <_printf_float+0x2dc>)
 8009ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009efa:	f04f 32ff 	mov.w	r2, #4294967295
 8009efe:	f7f6 fe2d 	bl	8000b5c <__aeabi_dcmpun>
 8009f02:	bb88      	cbnz	r0, 8009f68 <_printf_float+0xd0>
 8009f04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f08:	4b9a      	ldr	r3, [pc, #616]	; (800a174 <_printf_float+0x2dc>)
 8009f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0e:	f7f6 fe07 	bl	8000b20 <__aeabi_dcmple>
 8009f12:	bb48      	cbnz	r0, 8009f68 <_printf_float+0xd0>
 8009f14:	2200      	movs	r2, #0
 8009f16:	2300      	movs	r3, #0
 8009f18:	4640      	mov	r0, r8
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	f7f6 fdf6 	bl	8000b0c <__aeabi_dcmplt>
 8009f20:	b110      	cbz	r0, 8009f28 <_printf_float+0x90>
 8009f22:	232d      	movs	r3, #45	; 0x2d
 8009f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f28:	4b93      	ldr	r3, [pc, #588]	; (800a178 <_printf_float+0x2e0>)
 8009f2a:	4894      	ldr	r0, [pc, #592]	; (800a17c <_printf_float+0x2e4>)
 8009f2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009f30:	bf94      	ite	ls
 8009f32:	4698      	movls	r8, r3
 8009f34:	4680      	movhi	r8, r0
 8009f36:	2303      	movs	r3, #3
 8009f38:	6123      	str	r3, [r4, #16]
 8009f3a:	9b05      	ldr	r3, [sp, #20]
 8009f3c:	f023 0204 	bic.w	r2, r3, #4
 8009f40:	6022      	str	r2, [r4, #0]
 8009f42:	f04f 0900 	mov.w	r9, #0
 8009f46:	9700      	str	r7, [sp, #0]
 8009f48:	4633      	mov	r3, r6
 8009f4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	4628      	mov	r0, r5
 8009f50:	f000 f9d8 	bl	800a304 <_printf_common>
 8009f54:	3001      	adds	r0, #1
 8009f56:	f040 8090 	bne.w	800a07a <_printf_float+0x1e2>
 8009f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5e:	b00d      	add	sp, #52	; 0x34
 8009f60:	ecbd 8b02 	vpop	{d8}
 8009f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f68:	4642      	mov	r2, r8
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	4640      	mov	r0, r8
 8009f6e:	4649      	mov	r1, r9
 8009f70:	f7f6 fdf4 	bl	8000b5c <__aeabi_dcmpun>
 8009f74:	b140      	cbz	r0, 8009f88 <_printf_float+0xf0>
 8009f76:	464b      	mov	r3, r9
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	bfbc      	itt	lt
 8009f7c:	232d      	movlt	r3, #45	; 0x2d
 8009f7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f82:	487f      	ldr	r0, [pc, #508]	; (800a180 <_printf_float+0x2e8>)
 8009f84:	4b7f      	ldr	r3, [pc, #508]	; (800a184 <_printf_float+0x2ec>)
 8009f86:	e7d1      	b.n	8009f2c <_printf_float+0x94>
 8009f88:	6863      	ldr	r3, [r4, #4]
 8009f8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009f8e:	9206      	str	r2, [sp, #24]
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	d13f      	bne.n	800a014 <_printf_float+0x17c>
 8009f94:	2306      	movs	r3, #6
 8009f96:	6063      	str	r3, [r4, #4]
 8009f98:	9b05      	ldr	r3, [sp, #20]
 8009f9a:	6861      	ldr	r1, [r4, #4]
 8009f9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9303      	str	r3, [sp, #12]
 8009fa4:	ab0a      	add	r3, sp, #40	; 0x28
 8009fa6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009faa:	ab09      	add	r3, sp, #36	; 0x24
 8009fac:	ec49 8b10 	vmov	d0, r8, r9
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	6022      	str	r2, [r4, #0]
 8009fb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009fb8:	4628      	mov	r0, r5
 8009fba:	f7ff fecd 	bl	8009d58 <__cvt>
 8009fbe:	9b06      	ldr	r3, [sp, #24]
 8009fc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fc2:	2b47      	cmp	r3, #71	; 0x47
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	d108      	bne.n	8009fda <_printf_float+0x142>
 8009fc8:	1cc8      	adds	r0, r1, #3
 8009fca:	db02      	blt.n	8009fd2 <_printf_float+0x13a>
 8009fcc:	6863      	ldr	r3, [r4, #4]
 8009fce:	4299      	cmp	r1, r3
 8009fd0:	dd41      	ble.n	800a056 <_printf_float+0x1be>
 8009fd2:	f1ab 0b02 	sub.w	fp, fp, #2
 8009fd6:	fa5f fb8b 	uxtb.w	fp, fp
 8009fda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009fde:	d820      	bhi.n	800a022 <_printf_float+0x18a>
 8009fe0:	3901      	subs	r1, #1
 8009fe2:	465a      	mov	r2, fp
 8009fe4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fe8:	9109      	str	r1, [sp, #36]	; 0x24
 8009fea:	f7ff ff17 	bl	8009e1c <__exponent>
 8009fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ff0:	1813      	adds	r3, r2, r0
 8009ff2:	2a01      	cmp	r2, #1
 8009ff4:	4681      	mov	r9, r0
 8009ff6:	6123      	str	r3, [r4, #16]
 8009ff8:	dc02      	bgt.n	800a000 <_printf_float+0x168>
 8009ffa:	6822      	ldr	r2, [r4, #0]
 8009ffc:	07d2      	lsls	r2, r2, #31
 8009ffe:	d501      	bpl.n	800a004 <_printf_float+0x16c>
 800a000:	3301      	adds	r3, #1
 800a002:	6123      	str	r3, [r4, #16]
 800a004:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d09c      	beq.n	8009f46 <_printf_float+0xae>
 800a00c:	232d      	movs	r3, #45	; 0x2d
 800a00e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a012:	e798      	b.n	8009f46 <_printf_float+0xae>
 800a014:	9a06      	ldr	r2, [sp, #24]
 800a016:	2a47      	cmp	r2, #71	; 0x47
 800a018:	d1be      	bne.n	8009f98 <_printf_float+0x100>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1bc      	bne.n	8009f98 <_printf_float+0x100>
 800a01e:	2301      	movs	r3, #1
 800a020:	e7b9      	b.n	8009f96 <_printf_float+0xfe>
 800a022:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a026:	d118      	bne.n	800a05a <_printf_float+0x1c2>
 800a028:	2900      	cmp	r1, #0
 800a02a:	6863      	ldr	r3, [r4, #4]
 800a02c:	dd0b      	ble.n	800a046 <_printf_float+0x1ae>
 800a02e:	6121      	str	r1, [r4, #16]
 800a030:	b913      	cbnz	r3, 800a038 <_printf_float+0x1a0>
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	07d0      	lsls	r0, r2, #31
 800a036:	d502      	bpl.n	800a03e <_printf_float+0x1a6>
 800a038:	3301      	adds	r3, #1
 800a03a:	440b      	add	r3, r1
 800a03c:	6123      	str	r3, [r4, #16]
 800a03e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a040:	f04f 0900 	mov.w	r9, #0
 800a044:	e7de      	b.n	800a004 <_printf_float+0x16c>
 800a046:	b913      	cbnz	r3, 800a04e <_printf_float+0x1b6>
 800a048:	6822      	ldr	r2, [r4, #0]
 800a04a:	07d2      	lsls	r2, r2, #31
 800a04c:	d501      	bpl.n	800a052 <_printf_float+0x1ba>
 800a04e:	3302      	adds	r3, #2
 800a050:	e7f4      	b.n	800a03c <_printf_float+0x1a4>
 800a052:	2301      	movs	r3, #1
 800a054:	e7f2      	b.n	800a03c <_printf_float+0x1a4>
 800a056:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a05c:	4299      	cmp	r1, r3
 800a05e:	db05      	blt.n	800a06c <_printf_float+0x1d4>
 800a060:	6823      	ldr	r3, [r4, #0]
 800a062:	6121      	str	r1, [r4, #16]
 800a064:	07d8      	lsls	r0, r3, #31
 800a066:	d5ea      	bpl.n	800a03e <_printf_float+0x1a6>
 800a068:	1c4b      	adds	r3, r1, #1
 800a06a:	e7e7      	b.n	800a03c <_printf_float+0x1a4>
 800a06c:	2900      	cmp	r1, #0
 800a06e:	bfd4      	ite	le
 800a070:	f1c1 0202 	rsble	r2, r1, #2
 800a074:	2201      	movgt	r2, #1
 800a076:	4413      	add	r3, r2
 800a078:	e7e0      	b.n	800a03c <_printf_float+0x1a4>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	055a      	lsls	r2, r3, #21
 800a07e:	d407      	bmi.n	800a090 <_printf_float+0x1f8>
 800a080:	6923      	ldr	r3, [r4, #16]
 800a082:	4642      	mov	r2, r8
 800a084:	4631      	mov	r1, r6
 800a086:	4628      	mov	r0, r5
 800a088:	47b8      	blx	r7
 800a08a:	3001      	adds	r0, #1
 800a08c:	d12c      	bne.n	800a0e8 <_printf_float+0x250>
 800a08e:	e764      	b.n	8009f5a <_printf_float+0xc2>
 800a090:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a094:	f240 80e0 	bls.w	800a258 <_printf_float+0x3c0>
 800a098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a09c:	2200      	movs	r2, #0
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f7f6 fd2a 	bl	8000af8 <__aeabi_dcmpeq>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d034      	beq.n	800a112 <_printf_float+0x27a>
 800a0a8:	4a37      	ldr	r2, [pc, #220]	; (800a188 <_printf_float+0x2f0>)
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f43f af51 	beq.w	8009f5a <_printf_float+0xc2>
 800a0b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	db02      	blt.n	800a0c6 <_printf_float+0x22e>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	07d8      	lsls	r0, r3, #31
 800a0c4:	d510      	bpl.n	800a0e8 <_printf_float+0x250>
 800a0c6:	ee18 3a10 	vmov	r3, s16
 800a0ca:	4652      	mov	r2, sl
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	47b8      	blx	r7
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	f43f af41 	beq.w	8009f5a <_printf_float+0xc2>
 800a0d8:	f04f 0800 	mov.w	r8, #0
 800a0dc:	f104 091a 	add.w	r9, r4, #26
 800a0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	4543      	cmp	r3, r8
 800a0e6:	dc09      	bgt.n	800a0fc <_printf_float+0x264>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	079b      	lsls	r3, r3, #30
 800a0ec:	f100 8105 	bmi.w	800a2fa <_printf_float+0x462>
 800a0f0:	68e0      	ldr	r0, [r4, #12]
 800a0f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0f4:	4298      	cmp	r0, r3
 800a0f6:	bfb8      	it	lt
 800a0f8:	4618      	movlt	r0, r3
 800a0fa:	e730      	b.n	8009f5e <_printf_float+0xc6>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	464a      	mov	r2, r9
 800a100:	4631      	mov	r1, r6
 800a102:	4628      	mov	r0, r5
 800a104:	47b8      	blx	r7
 800a106:	3001      	adds	r0, #1
 800a108:	f43f af27 	beq.w	8009f5a <_printf_float+0xc2>
 800a10c:	f108 0801 	add.w	r8, r8, #1
 800a110:	e7e6      	b.n	800a0e0 <_printf_float+0x248>
 800a112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a114:	2b00      	cmp	r3, #0
 800a116:	dc39      	bgt.n	800a18c <_printf_float+0x2f4>
 800a118:	4a1b      	ldr	r2, [pc, #108]	; (800a188 <_printf_float+0x2f0>)
 800a11a:	2301      	movs	r3, #1
 800a11c:	4631      	mov	r1, r6
 800a11e:	4628      	mov	r0, r5
 800a120:	47b8      	blx	r7
 800a122:	3001      	adds	r0, #1
 800a124:	f43f af19 	beq.w	8009f5a <_printf_float+0xc2>
 800a128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a12c:	4313      	orrs	r3, r2
 800a12e:	d102      	bne.n	800a136 <_printf_float+0x29e>
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	07d9      	lsls	r1, r3, #31
 800a134:	d5d8      	bpl.n	800a0e8 <_printf_float+0x250>
 800a136:	ee18 3a10 	vmov	r3, s16
 800a13a:	4652      	mov	r2, sl
 800a13c:	4631      	mov	r1, r6
 800a13e:	4628      	mov	r0, r5
 800a140:	47b8      	blx	r7
 800a142:	3001      	adds	r0, #1
 800a144:	f43f af09 	beq.w	8009f5a <_printf_float+0xc2>
 800a148:	f04f 0900 	mov.w	r9, #0
 800a14c:	f104 0a1a 	add.w	sl, r4, #26
 800a150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a152:	425b      	negs	r3, r3
 800a154:	454b      	cmp	r3, r9
 800a156:	dc01      	bgt.n	800a15c <_printf_float+0x2c4>
 800a158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15a:	e792      	b.n	800a082 <_printf_float+0x1ea>
 800a15c:	2301      	movs	r3, #1
 800a15e:	4652      	mov	r2, sl
 800a160:	4631      	mov	r1, r6
 800a162:	4628      	mov	r0, r5
 800a164:	47b8      	blx	r7
 800a166:	3001      	adds	r0, #1
 800a168:	f43f aef7 	beq.w	8009f5a <_printf_float+0xc2>
 800a16c:	f109 0901 	add.w	r9, r9, #1
 800a170:	e7ee      	b.n	800a150 <_printf_float+0x2b8>
 800a172:	bf00      	nop
 800a174:	7fefffff 	.word	0x7fefffff
 800a178:	0800cb4c 	.word	0x0800cb4c
 800a17c:	0800cb50 	.word	0x0800cb50
 800a180:	0800cb58 	.word	0x0800cb58
 800a184:	0800cb54 	.word	0x0800cb54
 800a188:	0800cb5c 	.word	0x0800cb5c
 800a18c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a18e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a190:	429a      	cmp	r2, r3
 800a192:	bfa8      	it	ge
 800a194:	461a      	movge	r2, r3
 800a196:	2a00      	cmp	r2, #0
 800a198:	4691      	mov	r9, r2
 800a19a:	dc37      	bgt.n	800a20c <_printf_float+0x374>
 800a19c:	f04f 0b00 	mov.w	fp, #0
 800a1a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1a4:	f104 021a 	add.w	r2, r4, #26
 800a1a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	eba3 0309 	sub.w	r3, r3, r9
 800a1b0:	455b      	cmp	r3, fp
 800a1b2:	dc33      	bgt.n	800a21c <_printf_float+0x384>
 800a1b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	db3b      	blt.n	800a234 <_printf_float+0x39c>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	07da      	lsls	r2, r3, #31
 800a1c0:	d438      	bmi.n	800a234 <_printf_float+0x39c>
 800a1c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c4:	9a05      	ldr	r2, [sp, #20]
 800a1c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1c8:	1a9a      	subs	r2, r3, r2
 800a1ca:	eba3 0901 	sub.w	r9, r3, r1
 800a1ce:	4591      	cmp	r9, r2
 800a1d0:	bfa8      	it	ge
 800a1d2:	4691      	movge	r9, r2
 800a1d4:	f1b9 0f00 	cmp.w	r9, #0
 800a1d8:	dc35      	bgt.n	800a246 <_printf_float+0x3ae>
 800a1da:	f04f 0800 	mov.w	r8, #0
 800a1de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1e2:	f104 0a1a 	add.w	sl, r4, #26
 800a1e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1ea:	1a9b      	subs	r3, r3, r2
 800a1ec:	eba3 0309 	sub.w	r3, r3, r9
 800a1f0:	4543      	cmp	r3, r8
 800a1f2:	f77f af79 	ble.w	800a0e8 <_printf_float+0x250>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	4652      	mov	r2, sl
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b8      	blx	r7
 800a200:	3001      	adds	r0, #1
 800a202:	f43f aeaa 	beq.w	8009f5a <_printf_float+0xc2>
 800a206:	f108 0801 	add.w	r8, r8, #1
 800a20a:	e7ec      	b.n	800a1e6 <_printf_float+0x34e>
 800a20c:	4613      	mov	r3, r2
 800a20e:	4631      	mov	r1, r6
 800a210:	4642      	mov	r2, r8
 800a212:	4628      	mov	r0, r5
 800a214:	47b8      	blx	r7
 800a216:	3001      	adds	r0, #1
 800a218:	d1c0      	bne.n	800a19c <_printf_float+0x304>
 800a21a:	e69e      	b.n	8009f5a <_printf_float+0xc2>
 800a21c:	2301      	movs	r3, #1
 800a21e:	4631      	mov	r1, r6
 800a220:	4628      	mov	r0, r5
 800a222:	9205      	str	r2, [sp, #20]
 800a224:	47b8      	blx	r7
 800a226:	3001      	adds	r0, #1
 800a228:	f43f ae97 	beq.w	8009f5a <_printf_float+0xc2>
 800a22c:	9a05      	ldr	r2, [sp, #20]
 800a22e:	f10b 0b01 	add.w	fp, fp, #1
 800a232:	e7b9      	b.n	800a1a8 <_printf_float+0x310>
 800a234:	ee18 3a10 	vmov	r3, s16
 800a238:	4652      	mov	r2, sl
 800a23a:	4631      	mov	r1, r6
 800a23c:	4628      	mov	r0, r5
 800a23e:	47b8      	blx	r7
 800a240:	3001      	adds	r0, #1
 800a242:	d1be      	bne.n	800a1c2 <_printf_float+0x32a>
 800a244:	e689      	b.n	8009f5a <_printf_float+0xc2>
 800a246:	9a05      	ldr	r2, [sp, #20]
 800a248:	464b      	mov	r3, r9
 800a24a:	4442      	add	r2, r8
 800a24c:	4631      	mov	r1, r6
 800a24e:	4628      	mov	r0, r5
 800a250:	47b8      	blx	r7
 800a252:	3001      	adds	r0, #1
 800a254:	d1c1      	bne.n	800a1da <_printf_float+0x342>
 800a256:	e680      	b.n	8009f5a <_printf_float+0xc2>
 800a258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a25a:	2a01      	cmp	r2, #1
 800a25c:	dc01      	bgt.n	800a262 <_printf_float+0x3ca>
 800a25e:	07db      	lsls	r3, r3, #31
 800a260:	d538      	bpl.n	800a2d4 <_printf_float+0x43c>
 800a262:	2301      	movs	r3, #1
 800a264:	4642      	mov	r2, r8
 800a266:	4631      	mov	r1, r6
 800a268:	4628      	mov	r0, r5
 800a26a:	47b8      	blx	r7
 800a26c:	3001      	adds	r0, #1
 800a26e:	f43f ae74 	beq.w	8009f5a <_printf_float+0xc2>
 800a272:	ee18 3a10 	vmov	r3, s16
 800a276:	4652      	mov	r2, sl
 800a278:	4631      	mov	r1, r6
 800a27a:	4628      	mov	r0, r5
 800a27c:	47b8      	blx	r7
 800a27e:	3001      	adds	r0, #1
 800a280:	f43f ae6b 	beq.w	8009f5a <_printf_float+0xc2>
 800a284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a288:	2200      	movs	r2, #0
 800a28a:	2300      	movs	r3, #0
 800a28c:	f7f6 fc34 	bl	8000af8 <__aeabi_dcmpeq>
 800a290:	b9d8      	cbnz	r0, 800a2ca <_printf_float+0x432>
 800a292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a294:	f108 0201 	add.w	r2, r8, #1
 800a298:	3b01      	subs	r3, #1
 800a29a:	4631      	mov	r1, r6
 800a29c:	4628      	mov	r0, r5
 800a29e:	47b8      	blx	r7
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	d10e      	bne.n	800a2c2 <_printf_float+0x42a>
 800a2a4:	e659      	b.n	8009f5a <_printf_float+0xc2>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	4652      	mov	r2, sl
 800a2aa:	4631      	mov	r1, r6
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	47b8      	blx	r7
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	f43f ae52 	beq.w	8009f5a <_printf_float+0xc2>
 800a2b6:	f108 0801 	add.w	r8, r8, #1
 800a2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	4543      	cmp	r3, r8
 800a2c0:	dcf1      	bgt.n	800a2a6 <_printf_float+0x40e>
 800a2c2:	464b      	mov	r3, r9
 800a2c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a2c8:	e6dc      	b.n	800a084 <_printf_float+0x1ec>
 800a2ca:	f04f 0800 	mov.w	r8, #0
 800a2ce:	f104 0a1a 	add.w	sl, r4, #26
 800a2d2:	e7f2      	b.n	800a2ba <_printf_float+0x422>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	4642      	mov	r2, r8
 800a2d8:	e7df      	b.n	800a29a <_printf_float+0x402>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	464a      	mov	r2, r9
 800a2de:	4631      	mov	r1, r6
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	47b8      	blx	r7
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	f43f ae38 	beq.w	8009f5a <_printf_float+0xc2>
 800a2ea:	f108 0801 	add.w	r8, r8, #1
 800a2ee:	68e3      	ldr	r3, [r4, #12]
 800a2f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2f2:	1a5b      	subs	r3, r3, r1
 800a2f4:	4543      	cmp	r3, r8
 800a2f6:	dcf0      	bgt.n	800a2da <_printf_float+0x442>
 800a2f8:	e6fa      	b.n	800a0f0 <_printf_float+0x258>
 800a2fa:	f04f 0800 	mov.w	r8, #0
 800a2fe:	f104 0919 	add.w	r9, r4, #25
 800a302:	e7f4      	b.n	800a2ee <_printf_float+0x456>

0800a304 <_printf_common>:
 800a304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	4616      	mov	r6, r2
 800a30a:	4699      	mov	r9, r3
 800a30c:	688a      	ldr	r2, [r1, #8]
 800a30e:	690b      	ldr	r3, [r1, #16]
 800a310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a314:	4293      	cmp	r3, r2
 800a316:	bfb8      	it	lt
 800a318:	4613      	movlt	r3, r2
 800a31a:	6033      	str	r3, [r6, #0]
 800a31c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a320:	4607      	mov	r7, r0
 800a322:	460c      	mov	r4, r1
 800a324:	b10a      	cbz	r2, 800a32a <_printf_common+0x26>
 800a326:	3301      	adds	r3, #1
 800a328:	6033      	str	r3, [r6, #0]
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	0699      	lsls	r1, r3, #26
 800a32e:	bf42      	ittt	mi
 800a330:	6833      	ldrmi	r3, [r6, #0]
 800a332:	3302      	addmi	r3, #2
 800a334:	6033      	strmi	r3, [r6, #0]
 800a336:	6825      	ldr	r5, [r4, #0]
 800a338:	f015 0506 	ands.w	r5, r5, #6
 800a33c:	d106      	bne.n	800a34c <_printf_common+0x48>
 800a33e:	f104 0a19 	add.w	sl, r4, #25
 800a342:	68e3      	ldr	r3, [r4, #12]
 800a344:	6832      	ldr	r2, [r6, #0]
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	42ab      	cmp	r3, r5
 800a34a:	dc26      	bgt.n	800a39a <_printf_common+0x96>
 800a34c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a350:	1e13      	subs	r3, r2, #0
 800a352:	6822      	ldr	r2, [r4, #0]
 800a354:	bf18      	it	ne
 800a356:	2301      	movne	r3, #1
 800a358:	0692      	lsls	r2, r2, #26
 800a35a:	d42b      	bmi.n	800a3b4 <_printf_common+0xb0>
 800a35c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a360:	4649      	mov	r1, r9
 800a362:	4638      	mov	r0, r7
 800a364:	47c0      	blx	r8
 800a366:	3001      	adds	r0, #1
 800a368:	d01e      	beq.n	800a3a8 <_printf_common+0xa4>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	68e5      	ldr	r5, [r4, #12]
 800a36e:	6832      	ldr	r2, [r6, #0]
 800a370:	f003 0306 	and.w	r3, r3, #6
 800a374:	2b04      	cmp	r3, #4
 800a376:	bf08      	it	eq
 800a378:	1aad      	subeq	r5, r5, r2
 800a37a:	68a3      	ldr	r3, [r4, #8]
 800a37c:	6922      	ldr	r2, [r4, #16]
 800a37e:	bf0c      	ite	eq
 800a380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a384:	2500      	movne	r5, #0
 800a386:	4293      	cmp	r3, r2
 800a388:	bfc4      	itt	gt
 800a38a:	1a9b      	subgt	r3, r3, r2
 800a38c:	18ed      	addgt	r5, r5, r3
 800a38e:	2600      	movs	r6, #0
 800a390:	341a      	adds	r4, #26
 800a392:	42b5      	cmp	r5, r6
 800a394:	d11a      	bne.n	800a3cc <_printf_common+0xc8>
 800a396:	2000      	movs	r0, #0
 800a398:	e008      	b.n	800a3ac <_printf_common+0xa8>
 800a39a:	2301      	movs	r3, #1
 800a39c:	4652      	mov	r2, sl
 800a39e:	4649      	mov	r1, r9
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	47c0      	blx	r8
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	d103      	bne.n	800a3b0 <_printf_common+0xac>
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b0:	3501      	adds	r5, #1
 800a3b2:	e7c6      	b.n	800a342 <_printf_common+0x3e>
 800a3b4:	18e1      	adds	r1, r4, r3
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	2030      	movs	r0, #48	; 0x30
 800a3ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3be:	4422      	add	r2, r4
 800a3c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3c8:	3302      	adds	r3, #2
 800a3ca:	e7c7      	b.n	800a35c <_printf_common+0x58>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	47c0      	blx	r8
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d0e6      	beq.n	800a3a8 <_printf_common+0xa4>
 800a3da:	3601      	adds	r6, #1
 800a3dc:	e7d9      	b.n	800a392 <_printf_common+0x8e>
	...

0800a3e0 <_printf_i>:
 800a3e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	7e0f      	ldrb	r7, [r1, #24]
 800a3e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3e8:	2f78      	cmp	r7, #120	; 0x78
 800a3ea:	4691      	mov	r9, r2
 800a3ec:	4680      	mov	r8, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	469a      	mov	sl, r3
 800a3f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3f6:	d807      	bhi.n	800a408 <_printf_i+0x28>
 800a3f8:	2f62      	cmp	r7, #98	; 0x62
 800a3fa:	d80a      	bhi.n	800a412 <_printf_i+0x32>
 800a3fc:	2f00      	cmp	r7, #0
 800a3fe:	f000 80d8 	beq.w	800a5b2 <_printf_i+0x1d2>
 800a402:	2f58      	cmp	r7, #88	; 0x58
 800a404:	f000 80a3 	beq.w	800a54e <_printf_i+0x16e>
 800a408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a40c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a410:	e03a      	b.n	800a488 <_printf_i+0xa8>
 800a412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a416:	2b15      	cmp	r3, #21
 800a418:	d8f6      	bhi.n	800a408 <_printf_i+0x28>
 800a41a:	a101      	add	r1, pc, #4	; (adr r1, 800a420 <_printf_i+0x40>)
 800a41c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a420:	0800a479 	.word	0x0800a479
 800a424:	0800a48d 	.word	0x0800a48d
 800a428:	0800a409 	.word	0x0800a409
 800a42c:	0800a409 	.word	0x0800a409
 800a430:	0800a409 	.word	0x0800a409
 800a434:	0800a409 	.word	0x0800a409
 800a438:	0800a48d 	.word	0x0800a48d
 800a43c:	0800a409 	.word	0x0800a409
 800a440:	0800a409 	.word	0x0800a409
 800a444:	0800a409 	.word	0x0800a409
 800a448:	0800a409 	.word	0x0800a409
 800a44c:	0800a599 	.word	0x0800a599
 800a450:	0800a4bd 	.word	0x0800a4bd
 800a454:	0800a57b 	.word	0x0800a57b
 800a458:	0800a409 	.word	0x0800a409
 800a45c:	0800a409 	.word	0x0800a409
 800a460:	0800a5bb 	.word	0x0800a5bb
 800a464:	0800a409 	.word	0x0800a409
 800a468:	0800a4bd 	.word	0x0800a4bd
 800a46c:	0800a409 	.word	0x0800a409
 800a470:	0800a409 	.word	0x0800a409
 800a474:	0800a583 	.word	0x0800a583
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	1d1a      	adds	r2, r3, #4
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	602a      	str	r2, [r5, #0]
 800a480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a488:	2301      	movs	r3, #1
 800a48a:	e0a3      	b.n	800a5d4 <_printf_i+0x1f4>
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	6829      	ldr	r1, [r5, #0]
 800a490:	0606      	lsls	r6, r0, #24
 800a492:	f101 0304 	add.w	r3, r1, #4
 800a496:	d50a      	bpl.n	800a4ae <_printf_i+0xce>
 800a498:	680e      	ldr	r6, [r1, #0]
 800a49a:	602b      	str	r3, [r5, #0]
 800a49c:	2e00      	cmp	r6, #0
 800a49e:	da03      	bge.n	800a4a8 <_printf_i+0xc8>
 800a4a0:	232d      	movs	r3, #45	; 0x2d
 800a4a2:	4276      	negs	r6, r6
 800a4a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4a8:	485e      	ldr	r0, [pc, #376]	; (800a624 <_printf_i+0x244>)
 800a4aa:	230a      	movs	r3, #10
 800a4ac:	e019      	b.n	800a4e2 <_printf_i+0x102>
 800a4ae:	680e      	ldr	r6, [r1, #0]
 800a4b0:	602b      	str	r3, [r5, #0]
 800a4b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4b6:	bf18      	it	ne
 800a4b8:	b236      	sxthne	r6, r6
 800a4ba:	e7ef      	b.n	800a49c <_printf_i+0xbc>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	6820      	ldr	r0, [r4, #0]
 800a4c0:	1d19      	adds	r1, r3, #4
 800a4c2:	6029      	str	r1, [r5, #0]
 800a4c4:	0601      	lsls	r1, r0, #24
 800a4c6:	d501      	bpl.n	800a4cc <_printf_i+0xec>
 800a4c8:	681e      	ldr	r6, [r3, #0]
 800a4ca:	e002      	b.n	800a4d2 <_printf_i+0xf2>
 800a4cc:	0646      	lsls	r6, r0, #25
 800a4ce:	d5fb      	bpl.n	800a4c8 <_printf_i+0xe8>
 800a4d0:	881e      	ldrh	r6, [r3, #0]
 800a4d2:	4854      	ldr	r0, [pc, #336]	; (800a624 <_printf_i+0x244>)
 800a4d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a4d6:	bf0c      	ite	eq
 800a4d8:	2308      	moveq	r3, #8
 800a4da:	230a      	movne	r3, #10
 800a4dc:	2100      	movs	r1, #0
 800a4de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4e2:	6865      	ldr	r5, [r4, #4]
 800a4e4:	60a5      	str	r5, [r4, #8]
 800a4e6:	2d00      	cmp	r5, #0
 800a4e8:	bfa2      	ittt	ge
 800a4ea:	6821      	ldrge	r1, [r4, #0]
 800a4ec:	f021 0104 	bicge.w	r1, r1, #4
 800a4f0:	6021      	strge	r1, [r4, #0]
 800a4f2:	b90e      	cbnz	r6, 800a4f8 <_printf_i+0x118>
 800a4f4:	2d00      	cmp	r5, #0
 800a4f6:	d04d      	beq.n	800a594 <_printf_i+0x1b4>
 800a4f8:	4615      	mov	r5, r2
 800a4fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4fe:	fb03 6711 	mls	r7, r3, r1, r6
 800a502:	5dc7      	ldrb	r7, [r0, r7]
 800a504:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a508:	4637      	mov	r7, r6
 800a50a:	42bb      	cmp	r3, r7
 800a50c:	460e      	mov	r6, r1
 800a50e:	d9f4      	bls.n	800a4fa <_printf_i+0x11a>
 800a510:	2b08      	cmp	r3, #8
 800a512:	d10b      	bne.n	800a52c <_printf_i+0x14c>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	07de      	lsls	r6, r3, #31
 800a518:	d508      	bpl.n	800a52c <_printf_i+0x14c>
 800a51a:	6923      	ldr	r3, [r4, #16]
 800a51c:	6861      	ldr	r1, [r4, #4]
 800a51e:	4299      	cmp	r1, r3
 800a520:	bfde      	ittt	le
 800a522:	2330      	movle	r3, #48	; 0x30
 800a524:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a528:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a52c:	1b52      	subs	r2, r2, r5
 800a52e:	6122      	str	r2, [r4, #16]
 800a530:	f8cd a000 	str.w	sl, [sp]
 800a534:	464b      	mov	r3, r9
 800a536:	aa03      	add	r2, sp, #12
 800a538:	4621      	mov	r1, r4
 800a53a:	4640      	mov	r0, r8
 800a53c:	f7ff fee2 	bl	800a304 <_printf_common>
 800a540:	3001      	adds	r0, #1
 800a542:	d14c      	bne.n	800a5de <_printf_i+0x1fe>
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	b004      	add	sp, #16
 800a54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54e:	4835      	ldr	r0, [pc, #212]	; (800a624 <_printf_i+0x244>)
 800a550:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a554:	6829      	ldr	r1, [r5, #0]
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	f851 6b04 	ldr.w	r6, [r1], #4
 800a55c:	6029      	str	r1, [r5, #0]
 800a55e:	061d      	lsls	r5, r3, #24
 800a560:	d514      	bpl.n	800a58c <_printf_i+0x1ac>
 800a562:	07df      	lsls	r7, r3, #31
 800a564:	bf44      	itt	mi
 800a566:	f043 0320 	orrmi.w	r3, r3, #32
 800a56a:	6023      	strmi	r3, [r4, #0]
 800a56c:	b91e      	cbnz	r6, 800a576 <_printf_i+0x196>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	f023 0320 	bic.w	r3, r3, #32
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	2310      	movs	r3, #16
 800a578:	e7b0      	b.n	800a4dc <_printf_i+0xfc>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	f043 0320 	orr.w	r3, r3, #32
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	2378      	movs	r3, #120	; 0x78
 800a584:	4828      	ldr	r0, [pc, #160]	; (800a628 <_printf_i+0x248>)
 800a586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a58a:	e7e3      	b.n	800a554 <_printf_i+0x174>
 800a58c:	0659      	lsls	r1, r3, #25
 800a58e:	bf48      	it	mi
 800a590:	b2b6      	uxthmi	r6, r6
 800a592:	e7e6      	b.n	800a562 <_printf_i+0x182>
 800a594:	4615      	mov	r5, r2
 800a596:	e7bb      	b.n	800a510 <_printf_i+0x130>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	6826      	ldr	r6, [r4, #0]
 800a59c:	6961      	ldr	r1, [r4, #20]
 800a59e:	1d18      	adds	r0, r3, #4
 800a5a0:	6028      	str	r0, [r5, #0]
 800a5a2:	0635      	lsls	r5, r6, #24
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	d501      	bpl.n	800a5ac <_printf_i+0x1cc>
 800a5a8:	6019      	str	r1, [r3, #0]
 800a5aa:	e002      	b.n	800a5b2 <_printf_i+0x1d2>
 800a5ac:	0670      	lsls	r0, r6, #25
 800a5ae:	d5fb      	bpl.n	800a5a8 <_printf_i+0x1c8>
 800a5b0:	8019      	strh	r1, [r3, #0]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	6123      	str	r3, [r4, #16]
 800a5b6:	4615      	mov	r5, r2
 800a5b8:	e7ba      	b.n	800a530 <_printf_i+0x150>
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	1d1a      	adds	r2, r3, #4
 800a5be:	602a      	str	r2, [r5, #0]
 800a5c0:	681d      	ldr	r5, [r3, #0]
 800a5c2:	6862      	ldr	r2, [r4, #4]
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f7f5 fe22 	bl	8000210 <memchr>
 800a5cc:	b108      	cbz	r0, 800a5d2 <_printf_i+0x1f2>
 800a5ce:	1b40      	subs	r0, r0, r5
 800a5d0:	6060      	str	r0, [r4, #4]
 800a5d2:	6863      	ldr	r3, [r4, #4]
 800a5d4:	6123      	str	r3, [r4, #16]
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5dc:	e7a8      	b.n	800a530 <_printf_i+0x150>
 800a5de:	6923      	ldr	r3, [r4, #16]
 800a5e0:	462a      	mov	r2, r5
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	4640      	mov	r0, r8
 800a5e6:	47d0      	blx	sl
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d0ab      	beq.n	800a544 <_printf_i+0x164>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	079b      	lsls	r3, r3, #30
 800a5f0:	d413      	bmi.n	800a61a <_printf_i+0x23a>
 800a5f2:	68e0      	ldr	r0, [r4, #12]
 800a5f4:	9b03      	ldr	r3, [sp, #12]
 800a5f6:	4298      	cmp	r0, r3
 800a5f8:	bfb8      	it	lt
 800a5fa:	4618      	movlt	r0, r3
 800a5fc:	e7a4      	b.n	800a548 <_printf_i+0x168>
 800a5fe:	2301      	movs	r3, #1
 800a600:	4632      	mov	r2, r6
 800a602:	4649      	mov	r1, r9
 800a604:	4640      	mov	r0, r8
 800a606:	47d0      	blx	sl
 800a608:	3001      	adds	r0, #1
 800a60a:	d09b      	beq.n	800a544 <_printf_i+0x164>
 800a60c:	3501      	adds	r5, #1
 800a60e:	68e3      	ldr	r3, [r4, #12]
 800a610:	9903      	ldr	r1, [sp, #12]
 800a612:	1a5b      	subs	r3, r3, r1
 800a614:	42ab      	cmp	r3, r5
 800a616:	dcf2      	bgt.n	800a5fe <_printf_i+0x21e>
 800a618:	e7eb      	b.n	800a5f2 <_printf_i+0x212>
 800a61a:	2500      	movs	r5, #0
 800a61c:	f104 0619 	add.w	r6, r4, #25
 800a620:	e7f5      	b.n	800a60e <_printf_i+0x22e>
 800a622:	bf00      	nop
 800a624:	0800cb5e 	.word	0x0800cb5e
 800a628:	0800cb6f 	.word	0x0800cb6f

0800a62c <iprintf>:
 800a62c:	b40f      	push	{r0, r1, r2, r3}
 800a62e:	4b0a      	ldr	r3, [pc, #40]	; (800a658 <iprintf+0x2c>)
 800a630:	b513      	push	{r0, r1, r4, lr}
 800a632:	681c      	ldr	r4, [r3, #0]
 800a634:	b124      	cbz	r4, 800a640 <iprintf+0x14>
 800a636:	69a3      	ldr	r3, [r4, #24]
 800a638:	b913      	cbnz	r3, 800a640 <iprintf+0x14>
 800a63a:	4620      	mov	r0, r4
 800a63c:	f001 f8f0 	bl	800b820 <__sinit>
 800a640:	ab05      	add	r3, sp, #20
 800a642:	9a04      	ldr	r2, [sp, #16]
 800a644:	68a1      	ldr	r1, [r4, #8]
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	4620      	mov	r0, r4
 800a64a:	f001 fdd1 	bl	800c1f0 <_vfiprintf_r>
 800a64e:	b002      	add	sp, #8
 800a650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a654:	b004      	add	sp, #16
 800a656:	4770      	bx	lr
 800a658:	20000024 	.word	0x20000024

0800a65c <_puts_r>:
 800a65c:	b570      	push	{r4, r5, r6, lr}
 800a65e:	460e      	mov	r6, r1
 800a660:	4605      	mov	r5, r0
 800a662:	b118      	cbz	r0, 800a66c <_puts_r+0x10>
 800a664:	6983      	ldr	r3, [r0, #24]
 800a666:	b90b      	cbnz	r3, 800a66c <_puts_r+0x10>
 800a668:	f001 f8da 	bl	800b820 <__sinit>
 800a66c:	69ab      	ldr	r3, [r5, #24]
 800a66e:	68ac      	ldr	r4, [r5, #8]
 800a670:	b913      	cbnz	r3, 800a678 <_puts_r+0x1c>
 800a672:	4628      	mov	r0, r5
 800a674:	f001 f8d4 	bl	800b820 <__sinit>
 800a678:	4b2c      	ldr	r3, [pc, #176]	; (800a72c <_puts_r+0xd0>)
 800a67a:	429c      	cmp	r4, r3
 800a67c:	d120      	bne.n	800a6c0 <_puts_r+0x64>
 800a67e:	686c      	ldr	r4, [r5, #4]
 800a680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a682:	07db      	lsls	r3, r3, #31
 800a684:	d405      	bmi.n	800a692 <_puts_r+0x36>
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	0598      	lsls	r0, r3, #22
 800a68a:	d402      	bmi.n	800a692 <_puts_r+0x36>
 800a68c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a68e:	f001 f96a 	bl	800b966 <__retarget_lock_acquire_recursive>
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	0719      	lsls	r1, r3, #28
 800a696:	d51d      	bpl.n	800a6d4 <_puts_r+0x78>
 800a698:	6923      	ldr	r3, [r4, #16]
 800a69a:	b1db      	cbz	r3, 800a6d4 <_puts_r+0x78>
 800a69c:	3e01      	subs	r6, #1
 800a69e:	68a3      	ldr	r3, [r4, #8]
 800a6a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	60a3      	str	r3, [r4, #8]
 800a6a8:	bb39      	cbnz	r1, 800a6fa <_puts_r+0x9e>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	da38      	bge.n	800a720 <_puts_r+0xc4>
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	210a      	movs	r1, #10
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	f000 f860 	bl	800a778 <__swbuf_r>
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d011      	beq.n	800a6e0 <_puts_r+0x84>
 800a6bc:	250a      	movs	r5, #10
 800a6be:	e011      	b.n	800a6e4 <_puts_r+0x88>
 800a6c0:	4b1b      	ldr	r3, [pc, #108]	; (800a730 <_puts_r+0xd4>)
 800a6c2:	429c      	cmp	r4, r3
 800a6c4:	d101      	bne.n	800a6ca <_puts_r+0x6e>
 800a6c6:	68ac      	ldr	r4, [r5, #8]
 800a6c8:	e7da      	b.n	800a680 <_puts_r+0x24>
 800a6ca:	4b1a      	ldr	r3, [pc, #104]	; (800a734 <_puts_r+0xd8>)
 800a6cc:	429c      	cmp	r4, r3
 800a6ce:	bf08      	it	eq
 800a6d0:	68ec      	ldreq	r4, [r5, #12]
 800a6d2:	e7d5      	b.n	800a680 <_puts_r+0x24>
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	f000 f8a0 	bl	800a81c <__swsetup_r>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d0dd      	beq.n	800a69c <_puts_r+0x40>
 800a6e0:	f04f 35ff 	mov.w	r5, #4294967295
 800a6e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6e6:	07da      	lsls	r2, r3, #31
 800a6e8:	d405      	bmi.n	800a6f6 <_puts_r+0x9a>
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	059b      	lsls	r3, r3, #22
 800a6ee:	d402      	bmi.n	800a6f6 <_puts_r+0x9a>
 800a6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6f2:	f001 f939 	bl	800b968 <__retarget_lock_release_recursive>
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	bd70      	pop	{r4, r5, r6, pc}
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	da04      	bge.n	800a708 <_puts_r+0xac>
 800a6fe:	69a2      	ldr	r2, [r4, #24]
 800a700:	429a      	cmp	r2, r3
 800a702:	dc06      	bgt.n	800a712 <_puts_r+0xb6>
 800a704:	290a      	cmp	r1, #10
 800a706:	d004      	beq.n	800a712 <_puts_r+0xb6>
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	6022      	str	r2, [r4, #0]
 800a70e:	7019      	strb	r1, [r3, #0]
 800a710:	e7c5      	b.n	800a69e <_puts_r+0x42>
 800a712:	4622      	mov	r2, r4
 800a714:	4628      	mov	r0, r5
 800a716:	f000 f82f 	bl	800a778 <__swbuf_r>
 800a71a:	3001      	adds	r0, #1
 800a71c:	d1bf      	bne.n	800a69e <_puts_r+0x42>
 800a71e:	e7df      	b.n	800a6e0 <_puts_r+0x84>
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	250a      	movs	r5, #10
 800a724:	1c5a      	adds	r2, r3, #1
 800a726:	6022      	str	r2, [r4, #0]
 800a728:	701d      	strb	r5, [r3, #0]
 800a72a:	e7db      	b.n	800a6e4 <_puts_r+0x88>
 800a72c:	0800cc30 	.word	0x0800cc30
 800a730:	0800cc50 	.word	0x0800cc50
 800a734:	0800cc10 	.word	0x0800cc10

0800a738 <puts>:
 800a738:	4b02      	ldr	r3, [pc, #8]	; (800a744 <puts+0xc>)
 800a73a:	4601      	mov	r1, r0
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	f7ff bf8d 	b.w	800a65c <_puts_r>
 800a742:	bf00      	nop
 800a744:	20000024 	.word	0x20000024

0800a748 <_sbrk_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d06      	ldr	r5, [pc, #24]	; (800a764 <_sbrk_r+0x1c>)
 800a74c:	2300      	movs	r3, #0
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	f7f8 ff86 	bl	8003664 <_sbrk>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_sbrk_r+0x1a>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_sbrk_r+0x1a>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	2000415c 	.word	0x2000415c

0800a768 <strcpy>:
 800a768:	4603      	mov	r3, r0
 800a76a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a76e:	f803 2b01 	strb.w	r2, [r3], #1
 800a772:	2a00      	cmp	r2, #0
 800a774:	d1f9      	bne.n	800a76a <strcpy+0x2>
 800a776:	4770      	bx	lr

0800a778 <__swbuf_r>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	460e      	mov	r6, r1
 800a77c:	4614      	mov	r4, r2
 800a77e:	4605      	mov	r5, r0
 800a780:	b118      	cbz	r0, 800a78a <__swbuf_r+0x12>
 800a782:	6983      	ldr	r3, [r0, #24]
 800a784:	b90b      	cbnz	r3, 800a78a <__swbuf_r+0x12>
 800a786:	f001 f84b 	bl	800b820 <__sinit>
 800a78a:	4b21      	ldr	r3, [pc, #132]	; (800a810 <__swbuf_r+0x98>)
 800a78c:	429c      	cmp	r4, r3
 800a78e:	d12b      	bne.n	800a7e8 <__swbuf_r+0x70>
 800a790:	686c      	ldr	r4, [r5, #4]
 800a792:	69a3      	ldr	r3, [r4, #24]
 800a794:	60a3      	str	r3, [r4, #8]
 800a796:	89a3      	ldrh	r3, [r4, #12]
 800a798:	071a      	lsls	r2, r3, #28
 800a79a:	d52f      	bpl.n	800a7fc <__swbuf_r+0x84>
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	b36b      	cbz	r3, 800a7fc <__swbuf_r+0x84>
 800a7a0:	6923      	ldr	r3, [r4, #16]
 800a7a2:	6820      	ldr	r0, [r4, #0]
 800a7a4:	1ac0      	subs	r0, r0, r3
 800a7a6:	6963      	ldr	r3, [r4, #20]
 800a7a8:	b2f6      	uxtb	r6, r6
 800a7aa:	4283      	cmp	r3, r0
 800a7ac:	4637      	mov	r7, r6
 800a7ae:	dc04      	bgt.n	800a7ba <__swbuf_r+0x42>
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f000 ffa0 	bl	800b6f8 <_fflush_r>
 800a7b8:	bb30      	cbnz	r0, 800a808 <__swbuf_r+0x90>
 800a7ba:	68a3      	ldr	r3, [r4, #8]
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	60a3      	str	r3, [r4, #8]
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	6022      	str	r2, [r4, #0]
 800a7c6:	701e      	strb	r6, [r3, #0]
 800a7c8:	6963      	ldr	r3, [r4, #20]
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	4283      	cmp	r3, r0
 800a7ce:	d004      	beq.n	800a7da <__swbuf_r+0x62>
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	07db      	lsls	r3, r3, #31
 800a7d4:	d506      	bpl.n	800a7e4 <__swbuf_r+0x6c>
 800a7d6:	2e0a      	cmp	r6, #10
 800a7d8:	d104      	bne.n	800a7e4 <__swbuf_r+0x6c>
 800a7da:	4621      	mov	r1, r4
 800a7dc:	4628      	mov	r0, r5
 800a7de:	f000 ff8b 	bl	800b6f8 <_fflush_r>
 800a7e2:	b988      	cbnz	r0, 800a808 <__swbuf_r+0x90>
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e8:	4b0a      	ldr	r3, [pc, #40]	; (800a814 <__swbuf_r+0x9c>)
 800a7ea:	429c      	cmp	r4, r3
 800a7ec:	d101      	bne.n	800a7f2 <__swbuf_r+0x7a>
 800a7ee:	68ac      	ldr	r4, [r5, #8]
 800a7f0:	e7cf      	b.n	800a792 <__swbuf_r+0x1a>
 800a7f2:	4b09      	ldr	r3, [pc, #36]	; (800a818 <__swbuf_r+0xa0>)
 800a7f4:	429c      	cmp	r4, r3
 800a7f6:	bf08      	it	eq
 800a7f8:	68ec      	ldreq	r4, [r5, #12]
 800a7fa:	e7ca      	b.n	800a792 <__swbuf_r+0x1a>
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	4628      	mov	r0, r5
 800a800:	f000 f80c 	bl	800a81c <__swsetup_r>
 800a804:	2800      	cmp	r0, #0
 800a806:	d0cb      	beq.n	800a7a0 <__swbuf_r+0x28>
 800a808:	f04f 37ff 	mov.w	r7, #4294967295
 800a80c:	e7ea      	b.n	800a7e4 <__swbuf_r+0x6c>
 800a80e:	bf00      	nop
 800a810:	0800cc30 	.word	0x0800cc30
 800a814:	0800cc50 	.word	0x0800cc50
 800a818:	0800cc10 	.word	0x0800cc10

0800a81c <__swsetup_r>:
 800a81c:	4b32      	ldr	r3, [pc, #200]	; (800a8e8 <__swsetup_r+0xcc>)
 800a81e:	b570      	push	{r4, r5, r6, lr}
 800a820:	681d      	ldr	r5, [r3, #0]
 800a822:	4606      	mov	r6, r0
 800a824:	460c      	mov	r4, r1
 800a826:	b125      	cbz	r5, 800a832 <__swsetup_r+0x16>
 800a828:	69ab      	ldr	r3, [r5, #24]
 800a82a:	b913      	cbnz	r3, 800a832 <__swsetup_r+0x16>
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 fff7 	bl	800b820 <__sinit>
 800a832:	4b2e      	ldr	r3, [pc, #184]	; (800a8ec <__swsetup_r+0xd0>)
 800a834:	429c      	cmp	r4, r3
 800a836:	d10f      	bne.n	800a858 <__swsetup_r+0x3c>
 800a838:	686c      	ldr	r4, [r5, #4]
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a840:	0719      	lsls	r1, r3, #28
 800a842:	d42c      	bmi.n	800a89e <__swsetup_r+0x82>
 800a844:	06dd      	lsls	r5, r3, #27
 800a846:	d411      	bmi.n	800a86c <__swsetup_r+0x50>
 800a848:	2309      	movs	r3, #9
 800a84a:	6033      	str	r3, [r6, #0]
 800a84c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a850:	81a3      	strh	r3, [r4, #12]
 800a852:	f04f 30ff 	mov.w	r0, #4294967295
 800a856:	e03e      	b.n	800a8d6 <__swsetup_r+0xba>
 800a858:	4b25      	ldr	r3, [pc, #148]	; (800a8f0 <__swsetup_r+0xd4>)
 800a85a:	429c      	cmp	r4, r3
 800a85c:	d101      	bne.n	800a862 <__swsetup_r+0x46>
 800a85e:	68ac      	ldr	r4, [r5, #8]
 800a860:	e7eb      	b.n	800a83a <__swsetup_r+0x1e>
 800a862:	4b24      	ldr	r3, [pc, #144]	; (800a8f4 <__swsetup_r+0xd8>)
 800a864:	429c      	cmp	r4, r3
 800a866:	bf08      	it	eq
 800a868:	68ec      	ldreq	r4, [r5, #12]
 800a86a:	e7e6      	b.n	800a83a <__swsetup_r+0x1e>
 800a86c:	0758      	lsls	r0, r3, #29
 800a86e:	d512      	bpl.n	800a896 <__swsetup_r+0x7a>
 800a870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a872:	b141      	cbz	r1, 800a886 <__swsetup_r+0x6a>
 800a874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a878:	4299      	cmp	r1, r3
 800a87a:	d002      	beq.n	800a882 <__swsetup_r+0x66>
 800a87c:	4630      	mov	r0, r6
 800a87e:	f7ff f98b 	bl	8009b98 <_free_r>
 800a882:	2300      	movs	r3, #0
 800a884:	6363      	str	r3, [r4, #52]	; 0x34
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a88c:	81a3      	strh	r3, [r4, #12]
 800a88e:	2300      	movs	r3, #0
 800a890:	6063      	str	r3, [r4, #4]
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f043 0308 	orr.w	r3, r3, #8
 800a89c:	81a3      	strh	r3, [r4, #12]
 800a89e:	6923      	ldr	r3, [r4, #16]
 800a8a0:	b94b      	cbnz	r3, 800a8b6 <__swsetup_r+0x9a>
 800a8a2:	89a3      	ldrh	r3, [r4, #12]
 800a8a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ac:	d003      	beq.n	800a8b6 <__swsetup_r+0x9a>
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f001 f87f 	bl	800b9b4 <__smakebuf_r>
 800a8b6:	89a0      	ldrh	r0, [r4, #12]
 800a8b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8bc:	f010 0301 	ands.w	r3, r0, #1
 800a8c0:	d00a      	beq.n	800a8d8 <__swsetup_r+0xbc>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60a3      	str	r3, [r4, #8]
 800a8c6:	6963      	ldr	r3, [r4, #20]
 800a8c8:	425b      	negs	r3, r3
 800a8ca:	61a3      	str	r3, [r4, #24]
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	b943      	cbnz	r3, 800a8e2 <__swsetup_r+0xc6>
 800a8d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8d4:	d1ba      	bne.n	800a84c <__swsetup_r+0x30>
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
 800a8d8:	0781      	lsls	r1, r0, #30
 800a8da:	bf58      	it	pl
 800a8dc:	6963      	ldrpl	r3, [r4, #20]
 800a8de:	60a3      	str	r3, [r4, #8]
 800a8e0:	e7f4      	b.n	800a8cc <__swsetup_r+0xb0>
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	e7f7      	b.n	800a8d6 <__swsetup_r+0xba>
 800a8e6:	bf00      	nop
 800a8e8:	20000024 	.word	0x20000024
 800a8ec:	0800cc30 	.word	0x0800cc30
 800a8f0:	0800cc50 	.word	0x0800cc50
 800a8f4:	0800cc10 	.word	0x0800cc10

0800a8f8 <quorem>:
 800a8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	6903      	ldr	r3, [r0, #16]
 800a8fe:	690c      	ldr	r4, [r1, #16]
 800a900:	42a3      	cmp	r3, r4
 800a902:	4607      	mov	r7, r0
 800a904:	f2c0 8081 	blt.w	800aa0a <quorem+0x112>
 800a908:	3c01      	subs	r4, #1
 800a90a:	f101 0814 	add.w	r8, r1, #20
 800a90e:	f100 0514 	add.w	r5, r0, #20
 800a912:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a916:	9301      	str	r3, [sp, #4]
 800a918:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a91c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a920:	3301      	adds	r3, #1
 800a922:	429a      	cmp	r2, r3
 800a924:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a928:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a92c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a930:	d331      	bcc.n	800a996 <quorem+0x9e>
 800a932:	f04f 0e00 	mov.w	lr, #0
 800a936:	4640      	mov	r0, r8
 800a938:	46ac      	mov	ip, r5
 800a93a:	46f2      	mov	sl, lr
 800a93c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a940:	b293      	uxth	r3, r2
 800a942:	fb06 e303 	mla	r3, r6, r3, lr
 800a946:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	ebaa 0303 	sub.w	r3, sl, r3
 800a950:	f8dc a000 	ldr.w	sl, [ip]
 800a954:	0c12      	lsrs	r2, r2, #16
 800a956:	fa13 f38a 	uxtah	r3, r3, sl
 800a95a:	fb06 e202 	mla	r2, r6, r2, lr
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	9b00      	ldr	r3, [sp, #0]
 800a962:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a966:	b292      	uxth	r2, r2
 800a968:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a96c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a970:	f8bd 3000 	ldrh.w	r3, [sp]
 800a974:	4581      	cmp	r9, r0
 800a976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a97a:	f84c 3b04 	str.w	r3, [ip], #4
 800a97e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a982:	d2db      	bcs.n	800a93c <quorem+0x44>
 800a984:	f855 300b 	ldr.w	r3, [r5, fp]
 800a988:	b92b      	cbnz	r3, 800a996 <quorem+0x9e>
 800a98a:	9b01      	ldr	r3, [sp, #4]
 800a98c:	3b04      	subs	r3, #4
 800a98e:	429d      	cmp	r5, r3
 800a990:	461a      	mov	r2, r3
 800a992:	d32e      	bcc.n	800a9f2 <quorem+0xfa>
 800a994:	613c      	str	r4, [r7, #16]
 800a996:	4638      	mov	r0, r7
 800a998:	f001 fae8 	bl	800bf6c <__mcmp>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	db24      	blt.n	800a9ea <quorem+0xf2>
 800a9a0:	3601      	adds	r6, #1
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f04f 0c00 	mov.w	ip, #0
 800a9a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9ac:	f8d0 e000 	ldr.w	lr, [r0]
 800a9b0:	b293      	uxth	r3, r2
 800a9b2:	ebac 0303 	sub.w	r3, ip, r3
 800a9b6:	0c12      	lsrs	r2, r2, #16
 800a9b8:	fa13 f38e 	uxtah	r3, r3, lr
 800a9bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a9c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9ca:	45c1      	cmp	r9, r8
 800a9cc:	f840 3b04 	str.w	r3, [r0], #4
 800a9d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9d4:	d2e8      	bcs.n	800a9a8 <quorem+0xb0>
 800a9d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9de:	b922      	cbnz	r2, 800a9ea <quorem+0xf2>
 800a9e0:	3b04      	subs	r3, #4
 800a9e2:	429d      	cmp	r5, r3
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	d30a      	bcc.n	800a9fe <quorem+0x106>
 800a9e8:	613c      	str	r4, [r7, #16]
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	b003      	add	sp, #12
 800a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f2:	6812      	ldr	r2, [r2, #0]
 800a9f4:	3b04      	subs	r3, #4
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	d1cc      	bne.n	800a994 <quorem+0x9c>
 800a9fa:	3c01      	subs	r4, #1
 800a9fc:	e7c7      	b.n	800a98e <quorem+0x96>
 800a9fe:	6812      	ldr	r2, [r2, #0]
 800aa00:	3b04      	subs	r3, #4
 800aa02:	2a00      	cmp	r2, #0
 800aa04:	d1f0      	bne.n	800a9e8 <quorem+0xf0>
 800aa06:	3c01      	subs	r4, #1
 800aa08:	e7eb      	b.n	800a9e2 <quorem+0xea>
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e7ee      	b.n	800a9ec <quorem+0xf4>
	...

0800aa10 <_dtoa_r>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	ed2d 8b04 	vpush	{d8-d9}
 800aa18:	ec57 6b10 	vmov	r6, r7, d0
 800aa1c:	b093      	sub	sp, #76	; 0x4c
 800aa1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa24:	9106      	str	r1, [sp, #24]
 800aa26:	ee10 aa10 	vmov	sl, s0
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa2e:	930c      	str	r3, [sp, #48]	; 0x30
 800aa30:	46bb      	mov	fp, r7
 800aa32:	b975      	cbnz	r5, 800aa52 <_dtoa_r+0x42>
 800aa34:	2010      	movs	r0, #16
 800aa36:	f7ff f897 	bl	8009b68 <malloc>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	6260      	str	r0, [r4, #36]	; 0x24
 800aa3e:	b920      	cbnz	r0, 800aa4a <_dtoa_r+0x3a>
 800aa40:	4ba7      	ldr	r3, [pc, #668]	; (800ace0 <_dtoa_r+0x2d0>)
 800aa42:	21ea      	movs	r1, #234	; 0xea
 800aa44:	48a7      	ldr	r0, [pc, #668]	; (800ace4 <_dtoa_r+0x2d4>)
 800aa46:	f001 fd59 	bl	800c4fc <__assert_func>
 800aa4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa4e:	6005      	str	r5, [r0, #0]
 800aa50:	60c5      	str	r5, [r0, #12]
 800aa52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa54:	6819      	ldr	r1, [r3, #0]
 800aa56:	b151      	cbz	r1, 800aa6e <_dtoa_r+0x5e>
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	604a      	str	r2, [r1, #4]
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	4093      	lsls	r3, r2
 800aa60:	608b      	str	r3, [r1, #8]
 800aa62:	4620      	mov	r0, r4
 800aa64:	f001 f840 	bl	800bae8 <_Bfree>
 800aa68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]
 800aa6e:	1e3b      	subs	r3, r7, #0
 800aa70:	bfaa      	itet	ge
 800aa72:	2300      	movge	r3, #0
 800aa74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aa78:	f8c8 3000 	strge.w	r3, [r8]
 800aa7c:	4b9a      	ldr	r3, [pc, #616]	; (800ace8 <_dtoa_r+0x2d8>)
 800aa7e:	bfbc      	itt	lt
 800aa80:	2201      	movlt	r2, #1
 800aa82:	f8c8 2000 	strlt.w	r2, [r8]
 800aa86:	ea33 030b 	bics.w	r3, r3, fp
 800aa8a:	d11b      	bne.n	800aac4 <_dtoa_r+0xb4>
 800aa8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa8e:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa92:	6013      	str	r3, [r2, #0]
 800aa94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa98:	4333      	orrs	r3, r6
 800aa9a:	f000 8592 	beq.w	800b5c2 <_dtoa_r+0xbb2>
 800aa9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaa0:	b963      	cbnz	r3, 800aabc <_dtoa_r+0xac>
 800aaa2:	4b92      	ldr	r3, [pc, #584]	; (800acec <_dtoa_r+0x2dc>)
 800aaa4:	e022      	b.n	800aaec <_dtoa_r+0xdc>
 800aaa6:	4b92      	ldr	r3, [pc, #584]	; (800acf0 <_dtoa_r+0x2e0>)
 800aaa8:	9301      	str	r3, [sp, #4]
 800aaaa:	3308      	adds	r3, #8
 800aaac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	9801      	ldr	r0, [sp, #4]
 800aab2:	b013      	add	sp, #76	; 0x4c
 800aab4:	ecbd 8b04 	vpop	{d8-d9}
 800aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabc:	4b8b      	ldr	r3, [pc, #556]	; (800acec <_dtoa_r+0x2dc>)
 800aabe:	9301      	str	r3, [sp, #4]
 800aac0:	3303      	adds	r3, #3
 800aac2:	e7f3      	b.n	800aaac <_dtoa_r+0x9c>
 800aac4:	2200      	movs	r2, #0
 800aac6:	2300      	movs	r3, #0
 800aac8:	4650      	mov	r0, sl
 800aaca:	4659      	mov	r1, fp
 800aacc:	f7f6 f814 	bl	8000af8 <__aeabi_dcmpeq>
 800aad0:	ec4b ab19 	vmov	d9, sl, fp
 800aad4:	4680      	mov	r8, r0
 800aad6:	b158      	cbz	r0, 800aaf0 <_dtoa_r+0xe0>
 800aad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aada:	2301      	movs	r3, #1
 800aadc:	6013      	str	r3, [r2, #0]
 800aade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 856b 	beq.w	800b5bc <_dtoa_r+0xbac>
 800aae6:	4883      	ldr	r0, [pc, #524]	; (800acf4 <_dtoa_r+0x2e4>)
 800aae8:	6018      	str	r0, [r3, #0]
 800aaea:	1e43      	subs	r3, r0, #1
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	e7df      	b.n	800aab0 <_dtoa_r+0xa0>
 800aaf0:	ec4b ab10 	vmov	d0, sl, fp
 800aaf4:	aa10      	add	r2, sp, #64	; 0x40
 800aaf6:	a911      	add	r1, sp, #68	; 0x44
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f001 fadd 	bl	800c0b8 <__d2b>
 800aafe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ab02:	ee08 0a10 	vmov	s16, r0
 800ab06:	2d00      	cmp	r5, #0
 800ab08:	f000 8084 	beq.w	800ac14 <_dtoa_r+0x204>
 800ab0c:	ee19 3a90 	vmov	r3, s19
 800ab10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab18:	4656      	mov	r6, sl
 800ab1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ab26:	4b74      	ldr	r3, [pc, #464]	; (800acf8 <_dtoa_r+0x2e8>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	f7f5 fbc3 	bl	80002b8 <__aeabi_dsub>
 800ab32:	a365      	add	r3, pc, #404	; (adr r3, 800acc8 <_dtoa_r+0x2b8>)
 800ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab38:	f7f5 fd76 	bl	8000628 <__aeabi_dmul>
 800ab3c:	a364      	add	r3, pc, #400	; (adr r3, 800acd0 <_dtoa_r+0x2c0>)
 800ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab42:	f7f5 fbbb 	bl	80002bc <__adddf3>
 800ab46:	4606      	mov	r6, r0
 800ab48:	4628      	mov	r0, r5
 800ab4a:	460f      	mov	r7, r1
 800ab4c:	f7f5 fd02 	bl	8000554 <__aeabi_i2d>
 800ab50:	a361      	add	r3, pc, #388	; (adr r3, 800acd8 <_dtoa_r+0x2c8>)
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	f7f5 fd67 	bl	8000628 <__aeabi_dmul>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	4630      	mov	r0, r6
 800ab60:	4639      	mov	r1, r7
 800ab62:	f7f5 fbab 	bl	80002bc <__adddf3>
 800ab66:	4606      	mov	r6, r0
 800ab68:	460f      	mov	r7, r1
 800ab6a:	f7f6 f80d 	bl	8000b88 <__aeabi_d2iz>
 800ab6e:	2200      	movs	r2, #0
 800ab70:	9000      	str	r0, [sp, #0]
 800ab72:	2300      	movs	r3, #0
 800ab74:	4630      	mov	r0, r6
 800ab76:	4639      	mov	r1, r7
 800ab78:	f7f5 ffc8 	bl	8000b0c <__aeabi_dcmplt>
 800ab7c:	b150      	cbz	r0, 800ab94 <_dtoa_r+0x184>
 800ab7e:	9800      	ldr	r0, [sp, #0]
 800ab80:	f7f5 fce8 	bl	8000554 <__aeabi_i2d>
 800ab84:	4632      	mov	r2, r6
 800ab86:	463b      	mov	r3, r7
 800ab88:	f7f5 ffb6 	bl	8000af8 <__aeabi_dcmpeq>
 800ab8c:	b910      	cbnz	r0, 800ab94 <_dtoa_r+0x184>
 800ab8e:	9b00      	ldr	r3, [sp, #0]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	9b00      	ldr	r3, [sp, #0]
 800ab96:	2b16      	cmp	r3, #22
 800ab98:	d85a      	bhi.n	800ac50 <_dtoa_r+0x240>
 800ab9a:	9a00      	ldr	r2, [sp, #0]
 800ab9c:	4b57      	ldr	r3, [pc, #348]	; (800acfc <_dtoa_r+0x2ec>)
 800ab9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	ec51 0b19 	vmov	r0, r1, d9
 800abaa:	f7f5 ffaf 	bl	8000b0c <__aeabi_dcmplt>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d050      	beq.n	800ac54 <_dtoa_r+0x244>
 800abb2:	9b00      	ldr	r3, [sp, #0]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	2300      	movs	r3, #0
 800abba:	930b      	str	r3, [sp, #44]	; 0x2c
 800abbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abbe:	1b5d      	subs	r5, r3, r5
 800abc0:	1e6b      	subs	r3, r5, #1
 800abc2:	9305      	str	r3, [sp, #20]
 800abc4:	bf45      	ittet	mi
 800abc6:	f1c5 0301 	rsbmi	r3, r5, #1
 800abca:	9304      	strmi	r3, [sp, #16]
 800abcc:	2300      	movpl	r3, #0
 800abce:	2300      	movmi	r3, #0
 800abd0:	bf4c      	ite	mi
 800abd2:	9305      	strmi	r3, [sp, #20]
 800abd4:	9304      	strpl	r3, [sp, #16]
 800abd6:	9b00      	ldr	r3, [sp, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	db3d      	blt.n	800ac58 <_dtoa_r+0x248>
 800abdc:	9b05      	ldr	r3, [sp, #20]
 800abde:	9a00      	ldr	r2, [sp, #0]
 800abe0:	920a      	str	r2, [sp, #40]	; 0x28
 800abe2:	4413      	add	r3, r2
 800abe4:	9305      	str	r3, [sp, #20]
 800abe6:	2300      	movs	r3, #0
 800abe8:	9307      	str	r3, [sp, #28]
 800abea:	9b06      	ldr	r3, [sp, #24]
 800abec:	2b09      	cmp	r3, #9
 800abee:	f200 8089 	bhi.w	800ad04 <_dtoa_r+0x2f4>
 800abf2:	2b05      	cmp	r3, #5
 800abf4:	bfc4      	itt	gt
 800abf6:	3b04      	subgt	r3, #4
 800abf8:	9306      	strgt	r3, [sp, #24]
 800abfa:	9b06      	ldr	r3, [sp, #24]
 800abfc:	f1a3 0302 	sub.w	r3, r3, #2
 800ac00:	bfcc      	ite	gt
 800ac02:	2500      	movgt	r5, #0
 800ac04:	2501      	movle	r5, #1
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	f200 8087 	bhi.w	800ad1a <_dtoa_r+0x30a>
 800ac0c:	e8df f003 	tbb	[pc, r3]
 800ac10:	59383a2d 	.word	0x59383a2d
 800ac14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac18:	441d      	add	r5, r3
 800ac1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac1e:	2b20      	cmp	r3, #32
 800ac20:	bfc1      	itttt	gt
 800ac22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ac2a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ac2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac32:	bfda      	itte	le
 800ac34:	f1c3 0320 	rsble	r3, r3, #32
 800ac38:	fa06 f003 	lslle.w	r0, r6, r3
 800ac3c:	4318      	orrgt	r0, r3
 800ac3e:	f7f5 fc79 	bl	8000534 <__aeabi_ui2d>
 800ac42:	2301      	movs	r3, #1
 800ac44:	4606      	mov	r6, r0
 800ac46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ac4a:	3d01      	subs	r5, #1
 800ac4c:	930e      	str	r3, [sp, #56]	; 0x38
 800ac4e:	e76a      	b.n	800ab26 <_dtoa_r+0x116>
 800ac50:	2301      	movs	r3, #1
 800ac52:	e7b2      	b.n	800abba <_dtoa_r+0x1aa>
 800ac54:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac56:	e7b1      	b.n	800abbc <_dtoa_r+0x1ac>
 800ac58:	9b04      	ldr	r3, [sp, #16]
 800ac5a:	9a00      	ldr	r2, [sp, #0]
 800ac5c:	1a9b      	subs	r3, r3, r2
 800ac5e:	9304      	str	r3, [sp, #16]
 800ac60:	4253      	negs	r3, r2
 800ac62:	9307      	str	r3, [sp, #28]
 800ac64:	2300      	movs	r3, #0
 800ac66:	930a      	str	r3, [sp, #40]	; 0x28
 800ac68:	e7bf      	b.n	800abea <_dtoa_r+0x1da>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9308      	str	r3, [sp, #32]
 800ac6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	dc55      	bgt.n	800ad20 <_dtoa_r+0x310>
 800ac74:	2301      	movs	r3, #1
 800ac76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac7e:	e00c      	b.n	800ac9a <_dtoa_r+0x28a>
 800ac80:	2301      	movs	r3, #1
 800ac82:	e7f3      	b.n	800ac6c <_dtoa_r+0x25c>
 800ac84:	2300      	movs	r3, #0
 800ac86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac88:	9308      	str	r3, [sp, #32]
 800ac8a:	9b00      	ldr	r3, [sp, #0]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	9302      	str	r3, [sp, #8]
 800ac90:	3301      	adds	r3, #1
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	bfb8      	it	lt
 800ac98:	2301      	movlt	r3, #1
 800ac9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	6042      	str	r2, [r0, #4]
 800aca0:	2204      	movs	r2, #4
 800aca2:	f102 0614 	add.w	r6, r2, #20
 800aca6:	429e      	cmp	r6, r3
 800aca8:	6841      	ldr	r1, [r0, #4]
 800acaa:	d93d      	bls.n	800ad28 <_dtoa_r+0x318>
 800acac:	4620      	mov	r0, r4
 800acae:	f000 fedb 	bl	800ba68 <_Balloc>
 800acb2:	9001      	str	r0, [sp, #4]
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d13b      	bne.n	800ad30 <_dtoa_r+0x320>
 800acb8:	4b11      	ldr	r3, [pc, #68]	; (800ad00 <_dtoa_r+0x2f0>)
 800acba:	4602      	mov	r2, r0
 800acbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800acc0:	e6c0      	b.n	800aa44 <_dtoa_r+0x34>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e7df      	b.n	800ac86 <_dtoa_r+0x276>
 800acc6:	bf00      	nop
 800acc8:	636f4361 	.word	0x636f4361
 800accc:	3fd287a7 	.word	0x3fd287a7
 800acd0:	8b60c8b3 	.word	0x8b60c8b3
 800acd4:	3fc68a28 	.word	0x3fc68a28
 800acd8:	509f79fb 	.word	0x509f79fb
 800acdc:	3fd34413 	.word	0x3fd34413
 800ace0:	0800cb8d 	.word	0x0800cb8d
 800ace4:	0800cba4 	.word	0x0800cba4
 800ace8:	7ff00000 	.word	0x7ff00000
 800acec:	0800cb89 	.word	0x0800cb89
 800acf0:	0800cb80 	.word	0x0800cb80
 800acf4:	0800cb5d 	.word	0x0800cb5d
 800acf8:	3ff80000 	.word	0x3ff80000
 800acfc:	0800ccf8 	.word	0x0800ccf8
 800ad00:	0800cbff 	.word	0x0800cbff
 800ad04:	2501      	movs	r5, #1
 800ad06:	2300      	movs	r3, #0
 800ad08:	9306      	str	r3, [sp, #24]
 800ad0a:	9508      	str	r5, [sp, #32]
 800ad0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad14:	2200      	movs	r2, #0
 800ad16:	2312      	movs	r3, #18
 800ad18:	e7b0      	b.n	800ac7c <_dtoa_r+0x26c>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	9308      	str	r3, [sp, #32]
 800ad1e:	e7f5      	b.n	800ad0c <_dtoa_r+0x2fc>
 800ad20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad26:	e7b8      	b.n	800ac9a <_dtoa_r+0x28a>
 800ad28:	3101      	adds	r1, #1
 800ad2a:	6041      	str	r1, [r0, #4]
 800ad2c:	0052      	lsls	r2, r2, #1
 800ad2e:	e7b8      	b.n	800aca2 <_dtoa_r+0x292>
 800ad30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad32:	9a01      	ldr	r2, [sp, #4]
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	2b0e      	cmp	r3, #14
 800ad3a:	f200 809d 	bhi.w	800ae78 <_dtoa_r+0x468>
 800ad3e:	2d00      	cmp	r5, #0
 800ad40:	f000 809a 	beq.w	800ae78 <_dtoa_r+0x468>
 800ad44:	9b00      	ldr	r3, [sp, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	dd32      	ble.n	800adb0 <_dtoa_r+0x3a0>
 800ad4a:	4ab7      	ldr	r2, [pc, #732]	; (800b028 <_dtoa_r+0x618>)
 800ad4c:	f003 030f 	and.w	r3, r3, #15
 800ad50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad54:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad58:	9b00      	ldr	r3, [sp, #0]
 800ad5a:	05d8      	lsls	r0, r3, #23
 800ad5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ad60:	d516      	bpl.n	800ad90 <_dtoa_r+0x380>
 800ad62:	4bb2      	ldr	r3, [pc, #712]	; (800b02c <_dtoa_r+0x61c>)
 800ad64:	ec51 0b19 	vmov	r0, r1, d9
 800ad68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad6c:	f7f5 fd86 	bl	800087c <__aeabi_ddiv>
 800ad70:	f007 070f 	and.w	r7, r7, #15
 800ad74:	4682      	mov	sl, r0
 800ad76:	468b      	mov	fp, r1
 800ad78:	2503      	movs	r5, #3
 800ad7a:	4eac      	ldr	r6, [pc, #688]	; (800b02c <_dtoa_r+0x61c>)
 800ad7c:	b957      	cbnz	r7, 800ad94 <_dtoa_r+0x384>
 800ad7e:	4642      	mov	r2, r8
 800ad80:	464b      	mov	r3, r9
 800ad82:	4650      	mov	r0, sl
 800ad84:	4659      	mov	r1, fp
 800ad86:	f7f5 fd79 	bl	800087c <__aeabi_ddiv>
 800ad8a:	4682      	mov	sl, r0
 800ad8c:	468b      	mov	fp, r1
 800ad8e:	e028      	b.n	800ade2 <_dtoa_r+0x3d2>
 800ad90:	2502      	movs	r5, #2
 800ad92:	e7f2      	b.n	800ad7a <_dtoa_r+0x36a>
 800ad94:	07f9      	lsls	r1, r7, #31
 800ad96:	d508      	bpl.n	800adaa <_dtoa_r+0x39a>
 800ad98:	4640      	mov	r0, r8
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ada0:	f7f5 fc42 	bl	8000628 <__aeabi_dmul>
 800ada4:	3501      	adds	r5, #1
 800ada6:	4680      	mov	r8, r0
 800ada8:	4689      	mov	r9, r1
 800adaa:	107f      	asrs	r7, r7, #1
 800adac:	3608      	adds	r6, #8
 800adae:	e7e5      	b.n	800ad7c <_dtoa_r+0x36c>
 800adb0:	f000 809b 	beq.w	800aeea <_dtoa_r+0x4da>
 800adb4:	9b00      	ldr	r3, [sp, #0]
 800adb6:	4f9d      	ldr	r7, [pc, #628]	; (800b02c <_dtoa_r+0x61c>)
 800adb8:	425e      	negs	r6, r3
 800adba:	4b9b      	ldr	r3, [pc, #620]	; (800b028 <_dtoa_r+0x618>)
 800adbc:	f006 020f 	and.w	r2, r6, #15
 800adc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	ec51 0b19 	vmov	r0, r1, d9
 800adcc:	f7f5 fc2c 	bl	8000628 <__aeabi_dmul>
 800add0:	1136      	asrs	r6, r6, #4
 800add2:	4682      	mov	sl, r0
 800add4:	468b      	mov	fp, r1
 800add6:	2300      	movs	r3, #0
 800add8:	2502      	movs	r5, #2
 800adda:	2e00      	cmp	r6, #0
 800addc:	d17a      	bne.n	800aed4 <_dtoa_r+0x4c4>
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1d3      	bne.n	800ad8a <_dtoa_r+0x37a>
 800ade2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 8082 	beq.w	800aeee <_dtoa_r+0x4de>
 800adea:	4b91      	ldr	r3, [pc, #580]	; (800b030 <_dtoa_r+0x620>)
 800adec:	2200      	movs	r2, #0
 800adee:	4650      	mov	r0, sl
 800adf0:	4659      	mov	r1, fp
 800adf2:	f7f5 fe8b 	bl	8000b0c <__aeabi_dcmplt>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d079      	beq.n	800aeee <_dtoa_r+0x4de>
 800adfa:	9b03      	ldr	r3, [sp, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d076      	beq.n	800aeee <_dtoa_r+0x4de>
 800ae00:	9b02      	ldr	r3, [sp, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	dd36      	ble.n	800ae74 <_dtoa_r+0x464>
 800ae06:	9b00      	ldr	r3, [sp, #0]
 800ae08:	4650      	mov	r0, sl
 800ae0a:	4659      	mov	r1, fp
 800ae0c:	1e5f      	subs	r7, r3, #1
 800ae0e:	2200      	movs	r2, #0
 800ae10:	4b88      	ldr	r3, [pc, #544]	; (800b034 <_dtoa_r+0x624>)
 800ae12:	f7f5 fc09 	bl	8000628 <__aeabi_dmul>
 800ae16:	9e02      	ldr	r6, [sp, #8]
 800ae18:	4682      	mov	sl, r0
 800ae1a:	468b      	mov	fp, r1
 800ae1c:	3501      	adds	r5, #1
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f7f5 fb98 	bl	8000554 <__aeabi_i2d>
 800ae24:	4652      	mov	r2, sl
 800ae26:	465b      	mov	r3, fp
 800ae28:	f7f5 fbfe 	bl	8000628 <__aeabi_dmul>
 800ae2c:	4b82      	ldr	r3, [pc, #520]	; (800b038 <_dtoa_r+0x628>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f7f5 fa44 	bl	80002bc <__adddf3>
 800ae34:	46d0      	mov	r8, sl
 800ae36:	46d9      	mov	r9, fp
 800ae38:	4682      	mov	sl, r0
 800ae3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ae3e:	2e00      	cmp	r6, #0
 800ae40:	d158      	bne.n	800aef4 <_dtoa_r+0x4e4>
 800ae42:	4b7e      	ldr	r3, [pc, #504]	; (800b03c <_dtoa_r+0x62c>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	4640      	mov	r0, r8
 800ae48:	4649      	mov	r1, r9
 800ae4a:	f7f5 fa35 	bl	80002b8 <__aeabi_dsub>
 800ae4e:	4652      	mov	r2, sl
 800ae50:	465b      	mov	r3, fp
 800ae52:	4680      	mov	r8, r0
 800ae54:	4689      	mov	r9, r1
 800ae56:	f7f5 fe77 	bl	8000b48 <__aeabi_dcmpgt>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	f040 8295 	bne.w	800b38a <_dtoa_r+0x97a>
 800ae60:	4652      	mov	r2, sl
 800ae62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ae66:	4640      	mov	r0, r8
 800ae68:	4649      	mov	r1, r9
 800ae6a:	f7f5 fe4f 	bl	8000b0c <__aeabi_dcmplt>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f040 8289 	bne.w	800b386 <_dtoa_r+0x976>
 800ae74:	ec5b ab19 	vmov	sl, fp, d9
 800ae78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f2c0 8148 	blt.w	800b110 <_dtoa_r+0x700>
 800ae80:	9a00      	ldr	r2, [sp, #0]
 800ae82:	2a0e      	cmp	r2, #14
 800ae84:	f300 8144 	bgt.w	800b110 <_dtoa_r+0x700>
 800ae88:	4b67      	ldr	r3, [pc, #412]	; (800b028 <_dtoa_r+0x618>)
 800ae8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f280 80d5 	bge.w	800b044 <_dtoa_r+0x634>
 800ae9a:	9b03      	ldr	r3, [sp, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f300 80d1 	bgt.w	800b044 <_dtoa_r+0x634>
 800aea2:	f040 826f 	bne.w	800b384 <_dtoa_r+0x974>
 800aea6:	4b65      	ldr	r3, [pc, #404]	; (800b03c <_dtoa_r+0x62c>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	4640      	mov	r0, r8
 800aeac:	4649      	mov	r1, r9
 800aeae:	f7f5 fbbb 	bl	8000628 <__aeabi_dmul>
 800aeb2:	4652      	mov	r2, sl
 800aeb4:	465b      	mov	r3, fp
 800aeb6:	f7f5 fe3d 	bl	8000b34 <__aeabi_dcmpge>
 800aeba:	9e03      	ldr	r6, [sp, #12]
 800aebc:	4637      	mov	r7, r6
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f040 8245 	bne.w	800b34e <_dtoa_r+0x93e>
 800aec4:	9d01      	ldr	r5, [sp, #4]
 800aec6:	2331      	movs	r3, #49	; 0x31
 800aec8:	f805 3b01 	strb.w	r3, [r5], #1
 800aecc:	9b00      	ldr	r3, [sp, #0]
 800aece:	3301      	adds	r3, #1
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	e240      	b.n	800b356 <_dtoa_r+0x946>
 800aed4:	07f2      	lsls	r2, r6, #31
 800aed6:	d505      	bpl.n	800aee4 <_dtoa_r+0x4d4>
 800aed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aedc:	f7f5 fba4 	bl	8000628 <__aeabi_dmul>
 800aee0:	3501      	adds	r5, #1
 800aee2:	2301      	movs	r3, #1
 800aee4:	1076      	asrs	r6, r6, #1
 800aee6:	3708      	adds	r7, #8
 800aee8:	e777      	b.n	800adda <_dtoa_r+0x3ca>
 800aeea:	2502      	movs	r5, #2
 800aeec:	e779      	b.n	800ade2 <_dtoa_r+0x3d2>
 800aeee:	9f00      	ldr	r7, [sp, #0]
 800aef0:	9e03      	ldr	r6, [sp, #12]
 800aef2:	e794      	b.n	800ae1e <_dtoa_r+0x40e>
 800aef4:	9901      	ldr	r1, [sp, #4]
 800aef6:	4b4c      	ldr	r3, [pc, #304]	; (800b028 <_dtoa_r+0x618>)
 800aef8:	4431      	add	r1, r6
 800aefa:	910d      	str	r1, [sp, #52]	; 0x34
 800aefc:	9908      	ldr	r1, [sp, #32]
 800aefe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af06:	2900      	cmp	r1, #0
 800af08:	d043      	beq.n	800af92 <_dtoa_r+0x582>
 800af0a:	494d      	ldr	r1, [pc, #308]	; (800b040 <_dtoa_r+0x630>)
 800af0c:	2000      	movs	r0, #0
 800af0e:	f7f5 fcb5 	bl	800087c <__aeabi_ddiv>
 800af12:	4652      	mov	r2, sl
 800af14:	465b      	mov	r3, fp
 800af16:	f7f5 f9cf 	bl	80002b8 <__aeabi_dsub>
 800af1a:	9d01      	ldr	r5, [sp, #4]
 800af1c:	4682      	mov	sl, r0
 800af1e:	468b      	mov	fp, r1
 800af20:	4649      	mov	r1, r9
 800af22:	4640      	mov	r0, r8
 800af24:	f7f5 fe30 	bl	8000b88 <__aeabi_d2iz>
 800af28:	4606      	mov	r6, r0
 800af2a:	f7f5 fb13 	bl	8000554 <__aeabi_i2d>
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	4640      	mov	r0, r8
 800af34:	4649      	mov	r1, r9
 800af36:	f7f5 f9bf 	bl	80002b8 <__aeabi_dsub>
 800af3a:	3630      	adds	r6, #48	; 0x30
 800af3c:	f805 6b01 	strb.w	r6, [r5], #1
 800af40:	4652      	mov	r2, sl
 800af42:	465b      	mov	r3, fp
 800af44:	4680      	mov	r8, r0
 800af46:	4689      	mov	r9, r1
 800af48:	f7f5 fde0 	bl	8000b0c <__aeabi_dcmplt>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d163      	bne.n	800b018 <_dtoa_r+0x608>
 800af50:	4642      	mov	r2, r8
 800af52:	464b      	mov	r3, r9
 800af54:	4936      	ldr	r1, [pc, #216]	; (800b030 <_dtoa_r+0x620>)
 800af56:	2000      	movs	r0, #0
 800af58:	f7f5 f9ae 	bl	80002b8 <__aeabi_dsub>
 800af5c:	4652      	mov	r2, sl
 800af5e:	465b      	mov	r3, fp
 800af60:	f7f5 fdd4 	bl	8000b0c <__aeabi_dcmplt>
 800af64:	2800      	cmp	r0, #0
 800af66:	f040 80b5 	bne.w	800b0d4 <_dtoa_r+0x6c4>
 800af6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af6c:	429d      	cmp	r5, r3
 800af6e:	d081      	beq.n	800ae74 <_dtoa_r+0x464>
 800af70:	4b30      	ldr	r3, [pc, #192]	; (800b034 <_dtoa_r+0x624>)
 800af72:	2200      	movs	r2, #0
 800af74:	4650      	mov	r0, sl
 800af76:	4659      	mov	r1, fp
 800af78:	f7f5 fb56 	bl	8000628 <__aeabi_dmul>
 800af7c:	4b2d      	ldr	r3, [pc, #180]	; (800b034 <_dtoa_r+0x624>)
 800af7e:	4682      	mov	sl, r0
 800af80:	468b      	mov	fp, r1
 800af82:	4640      	mov	r0, r8
 800af84:	4649      	mov	r1, r9
 800af86:	2200      	movs	r2, #0
 800af88:	f7f5 fb4e 	bl	8000628 <__aeabi_dmul>
 800af8c:	4680      	mov	r8, r0
 800af8e:	4689      	mov	r9, r1
 800af90:	e7c6      	b.n	800af20 <_dtoa_r+0x510>
 800af92:	4650      	mov	r0, sl
 800af94:	4659      	mov	r1, fp
 800af96:	f7f5 fb47 	bl	8000628 <__aeabi_dmul>
 800af9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af9c:	9d01      	ldr	r5, [sp, #4]
 800af9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800afa0:	4682      	mov	sl, r0
 800afa2:	468b      	mov	fp, r1
 800afa4:	4649      	mov	r1, r9
 800afa6:	4640      	mov	r0, r8
 800afa8:	f7f5 fdee 	bl	8000b88 <__aeabi_d2iz>
 800afac:	4606      	mov	r6, r0
 800afae:	f7f5 fad1 	bl	8000554 <__aeabi_i2d>
 800afb2:	3630      	adds	r6, #48	; 0x30
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4640      	mov	r0, r8
 800afba:	4649      	mov	r1, r9
 800afbc:	f7f5 f97c 	bl	80002b8 <__aeabi_dsub>
 800afc0:	f805 6b01 	strb.w	r6, [r5], #1
 800afc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afc6:	429d      	cmp	r5, r3
 800afc8:	4680      	mov	r8, r0
 800afca:	4689      	mov	r9, r1
 800afcc:	f04f 0200 	mov.w	r2, #0
 800afd0:	d124      	bne.n	800b01c <_dtoa_r+0x60c>
 800afd2:	4b1b      	ldr	r3, [pc, #108]	; (800b040 <_dtoa_r+0x630>)
 800afd4:	4650      	mov	r0, sl
 800afd6:	4659      	mov	r1, fp
 800afd8:	f7f5 f970 	bl	80002bc <__adddf3>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	4640      	mov	r0, r8
 800afe2:	4649      	mov	r1, r9
 800afe4:	f7f5 fdb0 	bl	8000b48 <__aeabi_dcmpgt>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d173      	bne.n	800b0d4 <_dtoa_r+0x6c4>
 800afec:	4652      	mov	r2, sl
 800afee:	465b      	mov	r3, fp
 800aff0:	4913      	ldr	r1, [pc, #76]	; (800b040 <_dtoa_r+0x630>)
 800aff2:	2000      	movs	r0, #0
 800aff4:	f7f5 f960 	bl	80002b8 <__aeabi_dsub>
 800aff8:	4602      	mov	r2, r0
 800affa:	460b      	mov	r3, r1
 800affc:	4640      	mov	r0, r8
 800affe:	4649      	mov	r1, r9
 800b000:	f7f5 fd84 	bl	8000b0c <__aeabi_dcmplt>
 800b004:	2800      	cmp	r0, #0
 800b006:	f43f af35 	beq.w	800ae74 <_dtoa_r+0x464>
 800b00a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b00c:	1e6b      	subs	r3, r5, #1
 800b00e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b010:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b014:	2b30      	cmp	r3, #48	; 0x30
 800b016:	d0f8      	beq.n	800b00a <_dtoa_r+0x5fa>
 800b018:	9700      	str	r7, [sp, #0]
 800b01a:	e049      	b.n	800b0b0 <_dtoa_r+0x6a0>
 800b01c:	4b05      	ldr	r3, [pc, #20]	; (800b034 <_dtoa_r+0x624>)
 800b01e:	f7f5 fb03 	bl	8000628 <__aeabi_dmul>
 800b022:	4680      	mov	r8, r0
 800b024:	4689      	mov	r9, r1
 800b026:	e7bd      	b.n	800afa4 <_dtoa_r+0x594>
 800b028:	0800ccf8 	.word	0x0800ccf8
 800b02c:	0800ccd0 	.word	0x0800ccd0
 800b030:	3ff00000 	.word	0x3ff00000
 800b034:	40240000 	.word	0x40240000
 800b038:	401c0000 	.word	0x401c0000
 800b03c:	40140000 	.word	0x40140000
 800b040:	3fe00000 	.word	0x3fe00000
 800b044:	9d01      	ldr	r5, [sp, #4]
 800b046:	4656      	mov	r6, sl
 800b048:	465f      	mov	r7, fp
 800b04a:	4642      	mov	r2, r8
 800b04c:	464b      	mov	r3, r9
 800b04e:	4630      	mov	r0, r6
 800b050:	4639      	mov	r1, r7
 800b052:	f7f5 fc13 	bl	800087c <__aeabi_ddiv>
 800b056:	f7f5 fd97 	bl	8000b88 <__aeabi_d2iz>
 800b05a:	4682      	mov	sl, r0
 800b05c:	f7f5 fa7a 	bl	8000554 <__aeabi_i2d>
 800b060:	4642      	mov	r2, r8
 800b062:	464b      	mov	r3, r9
 800b064:	f7f5 fae0 	bl	8000628 <__aeabi_dmul>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	4630      	mov	r0, r6
 800b06e:	4639      	mov	r1, r7
 800b070:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b074:	f7f5 f920 	bl	80002b8 <__aeabi_dsub>
 800b078:	f805 6b01 	strb.w	r6, [r5], #1
 800b07c:	9e01      	ldr	r6, [sp, #4]
 800b07e:	9f03      	ldr	r7, [sp, #12]
 800b080:	1bae      	subs	r6, r5, r6
 800b082:	42b7      	cmp	r7, r6
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	d135      	bne.n	800b0f6 <_dtoa_r+0x6e6>
 800b08a:	f7f5 f917 	bl	80002bc <__adddf3>
 800b08e:	4642      	mov	r2, r8
 800b090:	464b      	mov	r3, r9
 800b092:	4606      	mov	r6, r0
 800b094:	460f      	mov	r7, r1
 800b096:	f7f5 fd57 	bl	8000b48 <__aeabi_dcmpgt>
 800b09a:	b9d0      	cbnz	r0, 800b0d2 <_dtoa_r+0x6c2>
 800b09c:	4642      	mov	r2, r8
 800b09e:	464b      	mov	r3, r9
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	f7f5 fd28 	bl	8000af8 <__aeabi_dcmpeq>
 800b0a8:	b110      	cbz	r0, 800b0b0 <_dtoa_r+0x6a0>
 800b0aa:	f01a 0f01 	tst.w	sl, #1
 800b0ae:	d110      	bne.n	800b0d2 <_dtoa_r+0x6c2>
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	ee18 1a10 	vmov	r1, s16
 800b0b6:	f000 fd17 	bl	800bae8 <_Bfree>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9800      	ldr	r0, [sp, #0]
 800b0be:	702b      	strb	r3, [r5, #0]
 800b0c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	6018      	str	r0, [r3, #0]
 800b0c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f43f acf1 	beq.w	800aab0 <_dtoa_r+0xa0>
 800b0ce:	601d      	str	r5, [r3, #0]
 800b0d0:	e4ee      	b.n	800aab0 <_dtoa_r+0xa0>
 800b0d2:	9f00      	ldr	r7, [sp, #0]
 800b0d4:	462b      	mov	r3, r5
 800b0d6:	461d      	mov	r5, r3
 800b0d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0dc:	2a39      	cmp	r2, #57	; 0x39
 800b0de:	d106      	bne.n	800b0ee <_dtoa_r+0x6de>
 800b0e0:	9a01      	ldr	r2, [sp, #4]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d1f7      	bne.n	800b0d6 <_dtoa_r+0x6c6>
 800b0e6:	9901      	ldr	r1, [sp, #4]
 800b0e8:	2230      	movs	r2, #48	; 0x30
 800b0ea:	3701      	adds	r7, #1
 800b0ec:	700a      	strb	r2, [r1, #0]
 800b0ee:	781a      	ldrb	r2, [r3, #0]
 800b0f0:	3201      	adds	r2, #1
 800b0f2:	701a      	strb	r2, [r3, #0]
 800b0f4:	e790      	b.n	800b018 <_dtoa_r+0x608>
 800b0f6:	4ba6      	ldr	r3, [pc, #664]	; (800b390 <_dtoa_r+0x980>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f7f5 fa95 	bl	8000628 <__aeabi_dmul>
 800b0fe:	2200      	movs	r2, #0
 800b100:	2300      	movs	r3, #0
 800b102:	4606      	mov	r6, r0
 800b104:	460f      	mov	r7, r1
 800b106:	f7f5 fcf7 	bl	8000af8 <__aeabi_dcmpeq>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d09d      	beq.n	800b04a <_dtoa_r+0x63a>
 800b10e:	e7cf      	b.n	800b0b0 <_dtoa_r+0x6a0>
 800b110:	9a08      	ldr	r2, [sp, #32]
 800b112:	2a00      	cmp	r2, #0
 800b114:	f000 80d7 	beq.w	800b2c6 <_dtoa_r+0x8b6>
 800b118:	9a06      	ldr	r2, [sp, #24]
 800b11a:	2a01      	cmp	r2, #1
 800b11c:	f300 80ba 	bgt.w	800b294 <_dtoa_r+0x884>
 800b120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b122:	2a00      	cmp	r2, #0
 800b124:	f000 80b2 	beq.w	800b28c <_dtoa_r+0x87c>
 800b128:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b12c:	9e07      	ldr	r6, [sp, #28]
 800b12e:	9d04      	ldr	r5, [sp, #16]
 800b130:	9a04      	ldr	r2, [sp, #16]
 800b132:	441a      	add	r2, r3
 800b134:	9204      	str	r2, [sp, #16]
 800b136:	9a05      	ldr	r2, [sp, #20]
 800b138:	2101      	movs	r1, #1
 800b13a:	441a      	add	r2, r3
 800b13c:	4620      	mov	r0, r4
 800b13e:	9205      	str	r2, [sp, #20]
 800b140:	f000 fd8a 	bl	800bc58 <__i2b>
 800b144:	4607      	mov	r7, r0
 800b146:	2d00      	cmp	r5, #0
 800b148:	dd0c      	ble.n	800b164 <_dtoa_r+0x754>
 800b14a:	9b05      	ldr	r3, [sp, #20]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	dd09      	ble.n	800b164 <_dtoa_r+0x754>
 800b150:	42ab      	cmp	r3, r5
 800b152:	9a04      	ldr	r2, [sp, #16]
 800b154:	bfa8      	it	ge
 800b156:	462b      	movge	r3, r5
 800b158:	1ad2      	subs	r2, r2, r3
 800b15a:	9204      	str	r2, [sp, #16]
 800b15c:	9a05      	ldr	r2, [sp, #20]
 800b15e:	1aed      	subs	r5, r5, r3
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	9305      	str	r3, [sp, #20]
 800b164:	9b07      	ldr	r3, [sp, #28]
 800b166:	b31b      	cbz	r3, 800b1b0 <_dtoa_r+0x7a0>
 800b168:	9b08      	ldr	r3, [sp, #32]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f000 80af 	beq.w	800b2ce <_dtoa_r+0x8be>
 800b170:	2e00      	cmp	r6, #0
 800b172:	dd13      	ble.n	800b19c <_dtoa_r+0x78c>
 800b174:	4639      	mov	r1, r7
 800b176:	4632      	mov	r2, r6
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 fe2d 	bl	800bdd8 <__pow5mult>
 800b17e:	ee18 2a10 	vmov	r2, s16
 800b182:	4601      	mov	r1, r0
 800b184:	4607      	mov	r7, r0
 800b186:	4620      	mov	r0, r4
 800b188:	f000 fd7c 	bl	800bc84 <__multiply>
 800b18c:	ee18 1a10 	vmov	r1, s16
 800b190:	4680      	mov	r8, r0
 800b192:	4620      	mov	r0, r4
 800b194:	f000 fca8 	bl	800bae8 <_Bfree>
 800b198:	ee08 8a10 	vmov	s16, r8
 800b19c:	9b07      	ldr	r3, [sp, #28]
 800b19e:	1b9a      	subs	r2, r3, r6
 800b1a0:	d006      	beq.n	800b1b0 <_dtoa_r+0x7a0>
 800b1a2:	ee18 1a10 	vmov	r1, s16
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f000 fe16 	bl	800bdd8 <__pow5mult>
 800b1ac:	ee08 0a10 	vmov	s16, r0
 800b1b0:	2101      	movs	r1, #1
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f000 fd50 	bl	800bc58 <__i2b>
 800b1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	4606      	mov	r6, r0
 800b1be:	f340 8088 	ble.w	800b2d2 <_dtoa_r+0x8c2>
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	4601      	mov	r1, r0
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 fe06 	bl	800bdd8 <__pow5mult>
 800b1cc:	9b06      	ldr	r3, [sp, #24]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	4606      	mov	r6, r0
 800b1d2:	f340 8081 	ble.w	800b2d8 <_dtoa_r+0x8c8>
 800b1d6:	f04f 0800 	mov.w	r8, #0
 800b1da:	6933      	ldr	r3, [r6, #16]
 800b1dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b1e0:	6918      	ldr	r0, [r3, #16]
 800b1e2:	f000 fce9 	bl	800bbb8 <__hi0bits>
 800b1e6:	f1c0 0020 	rsb	r0, r0, #32
 800b1ea:	9b05      	ldr	r3, [sp, #20]
 800b1ec:	4418      	add	r0, r3
 800b1ee:	f010 001f 	ands.w	r0, r0, #31
 800b1f2:	f000 8092 	beq.w	800b31a <_dtoa_r+0x90a>
 800b1f6:	f1c0 0320 	rsb	r3, r0, #32
 800b1fa:	2b04      	cmp	r3, #4
 800b1fc:	f340 808a 	ble.w	800b314 <_dtoa_r+0x904>
 800b200:	f1c0 001c 	rsb	r0, r0, #28
 800b204:	9b04      	ldr	r3, [sp, #16]
 800b206:	4403      	add	r3, r0
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	9b05      	ldr	r3, [sp, #20]
 800b20c:	4403      	add	r3, r0
 800b20e:	4405      	add	r5, r0
 800b210:	9305      	str	r3, [sp, #20]
 800b212:	9b04      	ldr	r3, [sp, #16]
 800b214:	2b00      	cmp	r3, #0
 800b216:	dd07      	ble.n	800b228 <_dtoa_r+0x818>
 800b218:	ee18 1a10 	vmov	r1, s16
 800b21c:	461a      	mov	r2, r3
 800b21e:	4620      	mov	r0, r4
 800b220:	f000 fe34 	bl	800be8c <__lshift>
 800b224:	ee08 0a10 	vmov	s16, r0
 800b228:	9b05      	ldr	r3, [sp, #20]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	dd05      	ble.n	800b23a <_dtoa_r+0x82a>
 800b22e:	4631      	mov	r1, r6
 800b230:	461a      	mov	r2, r3
 800b232:	4620      	mov	r0, r4
 800b234:	f000 fe2a 	bl	800be8c <__lshift>
 800b238:	4606      	mov	r6, r0
 800b23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d06e      	beq.n	800b31e <_dtoa_r+0x90e>
 800b240:	ee18 0a10 	vmov	r0, s16
 800b244:	4631      	mov	r1, r6
 800b246:	f000 fe91 	bl	800bf6c <__mcmp>
 800b24a:	2800      	cmp	r0, #0
 800b24c:	da67      	bge.n	800b31e <_dtoa_r+0x90e>
 800b24e:	9b00      	ldr	r3, [sp, #0]
 800b250:	3b01      	subs	r3, #1
 800b252:	ee18 1a10 	vmov	r1, s16
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	220a      	movs	r2, #10
 800b25a:	2300      	movs	r3, #0
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fc65 	bl	800bb2c <__multadd>
 800b262:	9b08      	ldr	r3, [sp, #32]
 800b264:	ee08 0a10 	vmov	s16, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f000 81b1 	beq.w	800b5d0 <_dtoa_r+0xbc0>
 800b26e:	2300      	movs	r3, #0
 800b270:	4639      	mov	r1, r7
 800b272:	220a      	movs	r2, #10
 800b274:	4620      	mov	r0, r4
 800b276:	f000 fc59 	bl	800bb2c <__multadd>
 800b27a:	9b02      	ldr	r3, [sp, #8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	4607      	mov	r7, r0
 800b280:	f300 808e 	bgt.w	800b3a0 <_dtoa_r+0x990>
 800b284:	9b06      	ldr	r3, [sp, #24]
 800b286:	2b02      	cmp	r3, #2
 800b288:	dc51      	bgt.n	800b32e <_dtoa_r+0x91e>
 800b28a:	e089      	b.n	800b3a0 <_dtoa_r+0x990>
 800b28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b28e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b292:	e74b      	b.n	800b12c <_dtoa_r+0x71c>
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	1e5e      	subs	r6, r3, #1
 800b298:	9b07      	ldr	r3, [sp, #28]
 800b29a:	42b3      	cmp	r3, r6
 800b29c:	bfbf      	itttt	lt
 800b29e:	9b07      	ldrlt	r3, [sp, #28]
 800b2a0:	9607      	strlt	r6, [sp, #28]
 800b2a2:	1af2      	sublt	r2, r6, r3
 800b2a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b2a6:	bfb6      	itet	lt
 800b2a8:	189b      	addlt	r3, r3, r2
 800b2aa:	1b9e      	subge	r6, r3, r6
 800b2ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b2ae:	9b03      	ldr	r3, [sp, #12]
 800b2b0:	bfb8      	it	lt
 800b2b2:	2600      	movlt	r6, #0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	bfb7      	itett	lt
 800b2b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b2bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b2c0:	1a9d      	sublt	r5, r3, r2
 800b2c2:	2300      	movlt	r3, #0
 800b2c4:	e734      	b.n	800b130 <_dtoa_r+0x720>
 800b2c6:	9e07      	ldr	r6, [sp, #28]
 800b2c8:	9d04      	ldr	r5, [sp, #16]
 800b2ca:	9f08      	ldr	r7, [sp, #32]
 800b2cc:	e73b      	b.n	800b146 <_dtoa_r+0x736>
 800b2ce:	9a07      	ldr	r2, [sp, #28]
 800b2d0:	e767      	b.n	800b1a2 <_dtoa_r+0x792>
 800b2d2:	9b06      	ldr	r3, [sp, #24]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	dc18      	bgt.n	800b30a <_dtoa_r+0x8fa>
 800b2d8:	f1ba 0f00 	cmp.w	sl, #0
 800b2dc:	d115      	bne.n	800b30a <_dtoa_r+0x8fa>
 800b2de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2e2:	b993      	cbnz	r3, 800b30a <_dtoa_r+0x8fa>
 800b2e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2e8:	0d1b      	lsrs	r3, r3, #20
 800b2ea:	051b      	lsls	r3, r3, #20
 800b2ec:	b183      	cbz	r3, 800b310 <_dtoa_r+0x900>
 800b2ee:	9b04      	ldr	r3, [sp, #16]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	9304      	str	r3, [sp, #16]
 800b2f4:	9b05      	ldr	r3, [sp, #20]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	9305      	str	r3, [sp, #20]
 800b2fa:	f04f 0801 	mov.w	r8, #1
 800b2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b300:	2b00      	cmp	r3, #0
 800b302:	f47f af6a 	bne.w	800b1da <_dtoa_r+0x7ca>
 800b306:	2001      	movs	r0, #1
 800b308:	e76f      	b.n	800b1ea <_dtoa_r+0x7da>
 800b30a:	f04f 0800 	mov.w	r8, #0
 800b30e:	e7f6      	b.n	800b2fe <_dtoa_r+0x8ee>
 800b310:	4698      	mov	r8, r3
 800b312:	e7f4      	b.n	800b2fe <_dtoa_r+0x8ee>
 800b314:	f43f af7d 	beq.w	800b212 <_dtoa_r+0x802>
 800b318:	4618      	mov	r0, r3
 800b31a:	301c      	adds	r0, #28
 800b31c:	e772      	b.n	800b204 <_dtoa_r+0x7f4>
 800b31e:	9b03      	ldr	r3, [sp, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	dc37      	bgt.n	800b394 <_dtoa_r+0x984>
 800b324:	9b06      	ldr	r3, [sp, #24]
 800b326:	2b02      	cmp	r3, #2
 800b328:	dd34      	ble.n	800b394 <_dtoa_r+0x984>
 800b32a:	9b03      	ldr	r3, [sp, #12]
 800b32c:	9302      	str	r3, [sp, #8]
 800b32e:	9b02      	ldr	r3, [sp, #8]
 800b330:	b96b      	cbnz	r3, 800b34e <_dtoa_r+0x93e>
 800b332:	4631      	mov	r1, r6
 800b334:	2205      	movs	r2, #5
 800b336:	4620      	mov	r0, r4
 800b338:	f000 fbf8 	bl	800bb2c <__multadd>
 800b33c:	4601      	mov	r1, r0
 800b33e:	4606      	mov	r6, r0
 800b340:	ee18 0a10 	vmov	r0, s16
 800b344:	f000 fe12 	bl	800bf6c <__mcmp>
 800b348:	2800      	cmp	r0, #0
 800b34a:	f73f adbb 	bgt.w	800aec4 <_dtoa_r+0x4b4>
 800b34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b350:	9d01      	ldr	r5, [sp, #4]
 800b352:	43db      	mvns	r3, r3
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	f04f 0800 	mov.w	r8, #0
 800b35a:	4631      	mov	r1, r6
 800b35c:	4620      	mov	r0, r4
 800b35e:	f000 fbc3 	bl	800bae8 <_Bfree>
 800b362:	2f00      	cmp	r7, #0
 800b364:	f43f aea4 	beq.w	800b0b0 <_dtoa_r+0x6a0>
 800b368:	f1b8 0f00 	cmp.w	r8, #0
 800b36c:	d005      	beq.n	800b37a <_dtoa_r+0x96a>
 800b36e:	45b8      	cmp	r8, r7
 800b370:	d003      	beq.n	800b37a <_dtoa_r+0x96a>
 800b372:	4641      	mov	r1, r8
 800b374:	4620      	mov	r0, r4
 800b376:	f000 fbb7 	bl	800bae8 <_Bfree>
 800b37a:	4639      	mov	r1, r7
 800b37c:	4620      	mov	r0, r4
 800b37e:	f000 fbb3 	bl	800bae8 <_Bfree>
 800b382:	e695      	b.n	800b0b0 <_dtoa_r+0x6a0>
 800b384:	2600      	movs	r6, #0
 800b386:	4637      	mov	r7, r6
 800b388:	e7e1      	b.n	800b34e <_dtoa_r+0x93e>
 800b38a:	9700      	str	r7, [sp, #0]
 800b38c:	4637      	mov	r7, r6
 800b38e:	e599      	b.n	800aec4 <_dtoa_r+0x4b4>
 800b390:	40240000 	.word	0x40240000
 800b394:	9b08      	ldr	r3, [sp, #32]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 80ca 	beq.w	800b530 <_dtoa_r+0xb20>
 800b39c:	9b03      	ldr	r3, [sp, #12]
 800b39e:	9302      	str	r3, [sp, #8]
 800b3a0:	2d00      	cmp	r5, #0
 800b3a2:	dd05      	ble.n	800b3b0 <_dtoa_r+0x9a0>
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	462a      	mov	r2, r5
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f000 fd6f 	bl	800be8c <__lshift>
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	f1b8 0f00 	cmp.w	r8, #0
 800b3b4:	d05b      	beq.n	800b46e <_dtoa_r+0xa5e>
 800b3b6:	6879      	ldr	r1, [r7, #4]
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 fb55 	bl	800ba68 <_Balloc>
 800b3be:	4605      	mov	r5, r0
 800b3c0:	b928      	cbnz	r0, 800b3ce <_dtoa_r+0x9be>
 800b3c2:	4b87      	ldr	r3, [pc, #540]	; (800b5e0 <_dtoa_r+0xbd0>)
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b3ca:	f7ff bb3b 	b.w	800aa44 <_dtoa_r+0x34>
 800b3ce:	693a      	ldr	r2, [r7, #16]
 800b3d0:	3202      	adds	r2, #2
 800b3d2:	0092      	lsls	r2, r2, #2
 800b3d4:	f107 010c 	add.w	r1, r7, #12
 800b3d8:	300c      	adds	r0, #12
 800b3da:	f000 fb2b 	bl	800ba34 <memcpy>
 800b3de:	2201      	movs	r2, #1
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f000 fd52 	bl	800be8c <__lshift>
 800b3e8:	9b01      	ldr	r3, [sp, #4]
 800b3ea:	f103 0901 	add.w	r9, r3, #1
 800b3ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	9305      	str	r3, [sp, #20]
 800b3f6:	f00a 0301 	and.w	r3, sl, #1
 800b3fa:	46b8      	mov	r8, r7
 800b3fc:	9304      	str	r3, [sp, #16]
 800b3fe:	4607      	mov	r7, r0
 800b400:	4631      	mov	r1, r6
 800b402:	ee18 0a10 	vmov	r0, s16
 800b406:	f7ff fa77 	bl	800a8f8 <quorem>
 800b40a:	4641      	mov	r1, r8
 800b40c:	9002      	str	r0, [sp, #8]
 800b40e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b412:	ee18 0a10 	vmov	r0, s16
 800b416:	f000 fda9 	bl	800bf6c <__mcmp>
 800b41a:	463a      	mov	r2, r7
 800b41c:	9003      	str	r0, [sp, #12]
 800b41e:	4631      	mov	r1, r6
 800b420:	4620      	mov	r0, r4
 800b422:	f000 fdbf 	bl	800bfa4 <__mdiff>
 800b426:	68c2      	ldr	r2, [r0, #12]
 800b428:	f109 3bff 	add.w	fp, r9, #4294967295
 800b42c:	4605      	mov	r5, r0
 800b42e:	bb02      	cbnz	r2, 800b472 <_dtoa_r+0xa62>
 800b430:	4601      	mov	r1, r0
 800b432:	ee18 0a10 	vmov	r0, s16
 800b436:	f000 fd99 	bl	800bf6c <__mcmp>
 800b43a:	4602      	mov	r2, r0
 800b43c:	4629      	mov	r1, r5
 800b43e:	4620      	mov	r0, r4
 800b440:	9207      	str	r2, [sp, #28]
 800b442:	f000 fb51 	bl	800bae8 <_Bfree>
 800b446:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b44a:	ea43 0102 	orr.w	r1, r3, r2
 800b44e:	9b04      	ldr	r3, [sp, #16]
 800b450:	430b      	orrs	r3, r1
 800b452:	464d      	mov	r5, r9
 800b454:	d10f      	bne.n	800b476 <_dtoa_r+0xa66>
 800b456:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b45a:	d02a      	beq.n	800b4b2 <_dtoa_r+0xaa2>
 800b45c:	9b03      	ldr	r3, [sp, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	dd02      	ble.n	800b468 <_dtoa_r+0xa58>
 800b462:	9b02      	ldr	r3, [sp, #8]
 800b464:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b468:	f88b a000 	strb.w	sl, [fp]
 800b46c:	e775      	b.n	800b35a <_dtoa_r+0x94a>
 800b46e:	4638      	mov	r0, r7
 800b470:	e7ba      	b.n	800b3e8 <_dtoa_r+0x9d8>
 800b472:	2201      	movs	r2, #1
 800b474:	e7e2      	b.n	800b43c <_dtoa_r+0xa2c>
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	db04      	blt.n	800b486 <_dtoa_r+0xa76>
 800b47c:	9906      	ldr	r1, [sp, #24]
 800b47e:	430b      	orrs	r3, r1
 800b480:	9904      	ldr	r1, [sp, #16]
 800b482:	430b      	orrs	r3, r1
 800b484:	d122      	bne.n	800b4cc <_dtoa_r+0xabc>
 800b486:	2a00      	cmp	r2, #0
 800b488:	ddee      	ble.n	800b468 <_dtoa_r+0xa58>
 800b48a:	ee18 1a10 	vmov	r1, s16
 800b48e:	2201      	movs	r2, #1
 800b490:	4620      	mov	r0, r4
 800b492:	f000 fcfb 	bl	800be8c <__lshift>
 800b496:	4631      	mov	r1, r6
 800b498:	ee08 0a10 	vmov	s16, r0
 800b49c:	f000 fd66 	bl	800bf6c <__mcmp>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	dc03      	bgt.n	800b4ac <_dtoa_r+0xa9c>
 800b4a4:	d1e0      	bne.n	800b468 <_dtoa_r+0xa58>
 800b4a6:	f01a 0f01 	tst.w	sl, #1
 800b4aa:	d0dd      	beq.n	800b468 <_dtoa_r+0xa58>
 800b4ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4b0:	d1d7      	bne.n	800b462 <_dtoa_r+0xa52>
 800b4b2:	2339      	movs	r3, #57	; 0x39
 800b4b4:	f88b 3000 	strb.w	r3, [fp]
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	461d      	mov	r5, r3
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4c2:	2a39      	cmp	r2, #57	; 0x39
 800b4c4:	d071      	beq.n	800b5aa <_dtoa_r+0xb9a>
 800b4c6:	3201      	adds	r2, #1
 800b4c8:	701a      	strb	r2, [r3, #0]
 800b4ca:	e746      	b.n	800b35a <_dtoa_r+0x94a>
 800b4cc:	2a00      	cmp	r2, #0
 800b4ce:	dd07      	ble.n	800b4e0 <_dtoa_r+0xad0>
 800b4d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4d4:	d0ed      	beq.n	800b4b2 <_dtoa_r+0xaa2>
 800b4d6:	f10a 0301 	add.w	r3, sl, #1
 800b4da:	f88b 3000 	strb.w	r3, [fp]
 800b4de:	e73c      	b.n	800b35a <_dtoa_r+0x94a>
 800b4e0:	9b05      	ldr	r3, [sp, #20]
 800b4e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b4e6:	4599      	cmp	r9, r3
 800b4e8:	d047      	beq.n	800b57a <_dtoa_r+0xb6a>
 800b4ea:	ee18 1a10 	vmov	r1, s16
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	220a      	movs	r2, #10
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f000 fb1a 	bl	800bb2c <__multadd>
 800b4f8:	45b8      	cmp	r8, r7
 800b4fa:	ee08 0a10 	vmov	s16, r0
 800b4fe:	f04f 0300 	mov.w	r3, #0
 800b502:	f04f 020a 	mov.w	r2, #10
 800b506:	4641      	mov	r1, r8
 800b508:	4620      	mov	r0, r4
 800b50a:	d106      	bne.n	800b51a <_dtoa_r+0xb0a>
 800b50c:	f000 fb0e 	bl	800bb2c <__multadd>
 800b510:	4680      	mov	r8, r0
 800b512:	4607      	mov	r7, r0
 800b514:	f109 0901 	add.w	r9, r9, #1
 800b518:	e772      	b.n	800b400 <_dtoa_r+0x9f0>
 800b51a:	f000 fb07 	bl	800bb2c <__multadd>
 800b51e:	4639      	mov	r1, r7
 800b520:	4680      	mov	r8, r0
 800b522:	2300      	movs	r3, #0
 800b524:	220a      	movs	r2, #10
 800b526:	4620      	mov	r0, r4
 800b528:	f000 fb00 	bl	800bb2c <__multadd>
 800b52c:	4607      	mov	r7, r0
 800b52e:	e7f1      	b.n	800b514 <_dtoa_r+0xb04>
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	9302      	str	r3, [sp, #8]
 800b534:	9d01      	ldr	r5, [sp, #4]
 800b536:	ee18 0a10 	vmov	r0, s16
 800b53a:	4631      	mov	r1, r6
 800b53c:	f7ff f9dc 	bl	800a8f8 <quorem>
 800b540:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b544:	9b01      	ldr	r3, [sp, #4]
 800b546:	f805 ab01 	strb.w	sl, [r5], #1
 800b54a:	1aea      	subs	r2, r5, r3
 800b54c:	9b02      	ldr	r3, [sp, #8]
 800b54e:	4293      	cmp	r3, r2
 800b550:	dd09      	ble.n	800b566 <_dtoa_r+0xb56>
 800b552:	ee18 1a10 	vmov	r1, s16
 800b556:	2300      	movs	r3, #0
 800b558:	220a      	movs	r2, #10
 800b55a:	4620      	mov	r0, r4
 800b55c:	f000 fae6 	bl	800bb2c <__multadd>
 800b560:	ee08 0a10 	vmov	s16, r0
 800b564:	e7e7      	b.n	800b536 <_dtoa_r+0xb26>
 800b566:	9b02      	ldr	r3, [sp, #8]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	bfc8      	it	gt
 800b56c:	461d      	movgt	r5, r3
 800b56e:	9b01      	ldr	r3, [sp, #4]
 800b570:	bfd8      	it	le
 800b572:	2501      	movle	r5, #1
 800b574:	441d      	add	r5, r3
 800b576:	f04f 0800 	mov.w	r8, #0
 800b57a:	ee18 1a10 	vmov	r1, s16
 800b57e:	2201      	movs	r2, #1
 800b580:	4620      	mov	r0, r4
 800b582:	f000 fc83 	bl	800be8c <__lshift>
 800b586:	4631      	mov	r1, r6
 800b588:	ee08 0a10 	vmov	s16, r0
 800b58c:	f000 fcee 	bl	800bf6c <__mcmp>
 800b590:	2800      	cmp	r0, #0
 800b592:	dc91      	bgt.n	800b4b8 <_dtoa_r+0xaa8>
 800b594:	d102      	bne.n	800b59c <_dtoa_r+0xb8c>
 800b596:	f01a 0f01 	tst.w	sl, #1
 800b59a:	d18d      	bne.n	800b4b8 <_dtoa_r+0xaa8>
 800b59c:	462b      	mov	r3, r5
 800b59e:	461d      	mov	r5, r3
 800b5a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5a4:	2a30      	cmp	r2, #48	; 0x30
 800b5a6:	d0fa      	beq.n	800b59e <_dtoa_r+0xb8e>
 800b5a8:	e6d7      	b.n	800b35a <_dtoa_r+0x94a>
 800b5aa:	9a01      	ldr	r2, [sp, #4]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d184      	bne.n	800b4ba <_dtoa_r+0xaaa>
 800b5b0:	9b00      	ldr	r3, [sp, #0]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	2331      	movs	r3, #49	; 0x31
 800b5b8:	7013      	strb	r3, [r2, #0]
 800b5ba:	e6ce      	b.n	800b35a <_dtoa_r+0x94a>
 800b5bc:	4b09      	ldr	r3, [pc, #36]	; (800b5e4 <_dtoa_r+0xbd4>)
 800b5be:	f7ff ba95 	b.w	800aaec <_dtoa_r+0xdc>
 800b5c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f47f aa6e 	bne.w	800aaa6 <_dtoa_r+0x96>
 800b5ca:	4b07      	ldr	r3, [pc, #28]	; (800b5e8 <_dtoa_r+0xbd8>)
 800b5cc:	f7ff ba8e 	b.w	800aaec <_dtoa_r+0xdc>
 800b5d0:	9b02      	ldr	r3, [sp, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	dcae      	bgt.n	800b534 <_dtoa_r+0xb24>
 800b5d6:	9b06      	ldr	r3, [sp, #24]
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	f73f aea8 	bgt.w	800b32e <_dtoa_r+0x91e>
 800b5de:	e7a9      	b.n	800b534 <_dtoa_r+0xb24>
 800b5e0:	0800cbff 	.word	0x0800cbff
 800b5e4:	0800cb5c 	.word	0x0800cb5c
 800b5e8:	0800cb80 	.word	0x0800cb80

0800b5ec <__sflush_r>:
 800b5ec:	898a      	ldrh	r2, [r1, #12]
 800b5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	0710      	lsls	r0, r2, #28
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	d458      	bmi.n	800b6ac <__sflush_r+0xc0>
 800b5fa:	684b      	ldr	r3, [r1, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	dc05      	bgt.n	800b60c <__sflush_r+0x20>
 800b600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b602:	2b00      	cmp	r3, #0
 800b604:	dc02      	bgt.n	800b60c <__sflush_r+0x20>
 800b606:	2000      	movs	r0, #0
 800b608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b60c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b60e:	2e00      	cmp	r6, #0
 800b610:	d0f9      	beq.n	800b606 <__sflush_r+0x1a>
 800b612:	2300      	movs	r3, #0
 800b614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b618:	682f      	ldr	r7, [r5, #0]
 800b61a:	602b      	str	r3, [r5, #0]
 800b61c:	d032      	beq.n	800b684 <__sflush_r+0x98>
 800b61e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	075a      	lsls	r2, r3, #29
 800b624:	d505      	bpl.n	800b632 <__sflush_r+0x46>
 800b626:	6863      	ldr	r3, [r4, #4]
 800b628:	1ac0      	subs	r0, r0, r3
 800b62a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b62c:	b10b      	cbz	r3, 800b632 <__sflush_r+0x46>
 800b62e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b630:	1ac0      	subs	r0, r0, r3
 800b632:	2300      	movs	r3, #0
 800b634:	4602      	mov	r2, r0
 800b636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b638:	6a21      	ldr	r1, [r4, #32]
 800b63a:	4628      	mov	r0, r5
 800b63c:	47b0      	blx	r6
 800b63e:	1c43      	adds	r3, r0, #1
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	d106      	bne.n	800b652 <__sflush_r+0x66>
 800b644:	6829      	ldr	r1, [r5, #0]
 800b646:	291d      	cmp	r1, #29
 800b648:	d82c      	bhi.n	800b6a4 <__sflush_r+0xb8>
 800b64a:	4a2a      	ldr	r2, [pc, #168]	; (800b6f4 <__sflush_r+0x108>)
 800b64c:	40ca      	lsrs	r2, r1
 800b64e:	07d6      	lsls	r6, r2, #31
 800b650:	d528      	bpl.n	800b6a4 <__sflush_r+0xb8>
 800b652:	2200      	movs	r2, #0
 800b654:	6062      	str	r2, [r4, #4]
 800b656:	04d9      	lsls	r1, r3, #19
 800b658:	6922      	ldr	r2, [r4, #16]
 800b65a:	6022      	str	r2, [r4, #0]
 800b65c:	d504      	bpl.n	800b668 <__sflush_r+0x7c>
 800b65e:	1c42      	adds	r2, r0, #1
 800b660:	d101      	bne.n	800b666 <__sflush_r+0x7a>
 800b662:	682b      	ldr	r3, [r5, #0]
 800b664:	b903      	cbnz	r3, 800b668 <__sflush_r+0x7c>
 800b666:	6560      	str	r0, [r4, #84]	; 0x54
 800b668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b66a:	602f      	str	r7, [r5, #0]
 800b66c:	2900      	cmp	r1, #0
 800b66e:	d0ca      	beq.n	800b606 <__sflush_r+0x1a>
 800b670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b674:	4299      	cmp	r1, r3
 800b676:	d002      	beq.n	800b67e <__sflush_r+0x92>
 800b678:	4628      	mov	r0, r5
 800b67a:	f7fe fa8d 	bl	8009b98 <_free_r>
 800b67e:	2000      	movs	r0, #0
 800b680:	6360      	str	r0, [r4, #52]	; 0x34
 800b682:	e7c1      	b.n	800b608 <__sflush_r+0x1c>
 800b684:	6a21      	ldr	r1, [r4, #32]
 800b686:	2301      	movs	r3, #1
 800b688:	4628      	mov	r0, r5
 800b68a:	47b0      	blx	r6
 800b68c:	1c41      	adds	r1, r0, #1
 800b68e:	d1c7      	bne.n	800b620 <__sflush_r+0x34>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d0c4      	beq.n	800b620 <__sflush_r+0x34>
 800b696:	2b1d      	cmp	r3, #29
 800b698:	d001      	beq.n	800b69e <__sflush_r+0xb2>
 800b69a:	2b16      	cmp	r3, #22
 800b69c:	d101      	bne.n	800b6a2 <__sflush_r+0xb6>
 800b69e:	602f      	str	r7, [r5, #0]
 800b6a0:	e7b1      	b.n	800b606 <__sflush_r+0x1a>
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6a8:	81a3      	strh	r3, [r4, #12]
 800b6aa:	e7ad      	b.n	800b608 <__sflush_r+0x1c>
 800b6ac:	690f      	ldr	r7, [r1, #16]
 800b6ae:	2f00      	cmp	r7, #0
 800b6b0:	d0a9      	beq.n	800b606 <__sflush_r+0x1a>
 800b6b2:	0793      	lsls	r3, r2, #30
 800b6b4:	680e      	ldr	r6, [r1, #0]
 800b6b6:	bf08      	it	eq
 800b6b8:	694b      	ldreq	r3, [r1, #20]
 800b6ba:	600f      	str	r7, [r1, #0]
 800b6bc:	bf18      	it	ne
 800b6be:	2300      	movne	r3, #0
 800b6c0:	eba6 0807 	sub.w	r8, r6, r7
 800b6c4:	608b      	str	r3, [r1, #8]
 800b6c6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ca:	dd9c      	ble.n	800b606 <__sflush_r+0x1a>
 800b6cc:	6a21      	ldr	r1, [r4, #32]
 800b6ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6d0:	4643      	mov	r3, r8
 800b6d2:	463a      	mov	r2, r7
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	47b0      	blx	r6
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	dc06      	bgt.n	800b6ea <__sflush_r+0xfe>
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e2:	81a3      	strh	r3, [r4, #12]
 800b6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e8:	e78e      	b.n	800b608 <__sflush_r+0x1c>
 800b6ea:	4407      	add	r7, r0
 800b6ec:	eba8 0800 	sub.w	r8, r8, r0
 800b6f0:	e7e9      	b.n	800b6c6 <__sflush_r+0xda>
 800b6f2:	bf00      	nop
 800b6f4:	20400001 	.word	0x20400001

0800b6f8 <_fflush_r>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	690b      	ldr	r3, [r1, #16]
 800b6fc:	4605      	mov	r5, r0
 800b6fe:	460c      	mov	r4, r1
 800b700:	b913      	cbnz	r3, 800b708 <_fflush_r+0x10>
 800b702:	2500      	movs	r5, #0
 800b704:	4628      	mov	r0, r5
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	b118      	cbz	r0, 800b712 <_fflush_r+0x1a>
 800b70a:	6983      	ldr	r3, [r0, #24]
 800b70c:	b90b      	cbnz	r3, 800b712 <_fflush_r+0x1a>
 800b70e:	f000 f887 	bl	800b820 <__sinit>
 800b712:	4b14      	ldr	r3, [pc, #80]	; (800b764 <_fflush_r+0x6c>)
 800b714:	429c      	cmp	r4, r3
 800b716:	d11b      	bne.n	800b750 <_fflush_r+0x58>
 800b718:	686c      	ldr	r4, [r5, #4]
 800b71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d0ef      	beq.n	800b702 <_fflush_r+0xa>
 800b722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b724:	07d0      	lsls	r0, r2, #31
 800b726:	d404      	bmi.n	800b732 <_fflush_r+0x3a>
 800b728:	0599      	lsls	r1, r3, #22
 800b72a:	d402      	bmi.n	800b732 <_fflush_r+0x3a>
 800b72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b72e:	f000 f91a 	bl	800b966 <__retarget_lock_acquire_recursive>
 800b732:	4628      	mov	r0, r5
 800b734:	4621      	mov	r1, r4
 800b736:	f7ff ff59 	bl	800b5ec <__sflush_r>
 800b73a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b73c:	07da      	lsls	r2, r3, #31
 800b73e:	4605      	mov	r5, r0
 800b740:	d4e0      	bmi.n	800b704 <_fflush_r+0xc>
 800b742:	89a3      	ldrh	r3, [r4, #12]
 800b744:	059b      	lsls	r3, r3, #22
 800b746:	d4dd      	bmi.n	800b704 <_fflush_r+0xc>
 800b748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b74a:	f000 f90d 	bl	800b968 <__retarget_lock_release_recursive>
 800b74e:	e7d9      	b.n	800b704 <_fflush_r+0xc>
 800b750:	4b05      	ldr	r3, [pc, #20]	; (800b768 <_fflush_r+0x70>)
 800b752:	429c      	cmp	r4, r3
 800b754:	d101      	bne.n	800b75a <_fflush_r+0x62>
 800b756:	68ac      	ldr	r4, [r5, #8]
 800b758:	e7df      	b.n	800b71a <_fflush_r+0x22>
 800b75a:	4b04      	ldr	r3, [pc, #16]	; (800b76c <_fflush_r+0x74>)
 800b75c:	429c      	cmp	r4, r3
 800b75e:	bf08      	it	eq
 800b760:	68ec      	ldreq	r4, [r5, #12]
 800b762:	e7da      	b.n	800b71a <_fflush_r+0x22>
 800b764:	0800cc30 	.word	0x0800cc30
 800b768:	0800cc50 	.word	0x0800cc50
 800b76c:	0800cc10 	.word	0x0800cc10

0800b770 <std>:
 800b770:	2300      	movs	r3, #0
 800b772:	b510      	push	{r4, lr}
 800b774:	4604      	mov	r4, r0
 800b776:	e9c0 3300 	strd	r3, r3, [r0]
 800b77a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b77e:	6083      	str	r3, [r0, #8]
 800b780:	8181      	strh	r1, [r0, #12]
 800b782:	6643      	str	r3, [r0, #100]	; 0x64
 800b784:	81c2      	strh	r2, [r0, #14]
 800b786:	6183      	str	r3, [r0, #24]
 800b788:	4619      	mov	r1, r3
 800b78a:	2208      	movs	r2, #8
 800b78c:	305c      	adds	r0, #92	; 0x5c
 800b78e:	f7fe f9fb 	bl	8009b88 <memset>
 800b792:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <std+0x38>)
 800b794:	6263      	str	r3, [r4, #36]	; 0x24
 800b796:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <std+0x3c>)
 800b798:	62a3      	str	r3, [r4, #40]	; 0x28
 800b79a:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <std+0x40>)
 800b79c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b79e:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <std+0x44>)
 800b7a0:	6224      	str	r4, [r4, #32]
 800b7a2:	6323      	str	r3, [r4, #48]	; 0x30
 800b7a4:	bd10      	pop	{r4, pc}
 800b7a6:	bf00      	nop
 800b7a8:	0800c451 	.word	0x0800c451
 800b7ac:	0800c473 	.word	0x0800c473
 800b7b0:	0800c4ab 	.word	0x0800c4ab
 800b7b4:	0800c4cf 	.word	0x0800c4cf

0800b7b8 <_cleanup_r>:
 800b7b8:	4901      	ldr	r1, [pc, #4]	; (800b7c0 <_cleanup_r+0x8>)
 800b7ba:	f000 b8af 	b.w	800b91c <_fwalk_reent>
 800b7be:	bf00      	nop
 800b7c0:	0800b6f9 	.word	0x0800b6f9

0800b7c4 <__sfmoreglue>:
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	2268      	movs	r2, #104	; 0x68
 800b7c8:	1e4d      	subs	r5, r1, #1
 800b7ca:	4355      	muls	r5, r2
 800b7cc:	460e      	mov	r6, r1
 800b7ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7d2:	f7fe fa4d 	bl	8009c70 <_malloc_r>
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	b140      	cbz	r0, 800b7ec <__sfmoreglue+0x28>
 800b7da:	2100      	movs	r1, #0
 800b7dc:	e9c0 1600 	strd	r1, r6, [r0]
 800b7e0:	300c      	adds	r0, #12
 800b7e2:	60a0      	str	r0, [r4, #8]
 800b7e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7e8:	f7fe f9ce 	bl	8009b88 <memset>
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}

0800b7f0 <__sfp_lock_acquire>:
 800b7f0:	4801      	ldr	r0, [pc, #4]	; (800b7f8 <__sfp_lock_acquire+0x8>)
 800b7f2:	f000 b8b8 	b.w	800b966 <__retarget_lock_acquire_recursive>
 800b7f6:	bf00      	nop
 800b7f8:	20004159 	.word	0x20004159

0800b7fc <__sfp_lock_release>:
 800b7fc:	4801      	ldr	r0, [pc, #4]	; (800b804 <__sfp_lock_release+0x8>)
 800b7fe:	f000 b8b3 	b.w	800b968 <__retarget_lock_release_recursive>
 800b802:	bf00      	nop
 800b804:	20004159 	.word	0x20004159

0800b808 <__sinit_lock_acquire>:
 800b808:	4801      	ldr	r0, [pc, #4]	; (800b810 <__sinit_lock_acquire+0x8>)
 800b80a:	f000 b8ac 	b.w	800b966 <__retarget_lock_acquire_recursive>
 800b80e:	bf00      	nop
 800b810:	2000415a 	.word	0x2000415a

0800b814 <__sinit_lock_release>:
 800b814:	4801      	ldr	r0, [pc, #4]	; (800b81c <__sinit_lock_release+0x8>)
 800b816:	f000 b8a7 	b.w	800b968 <__retarget_lock_release_recursive>
 800b81a:	bf00      	nop
 800b81c:	2000415a 	.word	0x2000415a

0800b820 <__sinit>:
 800b820:	b510      	push	{r4, lr}
 800b822:	4604      	mov	r4, r0
 800b824:	f7ff fff0 	bl	800b808 <__sinit_lock_acquire>
 800b828:	69a3      	ldr	r3, [r4, #24]
 800b82a:	b11b      	cbz	r3, 800b834 <__sinit+0x14>
 800b82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b830:	f7ff bff0 	b.w	800b814 <__sinit_lock_release>
 800b834:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b838:	6523      	str	r3, [r4, #80]	; 0x50
 800b83a:	4b13      	ldr	r3, [pc, #76]	; (800b888 <__sinit+0x68>)
 800b83c:	4a13      	ldr	r2, [pc, #76]	; (800b88c <__sinit+0x6c>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	62a2      	str	r2, [r4, #40]	; 0x28
 800b842:	42a3      	cmp	r3, r4
 800b844:	bf04      	itt	eq
 800b846:	2301      	moveq	r3, #1
 800b848:	61a3      	streq	r3, [r4, #24]
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 f820 	bl	800b890 <__sfp>
 800b850:	6060      	str	r0, [r4, #4]
 800b852:	4620      	mov	r0, r4
 800b854:	f000 f81c 	bl	800b890 <__sfp>
 800b858:	60a0      	str	r0, [r4, #8]
 800b85a:	4620      	mov	r0, r4
 800b85c:	f000 f818 	bl	800b890 <__sfp>
 800b860:	2200      	movs	r2, #0
 800b862:	60e0      	str	r0, [r4, #12]
 800b864:	2104      	movs	r1, #4
 800b866:	6860      	ldr	r0, [r4, #4]
 800b868:	f7ff ff82 	bl	800b770 <std>
 800b86c:	68a0      	ldr	r0, [r4, #8]
 800b86e:	2201      	movs	r2, #1
 800b870:	2109      	movs	r1, #9
 800b872:	f7ff ff7d 	bl	800b770 <std>
 800b876:	68e0      	ldr	r0, [r4, #12]
 800b878:	2202      	movs	r2, #2
 800b87a:	2112      	movs	r1, #18
 800b87c:	f7ff ff78 	bl	800b770 <std>
 800b880:	2301      	movs	r3, #1
 800b882:	61a3      	str	r3, [r4, #24]
 800b884:	e7d2      	b.n	800b82c <__sinit+0xc>
 800b886:	bf00      	nop
 800b888:	0800cb48 	.word	0x0800cb48
 800b88c:	0800b7b9 	.word	0x0800b7b9

0800b890 <__sfp>:
 800b890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b892:	4607      	mov	r7, r0
 800b894:	f7ff ffac 	bl	800b7f0 <__sfp_lock_acquire>
 800b898:	4b1e      	ldr	r3, [pc, #120]	; (800b914 <__sfp+0x84>)
 800b89a:	681e      	ldr	r6, [r3, #0]
 800b89c:	69b3      	ldr	r3, [r6, #24]
 800b89e:	b913      	cbnz	r3, 800b8a6 <__sfp+0x16>
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f7ff ffbd 	bl	800b820 <__sinit>
 800b8a6:	3648      	adds	r6, #72	; 0x48
 800b8a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	d503      	bpl.n	800b8b8 <__sfp+0x28>
 800b8b0:	6833      	ldr	r3, [r6, #0]
 800b8b2:	b30b      	cbz	r3, 800b8f8 <__sfp+0x68>
 800b8b4:	6836      	ldr	r6, [r6, #0]
 800b8b6:	e7f7      	b.n	800b8a8 <__sfp+0x18>
 800b8b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b8bc:	b9d5      	cbnz	r5, 800b8f4 <__sfp+0x64>
 800b8be:	4b16      	ldr	r3, [pc, #88]	; (800b918 <__sfp+0x88>)
 800b8c0:	60e3      	str	r3, [r4, #12]
 800b8c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8c6:	6665      	str	r5, [r4, #100]	; 0x64
 800b8c8:	f000 f84c 	bl	800b964 <__retarget_lock_init_recursive>
 800b8cc:	f7ff ff96 	bl	800b7fc <__sfp_lock_release>
 800b8d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8d8:	6025      	str	r5, [r4, #0]
 800b8da:	61a5      	str	r5, [r4, #24]
 800b8dc:	2208      	movs	r2, #8
 800b8de:	4629      	mov	r1, r5
 800b8e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8e4:	f7fe f950 	bl	8009b88 <memset>
 800b8e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8f4:	3468      	adds	r4, #104	; 0x68
 800b8f6:	e7d9      	b.n	800b8ac <__sfp+0x1c>
 800b8f8:	2104      	movs	r1, #4
 800b8fa:	4638      	mov	r0, r7
 800b8fc:	f7ff ff62 	bl	800b7c4 <__sfmoreglue>
 800b900:	4604      	mov	r4, r0
 800b902:	6030      	str	r0, [r6, #0]
 800b904:	2800      	cmp	r0, #0
 800b906:	d1d5      	bne.n	800b8b4 <__sfp+0x24>
 800b908:	f7ff ff78 	bl	800b7fc <__sfp_lock_release>
 800b90c:	230c      	movs	r3, #12
 800b90e:	603b      	str	r3, [r7, #0]
 800b910:	e7ee      	b.n	800b8f0 <__sfp+0x60>
 800b912:	bf00      	nop
 800b914:	0800cb48 	.word	0x0800cb48
 800b918:	ffff0001 	.word	0xffff0001

0800b91c <_fwalk_reent>:
 800b91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b920:	4606      	mov	r6, r0
 800b922:	4688      	mov	r8, r1
 800b924:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b928:	2700      	movs	r7, #0
 800b92a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b92e:	f1b9 0901 	subs.w	r9, r9, #1
 800b932:	d505      	bpl.n	800b940 <_fwalk_reent+0x24>
 800b934:	6824      	ldr	r4, [r4, #0]
 800b936:	2c00      	cmp	r4, #0
 800b938:	d1f7      	bne.n	800b92a <_fwalk_reent+0xe>
 800b93a:	4638      	mov	r0, r7
 800b93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b940:	89ab      	ldrh	r3, [r5, #12]
 800b942:	2b01      	cmp	r3, #1
 800b944:	d907      	bls.n	800b956 <_fwalk_reent+0x3a>
 800b946:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b94a:	3301      	adds	r3, #1
 800b94c:	d003      	beq.n	800b956 <_fwalk_reent+0x3a>
 800b94e:	4629      	mov	r1, r5
 800b950:	4630      	mov	r0, r6
 800b952:	47c0      	blx	r8
 800b954:	4307      	orrs	r7, r0
 800b956:	3568      	adds	r5, #104	; 0x68
 800b958:	e7e9      	b.n	800b92e <_fwalk_reent+0x12>
	...

0800b95c <_localeconv_r>:
 800b95c:	4800      	ldr	r0, [pc, #0]	; (800b960 <_localeconv_r+0x4>)
 800b95e:	4770      	bx	lr
 800b960:	20000178 	.word	0x20000178

0800b964 <__retarget_lock_init_recursive>:
 800b964:	4770      	bx	lr

0800b966 <__retarget_lock_acquire_recursive>:
 800b966:	4770      	bx	lr

0800b968 <__retarget_lock_release_recursive>:
 800b968:	4770      	bx	lr

0800b96a <__swhatbuf_r>:
 800b96a:	b570      	push	{r4, r5, r6, lr}
 800b96c:	460e      	mov	r6, r1
 800b96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b972:	2900      	cmp	r1, #0
 800b974:	b096      	sub	sp, #88	; 0x58
 800b976:	4614      	mov	r4, r2
 800b978:	461d      	mov	r5, r3
 800b97a:	da08      	bge.n	800b98e <__swhatbuf_r+0x24>
 800b97c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	602a      	str	r2, [r5, #0]
 800b984:	061a      	lsls	r2, r3, #24
 800b986:	d410      	bmi.n	800b9aa <__swhatbuf_r+0x40>
 800b988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b98c:	e00e      	b.n	800b9ac <__swhatbuf_r+0x42>
 800b98e:	466a      	mov	r2, sp
 800b990:	f000 fdf4 	bl	800c57c <_fstat_r>
 800b994:	2800      	cmp	r0, #0
 800b996:	dbf1      	blt.n	800b97c <__swhatbuf_r+0x12>
 800b998:	9a01      	ldr	r2, [sp, #4]
 800b99a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b99e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b9a2:	425a      	negs	r2, r3
 800b9a4:	415a      	adcs	r2, r3
 800b9a6:	602a      	str	r2, [r5, #0]
 800b9a8:	e7ee      	b.n	800b988 <__swhatbuf_r+0x1e>
 800b9aa:	2340      	movs	r3, #64	; 0x40
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	b016      	add	sp, #88	; 0x58
 800b9b2:	bd70      	pop	{r4, r5, r6, pc}

0800b9b4 <__smakebuf_r>:
 800b9b4:	898b      	ldrh	r3, [r1, #12]
 800b9b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9b8:	079d      	lsls	r5, r3, #30
 800b9ba:	4606      	mov	r6, r0
 800b9bc:	460c      	mov	r4, r1
 800b9be:	d507      	bpl.n	800b9d0 <__smakebuf_r+0x1c>
 800b9c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	6123      	str	r3, [r4, #16]
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	6163      	str	r3, [r4, #20]
 800b9cc:	b002      	add	sp, #8
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
 800b9d0:	ab01      	add	r3, sp, #4
 800b9d2:	466a      	mov	r2, sp
 800b9d4:	f7ff ffc9 	bl	800b96a <__swhatbuf_r>
 800b9d8:	9900      	ldr	r1, [sp, #0]
 800b9da:	4605      	mov	r5, r0
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f7fe f947 	bl	8009c70 <_malloc_r>
 800b9e2:	b948      	cbnz	r0, 800b9f8 <__smakebuf_r+0x44>
 800b9e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9e8:	059a      	lsls	r2, r3, #22
 800b9ea:	d4ef      	bmi.n	800b9cc <__smakebuf_r+0x18>
 800b9ec:	f023 0303 	bic.w	r3, r3, #3
 800b9f0:	f043 0302 	orr.w	r3, r3, #2
 800b9f4:	81a3      	strh	r3, [r4, #12]
 800b9f6:	e7e3      	b.n	800b9c0 <__smakebuf_r+0xc>
 800b9f8:	4b0d      	ldr	r3, [pc, #52]	; (800ba30 <__smakebuf_r+0x7c>)
 800b9fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	6020      	str	r0, [r4, #0]
 800ba00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba04:	81a3      	strh	r3, [r4, #12]
 800ba06:	9b00      	ldr	r3, [sp, #0]
 800ba08:	6163      	str	r3, [r4, #20]
 800ba0a:	9b01      	ldr	r3, [sp, #4]
 800ba0c:	6120      	str	r0, [r4, #16]
 800ba0e:	b15b      	cbz	r3, 800ba28 <__smakebuf_r+0x74>
 800ba10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba14:	4630      	mov	r0, r6
 800ba16:	f000 fdc3 	bl	800c5a0 <_isatty_r>
 800ba1a:	b128      	cbz	r0, 800ba28 <__smakebuf_r+0x74>
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	f023 0303 	bic.w	r3, r3, #3
 800ba22:	f043 0301 	orr.w	r3, r3, #1
 800ba26:	81a3      	strh	r3, [r4, #12]
 800ba28:	89a0      	ldrh	r0, [r4, #12]
 800ba2a:	4305      	orrs	r5, r0
 800ba2c:	81a5      	strh	r5, [r4, #12]
 800ba2e:	e7cd      	b.n	800b9cc <__smakebuf_r+0x18>
 800ba30:	0800b7b9 	.word	0x0800b7b9

0800ba34 <memcpy>:
 800ba34:	440a      	add	r2, r1
 800ba36:	4291      	cmp	r1, r2
 800ba38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba3c:	d100      	bne.n	800ba40 <memcpy+0xc>
 800ba3e:	4770      	bx	lr
 800ba40:	b510      	push	{r4, lr}
 800ba42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba4a:	4291      	cmp	r1, r2
 800ba4c:	d1f9      	bne.n	800ba42 <memcpy+0xe>
 800ba4e:	bd10      	pop	{r4, pc}

0800ba50 <__malloc_lock>:
 800ba50:	4801      	ldr	r0, [pc, #4]	; (800ba58 <__malloc_lock+0x8>)
 800ba52:	f7ff bf88 	b.w	800b966 <__retarget_lock_acquire_recursive>
 800ba56:	bf00      	nop
 800ba58:	20004158 	.word	0x20004158

0800ba5c <__malloc_unlock>:
 800ba5c:	4801      	ldr	r0, [pc, #4]	; (800ba64 <__malloc_unlock+0x8>)
 800ba5e:	f7ff bf83 	b.w	800b968 <__retarget_lock_release_recursive>
 800ba62:	bf00      	nop
 800ba64:	20004158 	.word	0x20004158

0800ba68 <_Balloc>:
 800ba68:	b570      	push	{r4, r5, r6, lr}
 800ba6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	460d      	mov	r5, r1
 800ba70:	b976      	cbnz	r6, 800ba90 <_Balloc+0x28>
 800ba72:	2010      	movs	r0, #16
 800ba74:	f7fe f878 	bl	8009b68 <malloc>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	6260      	str	r0, [r4, #36]	; 0x24
 800ba7c:	b920      	cbnz	r0, 800ba88 <_Balloc+0x20>
 800ba7e:	4b18      	ldr	r3, [pc, #96]	; (800bae0 <_Balloc+0x78>)
 800ba80:	4818      	ldr	r0, [pc, #96]	; (800bae4 <_Balloc+0x7c>)
 800ba82:	2166      	movs	r1, #102	; 0x66
 800ba84:	f000 fd3a 	bl	800c4fc <__assert_func>
 800ba88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba8c:	6006      	str	r6, [r0, #0]
 800ba8e:	60c6      	str	r6, [r0, #12]
 800ba90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba92:	68f3      	ldr	r3, [r6, #12]
 800ba94:	b183      	cbz	r3, 800bab8 <_Balloc+0x50>
 800ba96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba9e:	b9b8      	cbnz	r0, 800bad0 <_Balloc+0x68>
 800baa0:	2101      	movs	r1, #1
 800baa2:	fa01 f605 	lsl.w	r6, r1, r5
 800baa6:	1d72      	adds	r2, r6, #5
 800baa8:	0092      	lsls	r2, r2, #2
 800baaa:	4620      	mov	r0, r4
 800baac:	f000 fb60 	bl	800c170 <_calloc_r>
 800bab0:	b160      	cbz	r0, 800bacc <_Balloc+0x64>
 800bab2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bab6:	e00e      	b.n	800bad6 <_Balloc+0x6e>
 800bab8:	2221      	movs	r2, #33	; 0x21
 800baba:	2104      	movs	r1, #4
 800babc:	4620      	mov	r0, r4
 800babe:	f000 fb57 	bl	800c170 <_calloc_r>
 800bac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bac4:	60f0      	str	r0, [r6, #12]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1e4      	bne.n	800ba96 <_Balloc+0x2e>
 800bacc:	2000      	movs	r0, #0
 800bace:	bd70      	pop	{r4, r5, r6, pc}
 800bad0:	6802      	ldr	r2, [r0, #0]
 800bad2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bad6:	2300      	movs	r3, #0
 800bad8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800badc:	e7f7      	b.n	800bace <_Balloc+0x66>
 800bade:	bf00      	nop
 800bae0:	0800cb8d 	.word	0x0800cb8d
 800bae4:	0800cc70 	.word	0x0800cc70

0800bae8 <_Bfree>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800baec:	4605      	mov	r5, r0
 800baee:	460c      	mov	r4, r1
 800baf0:	b976      	cbnz	r6, 800bb10 <_Bfree+0x28>
 800baf2:	2010      	movs	r0, #16
 800baf4:	f7fe f838 	bl	8009b68 <malloc>
 800baf8:	4602      	mov	r2, r0
 800bafa:	6268      	str	r0, [r5, #36]	; 0x24
 800bafc:	b920      	cbnz	r0, 800bb08 <_Bfree+0x20>
 800bafe:	4b09      	ldr	r3, [pc, #36]	; (800bb24 <_Bfree+0x3c>)
 800bb00:	4809      	ldr	r0, [pc, #36]	; (800bb28 <_Bfree+0x40>)
 800bb02:	218a      	movs	r1, #138	; 0x8a
 800bb04:	f000 fcfa 	bl	800c4fc <__assert_func>
 800bb08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb0c:	6006      	str	r6, [r0, #0]
 800bb0e:	60c6      	str	r6, [r0, #12]
 800bb10:	b13c      	cbz	r4, 800bb22 <_Bfree+0x3a>
 800bb12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb14:	6862      	ldr	r2, [r4, #4]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb1c:	6021      	str	r1, [r4, #0]
 800bb1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb22:	bd70      	pop	{r4, r5, r6, pc}
 800bb24:	0800cb8d 	.word	0x0800cb8d
 800bb28:	0800cc70 	.word	0x0800cc70

0800bb2c <__multadd>:
 800bb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb30:	690d      	ldr	r5, [r1, #16]
 800bb32:	4607      	mov	r7, r0
 800bb34:	460c      	mov	r4, r1
 800bb36:	461e      	mov	r6, r3
 800bb38:	f101 0c14 	add.w	ip, r1, #20
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	f8dc 3000 	ldr.w	r3, [ip]
 800bb42:	b299      	uxth	r1, r3
 800bb44:	fb02 6101 	mla	r1, r2, r1, r6
 800bb48:	0c1e      	lsrs	r6, r3, #16
 800bb4a:	0c0b      	lsrs	r3, r1, #16
 800bb4c:	fb02 3306 	mla	r3, r2, r6, r3
 800bb50:	b289      	uxth	r1, r1
 800bb52:	3001      	adds	r0, #1
 800bb54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb58:	4285      	cmp	r5, r0
 800bb5a:	f84c 1b04 	str.w	r1, [ip], #4
 800bb5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb62:	dcec      	bgt.n	800bb3e <__multadd+0x12>
 800bb64:	b30e      	cbz	r6, 800bbaa <__multadd+0x7e>
 800bb66:	68a3      	ldr	r3, [r4, #8]
 800bb68:	42ab      	cmp	r3, r5
 800bb6a:	dc19      	bgt.n	800bba0 <__multadd+0x74>
 800bb6c:	6861      	ldr	r1, [r4, #4]
 800bb6e:	4638      	mov	r0, r7
 800bb70:	3101      	adds	r1, #1
 800bb72:	f7ff ff79 	bl	800ba68 <_Balloc>
 800bb76:	4680      	mov	r8, r0
 800bb78:	b928      	cbnz	r0, 800bb86 <__multadd+0x5a>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	4b0c      	ldr	r3, [pc, #48]	; (800bbb0 <__multadd+0x84>)
 800bb7e:	480d      	ldr	r0, [pc, #52]	; (800bbb4 <__multadd+0x88>)
 800bb80:	21b5      	movs	r1, #181	; 0xb5
 800bb82:	f000 fcbb 	bl	800c4fc <__assert_func>
 800bb86:	6922      	ldr	r2, [r4, #16]
 800bb88:	3202      	adds	r2, #2
 800bb8a:	f104 010c 	add.w	r1, r4, #12
 800bb8e:	0092      	lsls	r2, r2, #2
 800bb90:	300c      	adds	r0, #12
 800bb92:	f7ff ff4f 	bl	800ba34 <memcpy>
 800bb96:	4621      	mov	r1, r4
 800bb98:	4638      	mov	r0, r7
 800bb9a:	f7ff ffa5 	bl	800bae8 <_Bfree>
 800bb9e:	4644      	mov	r4, r8
 800bba0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bba4:	3501      	adds	r5, #1
 800bba6:	615e      	str	r6, [r3, #20]
 800bba8:	6125      	str	r5, [r4, #16]
 800bbaa:	4620      	mov	r0, r4
 800bbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb0:	0800cbff 	.word	0x0800cbff
 800bbb4:	0800cc70 	.word	0x0800cc70

0800bbb8 <__hi0bits>:
 800bbb8:	0c03      	lsrs	r3, r0, #16
 800bbba:	041b      	lsls	r3, r3, #16
 800bbbc:	b9d3      	cbnz	r3, 800bbf4 <__hi0bits+0x3c>
 800bbbe:	0400      	lsls	r0, r0, #16
 800bbc0:	2310      	movs	r3, #16
 800bbc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbc6:	bf04      	itt	eq
 800bbc8:	0200      	lsleq	r0, r0, #8
 800bbca:	3308      	addeq	r3, #8
 800bbcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbd0:	bf04      	itt	eq
 800bbd2:	0100      	lsleq	r0, r0, #4
 800bbd4:	3304      	addeq	r3, #4
 800bbd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbda:	bf04      	itt	eq
 800bbdc:	0080      	lsleq	r0, r0, #2
 800bbde:	3302      	addeq	r3, #2
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	db05      	blt.n	800bbf0 <__hi0bits+0x38>
 800bbe4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbe8:	f103 0301 	add.w	r3, r3, #1
 800bbec:	bf08      	it	eq
 800bbee:	2320      	moveq	r3, #32
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	4770      	bx	lr
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e7e4      	b.n	800bbc2 <__hi0bits+0xa>

0800bbf8 <__lo0bits>:
 800bbf8:	6803      	ldr	r3, [r0, #0]
 800bbfa:	f013 0207 	ands.w	r2, r3, #7
 800bbfe:	4601      	mov	r1, r0
 800bc00:	d00b      	beq.n	800bc1a <__lo0bits+0x22>
 800bc02:	07da      	lsls	r2, r3, #31
 800bc04:	d423      	bmi.n	800bc4e <__lo0bits+0x56>
 800bc06:	0798      	lsls	r0, r3, #30
 800bc08:	bf49      	itett	mi
 800bc0a:	085b      	lsrmi	r3, r3, #1
 800bc0c:	089b      	lsrpl	r3, r3, #2
 800bc0e:	2001      	movmi	r0, #1
 800bc10:	600b      	strmi	r3, [r1, #0]
 800bc12:	bf5c      	itt	pl
 800bc14:	600b      	strpl	r3, [r1, #0]
 800bc16:	2002      	movpl	r0, #2
 800bc18:	4770      	bx	lr
 800bc1a:	b298      	uxth	r0, r3
 800bc1c:	b9a8      	cbnz	r0, 800bc4a <__lo0bits+0x52>
 800bc1e:	0c1b      	lsrs	r3, r3, #16
 800bc20:	2010      	movs	r0, #16
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	b90a      	cbnz	r2, 800bc2a <__lo0bits+0x32>
 800bc26:	3008      	adds	r0, #8
 800bc28:	0a1b      	lsrs	r3, r3, #8
 800bc2a:	071a      	lsls	r2, r3, #28
 800bc2c:	bf04      	itt	eq
 800bc2e:	091b      	lsreq	r3, r3, #4
 800bc30:	3004      	addeq	r0, #4
 800bc32:	079a      	lsls	r2, r3, #30
 800bc34:	bf04      	itt	eq
 800bc36:	089b      	lsreq	r3, r3, #2
 800bc38:	3002      	addeq	r0, #2
 800bc3a:	07da      	lsls	r2, r3, #31
 800bc3c:	d403      	bmi.n	800bc46 <__lo0bits+0x4e>
 800bc3e:	085b      	lsrs	r3, r3, #1
 800bc40:	f100 0001 	add.w	r0, r0, #1
 800bc44:	d005      	beq.n	800bc52 <__lo0bits+0x5a>
 800bc46:	600b      	str	r3, [r1, #0]
 800bc48:	4770      	bx	lr
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	e7e9      	b.n	800bc22 <__lo0bits+0x2a>
 800bc4e:	2000      	movs	r0, #0
 800bc50:	4770      	bx	lr
 800bc52:	2020      	movs	r0, #32
 800bc54:	4770      	bx	lr
	...

0800bc58 <__i2b>:
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	2101      	movs	r1, #1
 800bc5e:	f7ff ff03 	bl	800ba68 <_Balloc>
 800bc62:	4602      	mov	r2, r0
 800bc64:	b928      	cbnz	r0, 800bc72 <__i2b+0x1a>
 800bc66:	4b05      	ldr	r3, [pc, #20]	; (800bc7c <__i2b+0x24>)
 800bc68:	4805      	ldr	r0, [pc, #20]	; (800bc80 <__i2b+0x28>)
 800bc6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc6e:	f000 fc45 	bl	800c4fc <__assert_func>
 800bc72:	2301      	movs	r3, #1
 800bc74:	6144      	str	r4, [r0, #20]
 800bc76:	6103      	str	r3, [r0, #16]
 800bc78:	bd10      	pop	{r4, pc}
 800bc7a:	bf00      	nop
 800bc7c:	0800cbff 	.word	0x0800cbff
 800bc80:	0800cc70 	.word	0x0800cc70

0800bc84 <__multiply>:
 800bc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc88:	4691      	mov	r9, r2
 800bc8a:	690a      	ldr	r2, [r1, #16]
 800bc8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	bfb8      	it	lt
 800bc94:	460b      	movlt	r3, r1
 800bc96:	460c      	mov	r4, r1
 800bc98:	bfbc      	itt	lt
 800bc9a:	464c      	movlt	r4, r9
 800bc9c:	4699      	movlt	r9, r3
 800bc9e:	6927      	ldr	r7, [r4, #16]
 800bca0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bca4:	68a3      	ldr	r3, [r4, #8]
 800bca6:	6861      	ldr	r1, [r4, #4]
 800bca8:	eb07 060a 	add.w	r6, r7, sl
 800bcac:	42b3      	cmp	r3, r6
 800bcae:	b085      	sub	sp, #20
 800bcb0:	bfb8      	it	lt
 800bcb2:	3101      	addlt	r1, #1
 800bcb4:	f7ff fed8 	bl	800ba68 <_Balloc>
 800bcb8:	b930      	cbnz	r0, 800bcc8 <__multiply+0x44>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	4b44      	ldr	r3, [pc, #272]	; (800bdd0 <__multiply+0x14c>)
 800bcbe:	4845      	ldr	r0, [pc, #276]	; (800bdd4 <__multiply+0x150>)
 800bcc0:	f240 115d 	movw	r1, #349	; 0x15d
 800bcc4:	f000 fc1a 	bl	800c4fc <__assert_func>
 800bcc8:	f100 0514 	add.w	r5, r0, #20
 800bccc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcd0:	462b      	mov	r3, r5
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	4543      	cmp	r3, r8
 800bcd6:	d321      	bcc.n	800bd1c <__multiply+0x98>
 800bcd8:	f104 0314 	add.w	r3, r4, #20
 800bcdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bce0:	f109 0314 	add.w	r3, r9, #20
 800bce4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bce8:	9202      	str	r2, [sp, #8]
 800bcea:	1b3a      	subs	r2, r7, r4
 800bcec:	3a15      	subs	r2, #21
 800bcee:	f022 0203 	bic.w	r2, r2, #3
 800bcf2:	3204      	adds	r2, #4
 800bcf4:	f104 0115 	add.w	r1, r4, #21
 800bcf8:	428f      	cmp	r7, r1
 800bcfa:	bf38      	it	cc
 800bcfc:	2204      	movcc	r2, #4
 800bcfe:	9201      	str	r2, [sp, #4]
 800bd00:	9a02      	ldr	r2, [sp, #8]
 800bd02:	9303      	str	r3, [sp, #12]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d80c      	bhi.n	800bd22 <__multiply+0x9e>
 800bd08:	2e00      	cmp	r6, #0
 800bd0a:	dd03      	ble.n	800bd14 <__multiply+0x90>
 800bd0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d05a      	beq.n	800bdca <__multiply+0x146>
 800bd14:	6106      	str	r6, [r0, #16]
 800bd16:	b005      	add	sp, #20
 800bd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1c:	f843 2b04 	str.w	r2, [r3], #4
 800bd20:	e7d8      	b.n	800bcd4 <__multiply+0x50>
 800bd22:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd26:	f1ba 0f00 	cmp.w	sl, #0
 800bd2a:	d024      	beq.n	800bd76 <__multiply+0xf2>
 800bd2c:	f104 0e14 	add.w	lr, r4, #20
 800bd30:	46a9      	mov	r9, r5
 800bd32:	f04f 0c00 	mov.w	ip, #0
 800bd36:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd3a:	f8d9 1000 	ldr.w	r1, [r9]
 800bd3e:	fa1f fb82 	uxth.w	fp, r2
 800bd42:	b289      	uxth	r1, r1
 800bd44:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd4c:	f8d9 2000 	ldr.w	r2, [r9]
 800bd50:	4461      	add	r1, ip
 800bd52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd56:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd5e:	b289      	uxth	r1, r1
 800bd60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd64:	4577      	cmp	r7, lr
 800bd66:	f849 1b04 	str.w	r1, [r9], #4
 800bd6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd6e:	d8e2      	bhi.n	800bd36 <__multiply+0xb2>
 800bd70:	9a01      	ldr	r2, [sp, #4]
 800bd72:	f845 c002 	str.w	ip, [r5, r2]
 800bd76:	9a03      	ldr	r2, [sp, #12]
 800bd78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	f1b9 0f00 	cmp.w	r9, #0
 800bd82:	d020      	beq.n	800bdc6 <__multiply+0x142>
 800bd84:	6829      	ldr	r1, [r5, #0]
 800bd86:	f104 0c14 	add.w	ip, r4, #20
 800bd8a:	46ae      	mov	lr, r5
 800bd8c:	f04f 0a00 	mov.w	sl, #0
 800bd90:	f8bc b000 	ldrh.w	fp, [ip]
 800bd94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd98:	fb09 220b 	mla	r2, r9, fp, r2
 800bd9c:	4492      	add	sl, r2
 800bd9e:	b289      	uxth	r1, r1
 800bda0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bda4:	f84e 1b04 	str.w	r1, [lr], #4
 800bda8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bdac:	f8be 1000 	ldrh.w	r1, [lr]
 800bdb0:	0c12      	lsrs	r2, r2, #16
 800bdb2:	fb09 1102 	mla	r1, r9, r2, r1
 800bdb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bdba:	4567      	cmp	r7, ip
 800bdbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdc0:	d8e6      	bhi.n	800bd90 <__multiply+0x10c>
 800bdc2:	9a01      	ldr	r2, [sp, #4]
 800bdc4:	50a9      	str	r1, [r5, r2]
 800bdc6:	3504      	adds	r5, #4
 800bdc8:	e79a      	b.n	800bd00 <__multiply+0x7c>
 800bdca:	3e01      	subs	r6, #1
 800bdcc:	e79c      	b.n	800bd08 <__multiply+0x84>
 800bdce:	bf00      	nop
 800bdd0:	0800cbff 	.word	0x0800cbff
 800bdd4:	0800cc70 	.word	0x0800cc70

0800bdd8 <__pow5mult>:
 800bdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bddc:	4615      	mov	r5, r2
 800bdde:	f012 0203 	ands.w	r2, r2, #3
 800bde2:	4606      	mov	r6, r0
 800bde4:	460f      	mov	r7, r1
 800bde6:	d007      	beq.n	800bdf8 <__pow5mult+0x20>
 800bde8:	4c25      	ldr	r4, [pc, #148]	; (800be80 <__pow5mult+0xa8>)
 800bdea:	3a01      	subs	r2, #1
 800bdec:	2300      	movs	r3, #0
 800bdee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdf2:	f7ff fe9b 	bl	800bb2c <__multadd>
 800bdf6:	4607      	mov	r7, r0
 800bdf8:	10ad      	asrs	r5, r5, #2
 800bdfa:	d03d      	beq.n	800be78 <__pow5mult+0xa0>
 800bdfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bdfe:	b97c      	cbnz	r4, 800be20 <__pow5mult+0x48>
 800be00:	2010      	movs	r0, #16
 800be02:	f7fd feb1 	bl	8009b68 <malloc>
 800be06:	4602      	mov	r2, r0
 800be08:	6270      	str	r0, [r6, #36]	; 0x24
 800be0a:	b928      	cbnz	r0, 800be18 <__pow5mult+0x40>
 800be0c:	4b1d      	ldr	r3, [pc, #116]	; (800be84 <__pow5mult+0xac>)
 800be0e:	481e      	ldr	r0, [pc, #120]	; (800be88 <__pow5mult+0xb0>)
 800be10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be14:	f000 fb72 	bl	800c4fc <__assert_func>
 800be18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be1c:	6004      	str	r4, [r0, #0]
 800be1e:	60c4      	str	r4, [r0, #12]
 800be20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be28:	b94c      	cbnz	r4, 800be3e <__pow5mult+0x66>
 800be2a:	f240 2171 	movw	r1, #625	; 0x271
 800be2e:	4630      	mov	r0, r6
 800be30:	f7ff ff12 	bl	800bc58 <__i2b>
 800be34:	2300      	movs	r3, #0
 800be36:	f8c8 0008 	str.w	r0, [r8, #8]
 800be3a:	4604      	mov	r4, r0
 800be3c:	6003      	str	r3, [r0, #0]
 800be3e:	f04f 0900 	mov.w	r9, #0
 800be42:	07eb      	lsls	r3, r5, #31
 800be44:	d50a      	bpl.n	800be5c <__pow5mult+0x84>
 800be46:	4639      	mov	r1, r7
 800be48:	4622      	mov	r2, r4
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7ff ff1a 	bl	800bc84 <__multiply>
 800be50:	4639      	mov	r1, r7
 800be52:	4680      	mov	r8, r0
 800be54:	4630      	mov	r0, r6
 800be56:	f7ff fe47 	bl	800bae8 <_Bfree>
 800be5a:	4647      	mov	r7, r8
 800be5c:	106d      	asrs	r5, r5, #1
 800be5e:	d00b      	beq.n	800be78 <__pow5mult+0xa0>
 800be60:	6820      	ldr	r0, [r4, #0]
 800be62:	b938      	cbnz	r0, 800be74 <__pow5mult+0x9c>
 800be64:	4622      	mov	r2, r4
 800be66:	4621      	mov	r1, r4
 800be68:	4630      	mov	r0, r6
 800be6a:	f7ff ff0b 	bl	800bc84 <__multiply>
 800be6e:	6020      	str	r0, [r4, #0]
 800be70:	f8c0 9000 	str.w	r9, [r0]
 800be74:	4604      	mov	r4, r0
 800be76:	e7e4      	b.n	800be42 <__pow5mult+0x6a>
 800be78:	4638      	mov	r0, r7
 800be7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7e:	bf00      	nop
 800be80:	0800cdc0 	.word	0x0800cdc0
 800be84:	0800cb8d 	.word	0x0800cb8d
 800be88:	0800cc70 	.word	0x0800cc70

0800be8c <__lshift>:
 800be8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be90:	460c      	mov	r4, r1
 800be92:	6849      	ldr	r1, [r1, #4]
 800be94:	6923      	ldr	r3, [r4, #16]
 800be96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be9a:	68a3      	ldr	r3, [r4, #8]
 800be9c:	4607      	mov	r7, r0
 800be9e:	4691      	mov	r9, r2
 800bea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bea4:	f108 0601 	add.w	r6, r8, #1
 800bea8:	42b3      	cmp	r3, r6
 800beaa:	db0b      	blt.n	800bec4 <__lshift+0x38>
 800beac:	4638      	mov	r0, r7
 800beae:	f7ff fddb 	bl	800ba68 <_Balloc>
 800beb2:	4605      	mov	r5, r0
 800beb4:	b948      	cbnz	r0, 800beca <__lshift+0x3e>
 800beb6:	4602      	mov	r2, r0
 800beb8:	4b2a      	ldr	r3, [pc, #168]	; (800bf64 <__lshift+0xd8>)
 800beba:	482b      	ldr	r0, [pc, #172]	; (800bf68 <__lshift+0xdc>)
 800bebc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bec0:	f000 fb1c 	bl	800c4fc <__assert_func>
 800bec4:	3101      	adds	r1, #1
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	e7ee      	b.n	800bea8 <__lshift+0x1c>
 800beca:	2300      	movs	r3, #0
 800becc:	f100 0114 	add.w	r1, r0, #20
 800bed0:	f100 0210 	add.w	r2, r0, #16
 800bed4:	4618      	mov	r0, r3
 800bed6:	4553      	cmp	r3, sl
 800bed8:	db37      	blt.n	800bf4a <__lshift+0xbe>
 800beda:	6920      	ldr	r0, [r4, #16]
 800bedc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bee0:	f104 0314 	add.w	r3, r4, #20
 800bee4:	f019 091f 	ands.w	r9, r9, #31
 800bee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800beec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bef0:	d02f      	beq.n	800bf52 <__lshift+0xc6>
 800bef2:	f1c9 0e20 	rsb	lr, r9, #32
 800bef6:	468a      	mov	sl, r1
 800bef8:	f04f 0c00 	mov.w	ip, #0
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	fa02 f209 	lsl.w	r2, r2, r9
 800bf02:	ea42 020c 	orr.w	r2, r2, ip
 800bf06:	f84a 2b04 	str.w	r2, [sl], #4
 800bf0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf0e:	4298      	cmp	r0, r3
 800bf10:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf14:	d8f2      	bhi.n	800befc <__lshift+0x70>
 800bf16:	1b03      	subs	r3, r0, r4
 800bf18:	3b15      	subs	r3, #21
 800bf1a:	f023 0303 	bic.w	r3, r3, #3
 800bf1e:	3304      	adds	r3, #4
 800bf20:	f104 0215 	add.w	r2, r4, #21
 800bf24:	4290      	cmp	r0, r2
 800bf26:	bf38      	it	cc
 800bf28:	2304      	movcc	r3, #4
 800bf2a:	f841 c003 	str.w	ip, [r1, r3]
 800bf2e:	f1bc 0f00 	cmp.w	ip, #0
 800bf32:	d001      	beq.n	800bf38 <__lshift+0xac>
 800bf34:	f108 0602 	add.w	r6, r8, #2
 800bf38:	3e01      	subs	r6, #1
 800bf3a:	4638      	mov	r0, r7
 800bf3c:	612e      	str	r6, [r5, #16]
 800bf3e:	4621      	mov	r1, r4
 800bf40:	f7ff fdd2 	bl	800bae8 <_Bfree>
 800bf44:	4628      	mov	r0, r5
 800bf46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf4e:	3301      	adds	r3, #1
 800bf50:	e7c1      	b.n	800bed6 <__lshift+0x4a>
 800bf52:	3904      	subs	r1, #4
 800bf54:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf58:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf5c:	4298      	cmp	r0, r3
 800bf5e:	d8f9      	bhi.n	800bf54 <__lshift+0xc8>
 800bf60:	e7ea      	b.n	800bf38 <__lshift+0xac>
 800bf62:	bf00      	nop
 800bf64:	0800cbff 	.word	0x0800cbff
 800bf68:	0800cc70 	.word	0x0800cc70

0800bf6c <__mcmp>:
 800bf6c:	b530      	push	{r4, r5, lr}
 800bf6e:	6902      	ldr	r2, [r0, #16]
 800bf70:	690c      	ldr	r4, [r1, #16]
 800bf72:	1b12      	subs	r2, r2, r4
 800bf74:	d10e      	bne.n	800bf94 <__mcmp+0x28>
 800bf76:	f100 0314 	add.w	r3, r0, #20
 800bf7a:	3114      	adds	r1, #20
 800bf7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf8c:	42a5      	cmp	r5, r4
 800bf8e:	d003      	beq.n	800bf98 <__mcmp+0x2c>
 800bf90:	d305      	bcc.n	800bf9e <__mcmp+0x32>
 800bf92:	2201      	movs	r2, #1
 800bf94:	4610      	mov	r0, r2
 800bf96:	bd30      	pop	{r4, r5, pc}
 800bf98:	4283      	cmp	r3, r0
 800bf9a:	d3f3      	bcc.n	800bf84 <__mcmp+0x18>
 800bf9c:	e7fa      	b.n	800bf94 <__mcmp+0x28>
 800bf9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa2:	e7f7      	b.n	800bf94 <__mcmp+0x28>

0800bfa4 <__mdiff>:
 800bfa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa8:	460c      	mov	r4, r1
 800bfaa:	4606      	mov	r6, r0
 800bfac:	4611      	mov	r1, r2
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4690      	mov	r8, r2
 800bfb2:	f7ff ffdb 	bl	800bf6c <__mcmp>
 800bfb6:	1e05      	subs	r5, r0, #0
 800bfb8:	d110      	bne.n	800bfdc <__mdiff+0x38>
 800bfba:	4629      	mov	r1, r5
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f7ff fd53 	bl	800ba68 <_Balloc>
 800bfc2:	b930      	cbnz	r0, 800bfd2 <__mdiff+0x2e>
 800bfc4:	4b3a      	ldr	r3, [pc, #232]	; (800c0b0 <__mdiff+0x10c>)
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	f240 2132 	movw	r1, #562	; 0x232
 800bfcc:	4839      	ldr	r0, [pc, #228]	; (800c0b4 <__mdiff+0x110>)
 800bfce:	f000 fa95 	bl	800c4fc <__assert_func>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfdc:	bfa4      	itt	ge
 800bfde:	4643      	movge	r3, r8
 800bfe0:	46a0      	movge	r8, r4
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bfe8:	bfa6      	itte	ge
 800bfea:	461c      	movge	r4, r3
 800bfec:	2500      	movge	r5, #0
 800bfee:	2501      	movlt	r5, #1
 800bff0:	f7ff fd3a 	bl	800ba68 <_Balloc>
 800bff4:	b920      	cbnz	r0, 800c000 <__mdiff+0x5c>
 800bff6:	4b2e      	ldr	r3, [pc, #184]	; (800c0b0 <__mdiff+0x10c>)
 800bff8:	4602      	mov	r2, r0
 800bffa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bffe:	e7e5      	b.n	800bfcc <__mdiff+0x28>
 800c000:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c004:	6926      	ldr	r6, [r4, #16]
 800c006:	60c5      	str	r5, [r0, #12]
 800c008:	f104 0914 	add.w	r9, r4, #20
 800c00c:	f108 0514 	add.w	r5, r8, #20
 800c010:	f100 0e14 	add.w	lr, r0, #20
 800c014:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c018:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c01c:	f108 0210 	add.w	r2, r8, #16
 800c020:	46f2      	mov	sl, lr
 800c022:	2100      	movs	r1, #0
 800c024:	f859 3b04 	ldr.w	r3, [r9], #4
 800c028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c02c:	fa1f f883 	uxth.w	r8, r3
 800c030:	fa11 f18b 	uxtah	r1, r1, fp
 800c034:	0c1b      	lsrs	r3, r3, #16
 800c036:	eba1 0808 	sub.w	r8, r1, r8
 800c03a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c03e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c042:	fa1f f888 	uxth.w	r8, r8
 800c046:	1419      	asrs	r1, r3, #16
 800c048:	454e      	cmp	r6, r9
 800c04a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c04e:	f84a 3b04 	str.w	r3, [sl], #4
 800c052:	d8e7      	bhi.n	800c024 <__mdiff+0x80>
 800c054:	1b33      	subs	r3, r6, r4
 800c056:	3b15      	subs	r3, #21
 800c058:	f023 0303 	bic.w	r3, r3, #3
 800c05c:	3304      	adds	r3, #4
 800c05e:	3415      	adds	r4, #21
 800c060:	42a6      	cmp	r6, r4
 800c062:	bf38      	it	cc
 800c064:	2304      	movcc	r3, #4
 800c066:	441d      	add	r5, r3
 800c068:	4473      	add	r3, lr
 800c06a:	469e      	mov	lr, r3
 800c06c:	462e      	mov	r6, r5
 800c06e:	4566      	cmp	r6, ip
 800c070:	d30e      	bcc.n	800c090 <__mdiff+0xec>
 800c072:	f10c 0203 	add.w	r2, ip, #3
 800c076:	1b52      	subs	r2, r2, r5
 800c078:	f022 0203 	bic.w	r2, r2, #3
 800c07c:	3d03      	subs	r5, #3
 800c07e:	45ac      	cmp	ip, r5
 800c080:	bf38      	it	cc
 800c082:	2200      	movcc	r2, #0
 800c084:	441a      	add	r2, r3
 800c086:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c08a:	b17b      	cbz	r3, 800c0ac <__mdiff+0x108>
 800c08c:	6107      	str	r7, [r0, #16]
 800c08e:	e7a3      	b.n	800bfd8 <__mdiff+0x34>
 800c090:	f856 8b04 	ldr.w	r8, [r6], #4
 800c094:	fa11 f288 	uxtah	r2, r1, r8
 800c098:	1414      	asrs	r4, r2, #16
 800c09a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c09e:	b292      	uxth	r2, r2
 800c0a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0a4:	f84e 2b04 	str.w	r2, [lr], #4
 800c0a8:	1421      	asrs	r1, r4, #16
 800c0aa:	e7e0      	b.n	800c06e <__mdiff+0xca>
 800c0ac:	3f01      	subs	r7, #1
 800c0ae:	e7ea      	b.n	800c086 <__mdiff+0xe2>
 800c0b0:	0800cbff 	.word	0x0800cbff
 800c0b4:	0800cc70 	.word	0x0800cc70

0800c0b8 <__d2b>:
 800c0b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0bc:	4689      	mov	r9, r1
 800c0be:	2101      	movs	r1, #1
 800c0c0:	ec57 6b10 	vmov	r6, r7, d0
 800c0c4:	4690      	mov	r8, r2
 800c0c6:	f7ff fccf 	bl	800ba68 <_Balloc>
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	b930      	cbnz	r0, 800c0dc <__d2b+0x24>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	4b25      	ldr	r3, [pc, #148]	; (800c168 <__d2b+0xb0>)
 800c0d2:	4826      	ldr	r0, [pc, #152]	; (800c16c <__d2b+0xb4>)
 800c0d4:	f240 310a 	movw	r1, #778	; 0x30a
 800c0d8:	f000 fa10 	bl	800c4fc <__assert_func>
 800c0dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0e4:	bb35      	cbnz	r5, 800c134 <__d2b+0x7c>
 800c0e6:	2e00      	cmp	r6, #0
 800c0e8:	9301      	str	r3, [sp, #4]
 800c0ea:	d028      	beq.n	800c13e <__d2b+0x86>
 800c0ec:	4668      	mov	r0, sp
 800c0ee:	9600      	str	r6, [sp, #0]
 800c0f0:	f7ff fd82 	bl	800bbf8 <__lo0bits>
 800c0f4:	9900      	ldr	r1, [sp, #0]
 800c0f6:	b300      	cbz	r0, 800c13a <__d2b+0x82>
 800c0f8:	9a01      	ldr	r2, [sp, #4]
 800c0fa:	f1c0 0320 	rsb	r3, r0, #32
 800c0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c102:	430b      	orrs	r3, r1
 800c104:	40c2      	lsrs	r2, r0
 800c106:	6163      	str	r3, [r4, #20]
 800c108:	9201      	str	r2, [sp, #4]
 800c10a:	9b01      	ldr	r3, [sp, #4]
 800c10c:	61a3      	str	r3, [r4, #24]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	bf14      	ite	ne
 800c112:	2202      	movne	r2, #2
 800c114:	2201      	moveq	r2, #1
 800c116:	6122      	str	r2, [r4, #16]
 800c118:	b1d5      	cbz	r5, 800c150 <__d2b+0x98>
 800c11a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c11e:	4405      	add	r5, r0
 800c120:	f8c9 5000 	str.w	r5, [r9]
 800c124:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c128:	f8c8 0000 	str.w	r0, [r8]
 800c12c:	4620      	mov	r0, r4
 800c12e:	b003      	add	sp, #12
 800c130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c138:	e7d5      	b.n	800c0e6 <__d2b+0x2e>
 800c13a:	6161      	str	r1, [r4, #20]
 800c13c:	e7e5      	b.n	800c10a <__d2b+0x52>
 800c13e:	a801      	add	r0, sp, #4
 800c140:	f7ff fd5a 	bl	800bbf8 <__lo0bits>
 800c144:	9b01      	ldr	r3, [sp, #4]
 800c146:	6163      	str	r3, [r4, #20]
 800c148:	2201      	movs	r2, #1
 800c14a:	6122      	str	r2, [r4, #16]
 800c14c:	3020      	adds	r0, #32
 800c14e:	e7e3      	b.n	800c118 <__d2b+0x60>
 800c150:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c154:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c158:	f8c9 0000 	str.w	r0, [r9]
 800c15c:	6918      	ldr	r0, [r3, #16]
 800c15e:	f7ff fd2b 	bl	800bbb8 <__hi0bits>
 800c162:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c166:	e7df      	b.n	800c128 <__d2b+0x70>
 800c168:	0800cbff 	.word	0x0800cbff
 800c16c:	0800cc70 	.word	0x0800cc70

0800c170 <_calloc_r>:
 800c170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c172:	fba1 2402 	umull	r2, r4, r1, r2
 800c176:	b94c      	cbnz	r4, 800c18c <_calloc_r+0x1c>
 800c178:	4611      	mov	r1, r2
 800c17a:	9201      	str	r2, [sp, #4]
 800c17c:	f7fd fd78 	bl	8009c70 <_malloc_r>
 800c180:	9a01      	ldr	r2, [sp, #4]
 800c182:	4605      	mov	r5, r0
 800c184:	b930      	cbnz	r0, 800c194 <_calloc_r+0x24>
 800c186:	4628      	mov	r0, r5
 800c188:	b003      	add	sp, #12
 800c18a:	bd30      	pop	{r4, r5, pc}
 800c18c:	220c      	movs	r2, #12
 800c18e:	6002      	str	r2, [r0, #0]
 800c190:	2500      	movs	r5, #0
 800c192:	e7f8      	b.n	800c186 <_calloc_r+0x16>
 800c194:	4621      	mov	r1, r4
 800c196:	f7fd fcf7 	bl	8009b88 <memset>
 800c19a:	e7f4      	b.n	800c186 <_calloc_r+0x16>

0800c19c <__sfputc_r>:
 800c19c:	6893      	ldr	r3, [r2, #8]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	b410      	push	{r4}
 800c1a4:	6093      	str	r3, [r2, #8]
 800c1a6:	da08      	bge.n	800c1ba <__sfputc_r+0x1e>
 800c1a8:	6994      	ldr	r4, [r2, #24]
 800c1aa:	42a3      	cmp	r3, r4
 800c1ac:	db01      	blt.n	800c1b2 <__sfputc_r+0x16>
 800c1ae:	290a      	cmp	r1, #10
 800c1b0:	d103      	bne.n	800c1ba <__sfputc_r+0x1e>
 800c1b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1b6:	f7fe badf 	b.w	800a778 <__swbuf_r>
 800c1ba:	6813      	ldr	r3, [r2, #0]
 800c1bc:	1c58      	adds	r0, r3, #1
 800c1be:	6010      	str	r0, [r2, #0]
 800c1c0:	7019      	strb	r1, [r3, #0]
 800c1c2:	4608      	mov	r0, r1
 800c1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <__sfputs_r>:
 800c1ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1cc:	4606      	mov	r6, r0
 800c1ce:	460f      	mov	r7, r1
 800c1d0:	4614      	mov	r4, r2
 800c1d2:	18d5      	adds	r5, r2, r3
 800c1d4:	42ac      	cmp	r4, r5
 800c1d6:	d101      	bne.n	800c1dc <__sfputs_r+0x12>
 800c1d8:	2000      	movs	r0, #0
 800c1da:	e007      	b.n	800c1ec <__sfputs_r+0x22>
 800c1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1e0:	463a      	mov	r2, r7
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f7ff ffda 	bl	800c19c <__sfputc_r>
 800c1e8:	1c43      	adds	r3, r0, #1
 800c1ea:	d1f3      	bne.n	800c1d4 <__sfputs_r+0xa>
 800c1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1f0 <_vfiprintf_r>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	460d      	mov	r5, r1
 800c1f6:	b09d      	sub	sp, #116	; 0x74
 800c1f8:	4614      	mov	r4, r2
 800c1fa:	4698      	mov	r8, r3
 800c1fc:	4606      	mov	r6, r0
 800c1fe:	b118      	cbz	r0, 800c208 <_vfiprintf_r+0x18>
 800c200:	6983      	ldr	r3, [r0, #24]
 800c202:	b90b      	cbnz	r3, 800c208 <_vfiprintf_r+0x18>
 800c204:	f7ff fb0c 	bl	800b820 <__sinit>
 800c208:	4b89      	ldr	r3, [pc, #548]	; (800c430 <_vfiprintf_r+0x240>)
 800c20a:	429d      	cmp	r5, r3
 800c20c:	d11b      	bne.n	800c246 <_vfiprintf_r+0x56>
 800c20e:	6875      	ldr	r5, [r6, #4]
 800c210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c212:	07d9      	lsls	r1, r3, #31
 800c214:	d405      	bmi.n	800c222 <_vfiprintf_r+0x32>
 800c216:	89ab      	ldrh	r3, [r5, #12]
 800c218:	059a      	lsls	r2, r3, #22
 800c21a:	d402      	bmi.n	800c222 <_vfiprintf_r+0x32>
 800c21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c21e:	f7ff fba2 	bl	800b966 <__retarget_lock_acquire_recursive>
 800c222:	89ab      	ldrh	r3, [r5, #12]
 800c224:	071b      	lsls	r3, r3, #28
 800c226:	d501      	bpl.n	800c22c <_vfiprintf_r+0x3c>
 800c228:	692b      	ldr	r3, [r5, #16]
 800c22a:	b9eb      	cbnz	r3, 800c268 <_vfiprintf_r+0x78>
 800c22c:	4629      	mov	r1, r5
 800c22e:	4630      	mov	r0, r6
 800c230:	f7fe faf4 	bl	800a81c <__swsetup_r>
 800c234:	b1c0      	cbz	r0, 800c268 <_vfiprintf_r+0x78>
 800c236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c238:	07dc      	lsls	r4, r3, #31
 800c23a:	d50e      	bpl.n	800c25a <_vfiprintf_r+0x6a>
 800c23c:	f04f 30ff 	mov.w	r0, #4294967295
 800c240:	b01d      	add	sp, #116	; 0x74
 800c242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c246:	4b7b      	ldr	r3, [pc, #492]	; (800c434 <_vfiprintf_r+0x244>)
 800c248:	429d      	cmp	r5, r3
 800c24a:	d101      	bne.n	800c250 <_vfiprintf_r+0x60>
 800c24c:	68b5      	ldr	r5, [r6, #8]
 800c24e:	e7df      	b.n	800c210 <_vfiprintf_r+0x20>
 800c250:	4b79      	ldr	r3, [pc, #484]	; (800c438 <_vfiprintf_r+0x248>)
 800c252:	429d      	cmp	r5, r3
 800c254:	bf08      	it	eq
 800c256:	68f5      	ldreq	r5, [r6, #12]
 800c258:	e7da      	b.n	800c210 <_vfiprintf_r+0x20>
 800c25a:	89ab      	ldrh	r3, [r5, #12]
 800c25c:	0598      	lsls	r0, r3, #22
 800c25e:	d4ed      	bmi.n	800c23c <_vfiprintf_r+0x4c>
 800c260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c262:	f7ff fb81 	bl	800b968 <__retarget_lock_release_recursive>
 800c266:	e7e9      	b.n	800c23c <_vfiprintf_r+0x4c>
 800c268:	2300      	movs	r3, #0
 800c26a:	9309      	str	r3, [sp, #36]	; 0x24
 800c26c:	2320      	movs	r3, #32
 800c26e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c272:	f8cd 800c 	str.w	r8, [sp, #12]
 800c276:	2330      	movs	r3, #48	; 0x30
 800c278:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c43c <_vfiprintf_r+0x24c>
 800c27c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c280:	f04f 0901 	mov.w	r9, #1
 800c284:	4623      	mov	r3, r4
 800c286:	469a      	mov	sl, r3
 800c288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c28c:	b10a      	cbz	r2, 800c292 <_vfiprintf_r+0xa2>
 800c28e:	2a25      	cmp	r2, #37	; 0x25
 800c290:	d1f9      	bne.n	800c286 <_vfiprintf_r+0x96>
 800c292:	ebba 0b04 	subs.w	fp, sl, r4
 800c296:	d00b      	beq.n	800c2b0 <_vfiprintf_r+0xc0>
 800c298:	465b      	mov	r3, fp
 800c29a:	4622      	mov	r2, r4
 800c29c:	4629      	mov	r1, r5
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f7ff ff93 	bl	800c1ca <__sfputs_r>
 800c2a4:	3001      	adds	r0, #1
 800c2a6:	f000 80aa 	beq.w	800c3fe <_vfiprintf_r+0x20e>
 800c2aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2ac:	445a      	add	r2, fp
 800c2ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c2b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f000 80a2 	beq.w	800c3fe <_vfiprintf_r+0x20e>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2c4:	f10a 0a01 	add.w	sl, sl, #1
 800c2c8:	9304      	str	r3, [sp, #16]
 800c2ca:	9307      	str	r3, [sp, #28]
 800c2cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2d0:	931a      	str	r3, [sp, #104]	; 0x68
 800c2d2:	4654      	mov	r4, sl
 800c2d4:	2205      	movs	r2, #5
 800c2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2da:	4858      	ldr	r0, [pc, #352]	; (800c43c <_vfiprintf_r+0x24c>)
 800c2dc:	f7f3 ff98 	bl	8000210 <memchr>
 800c2e0:	9a04      	ldr	r2, [sp, #16]
 800c2e2:	b9d8      	cbnz	r0, 800c31c <_vfiprintf_r+0x12c>
 800c2e4:	06d1      	lsls	r1, r2, #27
 800c2e6:	bf44      	itt	mi
 800c2e8:	2320      	movmi	r3, #32
 800c2ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ee:	0713      	lsls	r3, r2, #28
 800c2f0:	bf44      	itt	mi
 800c2f2:	232b      	movmi	r3, #43	; 0x2b
 800c2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c2fe:	d015      	beq.n	800c32c <_vfiprintf_r+0x13c>
 800c300:	9a07      	ldr	r2, [sp, #28]
 800c302:	4654      	mov	r4, sl
 800c304:	2000      	movs	r0, #0
 800c306:	f04f 0c0a 	mov.w	ip, #10
 800c30a:	4621      	mov	r1, r4
 800c30c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c310:	3b30      	subs	r3, #48	; 0x30
 800c312:	2b09      	cmp	r3, #9
 800c314:	d94e      	bls.n	800c3b4 <_vfiprintf_r+0x1c4>
 800c316:	b1b0      	cbz	r0, 800c346 <_vfiprintf_r+0x156>
 800c318:	9207      	str	r2, [sp, #28]
 800c31a:	e014      	b.n	800c346 <_vfiprintf_r+0x156>
 800c31c:	eba0 0308 	sub.w	r3, r0, r8
 800c320:	fa09 f303 	lsl.w	r3, r9, r3
 800c324:	4313      	orrs	r3, r2
 800c326:	9304      	str	r3, [sp, #16]
 800c328:	46a2      	mov	sl, r4
 800c32a:	e7d2      	b.n	800c2d2 <_vfiprintf_r+0xe2>
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	1d19      	adds	r1, r3, #4
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	9103      	str	r1, [sp, #12]
 800c334:	2b00      	cmp	r3, #0
 800c336:	bfbb      	ittet	lt
 800c338:	425b      	neglt	r3, r3
 800c33a:	f042 0202 	orrlt.w	r2, r2, #2
 800c33e:	9307      	strge	r3, [sp, #28]
 800c340:	9307      	strlt	r3, [sp, #28]
 800c342:	bfb8      	it	lt
 800c344:	9204      	strlt	r2, [sp, #16]
 800c346:	7823      	ldrb	r3, [r4, #0]
 800c348:	2b2e      	cmp	r3, #46	; 0x2e
 800c34a:	d10c      	bne.n	800c366 <_vfiprintf_r+0x176>
 800c34c:	7863      	ldrb	r3, [r4, #1]
 800c34e:	2b2a      	cmp	r3, #42	; 0x2a
 800c350:	d135      	bne.n	800c3be <_vfiprintf_r+0x1ce>
 800c352:	9b03      	ldr	r3, [sp, #12]
 800c354:	1d1a      	adds	r2, r3, #4
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	9203      	str	r2, [sp, #12]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	bfb8      	it	lt
 800c35e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c362:	3402      	adds	r4, #2
 800c364:	9305      	str	r3, [sp, #20]
 800c366:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c44c <_vfiprintf_r+0x25c>
 800c36a:	7821      	ldrb	r1, [r4, #0]
 800c36c:	2203      	movs	r2, #3
 800c36e:	4650      	mov	r0, sl
 800c370:	f7f3 ff4e 	bl	8000210 <memchr>
 800c374:	b140      	cbz	r0, 800c388 <_vfiprintf_r+0x198>
 800c376:	2340      	movs	r3, #64	; 0x40
 800c378:	eba0 000a 	sub.w	r0, r0, sl
 800c37c:	fa03 f000 	lsl.w	r0, r3, r0
 800c380:	9b04      	ldr	r3, [sp, #16]
 800c382:	4303      	orrs	r3, r0
 800c384:	3401      	adds	r4, #1
 800c386:	9304      	str	r3, [sp, #16]
 800c388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c38c:	482c      	ldr	r0, [pc, #176]	; (800c440 <_vfiprintf_r+0x250>)
 800c38e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c392:	2206      	movs	r2, #6
 800c394:	f7f3 ff3c 	bl	8000210 <memchr>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d03f      	beq.n	800c41c <_vfiprintf_r+0x22c>
 800c39c:	4b29      	ldr	r3, [pc, #164]	; (800c444 <_vfiprintf_r+0x254>)
 800c39e:	bb1b      	cbnz	r3, 800c3e8 <_vfiprintf_r+0x1f8>
 800c3a0:	9b03      	ldr	r3, [sp, #12]
 800c3a2:	3307      	adds	r3, #7
 800c3a4:	f023 0307 	bic.w	r3, r3, #7
 800c3a8:	3308      	adds	r3, #8
 800c3aa:	9303      	str	r3, [sp, #12]
 800c3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ae:	443b      	add	r3, r7
 800c3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b2:	e767      	b.n	800c284 <_vfiprintf_r+0x94>
 800c3b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3b8:	460c      	mov	r4, r1
 800c3ba:	2001      	movs	r0, #1
 800c3bc:	e7a5      	b.n	800c30a <_vfiprintf_r+0x11a>
 800c3be:	2300      	movs	r3, #0
 800c3c0:	3401      	adds	r4, #1
 800c3c2:	9305      	str	r3, [sp, #20]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	f04f 0c0a 	mov.w	ip, #10
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3d0:	3a30      	subs	r2, #48	; 0x30
 800c3d2:	2a09      	cmp	r2, #9
 800c3d4:	d903      	bls.n	800c3de <_vfiprintf_r+0x1ee>
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d0c5      	beq.n	800c366 <_vfiprintf_r+0x176>
 800c3da:	9105      	str	r1, [sp, #20]
 800c3dc:	e7c3      	b.n	800c366 <_vfiprintf_r+0x176>
 800c3de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e7f0      	b.n	800c3ca <_vfiprintf_r+0x1da>
 800c3e8:	ab03      	add	r3, sp, #12
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	462a      	mov	r2, r5
 800c3ee:	4b16      	ldr	r3, [pc, #88]	; (800c448 <_vfiprintf_r+0x258>)
 800c3f0:	a904      	add	r1, sp, #16
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	f7fd fd50 	bl	8009e98 <_printf_float>
 800c3f8:	4607      	mov	r7, r0
 800c3fa:	1c78      	adds	r0, r7, #1
 800c3fc:	d1d6      	bne.n	800c3ac <_vfiprintf_r+0x1bc>
 800c3fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c400:	07d9      	lsls	r1, r3, #31
 800c402:	d405      	bmi.n	800c410 <_vfiprintf_r+0x220>
 800c404:	89ab      	ldrh	r3, [r5, #12]
 800c406:	059a      	lsls	r2, r3, #22
 800c408:	d402      	bmi.n	800c410 <_vfiprintf_r+0x220>
 800c40a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c40c:	f7ff faac 	bl	800b968 <__retarget_lock_release_recursive>
 800c410:	89ab      	ldrh	r3, [r5, #12]
 800c412:	065b      	lsls	r3, r3, #25
 800c414:	f53f af12 	bmi.w	800c23c <_vfiprintf_r+0x4c>
 800c418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c41a:	e711      	b.n	800c240 <_vfiprintf_r+0x50>
 800c41c:	ab03      	add	r3, sp, #12
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	462a      	mov	r2, r5
 800c422:	4b09      	ldr	r3, [pc, #36]	; (800c448 <_vfiprintf_r+0x258>)
 800c424:	a904      	add	r1, sp, #16
 800c426:	4630      	mov	r0, r6
 800c428:	f7fd ffda 	bl	800a3e0 <_printf_i>
 800c42c:	e7e4      	b.n	800c3f8 <_vfiprintf_r+0x208>
 800c42e:	bf00      	nop
 800c430:	0800cc30 	.word	0x0800cc30
 800c434:	0800cc50 	.word	0x0800cc50
 800c438:	0800cc10 	.word	0x0800cc10
 800c43c:	0800cdcc 	.word	0x0800cdcc
 800c440:	0800cdd6 	.word	0x0800cdd6
 800c444:	08009e99 	.word	0x08009e99
 800c448:	0800c1cb 	.word	0x0800c1cb
 800c44c:	0800cdd2 	.word	0x0800cdd2

0800c450 <__sread>:
 800c450:	b510      	push	{r4, lr}
 800c452:	460c      	mov	r4, r1
 800c454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c458:	f000 f8d6 	bl	800c608 <_read_r>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	bfab      	itete	ge
 800c460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c462:	89a3      	ldrhlt	r3, [r4, #12]
 800c464:	181b      	addge	r3, r3, r0
 800c466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c46a:	bfac      	ite	ge
 800c46c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c46e:	81a3      	strhlt	r3, [r4, #12]
 800c470:	bd10      	pop	{r4, pc}

0800c472 <__swrite>:
 800c472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c476:	461f      	mov	r7, r3
 800c478:	898b      	ldrh	r3, [r1, #12]
 800c47a:	05db      	lsls	r3, r3, #23
 800c47c:	4605      	mov	r5, r0
 800c47e:	460c      	mov	r4, r1
 800c480:	4616      	mov	r6, r2
 800c482:	d505      	bpl.n	800c490 <__swrite+0x1e>
 800c484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c488:	2302      	movs	r3, #2
 800c48a:	2200      	movs	r2, #0
 800c48c:	f000 f898 	bl	800c5c0 <_lseek_r>
 800c490:	89a3      	ldrh	r3, [r4, #12]
 800c492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c49a:	81a3      	strh	r3, [r4, #12]
 800c49c:	4632      	mov	r2, r6
 800c49e:	463b      	mov	r3, r7
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a6:	f000 b817 	b.w	800c4d8 <_write_r>

0800c4aa <__sseek>:
 800c4aa:	b510      	push	{r4, lr}
 800c4ac:	460c      	mov	r4, r1
 800c4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b2:	f000 f885 	bl	800c5c0 <_lseek_r>
 800c4b6:	1c43      	adds	r3, r0, #1
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	bf15      	itete	ne
 800c4bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4c6:	81a3      	strheq	r3, [r4, #12]
 800c4c8:	bf18      	it	ne
 800c4ca:	81a3      	strhne	r3, [r4, #12]
 800c4cc:	bd10      	pop	{r4, pc}

0800c4ce <__sclose>:
 800c4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d2:	f000 b831 	b.w	800c538 <_close_r>
	...

0800c4d8 <_write_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	4d07      	ldr	r5, [pc, #28]	; (800c4f8 <_write_r+0x20>)
 800c4dc:	4604      	mov	r4, r0
 800c4de:	4608      	mov	r0, r1
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	602a      	str	r2, [r5, #0]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	f7f7 f8a0 	bl	800362c <_write>
 800c4ec:	1c43      	adds	r3, r0, #1
 800c4ee:	d102      	bne.n	800c4f6 <_write_r+0x1e>
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	b103      	cbz	r3, 800c4f6 <_write_r+0x1e>
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	bd38      	pop	{r3, r4, r5, pc}
 800c4f8:	2000415c 	.word	0x2000415c

0800c4fc <__assert_func>:
 800c4fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4fe:	4614      	mov	r4, r2
 800c500:	461a      	mov	r2, r3
 800c502:	4b09      	ldr	r3, [pc, #36]	; (800c528 <__assert_func+0x2c>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4605      	mov	r5, r0
 800c508:	68d8      	ldr	r0, [r3, #12]
 800c50a:	b14c      	cbz	r4, 800c520 <__assert_func+0x24>
 800c50c:	4b07      	ldr	r3, [pc, #28]	; (800c52c <__assert_func+0x30>)
 800c50e:	9100      	str	r1, [sp, #0]
 800c510:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c514:	4906      	ldr	r1, [pc, #24]	; (800c530 <__assert_func+0x34>)
 800c516:	462b      	mov	r3, r5
 800c518:	f000 f81e 	bl	800c558 <fiprintf>
 800c51c:	f000 f893 	bl	800c646 <abort>
 800c520:	4b04      	ldr	r3, [pc, #16]	; (800c534 <__assert_func+0x38>)
 800c522:	461c      	mov	r4, r3
 800c524:	e7f3      	b.n	800c50e <__assert_func+0x12>
 800c526:	bf00      	nop
 800c528:	20000024 	.word	0x20000024
 800c52c:	0800cddd 	.word	0x0800cddd
 800c530:	0800cdea 	.word	0x0800cdea
 800c534:	0800ce18 	.word	0x0800ce18

0800c538 <_close_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	4d06      	ldr	r5, [pc, #24]	; (800c554 <_close_r+0x1c>)
 800c53c:	2300      	movs	r3, #0
 800c53e:	4604      	mov	r4, r0
 800c540:	4608      	mov	r0, r1
 800c542:	602b      	str	r3, [r5, #0]
 800c544:	f7f7 f880 	bl	8003648 <_close>
 800c548:	1c43      	adds	r3, r0, #1
 800c54a:	d102      	bne.n	800c552 <_close_r+0x1a>
 800c54c:	682b      	ldr	r3, [r5, #0]
 800c54e:	b103      	cbz	r3, 800c552 <_close_r+0x1a>
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	bd38      	pop	{r3, r4, r5, pc}
 800c554:	2000415c 	.word	0x2000415c

0800c558 <fiprintf>:
 800c558:	b40e      	push	{r1, r2, r3}
 800c55a:	b503      	push	{r0, r1, lr}
 800c55c:	4601      	mov	r1, r0
 800c55e:	ab03      	add	r3, sp, #12
 800c560:	4805      	ldr	r0, [pc, #20]	; (800c578 <fiprintf+0x20>)
 800c562:	f853 2b04 	ldr.w	r2, [r3], #4
 800c566:	6800      	ldr	r0, [r0, #0]
 800c568:	9301      	str	r3, [sp, #4]
 800c56a:	f7ff fe41 	bl	800c1f0 <_vfiprintf_r>
 800c56e:	b002      	add	sp, #8
 800c570:	f85d eb04 	ldr.w	lr, [sp], #4
 800c574:	b003      	add	sp, #12
 800c576:	4770      	bx	lr
 800c578:	20000024 	.word	0x20000024

0800c57c <_fstat_r>:
 800c57c:	b538      	push	{r3, r4, r5, lr}
 800c57e:	4d07      	ldr	r5, [pc, #28]	; (800c59c <_fstat_r+0x20>)
 800c580:	2300      	movs	r3, #0
 800c582:	4604      	mov	r4, r0
 800c584:	4608      	mov	r0, r1
 800c586:	4611      	mov	r1, r2
 800c588:	602b      	str	r3, [r5, #0]
 800c58a:	f7f7 f861 	bl	8003650 <_fstat>
 800c58e:	1c43      	adds	r3, r0, #1
 800c590:	d102      	bne.n	800c598 <_fstat_r+0x1c>
 800c592:	682b      	ldr	r3, [r5, #0]
 800c594:	b103      	cbz	r3, 800c598 <_fstat_r+0x1c>
 800c596:	6023      	str	r3, [r4, #0]
 800c598:	bd38      	pop	{r3, r4, r5, pc}
 800c59a:	bf00      	nop
 800c59c:	2000415c 	.word	0x2000415c

0800c5a0 <_isatty_r>:
 800c5a0:	b538      	push	{r3, r4, r5, lr}
 800c5a2:	4d06      	ldr	r5, [pc, #24]	; (800c5bc <_isatty_r+0x1c>)
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	4608      	mov	r0, r1
 800c5aa:	602b      	str	r3, [r5, #0]
 800c5ac:	f7f7 f856 	bl	800365c <_isatty>
 800c5b0:	1c43      	adds	r3, r0, #1
 800c5b2:	d102      	bne.n	800c5ba <_isatty_r+0x1a>
 800c5b4:	682b      	ldr	r3, [r5, #0]
 800c5b6:	b103      	cbz	r3, 800c5ba <_isatty_r+0x1a>
 800c5b8:	6023      	str	r3, [r4, #0]
 800c5ba:	bd38      	pop	{r3, r4, r5, pc}
 800c5bc:	2000415c 	.word	0x2000415c

0800c5c0 <_lseek_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	4d07      	ldr	r5, [pc, #28]	; (800c5e0 <_lseek_r+0x20>)
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	4608      	mov	r0, r1
 800c5c8:	4611      	mov	r1, r2
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	602a      	str	r2, [r5, #0]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	f7f7 f846 	bl	8003660 <_lseek>
 800c5d4:	1c43      	adds	r3, r0, #1
 800c5d6:	d102      	bne.n	800c5de <_lseek_r+0x1e>
 800c5d8:	682b      	ldr	r3, [r5, #0]
 800c5da:	b103      	cbz	r3, 800c5de <_lseek_r+0x1e>
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	bd38      	pop	{r3, r4, r5, pc}
 800c5e0:	2000415c 	.word	0x2000415c

0800c5e4 <__ascii_mbtowc>:
 800c5e4:	b082      	sub	sp, #8
 800c5e6:	b901      	cbnz	r1, 800c5ea <__ascii_mbtowc+0x6>
 800c5e8:	a901      	add	r1, sp, #4
 800c5ea:	b142      	cbz	r2, 800c5fe <__ascii_mbtowc+0x1a>
 800c5ec:	b14b      	cbz	r3, 800c602 <__ascii_mbtowc+0x1e>
 800c5ee:	7813      	ldrb	r3, [r2, #0]
 800c5f0:	600b      	str	r3, [r1, #0]
 800c5f2:	7812      	ldrb	r2, [r2, #0]
 800c5f4:	1e10      	subs	r0, r2, #0
 800c5f6:	bf18      	it	ne
 800c5f8:	2001      	movne	r0, #1
 800c5fa:	b002      	add	sp, #8
 800c5fc:	4770      	bx	lr
 800c5fe:	4610      	mov	r0, r2
 800c600:	e7fb      	b.n	800c5fa <__ascii_mbtowc+0x16>
 800c602:	f06f 0001 	mvn.w	r0, #1
 800c606:	e7f8      	b.n	800c5fa <__ascii_mbtowc+0x16>

0800c608 <_read_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4d07      	ldr	r5, [pc, #28]	; (800c628 <_read_r+0x20>)
 800c60c:	4604      	mov	r4, r0
 800c60e:	4608      	mov	r0, r1
 800c610:	4611      	mov	r1, r2
 800c612:	2200      	movs	r2, #0
 800c614:	602a      	str	r2, [r5, #0]
 800c616:	461a      	mov	r2, r3
 800c618:	f7f6 fffa 	bl	8003610 <_read>
 800c61c:	1c43      	adds	r3, r0, #1
 800c61e:	d102      	bne.n	800c626 <_read_r+0x1e>
 800c620:	682b      	ldr	r3, [r5, #0]
 800c622:	b103      	cbz	r3, 800c626 <_read_r+0x1e>
 800c624:	6023      	str	r3, [r4, #0]
 800c626:	bd38      	pop	{r3, r4, r5, pc}
 800c628:	2000415c 	.word	0x2000415c

0800c62c <__ascii_wctomb>:
 800c62c:	b149      	cbz	r1, 800c642 <__ascii_wctomb+0x16>
 800c62e:	2aff      	cmp	r2, #255	; 0xff
 800c630:	bf85      	ittet	hi
 800c632:	238a      	movhi	r3, #138	; 0x8a
 800c634:	6003      	strhi	r3, [r0, #0]
 800c636:	700a      	strbls	r2, [r1, #0]
 800c638:	f04f 30ff 	movhi.w	r0, #4294967295
 800c63c:	bf98      	it	ls
 800c63e:	2001      	movls	r0, #1
 800c640:	4770      	bx	lr
 800c642:	4608      	mov	r0, r1
 800c644:	4770      	bx	lr

0800c646 <abort>:
 800c646:	b508      	push	{r3, lr}
 800c648:	2006      	movs	r0, #6
 800c64a:	f000 f82b 	bl	800c6a4 <raise>
 800c64e:	2001      	movs	r0, #1
 800c650:	f7f6 ffd8 	bl	8003604 <_exit>

0800c654 <_raise_r>:
 800c654:	291f      	cmp	r1, #31
 800c656:	b538      	push	{r3, r4, r5, lr}
 800c658:	4604      	mov	r4, r0
 800c65a:	460d      	mov	r5, r1
 800c65c:	d904      	bls.n	800c668 <_raise_r+0x14>
 800c65e:	2316      	movs	r3, #22
 800c660:	6003      	str	r3, [r0, #0]
 800c662:	f04f 30ff 	mov.w	r0, #4294967295
 800c666:	bd38      	pop	{r3, r4, r5, pc}
 800c668:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c66a:	b112      	cbz	r2, 800c672 <_raise_r+0x1e>
 800c66c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c670:	b94b      	cbnz	r3, 800c686 <_raise_r+0x32>
 800c672:	4620      	mov	r0, r4
 800c674:	f000 f830 	bl	800c6d8 <_getpid_r>
 800c678:	462a      	mov	r2, r5
 800c67a:	4601      	mov	r1, r0
 800c67c:	4620      	mov	r0, r4
 800c67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c682:	f000 b817 	b.w	800c6b4 <_kill_r>
 800c686:	2b01      	cmp	r3, #1
 800c688:	d00a      	beq.n	800c6a0 <_raise_r+0x4c>
 800c68a:	1c59      	adds	r1, r3, #1
 800c68c:	d103      	bne.n	800c696 <_raise_r+0x42>
 800c68e:	2316      	movs	r3, #22
 800c690:	6003      	str	r3, [r0, #0]
 800c692:	2001      	movs	r0, #1
 800c694:	e7e7      	b.n	800c666 <_raise_r+0x12>
 800c696:	2400      	movs	r4, #0
 800c698:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c69c:	4628      	mov	r0, r5
 800c69e:	4798      	blx	r3
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	e7e0      	b.n	800c666 <_raise_r+0x12>

0800c6a4 <raise>:
 800c6a4:	4b02      	ldr	r3, [pc, #8]	; (800c6b0 <raise+0xc>)
 800c6a6:	4601      	mov	r1, r0
 800c6a8:	6818      	ldr	r0, [r3, #0]
 800c6aa:	f7ff bfd3 	b.w	800c654 <_raise_r>
 800c6ae:	bf00      	nop
 800c6b0:	20000024 	.word	0x20000024

0800c6b4 <_kill_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	4d07      	ldr	r5, [pc, #28]	; (800c6d4 <_kill_r+0x20>)
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	4608      	mov	r0, r1
 800c6be:	4611      	mov	r1, r2
 800c6c0:	602b      	str	r3, [r5, #0]
 800c6c2:	f7f6 ff97 	bl	80035f4 <_kill>
 800c6c6:	1c43      	adds	r3, r0, #1
 800c6c8:	d102      	bne.n	800c6d0 <_kill_r+0x1c>
 800c6ca:	682b      	ldr	r3, [r5, #0]
 800c6cc:	b103      	cbz	r3, 800c6d0 <_kill_r+0x1c>
 800c6ce:	6023      	str	r3, [r4, #0]
 800c6d0:	bd38      	pop	{r3, r4, r5, pc}
 800c6d2:	bf00      	nop
 800c6d4:	2000415c 	.word	0x2000415c

0800c6d8 <_getpid_r>:
 800c6d8:	f7f6 bf8a 	b.w	80035f0 <_getpid>

0800c6dc <_init>:
 800c6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6de:	bf00      	nop
 800c6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6e2:	bc08      	pop	{r3}
 800c6e4:	469e      	mov	lr, r3
 800c6e6:	4770      	bx	lr

0800c6e8 <_fini>:
 800c6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ea:	bf00      	nop
 800c6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ee:	bc08      	pop	{r3}
 800c6f0:	469e      	mov	lr, r3
 800c6f2:	4770      	bx	lr
