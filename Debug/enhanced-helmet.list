
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000121c  0800bdc0  0800bdc0  0001bdc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfdc  0800cfdc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfdc  0800cfdc  0001cfdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfe4  0800cfe4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfe4  0800cfe4  0001cfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfe8  0800cfe8  0001cfe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cfec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  200001f4  0800d1e0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cdc  0800d1e0  00020cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001378f  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b24  00000000  00000000  000339b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000364d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a073  00000000  00000000  00038558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171e3  00000000  00000000  000525cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098677  00000000  00000000  000697ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101e25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000568c  00000000  00000000  00101e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bda4 	.word	0x0800bda4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800bda4 	.word	0x0800bda4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <OV5462_write_i2c_reg>:
#include "OV5462.h"

uint8_t OV5462_write_i2c_reg(OV5462_t* ov5462, int addr, int data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	uint8_t buf[4];
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	121b      	asrs	r3, r3, #8
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	743b      	strb	r3, [r7, #16]
	buf[1] = (uint8_t)(addr & 0xFF); // lower addr byte
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	747b      	strb	r3, [r7, #17]
	buf[2] = data;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	74bb      	strb	r3, [r7, #18]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	f107 0210 	add.w	r2, r7, #16
 8000f44:	f04f 33ff 	mov.w	r3, #4294967295
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	2178      	movs	r1, #120	; 0x78
 8000f4e:	f002 fddd 	bl	8003b0c <HAL_I2C_Master_Transmit>
 8000f52:	4603      	mov	r3, r0
 8000f54:	75fb      	strb	r3, [r7, #23]

	if ( ret != HAL_OK ) {
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <OV5462_write_i2c_reg+0x44>
		return 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <OV5462_write_i2c_reg+0x46>
	}

	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <OV5462_write_i2c_regs>:

uint8_t OV5462_write_i2c_regs(OV5462_t* ov5462, const reg_value_pair regs[]) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
	const reg_value_pair* curr = regs;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef ret;

	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000f78:	e015      	b.n	8000fa6 <OV5462_write_i2c_regs+0x3c>
		ret = OV5462_write_i2c_reg(ov5462, curr->addr, curr->value);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	461a      	mov	r2, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffc8 	bl	8000f1c <OV5462_write_i2c_reg>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	72fb      	strb	r3, [r7, #11]
		// do we need a delay here?
		HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f001 ff6d 	bl	8002e70 <HAL_Delay>
		++curr;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	60fb      	str	r3, [r7, #12]

		if ( ret != HAL_OK ) {
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <OV5462_write_i2c_regs+0x3c>
			return 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00a      	b.n	8000fbc <OV5462_write_i2c_regs+0x52>
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d1e3      	bne.n	8000f7a <OV5462_write_i2c_regs+0x10>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	789b      	ldrb	r3, [r3, #2]
 8000fb6:	2bff      	cmp	r3, #255	; 0xff
 8000fb8:	d1df      	bne.n	8000f7a <OV5462_write_i2c_regs+0x10>
		}
	}

	return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <OV5462_read_i2c_reg>:

uint8_t OV5462_read_i2c_reg(OV5462_t* ov5462, int addr) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	uint8_t buf[2];
	buf[0] = (uint8_t)(addr >> 8);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	121b      	asrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t)(addr & 0xFF);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 2, HAL_MAX_DELAY);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2302      	movs	r3, #2
 8000fec:	2179      	movs	r1, #121	; 0x79
 8000fee:	f002 fd8d 	bl	8003b0c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 1, HAL_MAX_DELAY);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f107 020c 	add.w	r2, r7, #12
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2179      	movs	r1, #121	; 0x79
 8001004:	f002 fe80 	bl	8003d08 <HAL_I2C_Master_Receive>

	return buf[0];
 8001008:	7b3b      	ldrb	r3, [r7, #12]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <OV5462_write_spi_reg>:

void OV5462_write_spi_reg(OV5462_t* ov5462, uint8_t addr, uint8_t data) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
 8001020:	4613      	mov	r3, r2
 8001022:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <OV5462_write_spi_reg+0x5c>)
 800102a:	f002 fc11 	bl	8003850 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr | 0x80 };
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001034:	b2db      	uxtb	r3, r3
 8001036:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6858      	ldr	r0, [r3, #4]
 800103c:	f107 010c 	add.w	r1, r7, #12
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	2201      	movs	r2, #1
 8001044:	f004 f8d5 	bl	80051f2 <HAL_SPI_Transmit>
	buf[0] = data;
 8001048:	78bb      	ldrb	r3, [r7, #2]
 800104a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6858      	ldr	r0, [r3, #4]
 8001050:	f107 010c 	add.w	r1, r7, #12
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	2201      	movs	r2, #1
 8001058:	f004 f8cb 	bl	80051f2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 800105c:	2201      	movs	r2, #1
 800105e:	2110      	movs	r1, #16
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <OV5462_write_spi_reg+0x5c>)
 8001062:	f002 fbf5 	bl	8003850 <HAL_GPIO_WritePin>

//	HAL_Delay(100);
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020800 	.word	0x40020800

08001074 <OV5462_read_spi_reg>:

uint8_t OV5462_read_spi_reg(OV5462_t* ov5462, uint8_t addr) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001080:	2200      	movs	r2, #0
 8001082:	2110      	movs	r1, #16
 8001084:	480f      	ldr	r0, [pc, #60]	; (80010c4 <OV5462_read_spi_reg+0x50>)
 8001086:	f002 fbe3 	bl	8003850 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr };
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6858      	ldr	r0, [r3, #4]
 8001092:	f107 010c 	add.w	r1, r7, #12
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	2201      	movs	r2, #1
 800109a:	f004 f8aa 	bl	80051f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ov5462->hspi, buf, 1, 100);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6858      	ldr	r0, [r3, #4]
 80010a2:	f107 010c 	add.w	r1, r7, #12
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	2201      	movs	r2, #1
 80010aa:	f004 f9de 	bl	800546a <HAL_SPI_Receive>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 80010ae:	2201      	movs	r2, #1
 80010b0:	2110      	movs	r1, #16
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <OV5462_read_spi_reg+0x50>)
 80010b4:	f002 fbcc 	bl	8003850 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	return buf[0];
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020800 	.word	0x40020800

080010c8 <OV5462_init>:


uint8_t OV5462_init(OV5462_t* ov5462) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select is default HIGH
 80010d0:	2201      	movs	r2, #1
 80010d2:	2110      	movs	r1, #16
 80010d4:	482b      	ldr	r0, [pc, #172]	; (8001184 <OV5462_init+0xbc>)
 80010d6:	f002 fbbb 	bl	8003850 <HAL_GPIO_WritePin>

	OV5462_write_i2c_reg(ov5462, 0x3008, 0x80);
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	f243 0108 	movw	r1, #12296	; 0x3008
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff1b 	bl	8000f1c <OV5462_write_i2c_reg>
	OV5462_write_i2c_regs(ov5462, SET_QVGA_MODE); // determine if we need to do this for our application
 80010e6:	4928      	ldr	r1, [pc, #160]	; (8001188 <OV5462_init+0xc0>)
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff3e 	bl	8000f6a <OV5462_write_i2c_regs>

	uint8_t err = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
	// configure camera for JPEG capture
	err |= OV5462_write_i2c_regs(ov5462, CONFIGURE_JPEG_CAPTURE); // use JPEG capture mode
 80010f2:	4926      	ldr	r1, [pc, #152]	; (800118c <OV5462_init+0xc4>)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff38 	bl	8000f6a <OV5462_write_i2c_regs>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4313      	orrs	r3, r2
 8001102:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_regs(ov5462, SET_RESOLUTION_320X240); // set sensor to low resolution
 8001104:	4922      	ldr	r1, [pc, #136]	; (8001190 <OV5462_init+0xc8>)
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff2f 	bl	8000f6a <OV5462_write_i2c_regs>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	4313      	orrs	r3, r2
 8001114:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3818, 0xa8);
 8001116:	22a8      	movs	r2, #168	; 0xa8
 8001118:	f643 0118 	movw	r1, #14360	; 0x3818
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fefd 	bl	8000f1c <OV5462_write_i2c_reg>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	4313      	orrs	r3, r2
 800112a:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3621, 0x10);
 800112c:	2210      	movs	r2, #16
 800112e:	f243 6121 	movw	r1, #13857	; 0x3621
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fef2 	bl	8000f1c <OV5462_write_i2c_reg>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	4313      	orrs	r3, r2
 8001140:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3801, 0xb0);
 8001142:	22b0      	movs	r2, #176	; 0xb0
 8001144:	f643 0101 	movw	r1, #14337	; 0x3801
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fee7 	bl	8000f1c <OV5462_write_i2c_reg>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	4313      	orrs	r3, r2
 8001156:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x4407, 0x04); // 04?
 8001158:	2204      	movs	r2, #4
 800115a:	f244 4107 	movw	r1, #17415	; 0x4407
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fedc 	bl	8000f1c <OV5462_write_i2c_reg>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4313      	orrs	r3, r2
 800116c:	73fb      	strb	r3, [r7, #15]

	OV5462_write_spi_reg(ov5462, OV5462_ARDUCHIP_TIM, OV5462_VSYNC_LEVEL_MASK);
 800116e:	2202      	movs	r2, #2
 8001170:	2103      	movs	r1, #3
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff4e 	bl	8001014 <OV5462_write_spi_reg>

	return err;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020800 	.word	0x40020800
 8001188:	0800c12c 	.word	0x0800c12c
 800118c:	0800ca4c 	.word	0x0800ca4c
 8001190:	0800c0c0 	.word	0x0800c0c0

08001194 <OV5462_read_fifo_length>:

uint32_t OV5462_read_fifo_length(OV5462_t* ov5462) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	uint32_t lower, middle, upper;
	lower = OV5462_read_spi_reg(ov5462, FIFO_SIZE_LOWER);
 800119c:	2142      	movs	r1, #66	; 0x42
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ff68 	bl	8001074 <OV5462_read_spi_reg>
 80011a4:	4603      	mov	r3, r0
 80011a6:	617b      	str	r3, [r7, #20]
	middle = OV5462_read_spi_reg(ov5462, FIFO_SIZE_MIDDLE);
 80011a8:	2143      	movs	r1, #67	; 0x43
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff62 	bl	8001074 <OV5462_read_spi_reg>
 80011b0:	4603      	mov	r3, r0
 80011b2:	613b      	str	r3, [r7, #16]
	upper = OV5462_read_spi_reg(ov5462, FIFO_SIZE_UPPER);
 80011b4:	2144      	movs	r1, #68	; 0x44
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff5c 	bl	8001074 <OV5462_read_spi_reg>
 80011bc:	4603      	mov	r3, r0
 80011be:	60fb      	str	r3, [r7, #12]

	return ((upper << 16) | (middle << 8) | lower) & 0x07fffff;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	041a      	lsls	r2, r3, #16
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	431a      	orrs	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <OV5462_request_FIFO_burst>:

void OV5462_request_FIFO_burst(OV5462_t* ov5462) {
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
	uint8_t buf[1] = { BURST_FIFO_READ };
 80011e2:	233c      	movs	r3, #60	; 0x3c
 80011e4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6858      	ldr	r0, [r3, #4]
 80011ea:	f107 010c 	add.w	r1, r7, #12
 80011ee:	2364      	movs	r3, #100	; 0x64
 80011f0:	2201      	movs	r2, #1
 80011f2:	f003 fffe 	bl	80051f2 <HAL_SPI_Transmit>
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <SPI_OptimizedReadByte>:

void SPI_OptimizedReadByte(uint8_t* data) {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	while (((SPI1->SR)&(1>>7))) {}; // wait for BSY bit to reset
 8001208:	bf00      	nop
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <SPI_OptimizedReadByte+0x38>)
 800120c:	689b      	ldr	r3, [r3, #8]
	SPI1->DR = 0; // dummy byte
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <SPI_OptimizedReadByte+0x38>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
	while (!((SPI1->SR) & (1<<0))) {};
 8001214:	bf00      	nop
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <SPI_OptimizedReadByte+0x38>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f9      	beq.n	8001216 <SPI_OptimizedReadByte+0x16>
	*data = SPI1->DR;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SPI_OptimizedReadByte+0x38>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	701a      	strb	r2, [r3, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	40013000 	.word	0x40013000

0800123c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2102      	movs	r1, #2
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <SELECT+0x18>)
 8001246:	f002 fb03 	bl	8003850 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f001 fe10 	bl	8002e70 <HAL_Delay>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40020800 	.word	0x40020800

08001258 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2102      	movs	r1, #2
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <DESELECT+0x18>)
 8001262:	f002 faf5 	bl	8003850 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001266:	2001      	movs	r0, #1
 8001268:	f001 fe02 	bl	8002e70 <HAL_Delay>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40020800 	.word	0x40020800

08001274 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800127e:	bf00      	nop
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <SPI_TxByte+0x30>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b02      	cmp	r3, #2
 800128c:	d1f8      	bne.n	8001280 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800128e:	1df9      	adds	r1, r7, #7
 8001290:	2364      	movs	r3, #100	; 0x64
 8001292:	2201      	movs	r2, #1
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <SPI_TxByte+0x30>)
 8001296:	f003 ffac 	bl	80051f2 <HAL_SPI_Transmit>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000030c 	.word	0x2000030c

080012a8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012b4:	bf00      	nop
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <SPI_TxBuffer+0x30>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d1f8      	bne.n	80012b6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80012c4:	887a      	ldrh	r2, [r7, #2]
 80012c6:	2364      	movs	r3, #100	; 0x64
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4803      	ldr	r0, [pc, #12]	; (80012d8 <SPI_TxBuffer+0x30>)
 80012cc:	f003 ff91 	bl	80051f2 <HAL_SPI_Transmit>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000030c 	.word	0x2000030c

080012dc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80012e2:	23ff      	movs	r3, #255	; 0xff
 80012e4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012e6:	bf00      	nop
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <SPI_RxByte+0x34>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d1f8      	bne.n	80012e8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80012f6:	1dba      	adds	r2, r7, #6
 80012f8:	1df9      	adds	r1, r7, #7
 80012fa:	2364      	movs	r3, #100	; 0x64
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <SPI_RxByte+0x34>)
 8001302:	f004 f9c3 	bl	800568c <HAL_SPI_TransmitReceive>

	return data;
 8001306:	79bb      	ldrb	r3, [r7, #6]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000030c 	.word	0x2000030c

08001314 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800131c:	f7ff ffde 	bl	80012dc <SPI_RxByte>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	701a      	strb	r2, [r3, #0]
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <SD_ReadyWait+0x30>)
 8001338:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800133c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800133e:	f7ff ffcd 	bl	80012dc <SPI_RxByte>
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d003      	beq.n	8001354 <SD_ReadyWait+0x24>
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SD_ReadyWait+0x30>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f4      	bne.n	800133e <SD_ReadyWait+0xe>

	return res;
 8001354:	79fb      	ldrb	r3, [r7, #7]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000212 	.word	0x20000212

08001364 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800136a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800136e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001370:	f7ff ff72 	bl	8001258 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	e005      	b.n	8001386 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800137a:	20ff      	movs	r0, #255	; 0xff
 800137c:	f7ff ff7a 	bl	8001274 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	3301      	adds	r3, #1
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2b09      	cmp	r3, #9
 800138a:	ddf6      	ble.n	800137a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800138c:	f7ff ff56 	bl	800123c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001390:	2340      	movs	r3, #64	; 0x40
 8001392:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80013a4:	2395      	movs	r3, #149	; 0x95
 80013a6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80013a8:	463b      	mov	r3, r7
 80013aa:	2106      	movs	r1, #6
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff7b 	bl	80012a8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80013b2:	e002      	b.n	80013ba <SD_PowerOn+0x56>
	{
		cnt--;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80013ba:	f7ff ff8f 	bl	80012dc <SPI_RxByte>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d002      	beq.n	80013ca <SD_PowerOn+0x66>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f4      	bne.n	80013b4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80013ca:	f7ff ff45 	bl	8001258 <DESELECT>
	SPI_TxByte(0XFF);
 80013ce:	20ff      	movs	r0, #255	; 0xff
 80013d0:	f7ff ff50 	bl	8001274 <SPI_TxByte>

	PowerFlag = 1;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <SD_PowerOn+0x80>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000215 	.word	0x20000215

080013e8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <SD_PowerOff+0x14>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	20000215 	.word	0x20000215

08001400 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <SD_CheckPower+0x14>)
 8001406:	781b      	ldrb	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000215 	.word	0x20000215

08001418 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <SD_RxDataBlock+0x58>)
 8001424:	22c8      	movs	r2, #200	; 0xc8
 8001426:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001428:	f7ff ff58 	bl	80012dc <SPI_RxByte>
 800142c:	4603      	mov	r3, r0
 800142e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	2bff      	cmp	r3, #255	; 0xff
 8001434:	d103      	bne.n	800143e <SD_RxDataBlock+0x26>
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <SD_RxDataBlock+0x58>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f4      	bne.n	8001428 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	2bfe      	cmp	r3, #254	; 0xfe
 8001442:	d001      	beq.n	8001448 <SD_RxDataBlock+0x30>
 8001444:	2300      	movs	r3, #0
 8001446:	e00f      	b.n	8001468 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff60 	bl	8001314 <SPI_RxBytePtr>
	} while(len--);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	1e5a      	subs	r2, r3, #1
 8001458:	603a      	str	r2, [r7, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f4      	bne.n	8001448 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800145e:	f7ff ff3d 	bl	80012dc <SPI_RxByte>
	SPI_RxByte();
 8001462:	f7ff ff3b 	bl	80012dc <SPI_RxByte>

	return TRUE;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000210 	.word	0x20000210

08001474 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001484:	f7ff ff54 	bl	8001330 <SD_ReadyWait>
 8001488:	4603      	mov	r3, r0
 800148a:	2bff      	cmp	r3, #255	; 0xff
 800148c:	d001      	beq.n	8001492 <SD_TxDataBlock+0x1e>
 800148e:	2300      	movs	r3, #0
 8001490:	e02f      	b.n	80014f2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff feed 	bl	8001274 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	2bfd      	cmp	r3, #253	; 0xfd
 800149e:	d020      	beq.n	80014e2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80014a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff feff 	bl	80012a8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80014aa:	f7ff ff17 	bl	80012dc <SPI_RxByte>
		SPI_RxByte();
 80014ae:	f7ff ff15 	bl	80012dc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80014b2:	e00b      	b.n	80014cc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80014b4:	f7ff ff12 	bl	80012dc <SPI_RxByte>
 80014b8:	4603      	mov	r3, r0
 80014ba:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d006      	beq.n	80014d4 <SD_TxDataBlock+0x60>
			i++;
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	3301      	adds	r3, #1
 80014ca:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	2b40      	cmp	r3, #64	; 0x40
 80014d0:	d9f0      	bls.n	80014b4 <SD_TxDataBlock+0x40>
 80014d2:	e000      	b.n	80014d6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80014d4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80014d6:	bf00      	nop
 80014d8:	f7ff ff00 	bl	80012dc <SPI_RxByte>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0fa      	beq.n	80014d8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d101      	bne.n	80014f0 <SD_TxDataBlock+0x7c>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	6039      	str	r1, [r7, #0]
 8001504:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001506:	f7ff ff13 	bl	8001330 <SD_ReadyWait>
 800150a:	4603      	mov	r3, r0
 800150c:	2bff      	cmp	r3, #255	; 0xff
 800150e:	d001      	beq.n	8001514 <SD_SendCmd+0x1a>
 8001510:	23ff      	movs	r3, #255	; 0xff
 8001512:	e042      	b.n	800159a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff feac 	bl	8001274 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	0e1b      	lsrs	r3, r3, #24
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fea6 	bl	8001274 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	0c1b      	lsrs	r3, r3, #16
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fea0 	bl	8001274 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fe9a 	bl	8001274 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fe95 	bl	8001274 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b40      	cmp	r3, #64	; 0x40
 800154e:	d102      	bne.n	8001556 <SD_SendCmd+0x5c>
 8001550:	2395      	movs	r3, #149	; 0x95
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e007      	b.n	8001566 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b48      	cmp	r3, #72	; 0x48
 800155a:	d102      	bne.n	8001562 <SD_SendCmd+0x68>
 800155c:	2387      	movs	r3, #135	; 0x87
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <SD_SendCmd+0x6c>
	else crc = 1;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fe83 	bl	8001274 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b4c      	cmp	r3, #76	; 0x4c
 8001572:	d101      	bne.n	8001578 <SD_SendCmd+0x7e>
 8001574:	f7ff feb2 	bl	80012dc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001578:	230a      	movs	r3, #10
 800157a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800157c:	f7ff feae 	bl	80012dc <SPI_RxByte>
 8001580:	4603      	mov	r3, r0
 8001582:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001584:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001588:	2b00      	cmp	r3, #0
 800158a:	da05      	bge.n	8001598 <SD_SendCmd+0x9e>
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	3b01      	subs	r3, #1
 8001590:	73bb      	strb	r3, [r7, #14]
 8001592:	7bbb      	ldrb	r3, [r7, #14]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f1      	bne.n	800157c <SD_SendCmd+0x82>

	return res;
 8001598:	7b7b      	ldrb	r3, [r7, #13]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SD_disk_initialize+0x14>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0d1      	b.n	800175c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80015b8:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <SD_disk_initialize+0x1c0>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <SD_disk_initialize+0x2a>
 80015c6:	4b67      	ldr	r3, [pc, #412]	; (8001764 <SD_disk_initialize+0x1c0>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	e0c6      	b.n	800175c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80015ce:	f7ff fec9 	bl	8001364 <SD_PowerOn>

	/* slave select */
	SELECT();
 80015d2:	f7ff fe33 	bl	800123c <SELECT>

	/* check disk type */
	type = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80015da:	2100      	movs	r1, #0
 80015dc:	2040      	movs	r0, #64	; 0x40
 80015de:	f7ff ff8c 	bl	80014fa <SD_SendCmd>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	f040 80a1 	bne.w	800172c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80015ea:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <SD_disk_initialize+0x1c4>)
 80015ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80015f2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80015f6:	2048      	movs	r0, #72	; 0x48
 80015f8:	f7ff ff7f 	bl	80014fa <SD_SendCmd>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d155      	bne.n	80016ae <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e00c      	b.n	8001622 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001608:	7bfc      	ldrb	r4, [r7, #15]
 800160a:	f7ff fe67 	bl	80012dc <SPI_RxByte>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	f104 0310 	add.w	r3, r4, #16
 8001616:	443b      	add	r3, r7
 8001618:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	3301      	adds	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d9ef      	bls.n	8001608 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001628:	7abb      	ldrb	r3, [r7, #10]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d17e      	bne.n	800172c <SD_disk_initialize+0x188>
 800162e:	7afb      	ldrb	r3, [r7, #11]
 8001630:	2baa      	cmp	r3, #170	; 0xaa
 8001632:	d17b      	bne.n	800172c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001634:	2100      	movs	r1, #0
 8001636:	2077      	movs	r0, #119	; 0x77
 8001638:	f7ff ff5f 	bl	80014fa <SD_SendCmd>
 800163c:	4603      	mov	r3, r0
 800163e:	2b01      	cmp	r3, #1
 8001640:	d807      	bhi.n	8001652 <SD_disk_initialize+0xae>
 8001642:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001646:	2069      	movs	r0, #105	; 0x69
 8001648:	f7ff ff57 	bl	80014fa <SD_SendCmd>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001652:	4b45      	ldr	r3, [pc, #276]	; (8001768 <SD_disk_initialize+0x1c4>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1ec      	bne.n	8001634 <SD_disk_initialize+0x90>
 800165a:	e000      	b.n	800165e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800165c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800165e:	4b42      	ldr	r3, [pc, #264]	; (8001768 <SD_disk_initialize+0x1c4>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d062      	beq.n	800172c <SD_disk_initialize+0x188>
 8001666:	2100      	movs	r1, #0
 8001668:	207a      	movs	r0, #122	; 0x7a
 800166a:	f7ff ff46 	bl	80014fa <SD_SendCmd>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d15b      	bne.n	800172c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e00c      	b.n	8001694 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800167a:	7bfc      	ldrb	r4, [r7, #15]
 800167c:	f7ff fe2e 	bl	80012dc <SPI_RxByte>
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	f104 0310 	add.w	r3, r4, #16
 8001688:	443b      	add	r3, r7
 800168a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	3301      	adds	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d9ef      	bls.n	800167a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800169a:	7a3b      	ldrb	r3, [r7, #8]
 800169c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SD_disk_initialize+0x104>
 80016a4:	230c      	movs	r3, #12
 80016a6:	e000      	b.n	80016aa <SD_disk_initialize+0x106>
 80016a8:	2304      	movs	r3, #4
 80016aa:	73bb      	strb	r3, [r7, #14]
 80016ac:	e03e      	b.n	800172c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80016ae:	2100      	movs	r1, #0
 80016b0:	2077      	movs	r0, #119	; 0x77
 80016b2:	f7ff ff22 	bl	80014fa <SD_SendCmd>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d808      	bhi.n	80016ce <SD_disk_initialize+0x12a>
 80016bc:	2100      	movs	r1, #0
 80016be:	2069      	movs	r0, #105	; 0x69
 80016c0:	f7ff ff1b 	bl	80014fa <SD_SendCmd>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d801      	bhi.n	80016ce <SD_disk_initialize+0x12a>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e000      	b.n	80016d0 <SD_disk_initialize+0x12c>
 80016ce:	2301      	movs	r3, #1
 80016d0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80016d2:	7bbb      	ldrb	r3, [r7, #14]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d10e      	bne.n	80016f6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80016d8:	2100      	movs	r1, #0
 80016da:	2077      	movs	r0, #119	; 0x77
 80016dc:	f7ff ff0d 	bl	80014fa <SD_SendCmd>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d80e      	bhi.n	8001704 <SD_disk_initialize+0x160>
 80016e6:	2100      	movs	r1, #0
 80016e8:	2069      	movs	r0, #105	; 0x69
 80016ea:	f7ff ff06 	bl	80014fa <SD_SendCmd>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d107      	bne.n	8001704 <SD_disk_initialize+0x160>
 80016f4:	e00c      	b.n	8001710 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016f6:	2100      	movs	r1, #0
 80016f8:	2041      	movs	r0, #65	; 0x41
 80016fa:	f7ff fefe 	bl	80014fa <SD_SendCmd>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <SD_disk_initialize+0x1c4>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1e2      	bne.n	80016d2 <SD_disk_initialize+0x12e>
 800170c:	e000      	b.n	8001710 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800170e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <SD_disk_initialize+0x1c4>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <SD_disk_initialize+0x184>
 8001718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171c:	2050      	movs	r0, #80	; 0x50
 800171e:	f7ff feec 	bl	80014fa <SD_SendCmd>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SD_disk_initialize+0x188>
 8001728:	2300      	movs	r3, #0
 800172a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800172c:	4a0f      	ldr	r2, [pc, #60]	; (800176c <SD_disk_initialize+0x1c8>)
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001732:	f7ff fd91 	bl	8001258 <DESELECT>
	SPI_RxByte();
 8001736:	f7ff fdd1 	bl	80012dc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <SD_disk_initialize+0x1c0>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <SD_disk_initialize+0x1c0>)
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e001      	b.n	8001756 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001752:	f7ff fe49 	bl	80013e8 <SD_PowerOff>
	}

	return Stat;
 8001756:	4b03      	ldr	r3, [pc, #12]	; (8001764 <SD_disk_initialize+0x1c0>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b2db      	uxtb	r3, r3
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	20000000 	.word	0x20000000
 8001768:	20000210 	.word	0x20000210
 800176c:	20000214 	.word	0x20000214

08001770 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SD_disk_status+0x14>
 8001780:	2301      	movs	r3, #1
 8001782:	e002      	b.n	800178a <SD_disk_status+0x1a>
	return Stat;
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SD_disk_status+0x28>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000000 	.word	0x20000000

0800179c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	4603      	mov	r3, r0
 80017aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <SD_disk_read+0x1c>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <SD_disk_read+0x20>
 80017b8:	2304      	movs	r3, #4
 80017ba:	e051      	b.n	8001860 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <SD_disk_read+0xcc>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SD_disk_read+0x32>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e048      	b.n	8001860 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <SD_disk_read+0xd0>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <SD_disk_read+0x44>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	025b      	lsls	r3, r3, #9
 80017de:	607b      	str	r3, [r7, #4]

	SELECT();
 80017e0:	f7ff fd2c 	bl	800123c <SELECT>

	if (count == 1)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d111      	bne.n	800180e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	2051      	movs	r0, #81	; 0x51
 80017ee:	f7ff fe84 	bl	80014fa <SD_SendCmd>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d129      	bne.n	800184c <SD_disk_read+0xb0>
 80017f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017fc:	68b8      	ldr	r0, [r7, #8]
 80017fe:	f7ff fe0b 	bl	8001418 <SD_RxDataBlock>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d021      	beq.n	800184c <SD_disk_read+0xb0>
 8001808:	2300      	movs	r3, #0
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	e01e      	b.n	800184c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	2052      	movs	r0, #82	; 0x52
 8001812:	f7ff fe72 	bl	80014fa <SD_SendCmd>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d117      	bne.n	800184c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800181c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001820:	68b8      	ldr	r0, [r7, #8]
 8001822:	f7ff fdf9 	bl	8001418 <SD_RxDataBlock>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00a      	beq.n	8001842 <SD_disk_read+0xa6>
				buff += 512;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001832:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1ed      	bne.n	800181c <SD_disk_read+0x80>
 8001840:	e000      	b.n	8001844 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001842:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001844:	2100      	movs	r1, #0
 8001846:	204c      	movs	r0, #76	; 0x4c
 8001848:	f7ff fe57 	bl	80014fa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800184c:	f7ff fd04 	bl	8001258 <DESELECT>
	SPI_RxByte();
 8001850:	f7ff fd44 	bl	80012dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	bf14      	ite	ne
 800185a:	2301      	movne	r3, #1
 800185c:	2300      	moveq	r3, #0
 800185e:	b2db      	uxtb	r3, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000000 	.word	0x20000000
 800186c:	20000214 	.word	0x20000214

08001870 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <SD_disk_write+0x1c>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <SD_disk_write+0x20>
 800188c:	2304      	movs	r3, #4
 800188e:	e06b      	b.n	8001968 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001890:	4b37      	ldr	r3, [pc, #220]	; (8001970 <SD_disk_write+0x100>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SD_disk_write+0x32>
 800189e:	2303      	movs	r3, #3
 80018a0:	e062      	b.n	8001968 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80018a2:	4b33      	ldr	r3, [pc, #204]	; (8001970 <SD_disk_write+0x100>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SD_disk_write+0x44>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e059      	b.n	8001968 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80018b4:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <SD_disk_write+0x104>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <SD_disk_write+0x56>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	025b      	lsls	r3, r3, #9
 80018c4:	607b      	str	r3, [r7, #4]

	SELECT();
 80018c6:	f7ff fcb9 	bl	800123c <SELECT>

	if (count == 1)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d110      	bne.n	80018f2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	2058      	movs	r0, #88	; 0x58
 80018d4:	f7ff fe11 	bl	80014fa <SD_SendCmd>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d13a      	bne.n	8001954 <SD_disk_write+0xe4>
 80018de:	21fe      	movs	r1, #254	; 0xfe
 80018e0:	68b8      	ldr	r0, [r7, #8]
 80018e2:	f7ff fdc7 	bl	8001474 <SD_TxDataBlock>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d033      	beq.n	8001954 <SD_disk_write+0xe4>
			count = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	e030      	b.n	8001954 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <SD_disk_write+0x104>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80018fe:	2100      	movs	r1, #0
 8001900:	2077      	movs	r0, #119	; 0x77
 8001902:	f7ff fdfa 	bl	80014fa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	2057      	movs	r0, #87	; 0x57
 800190a:	f7ff fdf6 	bl	80014fa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	2059      	movs	r0, #89	; 0x59
 8001912:	f7ff fdf2 	bl	80014fa <SD_SendCmd>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d11b      	bne.n	8001954 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800191c:	21fc      	movs	r1, #252	; 0xfc
 800191e:	68b8      	ldr	r0, [r7, #8]
 8001920:	f7ff fda8 	bl	8001474 <SD_TxDataBlock>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <SD_disk_write+0xd0>
				buff += 512;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001930:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ee      	bne.n	800191c <SD_disk_write+0xac>
 800193e:	e000      	b.n	8001942 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001940:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001942:	21fd      	movs	r1, #253	; 0xfd
 8001944:	2000      	movs	r0, #0
 8001946:	f7ff fd95 	bl	8001474 <SD_TxDataBlock>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <SD_disk_write+0xe4>
			{
				count = 1;
 8001950:	2301      	movs	r3, #1
 8001952:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001954:	f7ff fc80 	bl	8001258 <DESELECT>
	SPI_RxByte();
 8001958:	f7ff fcc0 	bl	80012dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	bf14      	ite	ne
 8001962:	2301      	movne	r3, #1
 8001964:	2300      	moveq	r3, #0
 8001966:	b2db      	uxtb	r3, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000000 	.word	0x20000000
 8001974:	20000214 	.word	0x20000214

08001978 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b08b      	sub	sp, #44	; 0x2c
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	603a      	str	r2, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	460b      	mov	r3, r1
 8001986:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SD_disk_ioctl+0x1e>
 8001992:	2304      	movs	r3, #4
 8001994:	e115      	b.n	8001bc2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d124      	bne.n	80019ec <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d012      	beq.n	80019d0 <SD_disk_ioctl+0x58>
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	dc1a      	bgt.n	80019e4 <SD_disk_ioctl+0x6c>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <SD_disk_ioctl+0x40>
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d006      	beq.n	80019c4 <SD_disk_ioctl+0x4c>
 80019b6:	e015      	b.n	80019e4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80019b8:	f7ff fd16 	bl	80013e8 <SD_PowerOff>
			res = RES_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019c2:	e0fc      	b.n	8001bbe <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80019c4:	f7ff fcce 	bl	8001364 <SD_PowerOn>
			res = RES_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019ce:	e0f6      	b.n	8001bbe <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	1c5c      	adds	r4, r3, #1
 80019d4:	f7ff fd14 	bl	8001400 <SD_CheckPower>
 80019d8:	4603      	mov	r3, r0
 80019da:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019e2:	e0ec      	b.n	8001bbe <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80019e4:	2304      	movs	r3, #4
 80019e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019ea:	e0e8      	b.n	8001bbe <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80019ec:	4b77      	ldr	r3, [pc, #476]	; (8001bcc <SD_disk_ioctl+0x254>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SD_disk_ioctl+0x86>
 80019fa:	2303      	movs	r3, #3
 80019fc:	e0e1      	b.n	8001bc2 <SD_disk_ioctl+0x24a>

		SELECT();
 80019fe:	f7ff fc1d 	bl	800123c <SELECT>

		switch (ctrl)
 8001a02:	79bb      	ldrb	r3, [r7, #6]
 8001a04:	2b0d      	cmp	r3, #13
 8001a06:	f200 80cb 	bhi.w	8001ba0 <SD_disk_ioctl+0x228>
 8001a0a:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <SD_disk_ioctl+0x98>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001b0b 	.word	0x08001b0b
 8001a14:	08001a49 	.word	0x08001a49
 8001a18:	08001afb 	.word	0x08001afb
 8001a1c:	08001ba1 	.word	0x08001ba1
 8001a20:	08001ba1 	.word	0x08001ba1
 8001a24:	08001ba1 	.word	0x08001ba1
 8001a28:	08001ba1 	.word	0x08001ba1
 8001a2c:	08001ba1 	.word	0x08001ba1
 8001a30:	08001ba1 	.word	0x08001ba1
 8001a34:	08001ba1 	.word	0x08001ba1
 8001a38:	08001ba1 	.word	0x08001ba1
 8001a3c:	08001b1d 	.word	0x08001b1d
 8001a40:	08001b41 	.word	0x08001b41
 8001a44:	08001b65 	.word	0x08001b65
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2049      	movs	r0, #73	; 0x49
 8001a4c:	f7ff fd55 	bl	80014fa <SD_SendCmd>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 80a8 	bne.w	8001ba8 <SD_disk_ioctl+0x230>
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fcda 	bl	8001418 <SD_RxDataBlock>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 809e 	beq.w	8001ba8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001a6c:	7b3b      	ldrb	r3, [r7, #12]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d10e      	bne.n	8001a94 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a76:	7d7b      	ldrb	r3, [r7, #21]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	7d3b      	ldrb	r3, [r7, #20]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3301      	adds	r3, #1
 8001a88:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001a8a:	8bfb      	ldrh	r3, [r7, #30]
 8001a8c:	029a      	lsls	r2, r3, #10
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e02e      	b.n	8001af2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a94:	7c7b      	ldrb	r3, [r7, #17]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	7dbb      	ldrb	r3, [r7, #22]
 8001a9e:	09db      	lsrs	r3, r3, #7
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	7d7b      	ldrb	r3, [r7, #21]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f003 0306 	and.w	r3, r3, #6
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001abc:	7d3b      	ldrb	r3, [r7, #20]
 8001abe:	099b      	lsrs	r3, r3, #6
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	7cfb      	ldrb	r3, [r7, #19]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	7cbb      	ldrb	r3, [r7, #18]
 8001ad2:	029b      	lsls	r3, r3, #10
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ae4:	8bfa      	ldrh	r2, [r7, #30]
 8001ae6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001aea:	3b09      	subs	r3, #9
 8001aec:	409a      	lsls	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001af8:	e056      	b.n	8001ba8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b00:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b08:	e055      	b.n	8001bb6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001b0a:	f7ff fc11 	bl	8001330 <SD_ReadyWait>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2bff      	cmp	r3, #255	; 0xff
 8001b12:	d14b      	bne.n	8001bac <SD_disk_ioctl+0x234>
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b1a:	e047      	b.n	8001bac <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2049      	movs	r0, #73	; 0x49
 8001b20:	f7ff fceb 	bl	80014fa <SD_SendCmd>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d142      	bne.n	8001bb0 <SD_disk_ioctl+0x238>
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	6a38      	ldr	r0, [r7, #32]
 8001b2e:	f7ff fc73 	bl	8001418 <SD_RxDataBlock>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03b      	beq.n	8001bb0 <SD_disk_ioctl+0x238>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b3e:	e037      	b.n	8001bb0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b40:	2100      	movs	r1, #0
 8001b42:	204a      	movs	r0, #74	; 0x4a
 8001b44:	f7ff fcd9 	bl	80014fa <SD_SendCmd>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d132      	bne.n	8001bb4 <SD_disk_ioctl+0x23c>
 8001b4e:	2110      	movs	r1, #16
 8001b50:	6a38      	ldr	r0, [r7, #32]
 8001b52:	f7ff fc61 	bl	8001418 <SD_RxDataBlock>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d02b      	beq.n	8001bb4 <SD_disk_ioctl+0x23c>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b62:	e027      	b.n	8001bb4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001b64:	2100      	movs	r1, #0
 8001b66:	207a      	movs	r0, #122	; 0x7a
 8001b68:	f7ff fcc7 	bl	80014fa <SD_SendCmd>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b78:	e00b      	b.n	8001b92 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001b7a:	6a3c      	ldr	r4, [r7, #32]
 8001b7c:	1c63      	adds	r3, r4, #1
 8001b7e:	623b      	str	r3, [r7, #32]
 8001b80:	f7ff fbac 	bl	80012dc <SPI_RxByte>
 8001b84:	4603      	mov	r3, r0
 8001b86:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001b88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d9ef      	bls.n	8001b7a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ba6:	e006      	b.n	8001bb6 <SD_disk_ioctl+0x23e>
			break;
 8001ba8:	bf00      	nop
 8001baa:	e004      	b.n	8001bb6 <SD_disk_ioctl+0x23e>
			break;
 8001bac:	bf00      	nop
 8001bae:	e002      	b.n	8001bb6 <SD_disk_ioctl+0x23e>
			break;
 8001bb0:	bf00      	nop
 8001bb2:	e000      	b.n	8001bb6 <SD_disk_ioctl+0x23e>
			break;
 8001bb4:	bf00      	nop
		}

		DESELECT();
 8001bb6:	f7ff fb4f 	bl	8001258 <DESELECT>
		SPI_RxByte();
 8001bba:	f7ff fb8f 	bl	80012dc <SPI_RxByte>
	}

	return res;
 8001bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	372c      	adds	r7, #44	; 0x2c
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <testSD>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int testSD() {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
/* Mount SD Card */
	int ret = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
	if(f_mount(&fs, "/", 0) != FR_OK) {
 8001bda:	2200      	movs	r2, #0
 8001bdc:	495d      	ldr	r1, [pc, #372]	; (8001d54 <testSD+0x184>)
 8001bde:	485e      	ldr	r0, [pc, #376]	; (8001d58 <testSD+0x188>)
 8001be0:	f006 faca 	bl	8008178 <f_mount>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <testSD+0x26>
		printf("Failed to mount SD Card\r\n");
 8001bea:	485c      	ldr	r0, [pc, #368]	; (8001d5c <testSD+0x18c>)
 8001bec:	f008 f828 	bl	8009c40 <puts>
		return -1;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	e0a9      	b.n	8001d4a <testSD+0x17a>
	}

	/* Open file to write */
	ret = f_open(&fil, "/TEST.TXT", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001bf6:	2213      	movs	r2, #19
 8001bf8:	4959      	ldr	r1, [pc, #356]	; (8001d60 <testSD+0x190>)
 8001bfa:	485a      	ldr	r0, [pc, #360]	; (8001d64 <testSD+0x194>)
 8001bfc:	f006 fb02 	bl	8008204 <f_open>
 8001c00:	4603      	mov	r3, r0
 8001c02:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <testSD+0x48>
		printf("Failed to open file (%i) \r\n", ret);
 8001c0a:	68f9      	ldr	r1, [r7, #12]
 8001c0c:	4856      	ldr	r0, [pc, #344]	; (8001d68 <testSD+0x198>)
 8001c0e:	f007 ff91 	bl	8009b34 <iprintf>
		return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e098      	b.n	8001d4a <testSD+0x17a>
	}

	if(f_getfree("", &fre_clust, &pfs) != FR_OK) {
 8001c18:	4a54      	ldr	r2, [pc, #336]	; (8001d6c <testSD+0x19c>)
 8001c1a:	4955      	ldr	r1, [pc, #340]	; (8001d70 <testSD+0x1a0>)
 8001c1c:	4855      	ldr	r0, [pc, #340]	; (8001d74 <testSD+0x1a4>)
 8001c1e:	f007 f858 	bl	8008cd2 <f_getfree>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <testSD+0x64>
		printf("Free space check failed\r\n");
 8001c28:	4853      	ldr	r0, [pc, #332]	; (8001d78 <testSD+0x1a8>)
 8001c2a:	f008 f809 	bl	8009c40 <puts>
		return -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	e08a      	b.n	8001d4a <testSD+0x17a>
	}

	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001c34:	4b4d      	ldr	r3, [pc, #308]	; (8001d6c <testSD+0x19c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	3b02      	subs	r3, #2
 8001c3c:	4a4b      	ldr	r2, [pc, #300]	; (8001d6c <testSD+0x19c>)
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	8952      	ldrh	r2, [r2, #10]
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc74 	bl	8000534 <__aeabi_ui2d>
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b4a      	ldr	r3, [pc, #296]	; (8001d7c <testSD+0x1ac>)
 8001c52:	f7fe fce9 	bl	8000628 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe ffbb 	bl	8000bd8 <__aeabi_d2uiz>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a46      	ldr	r2, [pc, #280]	; (8001d80 <testSD+0x1b0>)
 8001c66:	6013      	str	r3, [r2, #0]
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001c68:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <testSD+0x19c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	895b      	ldrh	r3, [r3, #10]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <testSD+0x1a0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	fb02 f303 	mul.w	r3, r2, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc5b 	bl	8000534 <__aeabi_ui2d>
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	4b3e      	ldr	r3, [pc, #248]	; (8001d7c <testSD+0x1ac>)
 8001c84:	f7fe fcd0 	bl	8000628 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe ffa2 	bl	8000bd8 <__aeabi_d2uiz>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a3b      	ldr	r2, [pc, #236]	; (8001d84 <testSD+0x1b4>)
 8001c98:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if(free_space < 1) {
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <testSD+0x1b4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d105      	bne.n	8001cae <testSD+0xde>
		printf("Drive is full\r\n");
 8001ca2:	4839      	ldr	r0, [pc, #228]	; (8001d88 <testSD+0x1b8>)
 8001ca4:	f007 ffcc 	bl	8009c40 <puts>
		return -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	e04d      	b.n	8001d4a <testSD+0x17a>
	}

//	printf("SD CARD MOUNTED! TESTING R/W...\r\n");

	f_puts("TEST", &fil);
 8001cae:	492d      	ldr	r1, [pc, #180]	; (8001d64 <testSD+0x194>)
 8001cb0:	4836      	ldr	r0, [pc, #216]	; (8001d8c <testSD+0x1bc>)
 8001cb2:	f007 fa22 	bl	80090fa <f_puts>

	/* Close file */
	ret = f_close(&fil);
 8001cb6:	482b      	ldr	r0, [pc, #172]	; (8001d64 <testSD+0x194>)
 8001cb8:	f006 ffe1 	bl	8008c7e <f_close>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <testSD+0x104>
		printf("Failed to close file (%i) \r\n", ret);
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	4831      	ldr	r0, [pc, #196]	; (8001d90 <testSD+0x1c0>)
 8001cca:	f007 ff33 	bl	8009b34 <iprintf>
		return -1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e03a      	b.n	8001d4a <testSD+0x17a>
	}

	/* Open file to read */
	ret = f_open(&fil, "/TEST.TXT", FA_READ);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4922      	ldr	r1, [pc, #136]	; (8001d60 <testSD+0x190>)
 8001cd8:	4822      	ldr	r0, [pc, #136]	; (8001d64 <testSD+0x194>)
 8001cda:	f006 fa93 	bl	8008204 <f_open>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <testSD+0x126>
		printf("Failed to open in read mode (%i) \r\n", ret);
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	482a      	ldr	r0, [pc, #168]	; (8001d94 <testSD+0x1c4>)
 8001cec:	f007 ff22 	bl	8009b34 <iprintf>
		return -1;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	e029      	b.n	8001d4a <testSD+0x17a>
	}

	char buffer[5];
	f_gets(buffer, sizeof(buffer), &fil);
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4a1a      	ldr	r2, [pc, #104]	; (8001d64 <testSD+0x194>)
 8001cfa:	2105      	movs	r1, #5
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f007 f948 	bl	8008f92 <f_gets>

	if (strcmp(buffer, "TEST")) {
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4921      	ldr	r1, [pc, #132]	; (8001d8c <testSD+0x1bc>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fa6a 	bl	80001e0 <strcmp>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <testSD+0x14e>
		printf("File contents MISMATCH. FAIL R/W test\r\n");
 8001d12:	4821      	ldr	r0, [pc, #132]	; (8001d98 <testSD+0x1c8>)
 8001d14:	f007 ff94 	bl	8009c40 <puts>
		return -1;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1c:	e015      	b.n	8001d4a <testSD+0x17a>
	}

//	printf("PASSED: read file contents\r\n");

	/* Close file */
	if(f_close(&fil) != FR_OK) {
 8001d1e:	4811      	ldr	r0, [pc, #68]	; (8001d64 <testSD+0x194>)
 8001d20:	f006 ffad 	bl	8008c7e <f_close>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <testSD+0x166>
		printf("Failed to close\r\n");
 8001d2a:	481c      	ldr	r0, [pc, #112]	; (8001d9c <testSD+0x1cc>)
 8001d2c:	f007 ff88 	bl	8009c40 <puts>
		return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	e009      	b.n	8001d4a <testSD+0x17a>
	}

	if(f_unlink("test.txt") != FR_OK) {
 8001d36:	481a      	ldr	r0, [pc, #104]	; (8001da0 <testSD+0x1d0>)
 8001d38:	f007 f880 	bl	8008e3c <f_unlink>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <testSD+0x178>
		printf("Failed to delete test file \r\n");
 8001d42:	4818      	ldr	r0, [pc, #96]	; (8001da4 <testSD+0x1d4>)
 8001d44:	f007 ff7c 	bl	8009c40 <puts>
	}

	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	0800bdc0 	.word	0x0800bdc0
 8001d58:	20000400 	.word	0x20000400
 8001d5c:	0800bdc4 	.word	0x0800bdc4
 8001d60:	0800bde0 	.word	0x0800bde0
 8001d64:	20000838 	.word	0x20000838
 8001d68:	0800bdec 	.word	0x0800bdec
 8001d6c:	20000834 	.word	0x20000834
 8001d70:	20000c68 	.word	0x20000c68
 8001d74:	0800be08 	.word	0x0800be08
 8001d78:	0800be0c 	.word	0x0800be0c
 8001d7c:	3fe00000 	.word	0x3fe00000
 8001d80:	20000c6c 	.word	0x20000c6c
 8001d84:	20000c70 	.word	0x20000c70
 8001d88:	0800be28 	.word	0x0800be28
 8001d8c:	0800be38 	.word	0x0800be38
 8001d90:	0800be40 	.word	0x0800be40
 8001d94:	0800be60 	.word	0x0800be60
 8001d98:	0800be84 	.word	0x0800be84
 8001d9c:	0800beac 	.word	0x0800beac
 8001da0:	0800bec0 	.word	0x0800bec0
 8001da4:	0800becc 	.word	0x0800becc

08001da8 <read_fifo_and_write_jpeg_files>:
	is_header = 0;

	return 0;
}

int read_fifo_and_write_jpeg_files() {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8001dae:	af00      	add	r7, sp, #0
	uint8_t temp=0, temp_last=0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
	uint32_t length = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	int i = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	int frame_num = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	uint8_t buf[CHUNK_SIZE];
	FRESULT fr;

	length = OV5462_read_fifo_length(&ov5462);
 8001dce:	4873      	ldr	r0, [pc, #460]	; (8001f9c <read_fifo_and_write_jpeg_files+0x1f4>)
 8001dd0:	f7ff f9e0 	bl	8001194 <OV5462_read_fifo_length>
 8001dd4:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
	printf("Buffer length: %u\r\n", length);
 8001dd8:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 8001ddc:	4870      	ldr	r0, [pc, #448]	; (8001fa0 <read_fifo_and_write_jpeg_files+0x1f8>)
 8001dde:	f007 fea9 	bl	8009b34 <iprintf>

	if (length >= MAX_FIFO_LENGTH) {
 8001de2:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001de6:	4a6f      	ldr	r2, [pc, #444]	; (8001fa4 <read_fifo_and_write_jpeg_files+0x1fc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d905      	bls.n	8001df8 <read_fifo_and_write_jpeg_files+0x50>
		printf("Buffer too large\r\n");
 8001dec:	486e      	ldr	r0, [pc, #440]	; (8001fa8 <read_fifo_and_write_jpeg_files+0x200>)
 8001dee:	f007 ff27 	bl	8009c40 <puts>
		return -1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	e0cc      	b.n	8001f92 <read_fifo_and_write_jpeg_files+0x1ea>
	}

	if (length == 0) {
 8001df8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <read_fifo_and_write_jpeg_files+0x64>
		printf("Buffer empty\r\n");
 8001e00:	486a      	ldr	r0, [pc, #424]	; (8001fac <read_fifo_and_write_jpeg_files+0x204>)
 8001e02:	f007 ff1d 	bl	8009c40 <puts>
		return -1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e0c2      	b.n	8001f92 <read_fifo_and_write_jpeg_files+0x1ea>
	}

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2110      	movs	r1, #16
 8001e10:	4867      	ldr	r0, [pc, #412]	; (8001fb0 <read_fifo_and_write_jpeg_files+0x208>)
 8001e12:	f001 fd1d 	bl	8003850 <HAL_GPIO_WritePin>
	OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 8001e16:	4861      	ldr	r0, [pc, #388]	; (8001f9c <read_fifo_and_write_jpeg_files+0x1f4>)
 8001e18:	f7ff f9df 	bl	80011da <OV5462_request_FIFO_burst>

	f_open(&fil, "VIDEO.DAT", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001e1c:	2213      	movs	r2, #19
 8001e1e:	4965      	ldr	r1, [pc, #404]	; (8001fb4 <read_fifo_and_write_jpeg_files+0x20c>)
 8001e20:	4865      	ldr	r0, [pc, #404]	; (8001fb8 <read_fifo_and_write_jpeg_files+0x210>)
 8001e22:	f006 f9ef 	bl	8008204 <f_open>

	i = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

	while (length--) {
 8001e2c:	e0a0      	b.n	8001f70 <read_fifo_and_write_jpeg_files+0x1c8>
		temp_last = temp;
 8001e2e:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8001e32:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
		SPI_OptimizedReadByte(&temp);
 8001e36:	f207 4307 	addw	r3, r7, #1031	; 0x407
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f9e0 	bl	8001200 <SPI_OptimizedReadByte>

		if ((temp == 0xD9) && (temp_last == 0xFF)) { // end of image
 8001e40:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8001e44:	2bd9      	cmp	r3, #217	; 0xd9
 8001e46:	d126      	bne.n	8001e96 <read_fifo_and_write_jpeg_files+0xee>
 8001e48:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8001e4c:	2bff      	cmp	r3, #255	; 0xff
 8001e4e:	d122      	bne.n	8001e96 <read_fifo_and_write_jpeg_files+0xee>
			buf[i++] = temp;
 8001e50:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 8001e5a:	f897 1407 	ldrb.w	r1, [r7, #1031]	; 0x407
 8001e5e:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8001e62:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8001e66:	54d1      	strb	r1, [r2, r3]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2110      	movs	r1, #16
 8001e6c:	4850      	ldr	r0, [pc, #320]	; (8001fb0 <read_fifo_and_write_jpeg_files+0x208>)
 8001e6e:	f001 fcef 	bl	8003850 <HAL_GPIO_WritePin>
			f_write(&fil, buf, sizeof(uint8_t)*i, &bw);
 8001e72:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8001e76:	1d39      	adds	r1, r7, #4
 8001e78:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <read_fifo_and_write_jpeg_files+0x214>)
 8001e7a:	484f      	ldr	r0, [pc, #316]	; (8001fb8 <read_fifo_and_write_jpeg_files+0x210>)
 8001e7c:	f006 fced 	bl	800885a <f_write>
//			f_close(&fil);

			is_header = 0;
 8001e80:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <read_fifo_and_write_jpeg_files+0x218>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2110      	movs	r1, #16
 8001e8a:	4849      	ldr	r0, [pc, #292]	; (8001fb0 <read_fifo_and_write_jpeg_files+0x208>)
 8001e8c:	f001 fce0 	bl	8003850 <HAL_GPIO_WritePin>
			OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 8001e90:	4842      	ldr	r0, [pc, #264]	; (8001f9c <read_fifo_and_write_jpeg_files+0x1f4>)
 8001e92:	f7ff f9a2 	bl	80011da <OV5462_request_FIFO_burst>
		}

		if (is_header) {
 8001e96:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <read_fifo_and_write_jpeg_files+0x218>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d035      	beq.n	8001f0a <read_fifo_and_write_jpeg_files+0x162>
			if (i < CHUNK_SIZE) {
 8001e9e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea6:	da0c      	bge.n	8001ec2 <read_fifo_and_write_jpeg_files+0x11a>
				buf[i++] = temp;
 8001ea8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 8001eb2:	f897 1407 	ldrb.w	r1, [r7, #1031]	; 0x407
 8001eb6:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8001eba:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8001ebe:	54d1      	strb	r1, [r2, r3]
 8001ec0:	e056      	b.n	8001f70 <read_fifo_and_write_jpeg_files+0x1c8>
			} else {
				HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	483a      	ldr	r0, [pc, #232]	; (8001fb0 <read_fifo_and_write_jpeg_files+0x208>)
 8001ec8:	f001 fcc2 	bl	8003850 <HAL_GPIO_WritePin>
				f_write(&fil, buf, sizeof(uint8_t)*CHUNK_SIZE, &bw);
 8001ecc:	1d39      	adds	r1, r7, #4
 8001ece:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <read_fifo_and_write_jpeg_files+0x214>)
 8001ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed4:	4838      	ldr	r0, [pc, #224]	; (8001fb8 <read_fifo_and_write_jpeg_files+0x210>)
 8001ed6:	f006 fcc0 	bl	800885a <f_write>
				i = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
				buf[i++] = temp;
 8001ee0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 8001eea:	f897 1407 	ldrb.w	r1, [r7, #1031]	; 0x407
 8001eee:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8001ef2:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8001ef6:	54d1      	strb	r1, [r2, r3]
				HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2110      	movs	r1, #16
 8001efc:	482c      	ldr	r0, [pc, #176]	; (8001fb0 <read_fifo_and_write_jpeg_files+0x208>)
 8001efe:	f001 fca7 	bl	8003850 <HAL_GPIO_WritePin>
				OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 8001f02:	4826      	ldr	r0, [pc, #152]	; (8001f9c <read_fifo_and_write_jpeg_files+0x1f4>)
 8001f04:	f7ff f969 	bl	80011da <OV5462_request_FIFO_burst>
 8001f08:	e032      	b.n	8001f70 <read_fifo_and_write_jpeg_files+0x1c8>
			}
		} else if ((temp == 0xD8) && (temp_last == 0xFF)) { // start of new image
 8001f0a:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8001f0e:	2bd8      	cmp	r3, #216	; 0xd8
 8001f10:	d12e      	bne.n	8001f70 <read_fifo_and_write_jpeg_files+0x1c8>
 8001f12:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d12a      	bne.n	8001f70 <read_fifo_and_write_jpeg_files+0x1c8>
			is_header = 1;
 8001f1a:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <read_fifo_and_write_jpeg_files+0x218>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8001f20:	2201      	movs	r2, #1
 8001f22:	2110      	movs	r1, #16
 8001f24:	4822      	ldr	r0, [pc, #136]	; (8001fb0 <read_fifo_and_write_jpeg_files+0x208>)
 8001f26:	f001 fc93 	bl	8003850 <HAL_GPIO_WritePin>
//			snprintf(filename, filename_len+1, "/%d.jpg", frame_num);
//			printf("%s\r\n", filename);
//
//			f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
//			free(filename);
			i = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2110      	movs	r1, #16
 8001f34:	481e      	ldr	r0, [pc, #120]	; (8001fb0 <read_fifo_and_write_jpeg_files+0x208>)
 8001f36:	f001 fc8b 	bl	8003850 <HAL_GPIO_WritePin>
			OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 8001f3a:	4818      	ldr	r0, [pc, #96]	; (8001f9c <read_fifo_and_write_jpeg_files+0x1f4>)
 8001f3c:	f7ff f94d 	bl	80011da <OV5462_request_FIFO_burst>
			buf[i++] = temp_last;
 8001f40:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 8001f4a:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8001f4e:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8001f52:	f897 140f 	ldrb.w	r1, [r7, #1039]	; 0x40f
 8001f56:	54d1      	strb	r1, [r2, r3]
			buf[i++] = temp;
 8001f58:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	f8c7 2410 	str.w	r2, [r7, #1040]	; 0x410
 8001f62:	f897 1407 	ldrb.w	r1, [r7, #1031]	; 0x407
 8001f66:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8001f6a:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8001f6e:	54d1      	strb	r1, [r2, r3]
	while (length--) {
 8001f70:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001f74:	1e5a      	subs	r2, r3, #1
 8001f76:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f47f af57 	bne.w	8001e2e <read_fifo_and_write_jpeg_files+0x86>
		}
	}

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8001f80:	2201      	movs	r2, #1
 8001f82:	2110      	movs	r1, #16
 8001f84:	480a      	ldr	r0, [pc, #40]	; (8001fb0 <read_fifo_and_write_jpeg_files+0x208>)
 8001f86:	f001 fc63 	bl	8003850 <HAL_GPIO_WritePin>
	is_header = 0;
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <read_fifo_and_write_jpeg_files+0x218>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

	return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000c74 	.word	0x20000c74
 8001fa0:	0800bf04 	.word	0x0800bf04
 8001fa4:	007ffffe 	.word	0x007ffffe
 8001fa8:	0800bf18 	.word	0x0800bf18
 8001fac:	0800bf2c 	.word	0x0800bf2c
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	0800bf78 	.word	0x0800bf78
 8001fb8:	20000838 	.word	0x20000838
 8001fbc:	20000c80 	.word	0x20000c80
 8001fc0:	20000c7c 	.word	0x20000c7c

08001fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fca:	f000 fedf 	bl	8002d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fce:	f000 f939 	bl	8002244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd2:	f000 faf1 	bl	80025b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001fd6:	f000 f9f3 	bl	80023c0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001fda:	f000 fa55 	bl	8002488 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001fde:	f000 fa89 	bl	80024f4 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001fe2:	f000 fabf 	bl	8002564 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001fe6:	f004 f9e5 	bl	80063b4 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001fea:	f000 f997 	bl	800231c <MX_ADC1_Init>
  MX_SPI1_Init();
 8001fee:	f000 fa15 	bl	800241c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2110      	movs	r1, #16
 8001ff6:	487e      	ldr	r0, [pc, #504]	; (80021f0 <main+0x22c>)
 8001ff8:	f001 fc2a 	bl	8003850 <HAL_GPIO_WritePin>
  	uint8_t buf[1] = { 0x00 }; // dummy write
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	703b      	strb	r3, [r7, #0]
  	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8002000:	4639      	mov	r1, r7
 8002002:	2364      	movs	r3, #100	; 0x64
 8002004:	2201      	movs	r2, #1
 8002006:	487b      	ldr	r0, [pc, #492]	; (80021f4 <main+0x230>)
 8002008:	f003 f8f3 	bl	80051f2 <HAL_SPI_Transmit>

  	ov5462.hi2c = &hi2c1;
 800200c:	4b7a      	ldr	r3, [pc, #488]	; (80021f8 <main+0x234>)
 800200e:	4a7b      	ldr	r2, [pc, #492]	; (80021fc <main+0x238>)
 8002010:	601a      	str	r2, [r3, #0]
	ov5462.hspi = &hspi1;
 8002012:	4b79      	ldr	r3, [pc, #484]	; (80021f8 <main+0x234>)
 8002014:	4a77      	ldr	r2, [pc, #476]	; (80021f4 <main+0x230>)
 8002016:	605a      	str	r2, [r3, #4]

	FRESULT fr;

	printf("program start!\r\n");
 8002018:	4879      	ldr	r0, [pc, #484]	; (8002200 <main+0x23c>)
 800201a:	f007 fe11 	bl	8009c40 <puts>

  	HAL_Delay(1000);
 800201e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002022:	f000 ff25 	bl	8002e70 <HAL_Delay>

  	while (1) {
		if(testSD()) {
 8002026:	f7ff fdd3 	bl	8001bd0 <testSD>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00c      	beq.n	800204a <main+0x86>
			printf("SD test FAIL! Retrying...\r\n");
 8002030:	4874      	ldr	r0, [pc, #464]	; (8002204 <main+0x240>)
 8002032:	f007 fe05 	bl	8009c40 <puts>
			f_mount(NULL, "/", 1);
 8002036:	2201      	movs	r2, #1
 8002038:	4973      	ldr	r1, [pc, #460]	; (8002208 <main+0x244>)
 800203a:	2000      	movs	r0, #0
 800203c:	f006 f89c 	bl	8008178 <f_mount>
			HAL_Delay(10000);
 8002040:	f242 7010 	movw	r0, #10000	; 0x2710
 8002044:	f000 ff14 	bl	8002e70 <HAL_Delay>
 8002048:	e7ed      	b.n	8002026 <main+0x62>
		} else {
			printf("SD test PASS!\r\n");
 800204a:	4870      	ldr	r0, [pc, #448]	; (800220c <main+0x248>)
 800204c:	f007 fdf8 	bl	8009c40 <puts>
			break;
		}
  	}

  	while (1) {
  		OV5462_write_spi_reg(&ov5462, 0x00, 0x25);
 8002050:	2225      	movs	r2, #37	; 0x25
 8002052:	2100      	movs	r1, #0
 8002054:	4868      	ldr	r0, [pc, #416]	; (80021f8 <main+0x234>)
 8002056:	f7fe ffdd 	bl	8001014 <OV5462_write_spi_reg>
  		uint8_t tmp = OV5462_read_spi_reg(&ov5462, 0x00);
 800205a:	2100      	movs	r1, #0
 800205c:	4866      	ldr	r0, [pc, #408]	; (80021f8 <main+0x234>)
 800205e:	f7ff f809 	bl	8001074 <OV5462_read_spi_reg>
 8002062:	4603      	mov	r3, r0
 8002064:	75bb      	strb	r3, [r7, #22]

  		if (tmp == 0x25) {
 8002066:	7dbb      	ldrb	r3, [r7, #22]
 8002068:	2b25      	cmp	r3, #37	; 0x25
 800206a:	d103      	bne.n	8002074 <main+0xb0>
  		printf("SPI Test PASS!\r\n");
 800206c:	4868      	ldr	r0, [pc, #416]	; (8002210 <main+0x24c>)
 800206e:	f007 fde7 	bl	8009c40 <puts>
  		break; // continue to program
 8002072:	e007      	b.n	8002084 <main+0xc0>
  		} else {
  		printf("SPI Test FAIL!\r\n");
 8002074:	4867      	ldr	r0, [pc, #412]	; (8002214 <main+0x250>)
 8002076:	f007 fde3 	bl	8009c40 <puts>
  		HAL_Delay(1000);
 800207a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800207e:	f000 fef7 	bl	8002e70 <HAL_Delay>
  	while (1) {
 8002082:	e7e5      	b.n	8002050 <main+0x8c>
  		}
  	}

  	while (1) {
  		uint8_t upper = OV5462_read_i2c_reg(&ov5462, CHIPID_UPPER);
 8002084:	f243 010a 	movw	r1, #12298	; 0x300a
 8002088:	485b      	ldr	r0, [pc, #364]	; (80021f8 <main+0x234>)
 800208a:	f7fe ff9b 	bl	8000fc4 <OV5462_read_i2c_reg>
 800208e:	4603      	mov	r3, r0
 8002090:	757b      	strb	r3, [r7, #21]
  		uint8_t lower = OV5462_read_i2c_reg(&ov5462, CHIPID_LOWER);
 8002092:	f243 010b 	movw	r1, #12299	; 0x300b
 8002096:	4858      	ldr	r0, [pc, #352]	; (80021f8 <main+0x234>)
 8002098:	f7fe ff94 	bl	8000fc4 <OV5462_read_i2c_reg>
 800209c:	4603      	mov	r3, r0
 800209e:	753b      	strb	r3, [r7, #20]

  		if (upper == 0x56 && lower == 0x42) {
 80020a0:	7d7b      	ldrb	r3, [r7, #21]
 80020a2:	2b56      	cmp	r3, #86	; 0x56
 80020a4:	d10d      	bne.n	80020c2 <main+0xfe>
 80020a6:	7d3b      	ldrb	r3, [r7, #20]
 80020a8:	2b42      	cmp	r3, #66	; 0x42
 80020aa:	d10a      	bne.n	80020c2 <main+0xfe>
  			printf("I2C Test PASS!\r\n");
 80020ac:	485a      	ldr	r0, [pc, #360]	; (8002218 <main+0x254>)
 80020ae:	f007 fdc7 	bl	8009c40 <puts>
  			break; // continue to program
 80020b2:	bf00      	nop
  			HAL_Delay(1000);
  		}
  	}

  	// camera init (sets to JPEG mode)
  	if (OV5462_init(&ov5462)) {
 80020b4:	4850      	ldr	r0, [pc, #320]	; (80021f8 <main+0x234>)
 80020b6:	f7ff f807 	bl	80010c8 <OV5462_init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <main+0x114>
 80020c0:	e007      	b.n	80020d2 <main+0x10e>
  			printf("I2C Test FAIL!\r\n");
 80020c2:	4856      	ldr	r0, [pc, #344]	; (800221c <main+0x258>)
 80020c4:	f007 fdbc 	bl	8009c40 <puts>
  			HAL_Delay(1000);
 80020c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020cc:	f000 fed0 	bl	8002e70 <HAL_Delay>
  	while (1) {
 80020d0:	e7d8      	b.n	8002084 <main+0xc0>
  		printf("Init fail!\r\n");
 80020d2:	4853      	ldr	r0, [pc, #332]	; (8002220 <main+0x25c>)
 80020d4:	f007 fdb4 	bl	8009c40 <puts>
  	}

  	// clear fifo
  	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 80020d8:	2201      	movs	r2, #1
 80020da:	2104      	movs	r1, #4
 80020dc:	4846      	ldr	r0, [pc, #280]	; (80021f8 <main+0x234>)
 80020de:	f7fe ff99 	bl	8001014 <OV5462_write_spi_reg>

  	uint8_t camera_version = OV5462_read_spi_reg(&ov5462, 0x40);
 80020e2:	2140      	movs	r1, #64	; 0x40
 80020e4:	4844      	ldr	r0, [pc, #272]	; (80021f8 <main+0x234>)
 80020e6:	f7fe ffc5 	bl	8001074 <OV5462_read_spi_reg>
 80020ea:	4603      	mov	r3, r0
 80020ec:	74fb      	strb	r3, [r7, #19]
  	printf("Camera version: %u\r\n", camera_version);
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	4619      	mov	r1, r3
 80020f2:	484c      	ldr	r0, [pc, #304]	; (8002224 <main+0x260>)
 80020f4:	f007 fd1e 	bl	8009b34 <iprintf>
  	uint8_t frames;

  	// set continuous capture (depends on version)
  	if (camera_version && 0x70) {
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <main+0x140>
  		frames = 0xFF;
 80020fe:	23ff      	movs	r3, #255	; 0xff
 8002100:	75fb      	strb	r3, [r7, #23]
 8002102:	e001      	b.n	8002108 <main+0x144>
  	} else {
  		frames = 0x07;
 8002104:	2307      	movs	r3, #7
 8002106:	75fb      	strb	r3, [r7, #23]
  	}

  	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FRAMES, frames);
 8002108:	7dfb      	ldrb	r3, [r7, #23]
 800210a:	461a      	mov	r2, r3
 800210c:	2101      	movs	r1, #1
 800210e:	483a      	ldr	r0, [pc, #232]	; (80021f8 <main+0x234>)
 8002110:	f7fe ff80 	bl	8001014 <OV5462_write_spi_reg>

  	int is_capture_flag = 1;
 8002114:	2301      	movs	r3, #1
 8002116:	60fb      	str	r3, [r7, #12]

	if (is_capture_flag) {
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d05c      	beq.n	80021d8 <main+0x214>
	  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // flush
 800211e:	2201      	movs	r2, #1
 8002120:	2104      	movs	r1, #4
 8002122:	4835      	ldr	r0, [pc, #212]	; (80021f8 <main+0x234>)
 8002124:	f7fe ff76 	bl	8001014 <OV5462_write_spi_reg>
	  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 8002128:	2201      	movs	r2, #1
 800212a:	2104      	movs	r1, #4
 800212c:	4832      	ldr	r0, [pc, #200]	; (80021f8 <main+0x234>)
 800212e:	f7fe ff71 	bl	8001014 <OV5462_write_spi_reg>

	  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK); // start capture
 8002132:	2202      	movs	r2, #2
 8002134:	2104      	movs	r1, #4
 8002136:	4830      	ldr	r0, [pc, #192]	; (80021f8 <main+0x234>)
 8002138:	f7fe ff6c 	bl	8001014 <OV5462_write_spi_reg>

	  while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {};
 800213c:	bf00      	nop
 800213e:	2141      	movs	r1, #65	; 0x41
 8002140:	482d      	ldr	r0, [pc, #180]	; (80021f8 <main+0x234>)
 8002142:	f7fe ff97 	bl	8001074 <OV5462_read_spi_reg>
 8002146:	4603      	mov	r3, r0
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f6      	beq.n	800213e <main+0x17a>
	  int length = (int) OV5462_read_fifo_length(&ov5462);
 8002150:	4829      	ldr	r0, [pc, #164]	; (80021f8 <main+0x234>)
 8002152:	f7ff f81f 	bl	8001194 <OV5462_read_fifo_length>
 8002156:	4603      	mov	r3, r0
 8002158:	60bb      	str	r3, [r7, #8]

	  if (length < 0x3FFFFF) {
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4a32      	ldr	r2, [pc, #200]	; (8002228 <main+0x264>)
 800215e:	4293      	cmp	r3, r2
 8002160:	dc1c      	bgt.n	800219c <main+0x1d8>
		  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // flush
 8002162:	2201      	movs	r2, #1
 8002164:	2104      	movs	r1, #4
 8002166:	4824      	ldr	r0, [pc, #144]	; (80021f8 <main+0x234>)
 8002168:	f7fe ff54 	bl	8001014 <OV5462_write_spi_reg>
		  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 800216c:	2201      	movs	r2, #1
 800216e:	2104      	movs	r1, #4
 8002170:	4821      	ldr	r0, [pc, #132]	; (80021f8 <main+0x234>)
 8002172:	f7fe ff4f 	bl	8001014 <OV5462_write_spi_reg>

		  OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK); // start capture
 8002176:	2202      	movs	r2, #2
 8002178:	2104      	movs	r1, #4
 800217a:	481f      	ldr	r0, [pc, #124]	; (80021f8 <main+0x234>)
 800217c:	f7fe ff4a 	bl	8001014 <OV5462_write_spi_reg>
		  while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {};
 8002180:	bf00      	nop
 8002182:	2141      	movs	r1, #65	; 0x41
 8002184:	481c      	ldr	r0, [pc, #112]	; (80021f8 <main+0x234>)
 8002186:	f7fe ff75 	bl	8001074 <OV5462_read_spi_reg>
 800218a:	4603      	mov	r3, r0
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f6      	beq.n	8002182 <main+0x1be>
		  printf("Capture done\r\n");
 8002194:	4825      	ldr	r0, [pc, #148]	; (800222c <main+0x268>)
 8002196:	f007 fd53 	bl	8009c40 <puts>
 800219a:	e002      	b.n	80021a2 <main+0x1de>
	  } else {
		  printf("Capture done\r\n");
 800219c:	4823      	ldr	r0, [pc, #140]	; (800222c <main+0x268>)
 800219e:	f007 fd4f 	bl	8009c40 <puts>
	  }

	  int why = read_fifo_and_write_jpeg_files();
 80021a2:	f7ff fe01 	bl	8001da8 <read_fifo_and_write_jpeg_files>
 80021a6:	6078      	str	r0, [r7, #4]
	  if (why) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d004      	beq.n	80021b8 <main+0x1f4>
		  printf("movie save failed (%i) \r\n", why);
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	481f      	ldr	r0, [pc, #124]	; (8002230 <main+0x26c>)
 80021b2:	f007 fcbf 	bl	8009b34 <iprintf>
 80021b6:	e002      	b.n	80021be <main+0x1fa>
	  } else {
		  printf("movie save success \r\n");
 80021b8:	481e      	ldr	r0, [pc, #120]	; (8002234 <main+0x270>)
 80021ba:	f007 fd41 	bl	8009c40 <puts>
	  }

	  fr = f_close(&fil);
 80021be:	481e      	ldr	r0, [pc, #120]	; (8002238 <main+0x274>)
 80021c0:	f006 fd5d 	bl	8008c7e <f_close>
 80021c4:	4603      	mov	r3, r0
 80021c6:	70fb      	strb	r3, [r7, #3]
	  if (fr) printf("%i\r\n", fr);
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <main+0x214>
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	4619      	mov	r1, r3
 80021d2:	481a      	ldr	r0, [pc, #104]	; (800223c <main+0x278>)
 80021d4:	f007 fcae 	bl	8009b34 <iprintf>
	 }

  	if(f_mount(NULL, "/", 1) != FR_OK)
 80021d8:	2201      	movs	r2, #1
 80021da:	490b      	ldr	r1, [pc, #44]	; (8002208 <main+0x244>)
 80021dc:	2000      	movs	r0, #0
 80021de:	f005 ffcb 	bl	8008178 <f_mount>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <main+0x22a>
  		printf("Failed to unmount\r\n");
 80021e8:	4815      	ldr	r0, [pc, #84]	; (8002240 <main+0x27c>)
 80021ea:	f007 fd29 	bl	8009c40 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <main+0x22a>
 80021f0:	40020800 	.word	0x40020800
 80021f4:	200002b4 	.word	0x200002b4
 80021f8:	20000c74 	.word	0x20000c74
 80021fc:	20000260 	.word	0x20000260
 8002200:	0800bf84 	.word	0x0800bf84
 8002204:	0800bf94 	.word	0x0800bf94
 8002208:	0800bdc0 	.word	0x0800bdc0
 800220c:	0800bfb0 	.word	0x0800bfb0
 8002210:	0800bfc0 	.word	0x0800bfc0
 8002214:	0800bfd0 	.word	0x0800bfd0
 8002218:	0800bfe0 	.word	0x0800bfe0
 800221c:	0800bff0 	.word	0x0800bff0
 8002220:	0800c000 	.word	0x0800c000
 8002224:	0800c00c 	.word	0x0800c00c
 8002228:	003ffffe 	.word	0x003ffffe
 800222c:	0800c024 	.word	0x0800c024
 8002230:	0800c034 	.word	0x0800c034
 8002234:	0800c050 	.word	0x0800c050
 8002238:	20000838 	.word	0x20000838
 800223c:	0800bf60 	.word	0x0800bf60
 8002240:	0800c068 	.word	0x0800c068

08002244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b094      	sub	sp, #80	; 0x50
 8002248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224a:	f107 0320 	add.w	r3, r7, #32
 800224e:	2230      	movs	r2, #48	; 0x30
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f006 fffc 	bl	8009250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	4b29      	ldr	r3, [pc, #164]	; (8002314 <SystemClock_Config+0xd0>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	4a28      	ldr	r2, [pc, #160]	; (8002314 <SystemClock_Config+0xd0>)
 8002272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002276:	6413      	str	r3, [r2, #64]	; 0x40
 8002278:	4b26      	ldr	r3, [pc, #152]	; (8002314 <SystemClock_Config+0xd0>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002284:	2300      	movs	r3, #0
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	4b23      	ldr	r3, [pc, #140]	; (8002318 <SystemClock_Config+0xd4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002290:	4a21      	ldr	r2, [pc, #132]	; (8002318 <SystemClock_Config+0xd4>)
 8002292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <SystemClock_Config+0xd4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a8:	2301      	movs	r3, #1
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ac:	2310      	movs	r3, #16
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b0:	2302      	movs	r3, #2
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80022b8:	2310      	movs	r3, #16
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80022c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022c2:	2304      	movs	r3, #4
 80022c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022c6:	2307      	movs	r3, #7
 80022c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ca:	f107 0320 	add.w	r3, r7, #32
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fa6e 	bl	80047b0 <HAL_RCC_OscConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022da:	f000 fa01 	bl	80026e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022de:	230f      	movs	r3, #15
 80022e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e2:	2302      	movs	r3, #2
 80022e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	2102      	movs	r1, #2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f002 fcd0 	bl	8004ca0 <HAL_RCC_ClockConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002306:	f000 f9eb 	bl	80026e0 <Error_Handler>
  }
}
 800230a:	bf00      	nop
 800230c:	3750      	adds	r7, #80	; 0x50
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	40007000 	.word	0x40007000

0800231c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002322:	463b      	mov	r3, r7
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800232e:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <MX_ADC1_Init+0x98>)
 8002330:	4a21      	ldr	r2, [pc, #132]	; (80023b8 <MX_ADC1_Init+0x9c>)
 8002332:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002334:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <MX_ADC1_Init+0x98>)
 8002336:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800233a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <MX_ADC1_Init+0x98>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002342:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <MX_ADC1_Init+0x98>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <MX_ADC1_Init+0x98>)
 800234a:	2200      	movs	r2, #0
 800234c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800234e:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <MX_ADC1_Init+0x98>)
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <MX_ADC1_Init+0x98>)
 8002358:	2200      	movs	r2, #0
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <MX_ADC1_Init+0x98>)
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <MX_ADC1_Init+0xa0>)
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <MX_ADC1_Init+0x98>)
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <MX_ADC1_Init+0x98>)
 800236a:	2201      	movs	r2, #1
 800236c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_ADC1_Init+0x98>)
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <MX_ADC1_Init+0x98>)
 8002378:	2201      	movs	r2, #1
 800237a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800237c:	480d      	ldr	r0, [pc, #52]	; (80023b4 <MX_ADC1_Init+0x98>)
 800237e:	f000 fd9b 	bl	8002eb8 <HAL_ADC_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002388:	f000 f9aa 	bl	80026e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800238c:	2308      	movs	r3, #8
 800238e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002390:	2301      	movs	r3, #1
 8002392:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002398:	463b      	mov	r3, r7
 800239a:	4619      	mov	r1, r3
 800239c:	4805      	ldr	r0, [pc, #20]	; (80023b4 <MX_ADC1_Init+0x98>)
 800239e:	f000 fdcf 	bl	8002f40 <HAL_ADC_ConfigChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80023a8:	f000 f99a 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000218 	.word	0x20000218
 80023b8:	40012000 	.word	0x40012000
 80023bc:	0f000001 	.word	0x0f000001

080023c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_I2C1_Init+0x50>)
 80023c6:	4a13      	ldr	r2, [pc, #76]	; (8002414 <MX_I2C1_Init+0x54>)
 80023c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_I2C1_Init+0x50>)
 80023cc:	4a12      	ldr	r2, [pc, #72]	; (8002418 <MX_I2C1_Init+0x58>)
 80023ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_I2C1_Init+0x50>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <MX_I2C1_Init+0x50>)
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <MX_I2C1_Init+0x50>)
 80023de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <MX_I2C1_Init+0x50>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <MX_I2C1_Init+0x50>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <MX_I2C1_Init+0x50>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <MX_I2C1_Init+0x50>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023fc:	4804      	ldr	r0, [pc, #16]	; (8002410 <MX_I2C1_Init+0x50>)
 80023fe:	f001 fa41 	bl	8003884 <HAL_I2C_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002408:	f000 f96a 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000260 	.word	0x20000260
 8002414:	40005400 	.word	0x40005400
 8002418:	000186a0 	.word	0x000186a0

0800241c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_SPI1_Init+0x64>)
 8002422:	4a18      	ldr	r2, [pc, #96]	; (8002484 <MX_SPI1_Init+0x68>)
 8002424:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <MX_SPI1_Init+0x64>)
 8002428:	f44f 7282 	mov.w	r2, #260	; 0x104
 800242c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_SPI1_Init+0x64>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MX_SPI1_Init+0x64>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_SPI1_Init+0x64>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_SPI1_Init+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_SPI1_Init+0x64>)
 8002448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_SPI1_Init+0x64>)
 8002450:	2218      	movs	r2, #24
 8002452:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <MX_SPI1_Init+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_SPI1_Init+0x64>)
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <MX_SPI1_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_SPI1_Init+0x64>)
 8002468:	220a      	movs	r2, #10
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800246c:	4804      	ldr	r0, [pc, #16]	; (8002480 <MX_SPI1_Init+0x64>)
 800246e:	f002 fe37 	bl	80050e0 <HAL_SPI_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002478:	f000 f932 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	200002b4 	.word	0x200002b4
 8002484:	40013000 	.word	0x40013000

08002488 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800248c:	4b17      	ldr	r3, [pc, #92]	; (80024ec <MX_SPI2_Init+0x64>)
 800248e:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <MX_SPI2_Init+0x68>)
 8002490:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002492:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_SPI2_Init+0x64>)
 8002494:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002498:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_SPI2_Init+0x64>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <MX_SPI2_Init+0x64>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <MX_SPI2_Init+0x64>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <MX_SPI2_Init+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_SPI2_Init+0x64>)
 80024b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <MX_SPI2_Init+0x64>)
 80024bc:	2210      	movs	r2, #16
 80024be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <MX_SPI2_Init+0x64>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_SPI2_Init+0x64>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <MX_SPI2_Init+0x64>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_SPI2_Init+0x64>)
 80024d4:	220a      	movs	r2, #10
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <MX_SPI2_Init+0x64>)
 80024da:	f002 fe01 	bl	80050e0 <HAL_SPI_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024e4:	f000 f8fc 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2000030c 	.word	0x2000030c
 80024f0:	40003800 	.word	0x40003800

080024f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <MX_SPI3_Init+0x68>)
 80024fa:	4a19      	ldr	r2, [pc, #100]	; (8002560 <MX_SPI3_Init+0x6c>)
 80024fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <MX_SPI3_Init+0x68>)
 8002500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002504:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <MX_SPI3_Init+0x68>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <MX_SPI3_Init+0x68>)
 800250e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002512:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_SPI3_Init+0x68>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <MX_SPI3_Init+0x68>)
 800251c:	2200      	movs	r2, #0
 800251e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_SPI3_Init+0x68>)
 8002522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002526:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <MX_SPI3_Init+0x68>)
 800252a:	2218      	movs	r2, #24
 800252c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <MX_SPI3_Init+0x68>)
 8002530:	2200      	movs	r2, #0
 8002532:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <MX_SPI3_Init+0x68>)
 8002536:	2200      	movs	r2, #0
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <MX_SPI3_Init+0x68>)
 800253c:	2200      	movs	r2, #0
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_SPI3_Init+0x68>)
 8002542:	220a      	movs	r2, #10
 8002544:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_SPI3_Init+0x68>)
 8002548:	f002 fdca 	bl	80050e0 <HAL_SPI_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8002552:	f000 f8c5 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000364 	.word	0x20000364
 8002560:	40003c00 	.word	0x40003c00

08002564 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <MX_USART2_UART_Init+0x4c>)
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <MX_USART2_UART_Init+0x50>)
 800256c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <MX_USART2_UART_Init+0x4c>)
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <MX_USART2_UART_Init+0x4c>)
 800258a:	220c      	movs	r2, #12
 800258c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800259a:	4805      	ldr	r0, [pc, #20]	; (80025b0 <MX_USART2_UART_Init+0x4c>)
 800259c:	f003 fb48 	bl	8005c30 <HAL_UART_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025a6:	f000 f89b 	bl	80026e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200003bc 	.word	0x200003bc
 80025b4:	40004400 	.word	0x40004400

080025b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	4b37      	ldr	r3, [pc, #220]	; (80026b0 <MX_GPIO_Init+0xf8>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a36      	ldr	r2, [pc, #216]	; (80026b0 <MX_GPIO_Init+0xf8>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <MX_GPIO_Init+0xf8>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <MX_GPIO_Init+0xf8>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a2f      	ldr	r2, [pc, #188]	; (80026b0 <MX_GPIO_Init+0xf8>)
 80025f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <MX_GPIO_Init+0xf8>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <MX_GPIO_Init+0xf8>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <MX_GPIO_Init+0xf8>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <MX_GPIO_Init+0xf8>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <MX_GPIO_Init+0xf8>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <MX_GPIO_Init+0xf8>)
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <MX_GPIO_Init+0xf8>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_SPI2_CS_Pin|CAM_SPI1_CS_Pin, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	2112      	movs	r1, #18
 8002642:	481c      	ldr	r0, [pc, #112]	; (80026b4 <MX_GPIO_Init+0xfc>)
 8002644:	f001 f904 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_SPI2_CS_GPIO_Port, DAC_SPI2_CS_Pin, GPIO_PIN_RESET);
 8002648:	2200      	movs	r2, #0
 800264a:	2104      	movs	r1, #4
 800264c:	481a      	ldr	r0, [pc, #104]	; (80026b8 <MX_GPIO_Init+0x100>)
 800264e:	f001 f8ff 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002658:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800265c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	4812      	ldr	r0, [pc, #72]	; (80026b4 <MX_GPIO_Init+0xfc>)
 800266a:	f000 ff6d 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SPI2_CS_Pin CAM_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SD_SPI2_CS_Pin|CAM_SPI1_CS_Pin;
 800266e:	2312      	movs	r3, #18
 8002670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002672:	2301      	movs	r3, #1
 8002674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	480b      	ldr	r0, [pc, #44]	; (80026b4 <MX_GPIO_Init+0xfc>)
 8002686:	f000 ff5f 	bl	8003548 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_SPI2_CS_Pin */
  GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 800268a:	2304      	movs	r3, #4
 800268c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4805      	ldr	r0, [pc, #20]	; (80026b8 <MX_GPIO_Init+0x100>)
 80026a2:	f000 ff51 	bl	8003548 <HAL_GPIO_Init>

}
 80026a6:	bf00      	nop
 80026a8:	3728      	adds	r7, #40	; 0x28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020400 	.word	0x40020400

080026bc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80026c4:	1d39      	adds	r1, r7, #4
 80026c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ca:	2201      	movs	r2, #1
 80026cc:	4803      	ldr	r0, [pc, #12]	; (80026dc <__io_putchar+0x20>)
 80026ce:	f003 fafc 	bl	8005cca <HAL_UART_Transmit>
  return ch;
 80026d2:	687b      	ldr	r3, [r7, #4]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	200003bc 	.word	0x200003bc

080026e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e4:	b672      	cpsid	i
}
 80026e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <Error_Handler+0x8>
	...

080026ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_MspInit+0x4c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <HAL_MspInit+0x4c>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_MspInit+0x4c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_MspInit+0x4c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_MspInit+0x4c>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_MspInit+0x4c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800272a:	2007      	movs	r0, #7
 800272c:	f000 fed8 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40023800 	.word	0x40023800

0800273c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a24      	ldr	r2, [pc, #144]	; (80027ec <HAL_ADC_MspInit+0xb0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d141      	bne.n	80027e2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <HAL_ADC_MspInit+0xb4>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <HAL_ADC_MspInit+0xb4>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_ADC_MspInit+0xb4>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_ADC_MspInit+0xb4>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_ADC_MspInit+0xb4>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_ADC_MspInit+0xb4>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_ADC_MspInit+0xb4>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <HAL_ADC_MspInit+0xb4>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_ADC_MspInit+0xb4>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_IN10_Pin;
 80027b2:	2301      	movs	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027b6:	2303      	movs	r3, #3
 80027b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	480b      	ldr	r0, [pc, #44]	; (80027f4 <HAL_ADC_MspInit+0xb8>)
 80027c6:	f000 febf 	bl	8003548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 80027ca:	2303      	movs	r3, #3
 80027cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ce:	2303      	movs	r3, #3
 80027d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4806      	ldr	r0, [pc, #24]	; (80027f8 <HAL_ADC_MspInit+0xbc>)
 80027de:	f000 feb3 	bl	8003548 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	; 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40012000 	.word	0x40012000
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020800 	.word	0x40020800
 80027f8:	40020400 	.word	0x40020400

080027fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a19      	ldr	r2, [pc, #100]	; (8002880 <HAL_I2C_MspInit+0x84>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d12b      	bne.n	8002876 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_I2C_MspInit+0x88>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a17      	ldr	r2, [pc, #92]	; (8002884 <HAL_I2C_MspInit+0x88>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_I2C_MspInit+0x88>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 800283a:	23c0      	movs	r3, #192	; 0xc0
 800283c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800283e:	2312      	movs	r3, #18
 8002840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002846:	2303      	movs	r3, #3
 8002848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800284a:	2304      	movs	r3, #4
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4619      	mov	r1, r3
 8002854:	480c      	ldr	r0, [pc, #48]	; (8002888 <HAL_I2C_MspInit+0x8c>)
 8002856:	f000 fe77 	bl	8003548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_I2C_MspInit+0x88>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a08      	ldr	r2, [pc, #32]	; (8002884 <HAL_I2C_MspInit+0x88>)
 8002864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_I2C_MspInit+0x88>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002876:	bf00      	nop
 8002878:	3728      	adds	r7, #40	; 0x28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40005400 	.word	0x40005400
 8002884:	40023800 	.word	0x40023800
 8002888:	40020400 	.word	0x40020400

0800288c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08e      	sub	sp, #56	; 0x38
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a5b      	ldr	r2, [pc, #364]	; (8002a18 <HAL_SPI_MspInit+0x18c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d12c      	bne.n	8002908 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	623b      	str	r3, [r7, #32]
 80028b2:	4b5a      	ldr	r3, [pc, #360]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a59      	ldr	r2, [pc, #356]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80028b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c6:	623b      	str	r3, [r7, #32]
 80028c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a52      	ldr	r2, [pc, #328]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = CAM_SPI1_SCK_Pin|CAM_SPI1_MISO_Pin|CAM_SPI1_MOSI_Pin;
 80028e6:	23e0      	movs	r3, #224	; 0xe0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028f6:	2305      	movs	r3, #5
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fe:	4619      	mov	r1, r3
 8002900:	4847      	ldr	r0, [pc, #284]	; (8002a20 <HAL_SPI_MspInit+0x194>)
 8002902:	f000 fe21 	bl	8003548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002906:	e082      	b.n	8002a0e <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a45      	ldr	r2, [pc, #276]	; (8002a24 <HAL_SPI_MspInit+0x198>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d14b      	bne.n	80029aa <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a40      	ldr	r2, [pc, #256]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a39      	ldr	r2, [pc, #228]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	4b33      	ldr	r3, [pc, #204]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a32      	ldr	r2, [pc, #200]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin|SD_SPI2_MOSI_Pin;
 8002966:	230c      	movs	r3, #12
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002976:	2305      	movs	r3, #5
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800297a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297e:	4619      	mov	r1, r3
 8002980:	4829      	ldr	r0, [pc, #164]	; (8002a28 <HAL_SPI_MspInit+0x19c>)
 8002982:	f000 fde1 	bl	8003548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8002986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002994:	2303      	movs	r3, #3
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002998:	2305      	movs	r3, #5
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800299c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a0:	4619      	mov	r1, r3
 80029a2:	4822      	ldr	r0, [pc, #136]	; (8002a2c <HAL_SPI_MspInit+0x1a0>)
 80029a4:	f000 fdd0 	bl	8003548 <HAL_GPIO_Init>
}
 80029a8:	e031      	b.n	8002a0e <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <HAL_SPI_MspInit+0x1a4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d12c      	bne.n	8002a0e <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80029be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c2:	6413      	str	r3, [r2, #64]	; 0x40
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4a10      	ldr	r2, [pc, #64]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	6313      	str	r3, [r2, #48]	; 0x30
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <HAL_SPI_MspInit+0x190>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DAC_SPI3_SCK_Pin|DAC_SPI3_MOSI_Pin;
 80029ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029fe:	2306      	movs	r3, #6
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a06:	4619      	mov	r1, r3
 8002a08:	4807      	ldr	r0, [pc, #28]	; (8002a28 <HAL_SPI_MspInit+0x19c>)
 8002a0a:	f000 fd9d 	bl	8003548 <HAL_GPIO_Init>
}
 8002a0e:	bf00      	nop
 8002a10:	3738      	adds	r7, #56	; 0x38
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40013000 	.word	0x40013000
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020000 	.word	0x40020000
 8002a24:	40003800 	.word	0x40003800
 8002a28:	40020800 	.word	0x40020800
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	40003c00 	.word	0x40003c00

08002a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a19      	ldr	r2, [pc, #100]	; (8002ab8 <HAL_UART_MspInit+0x84>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d12b      	bne.n	8002aae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	4b18      	ldr	r3, [pc, #96]	; (8002abc <HAL_UART_MspInit+0x88>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_UART_MspInit+0x88>)
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_UART_MspInit+0x88>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <HAL_UART_MspInit+0x88>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a10      	ldr	r2, [pc, #64]	; (8002abc <HAL_UART_MspInit+0x88>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_UART_MspInit+0x88>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8002a8e:	230c      	movs	r3, #12
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a9e:	2307      	movs	r3, #7
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <HAL_UART_MspInit+0x8c>)
 8002aaa:	f000 fd4d 	bl	8003548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aae:	bf00      	nop
 8002ab0:	3728      	adds	r7, #40	; 0x28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40004400 	.word	0x40004400
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000

08002ac4 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile extern uint8_t Timer1, Timer2;

void SDTimer_Handler() {
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

	if (Timer1 > 0) {
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <SDTimer_Handler+0x40>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <SDTimer_Handler+0x1c>
		--Timer1;
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <SDTimer_Handler+0x40>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <SDTimer_Handler+0x40>)
 8002ade:	701a      	strb	r2, [r3, #0]
	}

	if (Timer2 > 0) {
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <SDTimer_Handler+0x44>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <SDTimer_Handler+0x34>
		--Timer2;
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <SDTimer_Handler+0x44>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <SDTimer_Handler+0x44>)
 8002af6:	701a      	strb	r2, [r3, #0]
	}
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000210 	.word	0x20000210
 8002b08:	20000212 	.word	0x20000212

08002b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <NMI_Handler+0x4>

08002b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <HardFault_Handler+0x4>

08002b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <MemManage_Handler+0x4>

08002b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <BusFault_Handler+0x4>

08002b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <UsageFault_Handler+0x4>

08002b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <SysTick_Handler+0x30>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <SysTick_Handler+0x30>)
 8002b64:	701a      	strb	r2, [r3, #0]

	if (FatFsCnt >= 10) {
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <SysTick_Handler+0x30>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b09      	cmp	r3, #9
 8002b6e:	d904      	bls.n	8002b7a <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SysTick_Handler+0x30>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002b76:	f7ff ffa5 	bl	8002ac4 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b7a:	f000 f959 	bl	8002e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000c84 	.word	0x20000c84

08002b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
	return 1;
 8002b8c:	2301      	movs	r3, #1
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_kill>:

int _kill(int pid, int sig)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ba2:	f006 fb2b 	bl	80091fc <__errno>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2216      	movs	r2, #22
 8002baa:	601a      	str	r2, [r3, #0]
	return -1;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_exit>:

void _exit (int status)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ffe7 	bl	8002b98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bca:	e7fe      	b.n	8002bca <_exit+0x12>

08002bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e00a      	b.n	8002bf4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bde:	f3af 8000 	nop.w
 8002be2:	4601      	mov	r1, r0
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	60ba      	str	r2, [r7, #8]
 8002bea:	b2ca      	uxtb	r2, r1
 8002bec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	dbf0      	blt.n	8002bde <_read+0x12>
	}

return len;
 8002bfc:	687b      	ldr	r3, [r7, #4]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e009      	b.n	8002c2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	60ba      	str	r2, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fd4b 	bl	80026bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	dbf1      	blt.n	8002c18 <_write+0x12>
	}
	return len;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <_close>:

int _close(int file)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
	return -1;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c66:	605a      	str	r2, [r3, #4]
	return 0;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <_isatty>:

int _isatty(int file)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
	return 1;
 8002c7e:	2301      	movs	r3, #1
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
	return 0;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <_sbrk+0x5c>)
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <_sbrk+0x60>)
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <_sbrk+0x64>)
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <_sbrk+0x68>)
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d207      	bcs.n	8002ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cd8:	f006 fa90 	bl	80091fc <__errno>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	220c      	movs	r2, #12
 8002ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	e009      	b.n	8002cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <_sbrk+0x64>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <_sbrk+0x64>)
 8002cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20018000 	.word	0x20018000
 8002d08:	00000400 	.word	0x00000400
 8002d0c:	20000c88 	.word	0x20000c88
 8002d10:	20000ce0 	.word	0x20000ce0

08002d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <SystemInit+0x20>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <SystemInit+0x20>)
 8002d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d3c:	480d      	ldr	r0, [pc, #52]	; (8002d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d3e:	490e      	ldr	r1, [pc, #56]	; (8002d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d40:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d44:	e002      	b.n	8002d4c <LoopCopyDataInit>

08002d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4a:	3304      	adds	r3, #4

08002d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d50:	d3f9      	bcc.n	8002d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d54:	4c0b      	ldr	r4, [pc, #44]	; (8002d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d58:	e001      	b.n	8002d5e <LoopFillZerobss>

08002d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d5c:	3204      	adds	r2, #4

08002d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d60:	d3fb      	bcc.n	8002d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d62:	f7ff ffd7 	bl	8002d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d66:	f006 fa4f 	bl	8009208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d6a:	f7ff f92b 	bl	8001fc4 <main>
  bx  lr    
 8002d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d78:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002d7c:	0800cfec 	.word	0x0800cfec
  ldr r2, =_sbss
 8002d80:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002d84:	20000cdc 	.word	0x20000cdc

08002d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC_IRQHandler>
	...

08002d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_Init+0x40>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <HAL_Init+0x40>)
 8002d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <HAL_Init+0x40>)
 8002da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_Init+0x40>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_Init+0x40>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db4:	2003      	movs	r0, #3
 8002db6:	f000 fb93 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f000 f808 	bl	8002dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc0:	f7ff fc94 	bl	80026ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023c00 	.word	0x40023c00

08002dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <HAL_InitTick+0x54>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_InitTick+0x58>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fb9d 	bl	800352e <HAL_SYSTICK_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00e      	b.n	8002e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b0f      	cmp	r3, #15
 8002e02:	d80a      	bhi.n	8002e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e04:	2200      	movs	r2, #0
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	f000 fb73 	bl	80034f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e10:	4a06      	ldr	r2, [pc, #24]	; (8002e2c <HAL_InitTick+0x5c>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000004 	.word	0x20000004
 8002e28:	2000000c 	.word	0x2000000c
 8002e2c:	20000008 	.word	0x20000008

08002e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_IncTick+0x20>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_IncTick+0x24>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <HAL_IncTick+0x24>)
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	2000000c 	.word	0x2000000c
 8002e54:	20000c8c 	.word	0x20000c8c

08002e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_GetTick+0x14>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000c8c 	.word	0x20000c8c

08002e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7ff ffee 	bl	8002e58 <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d005      	beq.n	8002e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_Delay+0x44>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4413      	add	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e96:	bf00      	nop
 8002e98:	f7ff ffde 	bl	8002e58 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d8f7      	bhi.n	8002e98 <HAL_Delay+0x28>
  {
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	2000000c 	.word	0x2000000c

08002eb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e033      	b.n	8002f36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff fc30 	bl	800273c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d118      	bne.n	8002f28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002efe:	f023 0302 	bic.w	r3, r3, #2
 8002f02:	f043 0202 	orr.w	r2, r3, #2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f93a 	bl	8003184 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f023 0303 	bic.w	r3, r3, #3
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
 8002f26:	e001      	b.n	8002f2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1c>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e105      	b.n	8003168 <HAL_ADC_ConfigChannel+0x228>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b09      	cmp	r3, #9
 8002f6a:	d925      	bls.n	8002fb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68d9      	ldr	r1, [r3, #12]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b1e      	subs	r3, #30
 8002f82:	2207      	movs	r2, #7
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	400a      	ands	r2, r1
 8002f90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68d9      	ldr	r1, [r3, #12]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4403      	add	r3, r0
 8002faa:	3b1e      	subs	r3, #30
 8002fac:	409a      	lsls	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	e022      	b.n	8002ffe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6919      	ldr	r1, [r3, #16]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	2207      	movs	r2, #7
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	400a      	ands	r2, r1
 8002fda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6919      	ldr	r1, [r3, #16]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4618      	mov	r0, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4403      	add	r3, r0
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b06      	cmp	r3, #6
 8003004:	d824      	bhi.n	8003050 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	3b05      	subs	r3, #5
 8003018:	221f      	movs	r2, #31
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	400a      	ands	r2, r1
 8003026:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b05      	subs	r3, #5
 8003042:	fa00 f203 	lsl.w	r2, r0, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	635a      	str	r2, [r3, #52]	; 0x34
 800304e:	e04c      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b0c      	cmp	r3, #12
 8003056:	d824      	bhi.n	80030a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	3b23      	subs	r3, #35	; 0x23
 800306a:	221f      	movs	r2, #31
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43da      	mvns	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	400a      	ands	r2, r1
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	4618      	mov	r0, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b23      	subs	r3, #35	; 0x23
 8003094:	fa00 f203 	lsl.w	r2, r0, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
 80030a0:	e023      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	3b41      	subs	r3, #65	; 0x41
 80030b4:	221f      	movs	r2, #31
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	400a      	ands	r2, r1
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	3b41      	subs	r3, #65	; 0x41
 80030de:	fa00 f203 	lsl.w	r2, r0, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_ADC_ConfigChannel+0x234>)
 80030ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a21      	ldr	r2, [pc, #132]	; (8003178 <HAL_ADC_ConfigChannel+0x238>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d109      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1cc>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b12      	cmp	r3, #18
 80030fe:	d105      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <HAL_ADC_ConfigChannel+0x238>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d123      	bne.n	800315e <HAL_ADC_ConfigChannel+0x21e>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b10      	cmp	r3, #16
 800311c:	d003      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x1e6>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b11      	cmp	r3, #17
 8003124:	d11b      	bne.n	800315e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b10      	cmp	r3, #16
 8003138:	d111      	bne.n	800315e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_ADC_ConfigChannel+0x23c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a10      	ldr	r2, [pc, #64]	; (8003180 <HAL_ADC_ConfigChannel+0x240>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	0c9a      	lsrs	r2, r3, #18
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003150:	e002      	b.n	8003158 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3b01      	subs	r3, #1
 8003156:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f9      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	40012300 	.word	0x40012300
 8003178:	40012000 	.word	0x40012000
 800317c:	20000004 	.word	0x20000004
 8003180:	431bde83 	.word	0x431bde83

08003184 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800318c:	4b79      	ldr	r3, [pc, #484]	; (8003374 <ADC_Init+0x1f0>)
 800318e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	021a      	lsls	r2, r3, #8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	4a58      	ldr	r2, [pc, #352]	; (8003378 <ADC_Init+0x1f4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d022      	beq.n	8003262 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800322a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6899      	ldr	r1, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800324c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	e00f      	b.n	8003282 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003280:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0202 	bic.w	r2, r2, #2
 8003290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7e1b      	ldrb	r3, [r3, #24]
 800329c:	005a      	lsls	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01b      	beq.n	80032e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	3b01      	subs	r3, #1
 80032dc:	035a      	lsls	r2, r3, #13
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	e007      	b.n	80032f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	3b01      	subs	r3, #1
 8003314:	051a      	lsls	r2, r3, #20
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800332c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6899      	ldr	r1, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800333a:	025a      	lsls	r2, r3, #9
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6899      	ldr	r1, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	029a      	lsls	r2, r3, #10
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	609a      	str	r2, [r3, #8]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40012300 	.word	0x40012300
 8003378:	0f000001 	.word	0x0f000001

0800337c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <__NVIC_SetPriorityGrouping+0x44>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003398:	4013      	ands	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ae:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <__NVIC_SetPriorityGrouping+0x44>)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	60d3      	str	r3, [r2, #12]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <__NVIC_GetPriorityGrouping+0x18>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	0a1b      	lsrs	r3, r3, #8
 80033ce:	f003 0307 	and.w	r3, r3, #7
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	db0a      	blt.n	800340a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	490c      	ldr	r1, [pc, #48]	; (800342c <__NVIC_SetPriority+0x4c>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	440b      	add	r3, r1
 8003404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003408:	e00a      	b.n	8003420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <__NVIC_SetPriority+0x50>)
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	3b04      	subs	r3, #4
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	440b      	add	r3, r1
 800341e:	761a      	strb	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000e100 	.word	0xe000e100
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf28      	it	cs
 8003452:	2304      	movcs	r3, #4
 8003454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3304      	adds	r3, #4
 800345a:	2b06      	cmp	r3, #6
 800345c:	d902      	bls.n	8003464 <NVIC_EncodePriority+0x30>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3b03      	subs	r3, #3
 8003462:	e000      	b.n	8003466 <NVIC_EncodePriority+0x32>
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	f04f 32ff 	mov.w	r2, #4294967295
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800347c:	f04f 31ff 	mov.w	r1, #4294967295
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43d9      	mvns	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	4313      	orrs	r3, r2
         );
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ac:	d301      	bcc.n	80034b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00f      	b.n	80034d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <SysTick_Config+0x40>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ba:	210f      	movs	r1, #15
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	f7ff ff8e 	bl	80033e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <SysTick_Config+0x40>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <SysTick_Config+0x40>)
 80034cc:	2207      	movs	r2, #7
 80034ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	e000e010 	.word	0xe000e010

080034e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff47 	bl	800337c <__NVIC_SetPriorityGrouping>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003508:	f7ff ff5c 	bl	80033c4 <__NVIC_GetPriorityGrouping>
 800350c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	6978      	ldr	r0, [r7, #20]
 8003514:	f7ff ff8e 	bl	8003434 <NVIC_EncodePriority>
 8003518:	4602      	mov	r2, r0
 800351a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff5d 	bl	80033e0 <__NVIC_SetPriority>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffb0 	bl	800349c <SysTick_Config>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	; 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	e159      	b.n	8003818 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003564:	2201      	movs	r2, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	429a      	cmp	r2, r3
 800357e:	f040 8148 	bne.w	8003812 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d005      	beq.n	800359a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003596:	2b02      	cmp	r3, #2
 8003598:	d130      	bne.n	80035fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	2203      	movs	r2, #3
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d0:	2201      	movs	r2, #1
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	091b      	lsrs	r3, r3, #4
 80035e6:	f003 0201 	and.w	r2, r3, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b03      	cmp	r3, #3
 8003606:	d017      	beq.n	8003638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d123      	bne.n	800368c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	08da      	lsrs	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3208      	adds	r2, #8
 800364c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	220f      	movs	r2, #15
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	69b9      	ldr	r1, [r7, #24]
 8003688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80a2 	beq.w	8003812 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	4b57      	ldr	r3, [pc, #348]	; (8003830 <HAL_GPIO_Init+0x2e8>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	4a56      	ldr	r2, [pc, #344]	; (8003830 <HAL_GPIO_Init+0x2e8>)
 80036d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036dc:	6453      	str	r3, [r2, #68]	; 0x44
 80036de:	4b54      	ldr	r3, [pc, #336]	; (8003830 <HAL_GPIO_Init+0x2e8>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ea:	4a52      	ldr	r2, [pc, #328]	; (8003834 <HAL_GPIO_Init+0x2ec>)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	3302      	adds	r3, #2
 80036f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	220f      	movs	r2, #15
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a49      	ldr	r2, [pc, #292]	; (8003838 <HAL_GPIO_Init+0x2f0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d019      	beq.n	800374a <HAL_GPIO_Init+0x202>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a48      	ldr	r2, [pc, #288]	; (800383c <HAL_GPIO_Init+0x2f4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_GPIO_Init+0x1fe>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a47      	ldr	r2, [pc, #284]	; (8003840 <HAL_GPIO_Init+0x2f8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00d      	beq.n	8003742 <HAL_GPIO_Init+0x1fa>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a46      	ldr	r2, [pc, #280]	; (8003844 <HAL_GPIO_Init+0x2fc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <HAL_GPIO_Init+0x1f6>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a45      	ldr	r2, [pc, #276]	; (8003848 <HAL_GPIO_Init+0x300>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <HAL_GPIO_Init+0x1f2>
 8003736:	2304      	movs	r3, #4
 8003738:	e008      	b.n	800374c <HAL_GPIO_Init+0x204>
 800373a:	2307      	movs	r3, #7
 800373c:	e006      	b.n	800374c <HAL_GPIO_Init+0x204>
 800373e:	2303      	movs	r3, #3
 8003740:	e004      	b.n	800374c <HAL_GPIO_Init+0x204>
 8003742:	2302      	movs	r3, #2
 8003744:	e002      	b.n	800374c <HAL_GPIO_Init+0x204>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_GPIO_Init+0x204>
 800374a:	2300      	movs	r3, #0
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	f002 0203 	and.w	r2, r2, #3
 8003752:	0092      	lsls	r2, r2, #2
 8003754:	4093      	lsls	r3, r2
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800375c:	4935      	ldr	r1, [pc, #212]	; (8003834 <HAL_GPIO_Init+0x2ec>)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	3302      	adds	r3, #2
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800376a:	4b38      	ldr	r3, [pc, #224]	; (800384c <HAL_GPIO_Init+0x304>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800378e:	4a2f      	ldr	r2, [pc, #188]	; (800384c <HAL_GPIO_Init+0x304>)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003794:	4b2d      	ldr	r3, [pc, #180]	; (800384c <HAL_GPIO_Init+0x304>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b8:	4a24      	ldr	r2, [pc, #144]	; (800384c <HAL_GPIO_Init+0x304>)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037be:	4b23      	ldr	r3, [pc, #140]	; (800384c <HAL_GPIO_Init+0x304>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037e2:	4a1a      	ldr	r2, [pc, #104]	; (800384c <HAL_GPIO_Init+0x304>)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e8:	4b18      	ldr	r3, [pc, #96]	; (800384c <HAL_GPIO_Init+0x304>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800380c:	4a0f      	ldr	r2, [pc, #60]	; (800384c <HAL_GPIO_Init+0x304>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3301      	adds	r3, #1
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b0f      	cmp	r3, #15
 800381c:	f67f aea2 	bls.w	8003564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3724      	adds	r7, #36	; 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	40013800 	.word	0x40013800
 8003838:	40020000 	.word	0x40020000
 800383c:	40020400 	.word	0x40020400
 8003840:	40020800 	.word	0x40020800
 8003844:	40020c00 	.word	0x40020c00
 8003848:	40021000 	.word	0x40021000
 800384c:	40013c00 	.word	0x40013c00

08003850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
 800385c:	4613      	mov	r3, r2
 800385e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003860:	787b      	ldrb	r3, [r7, #1]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003866:	887a      	ldrh	r2, [r7, #2]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800386c:	e003      	b.n	8003876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800386e:	887b      	ldrh	r3, [r7, #2]
 8003870:	041a      	lsls	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	619a      	str	r2, [r3, #24]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e12b      	b.n	8003aee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fe ffa6 	bl	80027fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e8:	f001 fbd2 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 80038ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4a81      	ldr	r2, [pc, #516]	; (8003af8 <HAL_I2C_Init+0x274>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d807      	bhi.n	8003908 <HAL_I2C_Init+0x84>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a80      	ldr	r2, [pc, #512]	; (8003afc <HAL_I2C_Init+0x278>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	bf94      	ite	ls
 8003900:	2301      	movls	r3, #1
 8003902:	2300      	movhi	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	e006      	b.n	8003916 <HAL_I2C_Init+0x92>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a7d      	ldr	r2, [pc, #500]	; (8003b00 <HAL_I2C_Init+0x27c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	bf94      	ite	ls
 8003910:	2301      	movls	r3, #1
 8003912:	2300      	movhi	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e0e7      	b.n	8003aee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a78      	ldr	r2, [pc, #480]	; (8003b04 <HAL_I2C_Init+0x280>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0c9b      	lsrs	r3, r3, #18
 8003928:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a6a      	ldr	r2, [pc, #424]	; (8003af8 <HAL_I2C_Init+0x274>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d802      	bhi.n	8003958 <HAL_I2C_Init+0xd4>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3301      	adds	r3, #1
 8003956:	e009      	b.n	800396c <HAL_I2C_Init+0xe8>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	4a69      	ldr	r2, [pc, #420]	; (8003b08 <HAL_I2C_Init+0x284>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	099b      	lsrs	r3, r3, #6
 800396a:	3301      	adds	r3, #1
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	430b      	orrs	r3, r1
 8003972:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800397e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	495c      	ldr	r1, [pc, #368]	; (8003af8 <HAL_I2C_Init+0x274>)
 8003988:	428b      	cmp	r3, r1
 800398a:	d819      	bhi.n	80039c0 <HAL_I2C_Init+0x13c>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1e59      	subs	r1, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	fbb1 f3f3 	udiv	r3, r1, r3
 800399a:	1c59      	adds	r1, r3, #1
 800399c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039a0:	400b      	ands	r3, r1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_I2C_Init+0x138>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1e59      	subs	r1, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b4:	3301      	adds	r3, #1
 80039b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ba:	e051      	b.n	8003a60 <HAL_I2C_Init+0x1dc>
 80039bc:	2304      	movs	r3, #4
 80039be:	e04f      	b.n	8003a60 <HAL_I2C_Init+0x1dc>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d111      	bne.n	80039ec <HAL_I2C_Init+0x168>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e58      	subs	r0, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	440b      	add	r3, r1
 80039d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e012      	b.n	8003a12 <HAL_I2C_Init+0x18e>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1e58      	subs	r0, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	0099      	lsls	r1, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_I2C_Init+0x196>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e022      	b.n	8003a60 <HAL_I2C_Init+0x1dc>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10e      	bne.n	8003a40 <HAL_I2C_Init+0x1bc>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1e58      	subs	r0, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6859      	ldr	r1, [r3, #4]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	440b      	add	r3, r1
 8003a30:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a34:	3301      	adds	r3, #1
 8003a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3e:	e00f      	b.n	8003a60 <HAL_I2C_Init+0x1dc>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1e58      	subs	r0, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	0099      	lsls	r1, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a56:	3301      	adds	r3, #1
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	6809      	ldr	r1, [r1, #0]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6911      	ldr	r1, [r2, #16]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68d2      	ldr	r2, [r2, #12]
 8003a9a:	4311      	orrs	r1, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	000186a0 	.word	0x000186a0
 8003afc:	001e847f 	.word	0x001e847f
 8003b00:	003d08ff 	.word	0x003d08ff
 8003b04:	431bde83 	.word	0x431bde83
 8003b08:	10624dd3 	.word	0x10624dd3

08003b0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	461a      	mov	r2, r3
 8003b18:	460b      	mov	r3, r1
 8003b1a:	817b      	strh	r3, [r7, #10]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b20:	f7ff f99a 	bl	8002e58 <HAL_GetTick>
 8003b24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	f040 80e0 	bne.w	8003cf4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2319      	movs	r3, #25
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4970      	ldr	r1, [pc, #448]	; (8003d00 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fc58 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e0d3      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_I2C_Master_Transmit+0x50>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e0cc      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d007      	beq.n	8003b82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0201 	orr.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2221      	movs	r2, #33	; 0x21
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	893a      	ldrh	r2, [r7, #8]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a50      	ldr	r2, [pc, #320]	; (8003d04 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bc4:	8979      	ldrh	r1, [r7, #10]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	6a3a      	ldr	r2, [r7, #32]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fac2 	bl	8004154 <I2C_MasterRequestWrite>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e08d      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bf0:	e066      	b.n	8003cc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	6a39      	ldr	r1, [r7, #32]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fcd2 	bl	80045a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d107      	bne.n	8003c1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e06b      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d11b      	bne.n	8003c94 <HAL_I2C_Master_Transmit+0x188>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d017      	beq.n	8003c94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	6a39      	ldr	r1, [r7, #32]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fcc2 	bl	8004622 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00d      	beq.n	8003cc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d107      	bne.n	8003cbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e01a      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d194      	bne.n	8003bf2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	00100002 	.word	0x00100002
 8003d04:	ffff0000 	.word	0xffff0000

08003d08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08c      	sub	sp, #48	; 0x30
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	461a      	mov	r2, r3
 8003d14:	460b      	mov	r3, r1
 8003d16:	817b      	strh	r3, [r7, #10]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d1c:	f7ff f89c 	bl	8002e58 <HAL_GetTick>
 8003d20:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	f040 820b 	bne.w	8004146 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2319      	movs	r3, #25
 8003d36:	2201      	movs	r2, #1
 8003d38:	497c      	ldr	r1, [pc, #496]	; (8003f2c <HAL_I2C_Master_Receive+0x224>)
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 fb5a 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
 8003d48:	e1fe      	b.n	8004148 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_I2C_Master_Receive+0x50>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e1f7      	b.n	8004148 <HAL_I2C_Master_Receive+0x440>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d007      	beq.n	8003d7e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2222      	movs	r2, #34	; 0x22
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2210      	movs	r2, #16
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	893a      	ldrh	r2, [r7, #8]
 8003dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4a5c      	ldr	r2, [pc, #368]	; (8003f30 <HAL_I2C_Master_Receive+0x228>)
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dc0:	8979      	ldrh	r1, [r7, #10]
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fa46 	bl	8004258 <I2C_MasterRequestRead>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e1b8      	b.n	8004148 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d113      	bne.n	8003e06 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dde:	2300      	movs	r3, #0
 8003de0:	623b      	str	r3, [r7, #32]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	623b      	str	r3, [r7, #32]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	623b      	str	r3, [r7, #32]
 8003df2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e18c      	b.n	8004120 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d11b      	bne.n	8003e46 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e16c      	b.n	8004120 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d11b      	bne.n	8003e86 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	e14c      	b.n	8004120 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003eac:	e138      	b.n	8004120 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	f200 80f1 	bhi.w	800409a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d123      	bne.n	8003f08 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fbed 	bl	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e139      	b.n	8004148 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f06:	e10b      	b.n	8004120 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d14e      	bne.n	8003fae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	2200      	movs	r2, #0
 8003f18:	4906      	ldr	r1, [pc, #24]	; (8003f34 <HAL_I2C_Master_Receive+0x22c>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fa6a 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e10e      	b.n	8004148 <HAL_I2C_Master_Receive+0x440>
 8003f2a:	bf00      	nop
 8003f2c:	00100002 	.word	0x00100002
 8003f30:	ffff0000 	.word	0xffff0000
 8003f34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fac:	e0b8      	b.n	8004120 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	4966      	ldr	r1, [pc, #408]	; (8004150 <HAL_I2C_Master_Receive+0x448>)
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fa1b 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0bf      	b.n	8004148 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	2200      	movs	r2, #0
 8004012:	494f      	ldr	r1, [pc, #316]	; (8004150 <HAL_I2C_Master_Receive+0x448>)
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f9ed 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e091      	b.n	8004148 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004098:	e042      	b.n	8004120 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fb00 	bl	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e04c      	b.n	8004148 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d118      	bne.n	8004120 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	f47f aec2 	bne.w	8003eae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3728      	adds	r7, #40	; 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	00010004 	.word	0x00010004

08004154 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	460b      	mov	r3, r1
 8004162:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d006      	beq.n	800417e <I2C_MasterRequestWrite+0x2a>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d003      	beq.n	800417e <I2C_MasterRequestWrite+0x2a>
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800417c:	d108      	bne.n	8004190 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e00b      	b.n	80041a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	2b12      	cmp	r3, #18
 8004196:	d107      	bne.n	80041a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f91d 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ce:	d103      	bne.n	80041d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e035      	b.n	8004248 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e4:	d108      	bne.n	80041f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041e6:	897b      	ldrh	r3, [r7, #10]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041f4:	611a      	str	r2, [r3, #16]
 80041f6:	e01b      	b.n	8004230 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041f8:	897b      	ldrh	r3, [r7, #10]
 80041fa:	11db      	asrs	r3, r3, #7
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f003 0306 	and.w	r3, r3, #6
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f063 030f 	orn	r3, r3, #15
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	490e      	ldr	r1, [pc, #56]	; (8004250 <I2C_MasterRequestWrite+0xfc>)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f943 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e010      	b.n	8004248 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004226:	897b      	ldrh	r3, [r7, #10]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4907      	ldr	r1, [pc, #28]	; (8004254 <I2C_MasterRequestWrite+0x100>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f933 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	00010008 	.word	0x00010008
 8004254:	00010002 	.word	0x00010002

08004258 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	460b      	mov	r3, r1
 8004266:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800427c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d006      	beq.n	8004292 <I2C_MasterRequestRead+0x3a>
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d003      	beq.n	8004292 <I2C_MasterRequestRead+0x3a>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004290:	d108      	bne.n	80042a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e00b      	b.n	80042bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	2b11      	cmp	r3, #17
 80042aa:	d107      	bne.n	80042bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f893 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00d      	beq.n	80042f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e2:	d103      	bne.n	80042ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e079      	b.n	80043e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f8:	d108      	bne.n	800430c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042fa:	897b      	ldrh	r3, [r7, #10]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	611a      	str	r2, [r3, #16]
 800430a:	e05f      	b.n	80043cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800430c:	897b      	ldrh	r3, [r7, #10]
 800430e:	11db      	asrs	r3, r3, #7
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 0306 	and.w	r3, r3, #6
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f063 030f 	orn	r3, r3, #15
 800431c:	b2da      	uxtb	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4930      	ldr	r1, [pc, #192]	; (80043ec <I2C_MasterRequestRead+0x194>)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f8b9 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e054      	b.n	80043e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800433a:	897b      	ldrh	r3, [r7, #10]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4929      	ldr	r1, [pc, #164]	; (80043f0 <I2C_MasterRequestRead+0x198>)
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f8a9 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e044      	b.n	80043e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f831 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a6:	d103      	bne.n	80043b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e017      	b.n	80043e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043b4:	897b      	ldrh	r3, [r7, #10]
 80043b6:	11db      	asrs	r3, r3, #7
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f003 0306 	and.w	r3, r3, #6
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f063 030e 	orn	r3, r3, #14
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4907      	ldr	r1, [pc, #28]	; (80043f0 <I2C_MasterRequestRead+0x198>)
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f865 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	00010008 	.word	0x00010008
 80043f0:	00010002 	.word	0x00010002

080043f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004404:	e025      	b.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d021      	beq.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fe fd23 	bl	8002e58 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d116      	bne.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e023      	b.n	800449a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d10d      	bne.n	8004478 <I2C_WaitOnFlagUntilTimeout+0x84>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	43da      	mvns	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4013      	ands	r3, r2
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	bf0c      	ite	eq
 800446e:	2301      	moveq	r3, #1
 8004470:	2300      	movne	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	e00c      	b.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	43da      	mvns	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d0b6      	beq.n	8004406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044b0:	e051      	b.n	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c0:	d123      	bne.n	800450a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f043 0204 	orr.w	r2, r3, #4
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e046      	b.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d021      	beq.n	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fe fca1 	bl	8002e58 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e020      	b.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b01      	cmp	r3, #1
 800455e:	d10c      	bne.n	800457a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	43da      	mvns	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4013      	ands	r3, r2
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	e00b      	b.n	8004592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	43da      	mvns	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4013      	ands	r3, r2
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d18d      	bne.n	80044b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ac:	e02d      	b.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f8ce 	bl	8004750 <I2C_IsAcknowledgeFailed>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e02d      	b.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d021      	beq.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c6:	f7fe fc47 	bl	8002e58 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d302      	bcc.n	80045dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d116      	bne.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f043 0220 	orr.w	r2, r3, #32
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e007      	b.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d1ca      	bne.n	80045ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800462e:	e02d      	b.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f88d 	bl	8004750 <I2C_IsAcknowledgeFailed>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e02d      	b.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d021      	beq.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004648:	f7fe fc06 	bl	8002e58 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	429a      	cmp	r2, r3
 8004656:	d302      	bcc.n	800465e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d116      	bne.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e007      	b.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d1ca      	bne.n	8004630 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046b0:	e042      	b.n	8004738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d119      	bne.n	80046f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0210 	mvn.w	r2, #16
 80046c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e029      	b.n	8004748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f4:	f7fe fbb0 	bl	8002e58 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e007      	b.n	8004748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b40      	cmp	r3, #64	; 0x40
 8004744:	d1b5      	bne.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004766:	d11b      	bne.n	80047a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004770:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f043 0204 	orr.w	r2, r3, #4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e267      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d075      	beq.n	80048ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ce:	4b88      	ldr	r3, [pc, #544]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d00c      	beq.n	80047f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047da:	4b85      	ldr	r3, [pc, #532]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d112      	bne.n	800480c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e6:	4b82      	ldr	r3, [pc, #520]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f2:	d10b      	bne.n	800480c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	4b7e      	ldr	r3, [pc, #504]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d05b      	beq.n	80048b8 <HAL_RCC_OscConfig+0x108>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d157      	bne.n	80048b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e242      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004814:	d106      	bne.n	8004824 <HAL_RCC_OscConfig+0x74>
 8004816:	4b76      	ldr	r3, [pc, #472]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a75      	ldr	r2, [pc, #468]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	e01d      	b.n	8004860 <HAL_RCC_OscConfig+0xb0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800482c:	d10c      	bne.n	8004848 <HAL_RCC_OscConfig+0x98>
 800482e:	4b70      	ldr	r3, [pc, #448]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a6f      	ldr	r2, [pc, #444]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	4b6d      	ldr	r3, [pc, #436]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a6c      	ldr	r2, [pc, #432]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e00b      	b.n	8004860 <HAL_RCC_OscConfig+0xb0>
 8004848:	4b69      	ldr	r3, [pc, #420]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a68      	ldr	r2, [pc, #416]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800484e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b66      	ldr	r3, [pc, #408]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a65      	ldr	r2, [pc, #404]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800485a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800485e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d013      	beq.n	8004890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fe faf6 	bl	8002e58 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004870:	f7fe faf2 	bl	8002e58 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e207      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004882:	4b5b      	ldr	r3, [pc, #364]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0xc0>
 800488e:	e014      	b.n	80048ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fe fae2 	bl	8002e58 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004898:	f7fe fade 	bl	8002e58 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e1f3      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048aa:	4b51      	ldr	r3, [pc, #324]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0xe8>
 80048b6:	e000      	b.n	80048ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d063      	beq.n	800498e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048c6:	4b4a      	ldr	r3, [pc, #296]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d2:	4b47      	ldr	r3, [pc, #284]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d11c      	bne.n	8004918 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048de:	4b44      	ldr	r3, [pc, #272]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d116      	bne.n	8004918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ea:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_RCC_OscConfig+0x152>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d001      	beq.n	8004902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e1c7      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004902:	4b3b      	ldr	r3, [pc, #236]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4937      	ldr	r1, [pc, #220]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004916:	e03a      	b.n	800498e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004920:	4b34      	ldr	r3, [pc, #208]	; (80049f4 <HAL_RCC_OscConfig+0x244>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fe fa97 	bl	8002e58 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800492e:	f7fe fa93 	bl	8002e58 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e1a8      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004940:	4b2b      	ldr	r3, [pc, #172]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494c:	4b28      	ldr	r3, [pc, #160]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4925      	ldr	r1, [pc, #148]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]
 8004960:	e015      	b.n	800498e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004962:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <HAL_RCC_OscConfig+0x244>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fe fa76 	bl	8002e58 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004970:	f7fe fa72 	bl	8002e58 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e187      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004982:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d036      	beq.n	8004a08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d016      	beq.n	80049d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <HAL_RCC_OscConfig+0x248>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a8:	f7fe fa56 	bl	8002e58 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b0:	f7fe fa52 	bl	8002e58 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e167      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80049c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x200>
 80049ce:	e01b      	b.n	8004a08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_RCC_OscConfig+0x248>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d6:	f7fe fa3f 	bl	8002e58 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	e00e      	b.n	80049fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049de:	f7fe fa3b 	bl	8002e58 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d907      	bls.n	80049fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e150      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
 80049f0:	40023800 	.word	0x40023800
 80049f4:	42470000 	.word	0x42470000
 80049f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049fc:	4b88      	ldr	r3, [pc, #544]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 80049fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ea      	bne.n	80049de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8097 	beq.w	8004b44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a16:	2300      	movs	r3, #0
 8004a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1a:	4b81      	ldr	r3, [pc, #516]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10f      	bne.n	8004a46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	4b7d      	ldr	r3, [pc, #500]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	4a7c      	ldr	r2, [pc, #496]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a34:	6413      	str	r3, [r2, #64]	; 0x40
 8004a36:	4b7a      	ldr	r3, [pc, #488]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b77      	ldr	r3, [pc, #476]	; (8004c24 <HAL_RCC_OscConfig+0x474>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d118      	bne.n	8004a84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a52:	4b74      	ldr	r3, [pc, #464]	; (8004c24 <HAL_RCC_OscConfig+0x474>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a73      	ldr	r2, [pc, #460]	; (8004c24 <HAL_RCC_OscConfig+0x474>)
 8004a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a5e:	f7fe f9fb 	bl	8002e58 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a66:	f7fe f9f7 	bl	8002e58 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e10c      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	4b6a      	ldr	r3, [pc, #424]	; (8004c24 <HAL_RCC_OscConfig+0x474>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCC_OscConfig+0x2ea>
 8004a8c:	4b64      	ldr	r3, [pc, #400]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	4a63      	ldr	r2, [pc, #396]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70
 8004a98:	e01c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x324>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x30c>
 8004aa2:	4b5f      	ldr	r3, [pc, #380]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a5e      	ldr	r2, [pc, #376]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70
 8004aae:	4b5c      	ldr	r3, [pc, #368]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	4a5b      	ldr	r2, [pc, #364]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x324>
 8004abc:	4b58      	ldr	r3, [pc, #352]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac0:	4a57      	ldr	r2, [pc, #348]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac8:	4b55      	ldr	r3, [pc, #340]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	4a54      	ldr	r2, [pc, #336]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004ace:	f023 0304 	bic.w	r3, r3, #4
 8004ad2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d015      	beq.n	8004b08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fe f9bc 	bl	8002e58 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f7fe f9b8 	bl	8002e58 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e0cb      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afa:	4b49      	ldr	r3, [pc, #292]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0ee      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x334>
 8004b06:	e014      	b.n	8004b32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b08:	f7fe f9a6 	bl	8002e58 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fe f9a2 	bl	8002e58 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e0b5      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b26:	4b3e      	ldr	r3, [pc, #248]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ee      	bne.n	8004b10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d105      	bne.n	8004b44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b38:	4b39      	ldr	r3, [pc, #228]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	4a38      	ldr	r2, [pc, #224]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80a1 	beq.w	8004c90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b4e:	4b34      	ldr	r3, [pc, #208]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d05c      	beq.n	8004c14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d141      	bne.n	8004be6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b62:	4b31      	ldr	r3, [pc, #196]	; (8004c28 <HAL_RCC_OscConfig+0x478>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fe f976 	bl	8002e58 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fe f972 	bl	8002e58 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e087      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	4b27      	ldr	r3, [pc, #156]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	061b      	lsls	r3, r3, #24
 8004bb2:	491b      	ldr	r1, [pc, #108]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCC_OscConfig+0x478>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbe:	f7fe f94b 	bl	8002e58 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc6:	f7fe f947 	bl	8002e58 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e05c      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x416>
 8004be4:	e054      	b.n	8004c90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <HAL_RCC_OscConfig+0x478>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fe f934 	bl	8002e58 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fe f930 	bl	8002e58 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e045      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x444>
 8004c12:	e03d      	b.n	8004c90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e038      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
 8004c20:	40023800 	.word	0x40023800
 8004c24:	40007000 	.word	0x40007000
 8004c28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <HAL_RCC_OscConfig+0x4ec>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d028      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d121      	bne.n	8004c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d11a      	bne.n	8004c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d111      	bne.n	8004c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	3b01      	subs	r3, #1
 8004c76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d107      	bne.n	8004c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800

08004ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0cc      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b68      	ldr	r3, [pc, #416]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d90c      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b65      	ldr	r3, [pc, #404]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b63      	ldr	r3, [pc, #396]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0b8      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d020      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cf4:	4b59      	ldr	r3, [pc, #356]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4a58      	ldr	r2, [pc, #352]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d0c:	4b53      	ldr	r3, [pc, #332]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	4a52      	ldr	r2, [pc, #328]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d18:	4b50      	ldr	r3, [pc, #320]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	494d      	ldr	r1, [pc, #308]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d044      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d107      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3e:	4b47      	ldr	r3, [pc, #284]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d119      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e07f      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d003      	beq.n	8004d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5e:	4b3f      	ldr	r3, [pc, #252]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e06f      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6e:	4b3b      	ldr	r3, [pc, #236]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e067      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d7e:	4b37      	ldr	r3, [pc, #220]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f023 0203 	bic.w	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4934      	ldr	r1, [pc, #208]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d90:	f7fe f862 	bl	8002e58 <HAL_GetTick>
 8004d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d96:	e00a      	b.n	8004dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d98:	f7fe f85e 	bl	8002e58 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e04f      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dae:	4b2b      	ldr	r3, [pc, #172]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 020c 	and.w	r2, r3, #12
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d1eb      	bne.n	8004d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b25      	ldr	r3, [pc, #148]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d20c      	bcs.n	8004de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b22      	ldr	r3, [pc, #136]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd6:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e032      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df4:	4b19      	ldr	r3, [pc, #100]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4916      	ldr	r1, [pc, #88]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	490e      	ldr	r1, [pc, #56]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e26:	f000 f821 	bl	8004e6c <HAL_RCC_GetSysClockFreq>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	091b      	lsrs	r3, r3, #4
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	490a      	ldr	r1, [pc, #40]	; (8004e60 <HAL_RCC_ClockConfig+0x1c0>)
 8004e38:	5ccb      	ldrb	r3, [r1, r3]
 8004e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3e:	4a09      	ldr	r2, [pc, #36]	; (8004e64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fd ffc2 	bl	8002dd0 <HAL_InitTick>

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40023c00 	.word	0x40023c00
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	0800cb6c 	.word	0x0800cb6c
 8004e64:	20000004 	.word	0x20000004
 8004e68:	20000008 	.word	0x20000008

08004e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e70:	b094      	sub	sp, #80	; 0x50
 8004e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	647b      	str	r3, [r7, #68]	; 0x44
 8004e78:	2300      	movs	r3, #0
 8004e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e84:	4b79      	ldr	r3, [pc, #484]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 030c 	and.w	r3, r3, #12
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d00d      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0x40>
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	f200 80e1 	bhi.w	8005058 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d003      	beq.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e9e:	e0db      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ea0:	4b73      	ldr	r3, [pc, #460]	; (8005070 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ea4:	e0db      	b.n	800505e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ea6:	4b73      	ldr	r3, [pc, #460]	; (8005074 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ea8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eaa:	e0d8      	b.n	800505e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eac:	4b6f      	ldr	r3, [pc, #444]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eb6:	4b6d      	ldr	r3, [pc, #436]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d063      	beq.n	8004f8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec2:	4b6a      	ldr	r3, [pc, #424]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	099b      	lsrs	r3, r3, #6
 8004ec8:	2200      	movs	r2, #0
 8004eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ecc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ede:	4622      	mov	r2, r4
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f04f 0100 	mov.w	r1, #0
 8004eea:	0159      	lsls	r1, r3, #5
 8004eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ef0:	0150      	lsls	r0, r2, #5
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	1a51      	subs	r1, r2, r1
 8004efa:	6139      	str	r1, [r7, #16]
 8004efc:	4629      	mov	r1, r5
 8004efe:	eb63 0301 	sbc.w	r3, r3, r1
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f10:	4659      	mov	r1, fp
 8004f12:	018b      	lsls	r3, r1, #6
 8004f14:	4651      	mov	r1, sl
 8004f16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	018a      	lsls	r2, r1, #6
 8004f1e:	4651      	mov	r1, sl
 8004f20:	ebb2 0801 	subs.w	r8, r2, r1
 8004f24:	4659      	mov	r1, fp
 8004f26:	eb63 0901 	sbc.w	r9, r3, r1
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f3e:	4690      	mov	r8, r2
 8004f40:	4699      	mov	r9, r3
 8004f42:	4623      	mov	r3, r4
 8004f44:	eb18 0303 	adds.w	r3, r8, r3
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	eb49 0303 	adc.w	r3, r9, r3
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f5e:	4629      	mov	r1, r5
 8004f60:	024b      	lsls	r3, r1, #9
 8004f62:	4621      	mov	r1, r4
 8004f64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f68:	4621      	mov	r1, r4
 8004f6a:	024a      	lsls	r2, r1, #9
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f72:	2200      	movs	r2, #0
 8004f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f7c:	f7fb fe4c 	bl	8000c18 <__aeabi_uldivmod>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4613      	mov	r3, r2
 8004f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f88:	e058      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8a:	4b38      	ldr	r3, [pc, #224]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	099b      	lsrs	r3, r3, #6
 8004f90:	2200      	movs	r2, #0
 8004f92:	4618      	mov	r0, r3
 8004f94:	4611      	mov	r1, r2
 8004f96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f9a:	623b      	str	r3, [r7, #32]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	f04f 0000 	mov.w	r0, #0
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	0159      	lsls	r1, r3, #5
 8004fb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fb6:	0150      	lsls	r0, r2, #5
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fdc:	ebb2 040a 	subs.w	r4, r2, sl
 8004fe0:	eb63 050b 	sbc.w	r5, r3, fp
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	00eb      	lsls	r3, r5, #3
 8004fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ff2:	00e2      	lsls	r2, r4, #3
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	461d      	mov	r5, r3
 8004ff8:	4643      	mov	r3, r8
 8004ffa:	18e3      	adds	r3, r4, r3
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	464b      	mov	r3, r9
 8005000:	eb45 0303 	adc.w	r3, r5, r3
 8005004:	607b      	str	r3, [r7, #4]
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005012:	4629      	mov	r1, r5
 8005014:	028b      	lsls	r3, r1, #10
 8005016:	4621      	mov	r1, r4
 8005018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800501c:	4621      	mov	r1, r4
 800501e:	028a      	lsls	r2, r1, #10
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005026:	2200      	movs	r2, #0
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	61fa      	str	r2, [r7, #28]
 800502c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005030:	f7fb fdf2 	bl	8000c18 <__aeabi_uldivmod>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4613      	mov	r3, r2
 800503a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	0c1b      	lsrs	r3, r3, #16
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	3301      	adds	r3, #1
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800504c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800504e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005056:	e002      	b.n	800505e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_RCC_GetSysClockFreq+0x204>)
 800505a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800505c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800505e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005060:	4618      	mov	r0, r3
 8005062:	3750      	adds	r7, #80	; 0x50
 8005064:	46bd      	mov	sp, r7
 8005066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800506a:	bf00      	nop
 800506c:	40023800 	.word	0x40023800
 8005070:	00f42400 	.word	0x00f42400
 8005074:	007a1200 	.word	0x007a1200

08005078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <HAL_RCC_GetHCLKFreq+0x14>)
 800507e:	681b      	ldr	r3, [r3, #0]
}
 8005080:	4618      	mov	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000004 	.word	0x20000004

08005090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005094:	f7ff fff0 	bl	8005078 <HAL_RCC_GetHCLKFreq>
 8005098:	4602      	mov	r2, r0
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	0a9b      	lsrs	r3, r3, #10
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	4903      	ldr	r1, [pc, #12]	; (80050b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050a6:	5ccb      	ldrb	r3, [r1, r3]
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40023800 	.word	0x40023800
 80050b4:	0800cb7c 	.word	0x0800cb7c

080050b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050bc:	f7ff ffdc 	bl	8005078 <HAL_RCC_GetHCLKFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	0b5b      	lsrs	r3, r3, #13
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4903      	ldr	r1, [pc, #12]	; (80050dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40023800 	.word	0x40023800
 80050dc:	0800cb7c 	.word	0x0800cb7c

080050e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e07b      	b.n	80051ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d108      	bne.n	800510c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005102:	d009      	beq.n	8005118 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	61da      	str	r2, [r3, #28]
 800510a:	e005      	b.n	8005118 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fd fbaa 	bl	800288c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519c:	ea42 0103 	orr.w	r1, r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	0c1b      	lsrs	r3, r3, #16
 80051b6:	f003 0104 	and.w	r1, r3, #4
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f003 0210 	and.w	r2, r3, #16
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b088      	sub	sp, #32
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	603b      	str	r3, [r7, #0]
 80051fe:	4613      	mov	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_SPI_Transmit+0x22>
 8005210:	2302      	movs	r3, #2
 8005212:	e126      	b.n	8005462 <HAL_SPI_Transmit+0x270>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800521c:	f7fd fe1c 	bl	8002e58 <HAL_GetTick>
 8005220:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	d002      	beq.n	8005238 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005232:	2302      	movs	r3, #2
 8005234:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005236:	e10b      	b.n	8005450 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_SPI_Transmit+0x52>
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d102      	bne.n	800524a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005248:	e102      	b.n	8005450 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2203      	movs	r2, #3
 800524e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	88fa      	ldrh	r2, [r7, #6]
 8005262:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	88fa      	ldrh	r2, [r7, #6]
 8005268:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005290:	d10f      	bne.n	80052b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d007      	beq.n	80052d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d8:	d14b      	bne.n	8005372 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_SPI_Transmit+0xf6>
 80052e2:	8afb      	ldrh	r3, [r7, #22]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d13e      	bne.n	8005366 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	881a      	ldrh	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	1c9a      	adds	r2, r3, #2
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800530c:	e02b      	b.n	8005366 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d112      	bne.n	8005342 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	881a      	ldrh	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	1c9a      	adds	r2, r3, #2
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005340:	e011      	b.n	8005366 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005342:	f7fd fd89 	bl	8002e58 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d803      	bhi.n	800535a <HAL_SPI_Transmit+0x168>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d102      	bne.n	8005360 <HAL_SPI_Transmit+0x16e>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005364:	e074      	b.n	8005450 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1ce      	bne.n	800530e <HAL_SPI_Transmit+0x11c>
 8005370:	e04c      	b.n	800540c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_SPI_Transmit+0x18e>
 800537a:	8afb      	ldrh	r3, [r7, #22]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d140      	bne.n	8005402 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053a6:	e02c      	b.n	8005402 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d113      	bne.n	80053de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	330c      	adds	r3, #12
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	86da      	strh	r2, [r3, #54]	; 0x36
 80053dc:	e011      	b.n	8005402 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053de:	f7fd fd3b 	bl	8002e58 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d803      	bhi.n	80053f6 <HAL_SPI_Transmit+0x204>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d102      	bne.n	80053fc <HAL_SPI_Transmit+0x20a>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005400:	e026      	b.n	8005450 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1cd      	bne.n	80053a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fbcb 	bl	8005bac <SPI_EndRxTxTransaction>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800542a:	2300      	movs	r3, #0
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e000      	b.n	8005450 <HAL_SPI_Transmit+0x25e>
  }

error:
 800544e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005460:	7ffb      	ldrb	r3, [r7, #31]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3720      	adds	r7, #32
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b088      	sub	sp, #32
 800546e:	af02      	add	r7, sp, #8
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	4613      	mov	r3, r2
 8005478:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005486:	d112      	bne.n	80054ae <HAL_SPI_Receive+0x44>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10e      	bne.n	80054ae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2204      	movs	r2, #4
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005498:	88fa      	ldrh	r2, [r7, #6]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	4613      	mov	r3, r2
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f8f1 	bl	800568c <HAL_SPI_TransmitReceive>
 80054aa:	4603      	mov	r3, r0
 80054ac:	e0ea      	b.n	8005684 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_SPI_Receive+0x52>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e0e3      	b.n	8005684 <HAL_SPI_Receive+0x21a>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c4:	f7fd fcc8 	bl	8002e58 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d002      	beq.n	80054dc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
 80054d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054da:	e0ca      	b.n	8005672 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <HAL_SPI_Receive+0x7e>
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054ec:	e0c1      	b.n	8005672 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2204      	movs	r2, #4
 80054f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	88fa      	ldrh	r2, [r7, #6]
 800550c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005534:	d10f      	bne.n	8005556 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005544:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005554:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d007      	beq.n	8005574 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005572:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d162      	bne.n	8005642 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800557c:	e02e      	b.n	80055dc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d115      	bne.n	80055b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f103 020c 	add.w	r2, r3, #12
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	7812      	ldrb	r2, [r2, #0]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055b6:	e011      	b.n	80055dc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055b8:	f7fd fc4e 	bl	8002e58 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d803      	bhi.n	80055d0 <HAL_SPI_Receive+0x166>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d102      	bne.n	80055d6 <HAL_SPI_Receive+0x16c>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055da:	e04a      	b.n	8005672 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1cb      	bne.n	800557e <HAL_SPI_Receive+0x114>
 80055e6:	e031      	b.n	800564c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d113      	bne.n	800561e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	b292      	uxth	r2, r2
 8005602:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	1c9a      	adds	r2, r3, #2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800561c:	e011      	b.n	8005642 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800561e:	f7fd fc1b 	bl	8002e58 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d803      	bhi.n	8005636 <HAL_SPI_Receive+0x1cc>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d102      	bne.n	800563c <HAL_SPI_Receive+0x1d2>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005640:	e017      	b.n	8005672 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1cd      	bne.n	80055e8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 fa45 	bl	8005ae0 <SPI_EndRxTransaction>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	75fb      	strb	r3, [r7, #23]
 800566e:	e000      	b.n	8005672 <HAL_SPI_Receive+0x208>
  }

error :
 8005670:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005682:	7dfb      	ldrb	r3, [r7, #23]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08c      	sub	sp, #48	; 0x30
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800569a:	2301      	movs	r3, #1
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x26>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e18a      	b.n	80059c8 <HAL_SPI_TransmitReceive+0x33c>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ba:	f7fd fbcd 	bl	8002e58 <HAL_GetTick>
 80056be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056d0:	887b      	ldrh	r3, [r7, #2]
 80056d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d00f      	beq.n	80056fc <HAL_SPI_TransmitReceive+0x70>
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056e2:	d107      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d103      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x68>
 80056ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d003      	beq.n	80056fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80056f4:	2302      	movs	r3, #2
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056fa:	e15b      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_SPI_TransmitReceive+0x82>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_SPI_TransmitReceive+0x82>
 8005708:	887b      	ldrh	r3, [r7, #2]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005714:	e14e      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b04      	cmp	r3, #4
 8005720:	d003      	beq.n	800572a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2205      	movs	r2, #5
 8005726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	887a      	ldrh	r2, [r7, #2]
 800573a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	887a      	ldrh	r2, [r7, #2]
 8005740:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	887a      	ldrh	r2, [r7, #2]
 800574c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	887a      	ldrh	r2, [r7, #2]
 8005752:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d007      	beq.n	800577e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800577c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005786:	d178      	bne.n	800587a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_SPI_TransmitReceive+0x10a>
 8005790:	8b7b      	ldrh	r3, [r7, #26]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d166      	bne.n	8005864 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	881a      	ldrh	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	1c9a      	adds	r2, r3, #2
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ba:	e053      	b.n	8005864 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d11b      	bne.n	8005802 <HAL_SPI_TransmitReceive+0x176>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d016      	beq.n	8005802 <HAL_SPI_TransmitReceive+0x176>
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d113      	bne.n	8005802 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	881a      	ldrh	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	1c9a      	adds	r2, r3, #2
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	d119      	bne.n	8005844 <HAL_SPI_TransmitReceive+0x1b8>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d014      	beq.n	8005844 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	b292      	uxth	r2, r2
 8005826:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	1c9a      	adds	r2, r3, #2
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005840:	2301      	movs	r3, #1
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005844:	f7fd fb08 	bl	8002e58 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005850:	429a      	cmp	r2, r3
 8005852:	d807      	bhi.n	8005864 <HAL_SPI_TransmitReceive+0x1d8>
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d003      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005862:	e0a7      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1a6      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x130>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1a1      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x130>
 8005878:	e07c      	b.n	8005974 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x1fc>
 8005882:	8b7b      	ldrh	r3, [r7, #26]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d16b      	bne.n	8005960 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	7812      	ldrb	r2, [r2, #0]
 8005894:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ae:	e057      	b.n	8005960 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d11c      	bne.n	80058f8 <HAL_SPI_TransmitReceive+0x26c>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d017      	beq.n	80058f8 <HAL_SPI_TransmitReceive+0x26c>
 80058c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d114      	bne.n	80058f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	7812      	ldrb	r2, [r2, #0]
 80058da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b01      	cmp	r3, #1
 8005904:	d119      	bne.n	800593a <HAL_SPI_TransmitReceive+0x2ae>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d014      	beq.n	800593a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005936:	2301      	movs	r3, #1
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800593a:	f7fd fa8d 	bl	8002e58 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005946:	429a      	cmp	r2, r3
 8005948:	d803      	bhi.n	8005952 <HAL_SPI_TransmitReceive+0x2c6>
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d102      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x2cc>
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	2b00      	cmp	r3, #0
 8005956:	d103      	bne.n	8005960 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800595e:	e029      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1a2      	bne.n	80058b0 <HAL_SPI_TransmitReceive+0x224>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d19d      	bne.n	80058b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005976:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f917 	bl	8005bac <SPI_EndRxTxTransaction>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d006      	beq.n	8005992 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005990:	e010      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10b      	bne.n	80059b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	e000      	b.n	80059b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3730      	adds	r7, #48	; 0x30
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059e0:	f7fd fa3a 	bl	8002e58 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	4413      	add	r3, r2
 80059ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059f0:	f7fd fa32 	bl	8002e58 <HAL_GetTick>
 80059f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059f6:	4b39      	ldr	r3, [pc, #228]	; (8005adc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	015b      	lsls	r3, r3, #5
 80059fc:	0d1b      	lsrs	r3, r3, #20
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	fb02 f303 	mul.w	r3, r2, r3
 8005a04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a06:	e054      	b.n	8005ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d050      	beq.n	8005ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a10:	f7fd fa22 	bl	8002e58 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d902      	bls.n	8005a26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d13d      	bne.n	8005aa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a3e:	d111      	bne.n	8005a64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a48:	d004      	beq.n	8005a54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a52:	d107      	bne.n	8005a64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6c:	d10f      	bne.n	8005a8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e017      	b.n	8005ad2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4013      	ands	r3, r2
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	bf0c      	ite	eq
 8005ac2:	2301      	moveq	r3, #1
 8005ac4:	2300      	movne	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	461a      	mov	r2, r3
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d19b      	bne.n	8005a08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000004 	.word	0x20000004

08005ae0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af4:	d111      	bne.n	8005b1a <SPI_EndRxTransaction+0x3a>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afe:	d004      	beq.n	8005b0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b08:	d107      	bne.n	8005b1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b22:	d12a      	bne.n	8005b7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2c:	d012      	beq.n	8005b54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2200      	movs	r2, #0
 8005b36:	2180      	movs	r1, #128	; 0x80
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff ff49 	bl	80059d0 <SPI_WaitFlagStateUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d02d      	beq.n	8005ba0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b48:	f043 0220 	orr.w	r2, r3, #32
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e026      	b.n	8005ba2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7ff ff36 	bl	80059d0 <SPI_WaitFlagStateUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01a      	beq.n	8005ba0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6e:	f043 0220 	orr.w	r2, r3, #32
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e013      	b.n	8005ba2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2200      	movs	r2, #0
 8005b82:	2101      	movs	r1, #1
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7ff ff23 	bl	80059d0 <SPI_WaitFlagStateUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e000      	b.n	8005ba2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <SPI_EndRxTxTransaction+0x7c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <SPI_EndRxTxTransaction+0x80>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	0d5b      	lsrs	r3, r3, #21
 8005bc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd6:	d112      	bne.n	8005bfe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2200      	movs	r2, #0
 8005be0:	2180      	movs	r1, #128	; 0x80
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff fef4 	bl	80059d0 <SPI_WaitFlagStateUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d016      	beq.n	8005c1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	f043 0220 	orr.w	r2, r3, #32
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e00f      	b.n	8005c1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c14:	2b80      	cmp	r3, #128	; 0x80
 8005c16:	d0f2      	beq.n	8005bfe <SPI_EndRxTxTransaction+0x52>
 8005c18:	e000      	b.n	8005c1c <SPI_EndRxTxTransaction+0x70>
        break;
 8005c1a:	bf00      	nop
  }

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000004 	.word	0x20000004
 8005c2c:	165e9f81 	.word	0x165e9f81

08005c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e03f      	b.n	8005cc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fc feec 	bl	8002a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2224      	movs	r2, #36	; 0x24
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f929 	bl	8005ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b08a      	sub	sp, #40	; 0x28
 8005cce:	af02      	add	r7, sp, #8
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d17c      	bne.n	8005de4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_UART_Transmit+0x2c>
 8005cf0:	88fb      	ldrh	r3, [r7, #6]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e075      	b.n	8005de6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_UART_Transmit+0x3e>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e06e      	b.n	8005de6 <HAL_UART_Transmit+0x11c>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2221      	movs	r2, #33	; 0x21
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d1e:	f7fd f89b 	bl	8002e58 <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	88fa      	ldrh	r2, [r7, #6]
 8005d28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	88fa      	ldrh	r2, [r7, #6]
 8005d2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d38:	d108      	bne.n	8005d4c <HAL_UART_Transmit+0x82>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d104      	bne.n	8005d4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	e003      	b.n	8005d54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d5c:	e02a      	b.n	8005db4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2200      	movs	r2, #0
 8005d66:	2180      	movs	r1, #128	; 0x80
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f840 	bl	8005dee <UART_WaitOnFlagUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e036      	b.n	8005de6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10b      	bne.n	8005d96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	3302      	adds	r3, #2
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	e007      	b.n	8005da6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	781a      	ldrb	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	3301      	adds	r3, #1
 8005da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1cf      	bne.n	8005d5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2140      	movs	r1, #64	; 0x40
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f810 	bl	8005dee <UART_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e006      	b.n	8005de6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e000      	b.n	8005de6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b090      	sub	sp, #64	; 0x40
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	603b      	str	r3, [r7, #0]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfe:	e050      	b.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e06:	d04c      	beq.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d007      	beq.n	8005e1e <UART_WaitOnFlagUntilTimeout+0x30>
 8005e0e:	f7fd f823 	bl	8002e58 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d241      	bcs.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	330c      	adds	r3, #12
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e3e:	637a      	str	r2, [r7, #52]	; 0x34
 8005e40:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e5      	bne.n	8005e1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3314      	adds	r3, #20
 8005e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	613b      	str	r3, [r7, #16]
   return(result);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3314      	adds	r3, #20
 8005e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e72:	623a      	str	r2, [r7, #32]
 8005e74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	69f9      	ldr	r1, [r7, #28]
 8005e78:	6a3a      	ldr	r2, [r7, #32]
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e5      	bne.n	8005e52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e00f      	b.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	bf0c      	ite	eq
 8005eb2:	2301      	moveq	r3, #1
 8005eb4:	2300      	movne	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d09f      	beq.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3740      	adds	r7, #64	; 0x40
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed0:	b0c0      	sub	sp, #256	; 0x100
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	68d9      	ldr	r1, [r3, #12]
 8005eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	ea40 0301 	orr.w	r3, r0, r1
 8005ef4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f24:	f021 010c 	bic.w	r1, r1, #12
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f32:	430b      	orrs	r3, r1
 8005f34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f46:	6999      	ldr	r1, [r3, #24]
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	ea40 0301 	orr.w	r3, r0, r1
 8005f52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	4b8f      	ldr	r3, [pc, #572]	; (8006198 <UART_SetConfig+0x2cc>)
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d005      	beq.n	8005f6c <UART_SetConfig+0xa0>
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4b8d      	ldr	r3, [pc, #564]	; (800619c <UART_SetConfig+0x2d0>)
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d104      	bne.n	8005f76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f6c:	f7ff f8a4 	bl	80050b8 <HAL_RCC_GetPCLK2Freq>
 8005f70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f74:	e003      	b.n	8005f7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f76:	f7ff f88b 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 8005f7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f88:	f040 810c 	bne.w	80061a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	1891      	adds	r1, r2, r2
 8005fa4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005fa6:	415b      	adcs	r3, r3
 8005fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005fae:	4621      	mov	r1, r4
 8005fb0:	eb12 0801 	adds.w	r8, r2, r1
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	eb43 0901 	adc.w	r9, r3, r1
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fce:	4690      	mov	r8, r2
 8005fd0:	4699      	mov	r9, r3
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	eb18 0303 	adds.w	r3, r8, r3
 8005fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fdc:	462b      	mov	r3, r5
 8005fde:	eb49 0303 	adc.w	r3, r9, r3
 8005fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ff2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	18db      	adds	r3, r3, r3
 8005ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8006000:	4613      	mov	r3, r2
 8006002:	eb42 0303 	adc.w	r3, r2, r3
 8006006:	657b      	str	r3, [r7, #84]	; 0x54
 8006008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800600c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006010:	f7fa fe02 	bl	8000c18 <__aeabi_uldivmod>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4b61      	ldr	r3, [pc, #388]	; (80061a0 <UART_SetConfig+0x2d4>)
 800601a:	fba3 2302 	umull	r2, r3, r3, r2
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	011c      	lsls	r4, r3, #4
 8006022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800602c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006030:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006034:	4642      	mov	r2, r8
 8006036:	464b      	mov	r3, r9
 8006038:	1891      	adds	r1, r2, r2
 800603a:	64b9      	str	r1, [r7, #72]	; 0x48
 800603c:	415b      	adcs	r3, r3
 800603e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006040:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006044:	4641      	mov	r1, r8
 8006046:	eb12 0a01 	adds.w	sl, r2, r1
 800604a:	4649      	mov	r1, r9
 800604c:	eb43 0b01 	adc.w	fp, r3, r1
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800605c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006064:	4692      	mov	sl, r2
 8006066:	469b      	mov	fp, r3
 8006068:	4643      	mov	r3, r8
 800606a:	eb1a 0303 	adds.w	r3, sl, r3
 800606e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006072:	464b      	mov	r3, r9
 8006074:	eb4b 0303 	adc.w	r3, fp, r3
 8006078:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006088:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800608c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006090:	460b      	mov	r3, r1
 8006092:	18db      	adds	r3, r3, r3
 8006094:	643b      	str	r3, [r7, #64]	; 0x40
 8006096:	4613      	mov	r3, r2
 8006098:	eb42 0303 	adc.w	r3, r2, r3
 800609c:	647b      	str	r3, [r7, #68]	; 0x44
 800609e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80060a6:	f7fa fdb7 	bl	8000c18 <__aeabi_uldivmod>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	4b3b      	ldr	r3, [pc, #236]	; (80061a0 <UART_SetConfig+0x2d4>)
 80060b2:	fba3 2301 	umull	r2, r3, r3, r1
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	2264      	movs	r2, #100	; 0x64
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	1acb      	subs	r3, r1, r3
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060c6:	4b36      	ldr	r3, [pc, #216]	; (80061a0 <UART_SetConfig+0x2d4>)
 80060c8:	fba3 2302 	umull	r2, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060d4:	441c      	add	r4, r3
 80060d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060e8:	4642      	mov	r2, r8
 80060ea:	464b      	mov	r3, r9
 80060ec:	1891      	adds	r1, r2, r2
 80060ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80060f0:	415b      	adcs	r3, r3
 80060f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060f8:	4641      	mov	r1, r8
 80060fa:	1851      	adds	r1, r2, r1
 80060fc:	6339      	str	r1, [r7, #48]	; 0x30
 80060fe:	4649      	mov	r1, r9
 8006100:	414b      	adcs	r3, r1
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006110:	4659      	mov	r1, fp
 8006112:	00cb      	lsls	r3, r1, #3
 8006114:	4651      	mov	r1, sl
 8006116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800611a:	4651      	mov	r1, sl
 800611c:	00ca      	lsls	r2, r1, #3
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	4603      	mov	r3, r0
 8006124:	4642      	mov	r2, r8
 8006126:	189b      	adds	r3, r3, r2
 8006128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800612c:	464b      	mov	r3, r9
 800612e:	460a      	mov	r2, r1
 8006130:	eb42 0303 	adc.w	r3, r2, r3
 8006134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006144:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800614c:	460b      	mov	r3, r1
 800614e:	18db      	adds	r3, r3, r3
 8006150:	62bb      	str	r3, [r7, #40]	; 0x28
 8006152:	4613      	mov	r3, r2
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800615a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800615e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006162:	f7fa fd59 	bl	8000c18 <__aeabi_uldivmod>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <UART_SetConfig+0x2d4>)
 800616c:	fba3 1302 	umull	r1, r3, r3, r2
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	2164      	movs	r1, #100	; 0x64
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	3332      	adds	r3, #50	; 0x32
 800617e:	4a08      	ldr	r2, [pc, #32]	; (80061a0 <UART_SetConfig+0x2d4>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	f003 0207 	and.w	r2, r3, #7
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4422      	add	r2, r4
 8006192:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006194:	e105      	b.n	80063a2 <UART_SetConfig+0x4d6>
 8006196:	bf00      	nop
 8006198:	40011000 	.word	0x40011000
 800619c:	40011400 	.word	0x40011400
 80061a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80061b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80061b6:	4642      	mov	r2, r8
 80061b8:	464b      	mov	r3, r9
 80061ba:	1891      	adds	r1, r2, r2
 80061bc:	6239      	str	r1, [r7, #32]
 80061be:	415b      	adcs	r3, r3
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
 80061c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061c6:	4641      	mov	r1, r8
 80061c8:	1854      	adds	r4, r2, r1
 80061ca:	4649      	mov	r1, r9
 80061cc:	eb43 0501 	adc.w	r5, r3, r1
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	00eb      	lsls	r3, r5, #3
 80061da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061de:	00e2      	lsls	r2, r4, #3
 80061e0:	4614      	mov	r4, r2
 80061e2:	461d      	mov	r5, r3
 80061e4:	4643      	mov	r3, r8
 80061e6:	18e3      	adds	r3, r4, r3
 80061e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061ec:	464b      	mov	r3, r9
 80061ee:	eb45 0303 	adc.w	r3, r5, r3
 80061f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006202:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006212:	4629      	mov	r1, r5
 8006214:	008b      	lsls	r3, r1, #2
 8006216:	4621      	mov	r1, r4
 8006218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800621c:	4621      	mov	r1, r4
 800621e:	008a      	lsls	r2, r1, #2
 8006220:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006224:	f7fa fcf8 	bl	8000c18 <__aeabi_uldivmod>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4b60      	ldr	r3, [pc, #384]	; (80063b0 <UART_SetConfig+0x4e4>)
 800622e:	fba3 2302 	umull	r2, r3, r3, r2
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	011c      	lsls	r4, r3, #4
 8006236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800623a:	2200      	movs	r2, #0
 800623c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006240:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006244:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006248:	4642      	mov	r2, r8
 800624a:	464b      	mov	r3, r9
 800624c:	1891      	adds	r1, r2, r2
 800624e:	61b9      	str	r1, [r7, #24]
 8006250:	415b      	adcs	r3, r3
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006258:	4641      	mov	r1, r8
 800625a:	1851      	adds	r1, r2, r1
 800625c:	6139      	str	r1, [r7, #16]
 800625e:	4649      	mov	r1, r9
 8006260:	414b      	adcs	r3, r1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006270:	4659      	mov	r1, fp
 8006272:	00cb      	lsls	r3, r1, #3
 8006274:	4651      	mov	r1, sl
 8006276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800627a:	4651      	mov	r1, sl
 800627c:	00ca      	lsls	r2, r1, #3
 800627e:	4610      	mov	r0, r2
 8006280:	4619      	mov	r1, r3
 8006282:	4603      	mov	r3, r0
 8006284:	4642      	mov	r2, r8
 8006286:	189b      	adds	r3, r3, r2
 8006288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800628c:	464b      	mov	r3, r9
 800628e:	460a      	mov	r2, r1
 8006290:	eb42 0303 	adc.w	r3, r2, r3
 8006294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80062a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80062b0:	4649      	mov	r1, r9
 80062b2:	008b      	lsls	r3, r1, #2
 80062b4:	4641      	mov	r1, r8
 80062b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062ba:	4641      	mov	r1, r8
 80062bc:	008a      	lsls	r2, r1, #2
 80062be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80062c2:	f7fa fca9 	bl	8000c18 <__aeabi_uldivmod>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4b39      	ldr	r3, [pc, #228]	; (80063b0 <UART_SetConfig+0x4e4>)
 80062cc:	fba3 1302 	umull	r1, r3, r3, r2
 80062d0:	095b      	lsrs	r3, r3, #5
 80062d2:	2164      	movs	r1, #100	; 0x64
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	3332      	adds	r3, #50	; 0x32
 80062de:	4a34      	ldr	r2, [pc, #208]	; (80063b0 <UART_SetConfig+0x4e4>)
 80062e0:	fba2 2303 	umull	r2, r3, r2, r3
 80062e4:	095b      	lsrs	r3, r3, #5
 80062e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ea:	441c      	add	r4, r3
 80062ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f0:	2200      	movs	r2, #0
 80062f2:	673b      	str	r3, [r7, #112]	; 0x70
 80062f4:	677a      	str	r2, [r7, #116]	; 0x74
 80062f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062fa:	4642      	mov	r2, r8
 80062fc:	464b      	mov	r3, r9
 80062fe:	1891      	adds	r1, r2, r2
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	415b      	adcs	r3, r3
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800630a:	4641      	mov	r1, r8
 800630c:	1851      	adds	r1, r2, r1
 800630e:	6039      	str	r1, [r7, #0]
 8006310:	4649      	mov	r1, r9
 8006312:	414b      	adcs	r3, r1
 8006314:	607b      	str	r3, [r7, #4]
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006322:	4659      	mov	r1, fp
 8006324:	00cb      	lsls	r3, r1, #3
 8006326:	4651      	mov	r1, sl
 8006328:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800632c:	4651      	mov	r1, sl
 800632e:	00ca      	lsls	r2, r1, #3
 8006330:	4610      	mov	r0, r2
 8006332:	4619      	mov	r1, r3
 8006334:	4603      	mov	r3, r0
 8006336:	4642      	mov	r2, r8
 8006338:	189b      	adds	r3, r3, r2
 800633a:	66bb      	str	r3, [r7, #104]	; 0x68
 800633c:	464b      	mov	r3, r9
 800633e:	460a      	mov	r2, r1
 8006340:	eb42 0303 	adc.w	r3, r2, r3
 8006344:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	663b      	str	r3, [r7, #96]	; 0x60
 8006350:	667a      	str	r2, [r7, #100]	; 0x64
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800635e:	4649      	mov	r1, r9
 8006360:	008b      	lsls	r3, r1, #2
 8006362:	4641      	mov	r1, r8
 8006364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006368:	4641      	mov	r1, r8
 800636a:	008a      	lsls	r2, r1, #2
 800636c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006370:	f7fa fc52 	bl	8000c18 <__aeabi_uldivmod>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4b0d      	ldr	r3, [pc, #52]	; (80063b0 <UART_SetConfig+0x4e4>)
 800637a:	fba3 1302 	umull	r1, r3, r3, r2
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	2164      	movs	r1, #100	; 0x64
 8006382:	fb01 f303 	mul.w	r3, r1, r3
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	3332      	adds	r3, #50	; 0x32
 800638c:	4a08      	ldr	r2, [pc, #32]	; (80063b0 <UART_SetConfig+0x4e4>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	f003 020f 	and.w	r2, r3, #15
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4422      	add	r2, r4
 80063a0:	609a      	str	r2, [r3, #8]
}
 80063a2:	bf00      	nop
 80063a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063a8:	46bd      	mov	sp, r7
 80063aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ae:	bf00      	nop
 80063b0:	51eb851f 	.word	0x51eb851f

080063b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80063b8:	4904      	ldr	r1, [pc, #16]	; (80063cc <MX_FATFS_Init+0x18>)
 80063ba:	4805      	ldr	r0, [pc, #20]	; (80063d0 <MX_FATFS_Init+0x1c>)
 80063bc:	f002 ff0e 	bl	80091dc <FATFS_LinkDriver>
 80063c0:	4603      	mov	r3, r0
 80063c2:	461a      	mov	r2, r3
 80063c4:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <MX_FATFS_Init+0x20>)
 80063c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80063c8:	bf00      	nop
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20000c94 	.word	0x20000c94
 80063d0:	20000010 	.word	0x20000010
 80063d4:	20000c90 	.word	0x20000c90

080063d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80063dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80063de:	4618      	mov	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fb f8d5 	bl	80015a4 <SD_disk_initialize>
 80063fa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	4618      	mov	r0, r3
 8006412:	f7fb f9ad 	bl	8001770 <SD_disk_status>
 8006416:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006430:	7bf8      	ldrb	r0, [r7, #15]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	f7fb f9b0 	bl	800179c <SD_disk_read>
 800643c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	4603      	mov	r3, r0
 8006454:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006456:	7bf8      	ldrb	r0, [r7, #15]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	f7fb fa07 	bl	8001870 <SD_disk_write>
 8006462:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	603a      	str	r2, [r7, #0]
 8006476:	71fb      	strb	r3, [r7, #7]
 8006478:	460b      	mov	r3, r1
 800647a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800647c:	79b9      	ldrb	r1, [r7, #6]
 800647e:	79fb      	ldrb	r3, [r7, #7]
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f7fb fa78 	bl	8001978 <SD_disk_ioctl>
 8006488:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	4a08      	ldr	r2, [pc, #32]	; (80064c4 <disk_status+0x30>)
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	79fa      	ldrb	r2, [r7, #7]
 80064ac:	4905      	ldr	r1, [pc, #20]	; (80064c4 <disk_status+0x30>)
 80064ae:	440a      	add	r2, r1
 80064b0:	7a12      	ldrb	r2, [r2, #8]
 80064b2:	4610      	mov	r0, r2
 80064b4:	4798      	blx	r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000cc0 	.word	0x20000cc0

080064c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	4a0d      	ldr	r2, [pc, #52]	; (8006510 <disk_initialize+0x48>)
 80064da:	5cd3      	ldrb	r3, [r2, r3]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d111      	bne.n	8006504 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	4a0b      	ldr	r2, [pc, #44]	; (8006510 <disk_initialize+0x48>)
 80064e4:	2101      	movs	r1, #1
 80064e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	4a09      	ldr	r2, [pc, #36]	; (8006510 <disk_initialize+0x48>)
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	79fa      	ldrb	r2, [r7, #7]
 80064f6:	4906      	ldr	r1, [pc, #24]	; (8006510 <disk_initialize+0x48>)
 80064f8:	440a      	add	r2, r1
 80064fa:	7a12      	ldrb	r2, [r2, #8]
 80064fc:	4610      	mov	r0, r2
 80064fe:	4798      	blx	r3
 8006500:	4603      	mov	r3, r0
 8006502:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006504:	7bfb      	ldrb	r3, [r7, #15]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000cc0 	.word	0x20000cc0

08006514 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006514:	b590      	push	{r4, r7, lr}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	607a      	str	r2, [r7, #4]
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	4603      	mov	r3, r0
 8006522:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	4a0a      	ldr	r2, [pc, #40]	; (8006550 <disk_read+0x3c>)
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	689c      	ldr	r4, [r3, #8]
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	4a07      	ldr	r2, [pc, #28]	; (8006550 <disk_read+0x3c>)
 8006534:	4413      	add	r3, r2
 8006536:	7a18      	ldrb	r0, [r3, #8]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	47a0      	blx	r4
 8006540:	4603      	mov	r3, r0
 8006542:	75fb      	strb	r3, [r7, #23]
  return res;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
}
 8006546:	4618      	mov	r0, r3
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	bd90      	pop	{r4, r7, pc}
 800654e:	bf00      	nop
 8006550:	20000cc0 	.word	0x20000cc0

08006554 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006554:	b590      	push	{r4, r7, lr}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	4a0a      	ldr	r2, [pc, #40]	; (8006590 <disk_write+0x3c>)
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	68dc      	ldr	r4, [r3, #12]
 8006570:	7bfb      	ldrb	r3, [r7, #15]
 8006572:	4a07      	ldr	r2, [pc, #28]	; (8006590 <disk_write+0x3c>)
 8006574:	4413      	add	r3, r2
 8006576:	7a18      	ldrb	r0, [r3, #8]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	47a0      	blx	r4
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]
  return res;
 8006584:	7dfb      	ldrb	r3, [r7, #23]
}
 8006586:	4618      	mov	r0, r3
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	bd90      	pop	{r4, r7, pc}
 800658e:	bf00      	nop
 8006590:	20000cc0 	.word	0x20000cc0

08006594 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	4603      	mov	r3, r0
 800659c:	603a      	str	r2, [r7, #0]
 800659e:	71fb      	strb	r3, [r7, #7]
 80065a0:	460b      	mov	r3, r1
 80065a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	4a09      	ldr	r2, [pc, #36]	; (80065cc <disk_ioctl+0x38>)
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	79fa      	ldrb	r2, [r7, #7]
 80065b2:	4906      	ldr	r1, [pc, #24]	; (80065cc <disk_ioctl+0x38>)
 80065b4:	440a      	add	r2, r1
 80065b6:	7a10      	ldrb	r0, [r2, #8]
 80065b8:	79b9      	ldrb	r1, [r7, #6]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	4798      	blx	r3
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20000cc0 	.word	0x20000cc0

080065d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3301      	adds	r3, #1
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80065e0:	89fb      	ldrh	r3, [r7, #14]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	b21a      	sxth	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	b21b      	sxth	r3, r3
 80065ec:	4313      	orrs	r3, r2
 80065ee:	b21b      	sxth	r3, r3
 80065f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80065f2:	89fb      	ldrh	r3, [r7, #14]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3303      	adds	r3, #3
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	3202      	adds	r2, #2
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	3201      	adds	r2, #1
 8006626:	7812      	ldrb	r2, [r2, #0]
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	7812      	ldrb	r2, [r2, #0]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
	return rv;
 8006638:	68fb      	ldr	r3, [r7, #12]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	887a      	ldrh	r2, [r7, #2]
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	887b      	ldrh	r3, [r7, #2]
 8006660:	0a1b      	lsrs	r3, r3, #8
 8006662:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	607a      	str	r2, [r7, #4]
 800666a:	887a      	ldrh	r2, [r7, #2]
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	0a1b      	lsrs	r3, r3, #8
 8006696:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	607a      	str	r2, [r7, #4]
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	0a1b      	lsrs	r3, r3, #8
 80066a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	0a1b      	lsrs	r3, r3, #8
 80066ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	701a      	strb	r2, [r3, #0]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00d      	beq.n	800670a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	1c53      	adds	r3, r2, #1
 80066f2:	613b      	str	r3, [r7, #16]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	1c59      	adds	r1, r3, #1
 80066f8:	6179      	str	r1, [r7, #20]
 80066fa:	7812      	ldrb	r2, [r2, #0]
 80066fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3b01      	subs	r3, #1
 8006702:	607b      	str	r3, [r7, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f1      	bne.n	80066ee <mem_cpy+0x1a>
	}
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006716:	b480      	push	{r7}
 8006718:	b087      	sub	sp, #28
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	617a      	str	r2, [r7, #20]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3b01      	subs	r3, #1
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1f3      	bne.n	8006726 <mem_set+0x10>
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800674c:	b480      	push	{r7}
 800674e:	b089      	sub	sp, #36	; 0x24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	61fa      	str	r2, [r7, #28]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	4619      	mov	r1, r3
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	61ba      	str	r2, [r7, #24]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	1acb      	subs	r3, r1, r3
 8006778:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3b01      	subs	r3, #1
 800677e:	607b      	str	r3, [r7, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <mem_cmp+0x40>
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0eb      	beq.n	8006764 <mem_cmp+0x18>

	return r;
 800678c:	697b      	ldr	r3, [r7, #20]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3724      	adds	r7, #36	; 0x24
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80067a4:	e002      	b.n	80067ac <chk_chr+0x12>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3301      	adds	r3, #1
 80067aa:	607b      	str	r3, [r7, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d005      	beq.n	80067c0 <chk_chr+0x26>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	4293      	cmp	r3, r2
 80067be:	d1f2      	bne.n	80067a6 <chk_chr+0xc>
	return *str;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	781b      	ldrb	r3, [r3, #0]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80067da:	2300      	movs	r3, #0
 80067dc:	60bb      	str	r3, [r7, #8]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e029      	b.n	8006838 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80067e4:	4a27      	ldr	r2, [pc, #156]	; (8006884 <chk_lock+0xb4>)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	4413      	add	r3, r2
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d01d      	beq.n	800682e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80067f2:	4a24      	ldr	r2, [pc, #144]	; (8006884 <chk_lock+0xb4>)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	4413      	add	r3, r2
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d116      	bne.n	8006832 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006804:	4a1f      	ldr	r2, [pc, #124]	; (8006884 <chk_lock+0xb4>)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	4413      	add	r3, r2
 800680c:	3304      	adds	r3, #4
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006814:	429a      	cmp	r2, r3
 8006816:	d10c      	bne.n	8006832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006818:	4a1a      	ldr	r2, [pc, #104]	; (8006884 <chk_lock+0xb4>)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	4413      	add	r3, r2
 8006820:	3308      	adds	r3, #8
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006828:	429a      	cmp	r2, r3
 800682a:	d102      	bne.n	8006832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800682c:	e007      	b.n	800683e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800682e:	2301      	movs	r3, #1
 8006830:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3301      	adds	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d9d2      	bls.n	80067e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d109      	bne.n	8006858 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d102      	bne.n	8006850 <chk_lock+0x80>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b02      	cmp	r3, #2
 800684e:	d101      	bne.n	8006854 <chk_lock+0x84>
 8006850:	2300      	movs	r3, #0
 8006852:	e010      	b.n	8006876 <chk_lock+0xa6>
 8006854:	2312      	movs	r3, #18
 8006856:	e00e      	b.n	8006876 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d108      	bne.n	8006870 <chk_lock+0xa0>
 800685e:	4a09      	ldr	r2, [pc, #36]	; (8006884 <chk_lock+0xb4>)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	4413      	add	r3, r2
 8006866:	330c      	adds	r3, #12
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686e:	d101      	bne.n	8006874 <chk_lock+0xa4>
 8006870:	2310      	movs	r3, #16
 8006872:	e000      	b.n	8006876 <chk_lock+0xa6>
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20000ca0 	.word	0x20000ca0

08006888 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800688e:	2300      	movs	r3, #0
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	e002      	b.n	800689a <enq_lock+0x12>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3301      	adds	r3, #1
 8006898:	607b      	str	r3, [r7, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d806      	bhi.n	80068ae <enq_lock+0x26>
 80068a0:	4a09      	ldr	r2, [pc, #36]	; (80068c8 <enq_lock+0x40>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	4413      	add	r3, r2
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f2      	bne.n	8006894 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	bf14      	ite	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	2300      	moveq	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	20000ca0 	.word	0x20000ca0

080068cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e01f      	b.n	800691c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80068dc:	4a41      	ldr	r2, [pc, #260]	; (80069e4 <inc_lock+0x118>)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	4413      	add	r3, r2
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d113      	bne.n	8006916 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80068ee:	4a3d      	ldr	r2, [pc, #244]	; (80069e4 <inc_lock+0x118>)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	4413      	add	r3, r2
 80068f6:	3304      	adds	r3, #4
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80068fe:	429a      	cmp	r2, r3
 8006900:	d109      	bne.n	8006916 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006902:	4a38      	ldr	r2, [pc, #224]	; (80069e4 <inc_lock+0x118>)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	4413      	add	r3, r2
 800690a:	3308      	adds	r3, #8
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006912:	429a      	cmp	r2, r3
 8006914:	d006      	beq.n	8006924 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d9dc      	bls.n	80068dc <inc_lock+0x10>
 8006922:	e000      	b.n	8006926 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006924:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b02      	cmp	r3, #2
 800692a:	d132      	bne.n	8006992 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e002      	b.n	8006938 <inc_lock+0x6c>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d806      	bhi.n	800694c <inc_lock+0x80>
 800693e:	4a29      	ldr	r2, [pc, #164]	; (80069e4 <inc_lock+0x118>)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	4413      	add	r3, r2
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1f2      	bne.n	8006932 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d101      	bne.n	8006956 <inc_lock+0x8a>
 8006952:	2300      	movs	r3, #0
 8006954:	e040      	b.n	80069d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4922      	ldr	r1, [pc, #136]	; (80069e4 <inc_lock+0x118>)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	440b      	add	r3, r1
 8006962:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	491e      	ldr	r1, [pc, #120]	; (80069e4 <inc_lock+0x118>)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	440b      	add	r3, r1
 8006970:	3304      	adds	r3, #4
 8006972:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	695a      	ldr	r2, [r3, #20]
 8006978:	491a      	ldr	r1, [pc, #104]	; (80069e4 <inc_lock+0x118>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	440b      	add	r3, r1
 8006980:	3308      	adds	r3, #8
 8006982:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006984:	4a17      	ldr	r2, [pc, #92]	; (80069e4 <inc_lock+0x118>)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	4413      	add	r3, r2
 800698c:	330c      	adds	r3, #12
 800698e:	2200      	movs	r2, #0
 8006990:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <inc_lock+0xe0>
 8006998:	4a12      	ldr	r2, [pc, #72]	; (80069e4 <inc_lock+0x118>)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	4413      	add	r3, r2
 80069a0:	330c      	adds	r3, #12
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <inc_lock+0xe0>
 80069a8:	2300      	movs	r3, #0
 80069aa:	e015      	b.n	80069d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d108      	bne.n	80069c4 <inc_lock+0xf8>
 80069b2:	4a0c      	ldr	r2, [pc, #48]	; (80069e4 <inc_lock+0x118>)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	4413      	add	r3, r2
 80069ba:	330c      	adds	r3, #12
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	3301      	adds	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	e001      	b.n	80069c8 <inc_lock+0xfc>
 80069c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069c8:	4906      	ldr	r1, [pc, #24]	; (80069e4 <inc_lock+0x118>)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	440b      	add	r3, r1
 80069d0:	330c      	adds	r3, #12
 80069d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	20000ca0 	.word	0x20000ca0

080069e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	607b      	str	r3, [r7, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d825      	bhi.n	8006a48 <dec_lock+0x60>
		n = Files[i].ctr;
 80069fc:	4a17      	ldr	r2, [pc, #92]	; (8006a5c <dec_lock+0x74>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	4413      	add	r3, r2
 8006a04:	330c      	adds	r3, #12
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006a0a:	89fb      	ldrh	r3, [r7, #14]
 8006a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a10:	d101      	bne.n	8006a16 <dec_lock+0x2e>
 8006a12:	2300      	movs	r3, #0
 8006a14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006a16:	89fb      	ldrh	r3, [r7, #14]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <dec_lock+0x3a>
 8006a1c:	89fb      	ldrh	r3, [r7, #14]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006a22:	4a0e      	ldr	r2, [pc, #56]	; (8006a5c <dec_lock+0x74>)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	4413      	add	r3, r2
 8006a2a:	330c      	adds	r3, #12
 8006a2c:	89fa      	ldrh	r2, [r7, #14]
 8006a2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006a30:	89fb      	ldrh	r3, [r7, #14]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d105      	bne.n	8006a42 <dec_lock+0x5a>
 8006a36:	4a09      	ldr	r2, [pc, #36]	; (8006a5c <dec_lock+0x74>)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	4413      	add	r3, r2
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	737b      	strb	r3, [r7, #13]
 8006a46:	e001      	b.n	8006a4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006a48:	2302      	movs	r3, #2
 8006a4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006a4c:	7b7b      	ldrb	r3, [r7, #13]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000ca0 	.word	0x20000ca0

08006a60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	e010      	b.n	8006a90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a6e:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <clear_lock+0x44>)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	4413      	add	r3, r2
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d105      	bne.n	8006a8a <clear_lock+0x2a>
 8006a7e:	4a09      	ldr	r2, [pc, #36]	; (8006aa4 <clear_lock+0x44>)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	4413      	add	r3, r2
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d9eb      	bls.n	8006a6e <clear_lock+0xe>
	}
}
 8006a96:	bf00      	nop
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	20000ca0 	.word	0x20000ca0

08006aa8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	78db      	ldrb	r3, [r3, #3]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d034      	beq.n	8006b26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	7858      	ldrb	r0, [r3, #1]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006acc:	2301      	movs	r3, #1
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	f7ff fd40 	bl	8006554 <disk_write>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
 8006ade:	e022      	b.n	8006b26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	1ad2      	subs	r2, r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d217      	bcs.n	8006b26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	789b      	ldrb	r3, [r3, #2]
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	e010      	b.n	8006b20 <sync_window+0x78>
					wsect += fs->fsize;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	4413      	add	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	7858      	ldrb	r0, [r3, #1]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b12:	2301      	movs	r3, #1
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	f7ff fd1d 	bl	8006554 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d8eb      	bhi.n	8006afe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d01b      	beq.n	8006b80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff ffad 	bl	8006aa8 <sync_window>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d113      	bne.n	8006b80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	7858      	ldrb	r0, [r3, #1]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b62:	2301      	movs	r3, #1
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	f7ff fcd5 	bl	8006514 <disk_read>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d004      	beq.n	8006b7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006b70:	f04f 33ff 	mov.w	r3, #4294967295
 8006b74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff ff87 	bl	8006aa8 <sync_window>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d159      	bne.n	8006c58 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d149      	bne.n	8006c40 <sync_fs+0xb4>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	791b      	ldrb	r3, [r3, #4]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d145      	bne.n	8006c40 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	899b      	ldrh	r3, [r3, #12]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	f7ff fda8 	bl	8006716 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3334      	adds	r3, #52	; 0x34
 8006bca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006bce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff fd37 	bl	8006646 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3334      	adds	r3, #52	; 0x34
 8006bdc:	4921      	ldr	r1, [pc, #132]	; (8006c64 <sync_fs+0xd8>)
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff fd4c 	bl	800667c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3334      	adds	r3, #52	; 0x34
 8006be8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006bec:	491e      	ldr	r1, [pc, #120]	; (8006c68 <sync_fs+0xdc>)
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff fd44 	bl	800667c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3334      	adds	r3, #52	; 0x34
 8006bf8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f7ff fd3a 	bl	800667c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3334      	adds	r3, #52	; 0x34
 8006c0c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	4619      	mov	r1, r3
 8006c16:	4610      	mov	r0, r2
 8006c18:	f7ff fd30 	bl	800667c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7858      	ldrb	r0, [r3, #1]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c34:	2301      	movs	r3, #1
 8006c36:	f7ff fc8d 	bl	8006554 <disk_write>
			fs->fsi_flag = 0;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	2200      	movs	r2, #0
 8006c46:	2100      	movs	r1, #0
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff fca3 	bl	8006594 <disk_ioctl>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <sync_fs+0xcc>
 8006c54:	2301      	movs	r3, #1
 8006c56:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	41615252 	.word	0x41615252
 8006c68:	61417272 	.word	0x61417272

08006c6c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	3b02      	subs	r3, #2
 8006c7a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	3b02      	subs	r3, #2
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d301      	bcc.n	8006c8c <clust2sect+0x20>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	e008      	b.n	8006c9e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	895b      	ldrh	r3, [r3, #10]
 8006c90:	461a      	mov	r2, r3
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	fb03 f202 	mul.w	r2, r3, r2
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	4413      	add	r3, r2
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b086      	sub	sp, #24
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d904      	bls.n	8006cca <get_fat+0x20>
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d302      	bcc.n	8006cd0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e0bb      	b.n	8006e48 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	f000 8083 	beq.w	8006de6 <get_fat+0x13c>
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	f300 80a7 	bgt.w	8006e34 <get_fat+0x18a>
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d002      	beq.n	8006cf0 <get_fat+0x46>
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d056      	beq.n	8006d9c <get_fat+0xf2>
 8006cee:	e0a1      	b.n	8006e34 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	899b      	ldrh	r3, [r3, #12]
 8006d06:	4619      	mov	r1, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d0e:	4413      	add	r3, r2
 8006d10:	4619      	mov	r1, r3
 8006d12:	6938      	ldr	r0, [r7, #16]
 8006d14:	f7ff ff0c 	bl	8006b30 <move_window>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f040 808d 	bne.w	8006e3a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	60fa      	str	r2, [r7, #12]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	8992      	ldrh	r2, [r2, #12]
 8006d2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d2e:	fb01 f202 	mul.w	r2, r1, r2
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4413      	add	r3, r2
 8006d38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	899b      	ldrh	r3, [r3, #12]
 8006d46:	4619      	mov	r1, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d4e:	4413      	add	r3, r2
 8006d50:	4619      	mov	r1, r3
 8006d52:	6938      	ldr	r0, [r7, #16]
 8006d54:	f7ff feec 	bl	8006b30 <move_window>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d16f      	bne.n	8006e3e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	899b      	ldrh	r3, [r3, #12]
 8006d62:	461a      	mov	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d6a:	fb01 f202 	mul.w	r2, r1, r2
 8006d6e:	1a9b      	subs	r3, r3, r2
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4413      	add	r3, r2
 8006d74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <get_fat+0xe8>
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	091b      	lsrs	r3, r3, #4
 8006d90:	e002      	b.n	8006d98 <get_fat+0xee>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d98:	617b      	str	r3, [r7, #20]
			break;
 8006d9a:	e055      	b.n	8006e48 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	899b      	ldrh	r3, [r3, #12]
 8006da4:	085b      	lsrs	r3, r3, #1
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	4619      	mov	r1, r3
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	fbb3 f3f1 	udiv	r3, r3, r1
 8006db0:	4413      	add	r3, r2
 8006db2:	4619      	mov	r1, r3
 8006db4:	6938      	ldr	r0, [r7, #16]
 8006db6:	f7ff febb 	bl	8006b30 <move_window>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d140      	bne.n	8006e42 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	8992      	ldrh	r2, [r2, #12]
 8006dce:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dd2:	fb00 f202 	mul.w	r2, r0, r2
 8006dd6:	1a9b      	subs	r3, r3, r2
 8006dd8:	440b      	add	r3, r1
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff fbf8 	bl	80065d0 <ld_word>
 8006de0:	4603      	mov	r3, r0
 8006de2:	617b      	str	r3, [r7, #20]
			break;
 8006de4:	e030      	b.n	8006e48 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	899b      	ldrh	r3, [r3, #12]
 8006dee:	089b      	lsrs	r3, r3, #2
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	4619      	mov	r1, r3
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dfa:	4413      	add	r3, r2
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6938      	ldr	r0, [r7, #16]
 8006e00:	f7ff fe96 	bl	8006b30 <move_window>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d11d      	bne.n	8006e46 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	8992      	ldrh	r2, [r2, #12]
 8006e18:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e1c:	fb00 f202 	mul.w	r2, r0, r2
 8006e20:	1a9b      	subs	r3, r3, r2
 8006e22:	440b      	add	r3, r1
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff fbeb 	bl	8006600 <ld_dword>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e30:	617b      	str	r3, [r7, #20]
			break;
 8006e32:	e009      	b.n	8006e48 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006e34:	2301      	movs	r3, #1
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	e006      	b.n	8006e48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e3a:	bf00      	nop
 8006e3c:	e004      	b.n	8006e48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e3e:	bf00      	nop
 8006e40:	e002      	b.n	8006e48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006e42:	bf00      	nop
 8006e44:	e000      	b.n	8006e48 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e46:	bf00      	nop
		}
	}

	return val;
 8006e48:	697b      	ldr	r3, [r7, #20]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006e52:	b590      	push	{r4, r7, lr}
 8006e54:	b089      	sub	sp, #36	; 0x24
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	f240 8102 	bls.w	800706e <put_fat+0x21c>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	f080 80fc 	bcs.w	800706e <put_fat+0x21c>
		switch (fs->fs_type) {
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	f000 80b6 	beq.w	8006fec <put_fat+0x19a>
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	f300 80fd 	bgt.w	8007080 <put_fat+0x22e>
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d003      	beq.n	8006e92 <put_fat+0x40>
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	f000 8083 	beq.w	8006f96 <put_fat+0x144>
 8006e90:	e0f6      	b.n	8007080 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	085b      	lsrs	r3, r3, #1
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	899b      	ldrh	r3, [r3, #12]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	fbb3 f3f1 	udiv	r3, r3, r1
 8006eb0:	4413      	add	r3, r2
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff fe3b 	bl	8006b30 <move_window>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ebe:	7ffb      	ldrb	r3, [r7, #31]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f040 80d6 	bne.w	8007072 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	61ba      	str	r2, [r7, #24]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	8992      	ldrh	r2, [r2, #12]
 8006ed6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006eda:	fb00 f202 	mul.w	r2, r0, r2
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00d      	beq.n	8006f0a <put_fat+0xb8>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	b25b      	sxtb	r3, r3
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	b25a      	sxtb	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	b25b      	sxtb	r3, r3
 8006f02:	4313      	orrs	r3, r2
 8006f04:	b25b      	sxtb	r3, r3
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	e001      	b.n	8006f0e <put_fat+0xbc>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	899b      	ldrh	r3, [r3, #12]
 8006f20:	4619      	mov	r1, r3
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f28:	4413      	add	r3, r2
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff fdff 	bl	8006b30 <move_window>
 8006f32:	4603      	mov	r3, r0
 8006f34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f36:	7ffb      	ldrb	r3, [r7, #31]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f040 809c 	bne.w	8007076 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	899b      	ldrh	r3, [r3, #12]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f50:	fb00 f202 	mul.w	r2, r0, r2
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	440b      	add	r3, r1
 8006f58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <put_fat+0x11a>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	091b      	lsrs	r3, r3, #4
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	e00e      	b.n	8006f8a <put_fat+0x138>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	b25b      	sxtb	r3, r3
 8006f72:	f023 030f 	bic.w	r3, r3, #15
 8006f76:	b25a      	sxtb	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	0a1b      	lsrs	r3, r3, #8
 8006f7c:	b25b      	sxtb	r3, r3
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	b25b      	sxtb	r3, r3
 8006f84:	4313      	orrs	r3, r2
 8006f86:	b25b      	sxtb	r3, r3
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	70da      	strb	r2, [r3, #3]
			break;
 8006f94:	e074      	b.n	8007080 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	899b      	ldrh	r3, [r3, #12]
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006faa:	4413      	add	r3, r2
 8006fac:	4619      	mov	r1, r3
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f7ff fdbe 	bl	8006b30 <move_window>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006fb8:	7ffb      	ldrb	r3, [r7, #31]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d15d      	bne.n	800707a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	8992      	ldrh	r2, [r2, #12]
 8006fcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fd0:	fb00 f202 	mul.w	r2, r0, r2
 8006fd4:	1a9b      	subs	r3, r3, r2
 8006fd6:	440b      	add	r3, r1
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	b292      	uxth	r2, r2
 8006fdc:	4611      	mov	r1, r2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff fb31 	bl	8006646 <st_word>
			fs->wflag = 1;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	70da      	strb	r2, [r3, #3]
			break;
 8006fea:	e049      	b.n	8007080 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	899b      	ldrh	r3, [r3, #12]
 8006ff4:	089b      	lsrs	r3, r3, #2
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007000:	4413      	add	r3, r2
 8007002:	4619      	mov	r1, r3
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff fd93 	bl	8006b30 <move_window>
 800700a:	4603      	mov	r3, r0
 800700c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800700e:	7ffb      	ldrb	r3, [r7, #31]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d134      	bne.n	800707e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	8992      	ldrh	r2, [r2, #12]
 8007028:	fbb3 f0f2 	udiv	r0, r3, r2
 800702c:	fb00 f202 	mul.w	r2, r0, r2
 8007030:	1a9b      	subs	r3, r3, r2
 8007032:	440b      	add	r3, r1
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff fae3 	bl	8006600 <ld_dword>
 800703a:	4603      	mov	r3, r0
 800703c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007040:	4323      	orrs	r3, r4
 8007042:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	8992      	ldrh	r2, [r2, #12]
 8007052:	fbb3 f0f2 	udiv	r0, r3, r2
 8007056:	fb00 f202 	mul.w	r2, r0, r2
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	440b      	add	r3, r1
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fb0b 	bl	800667c <st_dword>
			fs->wflag = 1;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	70da      	strb	r2, [r3, #3]
			break;
 800706c:	e008      	b.n	8007080 <put_fat+0x22e>
		}
	}
 800706e:	bf00      	nop
 8007070:	e006      	b.n	8007080 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007072:	bf00      	nop
 8007074:	e004      	b.n	8007080 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007076:	bf00      	nop
 8007078:	e002      	b.n	8007080 <put_fat+0x22e>
			if (res != FR_OK) break;
 800707a:	bf00      	nop
 800707c:	e000      	b.n	8007080 <put_fat+0x22e>
			if (res != FR_OK) break;
 800707e:	bf00      	nop
	return res;
 8007080:	7ffb      	ldrb	r3, [r7, #31]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3724      	adds	r7, #36	; 0x24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd90      	pop	{r4, r7, pc}

0800708a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b088      	sub	sp, #32
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d904      	bls.n	80070b0 <remove_chain+0x26>
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d301      	bcc.n	80070b4 <remove_chain+0x2a>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e04b      	b.n	800714c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00c      	beq.n	80070d4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80070ba:	f04f 32ff 	mov.w	r2, #4294967295
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	69b8      	ldr	r0, [r7, #24]
 80070c2:	f7ff fec6 	bl	8006e52 <put_fat>
 80070c6:	4603      	mov	r3, r0
 80070c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80070ca:	7ffb      	ldrb	r3, [r7, #31]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <remove_chain+0x4a>
 80070d0:	7ffb      	ldrb	r3, [r7, #31]
 80070d2:	e03b      	b.n	800714c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7ff fde7 	bl	8006caa <get_fat>
 80070dc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d031      	beq.n	8007148 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d101      	bne.n	80070ee <remove_chain+0x64>
 80070ea:	2302      	movs	r3, #2
 80070ec:	e02e      	b.n	800714c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d101      	bne.n	80070fa <remove_chain+0x70>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e028      	b.n	800714c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80070fa:	2200      	movs	r2, #0
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	69b8      	ldr	r0, [r7, #24]
 8007100:	f7ff fea7 	bl	8006e52 <put_fat>
 8007104:	4603      	mov	r3, r0
 8007106:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007108:	7ffb      	ldrb	r3, [r7, #31]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <remove_chain+0x88>
 800710e:	7ffb      	ldrb	r3, [r7, #31]
 8007110:	e01c      	b.n	800714c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	695a      	ldr	r2, [r3, #20]
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	3b02      	subs	r3, #2
 800711c:	429a      	cmp	r2, r3
 800711e:	d20b      	bcs.n	8007138 <remove_chain+0xae>
			fs->free_clst++;
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	791b      	ldrb	r3, [r3, #4]
 800712e:	f043 0301 	orr.w	r3, r3, #1
 8007132:	b2da      	uxtb	r2, r3
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	429a      	cmp	r2, r3
 8007144:	d3c6      	bcc.n	80070d4 <remove_chain+0x4a>
 8007146:	e000      	b.n	800714a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007148:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3720      	adds	r7, #32
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10d      	bne.n	8007186 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d004      	beq.n	8007180 <create_chain+0x2c>
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	429a      	cmp	r2, r3
 800717e:	d31b      	bcc.n	80071b8 <create_chain+0x64>
 8007180:	2301      	movs	r3, #1
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	e018      	b.n	80071b8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff fd8e 	bl	8006caa <get_fat>
 800718e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d801      	bhi.n	800719a <create_chain+0x46>
 8007196:	2301      	movs	r3, #1
 8007198:	e070      	b.n	800727c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a0:	d101      	bne.n	80071a6 <create_chain+0x52>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	e06a      	b.n	800727c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d201      	bcs.n	80071b4 <create_chain+0x60>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	e063      	b.n	800727c <create_chain+0x128>
		scl = clst;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	3301      	adds	r3, #1
 80071c0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d307      	bcc.n	80071dc <create_chain+0x88>
				ncl = 2;
 80071cc:	2302      	movs	r3, #2
 80071ce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d901      	bls.n	80071dc <create_chain+0x88>
 80071d8:	2300      	movs	r3, #0
 80071da:	e04f      	b.n	800727c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80071dc:	69f9      	ldr	r1, [r7, #28]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff fd63 	bl	8006caa <get_fat>
 80071e4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00e      	beq.n	800720a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d003      	beq.n	80071fa <create_chain+0xa6>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d101      	bne.n	80071fe <create_chain+0xaa>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	e03e      	b.n	800727c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	429a      	cmp	r2, r3
 8007204:	d1da      	bne.n	80071bc <create_chain+0x68>
 8007206:	2300      	movs	r3, #0
 8007208:	e038      	b.n	800727c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800720a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800720c:	f04f 32ff 	mov.w	r2, #4294967295
 8007210:	69f9      	ldr	r1, [r7, #28]
 8007212:	6938      	ldr	r0, [r7, #16]
 8007214:	f7ff fe1d 	bl	8006e52 <put_fat>
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d109      	bne.n	8007236 <create_chain+0xe2>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d006      	beq.n	8007236 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6938      	ldr	r0, [r7, #16]
 800722e:	f7ff fe10 	bl	8006e52 <put_fat>
 8007232:	4603      	mov	r3, r0
 8007234:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007236:	7dfb      	ldrb	r3, [r7, #23]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d116      	bne.n	800726a <create_chain+0x116>
		fs->last_clst = ncl;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	695a      	ldr	r2, [r3, #20]
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	3b02      	subs	r3, #2
 800724c:	429a      	cmp	r2, r3
 800724e:	d804      	bhi.n	800725a <create_chain+0x106>
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	1e5a      	subs	r2, r3, #1
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	791b      	ldrb	r3, [r3, #4]
 800725e:	f043 0301 	orr.w	r3, r3, #1
 8007262:	b2da      	uxtb	r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	711a      	strb	r2, [r3, #4]
 8007268:	e007      	b.n	800727a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d102      	bne.n	8007276 <create_chain+0x122>
 8007270:	f04f 33ff 	mov.w	r3, #4294967295
 8007274:	e000      	b.n	8007278 <create_chain+0x124>
 8007276:	2301      	movs	r3, #1
 8007278:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800727a:	69fb      	ldr	r3, [r7, #28]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3720      	adds	r7, #32
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	3304      	adds	r3, #4
 800729a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	899b      	ldrh	r3, [r3, #12]
 80072a0:	461a      	mov	r2, r3
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	8952      	ldrh	r2, [r2, #10]
 80072ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80072b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1d1a      	adds	r2, r3, #4
 80072b6:	613a      	str	r2, [r7, #16]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <clmt_clust+0x42>
 80072c2:	2300      	movs	r3, #0
 80072c4:	e010      	b.n	80072e8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d307      	bcc.n	80072de <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	3304      	adds	r3, #4
 80072da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80072dc:	e7e9      	b.n	80072b2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80072de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	4413      	add	r3, r2
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800730a:	d204      	bcs.n	8007316 <dir_sdi+0x22>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	f003 031f 	and.w	r3, r3, #31
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007316:	2302      	movs	r3, #2
 8007318:	e071      	b.n	80073fe <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d106      	bne.n	800733a <dir_sdi+0x46>
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b02      	cmp	r3, #2
 8007332:	d902      	bls.n	800733a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007338:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10c      	bne.n	800735a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	8912      	ldrh	r2, [r2, #8]
 8007348:	4293      	cmp	r3, r2
 800734a:	d301      	bcc.n	8007350 <dir_sdi+0x5c>
 800734c:	2302      	movs	r3, #2
 800734e:	e056      	b.n	80073fe <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	61da      	str	r2, [r3, #28]
 8007358:	e02d      	b.n	80073b6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	895b      	ldrh	r3, [r3, #10]
 800735e:	461a      	mov	r2, r3
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	899b      	ldrh	r3, [r3, #12]
 8007364:	fb02 f303 	mul.w	r3, r2, r3
 8007368:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800736a:	e019      	b.n	80073a0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6979      	ldr	r1, [r7, #20]
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff fc9a 	bl	8006caa <get_fat>
 8007376:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737e:	d101      	bne.n	8007384 <dir_sdi+0x90>
 8007380:	2301      	movs	r3, #1
 8007382:	e03c      	b.n	80073fe <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d904      	bls.n	8007394 <dir_sdi+0xa0>
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	429a      	cmp	r2, r3
 8007392:	d301      	bcc.n	8007398 <dir_sdi+0xa4>
 8007394:	2302      	movs	r3, #2
 8007396:	e032      	b.n	80073fe <dir_sdi+0x10a>
			ofs -= csz;
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d2e1      	bcs.n	800736c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80073a8:	6979      	ldr	r1, [r7, #20]
 80073aa:	6938      	ldr	r0, [r7, #16]
 80073ac:	f7ff fc5e 	bl	8006c6c <clust2sect>
 80073b0:	4602      	mov	r2, r0
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <dir_sdi+0xd4>
 80073c4:	2302      	movs	r3, #2
 80073c6:	e01a      	b.n	80073fe <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	899b      	ldrh	r3, [r3, #12]
 80073d0:	4619      	mov	r1, r3
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80073d8:	441a      	add	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	899b      	ldrh	r3, [r3, #12]
 80073e8:	461a      	mov	r2, r3
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80073f0:	fb00 f202 	mul.w	r2, r0, r2
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	18ca      	adds	r2, r1, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	3320      	adds	r3, #32
 800741c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <dir_next+0x28>
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800742c:	d301      	bcc.n	8007432 <dir_next+0x2c>
 800742e:	2304      	movs	r3, #4
 8007430:	e0bb      	b.n	80075aa <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	899b      	ldrh	r3, [r3, #12]
 8007436:	461a      	mov	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	fbb3 f1f2 	udiv	r1, r3, r2
 800743e:	fb01 f202 	mul.w	r2, r1, r2
 8007442:	1a9b      	subs	r3, r3, r2
 8007444:	2b00      	cmp	r3, #0
 8007446:	f040 809d 	bne.w	8007584 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10b      	bne.n	8007474 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	8912      	ldrh	r2, [r2, #8]
 8007464:	4293      	cmp	r3, r2
 8007466:	f0c0 808d 	bcc.w	8007584 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	61da      	str	r2, [r3, #28]
 8007470:	2304      	movs	r3, #4
 8007472:	e09a      	b.n	80075aa <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	899b      	ldrh	r3, [r3, #12]
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	8952      	ldrh	r2, [r2, #10]
 8007484:	3a01      	subs	r2, #1
 8007486:	4013      	ands	r3, r2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d17b      	bne.n	8007584 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	4619      	mov	r1, r3
 8007494:	4610      	mov	r0, r2
 8007496:	f7ff fc08 	bl	8006caa <get_fat>
 800749a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d801      	bhi.n	80074a6 <dir_next+0xa0>
 80074a2:	2302      	movs	r3, #2
 80074a4:	e081      	b.n	80075aa <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ac:	d101      	bne.n	80074b2 <dir_next+0xac>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e07b      	b.n	80075aa <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d359      	bcc.n	8007570 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	61da      	str	r2, [r3, #28]
 80074c8:	2304      	movs	r3, #4
 80074ca:	e06e      	b.n	80075aa <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f7ff fe3d 	bl	8007154 <create_chain>
 80074da:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <dir_next+0xe0>
 80074e2:	2307      	movs	r3, #7
 80074e4:	e061      	b.n	80075aa <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <dir_next+0xea>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e05c      	b.n	80075aa <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d101      	bne.n	80074fc <dir_next+0xf6>
 80074f8:	2301      	movs	r3, #1
 80074fa:	e056      	b.n	80075aa <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7ff fad3 	bl	8006aa8 <sync_window>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <dir_next+0x106>
 8007508:	2301      	movs	r3, #1
 800750a:	e04e      	b.n	80075aa <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	899b      	ldrh	r3, [r3, #12]
 8007516:	461a      	mov	r2, r3
 8007518:	2100      	movs	r1, #0
 800751a:	f7ff f8fc 	bl	8006716 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	6979      	ldr	r1, [r7, #20]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff fba1 	bl	8006c6c <clust2sect>
 800752a:	4602      	mov	r2, r0
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	631a      	str	r2, [r3, #48]	; 0x30
 8007530:	e012      	b.n	8007558 <dir_next+0x152>
						fs->wflag = 1;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f7ff fab5 	bl	8006aa8 <sync_window>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <dir_next+0x142>
 8007544:	2301      	movs	r3, #1
 8007546:	e030      	b.n	80075aa <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	3301      	adds	r3, #1
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	895b      	ldrh	r3, [r3, #10]
 800755c:	461a      	mov	r2, r3
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	4293      	cmp	r3, r2
 8007562:	d3e6      	bcc.n	8007532 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	1ad2      	subs	r2, r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007576:	6979      	ldr	r1, [r7, #20]
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f7ff fb77 	bl	8006c6c <clust2sect>
 800757e:	4602      	mov	r2, r0
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	899b      	ldrh	r3, [r3, #12]
 8007594:	461a      	mov	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	fbb3 f0f2 	udiv	r0, r3, r2
 800759c:	fb00 f202 	mul.w	r2, r0, r2
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	18ca      	adds	r2, r1, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80075c2:	2100      	movs	r1, #0
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff fe95 	bl	80072f4 <dir_sdi>
 80075ca:	4603      	mov	r3, r0
 80075cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d12b      	bne.n	800762c <dir_alloc+0x7a>
		n = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	4619      	mov	r1, r3
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff faa6 	bl	8006b30 <move_window>
 80075e4:	4603      	mov	r3, r0
 80075e6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d11d      	bne.n	800762a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2be5      	cmp	r3, #229	; 0xe5
 80075f6:	d004      	beq.n	8007602 <dir_alloc+0x50>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d107      	bne.n	8007612 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	3301      	adds	r3, #1
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	429a      	cmp	r2, r3
 800760e:	d102      	bne.n	8007616 <dir_alloc+0x64>
 8007610:	e00c      	b.n	800762c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007612:	2300      	movs	r3, #0
 8007614:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007616:	2101      	movs	r1, #1
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff fef4 	bl	8007406 <dir_next>
 800761e:	4603      	mov	r3, r0
 8007620:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0d7      	beq.n	80075d8 <dir_alloc+0x26>
 8007628:	e000      	b.n	800762c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800762a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	2b04      	cmp	r3, #4
 8007630:	d101      	bne.n	8007636 <dir_alloc+0x84>
 8007632:	2307      	movs	r3, #7
 8007634:	75fb      	strb	r3, [r7, #23]
	return res;
 8007636:	7dfb      	ldrb	r3, [r7, #23]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	331a      	adds	r3, #26
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe ffbe 	bl	80065d0 <ld_word>
 8007654:	4603      	mov	r3, r0
 8007656:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b03      	cmp	r3, #3
 800765e:	d109      	bne.n	8007674 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	3314      	adds	r3, #20
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe ffb3 	bl	80065d0 <ld_word>
 800766a:	4603      	mov	r3, r0
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007674:	68fb      	ldr	r3, [r7, #12]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	331a      	adds	r3, #26
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	b292      	uxth	r2, r2
 8007692:	4611      	mov	r1, r2
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe ffd6 	bl	8006646 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d109      	bne.n	80076b6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f103 0214 	add.w	r2, r3, #20
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	0c1b      	lsrs	r3, r3, #16
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f7fe ffc8 	bl	8006646 <st_word>
	}
}
 80076b6:	bf00      	nop
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b086      	sub	sp, #24
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80076c8:	2304      	movs	r3, #4
 80076ca:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80076d2:	e03c      	b.n	800774e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	4619      	mov	r1, r3
 80076da:	6938      	ldr	r0, [r7, #16]
 80076dc:	f7ff fa28 	bl	8006b30 <move_window>
 80076e0:	4603      	mov	r3, r0
 80076e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d136      	bne.n	8007758 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80076f8:	2304      	movs	r3, #4
 80076fa:	75fb      	strb	r3, [r7, #23]
 80076fc:	e031      	b.n	8007762 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	330b      	adds	r3, #11
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800770a:	73bb      	strb	r3, [r7, #14]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	7bba      	ldrb	r2, [r7, #14]
 8007710:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	2be5      	cmp	r3, #229	; 0xe5
 8007716:	d011      	beq.n	800773c <dir_read+0x7e>
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	2b2e      	cmp	r3, #46	; 0x2e
 800771c:	d00e      	beq.n	800773c <dir_read+0x7e>
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b0f      	cmp	r3, #15
 8007722:	d00b      	beq.n	800773c <dir_read+0x7e>
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	f023 0320 	bic.w	r3, r3, #32
 800772a:	2b08      	cmp	r3, #8
 800772c:	bf0c      	ite	eq
 800772e:	2301      	moveq	r3, #1
 8007730:	2300      	movne	r3, #0
 8007732:	b2db      	uxtb	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	4293      	cmp	r3, r2
 800773a:	d00f      	beq.n	800775c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800773c:	2100      	movs	r1, #0
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff fe61 	bl	8007406 <dir_next>
 8007744:	4603      	mov	r3, r0
 8007746:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d108      	bne.n	8007760 <dir_read+0xa2>
	while (dp->sect) {
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1be      	bne.n	80076d4 <dir_read+0x16>
 8007756:	e004      	b.n	8007762 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007758:	bf00      	nop
 800775a:	e002      	b.n	8007762 <dir_read+0xa4>
				break;
 800775c:	bf00      	nop
 800775e:	e000      	b.n	8007762 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007760:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <dir_read+0xb0>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	61da      	str	r2, [r3, #28]
	return res;
 800776e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007786:	2100      	movs	r1, #0
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff fdb3 	bl	80072f4 <dir_sdi>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <dir_find+0x24>
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	e03e      	b.n	800781a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	4619      	mov	r1, r3
 80077a2:	6938      	ldr	r0, [r7, #16]
 80077a4:	f7ff f9c4 	bl	8006b30 <move_window>
 80077a8:	4603      	mov	r3, r0
 80077aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d12f      	bne.n	8007812 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <dir_find+0x4e>
 80077c0:	2304      	movs	r3, #4
 80077c2:	75fb      	strb	r3, [r7, #23]
 80077c4:	e028      	b.n	8007818 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	330b      	adds	r3, #11
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	330b      	adds	r3, #11
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 0308 	and.w	r3, r3, #8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <dir_find+0x86>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a18      	ldr	r0, [r3, #32]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3324      	adds	r3, #36	; 0x24
 80077f0:	220b      	movs	r2, #11
 80077f2:	4619      	mov	r1, r3
 80077f4:	f7fe ffaa 	bl	800674c <mem_cmp>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80077fe:	2100      	movs	r1, #0
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff fe00 	bl	8007406 <dir_next>
 8007806:	4603      	mov	r3, r0
 8007808:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800780a:	7dfb      	ldrb	r3, [r7, #23]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0c5      	beq.n	800779c <dir_find+0x24>
 8007810:	e002      	b.n	8007818 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007812:	bf00      	nop
 8007814:	e000      	b.n	8007818 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007816:	bf00      	nop

	return res;
 8007818:	7dfb      	ldrb	r3, [r7, #23]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007830:	2101      	movs	r1, #1
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff febd 	bl	80075b2 <dir_alloc>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d11c      	bne.n	800787c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	4619      	mov	r1, r3
 8007848:	68b8      	ldr	r0, [r7, #8]
 800784a:	f7ff f971 	bl	8006b30 <move_window>
 800784e:	4603      	mov	r3, r0
 8007850:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d111      	bne.n	800787c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	2220      	movs	r2, #32
 800785e:	2100      	movs	r1, #0
 8007860:	4618      	mov	r0, r3
 8007862:	f7fe ff58 	bl	8006716 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a18      	ldr	r0, [r3, #32]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3324      	adds	r3, #36	; 0x24
 800786e:	220b      	movs	r2, #11
 8007870:	4619      	mov	r1, r3
 8007872:	f7fe ff2f 	bl	80066d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2201      	movs	r2, #1
 800787a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	4619      	mov	r1, r3
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7ff f948 	bl	8006b30 <move_window>
 80078a0:	4603      	mov	r3, r0
 80078a2:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80078a4:	7afb      	ldrb	r3, [r7, #11]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d106      	bne.n	80078b8 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	22e5      	movs	r2, #229	; 0xe5
 80078b0:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80078b8:	7afb      	ldrb	r3, [r7, #11]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3324      	adds	r3, #36	; 0x24
 80078d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80078da:	220b      	movs	r2, #11
 80078dc:	2120      	movs	r1, #32
 80078de:	68b8      	ldr	r0, [r7, #8]
 80078e0:	f7fe ff19 	bl	8006716 <mem_set>
	si = i = 0; ni = 8;
 80078e4:	2300      	movs	r3, #0
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	61fb      	str	r3, [r7, #28]
 80078ec:	2308      	movs	r3, #8
 80078ee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	61fa      	str	r2, [r7, #28]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	4413      	add	r3, r2
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80078fe:	7efb      	ldrb	r3, [r7, #27]
 8007900:	2b20      	cmp	r3, #32
 8007902:	d94e      	bls.n	80079a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007904:	7efb      	ldrb	r3, [r7, #27]
 8007906:	2b2f      	cmp	r3, #47	; 0x2f
 8007908:	d006      	beq.n	8007918 <create_name+0x54>
 800790a:	7efb      	ldrb	r3, [r7, #27]
 800790c:	2b5c      	cmp	r3, #92	; 0x5c
 800790e:	d110      	bne.n	8007932 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007910:	e002      	b.n	8007918 <create_name+0x54>
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	3301      	adds	r3, #1
 8007916:	61fb      	str	r3, [r7, #28]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	4413      	add	r3, r2
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b2f      	cmp	r3, #47	; 0x2f
 8007922:	d0f6      	beq.n	8007912 <create_name+0x4e>
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	4413      	add	r3, r2
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b5c      	cmp	r3, #92	; 0x5c
 800792e:	d0f0      	beq.n	8007912 <create_name+0x4e>
			break;
 8007930:	e038      	b.n	80079a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007932:	7efb      	ldrb	r3, [r7, #27]
 8007934:	2b2e      	cmp	r3, #46	; 0x2e
 8007936:	d003      	beq.n	8007940 <create_name+0x7c>
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	429a      	cmp	r2, r3
 800793e:	d30c      	bcc.n	800795a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2b0b      	cmp	r3, #11
 8007944:	d002      	beq.n	800794c <create_name+0x88>
 8007946:	7efb      	ldrb	r3, [r7, #27]
 8007948:	2b2e      	cmp	r3, #46	; 0x2e
 800794a:	d001      	beq.n	8007950 <create_name+0x8c>
 800794c:	2306      	movs	r3, #6
 800794e:	e044      	b.n	80079da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007950:	2308      	movs	r3, #8
 8007952:	613b      	str	r3, [r7, #16]
 8007954:	230b      	movs	r3, #11
 8007956:	617b      	str	r3, [r7, #20]
			continue;
 8007958:	e022      	b.n	80079a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800795a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800795e:	2b00      	cmp	r3, #0
 8007960:	da04      	bge.n	800796c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007962:	7efb      	ldrb	r3, [r7, #27]
 8007964:	3b80      	subs	r3, #128	; 0x80
 8007966:	4a1f      	ldr	r2, [pc, #124]	; (80079e4 <create_name+0x120>)
 8007968:	5cd3      	ldrb	r3, [r2, r3]
 800796a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800796c:	7efb      	ldrb	r3, [r7, #27]
 800796e:	4619      	mov	r1, r3
 8007970:	481d      	ldr	r0, [pc, #116]	; (80079e8 <create_name+0x124>)
 8007972:	f7fe ff12 	bl	800679a <chk_chr>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <create_name+0xbc>
 800797c:	2306      	movs	r3, #6
 800797e:	e02c      	b.n	80079da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007980:	7efb      	ldrb	r3, [r7, #27]
 8007982:	2b60      	cmp	r3, #96	; 0x60
 8007984:	d905      	bls.n	8007992 <create_name+0xce>
 8007986:	7efb      	ldrb	r3, [r7, #27]
 8007988:	2b7a      	cmp	r3, #122	; 0x7a
 800798a:	d802      	bhi.n	8007992 <create_name+0xce>
 800798c:	7efb      	ldrb	r3, [r7, #27]
 800798e:	3b20      	subs	r3, #32
 8007990:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	613a      	str	r2, [r7, #16]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	4413      	add	r3, r2
 800799c:	7efa      	ldrb	r2, [r7, #27]
 800799e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80079a0:	e7a6      	b.n	80078f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80079a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	441a      	add	r2, r3
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <create_name+0xf4>
 80079b4:	2306      	movs	r3, #6
 80079b6:	e010      	b.n	80079da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2be5      	cmp	r3, #229	; 0xe5
 80079be:	d102      	bne.n	80079c6 <create_name+0x102>
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2205      	movs	r2, #5
 80079c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079c6:	7efb      	ldrb	r3, [r7, #27]
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d801      	bhi.n	80079d0 <create_name+0x10c>
 80079cc:	2204      	movs	r2, #4
 80079ce:	e000      	b.n	80079d2 <create_name+0x10e>
 80079d0:	2200      	movs	r2, #0
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	330b      	adds	r3, #11
 80079d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80079d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3720      	adds	r7, #32
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	0800cb84 	.word	0x0800cb84
 80079e8:	0800c07c 	.word	0x0800c07c

080079ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007a00:	e002      	b.n	8007a08 <follow_path+0x1c>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b2f      	cmp	r3, #47	; 0x2f
 8007a0e:	d0f8      	beq.n	8007a02 <follow_path+0x16>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b5c      	cmp	r3, #92	; 0x5c
 8007a16:	d0f4      	beq.n	8007a02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b1f      	cmp	r3, #31
 8007a24:	d80a      	bhi.n	8007a3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2280      	movs	r2, #128	; 0x80
 8007a2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007a2e:	2100      	movs	r1, #0
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff fc5f 	bl	80072f4 <dir_sdi>
 8007a36:	4603      	mov	r3, r0
 8007a38:	75fb      	strb	r3, [r7, #23]
 8007a3a:	e048      	b.n	8007ace <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a3c:	463b      	mov	r3, r7
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff ff3f 	bl	80078c4 <create_name>
 8007a46:	4603      	mov	r3, r0
 8007a48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d139      	bne.n	8007ac4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff fe91 	bl	8007778 <dir_find>
 8007a56:	4603      	mov	r3, r0
 8007a58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d12c      	bne.n	8007ac8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a6e:	7afb      	ldrb	r3, [r7, #11]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d127      	bne.n	8007ac8 <follow_path+0xdc>
 8007a78:	2305      	movs	r3, #5
 8007a7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007a7c:	e024      	b.n	8007ac8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a7e:	7afb      	ldrb	r3, [r7, #11]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d121      	bne.n	8007acc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	799b      	ldrb	r3, [r3, #6]
 8007a8c:	f003 0310 	and.w	r3, r3, #16
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d102      	bne.n	8007a9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007a94:	2305      	movs	r3, #5
 8007a96:	75fb      	strb	r3, [r7, #23]
 8007a98:	e019      	b.n	8007ace <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	8992      	ldrh	r2, [r2, #12]
 8007aa8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007aac:	fb00 f202 	mul.w	r2, r0, r2
 8007ab0:	1a9b      	subs	r3, r3, r2
 8007ab2:	440b      	add	r3, r1
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f7ff fdc2 	bl	8007640 <ld_clust>
 8007abc:	4602      	mov	r2, r0
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ac2:	e7bb      	b.n	8007a3c <follow_path+0x50>
			if (res != FR_OK) break;
 8007ac4:	bf00      	nop
 8007ac6:	e002      	b.n	8007ace <follow_path+0xe2>
				break;
 8007ac8:	bf00      	nop
 8007aca:	e000      	b.n	8007ace <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007acc:	bf00      	nop
			}
		}
	}

	return res;
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d031      	beq.n	8007b52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	e002      	b.n	8007afc <get_ldnumber+0x24>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	3301      	adds	r3, #1
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b20      	cmp	r3, #32
 8007b02:	d903      	bls.n	8007b0c <get_ldnumber+0x34>
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b3a      	cmp	r3, #58	; 0x3a
 8007b0a:	d1f4      	bne.n	8007af6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b3a      	cmp	r3, #58	; 0x3a
 8007b12:	d11c      	bne.n	8007b4e <get_ldnumber+0x76>
			tp = *path;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	60fa      	str	r2, [r7, #12]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	3b30      	subs	r3, #48	; 0x30
 8007b24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b09      	cmp	r3, #9
 8007b2a:	d80e      	bhi.n	8007b4a <get_ldnumber+0x72>
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d10a      	bne.n	8007b4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d107      	bne.n	8007b4a <get_ldnumber+0x72>
					vol = (int)i;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	3301      	adds	r3, #1
 8007b42:	617b      	str	r3, [r7, #20]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	e002      	b.n	8007b54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b4e:	2300      	movs	r3, #0
 8007b50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b52:	693b      	ldr	r3, [r7, #16]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	70da      	strb	r2, [r3, #3]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f04f 32ff 	mov.w	r2, #4294967295
 8007b76:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7fe ffd8 	bl	8006b30 <move_window>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <check_fs+0x2a>
 8007b86:	2304      	movs	r3, #4
 8007b88:	e038      	b.n	8007bfc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3334      	adds	r3, #52	; 0x34
 8007b8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fd1c 	bl	80065d0 <ld_word>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d001      	beq.n	8007ba8 <check_fs+0x48>
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e029      	b.n	8007bfc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bae:	2be9      	cmp	r3, #233	; 0xe9
 8007bb0:	d009      	beq.n	8007bc6 <check_fs+0x66>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bb8:	2beb      	cmp	r3, #235	; 0xeb
 8007bba:	d11e      	bne.n	8007bfa <check_fs+0x9a>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007bc2:	2b90      	cmp	r3, #144	; 0x90
 8007bc4:	d119      	bne.n	8007bfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	3334      	adds	r3, #52	; 0x34
 8007bca:	3336      	adds	r3, #54	; 0x36
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe fd17 	bl	8006600 <ld_dword>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007bd8:	4a0a      	ldr	r2, [pc, #40]	; (8007c04 <check_fs+0xa4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d101      	bne.n	8007be2 <check_fs+0x82>
 8007bde:	2300      	movs	r3, #0
 8007be0:	e00c      	b.n	8007bfc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3334      	adds	r3, #52	; 0x34
 8007be6:	3352      	adds	r3, #82	; 0x52
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe fd09 	bl	8006600 <ld_dword>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4a05      	ldr	r2, [pc, #20]	; (8007c08 <check_fs+0xa8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d101      	bne.n	8007bfa <check_fs+0x9a>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e000      	b.n	8007bfc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007bfa:	2302      	movs	r3, #2
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	00544146 	.word	0x00544146
 8007c08:	33544146 	.word	0x33544146

08007c0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b096      	sub	sp, #88	; 0x58
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	4613      	mov	r3, r2
 8007c18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f7ff ff59 	bl	8007ad8 <get_ldnumber>
 8007c26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da01      	bge.n	8007c32 <find_volume+0x26>
 8007c2e:	230b      	movs	r3, #11
 8007c30:	e262      	b.n	80080f8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c32:	4a9f      	ldr	r2, [pc, #636]	; (8007eb0 <find_volume+0x2a4>)
 8007c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <find_volume+0x3a>
 8007c42:	230c      	movs	r3, #12
 8007c44:	e258      	b.n	80080f8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	f023 0301 	bic.w	r3, r3, #1
 8007c52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01a      	beq.n	8007c92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fc17 	bl	8006494 <disk_status>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10c      	bne.n	8007c92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <find_volume+0x82>
 8007c7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c82:	f003 0304 	and.w	r3, r3, #4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c8a:	230a      	movs	r3, #10
 8007c8c:	e234      	b.n	80080f8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e232      	b.n	80080f8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c94:	2200      	movs	r2, #0
 8007c96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	785b      	ldrb	r3, [r3, #1]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe fc0f 	bl	80064c8 <disk_initialize>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e21b      	b.n	80080f8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <find_volume+0xca>
 8007cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007cd2:	230a      	movs	r3, #10
 8007cd4:	e210      	b.n	80080f8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	7858      	ldrb	r0, [r3, #1]
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	330c      	adds	r3, #12
 8007cde:	461a      	mov	r2, r3
 8007ce0:	2102      	movs	r1, #2
 8007ce2:	f7fe fc57 	bl	8006594 <disk_ioctl>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <find_volume+0xe4>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e203      	b.n	80080f8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	899b      	ldrh	r3, [r3, #12]
 8007cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf8:	d80d      	bhi.n	8007d16 <find_volume+0x10a>
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	899b      	ldrh	r3, [r3, #12]
 8007cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d02:	d308      	bcc.n	8007d16 <find_volume+0x10a>
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	899b      	ldrh	r3, [r3, #12]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	899b      	ldrh	r3, [r3, #12]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	4013      	ands	r3, r2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <find_volume+0x10e>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e1ee      	b.n	80080f8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d22:	f7ff ff1d 	bl	8007b60 <check_fs>
 8007d26:	4603      	mov	r3, r0
 8007d28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d149      	bne.n	8007dc8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d34:	2300      	movs	r3, #0
 8007d36:	643b      	str	r3, [r7, #64]	; 0x40
 8007d38:	e01e      	b.n	8007d78 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007d48:	4413      	add	r3, r2
 8007d4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	3304      	adds	r3, #4
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d006      	beq.n	8007d64 <find_volume+0x158>
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	3308      	adds	r3, #8
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe fc50 	bl	8006600 <ld_dword>
 8007d60:	4602      	mov	r2, r0
 8007d62:	e000      	b.n	8007d66 <find_volume+0x15a>
 8007d64:	2200      	movs	r2, #0
 8007d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	3358      	adds	r3, #88	; 0x58
 8007d6c:	443b      	add	r3, r7
 8007d6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d74:	3301      	adds	r3, #1
 8007d76:	643b      	str	r3, [r7, #64]	; 0x40
 8007d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d9dd      	bls.n	8007d3a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007d7e:	2300      	movs	r3, #0
 8007d80:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <find_volume+0x182>
 8007d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	3358      	adds	r3, #88	; 0x58
 8007d94:	443b      	add	r3, r7
 8007d96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d005      	beq.n	8007dae <find_volume+0x1a2>
 8007da2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007da4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007da6:	f7ff fedb 	bl	8007b60 <check_fs>
 8007daa:	4603      	mov	r3, r0
 8007dac:	e000      	b.n	8007db0 <find_volume+0x1a4>
 8007dae:	2303      	movs	r3, #3
 8007db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d905      	bls.n	8007dc8 <find_volume+0x1bc>
 8007dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8007dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d9e2      	bls.n	8007d8e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d101      	bne.n	8007dd4 <find_volume+0x1c8>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e191      	b.n	80080f8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d901      	bls.n	8007de0 <find_volume+0x1d4>
 8007ddc:	230d      	movs	r3, #13
 8007dde:	e18b      	b.n	80080f8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	3334      	adds	r3, #52	; 0x34
 8007de4:	330b      	adds	r3, #11
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fbf2 	bl	80065d0 <ld_word>
 8007dec:	4603      	mov	r3, r0
 8007dee:	461a      	mov	r2, r3
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	899b      	ldrh	r3, [r3, #12]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d001      	beq.n	8007dfc <find_volume+0x1f0>
 8007df8:	230d      	movs	r3, #13
 8007dfa:	e17d      	b.n	80080f8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	3334      	adds	r3, #52	; 0x34
 8007e00:	3316      	adds	r3, #22
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fbe4 	bl	80065d0 <ld_word>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <find_volume+0x214>
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	3334      	adds	r3, #52	; 0x34
 8007e16:	3324      	adds	r3, #36	; 0x24
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe fbf1 	bl	8006600 <ld_dword>
 8007e1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e24:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	789b      	ldrb	r3, [r3, #2]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d005      	beq.n	8007e44 <find_volume+0x238>
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	789b      	ldrb	r3, [r3, #2]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d001      	beq.n	8007e44 <find_volume+0x238>
 8007e40:	230d      	movs	r3, #13
 8007e42:	e159      	b.n	80080f8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	789b      	ldrb	r3, [r3, #2]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e4c:	fb02 f303 	mul.w	r3, r2, r3
 8007e50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	895b      	ldrh	r3, [r3, #10]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d008      	beq.n	8007e78 <find_volume+0x26c>
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	895b      	ldrh	r3, [r3, #10]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	895b      	ldrh	r3, [r3, #10]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	4013      	ands	r3, r2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <find_volume+0x270>
 8007e78:	230d      	movs	r3, #13
 8007e7a:	e13d      	b.n	80080f8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7e:	3334      	adds	r3, #52	; 0x34
 8007e80:	3311      	adds	r3, #17
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fba4 	bl	80065d0 <ld_word>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e92:	891b      	ldrh	r3, [r3, #8]
 8007e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e96:	8992      	ldrh	r2, [r2, #12]
 8007e98:	0952      	lsrs	r2, r2, #5
 8007e9a:	b292      	uxth	r2, r2
 8007e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ea0:	fb01 f202 	mul.w	r2, r1, r2
 8007ea4:	1a9b      	subs	r3, r3, r2
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <find_volume+0x2a8>
 8007eac:	230d      	movs	r3, #13
 8007eae:	e123      	b.n	80080f8 <find_volume+0x4ec>
 8007eb0:	20000c98 	.word	0x20000c98

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	3334      	adds	r3, #52	; 0x34
 8007eb8:	3313      	adds	r3, #19
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fb88 	bl	80065d0 <ld_word>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <find_volume+0x2cc>
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	3334      	adds	r3, #52	; 0x34
 8007ece:	3320      	adds	r3, #32
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fb95 	bl	8006600 <ld_dword>
 8007ed6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	3334      	adds	r3, #52	; 0x34
 8007edc:	330e      	adds	r3, #14
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fb76 	bl	80065d0 <ld_word>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007ee8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <find_volume+0x2e6>
 8007eee:	230d      	movs	r3, #13
 8007ef0:	e102      	b.n	80080f8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007ef2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef6:	4413      	add	r3, r2
 8007ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007efa:	8911      	ldrh	r1, [r2, #8]
 8007efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007efe:	8992      	ldrh	r2, [r2, #12]
 8007f00:	0952      	lsrs	r2, r2, #5
 8007f02:	b292      	uxth	r2, r2
 8007f04:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f08:	b292      	uxth	r2, r2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d201      	bcs.n	8007f1a <find_volume+0x30e>
 8007f16:	230d      	movs	r3, #13
 8007f18:	e0ee      	b.n	80080f8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f22:	8952      	ldrh	r2, [r2, #10]
 8007f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <find_volume+0x328>
 8007f30:	230d      	movs	r3, #13
 8007f32:	e0e1      	b.n	80080f8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007f34:	2303      	movs	r3, #3
 8007f36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d802      	bhi.n	8007f4a <find_volume+0x33e>
 8007f44:	2302      	movs	r3, #2
 8007f46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d802      	bhi.n	8007f5a <find_volume+0x34e>
 8007f54:	2301      	movs	r3, #1
 8007f56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	1c9a      	adds	r2, r3, #2
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f66:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007f68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6c:	441a      	add	r2, r3
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007f72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	441a      	add	r2, r3
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007f7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f80:	2b03      	cmp	r3, #3
 8007f82:	d11e      	bne.n	8007fc2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	3334      	adds	r3, #52	; 0x34
 8007f88:	332a      	adds	r3, #42	; 0x2a
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fb20 	bl	80065d0 <ld_word>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <find_volume+0x38e>
 8007f96:	230d      	movs	r3, #13
 8007f98:	e0ae      	b.n	80080f8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	891b      	ldrh	r3, [r3, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <find_volume+0x39a>
 8007fa2:	230d      	movs	r3, #13
 8007fa4:	e0a8      	b.n	80080f8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	3334      	adds	r3, #52	; 0x34
 8007faa:	332c      	adds	r3, #44	; 0x2c
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fb27 	bl	8006600 <ld_dword>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc0:	e01f      	b.n	8008002 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	891b      	ldrh	r3, [r3, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <find_volume+0x3c2>
 8007fca:	230d      	movs	r3, #13
 8007fcc:	e094      	b.n	80080f8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd4:	441a      	add	r2, r3
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007fda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d103      	bne.n	8007fea <find_volume+0x3de>
 8007fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	e00a      	b.n	8008000 <find_volume+0x3f4>
 8007fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fec:	699a      	ldr	r2, [r3, #24]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	005b      	lsls	r3, r3, #1
 8007ff2:	4413      	add	r3, r2
 8007ff4:	085a      	lsrs	r2, r3, #1
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008000:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	69da      	ldr	r2, [r3, #28]
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	899b      	ldrh	r3, [r3, #12]
 800800a:	4619      	mov	r1, r3
 800800c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800800e:	440b      	add	r3, r1
 8008010:	3b01      	subs	r3, #1
 8008012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008014:	8989      	ldrh	r1, [r1, #12]
 8008016:	fbb3 f3f1 	udiv	r3, r3, r1
 800801a:	429a      	cmp	r2, r3
 800801c:	d201      	bcs.n	8008022 <find_volume+0x416>
 800801e:	230d      	movs	r3, #13
 8008020:	e06a      	b.n	80080f8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	f04f 32ff 	mov.w	r2, #4294967295
 8008028:	615a      	str	r2, [r3, #20]
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	695a      	ldr	r2, [r3, #20]
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	2280      	movs	r2, #128	; 0x80
 8008036:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800803c:	2b03      	cmp	r3, #3
 800803e:	d149      	bne.n	80080d4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	3334      	adds	r3, #52	; 0x34
 8008044:	3330      	adds	r3, #48	; 0x30
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fac2 	bl	80065d0 <ld_word>
 800804c:	4603      	mov	r3, r0
 800804e:	2b01      	cmp	r3, #1
 8008050:	d140      	bne.n	80080d4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008054:	3301      	adds	r3, #1
 8008056:	4619      	mov	r1, r3
 8008058:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800805a:	f7fe fd69 	bl	8006b30 <move_window>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d137      	bne.n	80080d4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	2200      	movs	r2, #0
 8008068:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806c:	3334      	adds	r3, #52	; 0x34
 800806e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe faac 	bl	80065d0 <ld_word>
 8008078:	4603      	mov	r3, r0
 800807a:	461a      	mov	r2, r3
 800807c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008080:	429a      	cmp	r2, r3
 8008082:	d127      	bne.n	80080d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	3334      	adds	r3, #52	; 0x34
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fab9 	bl	8006600 <ld_dword>
 800808e:	4603      	mov	r3, r0
 8008090:	4a1b      	ldr	r2, [pc, #108]	; (8008100 <find_volume+0x4f4>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d11e      	bne.n	80080d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	3334      	adds	r3, #52	; 0x34
 800809a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe faae 	bl	8006600 <ld_dword>
 80080a4:	4603      	mov	r3, r0
 80080a6:	4a17      	ldr	r2, [pc, #92]	; (8008104 <find_volume+0x4f8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d113      	bne.n	80080d4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	3334      	adds	r3, #52	; 0x34
 80080b0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe faa3 	bl	8006600 <ld_dword>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80080c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c2:	3334      	adds	r3, #52	; 0x34
 80080c4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fe fa99 	bl	8006600 <ld_dword>
 80080ce:	4602      	mov	r2, r0
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80080d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80080da:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80080dc:	4b0a      	ldr	r3, [pc, #40]	; (8008108 <find_volume+0x4fc>)
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	3301      	adds	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	4b08      	ldr	r3, [pc, #32]	; (8008108 <find_volume+0x4fc>)
 80080e6:	801a      	strh	r2, [r3, #0]
 80080e8:	4b07      	ldr	r3, [pc, #28]	; (8008108 <find_volume+0x4fc>)
 80080ea:	881a      	ldrh	r2, [r3, #0]
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80080f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080f2:	f7fe fcb5 	bl	8006a60 <clear_lock>
#endif
	return FR_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3758      	adds	r7, #88	; 0x58
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	41615252 	.word	0x41615252
 8008104:	61417272 	.word	0x61417272
 8008108:	20000c9c 	.word	0x20000c9c

0800810c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008116:	2309      	movs	r3, #9
 8008118:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01c      	beq.n	800815a <validate+0x4e>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d018      	beq.n	800815a <validate+0x4e>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d013      	beq.n	800815a <validate+0x4e>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	889a      	ldrh	r2, [r3, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	88db      	ldrh	r3, [r3, #6]
 800813c:	429a      	cmp	r2, r3
 800813e:	d10c      	bne.n	800815a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	785b      	ldrb	r3, [r3, #1]
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe f9a4 	bl	8006494 <disk_status>
 800814c:	4603      	mov	r3, r0
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <validate+0x4e>
			res = FR_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <validate+0x5a>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	e000      	b.n	8008168 <validate+0x5c>
 8008166:	2300      	movs	r3, #0
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	6013      	str	r3, [r2, #0]
	return res;
 800816c:	7bfb      	ldrb	r3, [r7, #15]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800818a:	f107 0310 	add.w	r3, r7, #16
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fca2 	bl	8007ad8 <get_ldnumber>
 8008194:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	2b00      	cmp	r3, #0
 800819a:	da01      	bge.n	80081a0 <f_mount+0x28>
 800819c:	230b      	movs	r3, #11
 800819e:	e02b      	b.n	80081f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80081a0:	4a17      	ldr	r2, [pc, #92]	; (8008200 <f_mount+0x88>)
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d005      	beq.n	80081bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80081b0:	69b8      	ldr	r0, [r7, #24]
 80081b2:	f7fe fc55 	bl	8006a60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	2200      	movs	r2, #0
 80081ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	490d      	ldr	r1, [pc, #52]	; (8008200 <f_mount+0x88>)
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <f_mount+0x66>
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d001      	beq.n	80081e2 <f_mount+0x6a>
 80081de:	2300      	movs	r3, #0
 80081e0:	e00a      	b.n	80081f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80081e2:	f107 010c 	add.w	r1, r7, #12
 80081e6:	f107 0308 	add.w	r3, r7, #8
 80081ea:	2200      	movs	r2, #0
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff fd0d 	bl	8007c0c <find_volume>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3720      	adds	r7, #32
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20000c98 	.word	0x20000c98

08008204 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b098      	sub	sp, #96	; 0x60
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <f_open+0x18>
 8008218:	2309      	movs	r3, #9
 800821a:	e1bb      	b.n	8008594 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008222:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008224:	79fa      	ldrb	r2, [r7, #7]
 8008226:	f107 0110 	add.w	r1, r7, #16
 800822a:	f107 0308 	add.w	r3, r7, #8
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff fcec 	bl	8007c0c <find_volume>
 8008234:	4603      	mov	r3, r0
 8008236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800823a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800823e:	2b00      	cmp	r3, #0
 8008240:	f040 819f 	bne.w	8008582 <f_open+0x37e>
		dj.obj.fs = fs;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	f107 0314 	add.w	r3, r7, #20
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fbcb 	bl	80079ec <follow_path>
 8008256:	4603      	mov	r3, r0
 8008258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800825c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008260:	2b00      	cmp	r3, #0
 8008262:	d11a      	bne.n	800829a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008264:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008268:	b25b      	sxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	da03      	bge.n	8008276 <f_open+0x72>
				res = FR_INVALID_NAME;
 800826e:	2306      	movs	r3, #6
 8008270:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008274:	e011      	b.n	800829a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	f023 0301 	bic.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	bf14      	ite	ne
 8008280:	2301      	movne	r3, #1
 8008282:	2300      	moveq	r3, #0
 8008284:	b2db      	uxtb	r3, r3
 8008286:	461a      	mov	r2, r3
 8008288:	f107 0314 	add.w	r3, r7, #20
 800828c:	4611      	mov	r1, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fa9e 	bl	80067d0 <chk_lock>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	f003 031c 	and.w	r3, r3, #28
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d07f      	beq.n	80083a4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80082a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d017      	beq.n	80082dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80082ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d10e      	bne.n	80082d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80082b4:	f7fe fae8 	bl	8006888 <enq_lock>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d006      	beq.n	80082cc <f_open+0xc8>
 80082be:	f107 0314 	add.w	r3, r7, #20
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff faad 	bl	8007822 <dir_register>
 80082c8:	4603      	mov	r3, r0
 80082ca:	e000      	b.n	80082ce <f_open+0xca>
 80082cc:	2312      	movs	r3, #18
 80082ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	f043 0308 	orr.w	r3, r3, #8
 80082d8:	71fb      	strb	r3, [r7, #7]
 80082da:	e010      	b.n	80082fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80082dc:	7ebb      	ldrb	r3, [r7, #26]
 80082de:	f003 0311 	and.w	r3, r3, #17
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <f_open+0xea>
					res = FR_DENIED;
 80082e6:	2307      	movs	r3, #7
 80082e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80082ec:	e007      	b.n	80082fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <f_open+0xfa>
 80082f8:	2308      	movs	r3, #8
 80082fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80082fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008302:	2b00      	cmp	r3, #0
 8008304:	d168      	bne.n	80083d8 <f_open+0x1d4>
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	f003 0308 	and.w	r3, r3, #8
 800830c:	2b00      	cmp	r3, #0
 800830e:	d063      	beq.n	80083d8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008310:	f7fe f862 	bl	80063d8 <get_fattime>
 8008314:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008318:	330e      	adds	r3, #14
 800831a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe f9ad 	bl	800667c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008324:	3316      	adds	r3, #22
 8008326:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe f9a7 	bl	800667c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800832e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008330:	330b      	adds	r3, #11
 8008332:	2220      	movs	r2, #32
 8008334:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800833a:	4611      	mov	r1, r2
 800833c:	4618      	mov	r0, r3
 800833e:	f7ff f97f 	bl	8007640 <ld_clust>
 8008342:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008348:	2200      	movs	r2, #0
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff f997 	bl	800767e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008352:	331c      	adds	r3, #28
 8008354:	2100      	movs	r1, #0
 8008356:	4618      	mov	r0, r3
 8008358:	f7fe f990 	bl	800667c <st_dword>
					fs->wflag = 1;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	2201      	movs	r2, #1
 8008360:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d037      	beq.n	80083d8 <f_open+0x1d4>
						dw = fs->winsect;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800836e:	f107 0314 	add.w	r3, r7, #20
 8008372:	2200      	movs	r2, #0
 8008374:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fe87 	bl	800708a <remove_chain>
 800837c:	4603      	mov	r3, r0
 800837e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008386:	2b00      	cmp	r3, #0
 8008388:	d126      	bne.n	80083d8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800838e:	4618      	mov	r0, r3
 8008390:	f7fe fbce 	bl	8006b30 <move_window>
 8008394:	4603      	mov	r3, r0
 8008396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800839e:	3a01      	subs	r2, #1
 80083a0:	611a      	str	r2, [r3, #16]
 80083a2:	e019      	b.n	80083d8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80083a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d115      	bne.n	80083d8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80083ac:	7ebb      	ldrb	r3, [r7, #26]
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <f_open+0x1ba>
					res = FR_NO_FILE;
 80083b6:	2304      	movs	r3, #4
 80083b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80083bc:	e00c      	b.n	80083d8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	f003 0302 	and.w	r3, r3, #2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d007      	beq.n	80083d8 <f_open+0x1d4>
 80083c8:	7ebb      	ldrb	r3, [r7, #26]
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <f_open+0x1d4>
						res = FR_DENIED;
 80083d2:	2307      	movs	r3, #7
 80083d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80083d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d128      	bne.n	8008432 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80083e0:	79fb      	ldrb	r3, [r7, #7]
 80083e2:	f003 0308 	and.w	r3, r3, #8
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80083fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	f023 0301 	bic.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	bf14      	ite	ne
 800840a:	2301      	movne	r3, #1
 800840c:	2300      	moveq	r3, #0
 800840e:	b2db      	uxtb	r3, r3
 8008410:	461a      	mov	r2, r3
 8008412:	f107 0314 	add.w	r3, r7, #20
 8008416:	4611      	mov	r1, r2
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fa57 	bl	80068cc <inc_lock>
 800841e:	4602      	mov	r2, r0
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d102      	bne.n	8008432 <f_open+0x22e>
 800842c:	2302      	movs	r3, #2
 800842e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008436:	2b00      	cmp	r3, #0
 8008438:	f040 80a3 	bne.w	8008582 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008440:	4611      	mov	r1, r2
 8008442:	4618      	mov	r0, r3
 8008444:	f7ff f8fc 	bl	8007640 <ld_clust>
 8008448:	4602      	mov	r2, r0
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800844e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008450:	331c      	adds	r3, #28
 8008452:	4618      	mov	r0, r3
 8008454:	f7fe f8d4 	bl	8006600 <ld_dword>
 8008458:	4602      	mov	r2, r0
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	88da      	ldrh	r2, [r3, #6]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	79fa      	ldrb	r2, [r7, #7]
 8008476:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3330      	adds	r3, #48	; 0x30
 800848e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008492:	2100      	movs	r1, #0
 8008494:	4618      	mov	r0, r3
 8008496:	f7fe f93e 	bl	8006716 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800849a:	79fb      	ldrb	r3, [r7, #7]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d06e      	beq.n	8008582 <f_open+0x37e>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d06a      	beq.n	8008582 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	895b      	ldrh	r3, [r3, #10]
 80084b8:	461a      	mov	r2, r3
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	899b      	ldrh	r3, [r3, #12]
 80084be:	fb02 f303 	mul.w	r3, r2, r3
 80084c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	657b      	str	r3, [r7, #84]	; 0x54
 80084d0:	e016      	b.n	8008500 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fbe7 	bl	8006caa <get_fat>
 80084dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80084de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d802      	bhi.n	80084ea <f_open+0x2e6>
 80084e4:	2302      	movs	r3, #2
 80084e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80084ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d102      	bne.n	80084f8 <f_open+0x2f4>
 80084f2:	2301      	movs	r3, #1
 80084f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	657b      	str	r3, [r7, #84]	; 0x54
 8008500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008504:	2b00      	cmp	r3, #0
 8008506:	d103      	bne.n	8008510 <f_open+0x30c>
 8008508:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800850a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800850c:	429a      	cmp	r2, r3
 800850e:	d8e0      	bhi.n	80084d2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008514:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800851a:	2b00      	cmp	r3, #0
 800851c:	d131      	bne.n	8008582 <f_open+0x37e>
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	899b      	ldrh	r3, [r3, #12]
 8008522:	461a      	mov	r2, r3
 8008524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008526:	fbb3 f1f2 	udiv	r1, r3, r2
 800852a:	fb01 f202 	mul.w	r2, r1, r2
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d026      	beq.n	8008582 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe fb97 	bl	8006c6c <clust2sect>
 800853e:	6478      	str	r0, [r7, #68]	; 0x44
 8008540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008542:	2b00      	cmp	r3, #0
 8008544:	d103      	bne.n	800854e <f_open+0x34a>
						res = FR_INT_ERR;
 8008546:	2302      	movs	r3, #2
 8008548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800854c:	e019      	b.n	8008582 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	899b      	ldrh	r3, [r3, #12]
 8008552:	461a      	mov	r2, r3
 8008554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008556:	fbb3 f2f2 	udiv	r2, r3, r2
 800855a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800855c:	441a      	add	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	7858      	ldrb	r0, [r3, #1]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a1a      	ldr	r2, [r3, #32]
 8008570:	2301      	movs	r3, #1
 8008572:	f7fd ffcf 	bl	8006514 <disk_read>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <f_open+0x37e>
 800857c:	2301      	movs	r3, #1
 800857e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <f_open+0x38c>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008594:	4618      	mov	r0, r3
 8008596:	3760      	adds	r7, #96	; 0x60
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08e      	sub	sp, #56	; 0x38
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f107 0214 	add.w	r2, r7, #20
 80085ba:	4611      	mov	r1, r2
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff fda5 	bl	800810c <validate>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80085c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d107      	bne.n	80085e0 <f_read+0x44>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	7d5b      	ldrb	r3, [r3, #21]
 80085d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80085d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <f_read+0x4a>
 80085e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085e4:	e135      	b.n	8008852 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	7d1b      	ldrb	r3, [r3, #20]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <f_read+0x5a>
 80085f2:	2307      	movs	r3, #7
 80085f4:	e12d      	b.n	8008852 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	429a      	cmp	r2, r3
 8008608:	f240 811e 	bls.w	8008848 <f_read+0x2ac>
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008610:	e11a      	b.n	8008848 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	8992      	ldrh	r2, [r2, #12]
 800861a:	fbb3 f1f2 	udiv	r1, r3, r2
 800861e:	fb01 f202 	mul.w	r2, r1, r2
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	2b00      	cmp	r3, #0
 8008626:	f040 80d5 	bne.w	80087d4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	8992      	ldrh	r2, [r2, #12]
 8008632:	fbb3 f3f2 	udiv	r3, r3, r2
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	8952      	ldrh	r2, [r2, #10]
 800863a:	3a01      	subs	r2, #1
 800863c:	4013      	ands	r3, r2
 800863e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d12f      	bne.n	80086a6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d103      	bne.n	8008656 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	633b      	str	r3, [r7, #48]	; 0x30
 8008654:	e013      	b.n	800867e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	4619      	mov	r1, r3
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f7fe fe0d 	bl	8007284 <clmt_clust>
 800866a:	6338      	str	r0, [r7, #48]	; 0x30
 800866c:	e007      	b.n	800867e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f7fe fb17 	bl	8006caa <get_fat>
 800867c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	2b01      	cmp	r3, #1
 8008682:	d804      	bhi.n	800868e <f_read+0xf2>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2202      	movs	r2, #2
 8008688:	755a      	strb	r2, [r3, #21]
 800868a:	2302      	movs	r3, #2
 800868c:	e0e1      	b.n	8008852 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008694:	d104      	bne.n	80086a0 <f_read+0x104>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2201      	movs	r2, #1
 800869a:	755a      	strb	r2, [r3, #21]
 800869c:	2301      	movs	r3, #1
 800869e:	e0d8      	b.n	8008852 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	4619      	mov	r1, r3
 80086ae:	4610      	mov	r0, r2
 80086b0:	f7fe fadc 	bl	8006c6c <clust2sect>
 80086b4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d104      	bne.n	80086c6 <f_read+0x12a>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2202      	movs	r2, #2
 80086c0:	755a      	strb	r2, [r3, #21]
 80086c2:	2302      	movs	r3, #2
 80086c4:	e0c5      	b.n	8008852 <f_read+0x2b6>
			sect += csect;
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	4413      	add	r3, r2
 80086cc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	899b      	ldrh	r3, [r3, #12]
 80086d2:	461a      	mov	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80086da:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d041      	beq.n	8008766 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	4413      	add	r3, r2
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	8952      	ldrh	r2, [r2, #10]
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d905      	bls.n	80086fc <f_read+0x160>
					cc = fs->csize - csect;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	895b      	ldrh	r3, [r3, #10]
 80086f4:	461a      	mov	r2, r3
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	7858      	ldrb	r0, [r3, #1]
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008706:	f7fd ff05 	bl	8006514 <disk_read>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d004      	beq.n	800871a <f_read+0x17e>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	755a      	strb	r2, [r3, #21]
 8008716:	2301      	movs	r3, #1
 8008718:	e09b      	b.n	8008852 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	7d1b      	ldrb	r3, [r3, #20]
 800871e:	b25b      	sxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	da18      	bge.n	8008756 <f_read+0x1ba>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a1a      	ldr	r2, [r3, #32]
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800872e:	429a      	cmp	r2, r3
 8008730:	d911      	bls.n	8008756 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a1a      	ldr	r2, [r3, #32]
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	8992      	ldrh	r2, [r2, #12]
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008744:	18d0      	adds	r0, r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	899b      	ldrh	r3, [r3, #12]
 8008750:	461a      	mov	r2, r3
 8008752:	f7fd ffbf 	bl	80066d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	899b      	ldrh	r3, [r3, #12]
 800875a:	461a      	mov	r2, r3
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	fb02 f303 	mul.w	r3, r2, r3
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008764:	e05c      	b.n	8008820 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	429a      	cmp	r2, r3
 800876e:	d02e      	beq.n	80087ce <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	7d1b      	ldrb	r3, [r3, #20]
 8008774:	b25b      	sxtb	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	da18      	bge.n	80087ac <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	7858      	ldrb	r0, [r3, #1]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a1a      	ldr	r2, [r3, #32]
 8008788:	2301      	movs	r3, #1
 800878a:	f7fd fee3 	bl	8006554 <disk_write>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d004      	beq.n	800879e <f_read+0x202>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2201      	movs	r2, #1
 8008798:	755a      	strb	r2, [r3, #21]
 800879a:	2301      	movs	r3, #1
 800879c:	e059      	b.n	8008852 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	7d1b      	ldrb	r3, [r3, #20]
 80087a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	7858      	ldrb	r0, [r3, #1]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087b6:	2301      	movs	r3, #1
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	f7fd feab 	bl	8006514 <disk_read>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d004      	beq.n	80087ce <f_read+0x232>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2201      	movs	r2, #1
 80087c8:	755a      	strb	r2, [r3, #21]
 80087ca:	2301      	movs	r3, #1
 80087cc:	e041      	b.n	8008852 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	899b      	ldrh	r3, [r3, #12]
 80087d8:	4618      	mov	r0, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	8992      	ldrh	r2, [r2, #12]
 80087e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80087e6:	fb01 f202 	mul.w	r2, r1, r2
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	1ac3      	subs	r3, r0, r3
 80087ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80087f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d901      	bls.n	80087fc <f_read+0x260>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	8992      	ldrh	r2, [r2, #12]
 800880a:	fbb3 f0f2 	udiv	r0, r3, r2
 800880e:	fb00 f202 	mul.w	r2, r0, r2
 8008812:	1a9b      	subs	r3, r3, r2
 8008814:	440b      	add	r3, r1
 8008816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008818:	4619      	mov	r1, r3
 800881a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800881c:	f7fd ff5a 	bl	80066d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	4413      	add	r3, r2
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	699a      	ldr	r2, [r3, #24]
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	441a      	add	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	619a      	str	r2, [r3, #24]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	441a      	add	r2, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	f47f aee1 	bne.w	8008612 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3738      	adds	r7, #56	; 0x38
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b08c      	sub	sp, #48	; 0x30
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	607a      	str	r2, [r7, #4]
 8008866:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	2200      	movs	r2, #0
 8008870:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f107 0210 	add.w	r2, r7, #16
 8008878:	4611      	mov	r1, r2
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff fc46 	bl	800810c <validate>
 8008880:	4603      	mov	r3, r0
 8008882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800888a:	2b00      	cmp	r3, #0
 800888c:	d107      	bne.n	800889e <f_write+0x44>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	7d5b      	ldrb	r3, [r3, #21]
 8008892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <f_write+0x4a>
 800889e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088a2:	e16a      	b.n	8008b7a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	7d1b      	ldrb	r3, [r3, #20]
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <f_write+0x5a>
 80088b0:	2307      	movs	r3, #7
 80088b2:	e162      	b.n	8008b7a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	699a      	ldr	r2, [r3, #24]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	441a      	add	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	f080 814c 	bcs.w	8008b5e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	43db      	mvns	r3, r3
 80088cc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80088ce:	e146      	b.n	8008b5e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	8992      	ldrh	r2, [r2, #12]
 80088d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80088dc:	fb01 f202 	mul.w	r2, r1, r2
 80088e0:	1a9b      	subs	r3, r3, r2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f040 80f1 	bne.w	8008aca <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	8992      	ldrh	r2, [r2, #12]
 80088f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	8952      	ldrh	r2, [r2, #10]
 80088f8:	3a01      	subs	r2, #1
 80088fa:	4013      	ands	r3, r2
 80088fc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d143      	bne.n	800898c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10c      	bne.n	8008926 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	2b00      	cmp	r3, #0
 8008916:	d11a      	bne.n	800894e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2100      	movs	r1, #0
 800891c:	4618      	mov	r0, r3
 800891e:	f7fe fc19 	bl	8007154 <create_chain>
 8008922:	62b8      	str	r0, [r7, #40]	; 0x28
 8008924:	e013      	b.n	800894e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d007      	beq.n	800893e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	4619      	mov	r1, r3
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f7fe fca5 	bl	8007284 <clmt_clust>
 800893a:	62b8      	str	r0, [r7, #40]	; 0x28
 800893c:	e007      	b.n	800894e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	4619      	mov	r1, r3
 8008946:	4610      	mov	r0, r2
 8008948:	f7fe fc04 	bl	8007154 <create_chain>
 800894c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 8109 	beq.w	8008b68 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	2b01      	cmp	r3, #1
 800895a:	d104      	bne.n	8008966 <f_write+0x10c>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2202      	movs	r2, #2
 8008960:	755a      	strb	r2, [r3, #21]
 8008962:	2302      	movs	r3, #2
 8008964:	e109      	b.n	8008b7a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896c:	d104      	bne.n	8008978 <f_write+0x11e>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	755a      	strb	r2, [r3, #21]
 8008974:	2301      	movs	r3, #1
 8008976:	e100      	b.n	8008b7a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800897c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d102      	bne.n	800898c <f_write+0x132>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800898a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	7d1b      	ldrb	r3, [r3, #20]
 8008990:	b25b      	sxtb	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	da18      	bge.n	80089c8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	7858      	ldrb	r0, [r3, #1]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a1a      	ldr	r2, [r3, #32]
 80089a4:	2301      	movs	r3, #1
 80089a6:	f7fd fdd5 	bl	8006554 <disk_write>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d004      	beq.n	80089ba <f_write+0x160>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2201      	movs	r2, #1
 80089b4:	755a      	strb	r2, [r3, #21]
 80089b6:	2301      	movs	r3, #1
 80089b8:	e0df      	b.n	8008b7a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	7d1b      	ldrb	r3, [r3, #20]
 80089be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	4619      	mov	r1, r3
 80089d0:	4610      	mov	r0, r2
 80089d2:	f7fe f94b 	bl	8006c6c <clust2sect>
 80089d6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d104      	bne.n	80089e8 <f_write+0x18e>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2202      	movs	r2, #2
 80089e2:	755a      	strb	r2, [r3, #21]
 80089e4:	2302      	movs	r3, #2
 80089e6:	e0c8      	b.n	8008b7a <f_write+0x320>
			sect += csect;
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	4413      	add	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	899b      	ldrh	r3, [r3, #12]
 80089f4:	461a      	mov	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80089fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d043      	beq.n	8008a8c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	4413      	add	r3, r2
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	8952      	ldrh	r2, [r2, #10]
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d905      	bls.n	8008a1e <f_write+0x1c4>
					cc = fs->csize - csect;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	895b      	ldrh	r3, [r3, #10]
 8008a16:	461a      	mov	r2, r3
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	7858      	ldrb	r0, [r3, #1]
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	69f9      	ldr	r1, [r7, #28]
 8008a28:	f7fd fd94 	bl	8006554 <disk_write>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d004      	beq.n	8008a3c <f_write+0x1e2>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	755a      	strb	r2, [r3, #21]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e09e      	b.n	8008b7a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6a1a      	ldr	r2, [r3, #32]
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	6a3a      	ldr	r2, [r7, #32]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d918      	bls.n	8008a7c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a1a      	ldr	r2, [r3, #32]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	8992      	ldrh	r2, [r2, #12]
 8008a5c:	fb02 f303 	mul.w	r3, r2, r3
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	18d1      	adds	r1, r2, r3
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	899b      	ldrh	r3, [r3, #12]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f7fd fe33 	bl	80066d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	7d1b      	ldrb	r3, [r3, #20]
 8008a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	899b      	ldrh	r3, [r3, #12]
 8008a80:	461a      	mov	r2, r3
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	fb02 f303 	mul.w	r3, r2, r3
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008a8a:	e04b      	b.n	8008b24 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d016      	beq.n	8008ac4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d210      	bcs.n	8008ac4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	7858      	ldrb	r0, [r3, #1]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008aac:	2301      	movs	r3, #1
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	f7fd fd30 	bl	8006514 <disk_read>
 8008ab4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d004      	beq.n	8008ac4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	755a      	strb	r2, [r3, #21]
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e05a      	b.n	8008b7a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	899b      	ldrh	r3, [r3, #12]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	8992      	ldrh	r2, [r2, #12]
 8008ad8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008adc:	fb01 f202 	mul.w	r2, r1, r2
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	1ac3      	subs	r3, r0, r3
 8008ae4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d901      	bls.n	8008af2 <f_write+0x298>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	8992      	ldrh	r2, [r2, #12]
 8008b00:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b04:	fb00 f202 	mul.w	r2, r0, r2
 8008b08:	1a9b      	subs	r3, r3, r2
 8008b0a:	440b      	add	r3, r1
 8008b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0e:	69f9      	ldr	r1, [r7, #28]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fd fddf 	bl	80066d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	7d1b      	ldrb	r3, [r3, #20]
 8008b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b24:	69fa      	ldr	r2, [r7, #28]
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	4413      	add	r3, r2
 8008b2a:	61fb      	str	r3, [r7, #28]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	699a      	ldr	r2, [r3, #24]
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	441a      	add	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	619a      	str	r2, [r3, #24]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	68da      	ldr	r2, [r3, #12]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	bf38      	it	cc
 8008b44:	461a      	movcc	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	60da      	str	r2, [r3, #12]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	441a      	add	r2, r3
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f47f aeb5 	bne.w	80088d0 <f_write+0x76>
 8008b66:	e000      	b.n	8008b6a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b68:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	7d1b      	ldrb	r3, [r3, #20]
 8008b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3730      	adds	r7, #48	; 0x30
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b086      	sub	sp, #24
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f107 0208 	add.w	r2, r7, #8
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7ff faba 	bl	800810c <validate>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d168      	bne.n	8008c74 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	7d1b      	ldrb	r3, [r3, #20]
 8008ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d062      	beq.n	8008c74 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	7d1b      	ldrb	r3, [r3, #20]
 8008bb2:	b25b      	sxtb	r3, r3
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	da15      	bge.n	8008be4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	7858      	ldrb	r0, [r3, #1]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1a      	ldr	r2, [r3, #32]
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f7fd fcc4 	bl	8006554 <disk_write>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <f_sync+0x54>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e04f      	b.n	8008c76 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	7d1b      	ldrb	r3, [r3, #20]
 8008bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008be4:	f7fd fbf8 	bl	80063d8 <get_fattime>
 8008be8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7fd ff9c 	bl	8006b30 <move_window>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d138      	bne.n	8008c74 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c06:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	330b      	adds	r3, #11
 8008c0c:	781a      	ldrb	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	330b      	adds	r3, #11
 8008c12:	f042 0220 	orr.w	r2, r2, #32
 8008c16:	b2d2      	uxtb	r2, r2
 8008c18:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6818      	ldr	r0, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	461a      	mov	r2, r3
 8008c24:	68f9      	ldr	r1, [r7, #12]
 8008c26:	f7fe fd2a 	bl	800767e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f103 021c 	add.w	r2, r3, #28
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	4619      	mov	r1, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f7fd fd20 	bl	800667c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3316      	adds	r3, #22
 8008c40:	6939      	ldr	r1, [r7, #16]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fd fd1a 	bl	800667c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3312      	adds	r3, #18
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fd fcf9 	bl	8006646 <st_word>
					fs->wflag = 1;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2201      	movs	r2, #1
 8008c58:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fd ff95 	bl	8006b8c <sync_fs>
 8008c62:	4603      	mov	r3, r0
 8008c64:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	7d1b      	ldrb	r3, [r3, #20]
 8008c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff ff7b 	bl	8008b82 <f_sync>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d118      	bne.n	8008cc8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f107 0208 	add.w	r2, r7, #8
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff fa34 	bl	800810c <validate>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10c      	bne.n	8008cc8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fd fe98 	bl	80069e8 <dec_lock>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d102      	bne.n	8008cc8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b092      	sub	sp, #72	; 0x48
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008cde:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008ce2:	f107 030c 	add.w	r3, r7, #12
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe ff8f 	bl	8007c0c <find_volume>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008cf4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f040 8099 	bne.w	8008e30 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	695a      	ldr	r2, [r3, #20]
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	3b02      	subs	r3, #2
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d804      	bhi.n	8008d1c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d14:	695a      	ldr	r2, [r3, #20]
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	e089      	b.n	8008e30 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d128      	bne.n	8008d7a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008d28:	2302      	movs	r3, #2
 8008d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008d30:	f107 0314 	add.w	r3, r7, #20
 8008d34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fd ffb7 	bl	8006caa <get_fat>
 8008d3c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d44:	d103      	bne.n	8008d4e <f_getfree+0x7c>
 8008d46:	2301      	movs	r3, #1
 8008d48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d4c:	e063      	b.n	8008e16 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d103      	bne.n	8008d5c <f_getfree+0x8a>
 8008d54:	2302      	movs	r3, #2
 8008d56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d5a:	e05c      	b.n	8008e16 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d102      	bne.n	8008d68 <f_getfree+0x96>
 8008d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d64:	3301      	adds	r3, #1
 8008d66:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d3db      	bcc.n	8008d30 <f_getfree+0x5e>
 8008d78:	e04d      	b.n	8008e16 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	637b      	str	r3, [r7, #52]	; 0x34
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d113      	bne.n	8008dbc <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	63ba      	str	r2, [r7, #56]	; 0x38
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	f7fd fec7 	bl	8006b30 <move_window>
 8008da2:	4603      	mov	r3, r0
 8008da4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008da8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d131      	bne.n	8008e14 <f_getfree+0x142>
							p = fs->win;
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	3334      	adds	r3, #52	; 0x34
 8008db4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	899b      	ldrh	r3, [r3, #12]
 8008dba:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d10f      	bne.n	8008de4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dc6:	f7fd fc03 	bl	80065d0 <ld_word>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d102      	bne.n	8008dd6 <f_getfree+0x104>
 8008dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd8:	3302      	adds	r3, #2
 8008dda:	633b      	str	r3, [r7, #48]	; 0x30
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dde:	3b02      	subs	r3, #2
 8008de0:	637b      	str	r3, [r7, #52]	; 0x34
 8008de2:	e010      	b.n	8008e06 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008de6:	f7fd fc0b 	bl	8006600 <ld_dword>
 8008dea:	4603      	mov	r3, r0
 8008dec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d102      	bne.n	8008dfa <f_getfree+0x128>
 8008df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008df6:	3301      	adds	r3, #1
 8008df8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8008e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e02:	3b04      	subs	r3, #4
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1bd      	bne.n	8008d8e <f_getfree+0xbc>
 8008e12:	e000      	b.n	8008e16 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008e14:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e1a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e20:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e24:	791a      	ldrb	r2, [r3, #4]
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	f042 0201 	orr.w	r2, r2, #1
 8008e2c:	b2d2      	uxtb	r2, r2
 8008e2e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008e30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3748      	adds	r7, #72	; 0x48
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b09e      	sub	sp, #120	; 0x78
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008e48:	f107 010c 	add.w	r1, r7, #12
 8008e4c:	1d3b      	adds	r3, r7, #4
 8008e4e:	2202      	movs	r2, #2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fe fedb 	bl	8007c0c <find_volume>
 8008e56:	4603      	mov	r3, r0
 8008e58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8008e60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f040 808e 	bne.w	8008f86 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e70:	4611      	mov	r1, r2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe fdba 	bl	80079ec <follow_path>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008e7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d108      	bne.n	8008e98 <f_unlink+0x5c>
 8008e86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fd fc9f 	bl	80067d0 <chk_lock>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008e98:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d172      	bne.n	8008f86 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008ea0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008ea4:	b25b      	sxtb	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	da03      	bge.n	8008eb2 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008eaa:	2306      	movs	r3, #6
 8008eac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008eb0:	e008      	b.n	8008ec4 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008eb2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008ebe:	2307      	movs	r3, #7
 8008ec0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8008ec4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d134      	bne.n	8008f36 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fbb4 	bl	8007640 <ld_clust>
 8008ed8:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8008eda:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008ede:	f003 0310 	and.w	r3, r3, #16
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d027      	beq.n	8008f36 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8008eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008eec:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008eee:	f107 0310 	add.w	r3, r7, #16
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe f9fd 	bl	80072f4 <dir_sdi>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8008f00:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d116      	bne.n	8008f36 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008f08:	f107 0310 	add.w	r3, r7, #16
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe fbd5 	bl	80076be <dir_read>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008f1a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <f_unlink+0xec>
 8008f22:	2307      	movs	r3, #7
 8008f24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008f28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008f2c:	2b04      	cmp	r3, #4
 8008f2e:	d102      	bne.n	8008f36 <f_unlink+0xfa>
 8008f30:	2300      	movs	r3, #0
 8008f32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8008f36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d123      	bne.n	8008f86 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008f3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fc9f 	bl	8007886 <dir_remove>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008f4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10c      	bne.n	8008f70 <f_unlink+0x134>
 8008f56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d009      	beq.n	8008f70 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008f5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f60:	2200      	movs	r2, #0
 8008f62:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe f890 	bl	800708a <remove_chain>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008f70:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d106      	bne.n	8008f86 <f_unlink+0x14a>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fd fe06 	bl	8006b8c <sync_fs>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008f86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3778      	adds	r7, #120	; 0x78
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b088      	sub	sp, #32
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008fa6:	e01b      	b.n	8008fe0 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008fa8:	f107 0310 	add.w	r3, r7, #16
 8008fac:	f107 0114 	add.w	r1, r7, #20
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff faf2 	bl	800859c <f_read>
		if (rc != 1) break;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d116      	bne.n	8008fec <f_gets+0x5a>
		c = s[0];
 8008fbe:	7d3b      	ldrb	r3, [r7, #20]
 8008fc0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	2b0d      	cmp	r3, #13
 8008fc6:	d100      	bne.n	8008fca <f_gets+0x38>
 8008fc8:	e00a      	b.n	8008fe0 <f_gets+0x4e>
		*p++ = c;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	61ba      	str	r2, [r7, #24]
 8008fd0:	7dfa      	ldrb	r2, [r7, #23]
 8008fd2:	701a      	strb	r2, [r3, #0]
		n++;
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
 8008fdc:	2b0a      	cmp	r3, #10
 8008fde:	d007      	beq.n	8008ff0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	69fa      	ldr	r2, [r7, #28]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	dbde      	blt.n	8008fa8 <f_gets+0x16>
 8008fea:	e002      	b.n	8008ff2 <f_gets+0x60>
		if (rc != 1) break;
 8008fec:	bf00      	nop
 8008fee:	e000      	b.n	8008ff2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008ff0:	bf00      	nop
	}
	*p = 0;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <f_gets+0x70>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	e000      	b.n	8009004 <f_gets+0x72>
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009018:	78fb      	ldrb	r3, [r7, #3]
 800901a:	2b0a      	cmp	r3, #10
 800901c:	d103      	bne.n	8009026 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800901e:	210d      	movs	r1, #13
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7ff fff3 	bl	800900c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	db25      	blt.n	800907e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	60fa      	str	r2, [r7, #12]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	4413      	add	r3, r2
 800903c:	78fa      	ldrb	r2, [r7, #3]
 800903e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b3c      	cmp	r3, #60	; 0x3c
 8009044:	dd12      	ble.n	800906c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f103 010c 	add.w	r1, r3, #12
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	f107 0308 	add.w	r3, r7, #8
 8009056:	f7ff fc00 	bl	800885a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	429a      	cmp	r2, r3
 8009060:	d101      	bne.n	8009066 <putc_bfd+0x5a>
 8009062:	2300      	movs	r3, #0
 8009064:	e001      	b.n	800906a <putc_bfd+0x5e>
 8009066:	f04f 33ff 	mov.w	r3, #4294967295
 800906a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	609a      	str	r2, [r3, #8]
 800907c:	e000      	b.n	8009080 <putc_bfd+0x74>
	if (i < 0) return;
 800907e:	bf00      	nop
}
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	db16      	blt.n	80090c4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f103 010c 	add.w	r1, r3, #12
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	461a      	mov	r2, r3
 80090a6:	f107 030c 	add.w	r3, r7, #12
 80090aa:	f7ff fbd6 	bl	800885a <f_write>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d107      	bne.n	80090c4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d102      	bne.n	80090c4 <putc_flush+0x3e>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	e001      	b.n	80090c8 <putc_flush+0x42>
	return EOF;
 80090c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	605a      	str	r2, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	609a      	str	r2, [r3, #8]
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b096      	sub	sp, #88	; 0x58
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009104:	f107 030c 	add.w	r3, r7, #12
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff ffe0 	bl	80090d0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009110:	e009      	b.n	8009126 <f_puts+0x2c>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	781a      	ldrb	r2, [r3, #0]
 800911a:	f107 030c 	add.w	r3, r7, #12
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f7ff ff73 	bl	800900c <putc_bfd>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1f1      	bne.n	8009112 <f_puts+0x18>
	return putc_flush(&pb);
 800912e:	f107 030c 	add.w	r3, r7, #12
 8009132:	4618      	mov	r0, r3
 8009134:	f7ff ffa7 	bl	8009086 <putc_flush>
 8009138:	4603      	mov	r3, r0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3758      	adds	r7, #88	; 0x58
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	4613      	mov	r3, r2
 8009150:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009152:	2301      	movs	r3, #1
 8009154:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800915a:	4b1f      	ldr	r3, [pc, #124]	; (80091d8 <FATFS_LinkDriverEx+0x94>)
 800915c:	7a5b      	ldrb	r3, [r3, #9]
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b00      	cmp	r3, #0
 8009162:	d131      	bne.n	80091c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009164:	4b1c      	ldr	r3, [pc, #112]	; (80091d8 <FATFS_LinkDriverEx+0x94>)
 8009166:	7a5b      	ldrb	r3, [r3, #9]
 8009168:	b2db      	uxtb	r3, r3
 800916a:	461a      	mov	r2, r3
 800916c:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <FATFS_LinkDriverEx+0x94>)
 800916e:	2100      	movs	r1, #0
 8009170:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009172:	4b19      	ldr	r3, [pc, #100]	; (80091d8 <FATFS_LinkDriverEx+0x94>)
 8009174:	7a5b      	ldrb	r3, [r3, #9]
 8009176:	b2db      	uxtb	r3, r3
 8009178:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <FATFS_LinkDriverEx+0x94>)
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009182:	4b15      	ldr	r3, [pc, #84]	; (80091d8 <FATFS_LinkDriverEx+0x94>)
 8009184:	7a5b      	ldrb	r3, [r3, #9]
 8009186:	b2db      	uxtb	r3, r3
 8009188:	461a      	mov	r2, r3
 800918a:	4b13      	ldr	r3, [pc, #76]	; (80091d8 <FATFS_LinkDriverEx+0x94>)
 800918c:	4413      	add	r3, r2
 800918e:	79fa      	ldrb	r2, [r7, #7]
 8009190:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009192:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <FATFS_LinkDriverEx+0x94>)
 8009194:	7a5b      	ldrb	r3, [r3, #9]
 8009196:	b2db      	uxtb	r3, r3
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	b2d1      	uxtb	r1, r2
 800919c:	4a0e      	ldr	r2, [pc, #56]	; (80091d8 <FATFS_LinkDriverEx+0x94>)
 800919e:	7251      	strb	r1, [r2, #9]
 80091a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80091a2:	7dbb      	ldrb	r3, [r7, #22]
 80091a4:	3330      	adds	r3, #48	; 0x30
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	3301      	adds	r3, #1
 80091b0:	223a      	movs	r2, #58	; 0x3a
 80091b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	3302      	adds	r3, #2
 80091b8:	222f      	movs	r2, #47	; 0x2f
 80091ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	3303      	adds	r3, #3
 80091c0:	2200      	movs	r2, #0
 80091c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80091c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	371c      	adds	r7, #28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	20000cc0 	.word	0x20000cc0

080091dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80091e6:	2200      	movs	r2, #0
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff ffaa 	bl	8009144 <FATFS_LinkDriverEx>
 80091f0:	4603      	mov	r3, r0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <__errno>:
 80091fc:	4b01      	ldr	r3, [pc, #4]	; (8009204 <__errno+0x8>)
 80091fe:	6818      	ldr	r0, [r3, #0]
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	20000024 	.word	0x20000024

08009208 <__libc_init_array>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	4d0d      	ldr	r5, [pc, #52]	; (8009240 <__libc_init_array+0x38>)
 800920c:	4c0d      	ldr	r4, [pc, #52]	; (8009244 <__libc_init_array+0x3c>)
 800920e:	1b64      	subs	r4, r4, r5
 8009210:	10a4      	asrs	r4, r4, #2
 8009212:	2600      	movs	r6, #0
 8009214:	42a6      	cmp	r6, r4
 8009216:	d109      	bne.n	800922c <__libc_init_array+0x24>
 8009218:	4d0b      	ldr	r5, [pc, #44]	; (8009248 <__libc_init_array+0x40>)
 800921a:	4c0c      	ldr	r4, [pc, #48]	; (800924c <__libc_init_array+0x44>)
 800921c:	f002 fdc2 	bl	800bda4 <_init>
 8009220:	1b64      	subs	r4, r4, r5
 8009222:	10a4      	asrs	r4, r4, #2
 8009224:	2600      	movs	r6, #0
 8009226:	42a6      	cmp	r6, r4
 8009228:	d105      	bne.n	8009236 <__libc_init_array+0x2e>
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009230:	4798      	blx	r3
 8009232:	3601      	adds	r6, #1
 8009234:	e7ee      	b.n	8009214 <__libc_init_array+0xc>
 8009236:	f855 3b04 	ldr.w	r3, [r5], #4
 800923a:	4798      	blx	r3
 800923c:	3601      	adds	r6, #1
 800923e:	e7f2      	b.n	8009226 <__libc_init_array+0x1e>
 8009240:	0800cfe4 	.word	0x0800cfe4
 8009244:	0800cfe4 	.word	0x0800cfe4
 8009248:	0800cfe4 	.word	0x0800cfe4
 800924c:	0800cfe8 	.word	0x0800cfe8

08009250 <memset>:
 8009250:	4402      	add	r2, r0
 8009252:	4603      	mov	r3, r0
 8009254:	4293      	cmp	r3, r2
 8009256:	d100      	bne.n	800925a <memset+0xa>
 8009258:	4770      	bx	lr
 800925a:	f803 1b01 	strb.w	r1, [r3], #1
 800925e:	e7f9      	b.n	8009254 <memset+0x4>

08009260 <__cvt>:
 8009260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009264:	ec55 4b10 	vmov	r4, r5, d0
 8009268:	2d00      	cmp	r5, #0
 800926a:	460e      	mov	r6, r1
 800926c:	4619      	mov	r1, r3
 800926e:	462b      	mov	r3, r5
 8009270:	bfbb      	ittet	lt
 8009272:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009276:	461d      	movlt	r5, r3
 8009278:	2300      	movge	r3, #0
 800927a:	232d      	movlt	r3, #45	; 0x2d
 800927c:	700b      	strb	r3, [r1, #0]
 800927e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009280:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009284:	4691      	mov	r9, r2
 8009286:	f023 0820 	bic.w	r8, r3, #32
 800928a:	bfbc      	itt	lt
 800928c:	4622      	movlt	r2, r4
 800928e:	4614      	movlt	r4, r2
 8009290:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009294:	d005      	beq.n	80092a2 <__cvt+0x42>
 8009296:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800929a:	d100      	bne.n	800929e <__cvt+0x3e>
 800929c:	3601      	adds	r6, #1
 800929e:	2102      	movs	r1, #2
 80092a0:	e000      	b.n	80092a4 <__cvt+0x44>
 80092a2:	2103      	movs	r1, #3
 80092a4:	ab03      	add	r3, sp, #12
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	ab02      	add	r3, sp, #8
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	ec45 4b10 	vmov	d0, r4, r5
 80092b0:	4653      	mov	r3, sl
 80092b2:	4632      	mov	r2, r6
 80092b4:	f000 fe18 	bl	8009ee8 <_dtoa_r>
 80092b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092bc:	4607      	mov	r7, r0
 80092be:	d102      	bne.n	80092c6 <__cvt+0x66>
 80092c0:	f019 0f01 	tst.w	r9, #1
 80092c4:	d022      	beq.n	800930c <__cvt+0xac>
 80092c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092ca:	eb07 0906 	add.w	r9, r7, r6
 80092ce:	d110      	bne.n	80092f2 <__cvt+0x92>
 80092d0:	783b      	ldrb	r3, [r7, #0]
 80092d2:	2b30      	cmp	r3, #48	; 0x30
 80092d4:	d10a      	bne.n	80092ec <__cvt+0x8c>
 80092d6:	2200      	movs	r2, #0
 80092d8:	2300      	movs	r3, #0
 80092da:	4620      	mov	r0, r4
 80092dc:	4629      	mov	r1, r5
 80092de:	f7f7 fc0b 	bl	8000af8 <__aeabi_dcmpeq>
 80092e2:	b918      	cbnz	r0, 80092ec <__cvt+0x8c>
 80092e4:	f1c6 0601 	rsb	r6, r6, #1
 80092e8:	f8ca 6000 	str.w	r6, [sl]
 80092ec:	f8da 3000 	ldr.w	r3, [sl]
 80092f0:	4499      	add	r9, r3
 80092f2:	2200      	movs	r2, #0
 80092f4:	2300      	movs	r3, #0
 80092f6:	4620      	mov	r0, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	f7f7 fbfd 	bl	8000af8 <__aeabi_dcmpeq>
 80092fe:	b108      	cbz	r0, 8009304 <__cvt+0xa4>
 8009300:	f8cd 900c 	str.w	r9, [sp, #12]
 8009304:	2230      	movs	r2, #48	; 0x30
 8009306:	9b03      	ldr	r3, [sp, #12]
 8009308:	454b      	cmp	r3, r9
 800930a:	d307      	bcc.n	800931c <__cvt+0xbc>
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009310:	1bdb      	subs	r3, r3, r7
 8009312:	4638      	mov	r0, r7
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	b004      	add	sp, #16
 8009318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931c:	1c59      	adds	r1, r3, #1
 800931e:	9103      	str	r1, [sp, #12]
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	e7f0      	b.n	8009306 <__cvt+0xa6>

08009324 <__exponent>:
 8009324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009326:	4603      	mov	r3, r0
 8009328:	2900      	cmp	r1, #0
 800932a:	bfb8      	it	lt
 800932c:	4249      	neglt	r1, r1
 800932e:	f803 2b02 	strb.w	r2, [r3], #2
 8009332:	bfb4      	ite	lt
 8009334:	222d      	movlt	r2, #45	; 0x2d
 8009336:	222b      	movge	r2, #43	; 0x2b
 8009338:	2909      	cmp	r1, #9
 800933a:	7042      	strb	r2, [r0, #1]
 800933c:	dd2a      	ble.n	8009394 <__exponent+0x70>
 800933e:	f10d 0407 	add.w	r4, sp, #7
 8009342:	46a4      	mov	ip, r4
 8009344:	270a      	movs	r7, #10
 8009346:	46a6      	mov	lr, r4
 8009348:	460a      	mov	r2, r1
 800934a:	fb91 f6f7 	sdiv	r6, r1, r7
 800934e:	fb07 1516 	mls	r5, r7, r6, r1
 8009352:	3530      	adds	r5, #48	; 0x30
 8009354:	2a63      	cmp	r2, #99	; 0x63
 8009356:	f104 34ff 	add.w	r4, r4, #4294967295
 800935a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800935e:	4631      	mov	r1, r6
 8009360:	dcf1      	bgt.n	8009346 <__exponent+0x22>
 8009362:	3130      	adds	r1, #48	; 0x30
 8009364:	f1ae 0502 	sub.w	r5, lr, #2
 8009368:	f804 1c01 	strb.w	r1, [r4, #-1]
 800936c:	1c44      	adds	r4, r0, #1
 800936e:	4629      	mov	r1, r5
 8009370:	4561      	cmp	r1, ip
 8009372:	d30a      	bcc.n	800938a <__exponent+0x66>
 8009374:	f10d 0209 	add.w	r2, sp, #9
 8009378:	eba2 020e 	sub.w	r2, r2, lr
 800937c:	4565      	cmp	r5, ip
 800937e:	bf88      	it	hi
 8009380:	2200      	movhi	r2, #0
 8009382:	4413      	add	r3, r2
 8009384:	1a18      	subs	r0, r3, r0
 8009386:	b003      	add	sp, #12
 8009388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800938a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800938e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009392:	e7ed      	b.n	8009370 <__exponent+0x4c>
 8009394:	2330      	movs	r3, #48	; 0x30
 8009396:	3130      	adds	r1, #48	; 0x30
 8009398:	7083      	strb	r3, [r0, #2]
 800939a:	70c1      	strb	r1, [r0, #3]
 800939c:	1d03      	adds	r3, r0, #4
 800939e:	e7f1      	b.n	8009384 <__exponent+0x60>

080093a0 <_printf_float>:
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	ed2d 8b02 	vpush	{d8}
 80093a8:	b08d      	sub	sp, #52	; 0x34
 80093aa:	460c      	mov	r4, r1
 80093ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80093b0:	4616      	mov	r6, r2
 80093b2:	461f      	mov	r7, r3
 80093b4:	4605      	mov	r5, r0
 80093b6:	f001 fd3d 	bl	800ae34 <_localeconv_r>
 80093ba:	f8d0 a000 	ldr.w	sl, [r0]
 80093be:	4650      	mov	r0, sl
 80093c0:	f7f6 ff18 	bl	80001f4 <strlen>
 80093c4:	2300      	movs	r3, #0
 80093c6:	930a      	str	r3, [sp, #40]	; 0x28
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	9305      	str	r3, [sp, #20]
 80093cc:	f8d8 3000 	ldr.w	r3, [r8]
 80093d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80093d4:	3307      	adds	r3, #7
 80093d6:	f023 0307 	bic.w	r3, r3, #7
 80093da:	f103 0208 	add.w	r2, r3, #8
 80093de:	f8c8 2000 	str.w	r2, [r8]
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093f2:	9307      	str	r3, [sp, #28]
 80093f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80093f8:	ee08 0a10 	vmov	s16, r0
 80093fc:	4b9f      	ldr	r3, [pc, #636]	; (800967c <_printf_float+0x2dc>)
 80093fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009402:	f04f 32ff 	mov.w	r2, #4294967295
 8009406:	f7f7 fba9 	bl	8000b5c <__aeabi_dcmpun>
 800940a:	bb88      	cbnz	r0, 8009470 <_printf_float+0xd0>
 800940c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009410:	4b9a      	ldr	r3, [pc, #616]	; (800967c <_printf_float+0x2dc>)
 8009412:	f04f 32ff 	mov.w	r2, #4294967295
 8009416:	f7f7 fb83 	bl	8000b20 <__aeabi_dcmple>
 800941a:	bb48      	cbnz	r0, 8009470 <_printf_float+0xd0>
 800941c:	2200      	movs	r2, #0
 800941e:	2300      	movs	r3, #0
 8009420:	4640      	mov	r0, r8
 8009422:	4649      	mov	r1, r9
 8009424:	f7f7 fb72 	bl	8000b0c <__aeabi_dcmplt>
 8009428:	b110      	cbz	r0, 8009430 <_printf_float+0x90>
 800942a:	232d      	movs	r3, #45	; 0x2d
 800942c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009430:	4b93      	ldr	r3, [pc, #588]	; (8009680 <_printf_float+0x2e0>)
 8009432:	4894      	ldr	r0, [pc, #592]	; (8009684 <_printf_float+0x2e4>)
 8009434:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009438:	bf94      	ite	ls
 800943a:	4698      	movls	r8, r3
 800943c:	4680      	movhi	r8, r0
 800943e:	2303      	movs	r3, #3
 8009440:	6123      	str	r3, [r4, #16]
 8009442:	9b05      	ldr	r3, [sp, #20]
 8009444:	f023 0204 	bic.w	r2, r3, #4
 8009448:	6022      	str	r2, [r4, #0]
 800944a:	f04f 0900 	mov.w	r9, #0
 800944e:	9700      	str	r7, [sp, #0]
 8009450:	4633      	mov	r3, r6
 8009452:	aa0b      	add	r2, sp, #44	; 0x2c
 8009454:	4621      	mov	r1, r4
 8009456:	4628      	mov	r0, r5
 8009458:	f000 f9d8 	bl	800980c <_printf_common>
 800945c:	3001      	adds	r0, #1
 800945e:	f040 8090 	bne.w	8009582 <_printf_float+0x1e2>
 8009462:	f04f 30ff 	mov.w	r0, #4294967295
 8009466:	b00d      	add	sp, #52	; 0x34
 8009468:	ecbd 8b02 	vpop	{d8}
 800946c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009470:	4642      	mov	r2, r8
 8009472:	464b      	mov	r3, r9
 8009474:	4640      	mov	r0, r8
 8009476:	4649      	mov	r1, r9
 8009478:	f7f7 fb70 	bl	8000b5c <__aeabi_dcmpun>
 800947c:	b140      	cbz	r0, 8009490 <_printf_float+0xf0>
 800947e:	464b      	mov	r3, r9
 8009480:	2b00      	cmp	r3, #0
 8009482:	bfbc      	itt	lt
 8009484:	232d      	movlt	r3, #45	; 0x2d
 8009486:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800948a:	487f      	ldr	r0, [pc, #508]	; (8009688 <_printf_float+0x2e8>)
 800948c:	4b7f      	ldr	r3, [pc, #508]	; (800968c <_printf_float+0x2ec>)
 800948e:	e7d1      	b.n	8009434 <_printf_float+0x94>
 8009490:	6863      	ldr	r3, [r4, #4]
 8009492:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009496:	9206      	str	r2, [sp, #24]
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	d13f      	bne.n	800951c <_printf_float+0x17c>
 800949c:	2306      	movs	r3, #6
 800949e:	6063      	str	r3, [r4, #4]
 80094a0:	9b05      	ldr	r3, [sp, #20]
 80094a2:	6861      	ldr	r1, [r4, #4]
 80094a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80094a8:	2300      	movs	r3, #0
 80094aa:	9303      	str	r3, [sp, #12]
 80094ac:	ab0a      	add	r3, sp, #40	; 0x28
 80094ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80094b2:	ab09      	add	r3, sp, #36	; 0x24
 80094b4:	ec49 8b10 	vmov	d0, r8, r9
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	6022      	str	r2, [r4, #0]
 80094bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094c0:	4628      	mov	r0, r5
 80094c2:	f7ff fecd 	bl	8009260 <__cvt>
 80094c6:	9b06      	ldr	r3, [sp, #24]
 80094c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ca:	2b47      	cmp	r3, #71	; 0x47
 80094cc:	4680      	mov	r8, r0
 80094ce:	d108      	bne.n	80094e2 <_printf_float+0x142>
 80094d0:	1cc8      	adds	r0, r1, #3
 80094d2:	db02      	blt.n	80094da <_printf_float+0x13a>
 80094d4:	6863      	ldr	r3, [r4, #4]
 80094d6:	4299      	cmp	r1, r3
 80094d8:	dd41      	ble.n	800955e <_printf_float+0x1be>
 80094da:	f1ab 0b02 	sub.w	fp, fp, #2
 80094de:	fa5f fb8b 	uxtb.w	fp, fp
 80094e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094e6:	d820      	bhi.n	800952a <_printf_float+0x18a>
 80094e8:	3901      	subs	r1, #1
 80094ea:	465a      	mov	r2, fp
 80094ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094f0:	9109      	str	r1, [sp, #36]	; 0x24
 80094f2:	f7ff ff17 	bl	8009324 <__exponent>
 80094f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094f8:	1813      	adds	r3, r2, r0
 80094fa:	2a01      	cmp	r2, #1
 80094fc:	4681      	mov	r9, r0
 80094fe:	6123      	str	r3, [r4, #16]
 8009500:	dc02      	bgt.n	8009508 <_printf_float+0x168>
 8009502:	6822      	ldr	r2, [r4, #0]
 8009504:	07d2      	lsls	r2, r2, #31
 8009506:	d501      	bpl.n	800950c <_printf_float+0x16c>
 8009508:	3301      	adds	r3, #1
 800950a:	6123      	str	r3, [r4, #16]
 800950c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009510:	2b00      	cmp	r3, #0
 8009512:	d09c      	beq.n	800944e <_printf_float+0xae>
 8009514:	232d      	movs	r3, #45	; 0x2d
 8009516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800951a:	e798      	b.n	800944e <_printf_float+0xae>
 800951c:	9a06      	ldr	r2, [sp, #24]
 800951e:	2a47      	cmp	r2, #71	; 0x47
 8009520:	d1be      	bne.n	80094a0 <_printf_float+0x100>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1bc      	bne.n	80094a0 <_printf_float+0x100>
 8009526:	2301      	movs	r3, #1
 8009528:	e7b9      	b.n	800949e <_printf_float+0xfe>
 800952a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800952e:	d118      	bne.n	8009562 <_printf_float+0x1c2>
 8009530:	2900      	cmp	r1, #0
 8009532:	6863      	ldr	r3, [r4, #4]
 8009534:	dd0b      	ble.n	800954e <_printf_float+0x1ae>
 8009536:	6121      	str	r1, [r4, #16]
 8009538:	b913      	cbnz	r3, 8009540 <_printf_float+0x1a0>
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	07d0      	lsls	r0, r2, #31
 800953e:	d502      	bpl.n	8009546 <_printf_float+0x1a6>
 8009540:	3301      	adds	r3, #1
 8009542:	440b      	add	r3, r1
 8009544:	6123      	str	r3, [r4, #16]
 8009546:	65a1      	str	r1, [r4, #88]	; 0x58
 8009548:	f04f 0900 	mov.w	r9, #0
 800954c:	e7de      	b.n	800950c <_printf_float+0x16c>
 800954e:	b913      	cbnz	r3, 8009556 <_printf_float+0x1b6>
 8009550:	6822      	ldr	r2, [r4, #0]
 8009552:	07d2      	lsls	r2, r2, #31
 8009554:	d501      	bpl.n	800955a <_printf_float+0x1ba>
 8009556:	3302      	adds	r3, #2
 8009558:	e7f4      	b.n	8009544 <_printf_float+0x1a4>
 800955a:	2301      	movs	r3, #1
 800955c:	e7f2      	b.n	8009544 <_printf_float+0x1a4>
 800955e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009564:	4299      	cmp	r1, r3
 8009566:	db05      	blt.n	8009574 <_printf_float+0x1d4>
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	6121      	str	r1, [r4, #16]
 800956c:	07d8      	lsls	r0, r3, #31
 800956e:	d5ea      	bpl.n	8009546 <_printf_float+0x1a6>
 8009570:	1c4b      	adds	r3, r1, #1
 8009572:	e7e7      	b.n	8009544 <_printf_float+0x1a4>
 8009574:	2900      	cmp	r1, #0
 8009576:	bfd4      	ite	le
 8009578:	f1c1 0202 	rsble	r2, r1, #2
 800957c:	2201      	movgt	r2, #1
 800957e:	4413      	add	r3, r2
 8009580:	e7e0      	b.n	8009544 <_printf_float+0x1a4>
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	055a      	lsls	r2, r3, #21
 8009586:	d407      	bmi.n	8009598 <_printf_float+0x1f8>
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	4642      	mov	r2, r8
 800958c:	4631      	mov	r1, r6
 800958e:	4628      	mov	r0, r5
 8009590:	47b8      	blx	r7
 8009592:	3001      	adds	r0, #1
 8009594:	d12c      	bne.n	80095f0 <_printf_float+0x250>
 8009596:	e764      	b.n	8009462 <_printf_float+0xc2>
 8009598:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800959c:	f240 80e0 	bls.w	8009760 <_printf_float+0x3c0>
 80095a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095a4:	2200      	movs	r2, #0
 80095a6:	2300      	movs	r3, #0
 80095a8:	f7f7 faa6 	bl	8000af8 <__aeabi_dcmpeq>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d034      	beq.n	800961a <_printf_float+0x27a>
 80095b0:	4a37      	ldr	r2, [pc, #220]	; (8009690 <_printf_float+0x2f0>)
 80095b2:	2301      	movs	r3, #1
 80095b4:	4631      	mov	r1, r6
 80095b6:	4628      	mov	r0, r5
 80095b8:	47b8      	blx	r7
 80095ba:	3001      	adds	r0, #1
 80095bc:	f43f af51 	beq.w	8009462 <_printf_float+0xc2>
 80095c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095c4:	429a      	cmp	r2, r3
 80095c6:	db02      	blt.n	80095ce <_printf_float+0x22e>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	07d8      	lsls	r0, r3, #31
 80095cc:	d510      	bpl.n	80095f0 <_printf_float+0x250>
 80095ce:	ee18 3a10 	vmov	r3, s16
 80095d2:	4652      	mov	r2, sl
 80095d4:	4631      	mov	r1, r6
 80095d6:	4628      	mov	r0, r5
 80095d8:	47b8      	blx	r7
 80095da:	3001      	adds	r0, #1
 80095dc:	f43f af41 	beq.w	8009462 <_printf_float+0xc2>
 80095e0:	f04f 0800 	mov.w	r8, #0
 80095e4:	f104 091a 	add.w	r9, r4, #26
 80095e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ea:	3b01      	subs	r3, #1
 80095ec:	4543      	cmp	r3, r8
 80095ee:	dc09      	bgt.n	8009604 <_printf_float+0x264>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	079b      	lsls	r3, r3, #30
 80095f4:	f100 8105 	bmi.w	8009802 <_printf_float+0x462>
 80095f8:	68e0      	ldr	r0, [r4, #12]
 80095fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095fc:	4298      	cmp	r0, r3
 80095fe:	bfb8      	it	lt
 8009600:	4618      	movlt	r0, r3
 8009602:	e730      	b.n	8009466 <_printf_float+0xc6>
 8009604:	2301      	movs	r3, #1
 8009606:	464a      	mov	r2, r9
 8009608:	4631      	mov	r1, r6
 800960a:	4628      	mov	r0, r5
 800960c:	47b8      	blx	r7
 800960e:	3001      	adds	r0, #1
 8009610:	f43f af27 	beq.w	8009462 <_printf_float+0xc2>
 8009614:	f108 0801 	add.w	r8, r8, #1
 8009618:	e7e6      	b.n	80095e8 <_printf_float+0x248>
 800961a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961c:	2b00      	cmp	r3, #0
 800961e:	dc39      	bgt.n	8009694 <_printf_float+0x2f4>
 8009620:	4a1b      	ldr	r2, [pc, #108]	; (8009690 <_printf_float+0x2f0>)
 8009622:	2301      	movs	r3, #1
 8009624:	4631      	mov	r1, r6
 8009626:	4628      	mov	r0, r5
 8009628:	47b8      	blx	r7
 800962a:	3001      	adds	r0, #1
 800962c:	f43f af19 	beq.w	8009462 <_printf_float+0xc2>
 8009630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009634:	4313      	orrs	r3, r2
 8009636:	d102      	bne.n	800963e <_printf_float+0x29e>
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	07d9      	lsls	r1, r3, #31
 800963c:	d5d8      	bpl.n	80095f0 <_printf_float+0x250>
 800963e:	ee18 3a10 	vmov	r3, s16
 8009642:	4652      	mov	r2, sl
 8009644:	4631      	mov	r1, r6
 8009646:	4628      	mov	r0, r5
 8009648:	47b8      	blx	r7
 800964a:	3001      	adds	r0, #1
 800964c:	f43f af09 	beq.w	8009462 <_printf_float+0xc2>
 8009650:	f04f 0900 	mov.w	r9, #0
 8009654:	f104 0a1a 	add.w	sl, r4, #26
 8009658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965a:	425b      	negs	r3, r3
 800965c:	454b      	cmp	r3, r9
 800965e:	dc01      	bgt.n	8009664 <_printf_float+0x2c4>
 8009660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009662:	e792      	b.n	800958a <_printf_float+0x1ea>
 8009664:	2301      	movs	r3, #1
 8009666:	4652      	mov	r2, sl
 8009668:	4631      	mov	r1, r6
 800966a:	4628      	mov	r0, r5
 800966c:	47b8      	blx	r7
 800966e:	3001      	adds	r0, #1
 8009670:	f43f aef7 	beq.w	8009462 <_printf_float+0xc2>
 8009674:	f109 0901 	add.w	r9, r9, #1
 8009678:	e7ee      	b.n	8009658 <_printf_float+0x2b8>
 800967a:	bf00      	nop
 800967c:	7fefffff 	.word	0x7fefffff
 8009680:	0800cc08 	.word	0x0800cc08
 8009684:	0800cc0c 	.word	0x0800cc0c
 8009688:	0800cc14 	.word	0x0800cc14
 800968c:	0800cc10 	.word	0x0800cc10
 8009690:	0800cc18 	.word	0x0800cc18
 8009694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009696:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009698:	429a      	cmp	r2, r3
 800969a:	bfa8      	it	ge
 800969c:	461a      	movge	r2, r3
 800969e:	2a00      	cmp	r2, #0
 80096a0:	4691      	mov	r9, r2
 80096a2:	dc37      	bgt.n	8009714 <_printf_float+0x374>
 80096a4:	f04f 0b00 	mov.w	fp, #0
 80096a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096ac:	f104 021a 	add.w	r2, r4, #26
 80096b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096b2:	9305      	str	r3, [sp, #20]
 80096b4:	eba3 0309 	sub.w	r3, r3, r9
 80096b8:	455b      	cmp	r3, fp
 80096ba:	dc33      	bgt.n	8009724 <_printf_float+0x384>
 80096bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096c0:	429a      	cmp	r2, r3
 80096c2:	db3b      	blt.n	800973c <_printf_float+0x39c>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	07da      	lsls	r2, r3, #31
 80096c8:	d438      	bmi.n	800973c <_printf_float+0x39c>
 80096ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096cc:	9a05      	ldr	r2, [sp, #20]
 80096ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096d0:	1a9a      	subs	r2, r3, r2
 80096d2:	eba3 0901 	sub.w	r9, r3, r1
 80096d6:	4591      	cmp	r9, r2
 80096d8:	bfa8      	it	ge
 80096da:	4691      	movge	r9, r2
 80096dc:	f1b9 0f00 	cmp.w	r9, #0
 80096e0:	dc35      	bgt.n	800974e <_printf_float+0x3ae>
 80096e2:	f04f 0800 	mov.w	r8, #0
 80096e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096ea:	f104 0a1a 	add.w	sl, r4, #26
 80096ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096f2:	1a9b      	subs	r3, r3, r2
 80096f4:	eba3 0309 	sub.w	r3, r3, r9
 80096f8:	4543      	cmp	r3, r8
 80096fa:	f77f af79 	ble.w	80095f0 <_printf_float+0x250>
 80096fe:	2301      	movs	r3, #1
 8009700:	4652      	mov	r2, sl
 8009702:	4631      	mov	r1, r6
 8009704:	4628      	mov	r0, r5
 8009706:	47b8      	blx	r7
 8009708:	3001      	adds	r0, #1
 800970a:	f43f aeaa 	beq.w	8009462 <_printf_float+0xc2>
 800970e:	f108 0801 	add.w	r8, r8, #1
 8009712:	e7ec      	b.n	80096ee <_printf_float+0x34e>
 8009714:	4613      	mov	r3, r2
 8009716:	4631      	mov	r1, r6
 8009718:	4642      	mov	r2, r8
 800971a:	4628      	mov	r0, r5
 800971c:	47b8      	blx	r7
 800971e:	3001      	adds	r0, #1
 8009720:	d1c0      	bne.n	80096a4 <_printf_float+0x304>
 8009722:	e69e      	b.n	8009462 <_printf_float+0xc2>
 8009724:	2301      	movs	r3, #1
 8009726:	4631      	mov	r1, r6
 8009728:	4628      	mov	r0, r5
 800972a:	9205      	str	r2, [sp, #20]
 800972c:	47b8      	blx	r7
 800972e:	3001      	adds	r0, #1
 8009730:	f43f ae97 	beq.w	8009462 <_printf_float+0xc2>
 8009734:	9a05      	ldr	r2, [sp, #20]
 8009736:	f10b 0b01 	add.w	fp, fp, #1
 800973a:	e7b9      	b.n	80096b0 <_printf_float+0x310>
 800973c:	ee18 3a10 	vmov	r3, s16
 8009740:	4652      	mov	r2, sl
 8009742:	4631      	mov	r1, r6
 8009744:	4628      	mov	r0, r5
 8009746:	47b8      	blx	r7
 8009748:	3001      	adds	r0, #1
 800974a:	d1be      	bne.n	80096ca <_printf_float+0x32a>
 800974c:	e689      	b.n	8009462 <_printf_float+0xc2>
 800974e:	9a05      	ldr	r2, [sp, #20]
 8009750:	464b      	mov	r3, r9
 8009752:	4442      	add	r2, r8
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	d1c1      	bne.n	80096e2 <_printf_float+0x342>
 800975e:	e680      	b.n	8009462 <_printf_float+0xc2>
 8009760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009762:	2a01      	cmp	r2, #1
 8009764:	dc01      	bgt.n	800976a <_printf_float+0x3ca>
 8009766:	07db      	lsls	r3, r3, #31
 8009768:	d538      	bpl.n	80097dc <_printf_float+0x43c>
 800976a:	2301      	movs	r3, #1
 800976c:	4642      	mov	r2, r8
 800976e:	4631      	mov	r1, r6
 8009770:	4628      	mov	r0, r5
 8009772:	47b8      	blx	r7
 8009774:	3001      	adds	r0, #1
 8009776:	f43f ae74 	beq.w	8009462 <_printf_float+0xc2>
 800977a:	ee18 3a10 	vmov	r3, s16
 800977e:	4652      	mov	r2, sl
 8009780:	4631      	mov	r1, r6
 8009782:	4628      	mov	r0, r5
 8009784:	47b8      	blx	r7
 8009786:	3001      	adds	r0, #1
 8009788:	f43f ae6b 	beq.w	8009462 <_printf_float+0xc2>
 800978c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009790:	2200      	movs	r2, #0
 8009792:	2300      	movs	r3, #0
 8009794:	f7f7 f9b0 	bl	8000af8 <__aeabi_dcmpeq>
 8009798:	b9d8      	cbnz	r0, 80097d2 <_printf_float+0x432>
 800979a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979c:	f108 0201 	add.w	r2, r8, #1
 80097a0:	3b01      	subs	r3, #1
 80097a2:	4631      	mov	r1, r6
 80097a4:	4628      	mov	r0, r5
 80097a6:	47b8      	blx	r7
 80097a8:	3001      	adds	r0, #1
 80097aa:	d10e      	bne.n	80097ca <_printf_float+0x42a>
 80097ac:	e659      	b.n	8009462 <_printf_float+0xc2>
 80097ae:	2301      	movs	r3, #1
 80097b0:	4652      	mov	r2, sl
 80097b2:	4631      	mov	r1, r6
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b8      	blx	r7
 80097b8:	3001      	adds	r0, #1
 80097ba:	f43f ae52 	beq.w	8009462 <_printf_float+0xc2>
 80097be:	f108 0801 	add.w	r8, r8, #1
 80097c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c4:	3b01      	subs	r3, #1
 80097c6:	4543      	cmp	r3, r8
 80097c8:	dcf1      	bgt.n	80097ae <_printf_float+0x40e>
 80097ca:	464b      	mov	r3, r9
 80097cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097d0:	e6dc      	b.n	800958c <_printf_float+0x1ec>
 80097d2:	f04f 0800 	mov.w	r8, #0
 80097d6:	f104 0a1a 	add.w	sl, r4, #26
 80097da:	e7f2      	b.n	80097c2 <_printf_float+0x422>
 80097dc:	2301      	movs	r3, #1
 80097de:	4642      	mov	r2, r8
 80097e0:	e7df      	b.n	80097a2 <_printf_float+0x402>
 80097e2:	2301      	movs	r3, #1
 80097e4:	464a      	mov	r2, r9
 80097e6:	4631      	mov	r1, r6
 80097e8:	4628      	mov	r0, r5
 80097ea:	47b8      	blx	r7
 80097ec:	3001      	adds	r0, #1
 80097ee:	f43f ae38 	beq.w	8009462 <_printf_float+0xc2>
 80097f2:	f108 0801 	add.w	r8, r8, #1
 80097f6:	68e3      	ldr	r3, [r4, #12]
 80097f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097fa:	1a5b      	subs	r3, r3, r1
 80097fc:	4543      	cmp	r3, r8
 80097fe:	dcf0      	bgt.n	80097e2 <_printf_float+0x442>
 8009800:	e6fa      	b.n	80095f8 <_printf_float+0x258>
 8009802:	f04f 0800 	mov.w	r8, #0
 8009806:	f104 0919 	add.w	r9, r4, #25
 800980a:	e7f4      	b.n	80097f6 <_printf_float+0x456>

0800980c <_printf_common>:
 800980c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009810:	4616      	mov	r6, r2
 8009812:	4699      	mov	r9, r3
 8009814:	688a      	ldr	r2, [r1, #8]
 8009816:	690b      	ldr	r3, [r1, #16]
 8009818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800981c:	4293      	cmp	r3, r2
 800981e:	bfb8      	it	lt
 8009820:	4613      	movlt	r3, r2
 8009822:	6033      	str	r3, [r6, #0]
 8009824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009828:	4607      	mov	r7, r0
 800982a:	460c      	mov	r4, r1
 800982c:	b10a      	cbz	r2, 8009832 <_printf_common+0x26>
 800982e:	3301      	adds	r3, #1
 8009830:	6033      	str	r3, [r6, #0]
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	0699      	lsls	r1, r3, #26
 8009836:	bf42      	ittt	mi
 8009838:	6833      	ldrmi	r3, [r6, #0]
 800983a:	3302      	addmi	r3, #2
 800983c:	6033      	strmi	r3, [r6, #0]
 800983e:	6825      	ldr	r5, [r4, #0]
 8009840:	f015 0506 	ands.w	r5, r5, #6
 8009844:	d106      	bne.n	8009854 <_printf_common+0x48>
 8009846:	f104 0a19 	add.w	sl, r4, #25
 800984a:	68e3      	ldr	r3, [r4, #12]
 800984c:	6832      	ldr	r2, [r6, #0]
 800984e:	1a9b      	subs	r3, r3, r2
 8009850:	42ab      	cmp	r3, r5
 8009852:	dc26      	bgt.n	80098a2 <_printf_common+0x96>
 8009854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009858:	1e13      	subs	r3, r2, #0
 800985a:	6822      	ldr	r2, [r4, #0]
 800985c:	bf18      	it	ne
 800985e:	2301      	movne	r3, #1
 8009860:	0692      	lsls	r2, r2, #26
 8009862:	d42b      	bmi.n	80098bc <_printf_common+0xb0>
 8009864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009868:	4649      	mov	r1, r9
 800986a:	4638      	mov	r0, r7
 800986c:	47c0      	blx	r8
 800986e:	3001      	adds	r0, #1
 8009870:	d01e      	beq.n	80098b0 <_printf_common+0xa4>
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	68e5      	ldr	r5, [r4, #12]
 8009876:	6832      	ldr	r2, [r6, #0]
 8009878:	f003 0306 	and.w	r3, r3, #6
 800987c:	2b04      	cmp	r3, #4
 800987e:	bf08      	it	eq
 8009880:	1aad      	subeq	r5, r5, r2
 8009882:	68a3      	ldr	r3, [r4, #8]
 8009884:	6922      	ldr	r2, [r4, #16]
 8009886:	bf0c      	ite	eq
 8009888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800988c:	2500      	movne	r5, #0
 800988e:	4293      	cmp	r3, r2
 8009890:	bfc4      	itt	gt
 8009892:	1a9b      	subgt	r3, r3, r2
 8009894:	18ed      	addgt	r5, r5, r3
 8009896:	2600      	movs	r6, #0
 8009898:	341a      	adds	r4, #26
 800989a:	42b5      	cmp	r5, r6
 800989c:	d11a      	bne.n	80098d4 <_printf_common+0xc8>
 800989e:	2000      	movs	r0, #0
 80098a0:	e008      	b.n	80098b4 <_printf_common+0xa8>
 80098a2:	2301      	movs	r3, #1
 80098a4:	4652      	mov	r2, sl
 80098a6:	4649      	mov	r1, r9
 80098a8:	4638      	mov	r0, r7
 80098aa:	47c0      	blx	r8
 80098ac:	3001      	adds	r0, #1
 80098ae:	d103      	bne.n	80098b8 <_printf_common+0xac>
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b8:	3501      	adds	r5, #1
 80098ba:	e7c6      	b.n	800984a <_printf_common+0x3e>
 80098bc:	18e1      	adds	r1, r4, r3
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	2030      	movs	r0, #48	; 0x30
 80098c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098c6:	4422      	add	r2, r4
 80098c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098d0:	3302      	adds	r3, #2
 80098d2:	e7c7      	b.n	8009864 <_printf_common+0x58>
 80098d4:	2301      	movs	r3, #1
 80098d6:	4622      	mov	r2, r4
 80098d8:	4649      	mov	r1, r9
 80098da:	4638      	mov	r0, r7
 80098dc:	47c0      	blx	r8
 80098de:	3001      	adds	r0, #1
 80098e0:	d0e6      	beq.n	80098b0 <_printf_common+0xa4>
 80098e2:	3601      	adds	r6, #1
 80098e4:	e7d9      	b.n	800989a <_printf_common+0x8e>
	...

080098e8 <_printf_i>:
 80098e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098ec:	7e0f      	ldrb	r7, [r1, #24]
 80098ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098f0:	2f78      	cmp	r7, #120	; 0x78
 80098f2:	4691      	mov	r9, r2
 80098f4:	4680      	mov	r8, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	469a      	mov	sl, r3
 80098fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098fe:	d807      	bhi.n	8009910 <_printf_i+0x28>
 8009900:	2f62      	cmp	r7, #98	; 0x62
 8009902:	d80a      	bhi.n	800991a <_printf_i+0x32>
 8009904:	2f00      	cmp	r7, #0
 8009906:	f000 80d8 	beq.w	8009aba <_printf_i+0x1d2>
 800990a:	2f58      	cmp	r7, #88	; 0x58
 800990c:	f000 80a3 	beq.w	8009a56 <_printf_i+0x16e>
 8009910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009918:	e03a      	b.n	8009990 <_printf_i+0xa8>
 800991a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800991e:	2b15      	cmp	r3, #21
 8009920:	d8f6      	bhi.n	8009910 <_printf_i+0x28>
 8009922:	a101      	add	r1, pc, #4	; (adr r1, 8009928 <_printf_i+0x40>)
 8009924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009928:	08009981 	.word	0x08009981
 800992c:	08009995 	.word	0x08009995
 8009930:	08009911 	.word	0x08009911
 8009934:	08009911 	.word	0x08009911
 8009938:	08009911 	.word	0x08009911
 800993c:	08009911 	.word	0x08009911
 8009940:	08009995 	.word	0x08009995
 8009944:	08009911 	.word	0x08009911
 8009948:	08009911 	.word	0x08009911
 800994c:	08009911 	.word	0x08009911
 8009950:	08009911 	.word	0x08009911
 8009954:	08009aa1 	.word	0x08009aa1
 8009958:	080099c5 	.word	0x080099c5
 800995c:	08009a83 	.word	0x08009a83
 8009960:	08009911 	.word	0x08009911
 8009964:	08009911 	.word	0x08009911
 8009968:	08009ac3 	.word	0x08009ac3
 800996c:	08009911 	.word	0x08009911
 8009970:	080099c5 	.word	0x080099c5
 8009974:	08009911 	.word	0x08009911
 8009978:	08009911 	.word	0x08009911
 800997c:	08009a8b 	.word	0x08009a8b
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	1d1a      	adds	r2, r3, #4
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	602a      	str	r2, [r5, #0]
 8009988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800998c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009990:	2301      	movs	r3, #1
 8009992:	e0a3      	b.n	8009adc <_printf_i+0x1f4>
 8009994:	6820      	ldr	r0, [r4, #0]
 8009996:	6829      	ldr	r1, [r5, #0]
 8009998:	0606      	lsls	r6, r0, #24
 800999a:	f101 0304 	add.w	r3, r1, #4
 800999e:	d50a      	bpl.n	80099b6 <_printf_i+0xce>
 80099a0:	680e      	ldr	r6, [r1, #0]
 80099a2:	602b      	str	r3, [r5, #0]
 80099a4:	2e00      	cmp	r6, #0
 80099a6:	da03      	bge.n	80099b0 <_printf_i+0xc8>
 80099a8:	232d      	movs	r3, #45	; 0x2d
 80099aa:	4276      	negs	r6, r6
 80099ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099b0:	485e      	ldr	r0, [pc, #376]	; (8009b2c <_printf_i+0x244>)
 80099b2:	230a      	movs	r3, #10
 80099b4:	e019      	b.n	80099ea <_printf_i+0x102>
 80099b6:	680e      	ldr	r6, [r1, #0]
 80099b8:	602b      	str	r3, [r5, #0]
 80099ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099be:	bf18      	it	ne
 80099c0:	b236      	sxthne	r6, r6
 80099c2:	e7ef      	b.n	80099a4 <_printf_i+0xbc>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	6820      	ldr	r0, [r4, #0]
 80099c8:	1d19      	adds	r1, r3, #4
 80099ca:	6029      	str	r1, [r5, #0]
 80099cc:	0601      	lsls	r1, r0, #24
 80099ce:	d501      	bpl.n	80099d4 <_printf_i+0xec>
 80099d0:	681e      	ldr	r6, [r3, #0]
 80099d2:	e002      	b.n	80099da <_printf_i+0xf2>
 80099d4:	0646      	lsls	r6, r0, #25
 80099d6:	d5fb      	bpl.n	80099d0 <_printf_i+0xe8>
 80099d8:	881e      	ldrh	r6, [r3, #0]
 80099da:	4854      	ldr	r0, [pc, #336]	; (8009b2c <_printf_i+0x244>)
 80099dc:	2f6f      	cmp	r7, #111	; 0x6f
 80099de:	bf0c      	ite	eq
 80099e0:	2308      	moveq	r3, #8
 80099e2:	230a      	movne	r3, #10
 80099e4:	2100      	movs	r1, #0
 80099e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099ea:	6865      	ldr	r5, [r4, #4]
 80099ec:	60a5      	str	r5, [r4, #8]
 80099ee:	2d00      	cmp	r5, #0
 80099f0:	bfa2      	ittt	ge
 80099f2:	6821      	ldrge	r1, [r4, #0]
 80099f4:	f021 0104 	bicge.w	r1, r1, #4
 80099f8:	6021      	strge	r1, [r4, #0]
 80099fa:	b90e      	cbnz	r6, 8009a00 <_printf_i+0x118>
 80099fc:	2d00      	cmp	r5, #0
 80099fe:	d04d      	beq.n	8009a9c <_printf_i+0x1b4>
 8009a00:	4615      	mov	r5, r2
 8009a02:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a06:	fb03 6711 	mls	r7, r3, r1, r6
 8009a0a:	5dc7      	ldrb	r7, [r0, r7]
 8009a0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a10:	4637      	mov	r7, r6
 8009a12:	42bb      	cmp	r3, r7
 8009a14:	460e      	mov	r6, r1
 8009a16:	d9f4      	bls.n	8009a02 <_printf_i+0x11a>
 8009a18:	2b08      	cmp	r3, #8
 8009a1a:	d10b      	bne.n	8009a34 <_printf_i+0x14c>
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	07de      	lsls	r6, r3, #31
 8009a20:	d508      	bpl.n	8009a34 <_printf_i+0x14c>
 8009a22:	6923      	ldr	r3, [r4, #16]
 8009a24:	6861      	ldr	r1, [r4, #4]
 8009a26:	4299      	cmp	r1, r3
 8009a28:	bfde      	ittt	le
 8009a2a:	2330      	movle	r3, #48	; 0x30
 8009a2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a34:	1b52      	subs	r2, r2, r5
 8009a36:	6122      	str	r2, [r4, #16]
 8009a38:	f8cd a000 	str.w	sl, [sp]
 8009a3c:	464b      	mov	r3, r9
 8009a3e:	aa03      	add	r2, sp, #12
 8009a40:	4621      	mov	r1, r4
 8009a42:	4640      	mov	r0, r8
 8009a44:	f7ff fee2 	bl	800980c <_printf_common>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d14c      	bne.n	8009ae6 <_printf_i+0x1fe>
 8009a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a50:	b004      	add	sp, #16
 8009a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a56:	4835      	ldr	r0, [pc, #212]	; (8009b2c <_printf_i+0x244>)
 8009a58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a5c:	6829      	ldr	r1, [r5, #0]
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a64:	6029      	str	r1, [r5, #0]
 8009a66:	061d      	lsls	r5, r3, #24
 8009a68:	d514      	bpl.n	8009a94 <_printf_i+0x1ac>
 8009a6a:	07df      	lsls	r7, r3, #31
 8009a6c:	bf44      	itt	mi
 8009a6e:	f043 0320 	orrmi.w	r3, r3, #32
 8009a72:	6023      	strmi	r3, [r4, #0]
 8009a74:	b91e      	cbnz	r6, 8009a7e <_printf_i+0x196>
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	f023 0320 	bic.w	r3, r3, #32
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	2310      	movs	r3, #16
 8009a80:	e7b0      	b.n	80099e4 <_printf_i+0xfc>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	f043 0320 	orr.w	r3, r3, #32
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	2378      	movs	r3, #120	; 0x78
 8009a8c:	4828      	ldr	r0, [pc, #160]	; (8009b30 <_printf_i+0x248>)
 8009a8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a92:	e7e3      	b.n	8009a5c <_printf_i+0x174>
 8009a94:	0659      	lsls	r1, r3, #25
 8009a96:	bf48      	it	mi
 8009a98:	b2b6      	uxthmi	r6, r6
 8009a9a:	e7e6      	b.n	8009a6a <_printf_i+0x182>
 8009a9c:	4615      	mov	r5, r2
 8009a9e:	e7bb      	b.n	8009a18 <_printf_i+0x130>
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	6826      	ldr	r6, [r4, #0]
 8009aa4:	6961      	ldr	r1, [r4, #20]
 8009aa6:	1d18      	adds	r0, r3, #4
 8009aa8:	6028      	str	r0, [r5, #0]
 8009aaa:	0635      	lsls	r5, r6, #24
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	d501      	bpl.n	8009ab4 <_printf_i+0x1cc>
 8009ab0:	6019      	str	r1, [r3, #0]
 8009ab2:	e002      	b.n	8009aba <_printf_i+0x1d2>
 8009ab4:	0670      	lsls	r0, r6, #25
 8009ab6:	d5fb      	bpl.n	8009ab0 <_printf_i+0x1c8>
 8009ab8:	8019      	strh	r1, [r3, #0]
 8009aba:	2300      	movs	r3, #0
 8009abc:	6123      	str	r3, [r4, #16]
 8009abe:	4615      	mov	r5, r2
 8009ac0:	e7ba      	b.n	8009a38 <_printf_i+0x150>
 8009ac2:	682b      	ldr	r3, [r5, #0]
 8009ac4:	1d1a      	adds	r2, r3, #4
 8009ac6:	602a      	str	r2, [r5, #0]
 8009ac8:	681d      	ldr	r5, [r3, #0]
 8009aca:	6862      	ldr	r2, [r4, #4]
 8009acc:	2100      	movs	r1, #0
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f7f6 fb9e 	bl	8000210 <memchr>
 8009ad4:	b108      	cbz	r0, 8009ada <_printf_i+0x1f2>
 8009ad6:	1b40      	subs	r0, r0, r5
 8009ad8:	6060      	str	r0, [r4, #4]
 8009ada:	6863      	ldr	r3, [r4, #4]
 8009adc:	6123      	str	r3, [r4, #16]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ae4:	e7a8      	b.n	8009a38 <_printf_i+0x150>
 8009ae6:	6923      	ldr	r3, [r4, #16]
 8009ae8:	462a      	mov	r2, r5
 8009aea:	4649      	mov	r1, r9
 8009aec:	4640      	mov	r0, r8
 8009aee:	47d0      	blx	sl
 8009af0:	3001      	adds	r0, #1
 8009af2:	d0ab      	beq.n	8009a4c <_printf_i+0x164>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	079b      	lsls	r3, r3, #30
 8009af8:	d413      	bmi.n	8009b22 <_printf_i+0x23a>
 8009afa:	68e0      	ldr	r0, [r4, #12]
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	4298      	cmp	r0, r3
 8009b00:	bfb8      	it	lt
 8009b02:	4618      	movlt	r0, r3
 8009b04:	e7a4      	b.n	8009a50 <_printf_i+0x168>
 8009b06:	2301      	movs	r3, #1
 8009b08:	4632      	mov	r2, r6
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	47d0      	blx	sl
 8009b10:	3001      	adds	r0, #1
 8009b12:	d09b      	beq.n	8009a4c <_printf_i+0x164>
 8009b14:	3501      	adds	r5, #1
 8009b16:	68e3      	ldr	r3, [r4, #12]
 8009b18:	9903      	ldr	r1, [sp, #12]
 8009b1a:	1a5b      	subs	r3, r3, r1
 8009b1c:	42ab      	cmp	r3, r5
 8009b1e:	dcf2      	bgt.n	8009b06 <_printf_i+0x21e>
 8009b20:	e7eb      	b.n	8009afa <_printf_i+0x212>
 8009b22:	2500      	movs	r5, #0
 8009b24:	f104 0619 	add.w	r6, r4, #25
 8009b28:	e7f5      	b.n	8009b16 <_printf_i+0x22e>
 8009b2a:	bf00      	nop
 8009b2c:	0800cc1a 	.word	0x0800cc1a
 8009b30:	0800cc2b 	.word	0x0800cc2b

08009b34 <iprintf>:
 8009b34:	b40f      	push	{r0, r1, r2, r3}
 8009b36:	4b0a      	ldr	r3, [pc, #40]	; (8009b60 <iprintf+0x2c>)
 8009b38:	b513      	push	{r0, r1, r4, lr}
 8009b3a:	681c      	ldr	r4, [r3, #0]
 8009b3c:	b124      	cbz	r4, 8009b48 <iprintf+0x14>
 8009b3e:	69a3      	ldr	r3, [r4, #24]
 8009b40:	b913      	cbnz	r3, 8009b48 <iprintf+0x14>
 8009b42:	4620      	mov	r0, r4
 8009b44:	f001 f8d8 	bl	800acf8 <__sinit>
 8009b48:	ab05      	add	r3, sp, #20
 8009b4a:	9a04      	ldr	r2, [sp, #16]
 8009b4c:	68a1      	ldr	r1, [r4, #8]
 8009b4e:	9301      	str	r3, [sp, #4]
 8009b50:	4620      	mov	r0, r4
 8009b52:	f001 fe95 	bl	800b880 <_vfiprintf_r>
 8009b56:	b002      	add	sp, #8
 8009b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b5c:	b004      	add	sp, #16
 8009b5e:	4770      	bx	lr
 8009b60:	20000024 	.word	0x20000024

08009b64 <_puts_r>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	460e      	mov	r6, r1
 8009b68:	4605      	mov	r5, r0
 8009b6a:	b118      	cbz	r0, 8009b74 <_puts_r+0x10>
 8009b6c:	6983      	ldr	r3, [r0, #24]
 8009b6e:	b90b      	cbnz	r3, 8009b74 <_puts_r+0x10>
 8009b70:	f001 f8c2 	bl	800acf8 <__sinit>
 8009b74:	69ab      	ldr	r3, [r5, #24]
 8009b76:	68ac      	ldr	r4, [r5, #8]
 8009b78:	b913      	cbnz	r3, 8009b80 <_puts_r+0x1c>
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f001 f8bc 	bl	800acf8 <__sinit>
 8009b80:	4b2c      	ldr	r3, [pc, #176]	; (8009c34 <_puts_r+0xd0>)
 8009b82:	429c      	cmp	r4, r3
 8009b84:	d120      	bne.n	8009bc8 <_puts_r+0x64>
 8009b86:	686c      	ldr	r4, [r5, #4]
 8009b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b8a:	07db      	lsls	r3, r3, #31
 8009b8c:	d405      	bmi.n	8009b9a <_puts_r+0x36>
 8009b8e:	89a3      	ldrh	r3, [r4, #12]
 8009b90:	0598      	lsls	r0, r3, #22
 8009b92:	d402      	bmi.n	8009b9a <_puts_r+0x36>
 8009b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b96:	f001 f952 	bl	800ae3e <__retarget_lock_acquire_recursive>
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	0719      	lsls	r1, r3, #28
 8009b9e:	d51d      	bpl.n	8009bdc <_puts_r+0x78>
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	b1db      	cbz	r3, 8009bdc <_puts_r+0x78>
 8009ba4:	3e01      	subs	r6, #1
 8009ba6:	68a3      	ldr	r3, [r4, #8]
 8009ba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bac:	3b01      	subs	r3, #1
 8009bae:	60a3      	str	r3, [r4, #8]
 8009bb0:	bb39      	cbnz	r1, 8009c02 <_puts_r+0x9e>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	da38      	bge.n	8009c28 <_puts_r+0xc4>
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	210a      	movs	r1, #10
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 f848 	bl	8009c50 <__swbuf_r>
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d011      	beq.n	8009be8 <_puts_r+0x84>
 8009bc4:	250a      	movs	r5, #10
 8009bc6:	e011      	b.n	8009bec <_puts_r+0x88>
 8009bc8:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <_puts_r+0xd4>)
 8009bca:	429c      	cmp	r4, r3
 8009bcc:	d101      	bne.n	8009bd2 <_puts_r+0x6e>
 8009bce:	68ac      	ldr	r4, [r5, #8]
 8009bd0:	e7da      	b.n	8009b88 <_puts_r+0x24>
 8009bd2:	4b1a      	ldr	r3, [pc, #104]	; (8009c3c <_puts_r+0xd8>)
 8009bd4:	429c      	cmp	r4, r3
 8009bd6:	bf08      	it	eq
 8009bd8:	68ec      	ldreq	r4, [r5, #12]
 8009bda:	e7d5      	b.n	8009b88 <_puts_r+0x24>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4628      	mov	r0, r5
 8009be0:	f000 f888 	bl	8009cf4 <__swsetup_r>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d0dd      	beq.n	8009ba4 <_puts_r+0x40>
 8009be8:	f04f 35ff 	mov.w	r5, #4294967295
 8009bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bee:	07da      	lsls	r2, r3, #31
 8009bf0:	d405      	bmi.n	8009bfe <_puts_r+0x9a>
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	059b      	lsls	r3, r3, #22
 8009bf6:	d402      	bmi.n	8009bfe <_puts_r+0x9a>
 8009bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bfa:	f001 f921 	bl	800ae40 <__retarget_lock_release_recursive>
 8009bfe:	4628      	mov	r0, r5
 8009c00:	bd70      	pop	{r4, r5, r6, pc}
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	da04      	bge.n	8009c10 <_puts_r+0xac>
 8009c06:	69a2      	ldr	r2, [r4, #24]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	dc06      	bgt.n	8009c1a <_puts_r+0xb6>
 8009c0c:	290a      	cmp	r1, #10
 8009c0e:	d004      	beq.n	8009c1a <_puts_r+0xb6>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	6022      	str	r2, [r4, #0]
 8009c16:	7019      	strb	r1, [r3, #0]
 8009c18:	e7c5      	b.n	8009ba6 <_puts_r+0x42>
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f000 f817 	bl	8009c50 <__swbuf_r>
 8009c22:	3001      	adds	r0, #1
 8009c24:	d1bf      	bne.n	8009ba6 <_puts_r+0x42>
 8009c26:	e7df      	b.n	8009be8 <_puts_r+0x84>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	250a      	movs	r5, #10
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	6022      	str	r2, [r4, #0]
 8009c30:	701d      	strb	r5, [r3, #0]
 8009c32:	e7db      	b.n	8009bec <_puts_r+0x88>
 8009c34:	0800ccec 	.word	0x0800ccec
 8009c38:	0800cd0c 	.word	0x0800cd0c
 8009c3c:	0800cccc 	.word	0x0800cccc

08009c40 <puts>:
 8009c40:	4b02      	ldr	r3, [pc, #8]	; (8009c4c <puts+0xc>)
 8009c42:	4601      	mov	r1, r0
 8009c44:	6818      	ldr	r0, [r3, #0]
 8009c46:	f7ff bf8d 	b.w	8009b64 <_puts_r>
 8009c4a:	bf00      	nop
 8009c4c:	20000024 	.word	0x20000024

08009c50 <__swbuf_r>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	460e      	mov	r6, r1
 8009c54:	4614      	mov	r4, r2
 8009c56:	4605      	mov	r5, r0
 8009c58:	b118      	cbz	r0, 8009c62 <__swbuf_r+0x12>
 8009c5a:	6983      	ldr	r3, [r0, #24]
 8009c5c:	b90b      	cbnz	r3, 8009c62 <__swbuf_r+0x12>
 8009c5e:	f001 f84b 	bl	800acf8 <__sinit>
 8009c62:	4b21      	ldr	r3, [pc, #132]	; (8009ce8 <__swbuf_r+0x98>)
 8009c64:	429c      	cmp	r4, r3
 8009c66:	d12b      	bne.n	8009cc0 <__swbuf_r+0x70>
 8009c68:	686c      	ldr	r4, [r5, #4]
 8009c6a:	69a3      	ldr	r3, [r4, #24]
 8009c6c:	60a3      	str	r3, [r4, #8]
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	071a      	lsls	r2, r3, #28
 8009c72:	d52f      	bpl.n	8009cd4 <__swbuf_r+0x84>
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	b36b      	cbz	r3, 8009cd4 <__swbuf_r+0x84>
 8009c78:	6923      	ldr	r3, [r4, #16]
 8009c7a:	6820      	ldr	r0, [r4, #0]
 8009c7c:	1ac0      	subs	r0, r0, r3
 8009c7e:	6963      	ldr	r3, [r4, #20]
 8009c80:	b2f6      	uxtb	r6, r6
 8009c82:	4283      	cmp	r3, r0
 8009c84:	4637      	mov	r7, r6
 8009c86:	dc04      	bgt.n	8009c92 <__swbuf_r+0x42>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f000 ffa0 	bl	800abd0 <_fflush_r>
 8009c90:	bb30      	cbnz	r0, 8009ce0 <__swbuf_r+0x90>
 8009c92:	68a3      	ldr	r3, [r4, #8]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	60a3      	str	r3, [r4, #8]
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	6022      	str	r2, [r4, #0]
 8009c9e:	701e      	strb	r6, [r3, #0]
 8009ca0:	6963      	ldr	r3, [r4, #20]
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	4283      	cmp	r3, r0
 8009ca6:	d004      	beq.n	8009cb2 <__swbuf_r+0x62>
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	07db      	lsls	r3, r3, #31
 8009cac:	d506      	bpl.n	8009cbc <__swbuf_r+0x6c>
 8009cae:	2e0a      	cmp	r6, #10
 8009cb0:	d104      	bne.n	8009cbc <__swbuf_r+0x6c>
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f000 ff8b 	bl	800abd0 <_fflush_r>
 8009cba:	b988      	cbnz	r0, 8009ce0 <__swbuf_r+0x90>
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <__swbuf_r+0x9c>)
 8009cc2:	429c      	cmp	r4, r3
 8009cc4:	d101      	bne.n	8009cca <__swbuf_r+0x7a>
 8009cc6:	68ac      	ldr	r4, [r5, #8]
 8009cc8:	e7cf      	b.n	8009c6a <__swbuf_r+0x1a>
 8009cca:	4b09      	ldr	r3, [pc, #36]	; (8009cf0 <__swbuf_r+0xa0>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	bf08      	it	eq
 8009cd0:	68ec      	ldreq	r4, [r5, #12]
 8009cd2:	e7ca      	b.n	8009c6a <__swbuf_r+0x1a>
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f000 f80c 	bl	8009cf4 <__swsetup_r>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d0cb      	beq.n	8009c78 <__swbuf_r+0x28>
 8009ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ce4:	e7ea      	b.n	8009cbc <__swbuf_r+0x6c>
 8009ce6:	bf00      	nop
 8009ce8:	0800ccec 	.word	0x0800ccec
 8009cec:	0800cd0c 	.word	0x0800cd0c
 8009cf0:	0800cccc 	.word	0x0800cccc

08009cf4 <__swsetup_r>:
 8009cf4:	4b32      	ldr	r3, [pc, #200]	; (8009dc0 <__swsetup_r+0xcc>)
 8009cf6:	b570      	push	{r4, r5, r6, lr}
 8009cf8:	681d      	ldr	r5, [r3, #0]
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	b125      	cbz	r5, 8009d0a <__swsetup_r+0x16>
 8009d00:	69ab      	ldr	r3, [r5, #24]
 8009d02:	b913      	cbnz	r3, 8009d0a <__swsetup_r+0x16>
 8009d04:	4628      	mov	r0, r5
 8009d06:	f000 fff7 	bl	800acf8 <__sinit>
 8009d0a:	4b2e      	ldr	r3, [pc, #184]	; (8009dc4 <__swsetup_r+0xd0>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	d10f      	bne.n	8009d30 <__swsetup_r+0x3c>
 8009d10:	686c      	ldr	r4, [r5, #4]
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d18:	0719      	lsls	r1, r3, #28
 8009d1a:	d42c      	bmi.n	8009d76 <__swsetup_r+0x82>
 8009d1c:	06dd      	lsls	r5, r3, #27
 8009d1e:	d411      	bmi.n	8009d44 <__swsetup_r+0x50>
 8009d20:	2309      	movs	r3, #9
 8009d22:	6033      	str	r3, [r6, #0]
 8009d24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d28:	81a3      	strh	r3, [r4, #12]
 8009d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2e:	e03e      	b.n	8009dae <__swsetup_r+0xba>
 8009d30:	4b25      	ldr	r3, [pc, #148]	; (8009dc8 <__swsetup_r+0xd4>)
 8009d32:	429c      	cmp	r4, r3
 8009d34:	d101      	bne.n	8009d3a <__swsetup_r+0x46>
 8009d36:	68ac      	ldr	r4, [r5, #8]
 8009d38:	e7eb      	b.n	8009d12 <__swsetup_r+0x1e>
 8009d3a:	4b24      	ldr	r3, [pc, #144]	; (8009dcc <__swsetup_r+0xd8>)
 8009d3c:	429c      	cmp	r4, r3
 8009d3e:	bf08      	it	eq
 8009d40:	68ec      	ldreq	r4, [r5, #12]
 8009d42:	e7e6      	b.n	8009d12 <__swsetup_r+0x1e>
 8009d44:	0758      	lsls	r0, r3, #29
 8009d46:	d512      	bpl.n	8009d6e <__swsetup_r+0x7a>
 8009d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d4a:	b141      	cbz	r1, 8009d5e <__swsetup_r+0x6a>
 8009d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d50:	4299      	cmp	r1, r3
 8009d52:	d002      	beq.n	8009d5a <__swsetup_r+0x66>
 8009d54:	4630      	mov	r0, r6
 8009d56:	f001 fc89 	bl	800b66c <_free_r>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d64:	81a3      	strh	r3, [r4, #12]
 8009d66:	2300      	movs	r3, #0
 8009d68:	6063      	str	r3, [r4, #4]
 8009d6a:	6923      	ldr	r3, [r4, #16]
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	f043 0308 	orr.w	r3, r3, #8
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	6923      	ldr	r3, [r4, #16]
 8009d78:	b94b      	cbnz	r3, 8009d8e <__swsetup_r+0x9a>
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d84:	d003      	beq.n	8009d8e <__swsetup_r+0x9a>
 8009d86:	4621      	mov	r1, r4
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f001 f87f 	bl	800ae8c <__smakebuf_r>
 8009d8e:	89a0      	ldrh	r0, [r4, #12]
 8009d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d94:	f010 0301 	ands.w	r3, r0, #1
 8009d98:	d00a      	beq.n	8009db0 <__swsetup_r+0xbc>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60a3      	str	r3, [r4, #8]
 8009d9e:	6963      	ldr	r3, [r4, #20]
 8009da0:	425b      	negs	r3, r3
 8009da2:	61a3      	str	r3, [r4, #24]
 8009da4:	6923      	ldr	r3, [r4, #16]
 8009da6:	b943      	cbnz	r3, 8009dba <__swsetup_r+0xc6>
 8009da8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dac:	d1ba      	bne.n	8009d24 <__swsetup_r+0x30>
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	0781      	lsls	r1, r0, #30
 8009db2:	bf58      	it	pl
 8009db4:	6963      	ldrpl	r3, [r4, #20]
 8009db6:	60a3      	str	r3, [r4, #8]
 8009db8:	e7f4      	b.n	8009da4 <__swsetup_r+0xb0>
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e7f7      	b.n	8009dae <__swsetup_r+0xba>
 8009dbe:	bf00      	nop
 8009dc0:	20000024 	.word	0x20000024
 8009dc4:	0800ccec 	.word	0x0800ccec
 8009dc8:	0800cd0c 	.word	0x0800cd0c
 8009dcc:	0800cccc 	.word	0x0800cccc

08009dd0 <quorem>:
 8009dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	6903      	ldr	r3, [r0, #16]
 8009dd6:	690c      	ldr	r4, [r1, #16]
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	4607      	mov	r7, r0
 8009ddc:	f2c0 8081 	blt.w	8009ee2 <quorem+0x112>
 8009de0:	3c01      	subs	r4, #1
 8009de2:	f101 0814 	add.w	r8, r1, #20
 8009de6:	f100 0514 	add.w	r5, r0, #20
 8009dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e04:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e08:	d331      	bcc.n	8009e6e <quorem+0x9e>
 8009e0a:	f04f 0e00 	mov.w	lr, #0
 8009e0e:	4640      	mov	r0, r8
 8009e10:	46ac      	mov	ip, r5
 8009e12:	46f2      	mov	sl, lr
 8009e14:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e18:	b293      	uxth	r3, r2
 8009e1a:	fb06 e303 	mla	r3, r6, r3, lr
 8009e1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	ebaa 0303 	sub.w	r3, sl, r3
 8009e28:	f8dc a000 	ldr.w	sl, [ip]
 8009e2c:	0c12      	lsrs	r2, r2, #16
 8009e2e:	fa13 f38a 	uxtah	r3, r3, sl
 8009e32:	fb06 e202 	mla	r2, r6, r2, lr
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	9b00      	ldr	r3, [sp, #0]
 8009e3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e3e:	b292      	uxth	r2, r2
 8009e40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e48:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e4c:	4581      	cmp	r9, r0
 8009e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e52:	f84c 3b04 	str.w	r3, [ip], #4
 8009e56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e5a:	d2db      	bcs.n	8009e14 <quorem+0x44>
 8009e5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e60:	b92b      	cbnz	r3, 8009e6e <quorem+0x9e>
 8009e62:	9b01      	ldr	r3, [sp, #4]
 8009e64:	3b04      	subs	r3, #4
 8009e66:	429d      	cmp	r5, r3
 8009e68:	461a      	mov	r2, r3
 8009e6a:	d32e      	bcc.n	8009eca <quorem+0xfa>
 8009e6c:	613c      	str	r4, [r7, #16]
 8009e6e:	4638      	mov	r0, r7
 8009e70:	f001 fae4 	bl	800b43c <__mcmp>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	db24      	blt.n	8009ec2 <quorem+0xf2>
 8009e78:	3601      	adds	r6, #1
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f04f 0c00 	mov.w	ip, #0
 8009e80:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e84:	f8d0 e000 	ldr.w	lr, [r0]
 8009e88:	b293      	uxth	r3, r2
 8009e8a:	ebac 0303 	sub.w	r3, ip, r3
 8009e8e:	0c12      	lsrs	r2, r2, #16
 8009e90:	fa13 f38e 	uxtah	r3, r3, lr
 8009e94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ea2:	45c1      	cmp	r9, r8
 8009ea4:	f840 3b04 	str.w	r3, [r0], #4
 8009ea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009eac:	d2e8      	bcs.n	8009e80 <quorem+0xb0>
 8009eae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eb6:	b922      	cbnz	r2, 8009ec2 <quorem+0xf2>
 8009eb8:	3b04      	subs	r3, #4
 8009eba:	429d      	cmp	r5, r3
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	d30a      	bcc.n	8009ed6 <quorem+0x106>
 8009ec0:	613c      	str	r4, [r7, #16]
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	b003      	add	sp, #12
 8009ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	3b04      	subs	r3, #4
 8009ece:	2a00      	cmp	r2, #0
 8009ed0:	d1cc      	bne.n	8009e6c <quorem+0x9c>
 8009ed2:	3c01      	subs	r4, #1
 8009ed4:	e7c7      	b.n	8009e66 <quorem+0x96>
 8009ed6:	6812      	ldr	r2, [r2, #0]
 8009ed8:	3b04      	subs	r3, #4
 8009eda:	2a00      	cmp	r2, #0
 8009edc:	d1f0      	bne.n	8009ec0 <quorem+0xf0>
 8009ede:	3c01      	subs	r4, #1
 8009ee0:	e7eb      	b.n	8009eba <quorem+0xea>
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	e7ee      	b.n	8009ec4 <quorem+0xf4>
	...

08009ee8 <_dtoa_r>:
 8009ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	ed2d 8b04 	vpush	{d8-d9}
 8009ef0:	ec57 6b10 	vmov	r6, r7, d0
 8009ef4:	b093      	sub	sp, #76	; 0x4c
 8009ef6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ef8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009efc:	9106      	str	r1, [sp, #24]
 8009efe:	ee10 aa10 	vmov	sl, s0
 8009f02:	4604      	mov	r4, r0
 8009f04:	9209      	str	r2, [sp, #36]	; 0x24
 8009f06:	930c      	str	r3, [sp, #48]	; 0x30
 8009f08:	46bb      	mov	fp, r7
 8009f0a:	b975      	cbnz	r5, 8009f2a <_dtoa_r+0x42>
 8009f0c:	2010      	movs	r0, #16
 8009f0e:	f000 fffd 	bl	800af0c <malloc>
 8009f12:	4602      	mov	r2, r0
 8009f14:	6260      	str	r0, [r4, #36]	; 0x24
 8009f16:	b920      	cbnz	r0, 8009f22 <_dtoa_r+0x3a>
 8009f18:	4ba7      	ldr	r3, [pc, #668]	; (800a1b8 <_dtoa_r+0x2d0>)
 8009f1a:	21ea      	movs	r1, #234	; 0xea
 8009f1c:	48a7      	ldr	r0, [pc, #668]	; (800a1bc <_dtoa_r+0x2d4>)
 8009f1e:	f001 fe45 	bl	800bbac <__assert_func>
 8009f22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f26:	6005      	str	r5, [r0, #0]
 8009f28:	60c5      	str	r5, [r0, #12]
 8009f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f2c:	6819      	ldr	r1, [r3, #0]
 8009f2e:	b151      	cbz	r1, 8009f46 <_dtoa_r+0x5e>
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	604a      	str	r2, [r1, #4]
 8009f34:	2301      	movs	r3, #1
 8009f36:	4093      	lsls	r3, r2
 8009f38:	608b      	str	r3, [r1, #8]
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f001 f83c 	bl	800afb8 <_Bfree>
 8009f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
 8009f46:	1e3b      	subs	r3, r7, #0
 8009f48:	bfaa      	itet	ge
 8009f4a:	2300      	movge	r3, #0
 8009f4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009f50:	f8c8 3000 	strge.w	r3, [r8]
 8009f54:	4b9a      	ldr	r3, [pc, #616]	; (800a1c0 <_dtoa_r+0x2d8>)
 8009f56:	bfbc      	itt	lt
 8009f58:	2201      	movlt	r2, #1
 8009f5a:	f8c8 2000 	strlt.w	r2, [r8]
 8009f5e:	ea33 030b 	bics.w	r3, r3, fp
 8009f62:	d11b      	bne.n	8009f9c <_dtoa_r+0xb4>
 8009f64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f66:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f70:	4333      	orrs	r3, r6
 8009f72:	f000 8592 	beq.w	800aa9a <_dtoa_r+0xbb2>
 8009f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f78:	b963      	cbnz	r3, 8009f94 <_dtoa_r+0xac>
 8009f7a:	4b92      	ldr	r3, [pc, #584]	; (800a1c4 <_dtoa_r+0x2dc>)
 8009f7c:	e022      	b.n	8009fc4 <_dtoa_r+0xdc>
 8009f7e:	4b92      	ldr	r3, [pc, #584]	; (800a1c8 <_dtoa_r+0x2e0>)
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	3308      	adds	r3, #8
 8009f84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f86:	6013      	str	r3, [r2, #0]
 8009f88:	9801      	ldr	r0, [sp, #4]
 8009f8a:	b013      	add	sp, #76	; 0x4c
 8009f8c:	ecbd 8b04 	vpop	{d8-d9}
 8009f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f94:	4b8b      	ldr	r3, [pc, #556]	; (800a1c4 <_dtoa_r+0x2dc>)
 8009f96:	9301      	str	r3, [sp, #4]
 8009f98:	3303      	adds	r3, #3
 8009f9a:	e7f3      	b.n	8009f84 <_dtoa_r+0x9c>
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4650      	mov	r0, sl
 8009fa2:	4659      	mov	r1, fp
 8009fa4:	f7f6 fda8 	bl	8000af8 <__aeabi_dcmpeq>
 8009fa8:	ec4b ab19 	vmov	d9, sl, fp
 8009fac:	4680      	mov	r8, r0
 8009fae:	b158      	cbz	r0, 8009fc8 <_dtoa_r+0xe0>
 8009fb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 856b 	beq.w	800aa94 <_dtoa_r+0xbac>
 8009fbe:	4883      	ldr	r0, [pc, #524]	; (800a1cc <_dtoa_r+0x2e4>)
 8009fc0:	6018      	str	r0, [r3, #0]
 8009fc2:	1e43      	subs	r3, r0, #1
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	e7df      	b.n	8009f88 <_dtoa_r+0xa0>
 8009fc8:	ec4b ab10 	vmov	d0, sl, fp
 8009fcc:	aa10      	add	r2, sp, #64	; 0x40
 8009fce:	a911      	add	r1, sp, #68	; 0x44
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f001 fad9 	bl	800b588 <__d2b>
 8009fd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009fda:	ee08 0a10 	vmov	s16, r0
 8009fde:	2d00      	cmp	r5, #0
 8009fe0:	f000 8084 	beq.w	800a0ec <_dtoa_r+0x204>
 8009fe4:	ee19 3a90 	vmov	r3, s19
 8009fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ff0:	4656      	mov	r6, sl
 8009ff2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ff6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ffa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009ffe:	4b74      	ldr	r3, [pc, #464]	; (800a1d0 <_dtoa_r+0x2e8>)
 800a000:	2200      	movs	r2, #0
 800a002:	4630      	mov	r0, r6
 800a004:	4639      	mov	r1, r7
 800a006:	f7f6 f957 	bl	80002b8 <__aeabi_dsub>
 800a00a:	a365      	add	r3, pc, #404	; (adr r3, 800a1a0 <_dtoa_r+0x2b8>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f7f6 fb0a 	bl	8000628 <__aeabi_dmul>
 800a014:	a364      	add	r3, pc, #400	; (adr r3, 800a1a8 <_dtoa_r+0x2c0>)
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	f7f6 f94f 	bl	80002bc <__adddf3>
 800a01e:	4606      	mov	r6, r0
 800a020:	4628      	mov	r0, r5
 800a022:	460f      	mov	r7, r1
 800a024:	f7f6 fa96 	bl	8000554 <__aeabi_i2d>
 800a028:	a361      	add	r3, pc, #388	; (adr r3, 800a1b0 <_dtoa_r+0x2c8>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	f7f6 fafb 	bl	8000628 <__aeabi_dmul>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4630      	mov	r0, r6
 800a038:	4639      	mov	r1, r7
 800a03a:	f7f6 f93f 	bl	80002bc <__adddf3>
 800a03e:	4606      	mov	r6, r0
 800a040:	460f      	mov	r7, r1
 800a042:	f7f6 fda1 	bl	8000b88 <__aeabi_d2iz>
 800a046:	2200      	movs	r2, #0
 800a048:	9000      	str	r0, [sp, #0]
 800a04a:	2300      	movs	r3, #0
 800a04c:	4630      	mov	r0, r6
 800a04e:	4639      	mov	r1, r7
 800a050:	f7f6 fd5c 	bl	8000b0c <__aeabi_dcmplt>
 800a054:	b150      	cbz	r0, 800a06c <_dtoa_r+0x184>
 800a056:	9800      	ldr	r0, [sp, #0]
 800a058:	f7f6 fa7c 	bl	8000554 <__aeabi_i2d>
 800a05c:	4632      	mov	r2, r6
 800a05e:	463b      	mov	r3, r7
 800a060:	f7f6 fd4a 	bl	8000af8 <__aeabi_dcmpeq>
 800a064:	b910      	cbnz	r0, 800a06c <_dtoa_r+0x184>
 800a066:	9b00      	ldr	r3, [sp, #0]
 800a068:	3b01      	subs	r3, #1
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	9b00      	ldr	r3, [sp, #0]
 800a06e:	2b16      	cmp	r3, #22
 800a070:	d85a      	bhi.n	800a128 <_dtoa_r+0x240>
 800a072:	9a00      	ldr	r2, [sp, #0]
 800a074:	4b57      	ldr	r3, [pc, #348]	; (800a1d4 <_dtoa_r+0x2ec>)
 800a076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	ec51 0b19 	vmov	r0, r1, d9
 800a082:	f7f6 fd43 	bl	8000b0c <__aeabi_dcmplt>
 800a086:	2800      	cmp	r0, #0
 800a088:	d050      	beq.n	800a12c <_dtoa_r+0x244>
 800a08a:	9b00      	ldr	r3, [sp, #0]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	2300      	movs	r3, #0
 800a092:	930b      	str	r3, [sp, #44]	; 0x2c
 800a094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a096:	1b5d      	subs	r5, r3, r5
 800a098:	1e6b      	subs	r3, r5, #1
 800a09a:	9305      	str	r3, [sp, #20]
 800a09c:	bf45      	ittet	mi
 800a09e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a0a2:	9304      	strmi	r3, [sp, #16]
 800a0a4:	2300      	movpl	r3, #0
 800a0a6:	2300      	movmi	r3, #0
 800a0a8:	bf4c      	ite	mi
 800a0aa:	9305      	strmi	r3, [sp, #20]
 800a0ac:	9304      	strpl	r3, [sp, #16]
 800a0ae:	9b00      	ldr	r3, [sp, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	db3d      	blt.n	800a130 <_dtoa_r+0x248>
 800a0b4:	9b05      	ldr	r3, [sp, #20]
 800a0b6:	9a00      	ldr	r2, [sp, #0]
 800a0b8:	920a      	str	r2, [sp, #40]	; 0x28
 800a0ba:	4413      	add	r3, r2
 800a0bc:	9305      	str	r3, [sp, #20]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9307      	str	r3, [sp, #28]
 800a0c2:	9b06      	ldr	r3, [sp, #24]
 800a0c4:	2b09      	cmp	r3, #9
 800a0c6:	f200 8089 	bhi.w	800a1dc <_dtoa_r+0x2f4>
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	bfc4      	itt	gt
 800a0ce:	3b04      	subgt	r3, #4
 800a0d0:	9306      	strgt	r3, [sp, #24]
 800a0d2:	9b06      	ldr	r3, [sp, #24]
 800a0d4:	f1a3 0302 	sub.w	r3, r3, #2
 800a0d8:	bfcc      	ite	gt
 800a0da:	2500      	movgt	r5, #0
 800a0dc:	2501      	movle	r5, #1
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	f200 8087 	bhi.w	800a1f2 <_dtoa_r+0x30a>
 800a0e4:	e8df f003 	tbb	[pc, r3]
 800a0e8:	59383a2d 	.word	0x59383a2d
 800a0ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0f0:	441d      	add	r5, r3
 800a0f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	bfc1      	itttt	gt
 800a0fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a102:	fa0b f303 	lslgt.w	r3, fp, r3
 800a106:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a10a:	bfda      	itte	le
 800a10c:	f1c3 0320 	rsble	r3, r3, #32
 800a110:	fa06 f003 	lslle.w	r0, r6, r3
 800a114:	4318      	orrgt	r0, r3
 800a116:	f7f6 fa0d 	bl	8000534 <__aeabi_ui2d>
 800a11a:	2301      	movs	r3, #1
 800a11c:	4606      	mov	r6, r0
 800a11e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a122:	3d01      	subs	r5, #1
 800a124:	930e      	str	r3, [sp, #56]	; 0x38
 800a126:	e76a      	b.n	8009ffe <_dtoa_r+0x116>
 800a128:	2301      	movs	r3, #1
 800a12a:	e7b2      	b.n	800a092 <_dtoa_r+0x1aa>
 800a12c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a12e:	e7b1      	b.n	800a094 <_dtoa_r+0x1ac>
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	9a00      	ldr	r2, [sp, #0]
 800a134:	1a9b      	subs	r3, r3, r2
 800a136:	9304      	str	r3, [sp, #16]
 800a138:	4253      	negs	r3, r2
 800a13a:	9307      	str	r3, [sp, #28]
 800a13c:	2300      	movs	r3, #0
 800a13e:	930a      	str	r3, [sp, #40]	; 0x28
 800a140:	e7bf      	b.n	800a0c2 <_dtoa_r+0x1da>
 800a142:	2300      	movs	r3, #0
 800a144:	9308      	str	r3, [sp, #32]
 800a146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a148:	2b00      	cmp	r3, #0
 800a14a:	dc55      	bgt.n	800a1f8 <_dtoa_r+0x310>
 800a14c:	2301      	movs	r3, #1
 800a14e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a152:	461a      	mov	r2, r3
 800a154:	9209      	str	r2, [sp, #36]	; 0x24
 800a156:	e00c      	b.n	800a172 <_dtoa_r+0x28a>
 800a158:	2301      	movs	r3, #1
 800a15a:	e7f3      	b.n	800a144 <_dtoa_r+0x25c>
 800a15c:	2300      	movs	r3, #0
 800a15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a160:	9308      	str	r3, [sp, #32]
 800a162:	9b00      	ldr	r3, [sp, #0]
 800a164:	4413      	add	r3, r2
 800a166:	9302      	str	r3, [sp, #8]
 800a168:	3301      	adds	r3, #1
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	9303      	str	r3, [sp, #12]
 800a16e:	bfb8      	it	lt
 800a170:	2301      	movlt	r3, #1
 800a172:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a174:	2200      	movs	r2, #0
 800a176:	6042      	str	r2, [r0, #4]
 800a178:	2204      	movs	r2, #4
 800a17a:	f102 0614 	add.w	r6, r2, #20
 800a17e:	429e      	cmp	r6, r3
 800a180:	6841      	ldr	r1, [r0, #4]
 800a182:	d93d      	bls.n	800a200 <_dtoa_r+0x318>
 800a184:	4620      	mov	r0, r4
 800a186:	f000 fed7 	bl	800af38 <_Balloc>
 800a18a:	9001      	str	r0, [sp, #4]
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d13b      	bne.n	800a208 <_dtoa_r+0x320>
 800a190:	4b11      	ldr	r3, [pc, #68]	; (800a1d8 <_dtoa_r+0x2f0>)
 800a192:	4602      	mov	r2, r0
 800a194:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a198:	e6c0      	b.n	8009f1c <_dtoa_r+0x34>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e7df      	b.n	800a15e <_dtoa_r+0x276>
 800a19e:	bf00      	nop
 800a1a0:	636f4361 	.word	0x636f4361
 800a1a4:	3fd287a7 	.word	0x3fd287a7
 800a1a8:	8b60c8b3 	.word	0x8b60c8b3
 800a1ac:	3fc68a28 	.word	0x3fc68a28
 800a1b0:	509f79fb 	.word	0x509f79fb
 800a1b4:	3fd34413 	.word	0x3fd34413
 800a1b8:	0800cc49 	.word	0x0800cc49
 800a1bc:	0800cc60 	.word	0x0800cc60
 800a1c0:	7ff00000 	.word	0x7ff00000
 800a1c4:	0800cc45 	.word	0x0800cc45
 800a1c8:	0800cc3c 	.word	0x0800cc3c
 800a1cc:	0800cc19 	.word	0x0800cc19
 800a1d0:	3ff80000 	.word	0x3ff80000
 800a1d4:	0800cdb0 	.word	0x0800cdb0
 800a1d8:	0800ccbb 	.word	0x0800ccbb
 800a1dc:	2501      	movs	r5, #1
 800a1de:	2300      	movs	r3, #0
 800a1e0:	9306      	str	r3, [sp, #24]
 800a1e2:	9508      	str	r5, [sp, #32]
 800a1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2312      	movs	r3, #18
 800a1f0:	e7b0      	b.n	800a154 <_dtoa_r+0x26c>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	9308      	str	r3, [sp, #32]
 800a1f6:	e7f5      	b.n	800a1e4 <_dtoa_r+0x2fc>
 800a1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1fe:	e7b8      	b.n	800a172 <_dtoa_r+0x28a>
 800a200:	3101      	adds	r1, #1
 800a202:	6041      	str	r1, [r0, #4]
 800a204:	0052      	lsls	r2, r2, #1
 800a206:	e7b8      	b.n	800a17a <_dtoa_r+0x292>
 800a208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a20a:	9a01      	ldr	r2, [sp, #4]
 800a20c:	601a      	str	r2, [r3, #0]
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	2b0e      	cmp	r3, #14
 800a212:	f200 809d 	bhi.w	800a350 <_dtoa_r+0x468>
 800a216:	2d00      	cmp	r5, #0
 800a218:	f000 809a 	beq.w	800a350 <_dtoa_r+0x468>
 800a21c:	9b00      	ldr	r3, [sp, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	dd32      	ble.n	800a288 <_dtoa_r+0x3a0>
 800a222:	4ab7      	ldr	r2, [pc, #732]	; (800a500 <_dtoa_r+0x618>)
 800a224:	f003 030f 	and.w	r3, r3, #15
 800a228:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a22c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a230:	9b00      	ldr	r3, [sp, #0]
 800a232:	05d8      	lsls	r0, r3, #23
 800a234:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a238:	d516      	bpl.n	800a268 <_dtoa_r+0x380>
 800a23a:	4bb2      	ldr	r3, [pc, #712]	; (800a504 <_dtoa_r+0x61c>)
 800a23c:	ec51 0b19 	vmov	r0, r1, d9
 800a240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a244:	f7f6 fb1a 	bl	800087c <__aeabi_ddiv>
 800a248:	f007 070f 	and.w	r7, r7, #15
 800a24c:	4682      	mov	sl, r0
 800a24e:	468b      	mov	fp, r1
 800a250:	2503      	movs	r5, #3
 800a252:	4eac      	ldr	r6, [pc, #688]	; (800a504 <_dtoa_r+0x61c>)
 800a254:	b957      	cbnz	r7, 800a26c <_dtoa_r+0x384>
 800a256:	4642      	mov	r2, r8
 800a258:	464b      	mov	r3, r9
 800a25a:	4650      	mov	r0, sl
 800a25c:	4659      	mov	r1, fp
 800a25e:	f7f6 fb0d 	bl	800087c <__aeabi_ddiv>
 800a262:	4682      	mov	sl, r0
 800a264:	468b      	mov	fp, r1
 800a266:	e028      	b.n	800a2ba <_dtoa_r+0x3d2>
 800a268:	2502      	movs	r5, #2
 800a26a:	e7f2      	b.n	800a252 <_dtoa_r+0x36a>
 800a26c:	07f9      	lsls	r1, r7, #31
 800a26e:	d508      	bpl.n	800a282 <_dtoa_r+0x39a>
 800a270:	4640      	mov	r0, r8
 800a272:	4649      	mov	r1, r9
 800a274:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a278:	f7f6 f9d6 	bl	8000628 <__aeabi_dmul>
 800a27c:	3501      	adds	r5, #1
 800a27e:	4680      	mov	r8, r0
 800a280:	4689      	mov	r9, r1
 800a282:	107f      	asrs	r7, r7, #1
 800a284:	3608      	adds	r6, #8
 800a286:	e7e5      	b.n	800a254 <_dtoa_r+0x36c>
 800a288:	f000 809b 	beq.w	800a3c2 <_dtoa_r+0x4da>
 800a28c:	9b00      	ldr	r3, [sp, #0]
 800a28e:	4f9d      	ldr	r7, [pc, #628]	; (800a504 <_dtoa_r+0x61c>)
 800a290:	425e      	negs	r6, r3
 800a292:	4b9b      	ldr	r3, [pc, #620]	; (800a500 <_dtoa_r+0x618>)
 800a294:	f006 020f 	and.w	r2, r6, #15
 800a298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	ec51 0b19 	vmov	r0, r1, d9
 800a2a4:	f7f6 f9c0 	bl	8000628 <__aeabi_dmul>
 800a2a8:	1136      	asrs	r6, r6, #4
 800a2aa:	4682      	mov	sl, r0
 800a2ac:	468b      	mov	fp, r1
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	2502      	movs	r5, #2
 800a2b2:	2e00      	cmp	r6, #0
 800a2b4:	d17a      	bne.n	800a3ac <_dtoa_r+0x4c4>
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1d3      	bne.n	800a262 <_dtoa_r+0x37a>
 800a2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f000 8082 	beq.w	800a3c6 <_dtoa_r+0x4de>
 800a2c2:	4b91      	ldr	r3, [pc, #580]	; (800a508 <_dtoa_r+0x620>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	f7f6 fc1f 	bl	8000b0c <__aeabi_dcmplt>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d079      	beq.n	800a3c6 <_dtoa_r+0x4de>
 800a2d2:	9b03      	ldr	r3, [sp, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d076      	beq.n	800a3c6 <_dtoa_r+0x4de>
 800a2d8:	9b02      	ldr	r3, [sp, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd36      	ble.n	800a34c <_dtoa_r+0x464>
 800a2de:	9b00      	ldr	r3, [sp, #0]
 800a2e0:	4650      	mov	r0, sl
 800a2e2:	4659      	mov	r1, fp
 800a2e4:	1e5f      	subs	r7, r3, #1
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	4b88      	ldr	r3, [pc, #544]	; (800a50c <_dtoa_r+0x624>)
 800a2ea:	f7f6 f99d 	bl	8000628 <__aeabi_dmul>
 800a2ee:	9e02      	ldr	r6, [sp, #8]
 800a2f0:	4682      	mov	sl, r0
 800a2f2:	468b      	mov	fp, r1
 800a2f4:	3501      	adds	r5, #1
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f7f6 f92c 	bl	8000554 <__aeabi_i2d>
 800a2fc:	4652      	mov	r2, sl
 800a2fe:	465b      	mov	r3, fp
 800a300:	f7f6 f992 	bl	8000628 <__aeabi_dmul>
 800a304:	4b82      	ldr	r3, [pc, #520]	; (800a510 <_dtoa_r+0x628>)
 800a306:	2200      	movs	r2, #0
 800a308:	f7f5 ffd8 	bl	80002bc <__adddf3>
 800a30c:	46d0      	mov	r8, sl
 800a30e:	46d9      	mov	r9, fp
 800a310:	4682      	mov	sl, r0
 800a312:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a316:	2e00      	cmp	r6, #0
 800a318:	d158      	bne.n	800a3cc <_dtoa_r+0x4e4>
 800a31a:	4b7e      	ldr	r3, [pc, #504]	; (800a514 <_dtoa_r+0x62c>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	4640      	mov	r0, r8
 800a320:	4649      	mov	r1, r9
 800a322:	f7f5 ffc9 	bl	80002b8 <__aeabi_dsub>
 800a326:	4652      	mov	r2, sl
 800a328:	465b      	mov	r3, fp
 800a32a:	4680      	mov	r8, r0
 800a32c:	4689      	mov	r9, r1
 800a32e:	f7f6 fc0b 	bl	8000b48 <__aeabi_dcmpgt>
 800a332:	2800      	cmp	r0, #0
 800a334:	f040 8295 	bne.w	800a862 <_dtoa_r+0x97a>
 800a338:	4652      	mov	r2, sl
 800a33a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a33e:	4640      	mov	r0, r8
 800a340:	4649      	mov	r1, r9
 800a342:	f7f6 fbe3 	bl	8000b0c <__aeabi_dcmplt>
 800a346:	2800      	cmp	r0, #0
 800a348:	f040 8289 	bne.w	800a85e <_dtoa_r+0x976>
 800a34c:	ec5b ab19 	vmov	sl, fp, d9
 800a350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a352:	2b00      	cmp	r3, #0
 800a354:	f2c0 8148 	blt.w	800a5e8 <_dtoa_r+0x700>
 800a358:	9a00      	ldr	r2, [sp, #0]
 800a35a:	2a0e      	cmp	r2, #14
 800a35c:	f300 8144 	bgt.w	800a5e8 <_dtoa_r+0x700>
 800a360:	4b67      	ldr	r3, [pc, #412]	; (800a500 <_dtoa_r+0x618>)
 800a362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a366:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f280 80d5 	bge.w	800a51c <_dtoa_r+0x634>
 800a372:	9b03      	ldr	r3, [sp, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	f300 80d1 	bgt.w	800a51c <_dtoa_r+0x634>
 800a37a:	f040 826f 	bne.w	800a85c <_dtoa_r+0x974>
 800a37e:	4b65      	ldr	r3, [pc, #404]	; (800a514 <_dtoa_r+0x62c>)
 800a380:	2200      	movs	r2, #0
 800a382:	4640      	mov	r0, r8
 800a384:	4649      	mov	r1, r9
 800a386:	f7f6 f94f 	bl	8000628 <__aeabi_dmul>
 800a38a:	4652      	mov	r2, sl
 800a38c:	465b      	mov	r3, fp
 800a38e:	f7f6 fbd1 	bl	8000b34 <__aeabi_dcmpge>
 800a392:	9e03      	ldr	r6, [sp, #12]
 800a394:	4637      	mov	r7, r6
 800a396:	2800      	cmp	r0, #0
 800a398:	f040 8245 	bne.w	800a826 <_dtoa_r+0x93e>
 800a39c:	9d01      	ldr	r5, [sp, #4]
 800a39e:	2331      	movs	r3, #49	; 0x31
 800a3a0:	f805 3b01 	strb.w	r3, [r5], #1
 800a3a4:	9b00      	ldr	r3, [sp, #0]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	e240      	b.n	800a82e <_dtoa_r+0x946>
 800a3ac:	07f2      	lsls	r2, r6, #31
 800a3ae:	d505      	bpl.n	800a3bc <_dtoa_r+0x4d4>
 800a3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b4:	f7f6 f938 	bl	8000628 <__aeabi_dmul>
 800a3b8:	3501      	adds	r5, #1
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	1076      	asrs	r6, r6, #1
 800a3be:	3708      	adds	r7, #8
 800a3c0:	e777      	b.n	800a2b2 <_dtoa_r+0x3ca>
 800a3c2:	2502      	movs	r5, #2
 800a3c4:	e779      	b.n	800a2ba <_dtoa_r+0x3d2>
 800a3c6:	9f00      	ldr	r7, [sp, #0]
 800a3c8:	9e03      	ldr	r6, [sp, #12]
 800a3ca:	e794      	b.n	800a2f6 <_dtoa_r+0x40e>
 800a3cc:	9901      	ldr	r1, [sp, #4]
 800a3ce:	4b4c      	ldr	r3, [pc, #304]	; (800a500 <_dtoa_r+0x618>)
 800a3d0:	4431      	add	r1, r6
 800a3d2:	910d      	str	r1, [sp, #52]	; 0x34
 800a3d4:	9908      	ldr	r1, [sp, #32]
 800a3d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	d043      	beq.n	800a46a <_dtoa_r+0x582>
 800a3e2:	494d      	ldr	r1, [pc, #308]	; (800a518 <_dtoa_r+0x630>)
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	f7f6 fa49 	bl	800087c <__aeabi_ddiv>
 800a3ea:	4652      	mov	r2, sl
 800a3ec:	465b      	mov	r3, fp
 800a3ee:	f7f5 ff63 	bl	80002b8 <__aeabi_dsub>
 800a3f2:	9d01      	ldr	r5, [sp, #4]
 800a3f4:	4682      	mov	sl, r0
 800a3f6:	468b      	mov	fp, r1
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	4640      	mov	r0, r8
 800a3fc:	f7f6 fbc4 	bl	8000b88 <__aeabi_d2iz>
 800a400:	4606      	mov	r6, r0
 800a402:	f7f6 f8a7 	bl	8000554 <__aeabi_i2d>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4640      	mov	r0, r8
 800a40c:	4649      	mov	r1, r9
 800a40e:	f7f5 ff53 	bl	80002b8 <__aeabi_dsub>
 800a412:	3630      	adds	r6, #48	; 0x30
 800a414:	f805 6b01 	strb.w	r6, [r5], #1
 800a418:	4652      	mov	r2, sl
 800a41a:	465b      	mov	r3, fp
 800a41c:	4680      	mov	r8, r0
 800a41e:	4689      	mov	r9, r1
 800a420:	f7f6 fb74 	bl	8000b0c <__aeabi_dcmplt>
 800a424:	2800      	cmp	r0, #0
 800a426:	d163      	bne.n	800a4f0 <_dtoa_r+0x608>
 800a428:	4642      	mov	r2, r8
 800a42a:	464b      	mov	r3, r9
 800a42c:	4936      	ldr	r1, [pc, #216]	; (800a508 <_dtoa_r+0x620>)
 800a42e:	2000      	movs	r0, #0
 800a430:	f7f5 ff42 	bl	80002b8 <__aeabi_dsub>
 800a434:	4652      	mov	r2, sl
 800a436:	465b      	mov	r3, fp
 800a438:	f7f6 fb68 	bl	8000b0c <__aeabi_dcmplt>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	f040 80b5 	bne.w	800a5ac <_dtoa_r+0x6c4>
 800a442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a444:	429d      	cmp	r5, r3
 800a446:	d081      	beq.n	800a34c <_dtoa_r+0x464>
 800a448:	4b30      	ldr	r3, [pc, #192]	; (800a50c <_dtoa_r+0x624>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	4650      	mov	r0, sl
 800a44e:	4659      	mov	r1, fp
 800a450:	f7f6 f8ea 	bl	8000628 <__aeabi_dmul>
 800a454:	4b2d      	ldr	r3, [pc, #180]	; (800a50c <_dtoa_r+0x624>)
 800a456:	4682      	mov	sl, r0
 800a458:	468b      	mov	fp, r1
 800a45a:	4640      	mov	r0, r8
 800a45c:	4649      	mov	r1, r9
 800a45e:	2200      	movs	r2, #0
 800a460:	f7f6 f8e2 	bl	8000628 <__aeabi_dmul>
 800a464:	4680      	mov	r8, r0
 800a466:	4689      	mov	r9, r1
 800a468:	e7c6      	b.n	800a3f8 <_dtoa_r+0x510>
 800a46a:	4650      	mov	r0, sl
 800a46c:	4659      	mov	r1, fp
 800a46e:	f7f6 f8db 	bl	8000628 <__aeabi_dmul>
 800a472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a474:	9d01      	ldr	r5, [sp, #4]
 800a476:	930f      	str	r3, [sp, #60]	; 0x3c
 800a478:	4682      	mov	sl, r0
 800a47a:	468b      	mov	fp, r1
 800a47c:	4649      	mov	r1, r9
 800a47e:	4640      	mov	r0, r8
 800a480:	f7f6 fb82 	bl	8000b88 <__aeabi_d2iz>
 800a484:	4606      	mov	r6, r0
 800a486:	f7f6 f865 	bl	8000554 <__aeabi_i2d>
 800a48a:	3630      	adds	r6, #48	; 0x30
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4640      	mov	r0, r8
 800a492:	4649      	mov	r1, r9
 800a494:	f7f5 ff10 	bl	80002b8 <__aeabi_dsub>
 800a498:	f805 6b01 	strb.w	r6, [r5], #1
 800a49c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a49e:	429d      	cmp	r5, r3
 800a4a0:	4680      	mov	r8, r0
 800a4a2:	4689      	mov	r9, r1
 800a4a4:	f04f 0200 	mov.w	r2, #0
 800a4a8:	d124      	bne.n	800a4f4 <_dtoa_r+0x60c>
 800a4aa:	4b1b      	ldr	r3, [pc, #108]	; (800a518 <_dtoa_r+0x630>)
 800a4ac:	4650      	mov	r0, sl
 800a4ae:	4659      	mov	r1, fp
 800a4b0:	f7f5 ff04 	bl	80002bc <__adddf3>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f6 fb44 	bl	8000b48 <__aeabi_dcmpgt>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d173      	bne.n	800a5ac <_dtoa_r+0x6c4>
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	465b      	mov	r3, fp
 800a4c8:	4913      	ldr	r1, [pc, #76]	; (800a518 <_dtoa_r+0x630>)
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	f7f5 fef4 	bl	80002b8 <__aeabi_dsub>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	4649      	mov	r1, r9
 800a4d8:	f7f6 fb18 	bl	8000b0c <__aeabi_dcmplt>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	f43f af35 	beq.w	800a34c <_dtoa_r+0x464>
 800a4e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4e4:	1e6b      	subs	r3, r5, #1
 800a4e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4ec:	2b30      	cmp	r3, #48	; 0x30
 800a4ee:	d0f8      	beq.n	800a4e2 <_dtoa_r+0x5fa>
 800a4f0:	9700      	str	r7, [sp, #0]
 800a4f2:	e049      	b.n	800a588 <_dtoa_r+0x6a0>
 800a4f4:	4b05      	ldr	r3, [pc, #20]	; (800a50c <_dtoa_r+0x624>)
 800a4f6:	f7f6 f897 	bl	8000628 <__aeabi_dmul>
 800a4fa:	4680      	mov	r8, r0
 800a4fc:	4689      	mov	r9, r1
 800a4fe:	e7bd      	b.n	800a47c <_dtoa_r+0x594>
 800a500:	0800cdb0 	.word	0x0800cdb0
 800a504:	0800cd88 	.word	0x0800cd88
 800a508:	3ff00000 	.word	0x3ff00000
 800a50c:	40240000 	.word	0x40240000
 800a510:	401c0000 	.word	0x401c0000
 800a514:	40140000 	.word	0x40140000
 800a518:	3fe00000 	.word	0x3fe00000
 800a51c:	9d01      	ldr	r5, [sp, #4]
 800a51e:	4656      	mov	r6, sl
 800a520:	465f      	mov	r7, fp
 800a522:	4642      	mov	r2, r8
 800a524:	464b      	mov	r3, r9
 800a526:	4630      	mov	r0, r6
 800a528:	4639      	mov	r1, r7
 800a52a:	f7f6 f9a7 	bl	800087c <__aeabi_ddiv>
 800a52e:	f7f6 fb2b 	bl	8000b88 <__aeabi_d2iz>
 800a532:	4682      	mov	sl, r0
 800a534:	f7f6 f80e 	bl	8000554 <__aeabi_i2d>
 800a538:	4642      	mov	r2, r8
 800a53a:	464b      	mov	r3, r9
 800a53c:	f7f6 f874 	bl	8000628 <__aeabi_dmul>
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	4630      	mov	r0, r6
 800a546:	4639      	mov	r1, r7
 800a548:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a54c:	f7f5 feb4 	bl	80002b8 <__aeabi_dsub>
 800a550:	f805 6b01 	strb.w	r6, [r5], #1
 800a554:	9e01      	ldr	r6, [sp, #4]
 800a556:	9f03      	ldr	r7, [sp, #12]
 800a558:	1bae      	subs	r6, r5, r6
 800a55a:	42b7      	cmp	r7, r6
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	d135      	bne.n	800a5ce <_dtoa_r+0x6e6>
 800a562:	f7f5 feab 	bl	80002bc <__adddf3>
 800a566:	4642      	mov	r2, r8
 800a568:	464b      	mov	r3, r9
 800a56a:	4606      	mov	r6, r0
 800a56c:	460f      	mov	r7, r1
 800a56e:	f7f6 faeb 	bl	8000b48 <__aeabi_dcmpgt>
 800a572:	b9d0      	cbnz	r0, 800a5aa <_dtoa_r+0x6c2>
 800a574:	4642      	mov	r2, r8
 800a576:	464b      	mov	r3, r9
 800a578:	4630      	mov	r0, r6
 800a57a:	4639      	mov	r1, r7
 800a57c:	f7f6 fabc 	bl	8000af8 <__aeabi_dcmpeq>
 800a580:	b110      	cbz	r0, 800a588 <_dtoa_r+0x6a0>
 800a582:	f01a 0f01 	tst.w	sl, #1
 800a586:	d110      	bne.n	800a5aa <_dtoa_r+0x6c2>
 800a588:	4620      	mov	r0, r4
 800a58a:	ee18 1a10 	vmov	r1, s16
 800a58e:	f000 fd13 	bl	800afb8 <_Bfree>
 800a592:	2300      	movs	r3, #0
 800a594:	9800      	ldr	r0, [sp, #0]
 800a596:	702b      	strb	r3, [r5, #0]
 800a598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a59a:	3001      	adds	r0, #1
 800a59c:	6018      	str	r0, [r3, #0]
 800a59e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f43f acf1 	beq.w	8009f88 <_dtoa_r+0xa0>
 800a5a6:	601d      	str	r5, [r3, #0]
 800a5a8:	e4ee      	b.n	8009f88 <_dtoa_r+0xa0>
 800a5aa:	9f00      	ldr	r7, [sp, #0]
 800a5ac:	462b      	mov	r3, r5
 800a5ae:	461d      	mov	r5, r3
 800a5b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5b4:	2a39      	cmp	r2, #57	; 0x39
 800a5b6:	d106      	bne.n	800a5c6 <_dtoa_r+0x6de>
 800a5b8:	9a01      	ldr	r2, [sp, #4]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d1f7      	bne.n	800a5ae <_dtoa_r+0x6c6>
 800a5be:	9901      	ldr	r1, [sp, #4]
 800a5c0:	2230      	movs	r2, #48	; 0x30
 800a5c2:	3701      	adds	r7, #1
 800a5c4:	700a      	strb	r2, [r1, #0]
 800a5c6:	781a      	ldrb	r2, [r3, #0]
 800a5c8:	3201      	adds	r2, #1
 800a5ca:	701a      	strb	r2, [r3, #0]
 800a5cc:	e790      	b.n	800a4f0 <_dtoa_r+0x608>
 800a5ce:	4ba6      	ldr	r3, [pc, #664]	; (800a868 <_dtoa_r+0x980>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f7f6 f829 	bl	8000628 <__aeabi_dmul>
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4606      	mov	r6, r0
 800a5dc:	460f      	mov	r7, r1
 800a5de:	f7f6 fa8b 	bl	8000af8 <__aeabi_dcmpeq>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d09d      	beq.n	800a522 <_dtoa_r+0x63a>
 800a5e6:	e7cf      	b.n	800a588 <_dtoa_r+0x6a0>
 800a5e8:	9a08      	ldr	r2, [sp, #32]
 800a5ea:	2a00      	cmp	r2, #0
 800a5ec:	f000 80d7 	beq.w	800a79e <_dtoa_r+0x8b6>
 800a5f0:	9a06      	ldr	r2, [sp, #24]
 800a5f2:	2a01      	cmp	r2, #1
 800a5f4:	f300 80ba 	bgt.w	800a76c <_dtoa_r+0x884>
 800a5f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5fa:	2a00      	cmp	r2, #0
 800a5fc:	f000 80b2 	beq.w	800a764 <_dtoa_r+0x87c>
 800a600:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a604:	9e07      	ldr	r6, [sp, #28]
 800a606:	9d04      	ldr	r5, [sp, #16]
 800a608:	9a04      	ldr	r2, [sp, #16]
 800a60a:	441a      	add	r2, r3
 800a60c:	9204      	str	r2, [sp, #16]
 800a60e:	9a05      	ldr	r2, [sp, #20]
 800a610:	2101      	movs	r1, #1
 800a612:	441a      	add	r2, r3
 800a614:	4620      	mov	r0, r4
 800a616:	9205      	str	r2, [sp, #20]
 800a618:	f000 fd86 	bl	800b128 <__i2b>
 800a61c:	4607      	mov	r7, r0
 800a61e:	2d00      	cmp	r5, #0
 800a620:	dd0c      	ble.n	800a63c <_dtoa_r+0x754>
 800a622:	9b05      	ldr	r3, [sp, #20]
 800a624:	2b00      	cmp	r3, #0
 800a626:	dd09      	ble.n	800a63c <_dtoa_r+0x754>
 800a628:	42ab      	cmp	r3, r5
 800a62a:	9a04      	ldr	r2, [sp, #16]
 800a62c:	bfa8      	it	ge
 800a62e:	462b      	movge	r3, r5
 800a630:	1ad2      	subs	r2, r2, r3
 800a632:	9204      	str	r2, [sp, #16]
 800a634:	9a05      	ldr	r2, [sp, #20]
 800a636:	1aed      	subs	r5, r5, r3
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	9305      	str	r3, [sp, #20]
 800a63c:	9b07      	ldr	r3, [sp, #28]
 800a63e:	b31b      	cbz	r3, 800a688 <_dtoa_r+0x7a0>
 800a640:	9b08      	ldr	r3, [sp, #32]
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 80af 	beq.w	800a7a6 <_dtoa_r+0x8be>
 800a648:	2e00      	cmp	r6, #0
 800a64a:	dd13      	ble.n	800a674 <_dtoa_r+0x78c>
 800a64c:	4639      	mov	r1, r7
 800a64e:	4632      	mov	r2, r6
 800a650:	4620      	mov	r0, r4
 800a652:	f000 fe29 	bl	800b2a8 <__pow5mult>
 800a656:	ee18 2a10 	vmov	r2, s16
 800a65a:	4601      	mov	r1, r0
 800a65c:	4607      	mov	r7, r0
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fd78 	bl	800b154 <__multiply>
 800a664:	ee18 1a10 	vmov	r1, s16
 800a668:	4680      	mov	r8, r0
 800a66a:	4620      	mov	r0, r4
 800a66c:	f000 fca4 	bl	800afb8 <_Bfree>
 800a670:	ee08 8a10 	vmov	s16, r8
 800a674:	9b07      	ldr	r3, [sp, #28]
 800a676:	1b9a      	subs	r2, r3, r6
 800a678:	d006      	beq.n	800a688 <_dtoa_r+0x7a0>
 800a67a:	ee18 1a10 	vmov	r1, s16
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 fe12 	bl	800b2a8 <__pow5mult>
 800a684:	ee08 0a10 	vmov	s16, r0
 800a688:	2101      	movs	r1, #1
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 fd4c 	bl	800b128 <__i2b>
 800a690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a692:	2b00      	cmp	r3, #0
 800a694:	4606      	mov	r6, r0
 800a696:	f340 8088 	ble.w	800a7aa <_dtoa_r+0x8c2>
 800a69a:	461a      	mov	r2, r3
 800a69c:	4601      	mov	r1, r0
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 fe02 	bl	800b2a8 <__pow5mult>
 800a6a4:	9b06      	ldr	r3, [sp, #24]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	f340 8081 	ble.w	800a7b0 <_dtoa_r+0x8c8>
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	6933      	ldr	r3, [r6, #16]
 800a6b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6b8:	6918      	ldr	r0, [r3, #16]
 800a6ba:	f000 fce5 	bl	800b088 <__hi0bits>
 800a6be:	f1c0 0020 	rsb	r0, r0, #32
 800a6c2:	9b05      	ldr	r3, [sp, #20]
 800a6c4:	4418      	add	r0, r3
 800a6c6:	f010 001f 	ands.w	r0, r0, #31
 800a6ca:	f000 8092 	beq.w	800a7f2 <_dtoa_r+0x90a>
 800a6ce:	f1c0 0320 	rsb	r3, r0, #32
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	f340 808a 	ble.w	800a7ec <_dtoa_r+0x904>
 800a6d8:	f1c0 001c 	rsb	r0, r0, #28
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	4403      	add	r3, r0
 800a6e0:	9304      	str	r3, [sp, #16]
 800a6e2:	9b05      	ldr	r3, [sp, #20]
 800a6e4:	4403      	add	r3, r0
 800a6e6:	4405      	add	r5, r0
 800a6e8:	9305      	str	r3, [sp, #20]
 800a6ea:	9b04      	ldr	r3, [sp, #16]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	dd07      	ble.n	800a700 <_dtoa_r+0x818>
 800a6f0:	ee18 1a10 	vmov	r1, s16
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f000 fe30 	bl	800b35c <__lshift>
 800a6fc:	ee08 0a10 	vmov	s16, r0
 800a700:	9b05      	ldr	r3, [sp, #20]
 800a702:	2b00      	cmp	r3, #0
 800a704:	dd05      	ble.n	800a712 <_dtoa_r+0x82a>
 800a706:	4631      	mov	r1, r6
 800a708:	461a      	mov	r2, r3
 800a70a:	4620      	mov	r0, r4
 800a70c:	f000 fe26 	bl	800b35c <__lshift>
 800a710:	4606      	mov	r6, r0
 800a712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a714:	2b00      	cmp	r3, #0
 800a716:	d06e      	beq.n	800a7f6 <_dtoa_r+0x90e>
 800a718:	ee18 0a10 	vmov	r0, s16
 800a71c:	4631      	mov	r1, r6
 800a71e:	f000 fe8d 	bl	800b43c <__mcmp>
 800a722:	2800      	cmp	r0, #0
 800a724:	da67      	bge.n	800a7f6 <_dtoa_r+0x90e>
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	3b01      	subs	r3, #1
 800a72a:	ee18 1a10 	vmov	r1, s16
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	220a      	movs	r2, #10
 800a732:	2300      	movs	r3, #0
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fc61 	bl	800affc <__multadd>
 800a73a:	9b08      	ldr	r3, [sp, #32]
 800a73c:	ee08 0a10 	vmov	s16, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 81b1 	beq.w	800aaa8 <_dtoa_r+0xbc0>
 800a746:	2300      	movs	r3, #0
 800a748:	4639      	mov	r1, r7
 800a74a:	220a      	movs	r2, #10
 800a74c:	4620      	mov	r0, r4
 800a74e:	f000 fc55 	bl	800affc <__multadd>
 800a752:	9b02      	ldr	r3, [sp, #8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	4607      	mov	r7, r0
 800a758:	f300 808e 	bgt.w	800a878 <_dtoa_r+0x990>
 800a75c:	9b06      	ldr	r3, [sp, #24]
 800a75e:	2b02      	cmp	r3, #2
 800a760:	dc51      	bgt.n	800a806 <_dtoa_r+0x91e>
 800a762:	e089      	b.n	800a878 <_dtoa_r+0x990>
 800a764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a76a:	e74b      	b.n	800a604 <_dtoa_r+0x71c>
 800a76c:	9b03      	ldr	r3, [sp, #12]
 800a76e:	1e5e      	subs	r6, r3, #1
 800a770:	9b07      	ldr	r3, [sp, #28]
 800a772:	42b3      	cmp	r3, r6
 800a774:	bfbf      	itttt	lt
 800a776:	9b07      	ldrlt	r3, [sp, #28]
 800a778:	9607      	strlt	r6, [sp, #28]
 800a77a:	1af2      	sublt	r2, r6, r3
 800a77c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a77e:	bfb6      	itet	lt
 800a780:	189b      	addlt	r3, r3, r2
 800a782:	1b9e      	subge	r6, r3, r6
 800a784:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a786:	9b03      	ldr	r3, [sp, #12]
 800a788:	bfb8      	it	lt
 800a78a:	2600      	movlt	r6, #0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bfb7      	itett	lt
 800a790:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a794:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a798:	1a9d      	sublt	r5, r3, r2
 800a79a:	2300      	movlt	r3, #0
 800a79c:	e734      	b.n	800a608 <_dtoa_r+0x720>
 800a79e:	9e07      	ldr	r6, [sp, #28]
 800a7a0:	9d04      	ldr	r5, [sp, #16]
 800a7a2:	9f08      	ldr	r7, [sp, #32]
 800a7a4:	e73b      	b.n	800a61e <_dtoa_r+0x736>
 800a7a6:	9a07      	ldr	r2, [sp, #28]
 800a7a8:	e767      	b.n	800a67a <_dtoa_r+0x792>
 800a7aa:	9b06      	ldr	r3, [sp, #24]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	dc18      	bgt.n	800a7e2 <_dtoa_r+0x8fa>
 800a7b0:	f1ba 0f00 	cmp.w	sl, #0
 800a7b4:	d115      	bne.n	800a7e2 <_dtoa_r+0x8fa>
 800a7b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7ba:	b993      	cbnz	r3, 800a7e2 <_dtoa_r+0x8fa>
 800a7bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7c0:	0d1b      	lsrs	r3, r3, #20
 800a7c2:	051b      	lsls	r3, r3, #20
 800a7c4:	b183      	cbz	r3, 800a7e8 <_dtoa_r+0x900>
 800a7c6:	9b04      	ldr	r3, [sp, #16]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	9b05      	ldr	r3, [sp, #20]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	9305      	str	r3, [sp, #20]
 800a7d2:	f04f 0801 	mov.w	r8, #1
 800a7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f47f af6a 	bne.w	800a6b2 <_dtoa_r+0x7ca>
 800a7de:	2001      	movs	r0, #1
 800a7e0:	e76f      	b.n	800a6c2 <_dtoa_r+0x7da>
 800a7e2:	f04f 0800 	mov.w	r8, #0
 800a7e6:	e7f6      	b.n	800a7d6 <_dtoa_r+0x8ee>
 800a7e8:	4698      	mov	r8, r3
 800a7ea:	e7f4      	b.n	800a7d6 <_dtoa_r+0x8ee>
 800a7ec:	f43f af7d 	beq.w	800a6ea <_dtoa_r+0x802>
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	301c      	adds	r0, #28
 800a7f4:	e772      	b.n	800a6dc <_dtoa_r+0x7f4>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dc37      	bgt.n	800a86c <_dtoa_r+0x984>
 800a7fc:	9b06      	ldr	r3, [sp, #24]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	dd34      	ble.n	800a86c <_dtoa_r+0x984>
 800a802:	9b03      	ldr	r3, [sp, #12]
 800a804:	9302      	str	r3, [sp, #8]
 800a806:	9b02      	ldr	r3, [sp, #8]
 800a808:	b96b      	cbnz	r3, 800a826 <_dtoa_r+0x93e>
 800a80a:	4631      	mov	r1, r6
 800a80c:	2205      	movs	r2, #5
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 fbf4 	bl	800affc <__multadd>
 800a814:	4601      	mov	r1, r0
 800a816:	4606      	mov	r6, r0
 800a818:	ee18 0a10 	vmov	r0, s16
 800a81c:	f000 fe0e 	bl	800b43c <__mcmp>
 800a820:	2800      	cmp	r0, #0
 800a822:	f73f adbb 	bgt.w	800a39c <_dtoa_r+0x4b4>
 800a826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a828:	9d01      	ldr	r5, [sp, #4]
 800a82a:	43db      	mvns	r3, r3
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	f04f 0800 	mov.w	r8, #0
 800a832:	4631      	mov	r1, r6
 800a834:	4620      	mov	r0, r4
 800a836:	f000 fbbf 	bl	800afb8 <_Bfree>
 800a83a:	2f00      	cmp	r7, #0
 800a83c:	f43f aea4 	beq.w	800a588 <_dtoa_r+0x6a0>
 800a840:	f1b8 0f00 	cmp.w	r8, #0
 800a844:	d005      	beq.n	800a852 <_dtoa_r+0x96a>
 800a846:	45b8      	cmp	r8, r7
 800a848:	d003      	beq.n	800a852 <_dtoa_r+0x96a>
 800a84a:	4641      	mov	r1, r8
 800a84c:	4620      	mov	r0, r4
 800a84e:	f000 fbb3 	bl	800afb8 <_Bfree>
 800a852:	4639      	mov	r1, r7
 800a854:	4620      	mov	r0, r4
 800a856:	f000 fbaf 	bl	800afb8 <_Bfree>
 800a85a:	e695      	b.n	800a588 <_dtoa_r+0x6a0>
 800a85c:	2600      	movs	r6, #0
 800a85e:	4637      	mov	r7, r6
 800a860:	e7e1      	b.n	800a826 <_dtoa_r+0x93e>
 800a862:	9700      	str	r7, [sp, #0]
 800a864:	4637      	mov	r7, r6
 800a866:	e599      	b.n	800a39c <_dtoa_r+0x4b4>
 800a868:	40240000 	.word	0x40240000
 800a86c:	9b08      	ldr	r3, [sp, #32]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 80ca 	beq.w	800aa08 <_dtoa_r+0xb20>
 800a874:	9b03      	ldr	r3, [sp, #12]
 800a876:	9302      	str	r3, [sp, #8]
 800a878:	2d00      	cmp	r5, #0
 800a87a:	dd05      	ble.n	800a888 <_dtoa_r+0x9a0>
 800a87c:	4639      	mov	r1, r7
 800a87e:	462a      	mov	r2, r5
 800a880:	4620      	mov	r0, r4
 800a882:	f000 fd6b 	bl	800b35c <__lshift>
 800a886:	4607      	mov	r7, r0
 800a888:	f1b8 0f00 	cmp.w	r8, #0
 800a88c:	d05b      	beq.n	800a946 <_dtoa_r+0xa5e>
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	4620      	mov	r0, r4
 800a892:	f000 fb51 	bl	800af38 <_Balloc>
 800a896:	4605      	mov	r5, r0
 800a898:	b928      	cbnz	r0, 800a8a6 <_dtoa_r+0x9be>
 800a89a:	4b87      	ldr	r3, [pc, #540]	; (800aab8 <_dtoa_r+0xbd0>)
 800a89c:	4602      	mov	r2, r0
 800a89e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8a2:	f7ff bb3b 	b.w	8009f1c <_dtoa_r+0x34>
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	3202      	adds	r2, #2
 800a8aa:	0092      	lsls	r2, r2, #2
 800a8ac:	f107 010c 	add.w	r1, r7, #12
 800a8b0:	300c      	adds	r0, #12
 800a8b2:	f000 fb33 	bl	800af1c <memcpy>
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 fd4e 	bl	800b35c <__lshift>
 800a8c0:	9b01      	ldr	r3, [sp, #4]
 800a8c2:	f103 0901 	add.w	r9, r3, #1
 800a8c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	9305      	str	r3, [sp, #20]
 800a8ce:	f00a 0301 	and.w	r3, sl, #1
 800a8d2:	46b8      	mov	r8, r7
 800a8d4:	9304      	str	r3, [sp, #16]
 800a8d6:	4607      	mov	r7, r0
 800a8d8:	4631      	mov	r1, r6
 800a8da:	ee18 0a10 	vmov	r0, s16
 800a8de:	f7ff fa77 	bl	8009dd0 <quorem>
 800a8e2:	4641      	mov	r1, r8
 800a8e4:	9002      	str	r0, [sp, #8]
 800a8e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a8ea:	ee18 0a10 	vmov	r0, s16
 800a8ee:	f000 fda5 	bl	800b43c <__mcmp>
 800a8f2:	463a      	mov	r2, r7
 800a8f4:	9003      	str	r0, [sp, #12]
 800a8f6:	4631      	mov	r1, r6
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 fdbb 	bl	800b474 <__mdiff>
 800a8fe:	68c2      	ldr	r2, [r0, #12]
 800a900:	f109 3bff 	add.w	fp, r9, #4294967295
 800a904:	4605      	mov	r5, r0
 800a906:	bb02      	cbnz	r2, 800a94a <_dtoa_r+0xa62>
 800a908:	4601      	mov	r1, r0
 800a90a:	ee18 0a10 	vmov	r0, s16
 800a90e:	f000 fd95 	bl	800b43c <__mcmp>
 800a912:	4602      	mov	r2, r0
 800a914:	4629      	mov	r1, r5
 800a916:	4620      	mov	r0, r4
 800a918:	9207      	str	r2, [sp, #28]
 800a91a:	f000 fb4d 	bl	800afb8 <_Bfree>
 800a91e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a922:	ea43 0102 	orr.w	r1, r3, r2
 800a926:	9b04      	ldr	r3, [sp, #16]
 800a928:	430b      	orrs	r3, r1
 800a92a:	464d      	mov	r5, r9
 800a92c:	d10f      	bne.n	800a94e <_dtoa_r+0xa66>
 800a92e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a932:	d02a      	beq.n	800a98a <_dtoa_r+0xaa2>
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	dd02      	ble.n	800a940 <_dtoa_r+0xa58>
 800a93a:	9b02      	ldr	r3, [sp, #8]
 800a93c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a940:	f88b a000 	strb.w	sl, [fp]
 800a944:	e775      	b.n	800a832 <_dtoa_r+0x94a>
 800a946:	4638      	mov	r0, r7
 800a948:	e7ba      	b.n	800a8c0 <_dtoa_r+0x9d8>
 800a94a:	2201      	movs	r2, #1
 800a94c:	e7e2      	b.n	800a914 <_dtoa_r+0xa2c>
 800a94e:	9b03      	ldr	r3, [sp, #12]
 800a950:	2b00      	cmp	r3, #0
 800a952:	db04      	blt.n	800a95e <_dtoa_r+0xa76>
 800a954:	9906      	ldr	r1, [sp, #24]
 800a956:	430b      	orrs	r3, r1
 800a958:	9904      	ldr	r1, [sp, #16]
 800a95a:	430b      	orrs	r3, r1
 800a95c:	d122      	bne.n	800a9a4 <_dtoa_r+0xabc>
 800a95e:	2a00      	cmp	r2, #0
 800a960:	ddee      	ble.n	800a940 <_dtoa_r+0xa58>
 800a962:	ee18 1a10 	vmov	r1, s16
 800a966:	2201      	movs	r2, #1
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fcf7 	bl	800b35c <__lshift>
 800a96e:	4631      	mov	r1, r6
 800a970:	ee08 0a10 	vmov	s16, r0
 800a974:	f000 fd62 	bl	800b43c <__mcmp>
 800a978:	2800      	cmp	r0, #0
 800a97a:	dc03      	bgt.n	800a984 <_dtoa_r+0xa9c>
 800a97c:	d1e0      	bne.n	800a940 <_dtoa_r+0xa58>
 800a97e:	f01a 0f01 	tst.w	sl, #1
 800a982:	d0dd      	beq.n	800a940 <_dtoa_r+0xa58>
 800a984:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a988:	d1d7      	bne.n	800a93a <_dtoa_r+0xa52>
 800a98a:	2339      	movs	r3, #57	; 0x39
 800a98c:	f88b 3000 	strb.w	r3, [fp]
 800a990:	462b      	mov	r3, r5
 800a992:	461d      	mov	r5, r3
 800a994:	3b01      	subs	r3, #1
 800a996:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a99a:	2a39      	cmp	r2, #57	; 0x39
 800a99c:	d071      	beq.n	800aa82 <_dtoa_r+0xb9a>
 800a99e:	3201      	adds	r2, #1
 800a9a0:	701a      	strb	r2, [r3, #0]
 800a9a2:	e746      	b.n	800a832 <_dtoa_r+0x94a>
 800a9a4:	2a00      	cmp	r2, #0
 800a9a6:	dd07      	ble.n	800a9b8 <_dtoa_r+0xad0>
 800a9a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9ac:	d0ed      	beq.n	800a98a <_dtoa_r+0xaa2>
 800a9ae:	f10a 0301 	add.w	r3, sl, #1
 800a9b2:	f88b 3000 	strb.w	r3, [fp]
 800a9b6:	e73c      	b.n	800a832 <_dtoa_r+0x94a>
 800a9b8:	9b05      	ldr	r3, [sp, #20]
 800a9ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a9be:	4599      	cmp	r9, r3
 800a9c0:	d047      	beq.n	800aa52 <_dtoa_r+0xb6a>
 800a9c2:	ee18 1a10 	vmov	r1, s16
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	220a      	movs	r2, #10
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f000 fb16 	bl	800affc <__multadd>
 800a9d0:	45b8      	cmp	r8, r7
 800a9d2:	ee08 0a10 	vmov	s16, r0
 800a9d6:	f04f 0300 	mov.w	r3, #0
 800a9da:	f04f 020a 	mov.w	r2, #10
 800a9de:	4641      	mov	r1, r8
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	d106      	bne.n	800a9f2 <_dtoa_r+0xb0a>
 800a9e4:	f000 fb0a 	bl	800affc <__multadd>
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	4607      	mov	r7, r0
 800a9ec:	f109 0901 	add.w	r9, r9, #1
 800a9f0:	e772      	b.n	800a8d8 <_dtoa_r+0x9f0>
 800a9f2:	f000 fb03 	bl	800affc <__multadd>
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	4680      	mov	r8, r0
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	220a      	movs	r2, #10
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 fafc 	bl	800affc <__multadd>
 800aa04:	4607      	mov	r7, r0
 800aa06:	e7f1      	b.n	800a9ec <_dtoa_r+0xb04>
 800aa08:	9b03      	ldr	r3, [sp, #12]
 800aa0a:	9302      	str	r3, [sp, #8]
 800aa0c:	9d01      	ldr	r5, [sp, #4]
 800aa0e:	ee18 0a10 	vmov	r0, s16
 800aa12:	4631      	mov	r1, r6
 800aa14:	f7ff f9dc 	bl	8009dd0 <quorem>
 800aa18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa1c:	9b01      	ldr	r3, [sp, #4]
 800aa1e:	f805 ab01 	strb.w	sl, [r5], #1
 800aa22:	1aea      	subs	r2, r5, r3
 800aa24:	9b02      	ldr	r3, [sp, #8]
 800aa26:	4293      	cmp	r3, r2
 800aa28:	dd09      	ble.n	800aa3e <_dtoa_r+0xb56>
 800aa2a:	ee18 1a10 	vmov	r1, s16
 800aa2e:	2300      	movs	r3, #0
 800aa30:	220a      	movs	r2, #10
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 fae2 	bl	800affc <__multadd>
 800aa38:	ee08 0a10 	vmov	s16, r0
 800aa3c:	e7e7      	b.n	800aa0e <_dtoa_r+0xb26>
 800aa3e:	9b02      	ldr	r3, [sp, #8]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	bfc8      	it	gt
 800aa44:	461d      	movgt	r5, r3
 800aa46:	9b01      	ldr	r3, [sp, #4]
 800aa48:	bfd8      	it	le
 800aa4a:	2501      	movle	r5, #1
 800aa4c:	441d      	add	r5, r3
 800aa4e:	f04f 0800 	mov.w	r8, #0
 800aa52:	ee18 1a10 	vmov	r1, s16
 800aa56:	2201      	movs	r2, #1
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f000 fc7f 	bl	800b35c <__lshift>
 800aa5e:	4631      	mov	r1, r6
 800aa60:	ee08 0a10 	vmov	s16, r0
 800aa64:	f000 fcea 	bl	800b43c <__mcmp>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	dc91      	bgt.n	800a990 <_dtoa_r+0xaa8>
 800aa6c:	d102      	bne.n	800aa74 <_dtoa_r+0xb8c>
 800aa6e:	f01a 0f01 	tst.w	sl, #1
 800aa72:	d18d      	bne.n	800a990 <_dtoa_r+0xaa8>
 800aa74:	462b      	mov	r3, r5
 800aa76:	461d      	mov	r5, r3
 800aa78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa7c:	2a30      	cmp	r2, #48	; 0x30
 800aa7e:	d0fa      	beq.n	800aa76 <_dtoa_r+0xb8e>
 800aa80:	e6d7      	b.n	800a832 <_dtoa_r+0x94a>
 800aa82:	9a01      	ldr	r2, [sp, #4]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d184      	bne.n	800a992 <_dtoa_r+0xaaa>
 800aa88:	9b00      	ldr	r3, [sp, #0]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	2331      	movs	r3, #49	; 0x31
 800aa90:	7013      	strb	r3, [r2, #0]
 800aa92:	e6ce      	b.n	800a832 <_dtoa_r+0x94a>
 800aa94:	4b09      	ldr	r3, [pc, #36]	; (800aabc <_dtoa_r+0xbd4>)
 800aa96:	f7ff ba95 	b.w	8009fc4 <_dtoa_r+0xdc>
 800aa9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f47f aa6e 	bne.w	8009f7e <_dtoa_r+0x96>
 800aaa2:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <_dtoa_r+0xbd8>)
 800aaa4:	f7ff ba8e 	b.w	8009fc4 <_dtoa_r+0xdc>
 800aaa8:	9b02      	ldr	r3, [sp, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	dcae      	bgt.n	800aa0c <_dtoa_r+0xb24>
 800aaae:	9b06      	ldr	r3, [sp, #24]
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	f73f aea8 	bgt.w	800a806 <_dtoa_r+0x91e>
 800aab6:	e7a9      	b.n	800aa0c <_dtoa_r+0xb24>
 800aab8:	0800ccbb 	.word	0x0800ccbb
 800aabc:	0800cc18 	.word	0x0800cc18
 800aac0:	0800cc3c 	.word	0x0800cc3c

0800aac4 <__sflush_r>:
 800aac4:	898a      	ldrh	r2, [r1, #12]
 800aac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaca:	4605      	mov	r5, r0
 800aacc:	0710      	lsls	r0, r2, #28
 800aace:	460c      	mov	r4, r1
 800aad0:	d458      	bmi.n	800ab84 <__sflush_r+0xc0>
 800aad2:	684b      	ldr	r3, [r1, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dc05      	bgt.n	800aae4 <__sflush_r+0x20>
 800aad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aada:	2b00      	cmp	r3, #0
 800aadc:	dc02      	bgt.n	800aae4 <__sflush_r+0x20>
 800aade:	2000      	movs	r0, #0
 800aae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aae6:	2e00      	cmp	r6, #0
 800aae8:	d0f9      	beq.n	800aade <__sflush_r+0x1a>
 800aaea:	2300      	movs	r3, #0
 800aaec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aaf0:	682f      	ldr	r7, [r5, #0]
 800aaf2:	602b      	str	r3, [r5, #0]
 800aaf4:	d032      	beq.n	800ab5c <__sflush_r+0x98>
 800aaf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aaf8:	89a3      	ldrh	r3, [r4, #12]
 800aafa:	075a      	lsls	r2, r3, #29
 800aafc:	d505      	bpl.n	800ab0a <__sflush_r+0x46>
 800aafe:	6863      	ldr	r3, [r4, #4]
 800ab00:	1ac0      	subs	r0, r0, r3
 800ab02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab04:	b10b      	cbz	r3, 800ab0a <__sflush_r+0x46>
 800ab06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab08:	1ac0      	subs	r0, r0, r3
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab10:	6a21      	ldr	r1, [r4, #32]
 800ab12:	4628      	mov	r0, r5
 800ab14:	47b0      	blx	r6
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	d106      	bne.n	800ab2a <__sflush_r+0x66>
 800ab1c:	6829      	ldr	r1, [r5, #0]
 800ab1e:	291d      	cmp	r1, #29
 800ab20:	d82c      	bhi.n	800ab7c <__sflush_r+0xb8>
 800ab22:	4a2a      	ldr	r2, [pc, #168]	; (800abcc <__sflush_r+0x108>)
 800ab24:	40ca      	lsrs	r2, r1
 800ab26:	07d6      	lsls	r6, r2, #31
 800ab28:	d528      	bpl.n	800ab7c <__sflush_r+0xb8>
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	6062      	str	r2, [r4, #4]
 800ab2e:	04d9      	lsls	r1, r3, #19
 800ab30:	6922      	ldr	r2, [r4, #16]
 800ab32:	6022      	str	r2, [r4, #0]
 800ab34:	d504      	bpl.n	800ab40 <__sflush_r+0x7c>
 800ab36:	1c42      	adds	r2, r0, #1
 800ab38:	d101      	bne.n	800ab3e <__sflush_r+0x7a>
 800ab3a:	682b      	ldr	r3, [r5, #0]
 800ab3c:	b903      	cbnz	r3, 800ab40 <__sflush_r+0x7c>
 800ab3e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab42:	602f      	str	r7, [r5, #0]
 800ab44:	2900      	cmp	r1, #0
 800ab46:	d0ca      	beq.n	800aade <__sflush_r+0x1a>
 800ab48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab4c:	4299      	cmp	r1, r3
 800ab4e:	d002      	beq.n	800ab56 <__sflush_r+0x92>
 800ab50:	4628      	mov	r0, r5
 800ab52:	f000 fd8b 	bl	800b66c <_free_r>
 800ab56:	2000      	movs	r0, #0
 800ab58:	6360      	str	r0, [r4, #52]	; 0x34
 800ab5a:	e7c1      	b.n	800aae0 <__sflush_r+0x1c>
 800ab5c:	6a21      	ldr	r1, [r4, #32]
 800ab5e:	2301      	movs	r3, #1
 800ab60:	4628      	mov	r0, r5
 800ab62:	47b0      	blx	r6
 800ab64:	1c41      	adds	r1, r0, #1
 800ab66:	d1c7      	bne.n	800aaf8 <__sflush_r+0x34>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d0c4      	beq.n	800aaf8 <__sflush_r+0x34>
 800ab6e:	2b1d      	cmp	r3, #29
 800ab70:	d001      	beq.n	800ab76 <__sflush_r+0xb2>
 800ab72:	2b16      	cmp	r3, #22
 800ab74:	d101      	bne.n	800ab7a <__sflush_r+0xb6>
 800ab76:	602f      	str	r7, [r5, #0]
 800ab78:	e7b1      	b.n	800aade <__sflush_r+0x1a>
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	e7ad      	b.n	800aae0 <__sflush_r+0x1c>
 800ab84:	690f      	ldr	r7, [r1, #16]
 800ab86:	2f00      	cmp	r7, #0
 800ab88:	d0a9      	beq.n	800aade <__sflush_r+0x1a>
 800ab8a:	0793      	lsls	r3, r2, #30
 800ab8c:	680e      	ldr	r6, [r1, #0]
 800ab8e:	bf08      	it	eq
 800ab90:	694b      	ldreq	r3, [r1, #20]
 800ab92:	600f      	str	r7, [r1, #0]
 800ab94:	bf18      	it	ne
 800ab96:	2300      	movne	r3, #0
 800ab98:	eba6 0807 	sub.w	r8, r6, r7
 800ab9c:	608b      	str	r3, [r1, #8]
 800ab9e:	f1b8 0f00 	cmp.w	r8, #0
 800aba2:	dd9c      	ble.n	800aade <__sflush_r+0x1a>
 800aba4:	6a21      	ldr	r1, [r4, #32]
 800aba6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aba8:	4643      	mov	r3, r8
 800abaa:	463a      	mov	r2, r7
 800abac:	4628      	mov	r0, r5
 800abae:	47b0      	blx	r6
 800abb0:	2800      	cmp	r0, #0
 800abb2:	dc06      	bgt.n	800abc2 <__sflush_r+0xfe>
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abba:	81a3      	strh	r3, [r4, #12]
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295
 800abc0:	e78e      	b.n	800aae0 <__sflush_r+0x1c>
 800abc2:	4407      	add	r7, r0
 800abc4:	eba8 0800 	sub.w	r8, r8, r0
 800abc8:	e7e9      	b.n	800ab9e <__sflush_r+0xda>
 800abca:	bf00      	nop
 800abcc:	20400001 	.word	0x20400001

0800abd0 <_fflush_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	690b      	ldr	r3, [r1, #16]
 800abd4:	4605      	mov	r5, r0
 800abd6:	460c      	mov	r4, r1
 800abd8:	b913      	cbnz	r3, 800abe0 <_fflush_r+0x10>
 800abda:	2500      	movs	r5, #0
 800abdc:	4628      	mov	r0, r5
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	b118      	cbz	r0, 800abea <_fflush_r+0x1a>
 800abe2:	6983      	ldr	r3, [r0, #24]
 800abe4:	b90b      	cbnz	r3, 800abea <_fflush_r+0x1a>
 800abe6:	f000 f887 	bl	800acf8 <__sinit>
 800abea:	4b14      	ldr	r3, [pc, #80]	; (800ac3c <_fflush_r+0x6c>)
 800abec:	429c      	cmp	r4, r3
 800abee:	d11b      	bne.n	800ac28 <_fflush_r+0x58>
 800abf0:	686c      	ldr	r4, [r5, #4]
 800abf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0ef      	beq.n	800abda <_fflush_r+0xa>
 800abfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abfc:	07d0      	lsls	r0, r2, #31
 800abfe:	d404      	bmi.n	800ac0a <_fflush_r+0x3a>
 800ac00:	0599      	lsls	r1, r3, #22
 800ac02:	d402      	bmi.n	800ac0a <_fflush_r+0x3a>
 800ac04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac06:	f000 f91a 	bl	800ae3e <__retarget_lock_acquire_recursive>
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	f7ff ff59 	bl	800aac4 <__sflush_r>
 800ac12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac14:	07da      	lsls	r2, r3, #31
 800ac16:	4605      	mov	r5, r0
 800ac18:	d4e0      	bmi.n	800abdc <_fflush_r+0xc>
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	059b      	lsls	r3, r3, #22
 800ac1e:	d4dd      	bmi.n	800abdc <_fflush_r+0xc>
 800ac20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac22:	f000 f90d 	bl	800ae40 <__retarget_lock_release_recursive>
 800ac26:	e7d9      	b.n	800abdc <_fflush_r+0xc>
 800ac28:	4b05      	ldr	r3, [pc, #20]	; (800ac40 <_fflush_r+0x70>)
 800ac2a:	429c      	cmp	r4, r3
 800ac2c:	d101      	bne.n	800ac32 <_fflush_r+0x62>
 800ac2e:	68ac      	ldr	r4, [r5, #8]
 800ac30:	e7df      	b.n	800abf2 <_fflush_r+0x22>
 800ac32:	4b04      	ldr	r3, [pc, #16]	; (800ac44 <_fflush_r+0x74>)
 800ac34:	429c      	cmp	r4, r3
 800ac36:	bf08      	it	eq
 800ac38:	68ec      	ldreq	r4, [r5, #12]
 800ac3a:	e7da      	b.n	800abf2 <_fflush_r+0x22>
 800ac3c:	0800ccec 	.word	0x0800ccec
 800ac40:	0800cd0c 	.word	0x0800cd0c
 800ac44:	0800cccc 	.word	0x0800cccc

0800ac48 <std>:
 800ac48:	2300      	movs	r3, #0
 800ac4a:	b510      	push	{r4, lr}
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ac52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac56:	6083      	str	r3, [r0, #8]
 800ac58:	8181      	strh	r1, [r0, #12]
 800ac5a:	6643      	str	r3, [r0, #100]	; 0x64
 800ac5c:	81c2      	strh	r2, [r0, #14]
 800ac5e:	6183      	str	r3, [r0, #24]
 800ac60:	4619      	mov	r1, r3
 800ac62:	2208      	movs	r2, #8
 800ac64:	305c      	adds	r0, #92	; 0x5c
 800ac66:	f7fe faf3 	bl	8009250 <memset>
 800ac6a:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <std+0x38>)
 800ac6c:	6263      	str	r3, [r4, #36]	; 0x24
 800ac6e:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <std+0x3c>)
 800ac70:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac72:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <std+0x40>)
 800ac74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac76:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <std+0x44>)
 800ac78:	6224      	str	r4, [r4, #32]
 800ac7a:	6323      	str	r3, [r4, #48]	; 0x30
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	bf00      	nop
 800ac80:	0800bb01 	.word	0x0800bb01
 800ac84:	0800bb23 	.word	0x0800bb23
 800ac88:	0800bb5b 	.word	0x0800bb5b
 800ac8c:	0800bb7f 	.word	0x0800bb7f

0800ac90 <_cleanup_r>:
 800ac90:	4901      	ldr	r1, [pc, #4]	; (800ac98 <_cleanup_r+0x8>)
 800ac92:	f000 b8af 	b.w	800adf4 <_fwalk_reent>
 800ac96:	bf00      	nop
 800ac98:	0800abd1 	.word	0x0800abd1

0800ac9c <__sfmoreglue>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	2268      	movs	r2, #104	; 0x68
 800aca0:	1e4d      	subs	r5, r1, #1
 800aca2:	4355      	muls	r5, r2
 800aca4:	460e      	mov	r6, r1
 800aca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acaa:	f000 fd4b 	bl	800b744 <_malloc_r>
 800acae:	4604      	mov	r4, r0
 800acb0:	b140      	cbz	r0, 800acc4 <__sfmoreglue+0x28>
 800acb2:	2100      	movs	r1, #0
 800acb4:	e9c0 1600 	strd	r1, r6, [r0]
 800acb8:	300c      	adds	r0, #12
 800acba:	60a0      	str	r0, [r4, #8]
 800acbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acc0:	f7fe fac6 	bl	8009250 <memset>
 800acc4:	4620      	mov	r0, r4
 800acc6:	bd70      	pop	{r4, r5, r6, pc}

0800acc8 <__sfp_lock_acquire>:
 800acc8:	4801      	ldr	r0, [pc, #4]	; (800acd0 <__sfp_lock_acquire+0x8>)
 800acca:	f000 b8b8 	b.w	800ae3e <__retarget_lock_acquire_recursive>
 800acce:	bf00      	nop
 800acd0:	20000ccd 	.word	0x20000ccd

0800acd4 <__sfp_lock_release>:
 800acd4:	4801      	ldr	r0, [pc, #4]	; (800acdc <__sfp_lock_release+0x8>)
 800acd6:	f000 b8b3 	b.w	800ae40 <__retarget_lock_release_recursive>
 800acda:	bf00      	nop
 800acdc:	20000ccd 	.word	0x20000ccd

0800ace0 <__sinit_lock_acquire>:
 800ace0:	4801      	ldr	r0, [pc, #4]	; (800ace8 <__sinit_lock_acquire+0x8>)
 800ace2:	f000 b8ac 	b.w	800ae3e <__retarget_lock_acquire_recursive>
 800ace6:	bf00      	nop
 800ace8:	20000cce 	.word	0x20000cce

0800acec <__sinit_lock_release>:
 800acec:	4801      	ldr	r0, [pc, #4]	; (800acf4 <__sinit_lock_release+0x8>)
 800acee:	f000 b8a7 	b.w	800ae40 <__retarget_lock_release_recursive>
 800acf2:	bf00      	nop
 800acf4:	20000cce 	.word	0x20000cce

0800acf8 <__sinit>:
 800acf8:	b510      	push	{r4, lr}
 800acfa:	4604      	mov	r4, r0
 800acfc:	f7ff fff0 	bl	800ace0 <__sinit_lock_acquire>
 800ad00:	69a3      	ldr	r3, [r4, #24]
 800ad02:	b11b      	cbz	r3, 800ad0c <__sinit+0x14>
 800ad04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad08:	f7ff bff0 	b.w	800acec <__sinit_lock_release>
 800ad0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad10:	6523      	str	r3, [r4, #80]	; 0x50
 800ad12:	4b13      	ldr	r3, [pc, #76]	; (800ad60 <__sinit+0x68>)
 800ad14:	4a13      	ldr	r2, [pc, #76]	; (800ad64 <__sinit+0x6c>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad1a:	42a3      	cmp	r3, r4
 800ad1c:	bf04      	itt	eq
 800ad1e:	2301      	moveq	r3, #1
 800ad20:	61a3      	streq	r3, [r4, #24]
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 f820 	bl	800ad68 <__sfp>
 800ad28:	6060      	str	r0, [r4, #4]
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 f81c 	bl	800ad68 <__sfp>
 800ad30:	60a0      	str	r0, [r4, #8]
 800ad32:	4620      	mov	r0, r4
 800ad34:	f000 f818 	bl	800ad68 <__sfp>
 800ad38:	2200      	movs	r2, #0
 800ad3a:	60e0      	str	r0, [r4, #12]
 800ad3c:	2104      	movs	r1, #4
 800ad3e:	6860      	ldr	r0, [r4, #4]
 800ad40:	f7ff ff82 	bl	800ac48 <std>
 800ad44:	68a0      	ldr	r0, [r4, #8]
 800ad46:	2201      	movs	r2, #1
 800ad48:	2109      	movs	r1, #9
 800ad4a:	f7ff ff7d 	bl	800ac48 <std>
 800ad4e:	68e0      	ldr	r0, [r4, #12]
 800ad50:	2202      	movs	r2, #2
 800ad52:	2112      	movs	r1, #18
 800ad54:	f7ff ff78 	bl	800ac48 <std>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	61a3      	str	r3, [r4, #24]
 800ad5c:	e7d2      	b.n	800ad04 <__sinit+0xc>
 800ad5e:	bf00      	nop
 800ad60:	0800cc04 	.word	0x0800cc04
 800ad64:	0800ac91 	.word	0x0800ac91

0800ad68 <__sfp>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	4607      	mov	r7, r0
 800ad6c:	f7ff ffac 	bl	800acc8 <__sfp_lock_acquire>
 800ad70:	4b1e      	ldr	r3, [pc, #120]	; (800adec <__sfp+0x84>)
 800ad72:	681e      	ldr	r6, [r3, #0]
 800ad74:	69b3      	ldr	r3, [r6, #24]
 800ad76:	b913      	cbnz	r3, 800ad7e <__sfp+0x16>
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7ff ffbd 	bl	800acf8 <__sinit>
 800ad7e:	3648      	adds	r6, #72	; 0x48
 800ad80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	d503      	bpl.n	800ad90 <__sfp+0x28>
 800ad88:	6833      	ldr	r3, [r6, #0]
 800ad8a:	b30b      	cbz	r3, 800add0 <__sfp+0x68>
 800ad8c:	6836      	ldr	r6, [r6, #0]
 800ad8e:	e7f7      	b.n	800ad80 <__sfp+0x18>
 800ad90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad94:	b9d5      	cbnz	r5, 800adcc <__sfp+0x64>
 800ad96:	4b16      	ldr	r3, [pc, #88]	; (800adf0 <__sfp+0x88>)
 800ad98:	60e3      	str	r3, [r4, #12]
 800ad9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad9e:	6665      	str	r5, [r4, #100]	; 0x64
 800ada0:	f000 f84c 	bl	800ae3c <__retarget_lock_init_recursive>
 800ada4:	f7ff ff96 	bl	800acd4 <__sfp_lock_release>
 800ada8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adb0:	6025      	str	r5, [r4, #0]
 800adb2:	61a5      	str	r5, [r4, #24]
 800adb4:	2208      	movs	r2, #8
 800adb6:	4629      	mov	r1, r5
 800adb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adbc:	f7fe fa48 	bl	8009250 <memset>
 800adc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800adc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800adc8:	4620      	mov	r0, r4
 800adca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adcc:	3468      	adds	r4, #104	; 0x68
 800adce:	e7d9      	b.n	800ad84 <__sfp+0x1c>
 800add0:	2104      	movs	r1, #4
 800add2:	4638      	mov	r0, r7
 800add4:	f7ff ff62 	bl	800ac9c <__sfmoreglue>
 800add8:	4604      	mov	r4, r0
 800adda:	6030      	str	r0, [r6, #0]
 800addc:	2800      	cmp	r0, #0
 800adde:	d1d5      	bne.n	800ad8c <__sfp+0x24>
 800ade0:	f7ff ff78 	bl	800acd4 <__sfp_lock_release>
 800ade4:	230c      	movs	r3, #12
 800ade6:	603b      	str	r3, [r7, #0]
 800ade8:	e7ee      	b.n	800adc8 <__sfp+0x60>
 800adea:	bf00      	nop
 800adec:	0800cc04 	.word	0x0800cc04
 800adf0:	ffff0001 	.word	0xffff0001

0800adf4 <_fwalk_reent>:
 800adf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf8:	4606      	mov	r6, r0
 800adfa:	4688      	mov	r8, r1
 800adfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae00:	2700      	movs	r7, #0
 800ae02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae06:	f1b9 0901 	subs.w	r9, r9, #1
 800ae0a:	d505      	bpl.n	800ae18 <_fwalk_reent+0x24>
 800ae0c:	6824      	ldr	r4, [r4, #0]
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	d1f7      	bne.n	800ae02 <_fwalk_reent+0xe>
 800ae12:	4638      	mov	r0, r7
 800ae14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae18:	89ab      	ldrh	r3, [r5, #12]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d907      	bls.n	800ae2e <_fwalk_reent+0x3a>
 800ae1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae22:	3301      	adds	r3, #1
 800ae24:	d003      	beq.n	800ae2e <_fwalk_reent+0x3a>
 800ae26:	4629      	mov	r1, r5
 800ae28:	4630      	mov	r0, r6
 800ae2a:	47c0      	blx	r8
 800ae2c:	4307      	orrs	r7, r0
 800ae2e:	3568      	adds	r5, #104	; 0x68
 800ae30:	e7e9      	b.n	800ae06 <_fwalk_reent+0x12>
	...

0800ae34 <_localeconv_r>:
 800ae34:	4800      	ldr	r0, [pc, #0]	; (800ae38 <_localeconv_r+0x4>)
 800ae36:	4770      	bx	lr
 800ae38:	20000178 	.word	0x20000178

0800ae3c <__retarget_lock_init_recursive>:
 800ae3c:	4770      	bx	lr

0800ae3e <__retarget_lock_acquire_recursive>:
 800ae3e:	4770      	bx	lr

0800ae40 <__retarget_lock_release_recursive>:
 800ae40:	4770      	bx	lr

0800ae42 <__swhatbuf_r>:
 800ae42:	b570      	push	{r4, r5, r6, lr}
 800ae44:	460e      	mov	r6, r1
 800ae46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae4a:	2900      	cmp	r1, #0
 800ae4c:	b096      	sub	sp, #88	; 0x58
 800ae4e:	4614      	mov	r4, r2
 800ae50:	461d      	mov	r5, r3
 800ae52:	da08      	bge.n	800ae66 <__swhatbuf_r+0x24>
 800ae54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	602a      	str	r2, [r5, #0]
 800ae5c:	061a      	lsls	r2, r3, #24
 800ae5e:	d410      	bmi.n	800ae82 <__swhatbuf_r+0x40>
 800ae60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae64:	e00e      	b.n	800ae84 <__swhatbuf_r+0x42>
 800ae66:	466a      	mov	r2, sp
 800ae68:	f000 fee0 	bl	800bc2c <_fstat_r>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	dbf1      	blt.n	800ae54 <__swhatbuf_r+0x12>
 800ae70:	9a01      	ldr	r2, [sp, #4]
 800ae72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae7a:	425a      	negs	r2, r3
 800ae7c:	415a      	adcs	r2, r3
 800ae7e:	602a      	str	r2, [r5, #0]
 800ae80:	e7ee      	b.n	800ae60 <__swhatbuf_r+0x1e>
 800ae82:	2340      	movs	r3, #64	; 0x40
 800ae84:	2000      	movs	r0, #0
 800ae86:	6023      	str	r3, [r4, #0]
 800ae88:	b016      	add	sp, #88	; 0x58
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}

0800ae8c <__smakebuf_r>:
 800ae8c:	898b      	ldrh	r3, [r1, #12]
 800ae8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae90:	079d      	lsls	r5, r3, #30
 800ae92:	4606      	mov	r6, r0
 800ae94:	460c      	mov	r4, r1
 800ae96:	d507      	bpl.n	800aea8 <__smakebuf_r+0x1c>
 800ae98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	6123      	str	r3, [r4, #16]
 800aea0:	2301      	movs	r3, #1
 800aea2:	6163      	str	r3, [r4, #20]
 800aea4:	b002      	add	sp, #8
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	ab01      	add	r3, sp, #4
 800aeaa:	466a      	mov	r2, sp
 800aeac:	f7ff ffc9 	bl	800ae42 <__swhatbuf_r>
 800aeb0:	9900      	ldr	r1, [sp, #0]
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f000 fc45 	bl	800b744 <_malloc_r>
 800aeba:	b948      	cbnz	r0, 800aed0 <__smakebuf_r+0x44>
 800aebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec0:	059a      	lsls	r2, r3, #22
 800aec2:	d4ef      	bmi.n	800aea4 <__smakebuf_r+0x18>
 800aec4:	f023 0303 	bic.w	r3, r3, #3
 800aec8:	f043 0302 	orr.w	r3, r3, #2
 800aecc:	81a3      	strh	r3, [r4, #12]
 800aece:	e7e3      	b.n	800ae98 <__smakebuf_r+0xc>
 800aed0:	4b0d      	ldr	r3, [pc, #52]	; (800af08 <__smakebuf_r+0x7c>)
 800aed2:	62b3      	str	r3, [r6, #40]	; 0x28
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	6020      	str	r0, [r4, #0]
 800aed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aedc:	81a3      	strh	r3, [r4, #12]
 800aede:	9b00      	ldr	r3, [sp, #0]
 800aee0:	6163      	str	r3, [r4, #20]
 800aee2:	9b01      	ldr	r3, [sp, #4]
 800aee4:	6120      	str	r0, [r4, #16]
 800aee6:	b15b      	cbz	r3, 800af00 <__smakebuf_r+0x74>
 800aee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeec:	4630      	mov	r0, r6
 800aeee:	f000 feaf 	bl	800bc50 <_isatty_r>
 800aef2:	b128      	cbz	r0, 800af00 <__smakebuf_r+0x74>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	f023 0303 	bic.w	r3, r3, #3
 800aefa:	f043 0301 	orr.w	r3, r3, #1
 800aefe:	81a3      	strh	r3, [r4, #12]
 800af00:	89a0      	ldrh	r0, [r4, #12]
 800af02:	4305      	orrs	r5, r0
 800af04:	81a5      	strh	r5, [r4, #12]
 800af06:	e7cd      	b.n	800aea4 <__smakebuf_r+0x18>
 800af08:	0800ac91 	.word	0x0800ac91

0800af0c <malloc>:
 800af0c:	4b02      	ldr	r3, [pc, #8]	; (800af18 <malloc+0xc>)
 800af0e:	4601      	mov	r1, r0
 800af10:	6818      	ldr	r0, [r3, #0]
 800af12:	f000 bc17 	b.w	800b744 <_malloc_r>
 800af16:	bf00      	nop
 800af18:	20000024 	.word	0x20000024

0800af1c <memcpy>:
 800af1c:	440a      	add	r2, r1
 800af1e:	4291      	cmp	r1, r2
 800af20:	f100 33ff 	add.w	r3, r0, #4294967295
 800af24:	d100      	bne.n	800af28 <memcpy+0xc>
 800af26:	4770      	bx	lr
 800af28:	b510      	push	{r4, lr}
 800af2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af32:	4291      	cmp	r1, r2
 800af34:	d1f9      	bne.n	800af2a <memcpy+0xe>
 800af36:	bd10      	pop	{r4, pc}

0800af38 <_Balloc>:
 800af38:	b570      	push	{r4, r5, r6, lr}
 800af3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af3c:	4604      	mov	r4, r0
 800af3e:	460d      	mov	r5, r1
 800af40:	b976      	cbnz	r6, 800af60 <_Balloc+0x28>
 800af42:	2010      	movs	r0, #16
 800af44:	f7ff ffe2 	bl	800af0c <malloc>
 800af48:	4602      	mov	r2, r0
 800af4a:	6260      	str	r0, [r4, #36]	; 0x24
 800af4c:	b920      	cbnz	r0, 800af58 <_Balloc+0x20>
 800af4e:	4b18      	ldr	r3, [pc, #96]	; (800afb0 <_Balloc+0x78>)
 800af50:	4818      	ldr	r0, [pc, #96]	; (800afb4 <_Balloc+0x7c>)
 800af52:	2166      	movs	r1, #102	; 0x66
 800af54:	f000 fe2a 	bl	800bbac <__assert_func>
 800af58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af5c:	6006      	str	r6, [r0, #0]
 800af5e:	60c6      	str	r6, [r0, #12]
 800af60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af62:	68f3      	ldr	r3, [r6, #12]
 800af64:	b183      	cbz	r3, 800af88 <_Balloc+0x50>
 800af66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af6e:	b9b8      	cbnz	r0, 800afa0 <_Balloc+0x68>
 800af70:	2101      	movs	r1, #1
 800af72:	fa01 f605 	lsl.w	r6, r1, r5
 800af76:	1d72      	adds	r2, r6, #5
 800af78:	0092      	lsls	r2, r2, #2
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 fb60 	bl	800b640 <_calloc_r>
 800af80:	b160      	cbz	r0, 800af9c <_Balloc+0x64>
 800af82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af86:	e00e      	b.n	800afa6 <_Balloc+0x6e>
 800af88:	2221      	movs	r2, #33	; 0x21
 800af8a:	2104      	movs	r1, #4
 800af8c:	4620      	mov	r0, r4
 800af8e:	f000 fb57 	bl	800b640 <_calloc_r>
 800af92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af94:	60f0      	str	r0, [r6, #12]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1e4      	bne.n	800af66 <_Balloc+0x2e>
 800af9c:	2000      	movs	r0, #0
 800af9e:	bd70      	pop	{r4, r5, r6, pc}
 800afa0:	6802      	ldr	r2, [r0, #0]
 800afa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afa6:	2300      	movs	r3, #0
 800afa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afac:	e7f7      	b.n	800af9e <_Balloc+0x66>
 800afae:	bf00      	nop
 800afb0:	0800cc49 	.word	0x0800cc49
 800afb4:	0800cd2c 	.word	0x0800cd2c

0800afb8 <_Bfree>:
 800afb8:	b570      	push	{r4, r5, r6, lr}
 800afba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afbc:	4605      	mov	r5, r0
 800afbe:	460c      	mov	r4, r1
 800afc0:	b976      	cbnz	r6, 800afe0 <_Bfree+0x28>
 800afc2:	2010      	movs	r0, #16
 800afc4:	f7ff ffa2 	bl	800af0c <malloc>
 800afc8:	4602      	mov	r2, r0
 800afca:	6268      	str	r0, [r5, #36]	; 0x24
 800afcc:	b920      	cbnz	r0, 800afd8 <_Bfree+0x20>
 800afce:	4b09      	ldr	r3, [pc, #36]	; (800aff4 <_Bfree+0x3c>)
 800afd0:	4809      	ldr	r0, [pc, #36]	; (800aff8 <_Bfree+0x40>)
 800afd2:	218a      	movs	r1, #138	; 0x8a
 800afd4:	f000 fdea 	bl	800bbac <__assert_func>
 800afd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afdc:	6006      	str	r6, [r0, #0]
 800afde:	60c6      	str	r6, [r0, #12]
 800afe0:	b13c      	cbz	r4, 800aff2 <_Bfree+0x3a>
 800afe2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afe4:	6862      	ldr	r2, [r4, #4]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afec:	6021      	str	r1, [r4, #0]
 800afee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aff2:	bd70      	pop	{r4, r5, r6, pc}
 800aff4:	0800cc49 	.word	0x0800cc49
 800aff8:	0800cd2c 	.word	0x0800cd2c

0800affc <__multadd>:
 800affc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b000:	690d      	ldr	r5, [r1, #16]
 800b002:	4607      	mov	r7, r0
 800b004:	460c      	mov	r4, r1
 800b006:	461e      	mov	r6, r3
 800b008:	f101 0c14 	add.w	ip, r1, #20
 800b00c:	2000      	movs	r0, #0
 800b00e:	f8dc 3000 	ldr.w	r3, [ip]
 800b012:	b299      	uxth	r1, r3
 800b014:	fb02 6101 	mla	r1, r2, r1, r6
 800b018:	0c1e      	lsrs	r6, r3, #16
 800b01a:	0c0b      	lsrs	r3, r1, #16
 800b01c:	fb02 3306 	mla	r3, r2, r6, r3
 800b020:	b289      	uxth	r1, r1
 800b022:	3001      	adds	r0, #1
 800b024:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b028:	4285      	cmp	r5, r0
 800b02a:	f84c 1b04 	str.w	r1, [ip], #4
 800b02e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b032:	dcec      	bgt.n	800b00e <__multadd+0x12>
 800b034:	b30e      	cbz	r6, 800b07a <__multadd+0x7e>
 800b036:	68a3      	ldr	r3, [r4, #8]
 800b038:	42ab      	cmp	r3, r5
 800b03a:	dc19      	bgt.n	800b070 <__multadd+0x74>
 800b03c:	6861      	ldr	r1, [r4, #4]
 800b03e:	4638      	mov	r0, r7
 800b040:	3101      	adds	r1, #1
 800b042:	f7ff ff79 	bl	800af38 <_Balloc>
 800b046:	4680      	mov	r8, r0
 800b048:	b928      	cbnz	r0, 800b056 <__multadd+0x5a>
 800b04a:	4602      	mov	r2, r0
 800b04c:	4b0c      	ldr	r3, [pc, #48]	; (800b080 <__multadd+0x84>)
 800b04e:	480d      	ldr	r0, [pc, #52]	; (800b084 <__multadd+0x88>)
 800b050:	21b5      	movs	r1, #181	; 0xb5
 800b052:	f000 fdab 	bl	800bbac <__assert_func>
 800b056:	6922      	ldr	r2, [r4, #16]
 800b058:	3202      	adds	r2, #2
 800b05a:	f104 010c 	add.w	r1, r4, #12
 800b05e:	0092      	lsls	r2, r2, #2
 800b060:	300c      	adds	r0, #12
 800b062:	f7ff ff5b 	bl	800af1c <memcpy>
 800b066:	4621      	mov	r1, r4
 800b068:	4638      	mov	r0, r7
 800b06a:	f7ff ffa5 	bl	800afb8 <_Bfree>
 800b06e:	4644      	mov	r4, r8
 800b070:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b074:	3501      	adds	r5, #1
 800b076:	615e      	str	r6, [r3, #20]
 800b078:	6125      	str	r5, [r4, #16]
 800b07a:	4620      	mov	r0, r4
 800b07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b080:	0800ccbb 	.word	0x0800ccbb
 800b084:	0800cd2c 	.word	0x0800cd2c

0800b088 <__hi0bits>:
 800b088:	0c03      	lsrs	r3, r0, #16
 800b08a:	041b      	lsls	r3, r3, #16
 800b08c:	b9d3      	cbnz	r3, 800b0c4 <__hi0bits+0x3c>
 800b08e:	0400      	lsls	r0, r0, #16
 800b090:	2310      	movs	r3, #16
 800b092:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b096:	bf04      	itt	eq
 800b098:	0200      	lsleq	r0, r0, #8
 800b09a:	3308      	addeq	r3, #8
 800b09c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0a0:	bf04      	itt	eq
 800b0a2:	0100      	lsleq	r0, r0, #4
 800b0a4:	3304      	addeq	r3, #4
 800b0a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0aa:	bf04      	itt	eq
 800b0ac:	0080      	lsleq	r0, r0, #2
 800b0ae:	3302      	addeq	r3, #2
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	db05      	blt.n	800b0c0 <__hi0bits+0x38>
 800b0b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0b8:	f103 0301 	add.w	r3, r3, #1
 800b0bc:	bf08      	it	eq
 800b0be:	2320      	moveq	r3, #32
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	4770      	bx	lr
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e7e4      	b.n	800b092 <__hi0bits+0xa>

0800b0c8 <__lo0bits>:
 800b0c8:	6803      	ldr	r3, [r0, #0]
 800b0ca:	f013 0207 	ands.w	r2, r3, #7
 800b0ce:	4601      	mov	r1, r0
 800b0d0:	d00b      	beq.n	800b0ea <__lo0bits+0x22>
 800b0d2:	07da      	lsls	r2, r3, #31
 800b0d4:	d423      	bmi.n	800b11e <__lo0bits+0x56>
 800b0d6:	0798      	lsls	r0, r3, #30
 800b0d8:	bf49      	itett	mi
 800b0da:	085b      	lsrmi	r3, r3, #1
 800b0dc:	089b      	lsrpl	r3, r3, #2
 800b0de:	2001      	movmi	r0, #1
 800b0e0:	600b      	strmi	r3, [r1, #0]
 800b0e2:	bf5c      	itt	pl
 800b0e4:	600b      	strpl	r3, [r1, #0]
 800b0e6:	2002      	movpl	r0, #2
 800b0e8:	4770      	bx	lr
 800b0ea:	b298      	uxth	r0, r3
 800b0ec:	b9a8      	cbnz	r0, 800b11a <__lo0bits+0x52>
 800b0ee:	0c1b      	lsrs	r3, r3, #16
 800b0f0:	2010      	movs	r0, #16
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	b90a      	cbnz	r2, 800b0fa <__lo0bits+0x32>
 800b0f6:	3008      	adds	r0, #8
 800b0f8:	0a1b      	lsrs	r3, r3, #8
 800b0fa:	071a      	lsls	r2, r3, #28
 800b0fc:	bf04      	itt	eq
 800b0fe:	091b      	lsreq	r3, r3, #4
 800b100:	3004      	addeq	r0, #4
 800b102:	079a      	lsls	r2, r3, #30
 800b104:	bf04      	itt	eq
 800b106:	089b      	lsreq	r3, r3, #2
 800b108:	3002      	addeq	r0, #2
 800b10a:	07da      	lsls	r2, r3, #31
 800b10c:	d403      	bmi.n	800b116 <__lo0bits+0x4e>
 800b10e:	085b      	lsrs	r3, r3, #1
 800b110:	f100 0001 	add.w	r0, r0, #1
 800b114:	d005      	beq.n	800b122 <__lo0bits+0x5a>
 800b116:	600b      	str	r3, [r1, #0]
 800b118:	4770      	bx	lr
 800b11a:	4610      	mov	r0, r2
 800b11c:	e7e9      	b.n	800b0f2 <__lo0bits+0x2a>
 800b11e:	2000      	movs	r0, #0
 800b120:	4770      	bx	lr
 800b122:	2020      	movs	r0, #32
 800b124:	4770      	bx	lr
	...

0800b128 <__i2b>:
 800b128:	b510      	push	{r4, lr}
 800b12a:	460c      	mov	r4, r1
 800b12c:	2101      	movs	r1, #1
 800b12e:	f7ff ff03 	bl	800af38 <_Balloc>
 800b132:	4602      	mov	r2, r0
 800b134:	b928      	cbnz	r0, 800b142 <__i2b+0x1a>
 800b136:	4b05      	ldr	r3, [pc, #20]	; (800b14c <__i2b+0x24>)
 800b138:	4805      	ldr	r0, [pc, #20]	; (800b150 <__i2b+0x28>)
 800b13a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b13e:	f000 fd35 	bl	800bbac <__assert_func>
 800b142:	2301      	movs	r3, #1
 800b144:	6144      	str	r4, [r0, #20]
 800b146:	6103      	str	r3, [r0, #16]
 800b148:	bd10      	pop	{r4, pc}
 800b14a:	bf00      	nop
 800b14c:	0800ccbb 	.word	0x0800ccbb
 800b150:	0800cd2c 	.word	0x0800cd2c

0800b154 <__multiply>:
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b158:	4691      	mov	r9, r2
 800b15a:	690a      	ldr	r2, [r1, #16]
 800b15c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b160:	429a      	cmp	r2, r3
 800b162:	bfb8      	it	lt
 800b164:	460b      	movlt	r3, r1
 800b166:	460c      	mov	r4, r1
 800b168:	bfbc      	itt	lt
 800b16a:	464c      	movlt	r4, r9
 800b16c:	4699      	movlt	r9, r3
 800b16e:	6927      	ldr	r7, [r4, #16]
 800b170:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b174:	68a3      	ldr	r3, [r4, #8]
 800b176:	6861      	ldr	r1, [r4, #4]
 800b178:	eb07 060a 	add.w	r6, r7, sl
 800b17c:	42b3      	cmp	r3, r6
 800b17e:	b085      	sub	sp, #20
 800b180:	bfb8      	it	lt
 800b182:	3101      	addlt	r1, #1
 800b184:	f7ff fed8 	bl	800af38 <_Balloc>
 800b188:	b930      	cbnz	r0, 800b198 <__multiply+0x44>
 800b18a:	4602      	mov	r2, r0
 800b18c:	4b44      	ldr	r3, [pc, #272]	; (800b2a0 <__multiply+0x14c>)
 800b18e:	4845      	ldr	r0, [pc, #276]	; (800b2a4 <__multiply+0x150>)
 800b190:	f240 115d 	movw	r1, #349	; 0x15d
 800b194:	f000 fd0a 	bl	800bbac <__assert_func>
 800b198:	f100 0514 	add.w	r5, r0, #20
 800b19c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1a0:	462b      	mov	r3, r5
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	4543      	cmp	r3, r8
 800b1a6:	d321      	bcc.n	800b1ec <__multiply+0x98>
 800b1a8:	f104 0314 	add.w	r3, r4, #20
 800b1ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1b0:	f109 0314 	add.w	r3, r9, #20
 800b1b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1b8:	9202      	str	r2, [sp, #8]
 800b1ba:	1b3a      	subs	r2, r7, r4
 800b1bc:	3a15      	subs	r2, #21
 800b1be:	f022 0203 	bic.w	r2, r2, #3
 800b1c2:	3204      	adds	r2, #4
 800b1c4:	f104 0115 	add.w	r1, r4, #21
 800b1c8:	428f      	cmp	r7, r1
 800b1ca:	bf38      	it	cc
 800b1cc:	2204      	movcc	r2, #4
 800b1ce:	9201      	str	r2, [sp, #4]
 800b1d0:	9a02      	ldr	r2, [sp, #8]
 800b1d2:	9303      	str	r3, [sp, #12]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d80c      	bhi.n	800b1f2 <__multiply+0x9e>
 800b1d8:	2e00      	cmp	r6, #0
 800b1da:	dd03      	ble.n	800b1e4 <__multiply+0x90>
 800b1dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d05a      	beq.n	800b29a <__multiply+0x146>
 800b1e4:	6106      	str	r6, [r0, #16]
 800b1e6:	b005      	add	sp, #20
 800b1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ec:	f843 2b04 	str.w	r2, [r3], #4
 800b1f0:	e7d8      	b.n	800b1a4 <__multiply+0x50>
 800b1f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1f6:	f1ba 0f00 	cmp.w	sl, #0
 800b1fa:	d024      	beq.n	800b246 <__multiply+0xf2>
 800b1fc:	f104 0e14 	add.w	lr, r4, #20
 800b200:	46a9      	mov	r9, r5
 800b202:	f04f 0c00 	mov.w	ip, #0
 800b206:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b20a:	f8d9 1000 	ldr.w	r1, [r9]
 800b20e:	fa1f fb82 	uxth.w	fp, r2
 800b212:	b289      	uxth	r1, r1
 800b214:	fb0a 110b 	mla	r1, sl, fp, r1
 800b218:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b21c:	f8d9 2000 	ldr.w	r2, [r9]
 800b220:	4461      	add	r1, ip
 800b222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b226:	fb0a c20b 	mla	r2, sl, fp, ip
 800b22a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b22e:	b289      	uxth	r1, r1
 800b230:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b234:	4577      	cmp	r7, lr
 800b236:	f849 1b04 	str.w	r1, [r9], #4
 800b23a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b23e:	d8e2      	bhi.n	800b206 <__multiply+0xb2>
 800b240:	9a01      	ldr	r2, [sp, #4]
 800b242:	f845 c002 	str.w	ip, [r5, r2]
 800b246:	9a03      	ldr	r2, [sp, #12]
 800b248:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b24c:	3304      	adds	r3, #4
 800b24e:	f1b9 0f00 	cmp.w	r9, #0
 800b252:	d020      	beq.n	800b296 <__multiply+0x142>
 800b254:	6829      	ldr	r1, [r5, #0]
 800b256:	f104 0c14 	add.w	ip, r4, #20
 800b25a:	46ae      	mov	lr, r5
 800b25c:	f04f 0a00 	mov.w	sl, #0
 800b260:	f8bc b000 	ldrh.w	fp, [ip]
 800b264:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b268:	fb09 220b 	mla	r2, r9, fp, r2
 800b26c:	4492      	add	sl, r2
 800b26e:	b289      	uxth	r1, r1
 800b270:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b274:	f84e 1b04 	str.w	r1, [lr], #4
 800b278:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b27c:	f8be 1000 	ldrh.w	r1, [lr]
 800b280:	0c12      	lsrs	r2, r2, #16
 800b282:	fb09 1102 	mla	r1, r9, r2, r1
 800b286:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b28a:	4567      	cmp	r7, ip
 800b28c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b290:	d8e6      	bhi.n	800b260 <__multiply+0x10c>
 800b292:	9a01      	ldr	r2, [sp, #4]
 800b294:	50a9      	str	r1, [r5, r2]
 800b296:	3504      	adds	r5, #4
 800b298:	e79a      	b.n	800b1d0 <__multiply+0x7c>
 800b29a:	3e01      	subs	r6, #1
 800b29c:	e79c      	b.n	800b1d8 <__multiply+0x84>
 800b29e:	bf00      	nop
 800b2a0:	0800ccbb 	.word	0x0800ccbb
 800b2a4:	0800cd2c 	.word	0x0800cd2c

0800b2a8 <__pow5mult>:
 800b2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2ac:	4615      	mov	r5, r2
 800b2ae:	f012 0203 	ands.w	r2, r2, #3
 800b2b2:	4606      	mov	r6, r0
 800b2b4:	460f      	mov	r7, r1
 800b2b6:	d007      	beq.n	800b2c8 <__pow5mult+0x20>
 800b2b8:	4c25      	ldr	r4, [pc, #148]	; (800b350 <__pow5mult+0xa8>)
 800b2ba:	3a01      	subs	r2, #1
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2c2:	f7ff fe9b 	bl	800affc <__multadd>
 800b2c6:	4607      	mov	r7, r0
 800b2c8:	10ad      	asrs	r5, r5, #2
 800b2ca:	d03d      	beq.n	800b348 <__pow5mult+0xa0>
 800b2cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2ce:	b97c      	cbnz	r4, 800b2f0 <__pow5mult+0x48>
 800b2d0:	2010      	movs	r0, #16
 800b2d2:	f7ff fe1b 	bl	800af0c <malloc>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	6270      	str	r0, [r6, #36]	; 0x24
 800b2da:	b928      	cbnz	r0, 800b2e8 <__pow5mult+0x40>
 800b2dc:	4b1d      	ldr	r3, [pc, #116]	; (800b354 <__pow5mult+0xac>)
 800b2de:	481e      	ldr	r0, [pc, #120]	; (800b358 <__pow5mult+0xb0>)
 800b2e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2e4:	f000 fc62 	bl	800bbac <__assert_func>
 800b2e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2ec:	6004      	str	r4, [r0, #0]
 800b2ee:	60c4      	str	r4, [r0, #12]
 800b2f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2f8:	b94c      	cbnz	r4, 800b30e <__pow5mult+0x66>
 800b2fa:	f240 2171 	movw	r1, #625	; 0x271
 800b2fe:	4630      	mov	r0, r6
 800b300:	f7ff ff12 	bl	800b128 <__i2b>
 800b304:	2300      	movs	r3, #0
 800b306:	f8c8 0008 	str.w	r0, [r8, #8]
 800b30a:	4604      	mov	r4, r0
 800b30c:	6003      	str	r3, [r0, #0]
 800b30e:	f04f 0900 	mov.w	r9, #0
 800b312:	07eb      	lsls	r3, r5, #31
 800b314:	d50a      	bpl.n	800b32c <__pow5mult+0x84>
 800b316:	4639      	mov	r1, r7
 800b318:	4622      	mov	r2, r4
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7ff ff1a 	bl	800b154 <__multiply>
 800b320:	4639      	mov	r1, r7
 800b322:	4680      	mov	r8, r0
 800b324:	4630      	mov	r0, r6
 800b326:	f7ff fe47 	bl	800afb8 <_Bfree>
 800b32a:	4647      	mov	r7, r8
 800b32c:	106d      	asrs	r5, r5, #1
 800b32e:	d00b      	beq.n	800b348 <__pow5mult+0xa0>
 800b330:	6820      	ldr	r0, [r4, #0]
 800b332:	b938      	cbnz	r0, 800b344 <__pow5mult+0x9c>
 800b334:	4622      	mov	r2, r4
 800b336:	4621      	mov	r1, r4
 800b338:	4630      	mov	r0, r6
 800b33a:	f7ff ff0b 	bl	800b154 <__multiply>
 800b33e:	6020      	str	r0, [r4, #0]
 800b340:	f8c0 9000 	str.w	r9, [r0]
 800b344:	4604      	mov	r4, r0
 800b346:	e7e4      	b.n	800b312 <__pow5mult+0x6a>
 800b348:	4638      	mov	r0, r7
 800b34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b34e:	bf00      	nop
 800b350:	0800ce78 	.word	0x0800ce78
 800b354:	0800cc49 	.word	0x0800cc49
 800b358:	0800cd2c 	.word	0x0800cd2c

0800b35c <__lshift>:
 800b35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b360:	460c      	mov	r4, r1
 800b362:	6849      	ldr	r1, [r1, #4]
 800b364:	6923      	ldr	r3, [r4, #16]
 800b366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b36a:	68a3      	ldr	r3, [r4, #8]
 800b36c:	4607      	mov	r7, r0
 800b36e:	4691      	mov	r9, r2
 800b370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b374:	f108 0601 	add.w	r6, r8, #1
 800b378:	42b3      	cmp	r3, r6
 800b37a:	db0b      	blt.n	800b394 <__lshift+0x38>
 800b37c:	4638      	mov	r0, r7
 800b37e:	f7ff fddb 	bl	800af38 <_Balloc>
 800b382:	4605      	mov	r5, r0
 800b384:	b948      	cbnz	r0, 800b39a <__lshift+0x3e>
 800b386:	4602      	mov	r2, r0
 800b388:	4b2a      	ldr	r3, [pc, #168]	; (800b434 <__lshift+0xd8>)
 800b38a:	482b      	ldr	r0, [pc, #172]	; (800b438 <__lshift+0xdc>)
 800b38c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b390:	f000 fc0c 	bl	800bbac <__assert_func>
 800b394:	3101      	adds	r1, #1
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	e7ee      	b.n	800b378 <__lshift+0x1c>
 800b39a:	2300      	movs	r3, #0
 800b39c:	f100 0114 	add.w	r1, r0, #20
 800b3a0:	f100 0210 	add.w	r2, r0, #16
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	4553      	cmp	r3, sl
 800b3a8:	db37      	blt.n	800b41a <__lshift+0xbe>
 800b3aa:	6920      	ldr	r0, [r4, #16]
 800b3ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3b0:	f104 0314 	add.w	r3, r4, #20
 800b3b4:	f019 091f 	ands.w	r9, r9, #31
 800b3b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3c0:	d02f      	beq.n	800b422 <__lshift+0xc6>
 800b3c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b3c6:	468a      	mov	sl, r1
 800b3c8:	f04f 0c00 	mov.w	ip, #0
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	fa02 f209 	lsl.w	r2, r2, r9
 800b3d2:	ea42 020c 	orr.w	r2, r2, ip
 800b3d6:	f84a 2b04 	str.w	r2, [sl], #4
 800b3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3de:	4298      	cmp	r0, r3
 800b3e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b3e4:	d8f2      	bhi.n	800b3cc <__lshift+0x70>
 800b3e6:	1b03      	subs	r3, r0, r4
 800b3e8:	3b15      	subs	r3, #21
 800b3ea:	f023 0303 	bic.w	r3, r3, #3
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	f104 0215 	add.w	r2, r4, #21
 800b3f4:	4290      	cmp	r0, r2
 800b3f6:	bf38      	it	cc
 800b3f8:	2304      	movcc	r3, #4
 800b3fa:	f841 c003 	str.w	ip, [r1, r3]
 800b3fe:	f1bc 0f00 	cmp.w	ip, #0
 800b402:	d001      	beq.n	800b408 <__lshift+0xac>
 800b404:	f108 0602 	add.w	r6, r8, #2
 800b408:	3e01      	subs	r6, #1
 800b40a:	4638      	mov	r0, r7
 800b40c:	612e      	str	r6, [r5, #16]
 800b40e:	4621      	mov	r1, r4
 800b410:	f7ff fdd2 	bl	800afb8 <_Bfree>
 800b414:	4628      	mov	r0, r5
 800b416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b41e:	3301      	adds	r3, #1
 800b420:	e7c1      	b.n	800b3a6 <__lshift+0x4a>
 800b422:	3904      	subs	r1, #4
 800b424:	f853 2b04 	ldr.w	r2, [r3], #4
 800b428:	f841 2f04 	str.w	r2, [r1, #4]!
 800b42c:	4298      	cmp	r0, r3
 800b42e:	d8f9      	bhi.n	800b424 <__lshift+0xc8>
 800b430:	e7ea      	b.n	800b408 <__lshift+0xac>
 800b432:	bf00      	nop
 800b434:	0800ccbb 	.word	0x0800ccbb
 800b438:	0800cd2c 	.word	0x0800cd2c

0800b43c <__mcmp>:
 800b43c:	b530      	push	{r4, r5, lr}
 800b43e:	6902      	ldr	r2, [r0, #16]
 800b440:	690c      	ldr	r4, [r1, #16]
 800b442:	1b12      	subs	r2, r2, r4
 800b444:	d10e      	bne.n	800b464 <__mcmp+0x28>
 800b446:	f100 0314 	add.w	r3, r0, #20
 800b44a:	3114      	adds	r1, #20
 800b44c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b450:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b454:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b458:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b45c:	42a5      	cmp	r5, r4
 800b45e:	d003      	beq.n	800b468 <__mcmp+0x2c>
 800b460:	d305      	bcc.n	800b46e <__mcmp+0x32>
 800b462:	2201      	movs	r2, #1
 800b464:	4610      	mov	r0, r2
 800b466:	bd30      	pop	{r4, r5, pc}
 800b468:	4283      	cmp	r3, r0
 800b46a:	d3f3      	bcc.n	800b454 <__mcmp+0x18>
 800b46c:	e7fa      	b.n	800b464 <__mcmp+0x28>
 800b46e:	f04f 32ff 	mov.w	r2, #4294967295
 800b472:	e7f7      	b.n	800b464 <__mcmp+0x28>

0800b474 <__mdiff>:
 800b474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b478:	460c      	mov	r4, r1
 800b47a:	4606      	mov	r6, r0
 800b47c:	4611      	mov	r1, r2
 800b47e:	4620      	mov	r0, r4
 800b480:	4690      	mov	r8, r2
 800b482:	f7ff ffdb 	bl	800b43c <__mcmp>
 800b486:	1e05      	subs	r5, r0, #0
 800b488:	d110      	bne.n	800b4ac <__mdiff+0x38>
 800b48a:	4629      	mov	r1, r5
 800b48c:	4630      	mov	r0, r6
 800b48e:	f7ff fd53 	bl	800af38 <_Balloc>
 800b492:	b930      	cbnz	r0, 800b4a2 <__mdiff+0x2e>
 800b494:	4b3a      	ldr	r3, [pc, #232]	; (800b580 <__mdiff+0x10c>)
 800b496:	4602      	mov	r2, r0
 800b498:	f240 2132 	movw	r1, #562	; 0x232
 800b49c:	4839      	ldr	r0, [pc, #228]	; (800b584 <__mdiff+0x110>)
 800b49e:	f000 fb85 	bl	800bbac <__assert_func>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ac:	bfa4      	itt	ge
 800b4ae:	4643      	movge	r3, r8
 800b4b0:	46a0      	movge	r8, r4
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4b8:	bfa6      	itte	ge
 800b4ba:	461c      	movge	r4, r3
 800b4bc:	2500      	movge	r5, #0
 800b4be:	2501      	movlt	r5, #1
 800b4c0:	f7ff fd3a 	bl	800af38 <_Balloc>
 800b4c4:	b920      	cbnz	r0, 800b4d0 <__mdiff+0x5c>
 800b4c6:	4b2e      	ldr	r3, [pc, #184]	; (800b580 <__mdiff+0x10c>)
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4ce:	e7e5      	b.n	800b49c <__mdiff+0x28>
 800b4d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4d4:	6926      	ldr	r6, [r4, #16]
 800b4d6:	60c5      	str	r5, [r0, #12]
 800b4d8:	f104 0914 	add.w	r9, r4, #20
 800b4dc:	f108 0514 	add.w	r5, r8, #20
 800b4e0:	f100 0e14 	add.w	lr, r0, #20
 800b4e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b4e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b4ec:	f108 0210 	add.w	r2, r8, #16
 800b4f0:	46f2      	mov	sl, lr
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4fc:	fa1f f883 	uxth.w	r8, r3
 800b500:	fa11 f18b 	uxtah	r1, r1, fp
 800b504:	0c1b      	lsrs	r3, r3, #16
 800b506:	eba1 0808 	sub.w	r8, r1, r8
 800b50a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b50e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b512:	fa1f f888 	uxth.w	r8, r8
 800b516:	1419      	asrs	r1, r3, #16
 800b518:	454e      	cmp	r6, r9
 800b51a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b51e:	f84a 3b04 	str.w	r3, [sl], #4
 800b522:	d8e7      	bhi.n	800b4f4 <__mdiff+0x80>
 800b524:	1b33      	subs	r3, r6, r4
 800b526:	3b15      	subs	r3, #21
 800b528:	f023 0303 	bic.w	r3, r3, #3
 800b52c:	3304      	adds	r3, #4
 800b52e:	3415      	adds	r4, #21
 800b530:	42a6      	cmp	r6, r4
 800b532:	bf38      	it	cc
 800b534:	2304      	movcc	r3, #4
 800b536:	441d      	add	r5, r3
 800b538:	4473      	add	r3, lr
 800b53a:	469e      	mov	lr, r3
 800b53c:	462e      	mov	r6, r5
 800b53e:	4566      	cmp	r6, ip
 800b540:	d30e      	bcc.n	800b560 <__mdiff+0xec>
 800b542:	f10c 0203 	add.w	r2, ip, #3
 800b546:	1b52      	subs	r2, r2, r5
 800b548:	f022 0203 	bic.w	r2, r2, #3
 800b54c:	3d03      	subs	r5, #3
 800b54e:	45ac      	cmp	ip, r5
 800b550:	bf38      	it	cc
 800b552:	2200      	movcc	r2, #0
 800b554:	441a      	add	r2, r3
 800b556:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b55a:	b17b      	cbz	r3, 800b57c <__mdiff+0x108>
 800b55c:	6107      	str	r7, [r0, #16]
 800b55e:	e7a3      	b.n	800b4a8 <__mdiff+0x34>
 800b560:	f856 8b04 	ldr.w	r8, [r6], #4
 800b564:	fa11 f288 	uxtah	r2, r1, r8
 800b568:	1414      	asrs	r4, r2, #16
 800b56a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b56e:	b292      	uxth	r2, r2
 800b570:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b574:	f84e 2b04 	str.w	r2, [lr], #4
 800b578:	1421      	asrs	r1, r4, #16
 800b57a:	e7e0      	b.n	800b53e <__mdiff+0xca>
 800b57c:	3f01      	subs	r7, #1
 800b57e:	e7ea      	b.n	800b556 <__mdiff+0xe2>
 800b580:	0800ccbb 	.word	0x0800ccbb
 800b584:	0800cd2c 	.word	0x0800cd2c

0800b588 <__d2b>:
 800b588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	4689      	mov	r9, r1
 800b58e:	2101      	movs	r1, #1
 800b590:	ec57 6b10 	vmov	r6, r7, d0
 800b594:	4690      	mov	r8, r2
 800b596:	f7ff fccf 	bl	800af38 <_Balloc>
 800b59a:	4604      	mov	r4, r0
 800b59c:	b930      	cbnz	r0, 800b5ac <__d2b+0x24>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	4b25      	ldr	r3, [pc, #148]	; (800b638 <__d2b+0xb0>)
 800b5a2:	4826      	ldr	r0, [pc, #152]	; (800b63c <__d2b+0xb4>)
 800b5a4:	f240 310a 	movw	r1, #778	; 0x30a
 800b5a8:	f000 fb00 	bl	800bbac <__assert_func>
 800b5ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b5b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5b4:	bb35      	cbnz	r5, 800b604 <__d2b+0x7c>
 800b5b6:	2e00      	cmp	r6, #0
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	d028      	beq.n	800b60e <__d2b+0x86>
 800b5bc:	4668      	mov	r0, sp
 800b5be:	9600      	str	r6, [sp, #0]
 800b5c0:	f7ff fd82 	bl	800b0c8 <__lo0bits>
 800b5c4:	9900      	ldr	r1, [sp, #0]
 800b5c6:	b300      	cbz	r0, 800b60a <__d2b+0x82>
 800b5c8:	9a01      	ldr	r2, [sp, #4]
 800b5ca:	f1c0 0320 	rsb	r3, r0, #32
 800b5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b5d2:	430b      	orrs	r3, r1
 800b5d4:	40c2      	lsrs	r2, r0
 800b5d6:	6163      	str	r3, [r4, #20]
 800b5d8:	9201      	str	r2, [sp, #4]
 800b5da:	9b01      	ldr	r3, [sp, #4]
 800b5dc:	61a3      	str	r3, [r4, #24]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	bf14      	ite	ne
 800b5e2:	2202      	movne	r2, #2
 800b5e4:	2201      	moveq	r2, #1
 800b5e6:	6122      	str	r2, [r4, #16]
 800b5e8:	b1d5      	cbz	r5, 800b620 <__d2b+0x98>
 800b5ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5ee:	4405      	add	r5, r0
 800b5f0:	f8c9 5000 	str.w	r5, [r9]
 800b5f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5f8:	f8c8 0000 	str.w	r0, [r8]
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	b003      	add	sp, #12
 800b600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b608:	e7d5      	b.n	800b5b6 <__d2b+0x2e>
 800b60a:	6161      	str	r1, [r4, #20]
 800b60c:	e7e5      	b.n	800b5da <__d2b+0x52>
 800b60e:	a801      	add	r0, sp, #4
 800b610:	f7ff fd5a 	bl	800b0c8 <__lo0bits>
 800b614:	9b01      	ldr	r3, [sp, #4]
 800b616:	6163      	str	r3, [r4, #20]
 800b618:	2201      	movs	r2, #1
 800b61a:	6122      	str	r2, [r4, #16]
 800b61c:	3020      	adds	r0, #32
 800b61e:	e7e3      	b.n	800b5e8 <__d2b+0x60>
 800b620:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b624:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b628:	f8c9 0000 	str.w	r0, [r9]
 800b62c:	6918      	ldr	r0, [r3, #16]
 800b62e:	f7ff fd2b 	bl	800b088 <__hi0bits>
 800b632:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b636:	e7df      	b.n	800b5f8 <__d2b+0x70>
 800b638:	0800ccbb 	.word	0x0800ccbb
 800b63c:	0800cd2c 	.word	0x0800cd2c

0800b640 <_calloc_r>:
 800b640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b642:	fba1 2402 	umull	r2, r4, r1, r2
 800b646:	b94c      	cbnz	r4, 800b65c <_calloc_r+0x1c>
 800b648:	4611      	mov	r1, r2
 800b64a:	9201      	str	r2, [sp, #4]
 800b64c:	f000 f87a 	bl	800b744 <_malloc_r>
 800b650:	9a01      	ldr	r2, [sp, #4]
 800b652:	4605      	mov	r5, r0
 800b654:	b930      	cbnz	r0, 800b664 <_calloc_r+0x24>
 800b656:	4628      	mov	r0, r5
 800b658:	b003      	add	sp, #12
 800b65a:	bd30      	pop	{r4, r5, pc}
 800b65c:	220c      	movs	r2, #12
 800b65e:	6002      	str	r2, [r0, #0]
 800b660:	2500      	movs	r5, #0
 800b662:	e7f8      	b.n	800b656 <_calloc_r+0x16>
 800b664:	4621      	mov	r1, r4
 800b666:	f7fd fdf3 	bl	8009250 <memset>
 800b66a:	e7f4      	b.n	800b656 <_calloc_r+0x16>

0800b66c <_free_r>:
 800b66c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b66e:	2900      	cmp	r1, #0
 800b670:	d044      	beq.n	800b6fc <_free_r+0x90>
 800b672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b676:	9001      	str	r0, [sp, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f1a1 0404 	sub.w	r4, r1, #4
 800b67e:	bfb8      	it	lt
 800b680:	18e4      	addlt	r4, r4, r3
 800b682:	f000 fb19 	bl	800bcb8 <__malloc_lock>
 800b686:	4a1e      	ldr	r2, [pc, #120]	; (800b700 <_free_r+0x94>)
 800b688:	9801      	ldr	r0, [sp, #4]
 800b68a:	6813      	ldr	r3, [r2, #0]
 800b68c:	b933      	cbnz	r3, 800b69c <_free_r+0x30>
 800b68e:	6063      	str	r3, [r4, #4]
 800b690:	6014      	str	r4, [r2, #0]
 800b692:	b003      	add	sp, #12
 800b694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b698:	f000 bb14 	b.w	800bcc4 <__malloc_unlock>
 800b69c:	42a3      	cmp	r3, r4
 800b69e:	d908      	bls.n	800b6b2 <_free_r+0x46>
 800b6a0:	6825      	ldr	r5, [r4, #0]
 800b6a2:	1961      	adds	r1, r4, r5
 800b6a4:	428b      	cmp	r3, r1
 800b6a6:	bf01      	itttt	eq
 800b6a8:	6819      	ldreq	r1, [r3, #0]
 800b6aa:	685b      	ldreq	r3, [r3, #4]
 800b6ac:	1949      	addeq	r1, r1, r5
 800b6ae:	6021      	streq	r1, [r4, #0]
 800b6b0:	e7ed      	b.n	800b68e <_free_r+0x22>
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	b10b      	cbz	r3, 800b6bc <_free_r+0x50>
 800b6b8:	42a3      	cmp	r3, r4
 800b6ba:	d9fa      	bls.n	800b6b2 <_free_r+0x46>
 800b6bc:	6811      	ldr	r1, [r2, #0]
 800b6be:	1855      	adds	r5, r2, r1
 800b6c0:	42a5      	cmp	r5, r4
 800b6c2:	d10b      	bne.n	800b6dc <_free_r+0x70>
 800b6c4:	6824      	ldr	r4, [r4, #0]
 800b6c6:	4421      	add	r1, r4
 800b6c8:	1854      	adds	r4, r2, r1
 800b6ca:	42a3      	cmp	r3, r4
 800b6cc:	6011      	str	r1, [r2, #0]
 800b6ce:	d1e0      	bne.n	800b692 <_free_r+0x26>
 800b6d0:	681c      	ldr	r4, [r3, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	6053      	str	r3, [r2, #4]
 800b6d6:	4421      	add	r1, r4
 800b6d8:	6011      	str	r1, [r2, #0]
 800b6da:	e7da      	b.n	800b692 <_free_r+0x26>
 800b6dc:	d902      	bls.n	800b6e4 <_free_r+0x78>
 800b6de:	230c      	movs	r3, #12
 800b6e0:	6003      	str	r3, [r0, #0]
 800b6e2:	e7d6      	b.n	800b692 <_free_r+0x26>
 800b6e4:	6825      	ldr	r5, [r4, #0]
 800b6e6:	1961      	adds	r1, r4, r5
 800b6e8:	428b      	cmp	r3, r1
 800b6ea:	bf04      	itt	eq
 800b6ec:	6819      	ldreq	r1, [r3, #0]
 800b6ee:	685b      	ldreq	r3, [r3, #4]
 800b6f0:	6063      	str	r3, [r4, #4]
 800b6f2:	bf04      	itt	eq
 800b6f4:	1949      	addeq	r1, r1, r5
 800b6f6:	6021      	streq	r1, [r4, #0]
 800b6f8:	6054      	str	r4, [r2, #4]
 800b6fa:	e7ca      	b.n	800b692 <_free_r+0x26>
 800b6fc:	b003      	add	sp, #12
 800b6fe:	bd30      	pop	{r4, r5, pc}
 800b700:	20000cd0 	.word	0x20000cd0

0800b704 <sbrk_aligned>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	4e0e      	ldr	r6, [pc, #56]	; (800b740 <sbrk_aligned+0x3c>)
 800b708:	460c      	mov	r4, r1
 800b70a:	6831      	ldr	r1, [r6, #0]
 800b70c:	4605      	mov	r5, r0
 800b70e:	b911      	cbnz	r1, 800b716 <sbrk_aligned+0x12>
 800b710:	f000 f9e6 	bl	800bae0 <_sbrk_r>
 800b714:	6030      	str	r0, [r6, #0]
 800b716:	4621      	mov	r1, r4
 800b718:	4628      	mov	r0, r5
 800b71a:	f000 f9e1 	bl	800bae0 <_sbrk_r>
 800b71e:	1c43      	adds	r3, r0, #1
 800b720:	d00a      	beq.n	800b738 <sbrk_aligned+0x34>
 800b722:	1cc4      	adds	r4, r0, #3
 800b724:	f024 0403 	bic.w	r4, r4, #3
 800b728:	42a0      	cmp	r0, r4
 800b72a:	d007      	beq.n	800b73c <sbrk_aligned+0x38>
 800b72c:	1a21      	subs	r1, r4, r0
 800b72e:	4628      	mov	r0, r5
 800b730:	f000 f9d6 	bl	800bae0 <_sbrk_r>
 800b734:	3001      	adds	r0, #1
 800b736:	d101      	bne.n	800b73c <sbrk_aligned+0x38>
 800b738:	f04f 34ff 	mov.w	r4, #4294967295
 800b73c:	4620      	mov	r0, r4
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	20000cd4 	.word	0x20000cd4

0800b744 <_malloc_r>:
 800b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b748:	1ccd      	adds	r5, r1, #3
 800b74a:	f025 0503 	bic.w	r5, r5, #3
 800b74e:	3508      	adds	r5, #8
 800b750:	2d0c      	cmp	r5, #12
 800b752:	bf38      	it	cc
 800b754:	250c      	movcc	r5, #12
 800b756:	2d00      	cmp	r5, #0
 800b758:	4607      	mov	r7, r0
 800b75a:	db01      	blt.n	800b760 <_malloc_r+0x1c>
 800b75c:	42a9      	cmp	r1, r5
 800b75e:	d905      	bls.n	800b76c <_malloc_r+0x28>
 800b760:	230c      	movs	r3, #12
 800b762:	603b      	str	r3, [r7, #0]
 800b764:	2600      	movs	r6, #0
 800b766:	4630      	mov	r0, r6
 800b768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b76c:	4e2e      	ldr	r6, [pc, #184]	; (800b828 <_malloc_r+0xe4>)
 800b76e:	f000 faa3 	bl	800bcb8 <__malloc_lock>
 800b772:	6833      	ldr	r3, [r6, #0]
 800b774:	461c      	mov	r4, r3
 800b776:	bb34      	cbnz	r4, 800b7c6 <_malloc_r+0x82>
 800b778:	4629      	mov	r1, r5
 800b77a:	4638      	mov	r0, r7
 800b77c:	f7ff ffc2 	bl	800b704 <sbrk_aligned>
 800b780:	1c43      	adds	r3, r0, #1
 800b782:	4604      	mov	r4, r0
 800b784:	d14d      	bne.n	800b822 <_malloc_r+0xde>
 800b786:	6834      	ldr	r4, [r6, #0]
 800b788:	4626      	mov	r6, r4
 800b78a:	2e00      	cmp	r6, #0
 800b78c:	d140      	bne.n	800b810 <_malloc_r+0xcc>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	4631      	mov	r1, r6
 800b792:	4638      	mov	r0, r7
 800b794:	eb04 0803 	add.w	r8, r4, r3
 800b798:	f000 f9a2 	bl	800bae0 <_sbrk_r>
 800b79c:	4580      	cmp	r8, r0
 800b79e:	d13a      	bne.n	800b816 <_malloc_r+0xd2>
 800b7a0:	6821      	ldr	r1, [r4, #0]
 800b7a2:	3503      	adds	r5, #3
 800b7a4:	1a6d      	subs	r5, r5, r1
 800b7a6:	f025 0503 	bic.w	r5, r5, #3
 800b7aa:	3508      	adds	r5, #8
 800b7ac:	2d0c      	cmp	r5, #12
 800b7ae:	bf38      	it	cc
 800b7b0:	250c      	movcc	r5, #12
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f7ff ffa5 	bl	800b704 <sbrk_aligned>
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	d02b      	beq.n	800b816 <_malloc_r+0xd2>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	442b      	add	r3, r5
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	e00e      	b.n	800b7e4 <_malloc_r+0xa0>
 800b7c6:	6822      	ldr	r2, [r4, #0]
 800b7c8:	1b52      	subs	r2, r2, r5
 800b7ca:	d41e      	bmi.n	800b80a <_malloc_r+0xc6>
 800b7cc:	2a0b      	cmp	r2, #11
 800b7ce:	d916      	bls.n	800b7fe <_malloc_r+0xba>
 800b7d0:	1961      	adds	r1, r4, r5
 800b7d2:	42a3      	cmp	r3, r4
 800b7d4:	6025      	str	r5, [r4, #0]
 800b7d6:	bf18      	it	ne
 800b7d8:	6059      	strne	r1, [r3, #4]
 800b7da:	6863      	ldr	r3, [r4, #4]
 800b7dc:	bf08      	it	eq
 800b7de:	6031      	streq	r1, [r6, #0]
 800b7e0:	5162      	str	r2, [r4, r5]
 800b7e2:	604b      	str	r3, [r1, #4]
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f104 060b 	add.w	r6, r4, #11
 800b7ea:	f000 fa6b 	bl	800bcc4 <__malloc_unlock>
 800b7ee:	f026 0607 	bic.w	r6, r6, #7
 800b7f2:	1d23      	adds	r3, r4, #4
 800b7f4:	1af2      	subs	r2, r6, r3
 800b7f6:	d0b6      	beq.n	800b766 <_malloc_r+0x22>
 800b7f8:	1b9b      	subs	r3, r3, r6
 800b7fa:	50a3      	str	r3, [r4, r2]
 800b7fc:	e7b3      	b.n	800b766 <_malloc_r+0x22>
 800b7fe:	6862      	ldr	r2, [r4, #4]
 800b800:	42a3      	cmp	r3, r4
 800b802:	bf0c      	ite	eq
 800b804:	6032      	streq	r2, [r6, #0]
 800b806:	605a      	strne	r2, [r3, #4]
 800b808:	e7ec      	b.n	800b7e4 <_malloc_r+0xa0>
 800b80a:	4623      	mov	r3, r4
 800b80c:	6864      	ldr	r4, [r4, #4]
 800b80e:	e7b2      	b.n	800b776 <_malloc_r+0x32>
 800b810:	4634      	mov	r4, r6
 800b812:	6876      	ldr	r6, [r6, #4]
 800b814:	e7b9      	b.n	800b78a <_malloc_r+0x46>
 800b816:	230c      	movs	r3, #12
 800b818:	603b      	str	r3, [r7, #0]
 800b81a:	4638      	mov	r0, r7
 800b81c:	f000 fa52 	bl	800bcc4 <__malloc_unlock>
 800b820:	e7a1      	b.n	800b766 <_malloc_r+0x22>
 800b822:	6025      	str	r5, [r4, #0]
 800b824:	e7de      	b.n	800b7e4 <_malloc_r+0xa0>
 800b826:	bf00      	nop
 800b828:	20000cd0 	.word	0x20000cd0

0800b82c <__sfputc_r>:
 800b82c:	6893      	ldr	r3, [r2, #8]
 800b82e:	3b01      	subs	r3, #1
 800b830:	2b00      	cmp	r3, #0
 800b832:	b410      	push	{r4}
 800b834:	6093      	str	r3, [r2, #8]
 800b836:	da08      	bge.n	800b84a <__sfputc_r+0x1e>
 800b838:	6994      	ldr	r4, [r2, #24]
 800b83a:	42a3      	cmp	r3, r4
 800b83c:	db01      	blt.n	800b842 <__sfputc_r+0x16>
 800b83e:	290a      	cmp	r1, #10
 800b840:	d103      	bne.n	800b84a <__sfputc_r+0x1e>
 800b842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b846:	f7fe ba03 	b.w	8009c50 <__swbuf_r>
 800b84a:	6813      	ldr	r3, [r2, #0]
 800b84c:	1c58      	adds	r0, r3, #1
 800b84e:	6010      	str	r0, [r2, #0]
 800b850:	7019      	strb	r1, [r3, #0]
 800b852:	4608      	mov	r0, r1
 800b854:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <__sfputs_r>:
 800b85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85c:	4606      	mov	r6, r0
 800b85e:	460f      	mov	r7, r1
 800b860:	4614      	mov	r4, r2
 800b862:	18d5      	adds	r5, r2, r3
 800b864:	42ac      	cmp	r4, r5
 800b866:	d101      	bne.n	800b86c <__sfputs_r+0x12>
 800b868:	2000      	movs	r0, #0
 800b86a:	e007      	b.n	800b87c <__sfputs_r+0x22>
 800b86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b870:	463a      	mov	r2, r7
 800b872:	4630      	mov	r0, r6
 800b874:	f7ff ffda 	bl	800b82c <__sfputc_r>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	d1f3      	bne.n	800b864 <__sfputs_r+0xa>
 800b87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b880 <_vfiprintf_r>:
 800b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b884:	460d      	mov	r5, r1
 800b886:	b09d      	sub	sp, #116	; 0x74
 800b888:	4614      	mov	r4, r2
 800b88a:	4698      	mov	r8, r3
 800b88c:	4606      	mov	r6, r0
 800b88e:	b118      	cbz	r0, 800b898 <_vfiprintf_r+0x18>
 800b890:	6983      	ldr	r3, [r0, #24]
 800b892:	b90b      	cbnz	r3, 800b898 <_vfiprintf_r+0x18>
 800b894:	f7ff fa30 	bl	800acf8 <__sinit>
 800b898:	4b89      	ldr	r3, [pc, #548]	; (800bac0 <_vfiprintf_r+0x240>)
 800b89a:	429d      	cmp	r5, r3
 800b89c:	d11b      	bne.n	800b8d6 <_vfiprintf_r+0x56>
 800b89e:	6875      	ldr	r5, [r6, #4]
 800b8a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8a2:	07d9      	lsls	r1, r3, #31
 800b8a4:	d405      	bmi.n	800b8b2 <_vfiprintf_r+0x32>
 800b8a6:	89ab      	ldrh	r3, [r5, #12]
 800b8a8:	059a      	lsls	r2, r3, #22
 800b8aa:	d402      	bmi.n	800b8b2 <_vfiprintf_r+0x32>
 800b8ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ae:	f7ff fac6 	bl	800ae3e <__retarget_lock_acquire_recursive>
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	071b      	lsls	r3, r3, #28
 800b8b6:	d501      	bpl.n	800b8bc <_vfiprintf_r+0x3c>
 800b8b8:	692b      	ldr	r3, [r5, #16]
 800b8ba:	b9eb      	cbnz	r3, 800b8f8 <_vfiprintf_r+0x78>
 800b8bc:	4629      	mov	r1, r5
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f7fe fa18 	bl	8009cf4 <__swsetup_r>
 800b8c4:	b1c0      	cbz	r0, 800b8f8 <_vfiprintf_r+0x78>
 800b8c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c8:	07dc      	lsls	r4, r3, #31
 800b8ca:	d50e      	bpl.n	800b8ea <_vfiprintf_r+0x6a>
 800b8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d0:	b01d      	add	sp, #116	; 0x74
 800b8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d6:	4b7b      	ldr	r3, [pc, #492]	; (800bac4 <_vfiprintf_r+0x244>)
 800b8d8:	429d      	cmp	r5, r3
 800b8da:	d101      	bne.n	800b8e0 <_vfiprintf_r+0x60>
 800b8dc:	68b5      	ldr	r5, [r6, #8]
 800b8de:	e7df      	b.n	800b8a0 <_vfiprintf_r+0x20>
 800b8e0:	4b79      	ldr	r3, [pc, #484]	; (800bac8 <_vfiprintf_r+0x248>)
 800b8e2:	429d      	cmp	r5, r3
 800b8e4:	bf08      	it	eq
 800b8e6:	68f5      	ldreq	r5, [r6, #12]
 800b8e8:	e7da      	b.n	800b8a0 <_vfiprintf_r+0x20>
 800b8ea:	89ab      	ldrh	r3, [r5, #12]
 800b8ec:	0598      	lsls	r0, r3, #22
 800b8ee:	d4ed      	bmi.n	800b8cc <_vfiprintf_r+0x4c>
 800b8f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8f2:	f7ff faa5 	bl	800ae40 <__retarget_lock_release_recursive>
 800b8f6:	e7e9      	b.n	800b8cc <_vfiprintf_r+0x4c>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b8fc:	2320      	movs	r3, #32
 800b8fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b902:	f8cd 800c 	str.w	r8, [sp, #12]
 800b906:	2330      	movs	r3, #48	; 0x30
 800b908:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bacc <_vfiprintf_r+0x24c>
 800b90c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b910:	f04f 0901 	mov.w	r9, #1
 800b914:	4623      	mov	r3, r4
 800b916:	469a      	mov	sl, r3
 800b918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b91c:	b10a      	cbz	r2, 800b922 <_vfiprintf_r+0xa2>
 800b91e:	2a25      	cmp	r2, #37	; 0x25
 800b920:	d1f9      	bne.n	800b916 <_vfiprintf_r+0x96>
 800b922:	ebba 0b04 	subs.w	fp, sl, r4
 800b926:	d00b      	beq.n	800b940 <_vfiprintf_r+0xc0>
 800b928:	465b      	mov	r3, fp
 800b92a:	4622      	mov	r2, r4
 800b92c:	4629      	mov	r1, r5
 800b92e:	4630      	mov	r0, r6
 800b930:	f7ff ff93 	bl	800b85a <__sfputs_r>
 800b934:	3001      	adds	r0, #1
 800b936:	f000 80aa 	beq.w	800ba8e <_vfiprintf_r+0x20e>
 800b93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b93c:	445a      	add	r2, fp
 800b93e:	9209      	str	r2, [sp, #36]	; 0x24
 800b940:	f89a 3000 	ldrb.w	r3, [sl]
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 80a2 	beq.w	800ba8e <_vfiprintf_r+0x20e>
 800b94a:	2300      	movs	r3, #0
 800b94c:	f04f 32ff 	mov.w	r2, #4294967295
 800b950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b954:	f10a 0a01 	add.w	sl, sl, #1
 800b958:	9304      	str	r3, [sp, #16]
 800b95a:	9307      	str	r3, [sp, #28]
 800b95c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b960:	931a      	str	r3, [sp, #104]	; 0x68
 800b962:	4654      	mov	r4, sl
 800b964:	2205      	movs	r2, #5
 800b966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b96a:	4858      	ldr	r0, [pc, #352]	; (800bacc <_vfiprintf_r+0x24c>)
 800b96c:	f7f4 fc50 	bl	8000210 <memchr>
 800b970:	9a04      	ldr	r2, [sp, #16]
 800b972:	b9d8      	cbnz	r0, 800b9ac <_vfiprintf_r+0x12c>
 800b974:	06d1      	lsls	r1, r2, #27
 800b976:	bf44      	itt	mi
 800b978:	2320      	movmi	r3, #32
 800b97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b97e:	0713      	lsls	r3, r2, #28
 800b980:	bf44      	itt	mi
 800b982:	232b      	movmi	r3, #43	; 0x2b
 800b984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b988:	f89a 3000 	ldrb.w	r3, [sl]
 800b98c:	2b2a      	cmp	r3, #42	; 0x2a
 800b98e:	d015      	beq.n	800b9bc <_vfiprintf_r+0x13c>
 800b990:	9a07      	ldr	r2, [sp, #28]
 800b992:	4654      	mov	r4, sl
 800b994:	2000      	movs	r0, #0
 800b996:	f04f 0c0a 	mov.w	ip, #10
 800b99a:	4621      	mov	r1, r4
 800b99c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9a0:	3b30      	subs	r3, #48	; 0x30
 800b9a2:	2b09      	cmp	r3, #9
 800b9a4:	d94e      	bls.n	800ba44 <_vfiprintf_r+0x1c4>
 800b9a6:	b1b0      	cbz	r0, 800b9d6 <_vfiprintf_r+0x156>
 800b9a8:	9207      	str	r2, [sp, #28]
 800b9aa:	e014      	b.n	800b9d6 <_vfiprintf_r+0x156>
 800b9ac:	eba0 0308 	sub.w	r3, r0, r8
 800b9b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	9304      	str	r3, [sp, #16]
 800b9b8:	46a2      	mov	sl, r4
 800b9ba:	e7d2      	b.n	800b962 <_vfiprintf_r+0xe2>
 800b9bc:	9b03      	ldr	r3, [sp, #12]
 800b9be:	1d19      	adds	r1, r3, #4
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	9103      	str	r1, [sp, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	bfbb      	ittet	lt
 800b9c8:	425b      	neglt	r3, r3
 800b9ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b9ce:	9307      	strge	r3, [sp, #28]
 800b9d0:	9307      	strlt	r3, [sp, #28]
 800b9d2:	bfb8      	it	lt
 800b9d4:	9204      	strlt	r2, [sp, #16]
 800b9d6:	7823      	ldrb	r3, [r4, #0]
 800b9d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b9da:	d10c      	bne.n	800b9f6 <_vfiprintf_r+0x176>
 800b9dc:	7863      	ldrb	r3, [r4, #1]
 800b9de:	2b2a      	cmp	r3, #42	; 0x2a
 800b9e0:	d135      	bne.n	800ba4e <_vfiprintf_r+0x1ce>
 800b9e2:	9b03      	ldr	r3, [sp, #12]
 800b9e4:	1d1a      	adds	r2, r3, #4
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	9203      	str	r2, [sp, #12]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	bfb8      	it	lt
 800b9ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9f2:	3402      	adds	r4, #2
 800b9f4:	9305      	str	r3, [sp, #20]
 800b9f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800badc <_vfiprintf_r+0x25c>
 800b9fa:	7821      	ldrb	r1, [r4, #0]
 800b9fc:	2203      	movs	r2, #3
 800b9fe:	4650      	mov	r0, sl
 800ba00:	f7f4 fc06 	bl	8000210 <memchr>
 800ba04:	b140      	cbz	r0, 800ba18 <_vfiprintf_r+0x198>
 800ba06:	2340      	movs	r3, #64	; 0x40
 800ba08:	eba0 000a 	sub.w	r0, r0, sl
 800ba0c:	fa03 f000 	lsl.w	r0, r3, r0
 800ba10:	9b04      	ldr	r3, [sp, #16]
 800ba12:	4303      	orrs	r3, r0
 800ba14:	3401      	adds	r4, #1
 800ba16:	9304      	str	r3, [sp, #16]
 800ba18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba1c:	482c      	ldr	r0, [pc, #176]	; (800bad0 <_vfiprintf_r+0x250>)
 800ba1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba22:	2206      	movs	r2, #6
 800ba24:	f7f4 fbf4 	bl	8000210 <memchr>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d03f      	beq.n	800baac <_vfiprintf_r+0x22c>
 800ba2c:	4b29      	ldr	r3, [pc, #164]	; (800bad4 <_vfiprintf_r+0x254>)
 800ba2e:	bb1b      	cbnz	r3, 800ba78 <_vfiprintf_r+0x1f8>
 800ba30:	9b03      	ldr	r3, [sp, #12]
 800ba32:	3307      	adds	r3, #7
 800ba34:	f023 0307 	bic.w	r3, r3, #7
 800ba38:	3308      	adds	r3, #8
 800ba3a:	9303      	str	r3, [sp, #12]
 800ba3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba3e:	443b      	add	r3, r7
 800ba40:	9309      	str	r3, [sp, #36]	; 0x24
 800ba42:	e767      	b.n	800b914 <_vfiprintf_r+0x94>
 800ba44:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba48:	460c      	mov	r4, r1
 800ba4a:	2001      	movs	r0, #1
 800ba4c:	e7a5      	b.n	800b99a <_vfiprintf_r+0x11a>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	3401      	adds	r4, #1
 800ba52:	9305      	str	r3, [sp, #20]
 800ba54:	4619      	mov	r1, r3
 800ba56:	f04f 0c0a 	mov.w	ip, #10
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba60:	3a30      	subs	r2, #48	; 0x30
 800ba62:	2a09      	cmp	r2, #9
 800ba64:	d903      	bls.n	800ba6e <_vfiprintf_r+0x1ee>
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d0c5      	beq.n	800b9f6 <_vfiprintf_r+0x176>
 800ba6a:	9105      	str	r1, [sp, #20]
 800ba6c:	e7c3      	b.n	800b9f6 <_vfiprintf_r+0x176>
 800ba6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba72:	4604      	mov	r4, r0
 800ba74:	2301      	movs	r3, #1
 800ba76:	e7f0      	b.n	800ba5a <_vfiprintf_r+0x1da>
 800ba78:	ab03      	add	r3, sp, #12
 800ba7a:	9300      	str	r3, [sp, #0]
 800ba7c:	462a      	mov	r2, r5
 800ba7e:	4b16      	ldr	r3, [pc, #88]	; (800bad8 <_vfiprintf_r+0x258>)
 800ba80:	a904      	add	r1, sp, #16
 800ba82:	4630      	mov	r0, r6
 800ba84:	f7fd fc8c 	bl	80093a0 <_printf_float>
 800ba88:	4607      	mov	r7, r0
 800ba8a:	1c78      	adds	r0, r7, #1
 800ba8c:	d1d6      	bne.n	800ba3c <_vfiprintf_r+0x1bc>
 800ba8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba90:	07d9      	lsls	r1, r3, #31
 800ba92:	d405      	bmi.n	800baa0 <_vfiprintf_r+0x220>
 800ba94:	89ab      	ldrh	r3, [r5, #12]
 800ba96:	059a      	lsls	r2, r3, #22
 800ba98:	d402      	bmi.n	800baa0 <_vfiprintf_r+0x220>
 800ba9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba9c:	f7ff f9d0 	bl	800ae40 <__retarget_lock_release_recursive>
 800baa0:	89ab      	ldrh	r3, [r5, #12]
 800baa2:	065b      	lsls	r3, r3, #25
 800baa4:	f53f af12 	bmi.w	800b8cc <_vfiprintf_r+0x4c>
 800baa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baaa:	e711      	b.n	800b8d0 <_vfiprintf_r+0x50>
 800baac:	ab03      	add	r3, sp, #12
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	462a      	mov	r2, r5
 800bab2:	4b09      	ldr	r3, [pc, #36]	; (800bad8 <_vfiprintf_r+0x258>)
 800bab4:	a904      	add	r1, sp, #16
 800bab6:	4630      	mov	r0, r6
 800bab8:	f7fd ff16 	bl	80098e8 <_printf_i>
 800babc:	e7e4      	b.n	800ba88 <_vfiprintf_r+0x208>
 800babe:	bf00      	nop
 800bac0:	0800ccec 	.word	0x0800ccec
 800bac4:	0800cd0c 	.word	0x0800cd0c
 800bac8:	0800cccc 	.word	0x0800cccc
 800bacc:	0800ce84 	.word	0x0800ce84
 800bad0:	0800ce8e 	.word	0x0800ce8e
 800bad4:	080093a1 	.word	0x080093a1
 800bad8:	0800b85b 	.word	0x0800b85b
 800badc:	0800ce8a 	.word	0x0800ce8a

0800bae0 <_sbrk_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4d06      	ldr	r5, [pc, #24]	; (800bafc <_sbrk_r+0x1c>)
 800bae4:	2300      	movs	r3, #0
 800bae6:	4604      	mov	r4, r0
 800bae8:	4608      	mov	r0, r1
 800baea:	602b      	str	r3, [r5, #0]
 800baec:	f7f7 f8dc 	bl	8002ca8 <_sbrk>
 800baf0:	1c43      	adds	r3, r0, #1
 800baf2:	d102      	bne.n	800bafa <_sbrk_r+0x1a>
 800baf4:	682b      	ldr	r3, [r5, #0]
 800baf6:	b103      	cbz	r3, 800bafa <_sbrk_r+0x1a>
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	bd38      	pop	{r3, r4, r5, pc}
 800bafc:	20000cd8 	.word	0x20000cd8

0800bb00 <__sread>:
 800bb00:	b510      	push	{r4, lr}
 800bb02:	460c      	mov	r4, r1
 800bb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb08:	f000 f8e2 	bl	800bcd0 <_read_r>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	bfab      	itete	ge
 800bb10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb12:	89a3      	ldrhlt	r3, [r4, #12]
 800bb14:	181b      	addge	r3, r3, r0
 800bb16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb1a:	bfac      	ite	ge
 800bb1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb1e:	81a3      	strhlt	r3, [r4, #12]
 800bb20:	bd10      	pop	{r4, pc}

0800bb22 <__swrite>:
 800bb22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb26:	461f      	mov	r7, r3
 800bb28:	898b      	ldrh	r3, [r1, #12]
 800bb2a:	05db      	lsls	r3, r3, #23
 800bb2c:	4605      	mov	r5, r0
 800bb2e:	460c      	mov	r4, r1
 800bb30:	4616      	mov	r6, r2
 800bb32:	d505      	bpl.n	800bb40 <__swrite+0x1e>
 800bb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb38:	2302      	movs	r3, #2
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f000 f898 	bl	800bc70 <_lseek_r>
 800bb40:	89a3      	ldrh	r3, [r4, #12]
 800bb42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb4a:	81a3      	strh	r3, [r4, #12]
 800bb4c:	4632      	mov	r2, r6
 800bb4e:	463b      	mov	r3, r7
 800bb50:	4628      	mov	r0, r5
 800bb52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb56:	f000 b817 	b.w	800bb88 <_write_r>

0800bb5a <__sseek>:
 800bb5a:	b510      	push	{r4, lr}
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb62:	f000 f885 	bl	800bc70 <_lseek_r>
 800bb66:	1c43      	adds	r3, r0, #1
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	bf15      	itete	ne
 800bb6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb76:	81a3      	strheq	r3, [r4, #12]
 800bb78:	bf18      	it	ne
 800bb7a:	81a3      	strhne	r3, [r4, #12]
 800bb7c:	bd10      	pop	{r4, pc}

0800bb7e <__sclose>:
 800bb7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb82:	f000 b831 	b.w	800bbe8 <_close_r>
	...

0800bb88 <_write_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4d07      	ldr	r5, [pc, #28]	; (800bba8 <_write_r+0x20>)
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	4608      	mov	r0, r1
 800bb90:	4611      	mov	r1, r2
 800bb92:	2200      	movs	r2, #0
 800bb94:	602a      	str	r2, [r5, #0]
 800bb96:	461a      	mov	r2, r3
 800bb98:	f7f7 f835 	bl	8002c06 <_write>
 800bb9c:	1c43      	adds	r3, r0, #1
 800bb9e:	d102      	bne.n	800bba6 <_write_r+0x1e>
 800bba0:	682b      	ldr	r3, [r5, #0]
 800bba2:	b103      	cbz	r3, 800bba6 <_write_r+0x1e>
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	20000cd8 	.word	0x20000cd8

0800bbac <__assert_func>:
 800bbac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbae:	4614      	mov	r4, r2
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	4b09      	ldr	r3, [pc, #36]	; (800bbd8 <__assert_func+0x2c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	68d8      	ldr	r0, [r3, #12]
 800bbba:	b14c      	cbz	r4, 800bbd0 <__assert_func+0x24>
 800bbbc:	4b07      	ldr	r3, [pc, #28]	; (800bbdc <__assert_func+0x30>)
 800bbbe:	9100      	str	r1, [sp, #0]
 800bbc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbc4:	4906      	ldr	r1, [pc, #24]	; (800bbe0 <__assert_func+0x34>)
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	f000 f81e 	bl	800bc08 <fiprintf>
 800bbcc:	f000 f89f 	bl	800bd0e <abort>
 800bbd0:	4b04      	ldr	r3, [pc, #16]	; (800bbe4 <__assert_func+0x38>)
 800bbd2:	461c      	mov	r4, r3
 800bbd4:	e7f3      	b.n	800bbbe <__assert_func+0x12>
 800bbd6:	bf00      	nop
 800bbd8:	20000024 	.word	0x20000024
 800bbdc:	0800ce95 	.word	0x0800ce95
 800bbe0:	0800cea2 	.word	0x0800cea2
 800bbe4:	0800ced0 	.word	0x0800ced0

0800bbe8 <_close_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4d06      	ldr	r5, [pc, #24]	; (800bc04 <_close_r+0x1c>)
 800bbec:	2300      	movs	r3, #0
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	f7f7 f823 	bl	8002c3e <_close>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_close_r+0x1a>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_close_r+0x1a>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	20000cd8 	.word	0x20000cd8

0800bc08 <fiprintf>:
 800bc08:	b40e      	push	{r1, r2, r3}
 800bc0a:	b503      	push	{r0, r1, lr}
 800bc0c:	4601      	mov	r1, r0
 800bc0e:	ab03      	add	r3, sp, #12
 800bc10:	4805      	ldr	r0, [pc, #20]	; (800bc28 <fiprintf+0x20>)
 800bc12:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc16:	6800      	ldr	r0, [r0, #0]
 800bc18:	9301      	str	r3, [sp, #4]
 800bc1a:	f7ff fe31 	bl	800b880 <_vfiprintf_r>
 800bc1e:	b002      	add	sp, #8
 800bc20:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc24:	b003      	add	sp, #12
 800bc26:	4770      	bx	lr
 800bc28:	20000024 	.word	0x20000024

0800bc2c <_fstat_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4d07      	ldr	r5, [pc, #28]	; (800bc4c <_fstat_r+0x20>)
 800bc30:	2300      	movs	r3, #0
 800bc32:	4604      	mov	r4, r0
 800bc34:	4608      	mov	r0, r1
 800bc36:	4611      	mov	r1, r2
 800bc38:	602b      	str	r3, [r5, #0]
 800bc3a:	f7f7 f80c 	bl	8002c56 <_fstat>
 800bc3e:	1c43      	adds	r3, r0, #1
 800bc40:	d102      	bne.n	800bc48 <_fstat_r+0x1c>
 800bc42:	682b      	ldr	r3, [r5, #0]
 800bc44:	b103      	cbz	r3, 800bc48 <_fstat_r+0x1c>
 800bc46:	6023      	str	r3, [r4, #0]
 800bc48:	bd38      	pop	{r3, r4, r5, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20000cd8 	.word	0x20000cd8

0800bc50 <_isatty_r>:
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	4d06      	ldr	r5, [pc, #24]	; (800bc6c <_isatty_r+0x1c>)
 800bc54:	2300      	movs	r3, #0
 800bc56:	4604      	mov	r4, r0
 800bc58:	4608      	mov	r0, r1
 800bc5a:	602b      	str	r3, [r5, #0]
 800bc5c:	f7f7 f80b 	bl	8002c76 <_isatty>
 800bc60:	1c43      	adds	r3, r0, #1
 800bc62:	d102      	bne.n	800bc6a <_isatty_r+0x1a>
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	b103      	cbz	r3, 800bc6a <_isatty_r+0x1a>
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	bd38      	pop	{r3, r4, r5, pc}
 800bc6c:	20000cd8 	.word	0x20000cd8

0800bc70 <_lseek_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d07      	ldr	r5, [pc, #28]	; (800bc90 <_lseek_r+0x20>)
 800bc74:	4604      	mov	r4, r0
 800bc76:	4608      	mov	r0, r1
 800bc78:	4611      	mov	r1, r2
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	602a      	str	r2, [r5, #0]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	f7f7 f804 	bl	8002c8c <_lseek>
 800bc84:	1c43      	adds	r3, r0, #1
 800bc86:	d102      	bne.n	800bc8e <_lseek_r+0x1e>
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	b103      	cbz	r3, 800bc8e <_lseek_r+0x1e>
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	bd38      	pop	{r3, r4, r5, pc}
 800bc90:	20000cd8 	.word	0x20000cd8

0800bc94 <__ascii_mbtowc>:
 800bc94:	b082      	sub	sp, #8
 800bc96:	b901      	cbnz	r1, 800bc9a <__ascii_mbtowc+0x6>
 800bc98:	a901      	add	r1, sp, #4
 800bc9a:	b142      	cbz	r2, 800bcae <__ascii_mbtowc+0x1a>
 800bc9c:	b14b      	cbz	r3, 800bcb2 <__ascii_mbtowc+0x1e>
 800bc9e:	7813      	ldrb	r3, [r2, #0]
 800bca0:	600b      	str	r3, [r1, #0]
 800bca2:	7812      	ldrb	r2, [r2, #0]
 800bca4:	1e10      	subs	r0, r2, #0
 800bca6:	bf18      	it	ne
 800bca8:	2001      	movne	r0, #1
 800bcaa:	b002      	add	sp, #8
 800bcac:	4770      	bx	lr
 800bcae:	4610      	mov	r0, r2
 800bcb0:	e7fb      	b.n	800bcaa <__ascii_mbtowc+0x16>
 800bcb2:	f06f 0001 	mvn.w	r0, #1
 800bcb6:	e7f8      	b.n	800bcaa <__ascii_mbtowc+0x16>

0800bcb8 <__malloc_lock>:
 800bcb8:	4801      	ldr	r0, [pc, #4]	; (800bcc0 <__malloc_lock+0x8>)
 800bcba:	f7ff b8c0 	b.w	800ae3e <__retarget_lock_acquire_recursive>
 800bcbe:	bf00      	nop
 800bcc0:	20000ccc 	.word	0x20000ccc

0800bcc4 <__malloc_unlock>:
 800bcc4:	4801      	ldr	r0, [pc, #4]	; (800bccc <__malloc_unlock+0x8>)
 800bcc6:	f7ff b8bb 	b.w	800ae40 <__retarget_lock_release_recursive>
 800bcca:	bf00      	nop
 800bccc:	20000ccc 	.word	0x20000ccc

0800bcd0 <_read_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	4d07      	ldr	r5, [pc, #28]	; (800bcf0 <_read_r+0x20>)
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	4608      	mov	r0, r1
 800bcd8:	4611      	mov	r1, r2
 800bcda:	2200      	movs	r2, #0
 800bcdc:	602a      	str	r2, [r5, #0]
 800bcde:	461a      	mov	r2, r3
 800bce0:	f7f6 ff74 	bl	8002bcc <_read>
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d102      	bne.n	800bcee <_read_r+0x1e>
 800bce8:	682b      	ldr	r3, [r5, #0]
 800bcea:	b103      	cbz	r3, 800bcee <_read_r+0x1e>
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	20000cd8 	.word	0x20000cd8

0800bcf4 <__ascii_wctomb>:
 800bcf4:	b149      	cbz	r1, 800bd0a <__ascii_wctomb+0x16>
 800bcf6:	2aff      	cmp	r2, #255	; 0xff
 800bcf8:	bf85      	ittet	hi
 800bcfa:	238a      	movhi	r3, #138	; 0x8a
 800bcfc:	6003      	strhi	r3, [r0, #0]
 800bcfe:	700a      	strbls	r2, [r1, #0]
 800bd00:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd04:	bf98      	it	ls
 800bd06:	2001      	movls	r0, #1
 800bd08:	4770      	bx	lr
 800bd0a:	4608      	mov	r0, r1
 800bd0c:	4770      	bx	lr

0800bd0e <abort>:
 800bd0e:	b508      	push	{r3, lr}
 800bd10:	2006      	movs	r0, #6
 800bd12:	f000 f82b 	bl	800bd6c <raise>
 800bd16:	2001      	movs	r0, #1
 800bd18:	f7f6 ff4e 	bl	8002bb8 <_exit>

0800bd1c <_raise_r>:
 800bd1c:	291f      	cmp	r1, #31
 800bd1e:	b538      	push	{r3, r4, r5, lr}
 800bd20:	4604      	mov	r4, r0
 800bd22:	460d      	mov	r5, r1
 800bd24:	d904      	bls.n	800bd30 <_raise_r+0x14>
 800bd26:	2316      	movs	r3, #22
 800bd28:	6003      	str	r3, [r0, #0]
 800bd2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2e:	bd38      	pop	{r3, r4, r5, pc}
 800bd30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd32:	b112      	cbz	r2, 800bd3a <_raise_r+0x1e>
 800bd34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd38:	b94b      	cbnz	r3, 800bd4e <_raise_r+0x32>
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 f830 	bl	800bda0 <_getpid_r>
 800bd40:	462a      	mov	r2, r5
 800bd42:	4601      	mov	r1, r0
 800bd44:	4620      	mov	r0, r4
 800bd46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd4a:	f000 b817 	b.w	800bd7c <_kill_r>
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d00a      	beq.n	800bd68 <_raise_r+0x4c>
 800bd52:	1c59      	adds	r1, r3, #1
 800bd54:	d103      	bne.n	800bd5e <_raise_r+0x42>
 800bd56:	2316      	movs	r3, #22
 800bd58:	6003      	str	r3, [r0, #0]
 800bd5a:	2001      	movs	r0, #1
 800bd5c:	e7e7      	b.n	800bd2e <_raise_r+0x12>
 800bd5e:	2400      	movs	r4, #0
 800bd60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd64:	4628      	mov	r0, r5
 800bd66:	4798      	blx	r3
 800bd68:	2000      	movs	r0, #0
 800bd6a:	e7e0      	b.n	800bd2e <_raise_r+0x12>

0800bd6c <raise>:
 800bd6c:	4b02      	ldr	r3, [pc, #8]	; (800bd78 <raise+0xc>)
 800bd6e:	4601      	mov	r1, r0
 800bd70:	6818      	ldr	r0, [r3, #0]
 800bd72:	f7ff bfd3 	b.w	800bd1c <_raise_r>
 800bd76:	bf00      	nop
 800bd78:	20000024 	.word	0x20000024

0800bd7c <_kill_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	4d07      	ldr	r5, [pc, #28]	; (800bd9c <_kill_r+0x20>)
 800bd80:	2300      	movs	r3, #0
 800bd82:	4604      	mov	r4, r0
 800bd84:	4608      	mov	r0, r1
 800bd86:	4611      	mov	r1, r2
 800bd88:	602b      	str	r3, [r5, #0]
 800bd8a:	f7f6 ff05 	bl	8002b98 <_kill>
 800bd8e:	1c43      	adds	r3, r0, #1
 800bd90:	d102      	bne.n	800bd98 <_kill_r+0x1c>
 800bd92:	682b      	ldr	r3, [r5, #0]
 800bd94:	b103      	cbz	r3, 800bd98 <_kill_r+0x1c>
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	bd38      	pop	{r3, r4, r5, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20000cd8 	.word	0x20000cd8

0800bda0 <_getpid_r>:
 800bda0:	f7f6 bef2 	b.w	8002b88 <_getpid>

0800bda4 <_init>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	bf00      	nop
 800bda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdaa:	bc08      	pop	{r3}
 800bdac:	469e      	mov	lr, r3
 800bdae:	4770      	bx	lr

0800bdb0 <_fini>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	bf00      	nop
 800bdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdb6:	bc08      	pop	{r3}
 800bdb8:	469e      	mov	lr, r3
 800bdba:	4770      	bx	lr
