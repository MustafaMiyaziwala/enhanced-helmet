
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbf8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001194  0800cd98  0800cd98  0001cd98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df2c  0800df2c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800df2c  0800df2c  0001df2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df34  0800df34  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df34  0800df34  0001df34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df38  0800df38  0001df38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800df3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002338  200001f4  0800e130  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000252c  0800e130  0002252c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018aa4  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314d  00000000  00000000  00038cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0003be18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  0003d448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af57  00000000  00000000  0003e948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c880  00000000  00000000  0005989f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0c5f  00000000  00000000  0007611f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116d7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d4  00000000  00000000  00116dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cd80 	.word	0x0800cd80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800cd80 	.word	0x0800cd80

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <OV5462_write_i2c_reg>:
#include "OV5462.h"

uint8_t OV5462_write_i2c_reg(OV5462_t* ov5462, int addr, int data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	uint8_t buf[4];
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	121b      	asrs	r3, r3, #8
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	743b      	strb	r3, [r7, #16]
	buf[1] = (uint8_t)(addr & 0xFF); // lower addr byte
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	747b      	strb	r3, [r7, #17]
	buf[2] = data;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	74bb      	strb	r3, [r7, #18]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	f107 0210 	add.w	r2, r7, #16
 8000f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	2178      	movs	r1, #120	; 0x78
 8000f4e:	f002 ff91 	bl	8003e74 <HAL_I2C_Master_Transmit>
 8000f52:	4603      	mov	r3, r0
 8000f54:	75fb      	strb	r3, [r7, #23]

	if ( ret != HAL_OK ) {
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <OV5462_write_i2c_reg+0x44>
		return 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <OV5462_write_i2c_reg+0x46>
	}

	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <OV5462_write_i2c_regs>:

uint8_t OV5462_write_i2c_regs(OV5462_t* ov5462, const reg_value_pair regs[]) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
	const reg_value_pair* curr = regs;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef ret;

	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000f78:	e015      	b.n	8000fa6 <OV5462_write_i2c_regs+0x3c>
		ret = OV5462_write_i2c_reg(ov5462, curr->addr, curr->value);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	461a      	mov	r2, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffc8 	bl	8000f1c <OV5462_write_i2c_reg>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	72fb      	strb	r3, [r7, #11]
		// do we need a delay here?
		HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f002 f8d1 	bl	8003138 <HAL_Delay>
		++curr;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	60fb      	str	r3, [r7, #12]

		if ( ret != HAL_OK ) {
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <OV5462_write_i2c_regs+0x3c>
			return 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00a      	b.n	8000fbc <OV5462_write_i2c_regs+0x52>
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d1e3      	bne.n	8000f7a <OV5462_write_i2c_regs+0x10>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	789b      	ldrb	r3, [r3, #2]
 8000fb6:	2bff      	cmp	r3, #255	; 0xff
 8000fb8:	d1df      	bne.n	8000f7a <OV5462_write_i2c_regs+0x10>
		}
	}

	return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <OV5462_read_i2c_reg>:

uint8_t OV5462_read_i2c_reg(OV5462_t* ov5462, int addr) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	uint8_t buf[2];
	buf[0] = (uint8_t)(addr >> 8);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	121b      	asrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t)(addr & 0xFF);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 2, HAL_MAX_DELAY);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2302      	movs	r3, #2
 8000fec:	2179      	movs	r1, #121	; 0x79
 8000fee:	f002 ff41 	bl	8003e74 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 1, HAL_MAX_DELAY);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f107 020c 	add.w	r2, r7, #12
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2179      	movs	r1, #121	; 0x79
 8001004:	f003 f834 	bl	8004070 <HAL_I2C_Master_Receive>

	return buf[0];
 8001008:	7b3b      	ldrb	r3, [r7, #12]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <OV5462_write_spi_reg>:

void OV5462_write_spi_reg(OV5462_t* ov5462, uint8_t addr, uint8_t data) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
 8001020:	4613      	mov	r3, r2
 8001022:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <OV5462_write_spi_reg+0x5c>)
 800102a:	f002 fda1 	bl	8003b70 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr | 0x80 };
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001034:	b2db      	uxtb	r3, r3
 8001036:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6858      	ldr	r0, [r3, #4]
 800103c:	f107 010c 	add.w	r1, r7, #12
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	2201      	movs	r2, #1
 8001044:	f004 fa89 	bl	800555a <HAL_SPI_Transmit>
	buf[0] = data;
 8001048:	78bb      	ldrb	r3, [r7, #2]
 800104a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6858      	ldr	r0, [r3, #4]
 8001050:	f107 010c 	add.w	r1, r7, #12
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	2201      	movs	r2, #1
 8001058:	f004 fa7f 	bl	800555a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 800105c:	2201      	movs	r2, #1
 800105e:	2110      	movs	r1, #16
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <OV5462_write_spi_reg+0x5c>)
 8001062:	f002 fd85 	bl	8003b70 <HAL_GPIO_WritePin>

//	HAL_Delay(100);
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020800 	.word	0x40020800

08001074 <OV5462_read_spi_reg>:

uint8_t OV5462_read_spi_reg(OV5462_t* ov5462, uint8_t addr) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001080:	2200      	movs	r2, #0
 8001082:	2110      	movs	r1, #16
 8001084:	480f      	ldr	r0, [pc, #60]	; (80010c4 <OV5462_read_spi_reg+0x50>)
 8001086:	f002 fd73 	bl	8003b70 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr };
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6858      	ldr	r0, [r3, #4]
 8001092:	f107 010c 	add.w	r1, r7, #12
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	2201      	movs	r2, #1
 800109a:	f004 fa5e 	bl	800555a <HAL_SPI_Transmit>
	HAL_SPI_Receive(ov5462->hspi, buf, 1, 100);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6858      	ldr	r0, [r3, #4]
 80010a2:	f107 010c 	add.w	r1, r7, #12
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	2201      	movs	r2, #1
 80010aa:	f004 fb92 	bl	80057d2 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 80010ae:	2201      	movs	r2, #1
 80010b0:	2110      	movs	r1, #16
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <OV5462_read_spi_reg+0x50>)
 80010b4:	f002 fd5c 	bl	8003b70 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	return buf[0];
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020800 	.word	0x40020800

080010c8 <OV5462_init>:


uint8_t OV5462_init(OV5462_t* ov5462) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select is default HIGH
 80010d0:	2201      	movs	r2, #1
 80010d2:	2110      	movs	r1, #16
 80010d4:	482d      	ldr	r0, [pc, #180]	; (800118c <OV5462_init+0xc4>)
 80010d6:	f002 fd4b 	bl	8003b70 <HAL_GPIO_WritePin>

	OV5462_write_i2c_reg(ov5462, 0x3008, 0x80);
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	f243 0108 	movw	r1, #12296	; 0x3008
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff1b 	bl	8000f1c <OV5462_write_i2c_reg>
	OV5462_write_i2c_regs(ov5462, SET_QVGA_MODE); // determine if we need to do this for our application
 80010e6:	492a      	ldr	r1, [pc, #168]	; (8001190 <OV5462_init+0xc8>)
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff3e 	bl	8000f6a <OV5462_write_i2c_regs>

	uint8_t err = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
	// configure camera for JPEG capture
	err |= OV5462_write_i2c_regs(ov5462, CONFIGURE_JPEG_CAPTURE); // use JPEG capture mode
 80010f2:	4928      	ldr	r1, [pc, #160]	; (8001194 <OV5462_init+0xcc>)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff38 	bl	8000f6a <OV5462_write_i2c_regs>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4313      	orrs	r3, r2
 8001102:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_regs(ov5462, SET_RESOLUTION_320X240); // set sensor to low resolution
 8001104:	4924      	ldr	r1, [pc, #144]	; (8001198 <OV5462_init+0xd0>)
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff2f 	bl	8000f6a <OV5462_write_i2c_regs>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	4313      	orrs	r3, r2
 8001114:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3818, 0xa8);
 8001116:	22a8      	movs	r2, #168	; 0xa8
 8001118:	f643 0118 	movw	r1, #14360	; 0x3818
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fefd 	bl	8000f1c <OV5462_write_i2c_reg>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	4313      	orrs	r3, r2
 800112a:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3621, 0x10);
 800112c:	2210      	movs	r2, #16
 800112e:	f243 6121 	movw	r1, #13857	; 0x3621
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fef2 	bl	8000f1c <OV5462_write_i2c_reg>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	4313      	orrs	r3, r2
 8001140:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3801, 0xb0);
 8001142:	22b0      	movs	r2, #176	; 0xb0
 8001144:	f643 0101 	movw	r1, #14337	; 0x3801
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fee7 	bl	8000f1c <OV5462_write_i2c_reg>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	4313      	orrs	r3, r2
 8001156:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x4407, 0x04); // 04?
 8001158:	2204      	movs	r2, #4
 800115a:	f244 4107 	movw	r1, #17415	; 0x4407
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fedc 	bl	8000f1c <OV5462_write_i2c_reg>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4313      	orrs	r3, r2
 800116c:	73fb      	strb	r3, [r7, #15]

	OV5462_write_spi_reg(ov5462, OV5462_ARDUCHIP_TIM, OV5462_VSYNC_LEVEL_MASK);
 800116e:	2202      	movs	r2, #2
 8001170:	2103      	movs	r1, #3
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff4e 	bl	8001014 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8001178:	2201      	movs	r2, #1
 800117a:	2104      	movs	r1, #4
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff49 	bl	8001014 <OV5462_write_spi_reg>

	return err;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40020800 	.word	0x40020800
 8001190:	0800d078 	.word	0x0800d078
 8001194:	0800d998 	.word	0x0800d998
 8001198:	0800d00c 	.word	0x0800d00c

0800119c <OV5462_continuous_capture_init>:

void OV5462_continuous_capture_init(OV5462_t* ov5462) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	uint8_t camera_version = OV5462_read_spi_reg(ov5462, 0x40);
 80011a4:	2140      	movs	r1, #64	; 0x40
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff64 	bl	8001074 <OV5462_read_spi_reg>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73bb      	strb	r3, [r7, #14]
	uint8_t frames;

	// set continuous capture (depends on version)
	if (camera_version && 0x70) {
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <OV5462_continuous_capture_init+0x20>
		frames = 0xFF;
 80011b6:	23ff      	movs	r3, #255	; 0xff
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e001      	b.n	80011c0 <OV5462_continuous_capture_init+0x24>
	} else {
		frames = 0x07;
 80011bc:	2307      	movs	r3, #7
 80011be:	73fb      	strb	r3, [r7, #15]
	}

	OV5462_write_spi_reg(ov5462, ARDUCHIP_FRAMES, frames);
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	461a      	mov	r2, r3
 80011c4:	2101      	movs	r1, #1
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff24 	bl	8001014 <OV5462_write_spi_reg>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <OV5462_read_fifo_length>:

uint32_t OV5462_read_fifo_length(OV5462_t* ov5462) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	uint32_t lower, middle, upper;
	lower = OV5462_read_spi_reg(ov5462, FIFO_SIZE_LOWER);
 80011dc:	2142      	movs	r1, #66	; 0x42
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff48 	bl	8001074 <OV5462_read_spi_reg>
 80011e4:	4603      	mov	r3, r0
 80011e6:	617b      	str	r3, [r7, #20]
	middle = OV5462_read_spi_reg(ov5462, FIFO_SIZE_MIDDLE);
 80011e8:	2143      	movs	r1, #67	; 0x43
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff42 	bl	8001074 <OV5462_read_spi_reg>
 80011f0:	4603      	mov	r3, r0
 80011f2:	613b      	str	r3, [r7, #16]
	upper = OV5462_read_spi_reg(ov5462, FIFO_SIZE_UPPER);
 80011f4:	2144      	movs	r1, #68	; 0x44
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff3c 	bl	8001074 <OV5462_read_spi_reg>
 80011fc:	4603      	mov	r3, r0
 80011fe:	60fb      	str	r3, [r7, #12]

	return ((upper << 16) | (middle << 8) | lower) & 0x07fffff;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	041a      	lsls	r2, r3, #16
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <OV5462_request_FIFO_burst>:

void OV5462_request_FIFO_burst(OV5462_t* ov5462) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
	uint8_t buf[1] = { BURST_FIFO_READ };
 8001222:	233c      	movs	r3, #60	; 0x3c
 8001224:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6858      	ldr	r0, [r3, #4]
 800122a:	f107 010c 	add.w	r1, r7, #12
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	2201      	movs	r2, #1
 8001232:	f004 f992 	bl	800555a <HAL_SPI_Transmit>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <SPI_OptimizedReadByte>:

void SPI_OptimizedReadByte(uint8_t* data) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	while (((SPI1->SR)&(1>>7))) {}; // wait for BSY bit to reset
 8001248:	bf00      	nop
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <SPI_OptimizedReadByte+0x38>)
 800124c:	689b      	ldr	r3, [r3, #8]
	SPI1->DR = 0; // dummy byte
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <SPI_OptimizedReadByte+0x38>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
	while (!((SPI1->SR) & (1<<0))) {};
 8001254:	bf00      	nop
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <SPI_OptimizedReadByte+0x38>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f9      	beq.n	8001256 <SPI_OptimizedReadByte+0x16>
	*data = SPI1->DR;
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SPI_OptimizedReadByte+0x38>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	701a      	strb	r2, [r3, #0]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40013000 	.word	0x40013000

0800127c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2102      	movs	r1, #2
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <SELECT+0x18>)
 8001286:	f002 fc73 	bl	8003b70 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f001 ff54 	bl	8003138 <HAL_Delay>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40020800 	.word	0x40020800

08001298 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2102      	movs	r1, #2
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <DESELECT+0x18>)
 80012a2:	f002 fc65 	bl	8003b70 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f001 ff46 	bl	8003138 <HAL_Delay>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40020800 	.word	0x40020800

080012b4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012be:	bf00      	nop
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <SPI_TxByte+0x30>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d1f8      	bne.n	80012c0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80012ce:	1df9      	adds	r1, r7, #7
 80012d0:	2364      	movs	r3, #100	; 0x64
 80012d2:	2201      	movs	r2, #1
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <SPI_TxByte+0x30>)
 80012d6:	f004 f940 	bl	800555a <HAL_SPI_Transmit>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000030c 	.word	0x2000030c

080012e8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012f4:	bf00      	nop
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <SPI_TxBuffer+0x30>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b02      	cmp	r3, #2
 8001302:	d1f8      	bne.n	80012f6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001304:	887a      	ldrh	r2, [r7, #2]
 8001306:	2364      	movs	r3, #100	; 0x64
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	4803      	ldr	r0, [pc, #12]	; (8001318 <SPI_TxBuffer+0x30>)
 800130c:	f004 f925 	bl	800555a <HAL_SPI_Transmit>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000030c 	.word	0x2000030c

0800131c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001322:	23ff      	movs	r3, #255	; 0xff
 8001324:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001326:	bf00      	nop
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <SPI_RxByte+0x34>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b02      	cmp	r3, #2
 8001334:	d1f8      	bne.n	8001328 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001336:	1dba      	adds	r2, r7, #6
 8001338:	1df9      	adds	r1, r7, #7
 800133a:	2364      	movs	r3, #100	; 0x64
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2301      	movs	r3, #1
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <SPI_RxByte+0x34>)
 8001342:	f004 fb57 	bl	80059f4 <HAL_SPI_TransmitReceive>

	return data;
 8001346:	79bb      	ldrb	r3, [r7, #6]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000030c 	.word	0x2000030c

08001354 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800135c:	f7ff ffde 	bl	800131c <SPI_RxByte>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	701a      	strb	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <SD_ReadyWait+0x30>)
 8001378:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800137c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800137e:	f7ff ffcd 	bl	800131c <SPI_RxByte>
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d003      	beq.n	8001394 <SD_ReadyWait+0x24>
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SD_ReadyWait+0x30>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f4      	bne.n	800137e <SD_ReadyWait+0xe>

	return res;
 8001394:	79fb      	ldrb	r3, [r7, #7]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000212 	.word	0x20000212

080013a4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80013aa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013ae:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80013b0:	f7ff ff72 	bl	8001298 <DESELECT>
	for(int i = 0; i < 10; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	e005      	b.n	80013c6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80013ba:	20ff      	movs	r0, #255	; 0xff
 80013bc:	f7ff ff7a 	bl	80012b4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b09      	cmp	r3, #9
 80013ca:	ddf6      	ble.n	80013ba <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80013cc:	f7ff ff56 	bl	800127c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80013d0:	2340      	movs	r3, #64	; 0x40
 80013d2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80013e4:	2395      	movs	r3, #149	; 0x95
 80013e6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80013e8:	463b      	mov	r3, r7
 80013ea:	2106      	movs	r1, #6
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff7b 	bl	80012e8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80013f2:	e002      	b.n	80013fa <SD_PowerOn+0x56>
	{
		cnt--;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80013fa:	f7ff ff8f 	bl	800131c <SPI_RxByte>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b01      	cmp	r3, #1
 8001402:	d002      	beq.n	800140a <SD_PowerOn+0x66>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f4      	bne.n	80013f4 <SD_PowerOn+0x50>
	}

	DESELECT();
 800140a:	f7ff ff45 	bl	8001298 <DESELECT>
	SPI_TxByte(0XFF);
 800140e:	20ff      	movs	r0, #255	; 0xff
 8001410:	f7ff ff50 	bl	80012b4 <SPI_TxByte>

	PowerFlag = 1;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <SD_PowerOn+0x80>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000215 	.word	0x20000215

08001428 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <SD_PowerOff+0x14>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000215 	.word	0x20000215

08001440 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <SD_CheckPower+0x14>)
 8001446:	781b      	ldrb	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000215 	.word	0x20000215

08001458 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <SD_RxDataBlock+0x58>)
 8001464:	22c8      	movs	r2, #200	; 0xc8
 8001466:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001468:	f7ff ff58 	bl	800131c <SPI_RxByte>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2bff      	cmp	r3, #255	; 0xff
 8001474:	d103      	bne.n	800147e <SD_RxDataBlock+0x26>
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <SD_RxDataBlock+0x58>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f4      	bne.n	8001468 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2bfe      	cmp	r3, #254	; 0xfe
 8001482:	d001      	beq.n	8001488 <SD_RxDataBlock+0x30>
 8001484:	2300      	movs	r3, #0
 8001486:	e00f      	b.n	80014a8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff60 	bl	8001354 <SPI_RxBytePtr>
	} while(len--);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	1e5a      	subs	r2, r3, #1
 8001498:	603a      	str	r2, [r7, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f4      	bne.n	8001488 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800149e:	f7ff ff3d 	bl	800131c <SPI_RxByte>
	SPI_RxByte();
 80014a2:	f7ff ff3b 	bl	800131c <SPI_RxByte>

	return TRUE;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000210 	.word	0x20000210

080014b4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80014c4:	f7ff ff54 	bl	8001370 <SD_ReadyWait>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2bff      	cmp	r3, #255	; 0xff
 80014cc:	d001      	beq.n	80014d2 <SD_TxDataBlock+0x1e>
 80014ce:	2300      	movs	r3, #0
 80014d0:	e02f      	b.n	8001532 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff feed 	bl	80012b4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	2bfd      	cmp	r3, #253	; 0xfd
 80014de:	d020      	beq.n	8001522 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80014e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff feff 	bl	80012e8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80014ea:	f7ff ff17 	bl	800131c <SPI_RxByte>
		SPI_RxByte();
 80014ee:	f7ff ff15 	bl	800131c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80014f2:	e00b      	b.n	800150c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80014f4:	f7ff ff12 	bl	800131c <SPI_RxByte>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	2b05      	cmp	r3, #5
 8001504:	d006      	beq.n	8001514 <SD_TxDataBlock+0x60>
			i++;
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	3301      	adds	r3, #1
 800150a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	2b40      	cmp	r3, #64	; 0x40
 8001510:	d9f0      	bls.n	80014f4 <SD_TxDataBlock+0x40>
 8001512:	e000      	b.n	8001516 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001514:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001516:	bf00      	nop
 8001518:	f7ff ff00 	bl	800131c <SPI_RxByte>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0fa      	beq.n	8001518 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	2b05      	cmp	r3, #5
 800152a:	d101      	bne.n	8001530 <SD_TxDataBlock+0x7c>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	6039      	str	r1, [r7, #0]
 8001544:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001546:	f7ff ff13 	bl	8001370 <SD_ReadyWait>
 800154a:	4603      	mov	r3, r0
 800154c:	2bff      	cmp	r3, #255	; 0xff
 800154e:	d001      	beq.n	8001554 <SD_SendCmd+0x1a>
 8001550:	23ff      	movs	r3, #255	; 0xff
 8001552:	e042      	b.n	80015da <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff feac 	bl	80012b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	0e1b      	lsrs	r3, r3, #24
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fea6 	bl	80012b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fea0 	bl	80012b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe9a 	bl	80012b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fe95 	bl	80012b4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b40      	cmp	r3, #64	; 0x40
 800158e:	d102      	bne.n	8001596 <SD_SendCmd+0x5c>
 8001590:	2395      	movs	r3, #149	; 0x95
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e007      	b.n	80015a6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b48      	cmp	r3, #72	; 0x48
 800159a:	d102      	bne.n	80015a2 <SD_SendCmd+0x68>
 800159c:	2387      	movs	r3, #135	; 0x87
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e001      	b.n	80015a6 <SD_SendCmd+0x6c>
	else crc = 1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fe83 	bl	80012b4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b4c      	cmp	r3, #76	; 0x4c
 80015b2:	d101      	bne.n	80015b8 <SD_SendCmd+0x7e>
 80015b4:	f7ff feb2 	bl	800131c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80015b8:	230a      	movs	r3, #10
 80015ba:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80015bc:	f7ff feae 	bl	800131c <SPI_RxByte>
 80015c0:	4603      	mov	r3, r0
 80015c2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80015c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da05      	bge.n	80015d8 <SD_SendCmd+0x9e>
 80015cc:	7bbb      	ldrb	r3, [r7, #14]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	73bb      	strb	r3, [r7, #14]
 80015d2:	7bbb      	ldrb	r3, [r7, #14]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f1      	bne.n	80015bc <SD_SendCmd+0x82>

	return res;
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SD_disk_initialize+0x14>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0d1      	b.n	800179c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80015f8:	4b6a      	ldr	r3, [pc, #424]	; (80017a4 <SD_disk_initialize+0x1c0>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <SD_disk_initialize+0x2a>
 8001606:	4b67      	ldr	r3, [pc, #412]	; (80017a4 <SD_disk_initialize+0x1c0>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	e0c6      	b.n	800179c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800160e:	f7ff fec9 	bl	80013a4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001612:	f7ff fe33 	bl	800127c <SELECT>

	/* check disk type */
	type = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800161a:	2100      	movs	r1, #0
 800161c:	2040      	movs	r0, #64	; 0x40
 800161e:	f7ff ff8c 	bl	800153a <SD_SendCmd>
 8001622:	4603      	mov	r3, r0
 8001624:	2b01      	cmp	r3, #1
 8001626:	f040 80a1 	bne.w	800176c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800162a:	4b5f      	ldr	r3, [pc, #380]	; (80017a8 <SD_disk_initialize+0x1c4>)
 800162c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001630:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001632:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001636:	2048      	movs	r0, #72	; 0x48
 8001638:	f7ff ff7f 	bl	800153a <SD_SendCmd>
 800163c:	4603      	mov	r3, r0
 800163e:	2b01      	cmp	r3, #1
 8001640:	d155      	bne.n	80016ee <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e00c      	b.n	8001662 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001648:	7bfc      	ldrb	r4, [r7, #15]
 800164a:	f7ff fe67 	bl	800131c <SPI_RxByte>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	f104 0310 	add.w	r3, r4, #16
 8001656:	443b      	add	r3, r7
 8001658:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	3301      	adds	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d9ef      	bls.n	8001648 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001668:	7abb      	ldrb	r3, [r7, #10]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d17e      	bne.n	800176c <SD_disk_initialize+0x188>
 800166e:	7afb      	ldrb	r3, [r7, #11]
 8001670:	2baa      	cmp	r3, #170	; 0xaa
 8001672:	d17b      	bne.n	800176c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001674:	2100      	movs	r1, #0
 8001676:	2077      	movs	r0, #119	; 0x77
 8001678:	f7ff ff5f 	bl	800153a <SD_SendCmd>
 800167c:	4603      	mov	r3, r0
 800167e:	2b01      	cmp	r3, #1
 8001680:	d807      	bhi.n	8001692 <SD_disk_initialize+0xae>
 8001682:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001686:	2069      	movs	r0, #105	; 0x69
 8001688:	f7ff ff57 	bl	800153a <SD_SendCmd>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001692:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <SD_disk_initialize+0x1c4>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ec      	bne.n	8001674 <SD_disk_initialize+0x90>
 800169a:	e000      	b.n	800169e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800169c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800169e:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <SD_disk_initialize+0x1c4>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d062      	beq.n	800176c <SD_disk_initialize+0x188>
 80016a6:	2100      	movs	r1, #0
 80016a8:	207a      	movs	r0, #122	; 0x7a
 80016aa:	f7ff ff46 	bl	800153a <SD_SendCmd>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d15b      	bne.n	800176c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e00c      	b.n	80016d4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80016ba:	7bfc      	ldrb	r4, [r7, #15]
 80016bc:	f7ff fe2e 	bl	800131c <SPI_RxByte>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	f104 0310 	add.w	r3, r4, #16
 80016c8:	443b      	add	r3, r7
 80016ca:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d9ef      	bls.n	80016ba <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80016da:	7a3b      	ldrb	r3, [r7, #8]
 80016dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SD_disk_initialize+0x104>
 80016e4:	230c      	movs	r3, #12
 80016e6:	e000      	b.n	80016ea <SD_disk_initialize+0x106>
 80016e8:	2304      	movs	r3, #4
 80016ea:	73bb      	strb	r3, [r7, #14]
 80016ec:	e03e      	b.n	800176c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80016ee:	2100      	movs	r1, #0
 80016f0:	2077      	movs	r0, #119	; 0x77
 80016f2:	f7ff ff22 	bl	800153a <SD_SendCmd>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d808      	bhi.n	800170e <SD_disk_initialize+0x12a>
 80016fc:	2100      	movs	r1, #0
 80016fe:	2069      	movs	r0, #105	; 0x69
 8001700:	f7ff ff1b 	bl	800153a <SD_SendCmd>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	d801      	bhi.n	800170e <SD_disk_initialize+0x12a>
 800170a:	2302      	movs	r3, #2
 800170c:	e000      	b.n	8001710 <SD_disk_initialize+0x12c>
 800170e:	2301      	movs	r3, #1
 8001710:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001712:	7bbb      	ldrb	r3, [r7, #14]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d10e      	bne.n	8001736 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001718:	2100      	movs	r1, #0
 800171a:	2077      	movs	r0, #119	; 0x77
 800171c:	f7ff ff0d 	bl	800153a <SD_SendCmd>
 8001720:	4603      	mov	r3, r0
 8001722:	2b01      	cmp	r3, #1
 8001724:	d80e      	bhi.n	8001744 <SD_disk_initialize+0x160>
 8001726:	2100      	movs	r1, #0
 8001728:	2069      	movs	r0, #105	; 0x69
 800172a:	f7ff ff06 	bl	800153a <SD_SendCmd>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <SD_disk_initialize+0x160>
 8001734:	e00c      	b.n	8001750 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001736:	2100      	movs	r1, #0
 8001738:	2041      	movs	r0, #65	; 0x41
 800173a:	f7ff fefe 	bl	800153a <SD_SendCmd>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <SD_disk_initialize+0x1c4>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e2      	bne.n	8001712 <SD_disk_initialize+0x12e>
 800174c:	e000      	b.n	8001750 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800174e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <SD_disk_initialize+0x1c4>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d007      	beq.n	8001768 <SD_disk_initialize+0x184>
 8001758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175c:	2050      	movs	r0, #80	; 0x50
 800175e:	f7ff feec 	bl	800153a <SD_SendCmd>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SD_disk_initialize+0x188>
 8001768:	2300      	movs	r3, #0
 800176a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <SD_disk_initialize+0x1c8>)
 800176e:	7bbb      	ldrb	r3, [r7, #14]
 8001770:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001772:	f7ff fd91 	bl	8001298 <DESELECT>
	SPI_RxByte();
 8001776:	f7ff fdd1 	bl	800131c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <SD_disk_initialize+0x1c0>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SD_disk_initialize+0x1c0>)
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e001      	b.n	8001796 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001792:	f7ff fe49 	bl	8001428 <SD_PowerOff>
	}

	return Stat;
 8001796:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <SD_disk_initialize+0x1c0>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000210 	.word	0x20000210
 80017ac:	20000214 	.word	0x20000214

080017b0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SD_disk_status+0x14>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e002      	b.n	80017ca <SD_disk_status+0x1a>
	return Stat;
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SD_disk_status+0x28>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000000 	.word	0x20000000

080017dc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <SD_disk_read+0x1c>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <SD_disk_read+0x20>
 80017f8:	2304      	movs	r3, #4
 80017fa:	e051      	b.n	80018a0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <SD_disk_read+0xcc>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SD_disk_read+0x32>
 800180a:	2303      	movs	r3, #3
 800180c:	e048      	b.n	80018a0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <SD_disk_read+0xd0>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <SD_disk_read+0x44>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001820:	f7ff fd2c 	bl	800127c <SELECT>

	if (count == 1)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d111      	bne.n	800184e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	2051      	movs	r0, #81	; 0x51
 800182e:	f7ff fe84 	bl	800153a <SD_SendCmd>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d129      	bne.n	800188c <SD_disk_read+0xb0>
 8001838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800183c:	68b8      	ldr	r0, [r7, #8]
 800183e:	f7ff fe0b 	bl	8001458 <SD_RxDataBlock>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d021      	beq.n	800188c <SD_disk_read+0xb0>
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	e01e      	b.n	800188c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	2052      	movs	r0, #82	; 0x52
 8001852:	f7ff fe72 	bl	800153a <SD_SendCmd>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d117      	bne.n	800188c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800185c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001860:	68b8      	ldr	r0, [r7, #8]
 8001862:	f7ff fdf9 	bl	8001458 <SD_RxDataBlock>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <SD_disk_read+0xa6>
				buff += 512;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001872:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	3b01      	subs	r3, #1
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ed      	bne.n	800185c <SD_disk_read+0x80>
 8001880:	e000      	b.n	8001884 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001882:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001884:	2100      	movs	r1, #0
 8001886:	204c      	movs	r0, #76	; 0x4c
 8001888:	f7ff fe57 	bl	800153a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800188c:	f7ff fd04 	bl	8001298 <DESELECT>
	SPI_RxByte();
 8001890:	f7ff fd44 	bl	800131c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000214 	.word	0x20000214

080018b0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	4603      	mov	r3, r0
 80018be:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <SD_disk_write+0x1c>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <SD_disk_write+0x20>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e06b      	b.n	80019a8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80018d0:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <SD_disk_write+0x100>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SD_disk_write+0x32>
 80018de:	2303      	movs	r3, #3
 80018e0:	e062      	b.n	80019a8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <SD_disk_write+0x100>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SD_disk_write+0x44>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e059      	b.n	80019a8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <SD_disk_write+0x104>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <SD_disk_write+0x56>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	025b      	lsls	r3, r3, #9
 8001904:	607b      	str	r3, [r7, #4]

	SELECT();
 8001906:	f7ff fcb9 	bl	800127c <SELECT>

	if (count == 1)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d110      	bne.n	8001932 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	2058      	movs	r0, #88	; 0x58
 8001914:	f7ff fe11 	bl	800153a <SD_SendCmd>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d13a      	bne.n	8001994 <SD_disk_write+0xe4>
 800191e:	21fe      	movs	r1, #254	; 0xfe
 8001920:	68b8      	ldr	r0, [r7, #8]
 8001922:	f7ff fdc7 	bl	80014b4 <SD_TxDataBlock>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d033      	beq.n	8001994 <SD_disk_write+0xe4>
			count = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	e030      	b.n	8001994 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <SD_disk_write+0x104>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800193e:	2100      	movs	r1, #0
 8001940:	2077      	movs	r0, #119	; 0x77
 8001942:	f7ff fdfa 	bl	800153a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	2057      	movs	r0, #87	; 0x57
 800194a:	f7ff fdf6 	bl	800153a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	2059      	movs	r0, #89	; 0x59
 8001952:	f7ff fdf2 	bl	800153a <SD_SendCmd>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d11b      	bne.n	8001994 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800195c:	21fc      	movs	r1, #252	; 0xfc
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f7ff fda8 	bl	80014b4 <SD_TxDataBlock>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00a      	beq.n	8001980 <SD_disk_write+0xd0>
				buff += 512;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001970:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	3b01      	subs	r3, #1
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ee      	bne.n	800195c <SD_disk_write+0xac>
 800197e:	e000      	b.n	8001982 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001980:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001982:	21fd      	movs	r1, #253	; 0xfd
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fd95 	bl	80014b4 <SD_TxDataBlock>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <SD_disk_write+0xe4>
			{
				count = 1;
 8001990:	2301      	movs	r3, #1
 8001992:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001994:	f7ff fc80 	bl	8001298 <DESELECT>
	SPI_RxByte();
 8001998:	f7ff fcc0 	bl	800131c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000214 	.word	0x20000214

080019b8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b08b      	sub	sp, #44	; 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	603a      	str	r2, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	460b      	mov	r3, r1
 80019c6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SD_disk_ioctl+0x1e>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e115      	b.n	8001c02 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d124      	bne.n	8001a2c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d012      	beq.n	8001a10 <SD_disk_ioctl+0x58>
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	dc1a      	bgt.n	8001a24 <SD_disk_ioctl+0x6c>
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <SD_disk_ioctl+0x40>
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d006      	beq.n	8001a04 <SD_disk_ioctl+0x4c>
 80019f6:	e015      	b.n	8001a24 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80019f8:	f7ff fd16 	bl	8001428 <SD_PowerOff>
			res = RES_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a02:	e0fc      	b.n	8001bfe <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001a04:	f7ff fcce 	bl	80013a4 <SD_PowerOn>
			res = RES_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a0e:	e0f6      	b.n	8001bfe <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	1c5c      	adds	r4, r3, #1
 8001a14:	f7ff fd14 	bl	8001440 <SD_CheckPower>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a22:	e0ec      	b.n	8001bfe <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001a24:	2304      	movs	r3, #4
 8001a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a2a:	e0e8      	b.n	8001bfe <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001a2c:	4b77      	ldr	r3, [pc, #476]	; (8001c0c <SD_disk_ioctl+0x254>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SD_disk_ioctl+0x86>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e0e1      	b.n	8001c02 <SD_disk_ioctl+0x24a>

		SELECT();
 8001a3e:	f7ff fc1d 	bl	800127c <SELECT>

		switch (ctrl)
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	2b0d      	cmp	r3, #13
 8001a46:	f200 80cb 	bhi.w	8001be0 <SD_disk_ioctl+0x228>
 8001a4a:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <SD_disk_ioctl+0x98>)
 8001a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a50:	08001b4b 	.word	0x08001b4b
 8001a54:	08001a89 	.word	0x08001a89
 8001a58:	08001b3b 	.word	0x08001b3b
 8001a5c:	08001be1 	.word	0x08001be1
 8001a60:	08001be1 	.word	0x08001be1
 8001a64:	08001be1 	.word	0x08001be1
 8001a68:	08001be1 	.word	0x08001be1
 8001a6c:	08001be1 	.word	0x08001be1
 8001a70:	08001be1 	.word	0x08001be1
 8001a74:	08001be1 	.word	0x08001be1
 8001a78:	08001be1 	.word	0x08001be1
 8001a7c:	08001b5d 	.word	0x08001b5d
 8001a80:	08001b81 	.word	0x08001b81
 8001a84:	08001ba5 	.word	0x08001ba5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2049      	movs	r0, #73	; 0x49
 8001a8c:	f7ff fd55 	bl	800153a <SD_SendCmd>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 80a8 	bne.w	8001be8 <SD_disk_ioctl+0x230>
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fcda 	bl	8001458 <SD_RxDataBlock>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 809e 	beq.w	8001be8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001aac:	7b3b      	ldrb	r3, [r7, #12]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d10e      	bne.n	8001ad4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001ab6:	7d7b      	ldrb	r3, [r7, #21]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	7d3b      	ldrb	r3, [r7, #20]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001aca:	8bfb      	ldrh	r3, [r7, #30]
 8001acc:	029a      	lsls	r2, r3, #10
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e02e      	b.n	8001b32 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001ad4:	7c7b      	ldrb	r3, [r7, #17]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	7dbb      	ldrb	r3, [r7, #22]
 8001ade:	09db      	lsrs	r3, r3, #7
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	7d7b      	ldrb	r3, [r7, #21]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f003 0306 	and.w	r3, r3, #6
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3302      	adds	r3, #2
 8001af8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001afc:	7d3b      	ldrb	r3, [r7, #20]
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	7cfb      	ldrb	r3, [r7, #19]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	7cbb      	ldrb	r3, [r7, #18]
 8001b12:	029b      	lsls	r3, r3, #10
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b24:	8bfa      	ldrh	r2, [r7, #30]
 8001b26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b2a:	3b09      	subs	r3, #9
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001b38:	e056      	b.n	8001be8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b40:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b48:	e055      	b.n	8001bf6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001b4a:	f7ff fc11 	bl	8001370 <SD_ReadyWait>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2bff      	cmp	r3, #255	; 0xff
 8001b52:	d14b      	bne.n	8001bec <SD_disk_ioctl+0x234>
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b5a:	e047      	b.n	8001bec <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2049      	movs	r0, #73	; 0x49
 8001b60:	f7ff fceb 	bl	800153a <SD_SendCmd>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d142      	bne.n	8001bf0 <SD_disk_ioctl+0x238>
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	6a38      	ldr	r0, [r7, #32]
 8001b6e:	f7ff fc73 	bl	8001458 <SD_RxDataBlock>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d03b      	beq.n	8001bf0 <SD_disk_ioctl+0x238>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b7e:	e037      	b.n	8001bf0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b80:	2100      	movs	r1, #0
 8001b82:	204a      	movs	r0, #74	; 0x4a
 8001b84:	f7ff fcd9 	bl	800153a <SD_SendCmd>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d132      	bne.n	8001bf4 <SD_disk_ioctl+0x23c>
 8001b8e:	2110      	movs	r1, #16
 8001b90:	6a38      	ldr	r0, [r7, #32]
 8001b92:	f7ff fc61 	bl	8001458 <SD_RxDataBlock>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d02b      	beq.n	8001bf4 <SD_disk_ioctl+0x23c>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ba2:	e027      	b.n	8001bf4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	207a      	movs	r0, #122	; 0x7a
 8001ba8:	f7ff fcc7 	bl	800153a <SD_SendCmd>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d116      	bne.n	8001be0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bb8:	e00b      	b.n	8001bd2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001bba:	6a3c      	ldr	r4, [r7, #32]
 8001bbc:	1c63      	adds	r3, r4, #1
 8001bbe:	623b      	str	r3, [r7, #32]
 8001bc0:	f7ff fbac 	bl	800131c <SPI_RxByte>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d9ef      	bls.n	8001bba <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001be0:	2304      	movs	r3, #4
 8001be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001be6:	e006      	b.n	8001bf6 <SD_disk_ioctl+0x23e>
			break;
 8001be8:	bf00      	nop
 8001bea:	e004      	b.n	8001bf6 <SD_disk_ioctl+0x23e>
			break;
 8001bec:	bf00      	nop
 8001bee:	e002      	b.n	8001bf6 <SD_disk_ioctl+0x23e>
			break;
 8001bf0:	bf00      	nop
 8001bf2:	e000      	b.n	8001bf6 <SD_disk_ioctl+0x23e>
			break;
 8001bf4:	bf00      	nop
		}

		DESELECT();
 8001bf6:	f7ff fb4f 	bl	8001298 <DESELECT>
		SPI_RxByte();
 8001bfa:	f7ff fb8f 	bl	800131c <SPI_RxByte>
	}

	return res;
 8001bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	372c      	adds	r7, #44	; 0x2c
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd90      	pop	{r4, r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000

08001c10 <testSD>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int testSD() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
/* Mount SD Card */
	int ret = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
	if(f_mount(&fs, "/", 0) != FR_OK) {
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	495d      	ldr	r1, [pc, #372]	; (8001d94 <testSD+0x184>)
 8001c1e:	485e      	ldr	r0, [pc, #376]	; (8001d98 <testSD+0x188>)
 8001c20:	f007 f8ae 	bl	8008d80 <f_mount>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <testSD+0x26>
		printf("Failed to mount SD Card\r\n");
 8001c2a:	485c      	ldr	r0, [pc, #368]	; (8001d9c <testSD+0x18c>)
 8001c2c:	f008 fefc 	bl	800aa28 <puts>
		return -1;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c34:	e0a9      	b.n	8001d8a <testSD+0x17a>
	}

	/* Open file to write */
	ret = f_open(&fil, "/TEST.TXT", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001c36:	2213      	movs	r2, #19
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <testSD+0x190>)
 8001c3a:	485a      	ldr	r0, [pc, #360]	; (8001da4 <testSD+0x194>)
 8001c3c:	f007 f8e6 	bl	8008e0c <f_open>
 8001c40:	4603      	mov	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d006      	beq.n	8001c58 <testSD+0x48>
		printf("Failed to open file (%i) \r\n", ret);
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	4856      	ldr	r0, [pc, #344]	; (8001da8 <testSD+0x198>)
 8001c4e:	f008 fe65 	bl	800a91c <iprintf>
		return -1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c56:	e098      	b.n	8001d8a <testSD+0x17a>
	}

	if(f_getfree("", &fre_clust, &pfs) != FR_OK) {
 8001c58:	4a54      	ldr	r2, [pc, #336]	; (8001dac <testSD+0x19c>)
 8001c5a:	4955      	ldr	r1, [pc, #340]	; (8001db0 <testSD+0x1a0>)
 8001c5c:	4855      	ldr	r0, [pc, #340]	; (8001db4 <testSD+0x1a4>)
 8001c5e:	f007 fe3c 	bl	80098da <f_getfree>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <testSD+0x64>
		printf("Free space check failed\r\n");
 8001c68:	4853      	ldr	r0, [pc, #332]	; (8001db8 <testSD+0x1a8>)
 8001c6a:	f008 fedd 	bl	800aa28 <puts>
		return -1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c72:	e08a      	b.n	8001d8a <testSD+0x17a>
	}

	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001c74:	4b4d      	ldr	r3, [pc, #308]	; (8001dac <testSD+0x19c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	3b02      	subs	r3, #2
 8001c7c:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <testSD+0x19c>)
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	8952      	ldrh	r2, [r2, #10]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc54 	bl	8000534 <__aeabi_ui2d>
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <testSD+0x1ac>)
 8001c92:	f7fe fcc9 	bl	8000628 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe ff9b 	bl	8000bd8 <__aeabi_d2uiz>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a46      	ldr	r2, [pc, #280]	; (8001dc0 <testSD+0x1b0>)
 8001ca6:	6013      	str	r3, [r2, #0]
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001ca8:	4b40      	ldr	r3, [pc, #256]	; (8001dac <testSD+0x19c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	895b      	ldrh	r3, [r3, #10]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <testSD+0x1a0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc3b 	bl	8000534 <__aeabi_ui2d>
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <testSD+0x1ac>)
 8001cc4:	f7fe fcb0 	bl	8000628 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe ff82 	bl	8000bd8 <__aeabi_d2uiz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a3b      	ldr	r2, [pc, #236]	; (8001dc4 <testSD+0x1b4>)
 8001cd8:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if(free_space < 1) {
 8001cda:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <testSD+0x1b4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <testSD+0xde>
		printf("Drive is full\r\n");
 8001ce2:	4839      	ldr	r0, [pc, #228]	; (8001dc8 <testSD+0x1b8>)
 8001ce4:	f008 fea0 	bl	800aa28 <puts>
		return -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cec:	e04d      	b.n	8001d8a <testSD+0x17a>
	}

//	printf("SD CARD MOUNTED! TESTING R/W...\r\n");

	f_puts("TEST", &fil);
 8001cee:	492d      	ldr	r1, [pc, #180]	; (8001da4 <testSD+0x194>)
 8001cf0:	4836      	ldr	r0, [pc, #216]	; (8001dcc <testSD+0x1bc>)
 8001cf2:	f008 f806 	bl	8009d02 <f_puts>

	/* Close file */
	ret = f_close(&fil);
 8001cf6:	482b      	ldr	r0, [pc, #172]	; (8001da4 <testSD+0x194>)
 8001cf8:	f007 fdc5 	bl	8009886 <f_close>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <testSD+0x104>
		printf("Failed to close file (%i) \r\n", ret);
 8001d06:	68f9      	ldr	r1, [r7, #12]
 8001d08:	4831      	ldr	r0, [pc, #196]	; (8001dd0 <testSD+0x1c0>)
 8001d0a:	f008 fe07 	bl	800a91c <iprintf>
		return -1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d12:	e03a      	b.n	8001d8a <testSD+0x17a>
	}

	/* Open file to read */
	ret = f_open(&fil, "/TEST.TXT", FA_READ);
 8001d14:	2201      	movs	r2, #1
 8001d16:	4922      	ldr	r1, [pc, #136]	; (8001da0 <testSD+0x190>)
 8001d18:	4822      	ldr	r0, [pc, #136]	; (8001da4 <testSD+0x194>)
 8001d1a:	f007 f877 	bl	8008e0c <f_open>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <testSD+0x126>
		printf("Failed to open in read mode (%i) \r\n", ret);
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	482a      	ldr	r0, [pc, #168]	; (8001dd4 <testSD+0x1c4>)
 8001d2c:	f008 fdf6 	bl	800a91c <iprintf>
		return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d34:	e029      	b.n	8001d8a <testSD+0x17a>
	}

	char buffer[5];
	f_gets(buffer, sizeof(buffer), &fil);
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <testSD+0x194>)
 8001d3a:	2105      	movs	r1, #5
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f007 ff2c 	bl	8009b9a <f_gets>

	if (strcmp(buffer, "TEST")) {
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4921      	ldr	r1, [pc, #132]	; (8001dcc <testSD+0x1bc>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa4a 	bl	80001e0 <strcmp>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <testSD+0x14e>
		printf("File contents MISMATCH. FAIL R/W test\r\n");
 8001d52:	4821      	ldr	r0, [pc, #132]	; (8001dd8 <testSD+0x1c8>)
 8001d54:	f008 fe68 	bl	800aa28 <puts>
		return -1;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d5c:	e015      	b.n	8001d8a <testSD+0x17a>
	}

//	printf("PASSED: read file contents\r\n");

	/* Close file */
	if(f_close(&fil) != FR_OK) {
 8001d5e:	4811      	ldr	r0, [pc, #68]	; (8001da4 <testSD+0x194>)
 8001d60:	f007 fd91 	bl	8009886 <f_close>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <testSD+0x166>
		printf("Failed to close\r\n");
 8001d6a:	481c      	ldr	r0, [pc, #112]	; (8001ddc <testSD+0x1cc>)
 8001d6c:	f008 fe5c 	bl	800aa28 <puts>
		return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d74:	e009      	b.n	8001d8a <testSD+0x17a>
	}

	if(f_unlink("test.txt") != FR_OK) {
 8001d76:	481a      	ldr	r0, [pc, #104]	; (8001de0 <testSD+0x1d0>)
 8001d78:	f007 fe64 	bl	8009a44 <f_unlink>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <testSD+0x178>
		printf("Failed to delete test file \r\n");
 8001d82:	4818      	ldr	r0, [pc, #96]	; (8001de4 <testSD+0x1d4>)
 8001d84:	f008 fe50 	bl	800aa28 <puts>
	}

	return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	0800cd98 	.word	0x0800cd98
 8001d98:	20000448 	.word	0x20000448
 8001d9c:	0800cd9c 	.word	0x0800cd9c
 8001da0:	0800cdb8 	.word	0x0800cdb8
 8001da4:	20001480 	.word	0x20001480
 8001da8:	0800cdc4 	.word	0x0800cdc4
 8001dac:	2000147c 	.word	0x2000147c
 8001db0:	200024b0 	.word	0x200024b0
 8001db4:	0800cde0 	.word	0x0800cde0
 8001db8:	0800cde4 	.word	0x0800cde4
 8001dbc:	3fe00000 	.word	0x3fe00000
 8001dc0:	200024b4 	.word	0x200024b4
 8001dc4:	200024b8 	.word	0x200024b8
 8001dc8:	0800ce00 	.word	0x0800ce00
 8001dcc:	0800ce10 	.word	0x0800ce10
 8001dd0:	0800ce18 	.word	0x0800ce18
 8001dd4:	0800ce38 	.word	0x0800ce38
 8001dd8:	0800ce5c 	.word	0x0800ce5c
 8001ddc:	0800ce84 	.word	0x0800ce84
 8001de0:	0800ce98 	.word	0x0800ce98
 8001de4:	0800cea4 	.word	0x0800cea4

08001de8 <read_fifo_and_write_data_file>:

int read_fifo_and_write_data_file() {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
//	while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {}; // wait for buffer to fill before saving
//	while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {}; // wait for final frame

	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 8001df2:	2201      	movs	r2, #1
 8001df4:	2104      	movs	r1, #4
 8001df6:	48b0      	ldr	r0, [pc, #704]	; (80020b8 <read_fifo_and_write_data_file+0x2d0>)
 8001df8:	f7ff f90c 	bl	8001014 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // flush
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2104      	movs	r1, #4
 8001e00:	48ad      	ldr	r0, [pc, #692]	; (80020b8 <read_fifo_and_write_data_file+0x2d0>)
 8001e02:	f7ff f907 	bl	8001014 <OV5462_write_spi_reg>

	uint8_t temp=0, temp_last=0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e0c:	f102 0202 	add.w	r2, r2, #2
 8001e10:	7013      	strb	r3, [r2, #0]
 8001e12:	2300      	movs	r3, #0
 8001e14:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e18:	f102 020f 	add.w	r2, r2, #15
 8001e1c:	7013      	strb	r3, [r2, #0]
	uint32_t length = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e24:	f102 0214 	add.w	r2, r2, #20
 8001e28:	6013      	str	r3, [r2, #0]
	int i = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e30:	f102 0210 	add.w	r2, r2, #16
 8001e34:	6013      	str	r3, [r2, #0]
	uint8_t buf[CHUNK_SIZE];

	static int video_id = 0;

	length = OV5462_read_fifo_length(&ov5462);
 8001e36:	48a0      	ldr	r0, [pc, #640]	; (80020b8 <read_fifo_and_write_data_file+0x2d0>)
 8001e38:	f7ff f9cc 	bl	80011d4 <OV5462_read_fifo_length>
 8001e3c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e40:	f103 0314 	add.w	r3, r3, #20
 8001e44:	6018      	str	r0, [r3, #0]
	printf("Buffer length: %lu\r\n", length);
 8001e46:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e4a:	f103 0314 	add.w	r3, r3, #20
 8001e4e:	6819      	ldr	r1, [r3, #0]
 8001e50:	489a      	ldr	r0, [pc, #616]	; (80020bc <read_fifo_and_write_data_file+0x2d4>)
 8001e52:	f008 fd63 	bl	800a91c <iprintf>

	if (length >= MAX_FIFO_LENGTH) {
 8001e56:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e5a:	f103 0314 	add.w	r3, r3, #20
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a97      	ldr	r2, [pc, #604]	; (80020c0 <read_fifo_and_write_data_file+0x2d8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d908      	bls.n	8001e78 <read_fifo_and_write_data_file+0x90>
		printf("Buffer too large\r\n");
 8001e66:	4897      	ldr	r0, [pc, #604]	; (80020c4 <read_fifo_and_write_data_file+0x2dc>)
 8001e68:	f008 fdde 	bl	800aa28 <puts>
		length = MAX_FIFO_LENGTH-1;
 8001e6c:	4b94      	ldr	r3, [pc, #592]	; (80020c0 <read_fifo_and_write_data_file+0x2d8>)
 8001e6e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e72:	f102 0214 	add.w	r2, r2, #20
 8001e76:	6013      	str	r3, [r2, #0]
	}

	if (length == 0) {
 8001e78:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e7c:	f103 0314 	add.w	r3, r3, #20
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <read_fifo_and_write_data_file+0xaa>
		printf("Buffer empty\r\n");
 8001e86:	4890      	ldr	r0, [pc, #576]	; (80020c8 <read_fifo_and_write_data_file+0x2e0>)
 8001e88:	f008 fdce 	bl	800aa28 <puts>
		return -1;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e90:	e197      	b.n	80021c2 <read_fifo_and_write_data_file+0x3da>
	}

	length = MAX_FIFO_LENGTH-1; // !! ASSUME BUFFER IS FULL !!
 8001e92:	4b8b      	ldr	r3, [pc, #556]	; (80020c0 <read_fifo_and_write_data_file+0x2d8>)
 8001e94:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e98:	f102 0214 	add.w	r2, r2, #20
 8001e9c:	6013      	str	r3, [r2, #0]

	int filename_len = snprintf(NULL, 0, "%d.DAT", video_id);
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	; (80020cc <read_fifo_and_write_data_file+0x2e4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a8b      	ldr	r2, [pc, #556]	; (80020d0 <read_fifo_and_write_data_file+0x2e8>)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f008 fdd6 	bl	800aa58 <sniprintf>
 8001eac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001eb0:	f103 0308 	add.w	r3, r3, #8
 8001eb4:	6018      	str	r0, [r3, #0]
	char* filename = malloc(filename_len+1);
 8001eb6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001eba:	f103 0308 	add.w	r3, r3, #8
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f007 ffc8 	bl	8009e58 <malloc>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001ece:	f102 0204 	add.w	r2, r2, #4
 8001ed2:	6013      	str	r3, [r2, #0]
	snprintf(filename, filename_len+1, "%d.DAT", video_id);
 8001ed4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ed8:	f103 0308 	add.w	r3, r3, #8
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4b7a      	ldr	r3, [pc, #488]	; (80020cc <read_fifo_and_write_data_file+0x2e4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a7a      	ldr	r2, [pc, #488]	; (80020d0 <read_fifo_and_write_data_file+0x2e8>)
 8001ee8:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8001eec:	f100 0004 	add.w	r0, r0, #4
 8001ef0:	6800      	ldr	r0, [r0, #0]
 8001ef2:	f008 fdb1 	bl	800aa58 <sniprintf>

	FRESULT fr = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ef6:	2213      	movs	r2, #19
 8001ef8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001efc:	f103 0304 	add.w	r3, r3, #4
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	4874      	ldr	r0, [pc, #464]	; (80020d4 <read_fifo_and_write_data_file+0x2ec>)
 8001f04:	f006 ff82 	bl	8008e0c <f_open>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f0e:	f102 0203 	add.w	r2, r2, #3
 8001f12:	7013      	strb	r3, [r2, #0]
	printf("%s\r\n", filename);
 8001f14:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f18:	f103 0304 	add.w	r3, r3, #4
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	486e      	ldr	r0, [pc, #440]	; (80020d8 <read_fifo_and_write_data_file+0x2f0>)
 8001f20:	f008 fcfc 	bl	800a91c <iprintf>
	free(filename);
 8001f24:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f28:	f103 0304 	add.w	r3, r3, #4
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	f007 ff9b 	bl	8009e68 <free>
	if (fr) printf("file open failed\r\n");
 8001f32:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f36:	f103 0303 	add.w	r3, r3, #3
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <read_fifo_and_write_data_file+0x15e>
 8001f40:	4866      	ldr	r0, [pc, #408]	; (80020dc <read_fifo_and_write_data_file+0x2f4>)
 8001f42:	f008 fd71 	bl	800aa28 <puts>
	++video_id;
 8001f46:	4b61      	ldr	r3, [pc, #388]	; (80020cc <read_fifo_and_write_data_file+0x2e4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	4a5f      	ldr	r2, [pc, #380]	; (80020cc <read_fifo_and_write_data_file+0x2e4>)
 8001f4e:	6013      	str	r3, [r2, #0]
	i = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f56:	f102 0210 	add.w	r2, r2, #16
 8001f5a:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2110      	movs	r1, #16
 8001f60:	485f      	ldr	r0, [pc, #380]	; (80020e0 <read_fifo_and_write_data_file+0x2f8>)
 8001f62:	f001 fe05 	bl	8003b70 <HAL_GPIO_WritePin>
	OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 8001f66:	4854      	ldr	r0, [pc, #336]	; (80020b8 <read_fifo_and_write_data_file+0x2d0>)
 8001f68:	f7ff f957 	bl	800121a <OV5462_request_FIFO_burst>

	while (length--) {
 8001f6c:	e10c      	b.n	8002188 <read_fifo_and_write_data_file+0x3a0>
		temp_last = temp;
 8001f6e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f72:	f103 0302 	add.w	r3, r3, #2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f7c:	f102 020f 	add.w	r2, r2, #15
 8001f80:	7013      	strb	r3, [r2, #0]
		SPI_OptimizedReadByte(&temp);
 8001f82:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f86:	f103 0302 	add.w	r3, r3, #2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f958 	bl	8001240 <SPI_OptimizedReadByte>

		if ((temp == 0xD9) && (temp_last == 0xFF)) { // end of image
 8001f90:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f94:	f103 0302 	add.w	r3, r3, #2
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2bd9      	cmp	r3, #217	; 0xd9
 8001f9c:	d137      	bne.n	800200e <read_fifo_and_write_data_file+0x226>
 8001f9e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fa2:	f103 030f 	add.w	r3, r3, #15
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2bff      	cmp	r3, #255	; 0xff
 8001faa:	d130      	bne.n	800200e <read_fifo_and_write_data_file+0x226>
			buf[i++] = temp;
 8001fac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fb0:	f103 0310 	add.w	r3, r3, #16
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001fbc:	f101 0110 	add.w	r1, r1, #16
 8001fc0:	600a      	str	r2, [r1, #0]
 8001fc2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001fc6:	f102 0202 	add.w	r2, r2, #2
 8001fca:	7812      	ldrb	r2, [r2, #0]
 8001fcc:	f107 0118 	add.w	r1, r7, #24
 8001fd0:	440b      	add	r3, r1
 8001fd2:	f803 2c18 	strb.w	r2, [r3, #-24]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2110      	movs	r1, #16
 8001fda:	4841      	ldr	r0, [pc, #260]	; (80020e0 <read_fifo_and_write_data_file+0x2f8>)
 8001fdc:	f001 fdc8 	bl	8003b70 <HAL_GPIO_WritePin>

//			printf("EOI\r\n");
			f_write(&fil, buf, sizeof(uint8_t)*i, &bw);
 8001fe0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fe4:	f103 0310 	add.w	r3, r3, #16
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	f107 0118 	add.w	r1, r7, #24
 8001fee:	3918      	subs	r1, #24
 8001ff0:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <read_fifo_and_write_data_file+0x2fc>)
 8001ff2:	4838      	ldr	r0, [pc, #224]	; (80020d4 <read_fifo_and_write_data_file+0x2ec>)
 8001ff4:	f007 fa35 	bl	8009462 <f_write>
			is_header = 0;
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <read_fifo_and_write_data_file+0x300>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2110      	movs	r1, #16
 8002002:	4837      	ldr	r0, [pc, #220]	; (80020e0 <read_fifo_and_write_data_file+0x2f8>)
 8002004:	f001 fdb4 	bl	8003b70 <HAL_GPIO_WritePin>
			OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 8002008:	482b      	ldr	r0, [pc, #172]	; (80020b8 <read_fifo_and_write_data_file+0x2d0>)
 800200a:	f7ff f906 	bl	800121a <OV5462_request_FIFO_burst>
		}

		if (is_header) {
 800200e:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <read_fifo_and_write_data_file+0x300>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d06a      	beq.n	80020ec <read_fifo_and_write_data_file+0x304>
			if (i < CHUNK_SIZE) {
 8002016:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800201a:	f103 0310 	add.w	r3, r3, #16
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002024:	da15      	bge.n	8002052 <read_fifo_and_write_data_file+0x26a>
				buf[i++] = temp;
 8002026:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800202a:	f103 0310 	add.w	r3, r3, #16
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002036:	f101 0110 	add.w	r1, r1, #16
 800203a:	600a      	str	r2, [r1, #0]
 800203c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002040:	f102 0202 	add.w	r2, r2, #2
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	f107 0118 	add.w	r1, r7, #24
 800204a:	440b      	add	r3, r1
 800204c:	f803 2c18 	strb.w	r2, [r3, #-24]
 8002050:	e09a      	b.n	8002188 <read_fifo_and_write_data_file+0x3a0>
			} else {
				HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002052:	2201      	movs	r2, #1
 8002054:	2110      	movs	r1, #16
 8002056:	4822      	ldr	r0, [pc, #136]	; (80020e0 <read_fifo_and_write_data_file+0x2f8>)
 8002058:	f001 fd8a 	bl	8003b70 <HAL_GPIO_WritePin>

				f_write(&fil, buf, sizeof(uint8_t)*CHUNK_SIZE, &bw);
 800205c:	f107 0118 	add.w	r1, r7, #24
 8002060:	3918      	subs	r1, #24
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <read_fifo_and_write_data_file+0x2fc>)
 8002064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002068:	481a      	ldr	r0, [pc, #104]	; (80020d4 <read_fifo_and_write_data_file+0x2ec>)
 800206a:	f007 f9fa 	bl	8009462 <f_write>
				i = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002074:	f102 0210 	add.w	r2, r2, #16
 8002078:	6013      	str	r3, [r2, #0]
				buf[i++] = temp;
 800207a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800207e:	f103 0310 	add.w	r3, r3, #16
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800208a:	f101 0110 	add.w	r1, r1, #16
 800208e:	600a      	str	r2, [r1, #0]
 8002090:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002094:	f102 0202 	add.w	r2, r2, #2
 8002098:	7812      	ldrb	r2, [r2, #0]
 800209a:	f107 0118 	add.w	r1, r7, #24
 800209e:	440b      	add	r3, r1
 80020a0:	f803 2c18 	strb.w	r2, [r3, #-24]
				HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2110      	movs	r1, #16
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <read_fifo_and_write_data_file+0x2f8>)
 80020aa:	f001 fd61 	bl	8003b70 <HAL_GPIO_WritePin>

				OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 80020ae:	4802      	ldr	r0, [pc, #8]	; (80020b8 <read_fifo_and_write_data_file+0x2d0>)
 80020b0:	f7ff f8b3 	bl	800121a <OV5462_request_FIFO_burst>
 80020b4:	e068      	b.n	8002188 <read_fifo_and_write_data_file+0x3a0>
 80020b6:	bf00      	nop
 80020b8:	200024bc 	.word	0x200024bc
 80020bc:	0800cec4 	.word	0x0800cec4
 80020c0:	007ffffe 	.word	0x007ffffe
 80020c4:	0800cedc 	.word	0x0800cedc
 80020c8:	0800cef0 	.word	0x0800cef0
 80020cc:	200024d0 	.word	0x200024d0
 80020d0:	0800cf00 	.word	0x0800cf00
 80020d4:	20001480 	.word	0x20001480
 80020d8:	0800cf08 	.word	0x0800cf08
 80020dc:	0800cf10 	.word	0x0800cf10
 80020e0:	40020800 	.word	0x40020800
 80020e4:	200024cc 	.word	0x200024cc
 80020e8:	200024c8 	.word	0x200024c8
			}
		} else if ((temp == 0xD8) && (temp_last == 0xFF)) { // start of new image
 80020ec:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80020f0:	f103 0302 	add.w	r3, r3, #2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2bd8      	cmp	r3, #216	; 0xd8
 80020f8:	d146      	bne.n	8002188 <read_fifo_and_write_data_file+0x3a0>
 80020fa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80020fe:	f103 030f 	add.w	r3, r3, #15
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2bff      	cmp	r3, #255	; 0xff
 8002106:	d13f      	bne.n	8002188 <read_fifo_and_write_data_file+0x3a0>
			is_header = 1;
 8002108:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <read_fifo_and_write_data_file+0x3e8>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 800210e:	2201      	movs	r2, #1
 8002110:	2110      	movs	r1, #16
 8002112:	4830      	ldr	r0, [pc, #192]	; (80021d4 <read_fifo_and_write_data_file+0x3ec>)
 8002114:	f001 fd2c 	bl	8003b70 <HAL_GPIO_WritePin>
			i = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800211e:	f102 0210 	add.w	r2, r2, #16
 8002122:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8002124:	2200      	movs	r2, #0
 8002126:	2110      	movs	r1, #16
 8002128:	482a      	ldr	r0, [pc, #168]	; (80021d4 <read_fifo_and_write_data_file+0x3ec>)
 800212a:	f001 fd21 	bl	8003b70 <HAL_GPIO_WritePin>

			OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 800212e:	482a      	ldr	r0, [pc, #168]	; (80021d8 <read_fifo_and_write_data_file+0x3f0>)
 8002130:	f7ff f873 	bl	800121a <OV5462_request_FIFO_burst>

			buf[i++] = temp_last;
 8002134:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002138:	f103 0310 	add.w	r3, r3, #16
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002144:	f101 0110 	add.w	r1, r1, #16
 8002148:	600a      	str	r2, [r1, #0]
 800214a:	f107 0218 	add.w	r2, r7, #24
 800214e:	4413      	add	r3, r2
 8002150:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002154:	f102 020f 	add.w	r2, r2, #15
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	f803 2c18 	strb.w	r2, [r3, #-24]
			buf[i++] = temp;
 800215e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002162:	f103 0310 	add.w	r3, r3, #16
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800216e:	f101 0110 	add.w	r1, r1, #16
 8002172:	600a      	str	r2, [r1, #0]
 8002174:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002178:	f102 0202 	add.w	r2, r2, #2
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	f107 0118 	add.w	r1, r7, #24
 8002182:	440b      	add	r3, r1
 8002184:	f803 2c18 	strb.w	r2, [r3, #-24]
	while (length--) {
 8002188:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800218c:	f103 0314 	add.w	r3, r3, #20
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	1e5a      	subs	r2, r3, #1
 8002194:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002198:	f101 0114 	add.w	r1, r1, #20
 800219c:	600a      	str	r2, [r1, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f47f aee5 	bne.w	8001f6e <read_fifo_and_write_data_file+0x186>
		}
	}

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 80021a4:	2201      	movs	r2, #1
 80021a6:	2110      	movs	r1, #16
 80021a8:	480a      	ldr	r0, [pc, #40]	; (80021d4 <read_fifo_and_write_data_file+0x3ec>)
 80021aa:	f001 fce1 	bl	8003b70 <HAL_GPIO_WritePin>
	is_header = 0;
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <read_fifo_and_write_data_file+0x3e8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
	f_close(&fil);
 80021b4:	4809      	ldr	r0, [pc, #36]	; (80021dc <read_fifo_and_write_data_file+0x3f4>)
 80021b6:	f007 fb66 	bl	8009886 <f_close>
	printf("Save complete \r\n");
 80021ba:	4809      	ldr	r0, [pc, #36]	; (80021e0 <read_fifo_and_write_data_file+0x3f8>)
 80021bc:	f008 fc34 	bl	800aa28 <puts>

//	OV5462_continuous_capture_init(&ov5462); // restore continuous capture functionality

	return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200024c8 	.word	0x200024c8
 80021d4:	40020800 	.word	0x40020800
 80021d8:	200024bc 	.word	0x200024bc
 80021dc:	20001480 	.word	0x20001480
 80021e0:	0800cf24 	.word	0x0800cf24

080021e4 <trigger_capture>:

void trigger_capture() {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	printf("Capture!\r\n");
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <trigger_capture+0x28>)
 80021ea:	f008 fc1d 	bl	800aa28 <puts>
	capture_flag = 0;
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <trigger_capture+0x2c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 80021f4:	2201      	movs	r2, #1
 80021f6:	2104      	movs	r1, #4
 80021f8:	4806      	ldr	r0, [pc, #24]	; (8002214 <trigger_capture+0x30>)
 80021fa:	f7fe ff0b 	bl	8001014 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK); // start capture
 80021fe:	2202      	movs	r2, #2
 8002200:	2104      	movs	r1, #4
 8002202:	4804      	ldr	r0, [pc, #16]	; (8002214 <trigger_capture+0x30>)
 8002204:	f7fe ff06 	bl	8001014 <OV5462_write_spi_reg>
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	0800cf34 	.word	0x0800cf34
 8002210:	200024c4 	.word	0x200024c4
 8002214:	200024bc 	.word	0x200024bc

08002218 <set_capture_flag>:

void set_capture_flag(int f) {
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	capture_flag = f;
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <set_capture_flag+0x1c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	200024c4 	.word	0x200024c4

08002238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800223e:	f000 ff09 	bl	8003054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002242:	f000 f8c5 	bl	80023d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002246:	f000 fac9 	bl	80027dc <MX_GPIO_Init>
  MX_I2C1_Init();
 800224a:	f000 f97f 	bl	800254c <MX_I2C1_Init>
  MX_SPI2_Init();
 800224e:	f000 f9e1 	bl	8002614 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002252:	f000 fa99 	bl	8002788 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002256:	f004 feb1 	bl	8006fbc <MX_FATFS_Init>
  MX_ADC1_Init();
 800225a:	f000 f925 	bl	80024a8 <MX_ADC1_Init>
  MX_SPI1_Init();
 800225e:	f000 f9a3 	bl	80025a8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002262:	f000 fa0d 	bl	8002680 <MX_SPI3_Init>
  MX_TIM2_Init();
 8002266:	f000 fa41 	bl	80026ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800226a:	484a      	ldr	r0, [pc, #296]	; (8002394 <main+0x15c>)
 800226c:	f003 fee4 	bl	8006038 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002270:	2201      	movs	r2, #1
 8002272:	2110      	movs	r1, #16
 8002274:	4848      	ldr	r0, [pc, #288]	; (8002398 <main+0x160>)
 8002276:	f001 fc7b 	bl	8003b70 <HAL_GPIO_WritePin>
  	uint8_t buf[1] = { 0x00 }; // dummy write
 800227a:	2300      	movs	r3, #0
 800227c:	713b      	strb	r3, [r7, #4]
  	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 800227e:	1d39      	adds	r1, r7, #4
 8002280:	2364      	movs	r3, #100	; 0x64
 8002282:	2201      	movs	r2, #1
 8002284:	4845      	ldr	r0, [pc, #276]	; (800239c <main+0x164>)
 8002286:	f003 f968 	bl	800555a <HAL_SPI_Transmit>

  	ov5462.hi2c = &hi2c1;
 800228a:	4b45      	ldr	r3, [pc, #276]	; (80023a0 <main+0x168>)
 800228c:	4a45      	ldr	r2, [pc, #276]	; (80023a4 <main+0x16c>)
 800228e:	601a      	str	r2, [r3, #0]
	ov5462.hspi = &hspi1;
 8002290:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <main+0x168>)
 8002292:	4a42      	ldr	r2, [pc, #264]	; (800239c <main+0x164>)
 8002294:	605a      	str	r2, [r3, #4]

	printf("program start!\r\n");
 8002296:	4844      	ldr	r0, [pc, #272]	; (80023a8 <main+0x170>)
 8002298:	f008 fbc6 	bl	800aa28 <puts>

  	HAL_Delay(1000);
 800229c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022a0:	f000 ff4a 	bl	8003138 <HAL_Delay>

  	while (1) {
		if(testSD()) {
 80022a4:	f7ff fcb4 	bl	8001c10 <testSD>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <main+0x90>
			printf("SD test FAIL! Retrying...\r\n");
 80022ae:	483f      	ldr	r0, [pc, #252]	; (80023ac <main+0x174>)
 80022b0:	f008 fbba 	bl	800aa28 <puts>
			f_mount(NULL, "/", 1);
 80022b4:	2201      	movs	r2, #1
 80022b6:	493e      	ldr	r1, [pc, #248]	; (80023b0 <main+0x178>)
 80022b8:	2000      	movs	r0, #0
 80022ba:	f006 fd61 	bl	8008d80 <f_mount>
			HAL_Delay(10000);
 80022be:	f242 7010 	movw	r0, #10000	; 0x2710
 80022c2:	f000 ff39 	bl	8003138 <HAL_Delay>
 80022c6:	e7ed      	b.n	80022a4 <main+0x6c>
		} else {
			printf("SD test PASS!\r\n");
 80022c8:	483a      	ldr	r0, [pc, #232]	; (80023b4 <main+0x17c>)
 80022ca:	f008 fbad 	bl	800aa28 <puts>
			break;
		}
  	}

  	while (1) {
  		OV5462_write_spi_reg(&ov5462, 0x00, 0x25);
 80022ce:	2225      	movs	r2, #37	; 0x25
 80022d0:	2100      	movs	r1, #0
 80022d2:	4833      	ldr	r0, [pc, #204]	; (80023a0 <main+0x168>)
 80022d4:	f7fe fe9e 	bl	8001014 <OV5462_write_spi_reg>
  		uint8_t tmp = OV5462_read_spi_reg(&ov5462, 0x00);
 80022d8:	2100      	movs	r1, #0
 80022da:	4831      	ldr	r0, [pc, #196]	; (80023a0 <main+0x168>)
 80022dc:	f7fe feca 	bl	8001074 <OV5462_read_spi_reg>
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]

  		if (tmp == 0x25) {
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	2b25      	cmp	r3, #37	; 0x25
 80022e8:	d103      	bne.n	80022f2 <main+0xba>
  		printf("SPI Test PASS!\r\n");
 80022ea:	4833      	ldr	r0, [pc, #204]	; (80023b8 <main+0x180>)
 80022ec:	f008 fb9c 	bl	800aa28 <puts>
  		break; // continue to program
 80022f0:	e007      	b.n	8002302 <main+0xca>
  		} else {
  		printf("SPI Test FAIL!\r\n");
 80022f2:	4832      	ldr	r0, [pc, #200]	; (80023bc <main+0x184>)
 80022f4:	f008 fb98 	bl	800aa28 <puts>
  		HAL_Delay(1000);
 80022f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022fc:	f000 ff1c 	bl	8003138 <HAL_Delay>
  	while (1) {
 8002300:	e7e5      	b.n	80022ce <main+0x96>
  		}
  	}

  	while (1) {
  		uint8_t upper = OV5462_read_i2c_reg(&ov5462, CHIPID_UPPER);
 8002302:	f243 010a 	movw	r1, #12298	; 0x300a
 8002306:	4826      	ldr	r0, [pc, #152]	; (80023a0 <main+0x168>)
 8002308:	f7fe fe5c 	bl	8000fc4 <OV5462_read_i2c_reg>
 800230c:	4603      	mov	r3, r0
 800230e:	71bb      	strb	r3, [r7, #6]
  		uint8_t lower = OV5462_read_i2c_reg(&ov5462, CHIPID_LOWER);
 8002310:	f243 010b 	movw	r1, #12299	; 0x300b
 8002314:	4822      	ldr	r0, [pc, #136]	; (80023a0 <main+0x168>)
 8002316:	f7fe fe55 	bl	8000fc4 <OV5462_read_i2c_reg>
 800231a:	4603      	mov	r3, r0
 800231c:	717b      	strb	r3, [r7, #5]

  		if (upper == 0x56 && lower == 0x42) {
 800231e:	79bb      	ldrb	r3, [r7, #6]
 8002320:	2b56      	cmp	r3, #86	; 0x56
 8002322:	d10d      	bne.n	8002340 <main+0x108>
 8002324:	797b      	ldrb	r3, [r7, #5]
 8002326:	2b42      	cmp	r3, #66	; 0x42
 8002328:	d10a      	bne.n	8002340 <main+0x108>
  			printf("I2C Test PASS!\r\n");
 800232a:	4825      	ldr	r0, [pc, #148]	; (80023c0 <main+0x188>)
 800232c:	f008 fb7c 	bl	800aa28 <puts>
  			break; // continue to program
 8002330:	bf00      	nop
  			HAL_Delay(1000);
  		}
  	}

  	// camera init (sets to JPEG mode)
  	if (OV5462_init(&ov5462)) {
 8002332:	481b      	ldr	r0, [pc, #108]	; (80023a0 <main+0x168>)
 8002334:	f7fe fec8 	bl	80010c8 <OV5462_init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <main+0x11e>
 800233e:	e007      	b.n	8002350 <main+0x118>
  			printf("I2C Test FAIL!\r\n");
 8002340:	4820      	ldr	r0, [pc, #128]	; (80023c4 <main+0x18c>)
 8002342:	f008 fb71 	bl	800aa28 <puts>
  			HAL_Delay(1000);
 8002346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800234a:	f000 fef5 	bl	8003138 <HAL_Delay>
  	while (1) {
 800234e:	e7d8      	b.n	8002302 <main+0xca>
  		printf("Init fail!\r\n");
 8002350:	481d      	ldr	r0, [pc, #116]	; (80023c8 <main+0x190>)
 8002352:	f008 fb69 	bl	800aa28 <puts>
  	}

  	OV5462_continuous_capture_init(&ov5462);
 8002356:	4812      	ldr	r0, [pc, #72]	; (80023a0 <main+0x168>)
 8002358:	f7fe ff20 	bl	800119c <OV5462_continuous_capture_init>

  	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // flush
 800235c:	2201      	movs	r2, #1
 800235e:	2104      	movs	r1, #4
 8002360:	480f      	ldr	r0, [pc, #60]	; (80023a0 <main+0x168>)
 8002362:	f7fe fe57 	bl	8001014 <OV5462_write_spi_reg>
  	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 8002366:	2201      	movs	r2, #1
 8002368:	2104      	movs	r1, #4
 800236a:	480d      	ldr	r0, [pc, #52]	; (80023a0 <main+0x168>)
 800236c:	f7fe fe52 	bl	8001014 <OV5462_write_spi_reg>

  	trigger_capture();
 8002370:	f7ff ff38 	bl	80021e4 <trigger_capture>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if (capture_flag && OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK) {
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <main+0x194>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0fb      	beq.n	8002374 <main+0x13c>
 800237c:	2141      	movs	r1, #65	; 0x41
 800237e:	4808      	ldr	r0, [pc, #32]	; (80023a0 <main+0x168>)
 8002380:	f7fe fe78 	bl	8001074 <OV5462_read_spi_reg>
 8002384:	4603      	mov	r3, r0
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f2      	beq.n	8002374 <main+0x13c>
		 trigger_capture();
 800238e:	f7ff ff29 	bl	80021e4 <trigger_capture>
	 if (capture_flag && OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK) {
 8002392:	e7ef      	b.n	8002374 <main+0x13c>
 8002394:	200003bc 	.word	0x200003bc
 8002398:	40020800 	.word	0x40020800
 800239c:	200002b4 	.word	0x200002b4
 80023a0:	200024bc 	.word	0x200024bc
 80023a4:	20000260 	.word	0x20000260
 80023a8:	0800cf40 	.word	0x0800cf40
 80023ac:	0800cf50 	.word	0x0800cf50
 80023b0:	0800cd98 	.word	0x0800cd98
 80023b4:	0800cf6c 	.word	0x0800cf6c
 80023b8:	0800cf7c 	.word	0x0800cf7c
 80023bc:	0800cf8c 	.word	0x0800cf8c
 80023c0:	0800cf9c 	.word	0x0800cf9c
 80023c4:	0800cfac 	.word	0x0800cfac
 80023c8:	0800cfbc 	.word	0x0800cfbc
 80023cc:	200024c4 	.word	0x200024c4

080023d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b094      	sub	sp, #80	; 0x50
 80023d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023d6:	f107 0320 	add.w	r3, r7, #32
 80023da:	2230      	movs	r2, #48	; 0x30
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f007 fd4a 	bl	8009e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <SystemClock_Config+0xd0>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <SystemClock_Config+0xd0>)
 80023fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002402:	6413      	str	r3, [r2, #64]	; 0x40
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <SystemClock_Config+0xd0>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002410:	2300      	movs	r3, #0
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <SystemClock_Config+0xd4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800241c:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <SystemClock_Config+0xd4>)
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <SystemClock_Config+0xd4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002430:	2302      	movs	r3, #2
 8002432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002434:	2301      	movs	r3, #1
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002438:	2310      	movs	r3, #16
 800243a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800243c:	2302      	movs	r3, #2
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002440:	2300      	movs	r3, #0
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002444:	2310      	movs	r3, #16
 8002446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002448:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800244c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800244e:	2304      	movs	r3, #4
 8002450:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002452:	2307      	movs	r3, #7
 8002454:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002456:	f107 0320 	add.w	r3, r7, #32
 800245a:	4618      	mov	r0, r3
 800245c:	f002 fb5c 	bl	8004b18 <HAL_RCC_OscConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002466:	f000 fa63 	bl	8002930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800246a:	230f      	movs	r3, #15
 800246c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800246e:	2302      	movs	r3, #2
 8002470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	2102      	movs	r1, #2
 8002486:	4618      	mov	r0, r3
 8002488:	f002 fdbe 	bl	8005008 <HAL_RCC_ClockConfig>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002492:	f000 fa4d 	bl	8002930 <Error_Handler>
  }
}
 8002496:	bf00      	nop
 8002498:	3750      	adds	r7, #80	; 0x50
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40007000 	.word	0x40007000

080024a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024ae:	463b      	mov	r3, r7
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024ba:	4b21      	ldr	r3, [pc, #132]	; (8002540 <MX_ADC1_Init+0x98>)
 80024bc:	4a21      	ldr	r2, [pc, #132]	; (8002544 <MX_ADC1_Init+0x9c>)
 80024be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <MX_ADC1_Init+0x98>)
 80024c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <MX_ADC1_Init+0x98>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <MX_ADC1_Init+0x98>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024d4:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <MX_ADC1_Init+0x98>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <MX_ADC1_Init+0x98>)
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024e2:	4b17      	ldr	r3, [pc, #92]	; (8002540 <MX_ADC1_Init+0x98>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <MX_ADC1_Init+0x98>)
 80024ea:	4a17      	ldr	r2, [pc, #92]	; (8002548 <MX_ADC1_Init+0xa0>)
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024ee:	4b14      	ldr	r3, [pc, #80]	; (8002540 <MX_ADC1_Init+0x98>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <MX_ADC1_Init+0x98>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MX_ADC1_Init+0x98>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <MX_ADC1_Init+0x98>)
 8002504:	2201      	movs	r2, #1
 8002506:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002508:	480d      	ldr	r0, [pc, #52]	; (8002540 <MX_ADC1_Init+0x98>)
 800250a:	f000 fe39 	bl	8003180 <HAL_ADC_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002514:	f000 fa0c 	bl	8002930 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002518:	2308      	movs	r3, #8
 800251a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800251c:	2301      	movs	r3, #1
 800251e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002524:	463b      	mov	r3, r7
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <MX_ADC1_Init+0x98>)
 800252a:	f000 fe6d 	bl	8003208 <HAL_ADC_ConfigChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002534:	f000 f9fc 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000218 	.word	0x20000218
 8002544:	40012000 	.word	0x40012000
 8002548:	0f000001 	.word	0x0f000001

0800254c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <MX_I2C1_Init+0x50>)
 8002552:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <MX_I2C1_Init+0x54>)
 8002554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <MX_I2C1_Init+0x50>)
 8002558:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <MX_I2C1_Init+0x58>)
 800255a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <MX_I2C1_Init+0x50>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <MX_I2C1_Init+0x50>)
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <MX_I2C1_Init+0x50>)
 800256a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800256e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <MX_I2C1_Init+0x50>)
 8002572:	2200      	movs	r2, #0
 8002574:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <MX_I2C1_Init+0x50>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <MX_I2C1_Init+0x50>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <MX_I2C1_Init+0x50>)
 8002584:	2200      	movs	r2, #0
 8002586:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <MX_I2C1_Init+0x50>)
 800258a:	f001 fb2f 	bl	8003bec <HAL_I2C_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002594:	f000 f9cc 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000260 	.word	0x20000260
 80025a0:	40005400 	.word	0x40005400
 80025a4:	000186a0 	.word	0x000186a0

080025a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025ac:	4b17      	ldr	r3, [pc, #92]	; (800260c <MX_SPI1_Init+0x64>)
 80025ae:	4a18      	ldr	r2, [pc, #96]	; (8002610 <MX_SPI1_Init+0x68>)
 80025b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <MX_SPI1_Init+0x64>)
 80025b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ba:	4b14      	ldr	r3, [pc, #80]	; (800260c <MX_SPI1_Init+0x64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <MX_SPI1_Init+0x64>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <MX_SPI1_Init+0x64>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <MX_SPI1_Init+0x64>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_SPI1_Init+0x64>)
 80025d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <MX_SPI1_Init+0x64>)
 80025dc:	2210      	movs	r2, #16
 80025de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <MX_SPI1_Init+0x64>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <MX_SPI1_Init+0x64>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <MX_SPI1_Init+0x64>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <MX_SPI1_Init+0x64>)
 80025f4:	220a      	movs	r2, #10
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025f8:	4804      	ldr	r0, [pc, #16]	; (800260c <MX_SPI1_Init+0x64>)
 80025fa:	f002 ff25 	bl	8005448 <HAL_SPI_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002604:	f000 f994 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}
 800260c:	200002b4 	.word	0x200002b4
 8002610:	40013000 	.word	0x40013000

08002614 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <MX_SPI2_Init+0x64>)
 800261a:	4a18      	ldr	r2, [pc, #96]	; (800267c <MX_SPI2_Init+0x68>)
 800261c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <MX_SPI2_Init+0x64>)
 8002620:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002624:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <MX_SPI2_Init+0x64>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <MX_SPI2_Init+0x64>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <MX_SPI2_Init+0x64>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <MX_SPI2_Init+0x64>)
 800263a:	2200      	movs	r2, #0
 800263c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <MX_SPI2_Init+0x64>)
 8002640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002644:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <MX_SPI2_Init+0x64>)
 8002648:	2210      	movs	r2, #16
 800264a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <MX_SPI2_Init+0x64>)
 800264e:	2200      	movs	r2, #0
 8002650:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <MX_SPI2_Init+0x64>)
 8002654:	2200      	movs	r2, #0
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <MX_SPI2_Init+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_SPI2_Init+0x64>)
 8002660:	220a      	movs	r2, #10
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002664:	4804      	ldr	r0, [pc, #16]	; (8002678 <MX_SPI2_Init+0x64>)
 8002666:	f002 feef 	bl	8005448 <HAL_SPI_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002670:	f000 f95e 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	2000030c 	.word	0x2000030c
 800267c:	40003800 	.word	0x40003800

08002680 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002684:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <MX_SPI3_Init+0x64>)
 8002686:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <MX_SPI3_Init+0x68>)
 8002688:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <MX_SPI3_Init+0x64>)
 800268c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002690:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <MX_SPI3_Init+0x64>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <MX_SPI3_Init+0x64>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_SPI3_Init+0x64>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <MX_SPI3_Init+0x64>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <MX_SPI3_Init+0x64>)
 80026ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <MX_SPI3_Init+0x64>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <MX_SPI3_Init+0x64>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <MX_SPI3_Init+0x64>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <MX_SPI3_Init+0x64>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <MX_SPI3_Init+0x64>)
 80026cc:	220a      	movs	r2, #10
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80026d0:	4804      	ldr	r0, [pc, #16]	; (80026e4 <MX_SPI3_Init+0x64>)
 80026d2:	f002 feb9 	bl	8005448 <HAL_SPI_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80026dc:	f000 f928 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000364 	.word	0x20000364
 80026e8:	40003c00 	.word	0x40003c00

080026ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002700:	463b      	mov	r3, r7
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <MX_TIM2_Init+0x94>)
 800270a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800270e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <MX_TIM2_Init+0x94>)
 8002712:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002716:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <MX_TIM2_Init+0x94>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 610000;
 800271e:	4b18      	ldr	r3, [pc, #96]	; (8002780 <MX_TIM2_Init+0x94>)
 8002720:	4a18      	ldr	r2, [pc, #96]	; (8002784 <MX_TIM2_Init+0x98>)
 8002722:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <MX_TIM2_Init+0x94>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <MX_TIM2_Init+0x94>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002730:	4813      	ldr	r0, [pc, #76]	; (8002780 <MX_TIM2_Init+0x94>)
 8002732:	f003 fc31 	bl	8005f98 <HAL_TIM_Base_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800273c:	f000 f8f8 	bl	8002930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002744:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002746:	f107 0308 	add.w	r3, r7, #8
 800274a:	4619      	mov	r1, r3
 800274c:	480c      	ldr	r0, [pc, #48]	; (8002780 <MX_TIM2_Init+0x94>)
 800274e:	f003 fddd 	bl	800630c <HAL_TIM_ConfigClockSource>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002758:	f000 f8ea 	bl	8002930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275c:	2300      	movs	r3, #0
 800275e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002764:	463b      	mov	r3, r7
 8002766:	4619      	mov	r1, r3
 8002768:	4805      	ldr	r0, [pc, #20]	; (8002780 <MX_TIM2_Init+0x94>)
 800276a:	f003 ffe3 	bl	8006734 <HAL_TIMEx_MasterConfigSynchronization>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002774:	f000 f8dc 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	200003bc 	.word	0x200003bc
 8002784:	00094ed0 	.word	0x00094ed0

08002788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <MX_USART2_UART_Init+0x4c>)
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <MX_USART2_UART_Init+0x50>)
 8002790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <MX_USART2_UART_Init+0x4c>)
 8002794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <MX_USART2_UART_Init+0x4c>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <MX_USART2_UART_Init+0x4c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <MX_USART2_UART_Init+0x4c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <MX_USART2_UART_Init+0x4c>)
 80027ae:	220c      	movs	r2, #12
 80027b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <MX_USART2_UART_Init+0x4c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <MX_USART2_UART_Init+0x4c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027be:	4805      	ldr	r0, [pc, #20]	; (80027d4 <MX_USART2_UART_Init+0x4c>)
 80027c0:	f004 f83a 	bl	8006838 <HAL_UART_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027ca:	f000 f8b1 	bl	8002930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000404 	.word	0x20000404
 80027d8:	40004400 	.word	0x40004400

080027dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
 80027f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	4b42      	ldr	r3, [pc, #264]	; (8002900 <MX_GPIO_Init+0x124>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a41      	ldr	r2, [pc, #260]	; (8002900 <MX_GPIO_Init+0x124>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <MX_GPIO_Init+0x124>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <MX_GPIO_Init+0x124>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <MX_GPIO_Init+0x124>)
 8002818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b38      	ldr	r3, [pc, #224]	; (8002900 <MX_GPIO_Init+0x124>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	4b34      	ldr	r3, [pc, #208]	; (8002900 <MX_GPIO_Init+0x124>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a33      	ldr	r2, [pc, #204]	; (8002900 <MX_GPIO_Init+0x124>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b31      	ldr	r3, [pc, #196]	; (8002900 <MX_GPIO_Init+0x124>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <MX_GPIO_Init+0x124>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a2c      	ldr	r2, [pc, #176]	; (8002900 <MX_GPIO_Init+0x124>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <MX_GPIO_Init+0x124>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_SPI2_CS_Pin|CAM_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002862:	2200      	movs	r2, #0
 8002864:	2112      	movs	r1, #18
 8002866:	4827      	ldr	r0, [pc, #156]	; (8002904 <MX_GPIO_Init+0x128>)
 8002868:	f001 f982 	bl	8003b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_SPI2_CS_GPIO_Port, DAC_SPI2_CS_Pin, GPIO_PIN_RESET);
 800286c:	2200      	movs	r2, #0
 800286e:	2104      	movs	r1, #4
 8002870:	4825      	ldr	r0, [pc, #148]	; (8002908 <MX_GPIO_Init+0x12c>)
 8002872:	f001 f97d 	bl	8003b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800287a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800287c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002886:	f107 0314 	add.w	r3, r7, #20
 800288a:	4619      	mov	r1, r3
 800288c:	481d      	ldr	r0, [pc, #116]	; (8002904 <MX_GPIO_Init+0x128>)
 800288e:	f000 ffeb 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SD_SPI2_CS_Pin;
 8002892:	2302      	movs	r3, #2
 8002894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800289a:	2301      	movs	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4816      	ldr	r0, [pc, #88]	; (8002904 <MX_GPIO_Init+0x128>)
 80028aa:	f000 ffdd 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = CAM_SPI1_CS_Pin;
 80028ae:	2310      	movs	r3, #16
 80028b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	480f      	ldr	r0, [pc, #60]	; (8002904 <MX_GPIO_Init+0x128>)
 80028c6:	f000 ffcf 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_SPI2_CS_Pin */
  GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 80028ca:	2304      	movs	r3, #4
 80028cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ce:	2301      	movs	r3, #1
 80028d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	4809      	ldr	r0, [pc, #36]	; (8002908 <MX_GPIO_Init+0x12c>)
 80028e2:	f000 ffc1 	bl	8003868 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2101      	movs	r1, #1
 80028ea:	2028      	movs	r0, #40	; 0x28
 80028ec:	f000 ff85 	bl	80037fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028f0:	2028      	movs	r0, #40	; 0x28
 80028f2:	f000 ff9e 	bl	8003832 <HAL_NVIC_EnableIRQ>

}
 80028f6:	bf00      	nop
 80028f8:	3728      	adds	r7, #40	; 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	40020800 	.word	0x40020800
 8002908:	40020400 	.word	0x40020400

0800290c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002914:	1d39      	adds	r1, r7, #4
 8002916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800291a:	2201      	movs	r2, #1
 800291c:	4803      	ldr	r0, [pc, #12]	; (800292c <__io_putchar+0x20>)
 800291e:	f003 ffd8 	bl	80068d2 <HAL_UART_Transmit>
  return ch;
 8002922:	687b      	ldr	r3, [r7, #4]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000404 	.word	0x20000404

08002930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002934:	b672      	cpsid	i
}
 8002936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002938:	e7fe      	b.n	8002938 <Error_Handler+0x8>
	...

0800293c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_MspInit+0x4c>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	4a0f      	ldr	r2, [pc, #60]	; (8002988 <HAL_MspInit+0x4c>)
 800294c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002950:	6453      	str	r3, [r2, #68]	; 0x44
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_MspInit+0x4c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_MspInit+0x4c>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a08      	ldr	r2, [pc, #32]	; (8002988 <HAL_MspInit+0x4c>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_MspInit+0x4c>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800297a:	2005      	movs	r0, #5
 800297c:	f000 ff32 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800

0800298c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <HAL_ADC_MspInit+0xb0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d141      	bne.n	8002a32 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_ADC_MspInit+0xb4>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <HAL_ADC_MspInit+0xb4>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <HAL_ADC_MspInit+0xb4>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <HAL_ADC_MspInit+0xb4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <HAL_ADC_MspInit+0xb4>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_ADC_MspInit+0xb4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <HAL_ADC_MspInit+0xb4>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <HAL_ADC_MspInit+0xb4>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_ADC_MspInit+0xb4>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_IN10_Pin;
 8002a02:	2301      	movs	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a06:	2303      	movs	r3, #3
 8002a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	480b      	ldr	r0, [pc, #44]	; (8002a44 <HAL_ADC_MspInit+0xb8>)
 8002a16:	f000 ff27 	bl	8003868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4806      	ldr	r0, [pc, #24]	; (8002a48 <HAL_ADC_MspInit+0xbc>)
 8002a2e:	f000 ff1b 	bl	8003868 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a32:	bf00      	nop
 8002a34:	3728      	adds	r7, #40	; 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40012000 	.word	0x40012000
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020800 	.word	0x40020800
 8002a48:	40020400 	.word	0x40020400

08002a4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	; 0x28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_I2C_MspInit+0x84>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d12b      	bne.n	8002ac6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_I2C_MspInit+0x88>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <HAL_I2C_MspInit+0x88>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_I2C_MspInit+0x88>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8002a8a:	23c0      	movs	r3, #192	; 0xc0
 8002a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a8e:	2312      	movs	r3, #18
 8002a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a96:	2303      	movs	r3, #3
 8002a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <HAL_I2C_MspInit+0x8c>)
 8002aa6:	f000 fedf 	bl	8003868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_I2C_MspInit+0x88>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <HAL_I2C_MspInit+0x88>)
 8002ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_I2C_MspInit+0x88>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ac6:	bf00      	nop
 8002ac8:	3728      	adds	r7, #40	; 0x28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40005400 	.word	0x40005400
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40020400 	.word	0x40020400

08002adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a5b      	ldr	r2, [pc, #364]	; (8002c68 <HAL_SPI_MspInit+0x18c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d12c      	bne.n	8002b58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
 8002b02:	4b5a      	ldr	r3, [pc, #360]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	4a59      	ldr	r2, [pc, #356]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0e:	4b57      	ldr	r3, [pc, #348]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b16:	623b      	str	r3, [r7, #32]
 8002b18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a52      	ldr	r2, [pc, #328]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b50      	ldr	r3, [pc, #320]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = CAM_SPI1_SCK_Pin|CAM_SPI1_MISO_Pin|CAM_SPI1_MOSI_Pin;
 8002b36:	23e0      	movs	r3, #224	; 0xe0
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b46:	2305      	movs	r3, #5
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4847      	ldr	r0, [pc, #284]	; (8002c70 <HAL_SPI_MspInit+0x194>)
 8002b52:	f000 fe89 	bl	8003868 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b56:	e082      	b.n	8002c5e <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a45      	ldr	r2, [pc, #276]	; (8002c74 <HAL_SPI_MspInit+0x198>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d14b      	bne.n	8002bfa <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b70:	6413      	str	r3, [r2, #64]	; 0x40
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a39      	ldr	r2, [pc, #228]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b37      	ldr	r3, [pc, #220]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	4a32      	ldr	r2, [pc, #200]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8002baa:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin|SD_SPI2_MOSI_Pin;
 8002bb6:	230c      	movs	r3, #12
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bc6:	2305      	movs	r3, #5
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4829      	ldr	r0, [pc, #164]	; (8002c78 <HAL_SPI_MspInit+0x19c>)
 8002bd2:	f000 fe49 	bl	8003868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8002bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be0:	2301      	movs	r3, #1
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002be8:	2305      	movs	r3, #5
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4822      	ldr	r0, [pc, #136]	; (8002c7c <HAL_SPI_MspInit+0x1a0>)
 8002bf4:	f000 fe38 	bl	8003868 <HAL_GPIO_Init>
}
 8002bf8:	e031      	b.n	8002c5e <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a20      	ldr	r2, [pc, #128]	; (8002c80 <HAL_SPI_MspInit+0x1a4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d12c      	bne.n	8002c5e <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c12:	6413      	str	r3, [r2, #64]	; 0x40
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	4a10      	ldr	r2, [pc, #64]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002c2a:	f043 0304 	orr.w	r3, r3, #4
 8002c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <HAL_SPI_MspInit+0x190>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002c3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c4e:	2306      	movs	r3, #6
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c56:	4619      	mov	r1, r3
 8002c58:	4807      	ldr	r0, [pc, #28]	; (8002c78 <HAL_SPI_MspInit+0x19c>)
 8002c5a:	f000 fe05 	bl	8003868 <HAL_GPIO_Init>
}
 8002c5e:	bf00      	nop
 8002c60:	3738      	adds	r7, #56	; 0x38
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40013000 	.word	0x40013000
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40003800 	.word	0x40003800
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020400 	.word	0x40020400
 8002c80:	40003c00 	.word	0x40003c00

08002c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d115      	bne.n	8002cc2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_TIM_Base_MspInit+0x48>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <HAL_TIM_Base_MspInit+0x48>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_TIM_Base_MspInit+0x48>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	201c      	movs	r0, #28
 8002cb8:	f000 fd9f 	bl	80037fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cbc:	201c      	movs	r0, #28
 8002cbe:	f000 fdb8 	bl	8003832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a19      	ldr	r2, [pc, #100]	; (8002d54 <HAL_UART_MspInit+0x84>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d12b      	bne.n	8002d4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_UART_MspInit+0x88>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <HAL_UART_MspInit+0x88>)
 8002cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_UART_MspInit+0x88>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_UART_MspInit+0x88>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a10      	ldr	r2, [pc, #64]	; (8002d58 <HAL_UART_MspInit+0x88>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HAL_UART_MspInit+0x88>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8002d2a:	230c      	movs	r3, #12
 8002d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d3a:	2307      	movs	r3, #7
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3e:	f107 0314 	add.w	r3, r7, #20
 8002d42:	4619      	mov	r1, r3
 8002d44:	4805      	ldr	r0, [pc, #20]	; (8002d5c <HAL_UART_MspInit+0x8c>)
 8002d46:	f000 fd8f 	bl	8003868 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d4a:	bf00      	nop
 8002d4c:	3728      	adds	r7, #40	; 0x28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40004400 	.word	0x40004400
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020000 	.word	0x40020000

08002d60 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile extern uint8_t Timer1, Timer2;

void SDTimer_Handler() {
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

	if (Timer1 > 0) {
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <SDTimer_Handler+0x40>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d006      	beq.n	8002d7c <SDTimer_Handler+0x1c>
		--Timer1;
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <SDTimer_Handler+0x40>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <SDTimer_Handler+0x40>)
 8002d7a:	701a      	strb	r2, [r3, #0]
	}

	if (Timer2 > 0) {
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <SDTimer_Handler+0x44>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <SDTimer_Handler+0x34>
		--Timer2;
 8002d86:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <SDTimer_Handler+0x44>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <SDTimer_Handler+0x44>)
 8002d92:	701a      	strb	r2, [r3, #0]
	}
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000210 	.word	0x20000210
 8002da4:	20000212 	.word	0x20000212

08002da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <NMI_Handler+0x4>

08002dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <HardFault_Handler+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <MemManage_Handler+0x4>

08002dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <BusFault_Handler+0x4>

08002dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <UsageFault_Handler+0x4>

08002dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <SysTick_Handler+0x30>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <SysTick_Handler+0x30>)
 8002e00:	701a      	strb	r2, [r3, #0]

	if (FatFsCnt >= 10) {
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <SysTick_Handler+0x30>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	d904      	bls.n	8002e16 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <SysTick_Handler+0x30>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002e12:	f7ff ffa5 	bl	8002d60 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e16:	f000 f96f 	bl	80030f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200024d4 	.word	0x200024d4

08002e24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e28:	4803      	ldr	r0, [pc, #12]	; (8002e38 <TIM2_IRQHandler+0x14>)
 8002e2a:	f003 f967 	bl	80060fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  set_capture_flag(1);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f7ff f9f2 	bl	8002218 <set_capture_flag>

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	200003bc 	.word	0x200003bc

08002e3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e44:	f000 feae 	bl	8003ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  read_fifo_and_write_data_file();
 8002e48:	f7fe ffce 	bl	8001de8 <read_fifo_and_write_data_file>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
	return 1;
 8002e54:	2301      	movs	r3, #1
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <_kill>:

int _kill(int pid, int sig)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e6a:	f006 ffcb 	bl	8009e04 <__errno>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2216      	movs	r2, #22
 8002e72:	601a      	str	r2, [r3, #0]
	return -1;
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_exit>:

void _exit (int status)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ffe7 	bl	8002e60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e92:	e7fe      	b.n	8002e92 <_exit+0x12>

08002e94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	e00a      	b.n	8002ebc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ea6:	f3af 8000 	nop.w
 8002eaa:	4601      	mov	r1, r0
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	60ba      	str	r2, [r7, #8]
 8002eb2:	b2ca      	uxtb	r2, r1
 8002eb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	dbf0      	blt.n	8002ea6 <_read+0x12>
	}

return len;
 8002ec4:	687b      	ldr	r3, [r7, #4]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e009      	b.n	8002ef4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	60ba      	str	r2, [r7, #8]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fd0f 	bl	800290c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	dbf1      	blt.n	8002ee0 <_write+0x12>
	}
	return len;
 8002efc:	687b      	ldr	r3, [r7, #4]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <_close>:

int _close(int file)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
	return -1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f2e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_isatty>:

int _isatty(int file)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
	return 1;
 8002f46:	2301      	movs	r3, #1
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <_sbrk+0x5c>)
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <_sbrk+0x60>)
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <_sbrk+0x64>)
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <_sbrk+0x68>)
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d207      	bcs.n	8002fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa0:	f006 ff30 	bl	8009e04 <__errno>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fae:	e009      	b.n	8002fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <_sbrk+0x64>)
 8002fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20018000 	.word	0x20018000
 8002fd0:	00000400 	.word	0x00000400
 8002fd4:	200024d8 	.word	0x200024d8
 8002fd8:	20002530 	.word	0x20002530

08002fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <SystemInit+0x20>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <SystemInit+0x20>)
 8002fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003004:	480d      	ldr	r0, [pc, #52]	; (800303c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003006:	490e      	ldr	r1, [pc, #56]	; (8003040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003008:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800300c:	e002      	b.n	8003014 <LoopCopyDataInit>

0800300e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003012:	3304      	adds	r3, #4

08003014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003018:	d3f9      	bcc.n	800300e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301a:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800301c:	4c0b      	ldr	r4, [pc, #44]	; (800304c <LoopFillZerobss+0x26>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003020:	e001      	b.n	8003026 <LoopFillZerobss>

08003022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003024:	3204      	adds	r2, #4

08003026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003028:	d3fb      	bcc.n	8003022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800302a:	f7ff ffd7 	bl	8002fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800302e:	f006 feef 	bl	8009e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003032:	f7ff f901 	bl	8002238 <main>
  bx  lr    
 8003036:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003038:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800303c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003040:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003044:	0800df3c 	.word	0x0800df3c
  ldr r2, =_sbss
 8003048:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800304c:	2000252c 	.word	0x2000252c

08003050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003050:	e7fe      	b.n	8003050 <ADC_IRQHandler>
	...

08003054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <HAL_Init+0x40>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <HAL_Init+0x40>)
 800305e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_Init+0x40>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <HAL_Init+0x40>)
 800306a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800306e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_Init+0x40>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a07      	ldr	r2, [pc, #28]	; (8003094 <HAL_Init+0x40>)
 8003076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800307c:	2003      	movs	r0, #3
 800307e:	f000 fbb1 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003082:	2000      	movs	r0, #0
 8003084:	f000 f808 	bl	8003098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003088:	f7ff fc58 	bl	800293c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023c00 	.word	0x40023c00

08003098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030a0:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_InitTick+0x54>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_InitTick+0x58>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	4619      	mov	r1, r3
 80030aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80030b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fbc9 	bl	800384e <HAL_SYSTICK_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e00e      	b.n	80030e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b0f      	cmp	r3, #15
 80030ca:	d80a      	bhi.n	80030e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030cc:	2200      	movs	r2, #0
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030d4:	f000 fb91 	bl	80037fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030d8:	4a06      	ldr	r2, [pc, #24]	; (80030f4 <HAL_InitTick+0x5c>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e000      	b.n	80030e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000004 	.word	0x20000004
 80030f0:	2000000c 	.word	0x2000000c
 80030f4:	20000008 	.word	0x20000008

080030f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_IncTick+0x20>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_IncTick+0x24>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4413      	add	r3, r2
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <HAL_IncTick+0x24>)
 800310a:	6013      	str	r3, [r2, #0]
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	2000000c 	.word	0x2000000c
 800311c:	200024dc 	.word	0x200024dc

08003120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return uwTick;
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <HAL_GetTick+0x14>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	200024dc 	.word	0x200024dc

08003138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff ffee 	bl	8003120 <HAL_GetTick>
 8003144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003150:	d005      	beq.n	800315e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <HAL_Delay+0x44>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800315e:	bf00      	nop
 8003160:	f7ff ffde 	bl	8003120 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	429a      	cmp	r2, r3
 800316e:	d8f7      	bhi.n	8003160 <HAL_Delay+0x28>
  {
  }
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	2000000c 	.word	0x2000000c

08003180 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e033      	b.n	80031fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fbf4 	bl	800298c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d118      	bne.n	80031f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031c6:	f023 0302 	bic.w	r3, r3, #2
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f93a 	bl	800344c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f023 0303 	bic.w	r3, r3, #3
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
 80031ee:	e001      	b.n	80031f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1c>
 8003220:	2302      	movs	r3, #2
 8003222:	e105      	b.n	8003430 <HAL_ADC_ConfigChannel+0x228>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b09      	cmp	r3, #9
 8003232:	d925      	bls.n	8003280 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68d9      	ldr	r1, [r3, #12]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	3b1e      	subs	r3, #30
 800324a:	2207      	movs	r2, #7
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43da      	mvns	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	400a      	ands	r2, r1
 8003258:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68d9      	ldr	r1, [r3, #12]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	4618      	mov	r0, r3
 800326c:	4603      	mov	r3, r0
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4403      	add	r3, r0
 8003272:	3b1e      	subs	r3, #30
 8003274:	409a      	lsls	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	e022      	b.n	80032c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6919      	ldr	r1, [r3, #16]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	2207      	movs	r2, #7
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	400a      	ands	r2, r1
 80032a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6919      	ldr	r1, [r3, #16]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	4618      	mov	r0, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4403      	add	r3, r0
 80032bc:	409a      	lsls	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d824      	bhi.n	8003318 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	3b05      	subs	r3, #5
 80032e0:	221f      	movs	r2, #31
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	400a      	ands	r2, r1
 80032ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4618      	mov	r0, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	3b05      	subs	r3, #5
 800330a:	fa00 f203 	lsl.w	r2, r0, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	635a      	str	r2, [r3, #52]	; 0x34
 8003316:	e04c      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b0c      	cmp	r3, #12
 800331e:	d824      	bhi.n	800336a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	3b23      	subs	r3, #35	; 0x23
 8003332:	221f      	movs	r2, #31
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43da      	mvns	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	400a      	ands	r2, r1
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	4618      	mov	r0, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	3b23      	subs	r3, #35	; 0x23
 800335c:	fa00 f203 	lsl.w	r2, r0, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
 8003368:	e023      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	3b41      	subs	r3, #65	; 0x41
 800337c:	221f      	movs	r2, #31
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	400a      	ands	r2, r1
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	4618      	mov	r0, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	3b41      	subs	r3, #65	; 0x41
 80033a6:	fa00 f203 	lsl.w	r2, r0, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033b2:	4b22      	ldr	r3, [pc, #136]	; (800343c <HAL_ADC_ConfigChannel+0x234>)
 80033b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a21      	ldr	r2, [pc, #132]	; (8003440 <HAL_ADC_ConfigChannel+0x238>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d109      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1cc>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b12      	cmp	r3, #18
 80033c6:	d105      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <HAL_ADC_ConfigChannel+0x238>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d123      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x21e>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d003      	beq.n	80033ee <HAL_ADC_ConfigChannel+0x1e6>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b11      	cmp	r3, #17
 80033ec:	d11b      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d111      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <HAL_ADC_ConfigChannel+0x23c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a10      	ldr	r2, [pc, #64]	; (8003448 <HAL_ADC_ConfigChannel+0x240>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	0c9a      	lsrs	r2, r3, #18
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003418:	e002      	b.n	8003420 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3b01      	subs	r3, #1
 800341e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f9      	bne.n	800341a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40012300 	.word	0x40012300
 8003440:	40012000 	.word	0x40012000
 8003444:	20000004 	.word	0x20000004
 8003448:	431bde83 	.word	0x431bde83

0800344c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003454:	4b79      	ldr	r3, [pc, #484]	; (800363c <ADC_Init+0x1f0>)
 8003456:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	431a      	orrs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6899      	ldr	r1, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	4a58      	ldr	r2, [pc, #352]	; (8003640 <ADC_Init+0x1f4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d022      	beq.n	800352a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6899      	ldr	r1, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	e00f      	b.n	800354a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003548:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0202 	bic.w	r2, r2, #2
 8003558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6899      	ldr	r1, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7e1b      	ldrb	r3, [r3, #24]
 8003564:	005a      	lsls	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003586:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003596:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	3b01      	subs	r3, #1
 80035a4:	035a      	lsls	r2, r3, #13
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	e007      	b.n	80035c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	3b01      	subs	r3, #1
 80035dc:	051a      	lsls	r2, r3, #20
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003602:	025a      	lsls	r2, r3, #9
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6899      	ldr	r1, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	029a      	lsls	r2, r3, #10
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40012300 	.word	0x40012300
 8003640:	0f000001 	.word	0x0f000001

08003644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003660:	4013      	ands	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800366c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003676:	4a04      	ldr	r2, [pc, #16]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	60d3      	str	r3, [r2, #12]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 0307 	and.w	r3, r3, #7
}
 800369a:	4618      	mov	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	db0b      	blt.n	80036d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	4907      	ldr	r1, [pc, #28]	; (80036e0 <__NVIC_EnableIRQ+0x38>)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2001      	movs	r0, #1
 80036ca:	fa00 f202 	lsl.w	r2, r0, r2
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000e100 	.word	0xe000e100

080036e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db0a      	blt.n	800370e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	490c      	ldr	r1, [pc, #48]	; (8003730 <__NVIC_SetPriority+0x4c>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	440b      	add	r3, r1
 8003708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800370c:	e00a      	b.n	8003724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4908      	ldr	r1, [pc, #32]	; (8003734 <__NVIC_SetPriority+0x50>)
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	3b04      	subs	r3, #4
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	440b      	add	r3, r1
 8003722:	761a      	strb	r2, [r3, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000e100 	.word	0xe000e100
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f1c3 0307 	rsb	r3, r3, #7
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf28      	it	cs
 8003756:	2304      	movcs	r3, #4
 8003758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3304      	adds	r3, #4
 800375e:	2b06      	cmp	r3, #6
 8003760:	d902      	bls.n	8003768 <NVIC_EncodePriority+0x30>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3b03      	subs	r3, #3
 8003766:	e000      	b.n	800376a <NVIC_EncodePriority+0x32>
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	401a      	ands	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43d9      	mvns	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	4313      	orrs	r3, r2
         );
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	; 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b0:	d301      	bcc.n	80037b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00f      	b.n	80037d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <SysTick_Config+0x40>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037be:	210f      	movs	r1, #15
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037c4:	f7ff ff8e 	bl	80036e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <SysTick_Config+0x40>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <SysTick_Config+0x40>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff29 	bl	8003644 <__NVIC_SetPriorityGrouping>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800380c:	f7ff ff3e 	bl	800368c <__NVIC_GetPriorityGrouping>
 8003810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff ff8e 	bl	8003738 <NVIC_EncodePriority>
 800381c:	4602      	mov	r2, r0
 800381e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff5d 	bl	80036e4 <__NVIC_SetPriority>
}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff31 	bl	80036a8 <__NVIC_EnableIRQ>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ffa2 	bl	80037a0 <SysTick_Config>
 800385c:	4603      	mov	r3, r0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	; 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	e159      	b.n	8003b38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003884:	2201      	movs	r2, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	429a      	cmp	r2, r3
 800389e:	f040 8148 	bne.w	8003b32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d005      	beq.n	80038ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d130      	bne.n	800391c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	2203      	movs	r2, #3
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f0:	2201      	movs	r2, #1
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 0201 	and.w	r2, r3, #1
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b03      	cmp	r3, #3
 8003926:	d017      	beq.n	8003958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d123      	bne.n	80039ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	08da      	lsrs	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3208      	adds	r2, #8
 800396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	08da      	lsrs	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3208      	adds	r2, #8
 80039a6:	69b9      	ldr	r1, [r7, #24]
 80039a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	2203      	movs	r2, #3
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0203 	and.w	r2, r3, #3
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80a2 	beq.w	8003b32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b57      	ldr	r3, [pc, #348]	; (8003b50 <HAL_GPIO_Init+0x2e8>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	4a56      	ldr	r2, [pc, #344]	; (8003b50 <HAL_GPIO_Init+0x2e8>)
 80039f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039fc:	6453      	str	r3, [r2, #68]	; 0x44
 80039fe:	4b54      	ldr	r3, [pc, #336]	; (8003b50 <HAL_GPIO_Init+0x2e8>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a0a:	4a52      	ldr	r2, [pc, #328]	; (8003b54 <HAL_GPIO_Init+0x2ec>)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	3302      	adds	r3, #2
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	220f      	movs	r2, #15
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a49      	ldr	r2, [pc, #292]	; (8003b58 <HAL_GPIO_Init+0x2f0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d019      	beq.n	8003a6a <HAL_GPIO_Init+0x202>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a48      	ldr	r2, [pc, #288]	; (8003b5c <HAL_GPIO_Init+0x2f4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_GPIO_Init+0x1fe>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a47      	ldr	r2, [pc, #284]	; (8003b60 <HAL_GPIO_Init+0x2f8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00d      	beq.n	8003a62 <HAL_GPIO_Init+0x1fa>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a46      	ldr	r2, [pc, #280]	; (8003b64 <HAL_GPIO_Init+0x2fc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d007      	beq.n	8003a5e <HAL_GPIO_Init+0x1f6>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a45      	ldr	r2, [pc, #276]	; (8003b68 <HAL_GPIO_Init+0x300>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <HAL_GPIO_Init+0x1f2>
 8003a56:	2304      	movs	r3, #4
 8003a58:	e008      	b.n	8003a6c <HAL_GPIO_Init+0x204>
 8003a5a:	2307      	movs	r3, #7
 8003a5c:	e006      	b.n	8003a6c <HAL_GPIO_Init+0x204>
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e004      	b.n	8003a6c <HAL_GPIO_Init+0x204>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e002      	b.n	8003a6c <HAL_GPIO_Init+0x204>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <HAL_GPIO_Init+0x204>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	f002 0203 	and.w	r2, r2, #3
 8003a72:	0092      	lsls	r2, r2, #2
 8003a74:	4093      	lsls	r3, r2
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a7c:	4935      	ldr	r1, [pc, #212]	; (8003b54 <HAL_GPIO_Init+0x2ec>)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	089b      	lsrs	r3, r3, #2
 8003a82:	3302      	adds	r3, #2
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a8a:	4b38      	ldr	r3, [pc, #224]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	43db      	mvns	r3, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4013      	ands	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aae:	4a2f      	ldr	r2, [pc, #188]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab4:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad8:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ade:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4013      	ands	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b02:	4a1a      	ldr	r2, [pc, #104]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b08:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b2c:	4a0f      	ldr	r2, [pc, #60]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3301      	adds	r3, #1
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b0f      	cmp	r3, #15
 8003b3c:	f67f aea2 	bls.w	8003884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	bf00      	nop
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40013800 	.word	0x40013800
 8003b58:	40020000 	.word	0x40020000
 8003b5c:	40020400 	.word	0x40020400
 8003b60:	40020800 	.word	0x40020800
 8003b64:	40020c00 	.word	0x40020c00
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40013c00 	.word	0x40013c00

08003b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b80:	787b      	ldrb	r3, [r7, #1]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b86:	887a      	ldrh	r2, [r7, #2]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b8c:	e003      	b.n	8003b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b8e:	887b      	ldrh	r3, [r7, #2]
 8003b90:	041a      	lsls	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	619a      	str	r2, [r3, #24]
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d006      	beq.n	8003bc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bba:	4a05      	ldr	r2, [pc, #20]	; (8003bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bbc:	88fb      	ldrh	r3, [r7, #6]
 8003bbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 f806 	bl	8003bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40013c00 	.word	0x40013c00

08003bd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e12b      	b.n	8003e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fe ff1a 	bl	8002a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c50:	f001 fbd2 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8003c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4a81      	ldr	r2, [pc, #516]	; (8003e60 <HAL_I2C_Init+0x274>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d807      	bhi.n	8003c70 <HAL_I2C_Init+0x84>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a80      	ldr	r2, [pc, #512]	; (8003e64 <HAL_I2C_Init+0x278>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bf94      	ite	ls
 8003c68:	2301      	movls	r3, #1
 8003c6a:	2300      	movhi	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e006      	b.n	8003c7e <HAL_I2C_Init+0x92>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a7d      	ldr	r2, [pc, #500]	; (8003e68 <HAL_I2C_Init+0x27c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	bf94      	ite	ls
 8003c78:	2301      	movls	r3, #1
 8003c7a:	2300      	movhi	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0e7      	b.n	8003e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a78      	ldr	r2, [pc, #480]	; (8003e6c <HAL_I2C_Init+0x280>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0c9b      	lsrs	r3, r3, #18
 8003c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4a6a      	ldr	r2, [pc, #424]	; (8003e60 <HAL_I2C_Init+0x274>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d802      	bhi.n	8003cc0 <HAL_I2C_Init+0xd4>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	e009      	b.n	8003cd4 <HAL_I2C_Init+0xe8>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	4a69      	ldr	r2, [pc, #420]	; (8003e70 <HAL_I2C_Init+0x284>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	099b      	lsrs	r3, r3, #6
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	495c      	ldr	r1, [pc, #368]	; (8003e60 <HAL_I2C_Init+0x274>)
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	d819      	bhi.n	8003d28 <HAL_I2C_Init+0x13c>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1e59      	subs	r1, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d02:	1c59      	adds	r1, r3, #1
 8003d04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d08:	400b      	ands	r3, r1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_I2C_Init+0x138>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1e59      	subs	r1, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	e051      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003d24:	2304      	movs	r3, #4
 8003d26:	e04f      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d111      	bne.n	8003d54 <HAL_I2C_Init+0x168>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1e58      	subs	r0, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6859      	ldr	r1, [r3, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	440b      	add	r3, r1
 8003d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d42:	3301      	adds	r3, #1
 8003d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e012      	b.n	8003d7a <HAL_I2C_Init+0x18e>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1e58      	subs	r0, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	0099      	lsls	r1, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Init+0x196>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e022      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10e      	bne.n	8003da8 <HAL_I2C_Init+0x1bc>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1e58      	subs	r0, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	440b      	add	r3, r1
 8003d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da6:	e00f      	b.n	8003dc8 <HAL_I2C_Init+0x1dc>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1e58      	subs	r0, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6859      	ldr	r1, [r3, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	0099      	lsls	r1, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	6809      	ldr	r1, [r1, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6911      	ldr	r1, [r2, #16]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68d2      	ldr	r2, [r2, #12]
 8003e02:	4311      	orrs	r1, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	000186a0 	.word	0x000186a0
 8003e64:	001e847f 	.word	0x001e847f
 8003e68:	003d08ff 	.word	0x003d08ff
 8003e6c:	431bde83 	.word	0x431bde83
 8003e70:	10624dd3 	.word	0x10624dd3

08003e74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	460b      	mov	r3, r1
 8003e82:	817b      	strh	r3, [r7, #10]
 8003e84:	4613      	mov	r3, r2
 8003e86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e88:	f7ff f94a 	bl	8003120 <HAL_GetTick>
 8003e8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	f040 80e0 	bne.w	800405c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2319      	movs	r3, #25
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	4970      	ldr	r1, [pc, #448]	; (8004068 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fc58 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e0d3      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_I2C_Master_Transmit+0x50>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0cc      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d007      	beq.n	8003eea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ef8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2221      	movs	r2, #33	; 0x21
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2210      	movs	r2, #16
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	893a      	ldrh	r2, [r7, #8]
 8003f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a50      	ldr	r2, [pc, #320]	; (800406c <HAL_I2C_Master_Transmit+0x1f8>)
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f2c:	8979      	ldrh	r1, [r7, #10]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fac2 	bl	80044bc <I2C_MasterRequestWrite>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e08d      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f58:	e066      	b.n	8004028 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	6a39      	ldr	r1, [r7, #32]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fcd2 	bl	8004908 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d107      	bne.n	8003f82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06b      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	781a      	ldrb	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d11b      	bne.n	8003ffc <HAL_I2C_Master_Transmit+0x188>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d017      	beq.n	8003ffc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	6a39      	ldr	r1, [r7, #32]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fcc2 	bl	800498a <I2C_WaitOnBTFFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	2b04      	cmp	r3, #4
 8004012:	d107      	bne.n	8004024 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004022:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e01a      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	d194      	bne.n	8003f5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e000      	b.n	800405e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	00100002 	.word	0x00100002
 800406c:	ffff0000 	.word	0xffff0000

08004070 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08c      	sub	sp, #48	; 0x30
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	461a      	mov	r2, r3
 800407c:	460b      	mov	r3, r1
 800407e:	817b      	strh	r3, [r7, #10]
 8004080:	4613      	mov	r3, r2
 8004082:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004084:	f7ff f84c 	bl	8003120 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b20      	cmp	r3, #32
 8004094:	f040 820b 	bne.w	80044ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2319      	movs	r3, #25
 800409e:	2201      	movs	r2, #1
 80040a0:	497c      	ldr	r1, [pc, #496]	; (8004294 <HAL_I2C_Master_Receive+0x224>)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fb5a 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
 80040b0:	e1fe      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_I2C_Master_Receive+0x50>
 80040bc:	2302      	movs	r3, #2
 80040be:	e1f7      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d007      	beq.n	80040e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2222      	movs	r2, #34	; 0x22
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2210      	movs	r2, #16
 8004102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	893a      	ldrh	r2, [r7, #8]
 8004116:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4a5c      	ldr	r2, [pc, #368]	; (8004298 <HAL_I2C_Master_Receive+0x228>)
 8004126:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004128:	8979      	ldrh	r1, [r7, #10]
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fa46 	bl	80045c0 <I2C_MasterRequestRead>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e1b8      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d113      	bne.n	800416e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004146:	2300      	movs	r3, #0
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	623b      	str	r3, [r7, #32]
 800415a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e18c      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	2b01      	cmp	r3, #1
 8004174:	d11b      	bne.n	80041ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004184:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e16c      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d11b      	bne.n	80041ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	e14c      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004214:	e138      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	2b03      	cmp	r3, #3
 800421c:	f200 80f1 	bhi.w	8004402 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004224:	2b01      	cmp	r3, #1
 8004226:	d123      	bne.n	8004270 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 fbed 	bl	8004a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e139      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800426e:	e10b      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	2b02      	cmp	r3, #2
 8004276:	d14e      	bne.n	8004316 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	2200      	movs	r2, #0
 8004280:	4906      	ldr	r1, [pc, #24]	; (800429c <HAL_I2C_Master_Receive+0x22c>)
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fa6a 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e10e      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
 8004292:	bf00      	nop
 8004294:	00100002 	.word	0x00100002
 8004298:	ffff0000 	.word	0xffff0000
 800429c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004314:	e0b8      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	2200      	movs	r2, #0
 800431e:	4966      	ldr	r1, [pc, #408]	; (80044b8 <HAL_I2C_Master_Receive+0x448>)
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 fa1b 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0bf      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800433e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	2200      	movs	r2, #0
 800437a:	494f      	ldr	r1, [pc, #316]	; (80044b8 <HAL_I2C_Master_Receive+0x448>)
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f9ed 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e091      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004400:	e042      	b.n	8004488 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fb00 	bl	8004a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e04c      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d118      	bne.n	8004488 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448c:	2b00      	cmp	r3, #0
 800448e:	f47f aec2 	bne.w	8004216 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3728      	adds	r7, #40	; 0x28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	00010004 	.word	0x00010004

080044bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	460b      	mov	r3, r1
 80044ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d006      	beq.n	80044e6 <I2C_MasterRequestWrite+0x2a>
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d003      	beq.n	80044e6 <I2C_MasterRequestWrite+0x2a>
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044e4:	d108      	bne.n	80044f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e00b      	b.n	8004510 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	2b12      	cmp	r3, #18
 80044fe:	d107      	bne.n	8004510 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800450e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f91d 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00d      	beq.n	8004544 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004536:	d103      	bne.n	8004540 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e035      	b.n	80045b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800454c:	d108      	bne.n	8004560 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800454e:	897b      	ldrh	r3, [r7, #10]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800455c:	611a      	str	r2, [r3, #16]
 800455e:	e01b      	b.n	8004598 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004560:	897b      	ldrh	r3, [r7, #10]
 8004562:	11db      	asrs	r3, r3, #7
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 0306 	and.w	r3, r3, #6
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f063 030f 	orn	r3, r3, #15
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	490e      	ldr	r1, [pc, #56]	; (80045b8 <I2C_MasterRequestWrite+0xfc>)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f943 	bl	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e010      	b.n	80045b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800458e:	897b      	ldrh	r3, [r7, #10]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	4907      	ldr	r1, [pc, #28]	; (80045bc <I2C_MasterRequestWrite+0x100>)
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f933 	bl	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	00010008 	.word	0x00010008
 80045bc:	00010002 	.word	0x00010002

080045c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	607a      	str	r2, [r7, #4]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	460b      	mov	r3, r1
 80045ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d006      	beq.n	80045fa <I2C_MasterRequestRead+0x3a>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d003      	beq.n	80045fa <I2C_MasterRequestRead+0x3a>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045f8:	d108      	bne.n	800460c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e00b      	b.n	8004624 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	2b11      	cmp	r3, #17
 8004612:	d107      	bne.n	8004624 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004622:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f893 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464a:	d103      	bne.n	8004654 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e079      	b.n	800474c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004660:	d108      	bne.n	8004674 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004662:	897b      	ldrh	r3, [r7, #10]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	611a      	str	r2, [r3, #16]
 8004672:	e05f      	b.n	8004734 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004674:	897b      	ldrh	r3, [r7, #10]
 8004676:	11db      	asrs	r3, r3, #7
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f003 0306 	and.w	r3, r3, #6
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f063 030f 	orn	r3, r3, #15
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4930      	ldr	r1, [pc, #192]	; (8004754 <I2C_MasterRequestRead+0x194>)
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f8b9 	bl	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e054      	b.n	800474c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046a2:	897b      	ldrh	r3, [r7, #10]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4929      	ldr	r1, [pc, #164]	; (8004758 <I2C_MasterRequestRead+0x198>)
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f8a9 	bl	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e044      	b.n	800474c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f831 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00d      	beq.n	800471c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470e:	d103      	bne.n	8004718 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004716:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e017      	b.n	800474c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800471c:	897b      	ldrh	r3, [r7, #10]
 800471e:	11db      	asrs	r3, r3, #7
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 0306 	and.w	r3, r3, #6
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f063 030e 	orn	r3, r3, #14
 800472c:	b2da      	uxtb	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	4907      	ldr	r1, [pc, #28]	; (8004758 <I2C_MasterRequestRead+0x198>)
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f865 	bl	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	00010008 	.word	0x00010008
 8004758:	00010002 	.word	0x00010002

0800475c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800476c:	e025      	b.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004774:	d021      	beq.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004776:	f7fe fcd3 	bl	8003120 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d116      	bne.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e023      	b.n	8004802 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d10d      	bne.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	43da      	mvns	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf0c      	ite	eq
 80047d6:	2301      	moveq	r3, #1
 80047d8:	2300      	movne	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	e00c      	b.n	80047fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	43da      	mvns	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4013      	ands	r3, r2
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	bf0c      	ite	eq
 80047f2:	2301      	moveq	r3, #1
 80047f4:	2300      	movne	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d0b6      	beq.n	800476e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004818:	e051      	b.n	80048be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004828:	d123      	bne.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004838:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004842:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f043 0204 	orr.w	r2, r3, #4
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e046      	b.n	8004900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004878:	d021      	beq.n	80048be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fe fc51 	bl	8003120 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d116      	bne.n	80048be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e020      	b.n	8004900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	0c1b      	lsrs	r3, r3, #16
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d10c      	bne.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	43da      	mvns	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4013      	ands	r3, r2
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bf14      	ite	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	2300      	moveq	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	e00b      	b.n	80048fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	43da      	mvns	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4013      	ands	r3, r2
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bf14      	ite	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	2300      	moveq	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d18d      	bne.n	800481a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004914:	e02d      	b.n	8004972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f8ce 	bl	8004ab8 <I2C_IsAcknowledgeFailed>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e02d      	b.n	8004982 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800492c:	d021      	beq.n	8004972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fe fbf7 	bl	8003120 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d116      	bne.n	8004972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f043 0220 	orr.w	r2, r3, #32
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e007      	b.n	8004982 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	2b80      	cmp	r3, #128	; 0x80
 800497e:	d1ca      	bne.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004996:	e02d      	b.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f88d 	bl	8004ab8 <I2C_IsAcknowledgeFailed>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e02d      	b.n	8004a04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ae:	d021      	beq.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b0:	f7fe fbb6 	bl	8003120 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d116      	bne.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e007      	b.n	8004a04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d1ca      	bne.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a18:	e042      	b.n	8004aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b10      	cmp	r3, #16
 8004a26:	d119      	bne.n	8004a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0210 	mvn.w	r2, #16
 8004a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e029      	b.n	8004ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5c:	f7fe fb60 	bl	8003120 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d302      	bcc.n	8004a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d116      	bne.n	8004aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e007      	b.n	8004ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aaa:	2b40      	cmp	r3, #64	; 0x40
 8004aac:	d1b5      	bne.n	8004a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ace:	d11b      	bne.n	8004b08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ad8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	f043 0204 	orr.w	r2, r3, #4
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e267      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d075      	beq.n	8004c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b36:	4b88      	ldr	r3, [pc, #544]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d00c      	beq.n	8004b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b42:	4b85      	ldr	r3, [pc, #532]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d112      	bne.n	8004b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b4e:	4b82      	ldr	r3, [pc, #520]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b5a:	d10b      	bne.n	8004b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5c:	4b7e      	ldr	r3, [pc, #504]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d05b      	beq.n	8004c20 <HAL_RCC_OscConfig+0x108>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d157      	bne.n	8004c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e242      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7c:	d106      	bne.n	8004b8c <HAL_RCC_OscConfig+0x74>
 8004b7e:	4b76      	ldr	r3, [pc, #472]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a75      	ldr	r2, [pc, #468]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e01d      	b.n	8004bc8 <HAL_RCC_OscConfig+0xb0>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x98>
 8004b96:	4b70      	ldr	r3, [pc, #448]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a6f      	ldr	r2, [pc, #444]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	4b6d      	ldr	r3, [pc, #436]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a6c      	ldr	r2, [pc, #432]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e00b      	b.n	8004bc8 <HAL_RCC_OscConfig+0xb0>
 8004bb0:	4b69      	ldr	r3, [pc, #420]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a68      	ldr	r2, [pc, #416]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	4b66      	ldr	r3, [pc, #408]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a65      	ldr	r2, [pc, #404]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d013      	beq.n	8004bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fe faa6 	bl	8003120 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fe faa2 	bl	8003120 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e207      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	4b5b      	ldr	r3, [pc, #364]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0xc0>
 8004bf6:	e014      	b.n	8004c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7fe fa92 	bl	8003120 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c00:	f7fe fa8e 	bl	8003120 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b64      	cmp	r3, #100	; 0x64
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e1f3      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c12:	4b51      	ldr	r3, [pc, #324]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0xe8>
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d063      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c2e:	4b4a      	ldr	r3, [pc, #296]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00b      	beq.n	8004c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3a:	4b47      	ldr	r3, [pc, #284]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d11c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c46:	4b44      	ldr	r3, [pc, #272]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d116      	bne.n	8004c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c52:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_RCC_OscConfig+0x152>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d001      	beq.n	8004c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e1c7      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6a:	4b3b      	ldr	r3, [pc, #236]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4937      	ldr	r1, [pc, #220]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c7e:	e03a      	b.n	8004cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d020      	beq.n	8004cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c88:	4b34      	ldr	r3, [pc, #208]	; (8004d5c <HAL_RCC_OscConfig+0x244>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fe fa47 	bl	8003120 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c96:	f7fe fa43 	bl	8003120 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e1a8      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca8:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb4:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	4925      	ldr	r1, [pc, #148]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]
 8004cc8:	e015      	b.n	8004cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cca:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <HAL_RCC_OscConfig+0x244>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fa26 	bl	8003120 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd8:	f7fe fa22 	bl	8003120 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e187      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cea:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d036      	beq.n	8004d70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d016      	beq.n	8004d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d0a:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <HAL_RCC_OscConfig+0x248>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d10:	f7fe fa06 	bl	8003120 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d18:	f7fe fa02 	bl	8003120 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e167      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x200>
 8004d36:	e01b      	b.n	8004d70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <HAL_RCC_OscConfig+0x248>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3e:	f7fe f9ef 	bl	8003120 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d44:	e00e      	b.n	8004d64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d46:	f7fe f9eb 	bl	8003120 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d907      	bls.n	8004d64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e150      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	42470000 	.word	0x42470000
 8004d60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d64:	4b88      	ldr	r3, [pc, #544]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ea      	bne.n	8004d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8097 	beq.w	8004eac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d82:	4b81      	ldr	r3, [pc, #516]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10f      	bne.n	8004dae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	4b7d      	ldr	r3, [pc, #500]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4a7c      	ldr	r2, [pc, #496]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9e:	4b7a      	ldr	r3, [pc, #488]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004daa:	2301      	movs	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dae:	4b77      	ldr	r3, [pc, #476]	; (8004f8c <HAL_RCC_OscConfig+0x474>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d118      	bne.n	8004dec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dba:	4b74      	ldr	r3, [pc, #464]	; (8004f8c <HAL_RCC_OscConfig+0x474>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a73      	ldr	r2, [pc, #460]	; (8004f8c <HAL_RCC_OscConfig+0x474>)
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc6:	f7fe f9ab 	bl	8003120 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dce:	f7fe f9a7 	bl	8003120 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e10c      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de0:	4b6a      	ldr	r3, [pc, #424]	; (8004f8c <HAL_RCC_OscConfig+0x474>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d106      	bne.n	8004e02 <HAL_RCC_OscConfig+0x2ea>
 8004df4:	4b64      	ldr	r3, [pc, #400]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	4a63      	ldr	r2, [pc, #396]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004e00:	e01c      	b.n	8004e3c <HAL_RCC_OscConfig+0x324>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b05      	cmp	r3, #5
 8004e08:	d10c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x30c>
 8004e0a:	4b5f      	ldr	r3, [pc, #380]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	4a5e      	ldr	r2, [pc, #376]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e10:	f043 0304 	orr.w	r3, r3, #4
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70
 8004e16:	4b5c      	ldr	r3, [pc, #368]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	4a5b      	ldr	r2, [pc, #364]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	6713      	str	r3, [r2, #112]	; 0x70
 8004e22:	e00b      	b.n	8004e3c <HAL_RCC_OscConfig+0x324>
 8004e24:	4b58      	ldr	r3, [pc, #352]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e28:	4a57      	ldr	r2, [pc, #348]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e30:	4b55      	ldr	r3, [pc, #340]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e34:	4a54      	ldr	r2, [pc, #336]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e36:	f023 0304 	bic.w	r3, r3, #4
 8004e3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d015      	beq.n	8004e70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e44:	f7fe f96c 	bl	8003120 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4a:	e00a      	b.n	8004e62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e4c:	f7fe f968 	bl	8003120 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e0cb      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e62:	4b49      	ldr	r3, [pc, #292]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0ee      	beq.n	8004e4c <HAL_RCC_OscConfig+0x334>
 8004e6e:	e014      	b.n	8004e9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e70:	f7fe f956 	bl	8003120 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e76:	e00a      	b.n	8004e8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e78:	f7fe f952 	bl	8003120 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e0b5      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e8e:	4b3e      	ldr	r3, [pc, #248]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1ee      	bne.n	8004e78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d105      	bne.n	8004eac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea0:	4b39      	ldr	r3, [pc, #228]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	4a38      	ldr	r2, [pc, #224]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80a1 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eb6:	4b34      	ldr	r3, [pc, #208]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d05c      	beq.n	8004f7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d141      	bne.n	8004f4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eca:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <HAL_RCC_OscConfig+0x478>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fe f926 	bl	8003120 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fe f922 	bl	8003120 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e087      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eea:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	019b      	lsls	r3, r3, #6
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	041b      	lsls	r3, r3, #16
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	061b      	lsls	r3, r3, #24
 8004f1a:	491b      	ldr	r1, [pc, #108]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f20:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <HAL_RCC_OscConfig+0x478>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f26:	f7fe f8fb 	bl	8003120 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2e:	f7fe f8f7 	bl	8003120 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e05c      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f40:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x416>
 8004f4c:	e054      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <HAL_RCC_OscConfig+0x478>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fe f8e4 	bl	8003120 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fe f8e0 	bl	8003120 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e045      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x444>
 8004f7a:	e03d      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d107      	bne.n	8004f94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e038      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40007000 	.word	0x40007000
 8004f90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <HAL_RCC_OscConfig+0x4ec>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d028      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d121      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d11a      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d111      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d107      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800

08005008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0cc      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800501c:	4b68      	ldr	r3, [pc, #416]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d90c      	bls.n	8005044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	4b65      	ldr	r3, [pc, #404]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005032:	4b63      	ldr	r3, [pc, #396]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0b8      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d020      	beq.n	8005092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800505c:	4b59      	ldr	r3, [pc, #356]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a58      	ldr	r2, [pc, #352]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005074:	4b53      	ldr	r3, [pc, #332]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4a52      	ldr	r2, [pc, #328]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800507e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005080:	4b50      	ldr	r3, [pc, #320]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	494d      	ldr	r1, [pc, #308]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d044      	beq.n	8005128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a6:	4b47      	ldr	r3, [pc, #284]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d119      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e07f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d003      	beq.n	80050c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c6:	4b3f      	ldr	r3, [pc, #252]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e06f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d6:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e067      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050e6:	4b37      	ldr	r3, [pc, #220]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f023 0203 	bic.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4934      	ldr	r1, [pc, #208]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050f8:	f7fe f812 	bl	8003120 <HAL_GetTick>
 80050fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005100:	f7fe f80e 	bl	8003120 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e04f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	4b2b      	ldr	r3, [pc, #172]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 020c 	and.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	429a      	cmp	r2, r3
 8005126:	d1eb      	bne.n	8005100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d20c      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b22      	ldr	r3, [pc, #136]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b20      	ldr	r3, [pc, #128]	; (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e032      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800515c:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4916      	ldr	r1, [pc, #88]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517a:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	490e      	ldr	r1, [pc, #56]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800518e:	f000 f821 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8005192:	4602      	mov	r2, r0
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	490a      	ldr	r1, [pc, #40]	; (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 80051a0:	5ccb      	ldrb	r3, [r1, r3]
 80051a2:	fa22 f303 	lsr.w	r3, r2, r3
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051aa:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_RCC_ClockConfig+0x1c8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fd ff72 	bl	8003098 <HAL_InitTick>

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40023c00 	.word	0x40023c00
 80051c4:	40023800 	.word	0x40023800
 80051c8:	0800dab8 	.word	0x0800dab8
 80051cc:	20000004 	.word	0x20000004
 80051d0:	20000008 	.word	0x20000008

080051d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d8:	b094      	sub	sp, #80	; 0x50
 80051da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	647b      	str	r3, [r7, #68]	; 0x44
 80051e0:	2300      	movs	r3, #0
 80051e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e4:	2300      	movs	r3, #0
 80051e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051ec:	4b79      	ldr	r3, [pc, #484]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 030c 	and.w	r3, r3, #12
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d00d      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0x40>
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	f200 80e1 	bhi.w	80053c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x34>
 8005202:	2b04      	cmp	r3, #4
 8005204:	d003      	beq.n	800520e <HAL_RCC_GetSysClockFreq+0x3a>
 8005206:	e0db      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005208:	4b73      	ldr	r3, [pc, #460]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800520a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800520c:	e0db      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800520e:	4b73      	ldr	r3, [pc, #460]	; (80053dc <HAL_RCC_GetSysClockFreq+0x208>)
 8005210:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005212:	e0d8      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005214:	4b6f      	ldr	r3, [pc, #444]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800521c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800521e:	4b6d      	ldr	r3, [pc, #436]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d063      	beq.n	80052f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522a:	4b6a      	ldr	r3, [pc, #424]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	099b      	lsrs	r3, r3, #6
 8005230:	2200      	movs	r2, #0
 8005232:	63bb      	str	r3, [r7, #56]	; 0x38
 8005234:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523c:	633b      	str	r3, [r7, #48]	; 0x30
 800523e:	2300      	movs	r3, #0
 8005240:	637b      	str	r3, [r7, #52]	; 0x34
 8005242:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005246:	4622      	mov	r2, r4
 8005248:	462b      	mov	r3, r5
 800524a:	f04f 0000 	mov.w	r0, #0
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	0159      	lsls	r1, r3, #5
 8005254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005258:	0150      	lsls	r0, r2, #5
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4621      	mov	r1, r4
 8005260:	1a51      	subs	r1, r2, r1
 8005262:	6139      	str	r1, [r7, #16]
 8005264:	4629      	mov	r1, r5
 8005266:	eb63 0301 	sbc.w	r3, r3, r1
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005278:	4659      	mov	r1, fp
 800527a:	018b      	lsls	r3, r1, #6
 800527c:	4651      	mov	r1, sl
 800527e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005282:	4651      	mov	r1, sl
 8005284:	018a      	lsls	r2, r1, #6
 8005286:	4651      	mov	r1, sl
 8005288:	ebb2 0801 	subs.w	r8, r2, r1
 800528c:	4659      	mov	r1, fp
 800528e:	eb63 0901 	sbc.w	r9, r3, r1
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800529e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052a6:	4690      	mov	r8, r2
 80052a8:	4699      	mov	r9, r3
 80052aa:	4623      	mov	r3, r4
 80052ac:	eb18 0303 	adds.w	r3, r8, r3
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	462b      	mov	r3, r5
 80052b4:	eb49 0303 	adc.w	r3, r9, r3
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052c6:	4629      	mov	r1, r5
 80052c8:	024b      	lsls	r3, r1, #9
 80052ca:	4621      	mov	r1, r4
 80052cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052d0:	4621      	mov	r1, r4
 80052d2:	024a      	lsls	r2, r1, #9
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052da:	2200      	movs	r2, #0
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052e4:	f7fb fc98 	bl	8000c18 <__aeabi_uldivmod>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4613      	mov	r3, r2
 80052ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f0:	e058      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f2:	4b38      	ldr	r3, [pc, #224]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	099b      	lsrs	r3, r3, #6
 80052f8:	2200      	movs	r2, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	4611      	mov	r1, r2
 80052fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005302:	623b      	str	r3, [r7, #32]
 8005304:	2300      	movs	r3, #0
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
 8005308:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800530c:	4642      	mov	r2, r8
 800530e:	464b      	mov	r3, r9
 8005310:	f04f 0000 	mov.w	r0, #0
 8005314:	f04f 0100 	mov.w	r1, #0
 8005318:	0159      	lsls	r1, r3, #5
 800531a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800531e:	0150      	lsls	r0, r2, #5
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4641      	mov	r1, r8
 8005326:	ebb2 0a01 	subs.w	sl, r2, r1
 800532a:	4649      	mov	r1, r9
 800532c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800533c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005340:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005344:	ebb2 040a 	subs.w	r4, r2, sl
 8005348:	eb63 050b 	sbc.w	r5, r3, fp
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	00eb      	lsls	r3, r5, #3
 8005356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800535a:	00e2      	lsls	r2, r4, #3
 800535c:	4614      	mov	r4, r2
 800535e:	461d      	mov	r5, r3
 8005360:	4643      	mov	r3, r8
 8005362:	18e3      	adds	r3, r4, r3
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	464b      	mov	r3, r9
 8005368:	eb45 0303 	adc.w	r3, r5, r3
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800537a:	4629      	mov	r1, r5
 800537c:	028b      	lsls	r3, r1, #10
 800537e:	4621      	mov	r1, r4
 8005380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005384:	4621      	mov	r1, r4
 8005386:	028a      	lsls	r2, r1, #10
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800538e:	2200      	movs	r2, #0
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	61fa      	str	r2, [r7, #28]
 8005394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005398:	f7fb fc3e 	bl	8000c18 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4613      	mov	r3, r2
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	0c1b      	lsrs	r3, r3, #16
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	3301      	adds	r3, #1
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80053b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053be:	e002      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80053c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3750      	adds	r7, #80	; 0x50
 80053cc:	46bd      	mov	sp, r7
 80053ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800
 80053d8:	00f42400 	.word	0x00f42400
 80053dc:	007a1200 	.word	0x007a1200

080053e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053e6:	681b      	ldr	r3, [r3, #0]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000004 	.word	0x20000004

080053f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053fc:	f7ff fff0 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	0a9b      	lsrs	r3, r3, #10
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4903      	ldr	r1, [pc, #12]	; (800541c <HAL_RCC_GetPCLK1Freq+0x24>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005414:	4618      	mov	r0, r3
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40023800 	.word	0x40023800
 800541c:	0800dac8 	.word	0x0800dac8

08005420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005424:	f7ff ffdc 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005428:	4602      	mov	r2, r0
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	0b5b      	lsrs	r3, r3, #13
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	4903      	ldr	r1, [pc, #12]	; (8005444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005436:	5ccb      	ldrb	r3, [r1, r3]
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800543c:	4618      	mov	r0, r3
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40023800 	.word	0x40023800
 8005444:	0800dac8 	.word	0x0800dac8

08005448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e07b      	b.n	8005552 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d108      	bne.n	8005474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800546a:	d009      	beq.n	8005480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	61da      	str	r2, [r3, #28]
 8005472:	e005      	b.n	8005480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fd fb1e 	bl	8002adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005504:	ea42 0103 	orr.w	r1, r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	f003 0104 	and.w	r1, r3, #4
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	f003 0210 	and.w	r2, r3, #16
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005540:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b088      	sub	sp, #32
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	4613      	mov	r3, r2
 8005568:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_SPI_Transmit+0x22>
 8005578:	2302      	movs	r3, #2
 800557a:	e126      	b.n	80057ca <HAL_SPI_Transmit+0x270>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005584:	f7fd fdcc 	bl	8003120 <HAL_GetTick>
 8005588:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d002      	beq.n	80055a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800559a:	2302      	movs	r3, #2
 800559c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800559e:	e10b      	b.n	80057b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_SPI_Transmit+0x52>
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055b0:	e102      	b.n	80057b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2203      	movs	r2, #3
 80055b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	88fa      	ldrh	r2, [r7, #6]
 80055ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f8:	d10f      	bne.n	800561a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005618:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d007      	beq.n	8005638 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005636:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005640:	d14b      	bne.n	80056da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_SPI_Transmit+0xf6>
 800564a:	8afb      	ldrh	r3, [r7, #22]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d13e      	bne.n	80056ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	881a      	ldrh	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	1c9a      	adds	r2, r3, #2
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005674:	e02b      	b.n	80056ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d112      	bne.n	80056aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	881a      	ldrh	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	1c9a      	adds	r2, r3, #2
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80056a8:	e011      	b.n	80056ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056aa:	f7fd fd39 	bl	8003120 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d803      	bhi.n	80056c2 <HAL_SPI_Transmit+0x168>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c0:	d102      	bne.n	80056c8 <HAL_SPI_Transmit+0x16e>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d102      	bne.n	80056ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056cc:	e074      	b.n	80057b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1ce      	bne.n	8005676 <HAL_SPI_Transmit+0x11c>
 80056d8:	e04c      	b.n	8005774 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <HAL_SPI_Transmit+0x18e>
 80056e2:	8afb      	ldrh	r3, [r7, #22]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d140      	bne.n	800576a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	7812      	ldrb	r2, [r2, #0]
 80056f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800570e:	e02c      	b.n	800576a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b02      	cmp	r3, #2
 800571c:	d113      	bne.n	8005746 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	7812      	ldrb	r2, [r2, #0]
 800572a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	86da      	strh	r2, [r3, #54]	; 0x36
 8005744:	e011      	b.n	800576a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005746:	f7fd fceb 	bl	8003120 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d803      	bhi.n	800575e <HAL_SPI_Transmit+0x204>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800575c:	d102      	bne.n	8005764 <HAL_SPI_Transmit+0x20a>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005768:	e026      	b.n	80057b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1cd      	bne.n	8005710 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fbcb 	bl	8005f14 <SPI_EndRxTxTransaction>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e000      	b.n	80057b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80057b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b088      	sub	sp, #32
 80057d6:	af02      	add	r7, sp, #8
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	4613      	mov	r3, r2
 80057e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ee:	d112      	bne.n	8005816 <HAL_SPI_Receive+0x44>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10e      	bne.n	8005816 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2204      	movs	r2, #4
 80057fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	4613      	mov	r3, r2
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f8f1 	bl	80059f4 <HAL_SPI_TransmitReceive>
 8005812:	4603      	mov	r3, r0
 8005814:	e0ea      	b.n	80059ec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_SPI_Receive+0x52>
 8005820:	2302      	movs	r3, #2
 8005822:	e0e3      	b.n	80059ec <HAL_SPI_Receive+0x21a>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800582c:	f7fd fc78 	bl	8003120 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b01      	cmp	r3, #1
 800583c:	d002      	beq.n	8005844 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800583e:	2302      	movs	r3, #2
 8005840:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005842:	e0ca      	b.n	80059da <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Receive+0x7e>
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005854:	e0c1      	b.n	80059da <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2204      	movs	r2, #4
 800585a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589c:	d10f      	bne.n	80058be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	d007      	beq.n	80058dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d162      	bne.n	80059aa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058e4:	e02e      	b.n	8005944 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d115      	bne.n	8005920 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f103 020c 	add.w	r2, r3, #12
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	7812      	ldrb	r2, [r2, #0]
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800591e:	e011      	b.n	8005944 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005920:	f7fd fbfe 	bl	8003120 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d803      	bhi.n	8005938 <HAL_SPI_Receive+0x166>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005936:	d102      	bne.n	800593e <HAL_SPI_Receive+0x16c>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005942:	e04a      	b.n	80059da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1cb      	bne.n	80058e6 <HAL_SPI_Receive+0x114>
 800594e:	e031      	b.n	80059b4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b01      	cmp	r3, #1
 800595c:	d113      	bne.n	8005986 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	b292      	uxth	r2, r2
 800596a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005984:	e011      	b.n	80059aa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005986:	f7fd fbcb 	bl	8003120 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d803      	bhi.n	800599e <HAL_SPI_Receive+0x1cc>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800599c:	d102      	bne.n	80059a4 <HAL_SPI_Receive+0x1d2>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059a8:	e017      	b.n	80059da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1cd      	bne.n	8005950 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fa45 	bl	8005e48 <SPI_EndRxTransaction>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
 80059d6:	e000      	b.n	80059da <HAL_SPI_Receive+0x208>
  }

error :
 80059d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08c      	sub	sp, #48	; 0x30
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a02:	2301      	movs	r3, #1
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_SPI_TransmitReceive+0x26>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e18a      	b.n	8005d30 <HAL_SPI_TransmitReceive+0x33c>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a22:	f7fd fb7d 	bl	8003120 <HAL_GetTick>
 8005a26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d00f      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x70>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a4a:	d107      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x68>
 8005a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d003      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a62:	e15b      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x82>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x82>
 8005a70:	887b      	ldrh	r3, [r7, #2]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a7c:	e14e      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d003      	beq.n	8005a92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2205      	movs	r2, #5
 8005a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	887a      	ldrh	r2, [r7, #2]
 8005aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	887a      	ldrh	r2, [r7, #2]
 8005aa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	887a      	ldrh	r2, [r7, #2]
 8005ab4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	887a      	ldrh	r2, [r7, #2]
 8005aba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d007      	beq.n	8005ae6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aee:	d178      	bne.n	8005be2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x10a>
 8005af8:	8b7b      	ldrh	r3, [r7, #26]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d166      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	881a      	ldrh	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	1c9a      	adds	r2, r3, #2
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b22:	e053      	b.n	8005bcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d11b      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x176>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d016      	beq.n	8005b6a <HAL_SPI_TransmitReceive+0x176>
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d113      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	881a      	ldrh	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	1c9a      	adds	r2, r3, #2
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d119      	bne.n	8005bac <HAL_SPI_TransmitReceive+0x1b8>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d014      	beq.n	8005bac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	b292      	uxth	r2, r2
 8005b8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	1c9a      	adds	r2, r3, #2
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bac:	f7fd fab8 	bl	8003120 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d807      	bhi.n	8005bcc <HAL_SPI_TransmitReceive+0x1d8>
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc2:	d003      	beq.n	8005bcc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bca:	e0a7      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1a6      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x130>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1a1      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x130>
 8005be0:	e07c      	b.n	8005cdc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_SPI_TransmitReceive+0x1fc>
 8005bea:	8b7b      	ldrh	r3, [r7, #26]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d16b      	bne.n	8005cc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	7812      	ldrb	r2, [r2, #0]
 8005bfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c16:	e057      	b.n	8005cc8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d11c      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x26c>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d017      	beq.n	8005c60 <HAL_SPI_TransmitReceive+0x26c>
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d114      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d119      	bne.n	8005ca2 <HAL_SPI_TransmitReceive+0x2ae>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d014      	beq.n	8005ca2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ca2:	f7fd fa3d 	bl	8003120 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d803      	bhi.n	8005cba <HAL_SPI_TransmitReceive+0x2c6>
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cb8:	d102      	bne.n	8005cc0 <HAL_SPI_TransmitReceive+0x2cc>
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d103      	bne.n	8005cc8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005cc6:	e029      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1a2      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x224>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d19d      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f917 	bl	8005f14 <SPI_EndRxTxTransaction>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d006      	beq.n	8005cfa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005cf8:	e010      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10b      	bne.n	8005d1a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	e000      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3730      	adds	r7, #48	; 0x30
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	4613      	mov	r3, r2
 8005d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d48:	f7fd f9ea 	bl	8003120 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d58:	f7fd f9e2 	bl	8003120 <HAL_GetTick>
 8005d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d5e:	4b39      	ldr	r3, [pc, #228]	; (8005e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	015b      	lsls	r3, r3, #5
 8005d64:	0d1b      	lsrs	r3, r3, #20
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	fb02 f303 	mul.w	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d6e:	e054      	b.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d76:	d050      	beq.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d78:	f7fd f9d2 	bl	8003120 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d902      	bls.n	8005d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d13d      	bne.n	8005e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005da6:	d111      	bne.n	8005dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db0:	d004      	beq.n	8005dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dba:	d107      	bne.n	8005dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd4:	d10f      	bne.n	8005df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e017      	b.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4013      	ands	r3, r2
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	bf0c      	ite	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d19b      	bne.n	8005d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3720      	adds	r7, #32
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000004 	.word	0x20000004

08005e48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e5c:	d111      	bne.n	8005e82 <SPI_EndRxTransaction+0x3a>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e66:	d004      	beq.n	8005e72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e70:	d107      	bne.n	8005e82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8a:	d12a      	bne.n	8005ee2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e94:	d012      	beq.n	8005ebc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2180      	movs	r1, #128	; 0x80
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ff49 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d02d      	beq.n	8005f08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb0:	f043 0220 	orr.w	r2, r3, #32
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e026      	b.n	8005f0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff ff36 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01a      	beq.n	8005f08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e013      	b.n	8005f0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2101      	movs	r1, #1
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff ff23 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e000      	b.n	8005f0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f20:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <SPI_EndRxTxTransaction+0x7c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <SPI_EndRxTxTransaction+0x80>)
 8005f26:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2a:	0d5b      	lsrs	r3, r3, #21
 8005f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f30:	fb02 f303 	mul.w	r3, r2, r3
 8005f34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f3e:	d112      	bne.n	8005f66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2200      	movs	r2, #0
 8005f48:	2180      	movs	r1, #128	; 0x80
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff fef4 	bl	8005d38 <SPI_WaitFlagStateUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	f043 0220 	orr.w	r2, r3, #32
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e00f      	b.n	8005f86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7c:	2b80      	cmp	r3, #128	; 0x80
 8005f7e:	d0f2      	beq.n	8005f66 <SPI_EndRxTxTransaction+0x52>
 8005f80:	e000      	b.n	8005f84 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f82:	bf00      	nop
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000004 	.word	0x20000004
 8005f94:	165e9f81 	.word	0x165e9f81

08005f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e041      	b.n	800602e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d106      	bne.n	8005fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fc fe60 	bl	8002c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f000 fa92 	bl	8006500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	d001      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e044      	b.n	80060da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0201 	orr.w	r2, r2, #1
 8006066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1e      	ldr	r2, [pc, #120]	; (80060e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d018      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x6c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607a:	d013      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x6c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a1a      	ldr	r2, [pc, #104]	; (80060ec <HAL_TIM_Base_Start_IT+0xb4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00e      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x6c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a19      	ldr	r2, [pc, #100]	; (80060f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d009      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x6c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d004      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0x6c>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a16      	ldr	r2, [pc, #88]	; (80060f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d111      	bne.n	80060c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b06      	cmp	r3, #6
 80060b4:	d010      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0201 	orr.w	r2, r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c6:	e007      	b.n	80060d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800
 80060f4:	40000c00 	.word	0x40000c00
 80060f8:	40014000 	.word	0x40014000

080060fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b02      	cmp	r3, #2
 8006110:	d122      	bne.n	8006158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b02      	cmp	r3, #2
 800611e:	d11b      	bne.n	8006158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0202 	mvn.w	r2, #2
 8006128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f9bf 	bl	80064c2 <HAL_TIM_IC_CaptureCallback>
 8006144:	e005      	b.n	8006152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f9b1 	bl	80064ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f9c2 	bl	80064d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b04      	cmp	r3, #4
 8006164:	d122      	bne.n	80061ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b04      	cmp	r3, #4
 8006172:	d11b      	bne.n	80061ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0204 	mvn.w	r2, #4
 800617c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f995 	bl	80064c2 <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f987 	bl	80064ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f998 	bl	80064d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d122      	bne.n	8006200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d11b      	bne.n	8006200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0208 	mvn.w	r2, #8
 80061d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2204      	movs	r2, #4
 80061d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f96b 	bl	80064c2 <HAL_TIM_IC_CaptureCallback>
 80061ec:	e005      	b.n	80061fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f95d 	bl	80064ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f96e 	bl	80064d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	2b10      	cmp	r3, #16
 800620c:	d122      	bne.n	8006254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b10      	cmp	r3, #16
 800621a:	d11b      	bne.n	8006254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0210 	mvn.w	r2, #16
 8006224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2208      	movs	r2, #8
 800622a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f941 	bl	80064c2 <HAL_TIM_IC_CaptureCallback>
 8006240:	e005      	b.n	800624e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f933 	bl	80064ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f944 	bl	80064d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b01      	cmp	r3, #1
 8006260:	d10e      	bne.n	8006280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d107      	bne.n	8006280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0201 	mvn.w	r2, #1
 8006278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f90d 	bl	800649a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628a:	2b80      	cmp	r3, #128	; 0x80
 800628c:	d10e      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006298:	2b80      	cmp	r3, #128	; 0x80
 800629a:	d107      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fabc 	bl	8006824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	d10e      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d107      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f909 	bl	80064ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d10e      	bne.n	8006304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d107      	bne.n	8006304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0220 	mvn.w	r2, #32
 80062fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fa86 	bl	8006810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_TIM_ConfigClockSource+0x1c>
 8006324:	2302      	movs	r3, #2
 8006326:	e0b4      	b.n	8006492 <HAL_TIM_ConfigClockSource+0x186>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800634e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006360:	d03e      	beq.n	80063e0 <HAL_TIM_ConfigClockSource+0xd4>
 8006362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006366:	f200 8087 	bhi.w	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636e:	f000 8086 	beq.w	800647e <HAL_TIM_ConfigClockSource+0x172>
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006376:	d87f      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 8006378:	2b70      	cmp	r3, #112	; 0x70
 800637a:	d01a      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0xa6>
 800637c:	2b70      	cmp	r3, #112	; 0x70
 800637e:	d87b      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 8006380:	2b60      	cmp	r3, #96	; 0x60
 8006382:	d050      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x11a>
 8006384:	2b60      	cmp	r3, #96	; 0x60
 8006386:	d877      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 8006388:	2b50      	cmp	r3, #80	; 0x50
 800638a:	d03c      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0xfa>
 800638c:	2b50      	cmp	r3, #80	; 0x50
 800638e:	d873      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d058      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0x13a>
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d86f      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 8006398:	2b30      	cmp	r3, #48	; 0x30
 800639a:	d064      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x15a>
 800639c:	2b30      	cmp	r3, #48	; 0x30
 800639e:	d86b      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d060      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x15a>
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d867      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d05c      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x15a>
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	d05a      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x15a>
 80063b0:	e062      	b.n	8006478 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6899      	ldr	r1, [r3, #8]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f000 f997 	bl	80066f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	609a      	str	r2, [r3, #8]
      break;
 80063de:	e04f      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	6899      	ldr	r1, [r3, #8]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f000 f980 	bl	80066f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006402:	609a      	str	r2, [r3, #8]
      break;
 8006404:	e03c      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6859      	ldr	r1, [r3, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	461a      	mov	r2, r3
 8006414:	f000 f8f4 	bl	8006600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2150      	movs	r1, #80	; 0x50
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f94d 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8006424:	e02c      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6859      	ldr	r1, [r3, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	461a      	mov	r2, r3
 8006434:	f000 f913 	bl	800665e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2160      	movs	r1, #96	; 0x60
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f93d 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8006444:	e01c      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	6859      	ldr	r1, [r3, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	461a      	mov	r2, r3
 8006454:	f000 f8d4 	bl	8006600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2140      	movs	r1, #64	; 0x40
 800645e:	4618      	mov	r0, r3
 8006460:	f000 f92d 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8006464:	e00c      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4619      	mov	r1, r3
 8006470:	4610      	mov	r0, r2
 8006472:	f000 f924 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8006476:	e003      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	73fb      	strb	r3, [r7, #15]
      break;
 800647c:	e000      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800647e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
	...

08006500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a34      	ldr	r2, [pc, #208]	; (80065e4 <TIM_Base_SetConfig+0xe4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00f      	beq.n	8006538 <TIM_Base_SetConfig+0x38>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651e:	d00b      	beq.n	8006538 <TIM_Base_SetConfig+0x38>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a31      	ldr	r2, [pc, #196]	; (80065e8 <TIM_Base_SetConfig+0xe8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d007      	beq.n	8006538 <TIM_Base_SetConfig+0x38>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a30      	ldr	r2, [pc, #192]	; (80065ec <TIM_Base_SetConfig+0xec>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_Base_SetConfig+0x38>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a2f      	ldr	r2, [pc, #188]	; (80065f0 <TIM_Base_SetConfig+0xf0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d108      	bne.n	800654a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a25      	ldr	r2, [pc, #148]	; (80065e4 <TIM_Base_SetConfig+0xe4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d01b      	beq.n	800658a <TIM_Base_SetConfig+0x8a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d017      	beq.n	800658a <TIM_Base_SetConfig+0x8a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a22      	ldr	r2, [pc, #136]	; (80065e8 <TIM_Base_SetConfig+0xe8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <TIM_Base_SetConfig+0x8a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a21      	ldr	r2, [pc, #132]	; (80065ec <TIM_Base_SetConfig+0xec>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00f      	beq.n	800658a <TIM_Base_SetConfig+0x8a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a20      	ldr	r2, [pc, #128]	; (80065f0 <TIM_Base_SetConfig+0xf0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00b      	beq.n	800658a <TIM_Base_SetConfig+0x8a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <TIM_Base_SetConfig+0xf4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d007      	beq.n	800658a <TIM_Base_SetConfig+0x8a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <TIM_Base_SetConfig+0xf8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <TIM_Base_SetConfig+0x8a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <TIM_Base_SetConfig+0xfc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d108      	bne.n	800659c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a08      	ldr	r2, [pc, #32]	; (80065e4 <TIM_Base_SetConfig+0xe4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d103      	bne.n	80065d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	615a      	str	r2, [r3, #20]
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40010000 	.word	0x40010000
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40000800 	.word	0x40000800
 80065f0:	40000c00 	.word	0x40000c00
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800

08006600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800662a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f023 030a 	bic.w	r3, r3, #10
 800663c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800665e:	b480      	push	{r7}
 8006660:	b087      	sub	sp, #28
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f023 0210 	bic.w	r2, r3, #16
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	031b      	lsls	r3, r3, #12
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800669a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	f043 0307 	orr.w	r3, r3, #7
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800670e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	021a      	lsls	r2, r3, #8
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	431a      	orrs	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4313      	orrs	r3, r2
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	609a      	str	r2, [r3, #8]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006748:	2302      	movs	r3, #2
 800674a:	e050      	b.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1c      	ldr	r2, [pc, #112]	; (80067fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d018      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006798:	d013      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a18      	ldr	r2, [pc, #96]	; (8006800 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00e      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a16      	ldr	r2, [pc, #88]	; (8006804 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d009      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a15      	ldr	r2, [pc, #84]	; (8006808 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a13      	ldr	r2, [pc, #76]	; (800680c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d10c      	bne.n	80067dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40010000 	.word	0x40010000
 8006800:	40000400 	.word	0x40000400
 8006804:	40000800 	.word	0x40000800
 8006808:	40000c00 	.word	0x40000c00
 800680c:	40014000 	.word	0x40014000

08006810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e03f      	b.n	80068ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fc fa36 	bl	8002cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800687a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f929 	bl	8006ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695a      	ldr	r2, [r3, #20]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b08a      	sub	sp, #40	; 0x28
 80068d6:	af02      	add	r7, sp, #8
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	603b      	str	r3, [r7, #0]
 80068de:	4613      	mov	r3, r2
 80068e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d17c      	bne.n	80069ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_UART_Transmit+0x2c>
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e075      	b.n	80069ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_UART_Transmit+0x3e>
 800690c:	2302      	movs	r3, #2
 800690e:	e06e      	b.n	80069ee <HAL_UART_Transmit+0x11c>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2221      	movs	r2, #33	; 0x21
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006926:	f7fc fbfb 	bl	8003120 <HAL_GetTick>
 800692a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	88fa      	ldrh	r2, [r7, #6]
 8006930:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	88fa      	ldrh	r2, [r7, #6]
 8006936:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006940:	d108      	bne.n	8006954 <HAL_UART_Transmit+0x82>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e003      	b.n	800695c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006958:	2300      	movs	r3, #0
 800695a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006964:	e02a      	b.n	80069bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2200      	movs	r2, #0
 800696e:	2180      	movs	r1, #128	; 0x80
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f840 	bl	80069f6 <UART_WaitOnFlagUntilTimeout>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e036      	b.n	80069ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10b      	bne.n	800699e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	3302      	adds	r3, #2
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	e007      	b.n	80069ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	3301      	adds	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1cf      	bne.n	8006966 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2200      	movs	r2, #0
 80069ce:	2140      	movs	r1, #64	; 0x40
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f810 	bl	80069f6 <UART_WaitOnFlagUntilTimeout>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e006      	b.n	80069ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	e000      	b.n	80069ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069ec:	2302      	movs	r3, #2
  }
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3720      	adds	r7, #32
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b090      	sub	sp, #64	; 0x40
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	603b      	str	r3, [r7, #0]
 8006a02:	4613      	mov	r3, r2
 8006a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a06:	e050      	b.n	8006aaa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a0e:	d04c      	beq.n	8006aaa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d007      	beq.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a16:	f7fc fb83 	bl	8003120 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d241      	bcs.n	8006aaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	330c      	adds	r3, #12
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	330c      	adds	r3, #12
 8006a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a46:	637a      	str	r2, [r7, #52]	; 0x34
 8006a48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e5      	bne.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3314      	adds	r3, #20
 8006a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	613b      	str	r3, [r7, #16]
   return(result);
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3314      	adds	r3, #20
 8006a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a7a:	623a      	str	r2, [r7, #32]
 8006a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	69f9      	ldr	r1, [r7, #28]
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e5      	bne.n	8006a5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e00f      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	bf0c      	ite	eq
 8006aba:	2301      	moveq	r3, #1
 8006abc:	2300      	movne	r3, #0
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d09f      	beq.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3740      	adds	r7, #64	; 0x40
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ad8:	b0c0      	sub	sp, #256	; 0x100
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af0:	68d9      	ldr	r1, [r3, #12]
 8006af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	ea40 0301 	orr.w	r3, r0, r1
 8006afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b2c:	f021 010c 	bic.w	r1, r1, #12
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4e:	6999      	ldr	r1, [r3, #24]
 8006b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	ea40 0301 	orr.w	r3, r0, r1
 8006b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	4b8f      	ldr	r3, [pc, #572]	; (8006da0 <UART_SetConfig+0x2cc>)
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d005      	beq.n	8006b74 <UART_SetConfig+0xa0>
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4b8d      	ldr	r3, [pc, #564]	; (8006da4 <UART_SetConfig+0x2d0>)
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d104      	bne.n	8006b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b74:	f7fe fc54 	bl	8005420 <HAL_RCC_GetPCLK2Freq>
 8006b78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b7c:	e003      	b.n	8006b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b7e:	f7fe fc3b 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8006b82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b90:	f040 810c 	bne.w	8006dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ba6:	4622      	mov	r2, r4
 8006ba8:	462b      	mov	r3, r5
 8006baa:	1891      	adds	r1, r2, r2
 8006bac:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bae:	415b      	adcs	r3, r3
 8006bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	eb12 0801 	adds.w	r8, r2, r1
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	eb43 0901 	adc.w	r9, r3, r1
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bd6:	4690      	mov	r8, r2
 8006bd8:	4699      	mov	r9, r3
 8006bda:	4623      	mov	r3, r4
 8006bdc:	eb18 0303 	adds.w	r3, r8, r3
 8006be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006be4:	462b      	mov	r3, r5
 8006be6:	eb49 0303 	adc.w	r3, r9, r3
 8006bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c02:	460b      	mov	r3, r1
 8006c04:	18db      	adds	r3, r3, r3
 8006c06:	653b      	str	r3, [r7, #80]	; 0x50
 8006c08:	4613      	mov	r3, r2
 8006c0a:	eb42 0303 	adc.w	r3, r2, r3
 8006c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c18:	f7f9 fffe 	bl	8000c18 <__aeabi_uldivmod>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4b61      	ldr	r3, [pc, #388]	; (8006da8 <UART_SetConfig+0x2d4>)
 8006c22:	fba3 2302 	umull	r2, r3, r3, r2
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	011c      	lsls	r4, r3, #4
 8006c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c3c:	4642      	mov	r2, r8
 8006c3e:	464b      	mov	r3, r9
 8006c40:	1891      	adds	r1, r2, r2
 8006c42:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c44:	415b      	adcs	r3, r3
 8006c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c4c:	4641      	mov	r1, r8
 8006c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8006c52:	4649      	mov	r1, r9
 8006c54:	eb43 0b01 	adc.w	fp, r3, r1
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c6c:	4692      	mov	sl, r2
 8006c6e:	469b      	mov	fp, r3
 8006c70:	4643      	mov	r3, r8
 8006c72:	eb1a 0303 	adds.w	r3, sl, r3
 8006c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8006c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	18db      	adds	r3, r3, r3
 8006c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	eb42 0303 	adc.w	r3, r2, r3
 8006ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006cae:	f7f9 ffb3 	bl	8000c18 <__aeabi_uldivmod>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4b3b      	ldr	r3, [pc, #236]	; (8006da8 <UART_SetConfig+0x2d4>)
 8006cba:	fba3 2301 	umull	r2, r3, r3, r1
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	2264      	movs	r2, #100	; 0x64
 8006cc2:	fb02 f303 	mul.w	r3, r2, r3
 8006cc6:	1acb      	subs	r3, r1, r3
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006cce:	4b36      	ldr	r3, [pc, #216]	; (8006da8 <UART_SetConfig+0x2d4>)
 8006cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8006cd4:	095b      	lsrs	r3, r3, #5
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cdc:	441c      	add	r4, r3
 8006cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	1891      	adds	r1, r2, r2
 8006cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cf8:	415b      	adcs	r3, r3
 8006cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d00:	4641      	mov	r1, r8
 8006d02:	1851      	adds	r1, r2, r1
 8006d04:	6339      	str	r1, [r7, #48]	; 0x30
 8006d06:	4649      	mov	r1, r9
 8006d08:	414b      	adcs	r3, r1
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0c:	f04f 0200 	mov.w	r2, #0
 8006d10:	f04f 0300 	mov.w	r3, #0
 8006d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d18:	4659      	mov	r1, fp
 8006d1a:	00cb      	lsls	r3, r1, #3
 8006d1c:	4651      	mov	r1, sl
 8006d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d22:	4651      	mov	r1, sl
 8006d24:	00ca      	lsls	r2, r1, #3
 8006d26:	4610      	mov	r0, r2
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	189b      	adds	r3, r3, r2
 8006d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d34:	464b      	mov	r3, r9
 8006d36:	460a      	mov	r2, r1
 8006d38:	eb42 0303 	adc.w	r3, r2, r3
 8006d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d54:	460b      	mov	r3, r1
 8006d56:	18db      	adds	r3, r3, r3
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	eb42 0303 	adc.w	r3, r2, r3
 8006d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d6a:	f7f9 ff55 	bl	8000c18 <__aeabi_uldivmod>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <UART_SetConfig+0x2d4>)
 8006d74:	fba3 1302 	umull	r1, r3, r3, r2
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	2164      	movs	r1, #100	; 0x64
 8006d7c:	fb01 f303 	mul.w	r3, r1, r3
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	3332      	adds	r3, #50	; 0x32
 8006d86:	4a08      	ldr	r2, [pc, #32]	; (8006da8 <UART_SetConfig+0x2d4>)
 8006d88:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	f003 0207 	and.w	r2, r3, #7
 8006d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4422      	add	r2, r4
 8006d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d9c:	e105      	b.n	8006faa <UART_SetConfig+0x4d6>
 8006d9e:	bf00      	nop
 8006da0:	40011000 	.word	0x40011000
 8006da4:	40011400 	.word	0x40011400
 8006da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006db6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006dbe:	4642      	mov	r2, r8
 8006dc0:	464b      	mov	r3, r9
 8006dc2:	1891      	adds	r1, r2, r2
 8006dc4:	6239      	str	r1, [r7, #32]
 8006dc6:	415b      	adcs	r3, r3
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dce:	4641      	mov	r1, r8
 8006dd0:	1854      	adds	r4, r2, r1
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	eb43 0501 	adc.w	r5, r3, r1
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	00eb      	lsls	r3, r5, #3
 8006de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006de6:	00e2      	lsls	r2, r4, #3
 8006de8:	4614      	mov	r4, r2
 8006dea:	461d      	mov	r5, r3
 8006dec:	4643      	mov	r3, r8
 8006dee:	18e3      	adds	r3, r4, r3
 8006df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006df4:	464b      	mov	r3, r9
 8006df6:	eb45 0303 	adc.w	r3, r5, r3
 8006dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e0e:	f04f 0200 	mov.w	r2, #0
 8006e12:	f04f 0300 	mov.w	r3, #0
 8006e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	008b      	lsls	r3, r1, #2
 8006e1e:	4621      	mov	r1, r4
 8006e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e24:	4621      	mov	r1, r4
 8006e26:	008a      	lsls	r2, r1, #2
 8006e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e2c:	f7f9 fef4 	bl	8000c18 <__aeabi_uldivmod>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4b60      	ldr	r3, [pc, #384]	; (8006fb8 <UART_SetConfig+0x4e4>)
 8006e36:	fba3 2302 	umull	r2, r3, r3, r2
 8006e3a:	095b      	lsrs	r3, r3, #5
 8006e3c:	011c      	lsls	r4, r3, #4
 8006e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e50:	4642      	mov	r2, r8
 8006e52:	464b      	mov	r3, r9
 8006e54:	1891      	adds	r1, r2, r2
 8006e56:	61b9      	str	r1, [r7, #24]
 8006e58:	415b      	adcs	r3, r3
 8006e5a:	61fb      	str	r3, [r7, #28]
 8006e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e60:	4641      	mov	r1, r8
 8006e62:	1851      	adds	r1, r2, r1
 8006e64:	6139      	str	r1, [r7, #16]
 8006e66:	4649      	mov	r1, r9
 8006e68:	414b      	adcs	r3, r1
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e78:	4659      	mov	r1, fp
 8006e7a:	00cb      	lsls	r3, r1, #3
 8006e7c:	4651      	mov	r1, sl
 8006e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e82:	4651      	mov	r1, sl
 8006e84:	00ca      	lsls	r2, r1, #3
 8006e86:	4610      	mov	r0, r2
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	189b      	adds	r3, r3, r2
 8006e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e94:	464b      	mov	r3, r9
 8006e96:	460a      	mov	r2, r1
 8006e98:	eb42 0303 	adc.w	r3, r2, r3
 8006e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006eb8:	4649      	mov	r1, r9
 8006eba:	008b      	lsls	r3, r1, #2
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	008a      	lsls	r2, r1, #2
 8006ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006eca:	f7f9 fea5 	bl	8000c18 <__aeabi_uldivmod>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4b39      	ldr	r3, [pc, #228]	; (8006fb8 <UART_SetConfig+0x4e4>)
 8006ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	2164      	movs	r1, #100	; 0x64
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	3332      	adds	r3, #50	; 0x32
 8006ee6:	4a34      	ldr	r2, [pc, #208]	; (8006fb8 <UART_SetConfig+0x4e4>)
 8006ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ef2:	441c      	add	r4, r3
 8006ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ef8:	2200      	movs	r2, #0
 8006efa:	673b      	str	r3, [r7, #112]	; 0x70
 8006efc:	677a      	str	r2, [r7, #116]	; 0x74
 8006efe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f02:	4642      	mov	r2, r8
 8006f04:	464b      	mov	r3, r9
 8006f06:	1891      	adds	r1, r2, r2
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	415b      	adcs	r3, r3
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f12:	4641      	mov	r1, r8
 8006f14:	1851      	adds	r1, r2, r1
 8006f16:	6039      	str	r1, [r7, #0]
 8006f18:	4649      	mov	r1, r9
 8006f1a:	414b      	adcs	r3, r1
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	f04f 0200 	mov.w	r2, #0
 8006f22:	f04f 0300 	mov.w	r3, #0
 8006f26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f2a:	4659      	mov	r1, fp
 8006f2c:	00cb      	lsls	r3, r1, #3
 8006f2e:	4651      	mov	r1, sl
 8006f30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f34:	4651      	mov	r1, sl
 8006f36:	00ca      	lsls	r2, r1, #3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	4642      	mov	r2, r8
 8006f40:	189b      	adds	r3, r3, r2
 8006f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f44:	464b      	mov	r3, r9
 8006f46:	460a      	mov	r2, r1
 8006f48:	eb42 0303 	adc.w	r3, r2, r3
 8006f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	663b      	str	r3, [r7, #96]	; 0x60
 8006f58:	667a      	str	r2, [r7, #100]	; 0x64
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f66:	4649      	mov	r1, r9
 8006f68:	008b      	lsls	r3, r1, #2
 8006f6a:	4641      	mov	r1, r8
 8006f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f70:	4641      	mov	r1, r8
 8006f72:	008a      	lsls	r2, r1, #2
 8006f74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f78:	f7f9 fe4e 	bl	8000c18 <__aeabi_uldivmod>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <UART_SetConfig+0x4e4>)
 8006f82:	fba3 1302 	umull	r1, r3, r3, r2
 8006f86:	095b      	lsrs	r3, r3, #5
 8006f88:	2164      	movs	r1, #100	; 0x64
 8006f8a:	fb01 f303 	mul.w	r3, r1, r3
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	3332      	adds	r3, #50	; 0x32
 8006f94:	4a08      	ldr	r2, [pc, #32]	; (8006fb8 <UART_SetConfig+0x4e4>)
 8006f96:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	f003 020f 	and.w	r2, r3, #15
 8006fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4422      	add	r2, r4
 8006fa8:	609a      	str	r2, [r3, #8]
}
 8006faa:	bf00      	nop
 8006fac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fb6:	bf00      	nop
 8006fb8:	51eb851f 	.word	0x51eb851f

08006fbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006fc0:	4904      	ldr	r1, [pc, #16]	; (8006fd4 <MX_FATFS_Init+0x18>)
 8006fc2:	4805      	ldr	r0, [pc, #20]	; (8006fd8 <MX_FATFS_Init+0x1c>)
 8006fc4:	f002 ff0e 	bl	8009de4 <FATFS_LinkDriver>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	461a      	mov	r2, r3
 8006fcc:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <MX_FATFS_Init+0x20>)
 8006fce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006fd0:	bf00      	nop
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	200024e4 	.word	0x200024e4
 8006fd8:	20000010 	.word	0x20000010
 8006fdc:	200024e0 	.word	0x200024e0

08006fe0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006fe4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fa faf1 	bl	80015e4 <SD_disk_initialize>
 8007002:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	4618      	mov	r0, r3
 800701a:	f7fa fbc9 	bl	80017b0 <SD_disk_status>
 800701e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	4603      	mov	r3, r0
 8007036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007038:	7bf8      	ldrb	r0, [r7, #15]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	f7fa fbcc 	bl	80017dc <SD_disk_read>
 8007044:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
 800705a:	4603      	mov	r3, r0
 800705c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800705e:	7bf8      	ldrb	r0, [r7, #15]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	f7fa fc23 	bl	80018b0 <SD_disk_write>
 800706a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	603a      	str	r2, [r7, #0]
 800707e:	71fb      	strb	r3, [r7, #7]
 8007080:	460b      	mov	r3, r1
 8007082:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007084:	79b9      	ldrb	r1, [r7, #6]
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f7fa fc94 	bl	80019b8 <SD_disk_ioctl>
 8007090:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	4a08      	ldr	r2, [pc, #32]	; (80070cc <disk_status+0x30>)
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	79fa      	ldrb	r2, [r7, #7]
 80070b4:	4905      	ldr	r1, [pc, #20]	; (80070cc <disk_status+0x30>)
 80070b6:	440a      	add	r2, r1
 80070b8:	7a12      	ldrb	r2, [r2, #8]
 80070ba:	4610      	mov	r0, r2
 80070bc:	4798      	blx	r3
 80070be:	4603      	mov	r3, r0
 80070c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20002510 	.word	0x20002510

080070d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	4a0d      	ldr	r2, [pc, #52]	; (8007118 <disk_initialize+0x48>)
 80070e2:	5cd3      	ldrb	r3, [r2, r3]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d111      	bne.n	800710c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	4a0b      	ldr	r2, [pc, #44]	; (8007118 <disk_initialize+0x48>)
 80070ec:	2101      	movs	r1, #1
 80070ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	4a09      	ldr	r2, [pc, #36]	; (8007118 <disk_initialize+0x48>)
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	79fa      	ldrb	r2, [r7, #7]
 80070fe:	4906      	ldr	r1, [pc, #24]	; (8007118 <disk_initialize+0x48>)
 8007100:	440a      	add	r2, r1
 8007102:	7a12      	ldrb	r2, [r2, #8]
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20002510 	.word	0x20002510

0800711c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800711c:	b590      	push	{r4, r7, lr}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	4603      	mov	r3, r0
 800712a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	4a0a      	ldr	r2, [pc, #40]	; (8007158 <disk_read+0x3c>)
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	689c      	ldr	r4, [r3, #8]
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	4a07      	ldr	r2, [pc, #28]	; (8007158 <disk_read+0x3c>)
 800713c:	4413      	add	r3, r2
 800713e:	7a18      	ldrb	r0, [r3, #8]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	47a0      	blx	r4
 8007148:	4603      	mov	r3, r0
 800714a:	75fb      	strb	r3, [r7, #23]
  return res;
 800714c:	7dfb      	ldrb	r3, [r7, #23]
}
 800714e:	4618      	mov	r0, r3
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	bd90      	pop	{r4, r7, pc}
 8007156:	bf00      	nop
 8007158:	20002510 	.word	0x20002510

0800715c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <disk_write+0x3c>)
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	68dc      	ldr	r4, [r3, #12]
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	4a07      	ldr	r2, [pc, #28]	; (8007198 <disk_write+0x3c>)
 800717c:	4413      	add	r3, r2
 800717e:	7a18      	ldrb	r0, [r3, #8]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	47a0      	blx	r4
 8007188:	4603      	mov	r3, r0
 800718a:	75fb      	strb	r3, [r7, #23]
  return res;
 800718c:	7dfb      	ldrb	r3, [r7, #23]
}
 800718e:	4618      	mov	r0, r3
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	bd90      	pop	{r4, r7, pc}
 8007196:	bf00      	nop
 8007198:	20002510 	.word	0x20002510

0800719c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	603a      	str	r2, [r7, #0]
 80071a6:	71fb      	strb	r3, [r7, #7]
 80071a8:	460b      	mov	r3, r1
 80071aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <disk_ioctl+0x38>)
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	79fa      	ldrb	r2, [r7, #7]
 80071ba:	4906      	ldr	r1, [pc, #24]	; (80071d4 <disk_ioctl+0x38>)
 80071bc:	440a      	add	r2, r1
 80071be:	7a10      	ldrb	r0, [r2, #8]
 80071c0:	79b9      	ldrb	r1, [r7, #6]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	4798      	blx	r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20002510 	.word	0x20002510

080071d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3301      	adds	r3, #1
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80071e8:	89fb      	ldrh	r3, [r7, #14]
 80071ea:	021b      	lsls	r3, r3, #8
 80071ec:	b21a      	sxth	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	b21b      	sxth	r3, r3
 80071f4:	4313      	orrs	r3, r2
 80071f6:	b21b      	sxth	r3, r3
 80071f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80071fa:	89fb      	ldrh	r3, [r7, #14]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3303      	adds	r3, #3
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	021b      	lsls	r3, r3, #8
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	3202      	adds	r2, #2
 8007220:	7812      	ldrb	r2, [r2, #0]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	3201      	adds	r2, #1
 800722e:	7812      	ldrb	r2, [r2, #0]
 8007230:	4313      	orrs	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007240:	68fb      	ldr	r3, [r7, #12]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	460b      	mov	r3, r1
 8007258:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	887a      	ldrh	r2, [r7, #2]
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	887b      	ldrh	r3, [r7, #2]
 8007268:	0a1b      	lsrs	r3, r3, #8
 800726a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	887a      	ldrh	r2, [r7, #2]
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	701a      	strb	r2, [r3, #0]
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	0a1b      	lsrs	r3, r3, #8
 800729e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	b2d2      	uxtb	r2, r2
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	607a      	str	r2, [r7, #4]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	701a      	strb	r2, [r3, #0]
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80072dc:	b480      	push	{r7}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00d      	beq.n	8007312 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	1c53      	adds	r3, r2, #1
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	1c59      	adds	r1, r3, #1
 8007300:	6179      	str	r1, [r7, #20]
 8007302:	7812      	ldrb	r2, [r2, #0]
 8007304:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3b01      	subs	r3, #1
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f1      	bne.n	80072f6 <mem_cpy+0x1a>
	}
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800731e:	b480      	push	{r7}
 8007320:	b087      	sub	sp, #28
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	617a      	str	r2, [r7, #20]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3b01      	subs	r3, #1
 800733e:	607b      	str	r3, [r7, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f3      	bne.n	800732e <mem_set+0x10>
}
 8007346:	bf00      	nop
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007354:	b480      	push	{r7}
 8007356:	b089      	sub	sp, #36	; 0x24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	61fa      	str	r2, [r7, #28]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	4619      	mov	r1, r3
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	61ba      	str	r2, [r7, #24]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	1acb      	subs	r3, r1, r3
 8007380:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3b01      	subs	r3, #1
 8007386:	607b      	str	r3, [r7, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <mem_cmp+0x40>
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0eb      	beq.n	800736c <mem_cmp+0x18>

	return r;
 8007394:	697b      	ldr	r3, [r7, #20]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3724      	adds	r7, #36	; 0x24
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80073ac:	e002      	b.n	80073b4 <chk_chr+0x12>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3301      	adds	r3, #1
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <chk_chr+0x26>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d1f2      	bne.n	80073ae <chk_chr+0xc>
	return *str;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	781b      	ldrb	r3, [r3, #0]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073e2:	2300      	movs	r3, #0
 80073e4:	60bb      	str	r3, [r7, #8]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	e029      	b.n	8007440 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80073ec:	4a27      	ldr	r2, [pc, #156]	; (800748c <chk_lock+0xb4>)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	4413      	add	r3, r2
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d01d      	beq.n	8007436 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80073fa:	4a24      	ldr	r2, [pc, #144]	; (800748c <chk_lock+0xb4>)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	011b      	lsls	r3, r3, #4
 8007400:	4413      	add	r3, r2
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d116      	bne.n	800743a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800740c:	4a1f      	ldr	r2, [pc, #124]	; (800748c <chk_lock+0xb4>)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	4413      	add	r3, r2
 8007414:	3304      	adds	r3, #4
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800741c:	429a      	cmp	r2, r3
 800741e:	d10c      	bne.n	800743a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007420:	4a1a      	ldr	r2, [pc, #104]	; (800748c <chk_lock+0xb4>)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	4413      	add	r3, r2
 8007428:	3308      	adds	r3, #8
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007430:	429a      	cmp	r2, r3
 8007432:	d102      	bne.n	800743a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007434:	e007      	b.n	8007446 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007436:	2301      	movs	r3, #1
 8007438:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3301      	adds	r3, #1
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d9d2      	bls.n	80073ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d109      	bne.n	8007460 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d102      	bne.n	8007458 <chk_lock+0x80>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b02      	cmp	r3, #2
 8007456:	d101      	bne.n	800745c <chk_lock+0x84>
 8007458:	2300      	movs	r3, #0
 800745a:	e010      	b.n	800747e <chk_lock+0xa6>
 800745c:	2312      	movs	r3, #18
 800745e:	e00e      	b.n	800747e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d108      	bne.n	8007478 <chk_lock+0xa0>
 8007466:	4a09      	ldr	r2, [pc, #36]	; (800748c <chk_lock+0xb4>)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	4413      	add	r3, r2
 800746e:	330c      	adds	r3, #12
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007476:	d101      	bne.n	800747c <chk_lock+0xa4>
 8007478:	2310      	movs	r3, #16
 800747a:	e000      	b.n	800747e <chk_lock+0xa6>
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	200024f0 	.word	0x200024f0

08007490 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007496:	2300      	movs	r3, #0
 8007498:	607b      	str	r3, [r7, #4]
 800749a:	e002      	b.n	80074a2 <enq_lock+0x12>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3301      	adds	r3, #1
 80074a0:	607b      	str	r3, [r7, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d806      	bhi.n	80074b6 <enq_lock+0x26>
 80074a8:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <enq_lock+0x40>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	4413      	add	r3, r2
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1f2      	bne.n	800749c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	bf14      	ite	ne
 80074bc:	2301      	movne	r3, #1
 80074be:	2300      	moveq	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	200024f0 	.word	0x200024f0

080074d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	e01f      	b.n	8007524 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80074e4:	4a41      	ldr	r2, [pc, #260]	; (80075ec <inc_lock+0x118>)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	4413      	add	r3, r2
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d113      	bne.n	800751e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80074f6:	4a3d      	ldr	r2, [pc, #244]	; (80075ec <inc_lock+0x118>)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	4413      	add	r3, r2
 80074fe:	3304      	adds	r3, #4
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007506:	429a      	cmp	r2, r3
 8007508:	d109      	bne.n	800751e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800750a:	4a38      	ldr	r2, [pc, #224]	; (80075ec <inc_lock+0x118>)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	4413      	add	r3, r2
 8007512:	3308      	adds	r3, #8
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800751a:	429a      	cmp	r2, r3
 800751c:	d006      	beq.n	800752c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3301      	adds	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d9dc      	bls.n	80074e4 <inc_lock+0x10>
 800752a:	e000      	b.n	800752e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800752c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d132      	bne.n	800759a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e002      	b.n	8007540 <inc_lock+0x6c>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3301      	adds	r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d806      	bhi.n	8007554 <inc_lock+0x80>
 8007546:	4a29      	ldr	r2, [pc, #164]	; (80075ec <inc_lock+0x118>)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	4413      	add	r3, r2
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1f2      	bne.n	800753a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d101      	bne.n	800755e <inc_lock+0x8a>
 800755a:	2300      	movs	r3, #0
 800755c:	e040      	b.n	80075e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4922      	ldr	r1, [pc, #136]	; (80075ec <inc_lock+0x118>)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	440b      	add	r3, r1
 800756a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	491e      	ldr	r1, [pc, #120]	; (80075ec <inc_lock+0x118>)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	440b      	add	r3, r1
 8007578:	3304      	adds	r3, #4
 800757a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	695a      	ldr	r2, [r3, #20]
 8007580:	491a      	ldr	r1, [pc, #104]	; (80075ec <inc_lock+0x118>)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	440b      	add	r3, r1
 8007588:	3308      	adds	r3, #8
 800758a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800758c:	4a17      	ldr	r2, [pc, #92]	; (80075ec <inc_lock+0x118>)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	4413      	add	r3, r2
 8007594:	330c      	adds	r3, #12
 8007596:	2200      	movs	r2, #0
 8007598:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d009      	beq.n	80075b4 <inc_lock+0xe0>
 80075a0:	4a12      	ldr	r2, [pc, #72]	; (80075ec <inc_lock+0x118>)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	4413      	add	r3, r2
 80075a8:	330c      	adds	r3, #12
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <inc_lock+0xe0>
 80075b0:	2300      	movs	r3, #0
 80075b2:	e015      	b.n	80075e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d108      	bne.n	80075cc <inc_lock+0xf8>
 80075ba:	4a0c      	ldr	r2, [pc, #48]	; (80075ec <inc_lock+0x118>)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	4413      	add	r3, r2
 80075c2:	330c      	adds	r3, #12
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	3301      	adds	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	e001      	b.n	80075d0 <inc_lock+0xfc>
 80075cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075d0:	4906      	ldr	r1, [pc, #24]	; (80075ec <inc_lock+0x118>)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	440b      	add	r3, r1
 80075d8:	330c      	adds	r3, #12
 80075da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	200024f0 	.word	0x200024f0

080075f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	607b      	str	r3, [r7, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d825      	bhi.n	8007650 <dec_lock+0x60>
		n = Files[i].ctr;
 8007604:	4a17      	ldr	r2, [pc, #92]	; (8007664 <dec_lock+0x74>)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	4413      	add	r3, r2
 800760c:	330c      	adds	r3, #12
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007612:	89fb      	ldrh	r3, [r7, #14]
 8007614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007618:	d101      	bne.n	800761e <dec_lock+0x2e>
 800761a:	2300      	movs	r3, #0
 800761c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800761e:	89fb      	ldrh	r3, [r7, #14]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <dec_lock+0x3a>
 8007624:	89fb      	ldrh	r3, [r7, #14]
 8007626:	3b01      	subs	r3, #1
 8007628:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800762a:	4a0e      	ldr	r2, [pc, #56]	; (8007664 <dec_lock+0x74>)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	4413      	add	r3, r2
 8007632:	330c      	adds	r3, #12
 8007634:	89fa      	ldrh	r2, [r7, #14]
 8007636:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007638:	89fb      	ldrh	r3, [r7, #14]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d105      	bne.n	800764a <dec_lock+0x5a>
 800763e:	4a09      	ldr	r2, [pc, #36]	; (8007664 <dec_lock+0x74>)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	4413      	add	r3, r2
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	737b      	strb	r3, [r7, #13]
 800764e:	e001      	b.n	8007654 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007650:	2302      	movs	r3, #2
 8007652:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007654:	7b7b      	ldrb	r3, [r7, #13]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	200024f0 	.word	0x200024f0

08007668 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	e010      	b.n	8007698 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007676:	4a0d      	ldr	r2, [pc, #52]	; (80076ac <clear_lock+0x44>)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	011b      	lsls	r3, r3, #4
 800767c:	4413      	add	r3, r2
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	429a      	cmp	r2, r3
 8007684:	d105      	bne.n	8007692 <clear_lock+0x2a>
 8007686:	4a09      	ldr	r2, [pc, #36]	; (80076ac <clear_lock+0x44>)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	4413      	add	r3, r2
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d9eb      	bls.n	8007676 <clear_lock+0xe>
	}
}
 800769e:	bf00      	nop
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	200024f0 	.word	0x200024f0

080076b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	78db      	ldrb	r3, [r3, #3]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d034      	beq.n	800772e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	7858      	ldrb	r0, [r3, #1]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80076d4:	2301      	movs	r3, #1
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	f7ff fd40 	bl	800715c <disk_write>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	73fb      	strb	r3, [r7, #15]
 80076e6:	e022      	b.n	800772e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	1ad2      	subs	r2, r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d217      	bcs.n	800772e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	789b      	ldrb	r3, [r3, #2]
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	e010      	b.n	8007728 <sync_window+0x78>
					wsect += fs->fsize;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4413      	add	r3, r2
 800770e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7858      	ldrb	r0, [r3, #1]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800771a:	2301      	movs	r3, #1
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	f7ff fd1d 	bl	800715c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	3b01      	subs	r3, #1
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d8eb      	bhi.n	8007706 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800772e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d01b      	beq.n	8007788 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff ffad 	bl	80076b0 <sync_window>
 8007756:	4603      	mov	r3, r0
 8007758:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d113      	bne.n	8007788 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	7858      	ldrb	r0, [r3, #1]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800776a:	2301      	movs	r3, #1
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	f7ff fcd5 	bl	800711c <disk_read>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800777c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800777e:	2301      	movs	r3, #1
 8007780:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ff87 	bl	80076b0 <sync_window>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d159      	bne.n	8007860 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d149      	bne.n	8007848 <sync_fs+0xb4>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	791b      	ldrb	r3, [r3, #4]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d145      	bne.n	8007848 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	899b      	ldrh	r3, [r3, #12]
 80077c6:	461a      	mov	r2, r3
 80077c8:	2100      	movs	r1, #0
 80077ca:	f7ff fda8 	bl	800731e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3334      	adds	r3, #52	; 0x34
 80077d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80077da:	4618      	mov	r0, r3
 80077dc:	f7ff fd37 	bl	800724e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3334      	adds	r3, #52	; 0x34
 80077e4:	4921      	ldr	r1, [pc, #132]	; (800786c <sync_fs+0xd8>)
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff fd4c 	bl	8007284 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3334      	adds	r3, #52	; 0x34
 80077f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80077f4:	491e      	ldr	r1, [pc, #120]	; (8007870 <sync_fs+0xdc>)
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff fd44 	bl	8007284 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3334      	adds	r3, #52	; 0x34
 8007800:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f7ff fd3a 	bl	8007284 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3334      	adds	r3, #52	; 0x34
 8007814:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f7ff fd30 	bl	8007284 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	7858      	ldrb	r0, [r3, #1]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800783c:	2301      	movs	r3, #1
 800783e:	f7ff fc8d 	bl	800715c <disk_write>
			fs->fsi_flag = 0;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	785b      	ldrb	r3, [r3, #1]
 800784c:	2200      	movs	r2, #0
 800784e:	2100      	movs	r1, #0
 8007850:	4618      	mov	r0, r3
 8007852:	f7ff fca3 	bl	800719c <disk_ioctl>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <sync_fs+0xcc>
 800785c:	2301      	movs	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	41615252 	.word	0x41615252
 8007870:	61417272 	.word	0x61417272

08007874 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	3b02      	subs	r3, #2
 8007882:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	3b02      	subs	r3, #2
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	429a      	cmp	r2, r3
 800788e:	d301      	bcc.n	8007894 <clust2sect+0x20>
 8007890:	2300      	movs	r3, #0
 8007892:	e008      	b.n	80078a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	895b      	ldrh	r3, [r3, #10]
 8007898:	461a      	mov	r2, r3
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	fb03 f202 	mul.w	r2, r3, r2
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	4413      	add	r3, r2
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b086      	sub	sp, #24
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d904      	bls.n	80078d2 <get_fat+0x20>
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d302      	bcc.n	80078d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80078d2:	2301      	movs	r3, #1
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	e0bb      	b.n	8007a50 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80078d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	f000 8083 	beq.w	80079ee <get_fat+0x13c>
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	f300 80a7 	bgt.w	8007a3c <get_fat+0x18a>
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d002      	beq.n	80078f8 <get_fat+0x46>
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d056      	beq.n	80079a4 <get_fat+0xf2>
 80078f6:	e0a1      	b.n	8007a3c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	4413      	add	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	899b      	ldrh	r3, [r3, #12]
 800790e:	4619      	mov	r1, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	fbb3 f3f1 	udiv	r3, r3, r1
 8007916:	4413      	add	r3, r2
 8007918:	4619      	mov	r1, r3
 800791a:	6938      	ldr	r0, [r7, #16]
 800791c:	f7ff ff0c 	bl	8007738 <move_window>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	f040 808d 	bne.w	8007a42 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	60fa      	str	r2, [r7, #12]
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	8992      	ldrh	r2, [r2, #12]
 8007932:	fbb3 f1f2 	udiv	r1, r3, r2
 8007936:	fb01 f202 	mul.w	r2, r1, r2
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4413      	add	r3, r2
 8007940:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007944:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	899b      	ldrh	r3, [r3, #12]
 800794e:	4619      	mov	r1, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	fbb3 f3f1 	udiv	r3, r3, r1
 8007956:	4413      	add	r3, r2
 8007958:	4619      	mov	r1, r3
 800795a:	6938      	ldr	r0, [r7, #16]
 800795c:	f7ff feec 	bl	8007738 <move_window>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d16f      	bne.n	8007a46 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	899b      	ldrh	r3, [r3, #12]
 800796a:	461a      	mov	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007972:	fb01 f202 	mul.w	r2, r1, r2
 8007976:	1a9b      	subs	r3, r3, r2
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4413      	add	r3, r2
 800797c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007980:	021b      	lsls	r3, r3, #8
 8007982:	461a      	mov	r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4313      	orrs	r3, r2
 8007988:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <get_fat+0xe8>
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	091b      	lsrs	r3, r3, #4
 8007998:	e002      	b.n	80079a0 <get_fat+0xee>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079a0:	617b      	str	r3, [r7, #20]
			break;
 80079a2:	e055      	b.n	8007a50 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	899b      	ldrh	r3, [r3, #12]
 80079ac:	085b      	lsrs	r3, r3, #1
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	4619      	mov	r1, r3
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80079b8:	4413      	add	r3, r2
 80079ba:	4619      	mov	r1, r3
 80079bc:	6938      	ldr	r0, [r7, #16]
 80079be:	f7ff febb 	bl	8007738 <move_window>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d140      	bne.n	8007a4a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	8992      	ldrh	r2, [r2, #12]
 80079d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80079da:	fb00 f202 	mul.w	r2, r0, r2
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	440b      	add	r3, r1
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff fbf8 	bl	80071d8 <ld_word>
 80079e8:	4603      	mov	r3, r0
 80079ea:	617b      	str	r3, [r7, #20]
			break;
 80079ec:	e030      	b.n	8007a50 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	899b      	ldrh	r3, [r3, #12]
 80079f6:	089b      	lsrs	r3, r3, #2
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	4619      	mov	r1, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a02:	4413      	add	r3, r2
 8007a04:	4619      	mov	r1, r3
 8007a06:	6938      	ldr	r0, [r7, #16]
 8007a08:	f7ff fe96 	bl	8007738 <move_window>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d11d      	bne.n	8007a4e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	8992      	ldrh	r2, [r2, #12]
 8007a20:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a24:	fb00 f202 	mul.w	r2, r0, r2
 8007a28:	1a9b      	subs	r3, r3, r2
 8007a2a:	440b      	add	r3, r1
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7ff fbeb 	bl	8007208 <ld_dword>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007a38:	617b      	str	r3, [r7, #20]
			break;
 8007a3a:	e009      	b.n	8007a50 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	e006      	b.n	8007a50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a42:	bf00      	nop
 8007a44:	e004      	b.n	8007a50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a46:	bf00      	nop
 8007a48:	e002      	b.n	8007a50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a4a:	bf00      	nop
 8007a4c:	e000      	b.n	8007a50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a4e:	bf00      	nop
		}
	}

	return val;
 8007a50:	697b      	ldr	r3, [r7, #20]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007a5a:	b590      	push	{r4, r7, lr}
 8007a5c:	b089      	sub	sp, #36	; 0x24
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007a66:	2302      	movs	r3, #2
 8007a68:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	f240 8102 	bls.w	8007c76 <put_fat+0x21c>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	f080 80fc 	bcs.w	8007c76 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	f000 80b6 	beq.w	8007bf4 <put_fat+0x19a>
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	f300 80fd 	bgt.w	8007c88 <put_fat+0x22e>
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d003      	beq.n	8007a9a <put_fat+0x40>
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	f000 8083 	beq.w	8007b9e <put_fat+0x144>
 8007a98:	e0f6      	b.n	8007c88 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	085b      	lsrs	r3, r3, #1
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	899b      	ldrh	r3, [r3, #12]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ab8:	4413      	add	r3, r2
 8007aba:	4619      	mov	r1, r3
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f7ff fe3b 	bl	8007738 <move_window>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ac6:	7ffb      	ldrb	r3, [r7, #31]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f040 80d6 	bne.w	8007c7a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	61ba      	str	r2, [r7, #24]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	8992      	ldrh	r2, [r2, #12]
 8007ade:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ae2:	fb00 f202 	mul.w	r2, r0, r2
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	440b      	add	r3, r1
 8007aea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00d      	beq.n	8007b12 <put_fat+0xb8>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	b25b      	sxtb	r3, r3
 8007afc:	f003 030f 	and.w	r3, r3, #15
 8007b00:	b25a      	sxtb	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	b25b      	sxtb	r3, r3
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	b25b      	sxtb	r3, r3
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	e001      	b.n	8007b16 <put_fat+0xbc>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	899b      	ldrh	r3, [r3, #12]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b30:	4413      	add	r3, r2
 8007b32:	4619      	mov	r1, r3
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7ff fdff 	bl	8007738 <move_window>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b3e:	7ffb      	ldrb	r3, [r7, #31]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f040 809c 	bne.w	8007c7e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	899b      	ldrh	r3, [r3, #12]
 8007b50:	461a      	mov	r2, r3
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b58:	fb00 f202 	mul.w	r2, r0, r2
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	440b      	add	r3, r1
 8007b60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <put_fat+0x11a>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	091b      	lsrs	r3, r3, #4
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	e00e      	b.n	8007b92 <put_fat+0x138>
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	b25b      	sxtb	r3, r3
 8007b7a:	f023 030f 	bic.w	r3, r3, #15
 8007b7e:	b25a      	sxtb	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	0a1b      	lsrs	r3, r3, #8
 8007b84:	b25b      	sxtb	r3, r3
 8007b86:	f003 030f 	and.w	r3, r3, #15
 8007b8a:	b25b      	sxtb	r3, r3
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	b25b      	sxtb	r3, r3
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	70da      	strb	r2, [r3, #3]
			break;
 8007b9c:	e074      	b.n	8007c88 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	899b      	ldrh	r3, [r3, #12]
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	4619      	mov	r1, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bb2:	4413      	add	r3, r2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f7ff fdbe 	bl	8007738 <move_window>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bc0:	7ffb      	ldrb	r3, [r7, #31]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d15d      	bne.n	8007c82 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	8992      	ldrh	r2, [r2, #12]
 8007bd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bd8:	fb00 f202 	mul.w	r2, r0, r2
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	440b      	add	r3, r1
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	b292      	uxth	r2, r2
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff fb31 	bl	800724e <st_word>
			fs->wflag = 1;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	70da      	strb	r2, [r3, #3]
			break;
 8007bf2:	e049      	b.n	8007c88 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	899b      	ldrh	r3, [r3, #12]
 8007bfc:	089b      	lsrs	r3, r3, #2
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	4619      	mov	r1, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c08:	4413      	add	r3, r2
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f7ff fd93 	bl	8007738 <move_window>
 8007c12:	4603      	mov	r3, r0
 8007c14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c16:	7ffb      	ldrb	r3, [r7, #31]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d134      	bne.n	8007c86 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	8992      	ldrh	r2, [r2, #12]
 8007c30:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c34:	fb00 f202 	mul.w	r2, r0, r2
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff fae3 	bl	8007208 <ld_dword>
 8007c42:	4603      	mov	r3, r0
 8007c44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c48:	4323      	orrs	r3, r4
 8007c4a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	8992      	ldrh	r2, [r2, #12]
 8007c5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c5e:	fb00 f202 	mul.w	r2, r0, r2
 8007c62:	1a9b      	subs	r3, r3, r2
 8007c64:	440b      	add	r3, r1
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff fb0b 	bl	8007284 <st_dword>
			fs->wflag = 1;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	70da      	strb	r2, [r3, #3]
			break;
 8007c74:	e008      	b.n	8007c88 <put_fat+0x22e>
		}
	}
 8007c76:	bf00      	nop
 8007c78:	e006      	b.n	8007c88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007c7a:	bf00      	nop
 8007c7c:	e004      	b.n	8007c88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007c7e:	bf00      	nop
 8007c80:	e002      	b.n	8007c88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007c82:	bf00      	nop
 8007c84:	e000      	b.n	8007c88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007c86:	bf00      	nop
	return res;
 8007c88:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3724      	adds	r7, #36	; 0x24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd90      	pop	{r4, r7, pc}

08007c92 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b088      	sub	sp, #32
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d904      	bls.n	8007cb8 <remove_chain+0x26>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d301      	bcc.n	8007cbc <remove_chain+0x2a>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e04b      	b.n	8007d54 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00c      	beq.n	8007cdc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	69b8      	ldr	r0, [r7, #24]
 8007cca:	f7ff fec6 	bl	8007a5a <put_fat>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007cd2:	7ffb      	ldrb	r3, [r7, #31]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <remove_chain+0x4a>
 8007cd8:	7ffb      	ldrb	r3, [r7, #31]
 8007cda:	e03b      	b.n	8007d54 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7ff fde7 	bl	80078b2 <get_fat>
 8007ce4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d031      	beq.n	8007d50 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <remove_chain+0x64>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e02e      	b.n	8007d54 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cfc:	d101      	bne.n	8007d02 <remove_chain+0x70>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e028      	b.n	8007d54 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007d02:	2200      	movs	r2, #0
 8007d04:	68b9      	ldr	r1, [r7, #8]
 8007d06:	69b8      	ldr	r0, [r7, #24]
 8007d08:	f7ff fea7 	bl	8007a5a <put_fat>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007d10:	7ffb      	ldrb	r3, [r7, #31]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <remove_chain+0x88>
 8007d16:	7ffb      	ldrb	r3, [r7, #31]
 8007d18:	e01c      	b.n	8007d54 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	695a      	ldr	r2, [r3, #20]
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	3b02      	subs	r3, #2
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d20b      	bcs.n	8007d40 <remove_chain+0xae>
			fs->free_clst++;
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	791b      	ldrb	r3, [r3, #4]
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d3c6      	bcc.n	8007cdc <remove_chain+0x4a>
 8007d4e:	e000      	b.n	8007d52 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007d50:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3720      	adds	r7, #32
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10d      	bne.n	8007d8e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <create_chain+0x2c>
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d31b      	bcc.n	8007dc0 <create_chain+0x64>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	61bb      	str	r3, [r7, #24]
 8007d8c:	e018      	b.n	8007dc0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fd8e 	bl	80078b2 <get_fat>
 8007d96:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d801      	bhi.n	8007da2 <create_chain+0x46>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e070      	b.n	8007e84 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007da8:	d101      	bne.n	8007dae <create_chain+0x52>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	e06a      	b.n	8007e84 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d201      	bcs.n	8007dbc <create_chain+0x60>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	e063      	b.n	8007e84 <create_chain+0x128>
		scl = clst;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d307      	bcc.n	8007de4 <create_chain+0x88>
				ncl = 2;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007dd8:	69fa      	ldr	r2, [r7, #28]
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d901      	bls.n	8007de4 <create_chain+0x88>
 8007de0:	2300      	movs	r3, #0
 8007de2:	e04f      	b.n	8007e84 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007de4:	69f9      	ldr	r1, [r7, #28]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff fd63 	bl	80078b2 <get_fat>
 8007dec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00e      	beq.n	8007e12 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d003      	beq.n	8007e02 <create_chain+0xa6>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e00:	d101      	bne.n	8007e06 <create_chain+0xaa>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	e03e      	b.n	8007e84 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d1da      	bne.n	8007dc4 <create_chain+0x68>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e038      	b.n	8007e84 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007e12:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e18:	69f9      	ldr	r1, [r7, #28]
 8007e1a:	6938      	ldr	r0, [r7, #16]
 8007e1c:	f7ff fe1d 	bl	8007a5a <put_fat>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <create_chain+0xe2>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d006      	beq.n	8007e3e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6938      	ldr	r0, [r7, #16]
 8007e36:	f7ff fe10 	bl	8007a5a <put_fat>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d116      	bne.n	8007e72 <create_chain+0x116>
		fs->last_clst = ncl;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	695a      	ldr	r2, [r3, #20]
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	3b02      	subs	r3, #2
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d804      	bhi.n	8007e62 <create_chain+0x106>
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	1e5a      	subs	r2, r3, #1
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	791b      	ldrb	r3, [r3, #4]
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	711a      	strb	r2, [r3, #4]
 8007e70:	e007      	b.n	8007e82 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d102      	bne.n	8007e7e <create_chain+0x122>
 8007e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e7c:	e000      	b.n	8007e80 <create_chain+0x124>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007e82:	69fb      	ldr	r3, [r7, #28]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3720      	adds	r7, #32
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	899b      	ldrh	r3, [r3, #12]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	8952      	ldrh	r2, [r2, #10]
 8007eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	1d1a      	adds	r2, r3, #4
 8007ebe:	613a      	str	r2, [r7, #16]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <clmt_clust+0x42>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e010      	b.n	8007ef0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d307      	bcc.n	8007ee6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ee4:	e7e9      	b.n	8007eba <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007ee6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	4413      	add	r3, r2
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f12:	d204      	bcs.n	8007f1e <dir_sdi+0x22>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	f003 031f 	and.w	r3, r3, #31
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e071      	b.n	8008006 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d106      	bne.n	8007f42 <dir_sdi+0x46>
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d902      	bls.n	8007f42 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f40:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10c      	bne.n	8007f62 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	095b      	lsrs	r3, r3, #5
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	8912      	ldrh	r2, [r2, #8]
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d301      	bcc.n	8007f58 <dir_sdi+0x5c>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e056      	b.n	8008006 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	61da      	str	r2, [r3, #28]
 8007f60:	e02d      	b.n	8007fbe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	895b      	ldrh	r3, [r3, #10]
 8007f66:	461a      	mov	r2, r3
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	899b      	ldrh	r3, [r3, #12]
 8007f6c:	fb02 f303 	mul.w	r3, r2, r3
 8007f70:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f72:	e019      	b.n	8007fa8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6979      	ldr	r1, [r7, #20]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff fc9a 	bl	80078b2 <get_fat>
 8007f7e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f86:	d101      	bne.n	8007f8c <dir_sdi+0x90>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e03c      	b.n	8008006 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d904      	bls.n	8007f9c <dir_sdi+0xa0>
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d301      	bcc.n	8007fa0 <dir_sdi+0xa4>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e032      	b.n	8008006 <dir_sdi+0x10a>
			ofs -= csz;
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d2e1      	bcs.n	8007f74 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007fb0:	6979      	ldr	r1, [r7, #20]
 8007fb2:	6938      	ldr	r0, [r7, #16]
 8007fb4:	f7ff fc5e 	bl	8007874 <clust2sect>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <dir_sdi+0xd4>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e01a      	b.n	8008006 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	69da      	ldr	r2, [r3, #28]
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	899b      	ldrh	r3, [r3, #12]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fe0:	441a      	add	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	899b      	ldrh	r3, [r3, #12]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ff8:	fb00 f202 	mul.w	r2, r0, r2
 8007ffc:	1a9b      	subs	r3, r3, r2
 8007ffe:	18ca      	adds	r2, r1, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b086      	sub	sp, #24
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	3320      	adds	r3, #32
 8008024:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	69db      	ldr	r3, [r3, #28]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <dir_next+0x28>
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008034:	d301      	bcc.n	800803a <dir_next+0x2c>
 8008036:	2304      	movs	r3, #4
 8008038:	e0bb      	b.n	80081b2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	899b      	ldrh	r3, [r3, #12]
 800803e:	461a      	mov	r2, r3
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	fbb3 f1f2 	udiv	r1, r3, r2
 8008046:	fb01 f202 	mul.w	r2, r1, r2
 800804a:	1a9b      	subs	r3, r3, r2
 800804c:	2b00      	cmp	r3, #0
 800804e:	f040 809d 	bne.w	800818c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10b      	bne.n	800807c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	095b      	lsrs	r3, r3, #5
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	8912      	ldrh	r2, [r2, #8]
 800806c:	4293      	cmp	r3, r2
 800806e:	f0c0 808d 	bcc.w	800818c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	61da      	str	r2, [r3, #28]
 8008078:	2304      	movs	r3, #4
 800807a:	e09a      	b.n	80081b2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	899b      	ldrh	r3, [r3, #12]
 8008080:	461a      	mov	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	fbb3 f3f2 	udiv	r3, r3, r2
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	8952      	ldrh	r2, [r2, #10]
 800808c:	3a01      	subs	r2, #1
 800808e:	4013      	ands	r3, r2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d17b      	bne.n	800818c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	4619      	mov	r1, r3
 800809c:	4610      	mov	r0, r2
 800809e:	f7ff fc08 	bl	80078b2 <get_fat>
 80080a2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d801      	bhi.n	80080ae <dir_next+0xa0>
 80080aa:	2302      	movs	r3, #2
 80080ac:	e081      	b.n	80081b2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b4:	d101      	bne.n	80080ba <dir_next+0xac>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e07b      	b.n	80081b2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d359      	bcc.n	8008178 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d104      	bne.n	80080d4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	61da      	str	r2, [r3, #28]
 80080d0:	2304      	movs	r3, #4
 80080d2:	e06e      	b.n	80081b2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f7ff fe3d 	bl	8007d5c <create_chain>
 80080e2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <dir_next+0xe0>
 80080ea:	2307      	movs	r3, #7
 80080ec:	e061      	b.n	80081b2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d101      	bne.n	80080f8 <dir_next+0xea>
 80080f4:	2302      	movs	r3, #2
 80080f6:	e05c      	b.n	80081b2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080fe:	d101      	bne.n	8008104 <dir_next+0xf6>
 8008100:	2301      	movs	r3, #1
 8008102:	e056      	b.n	80081b2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f7ff fad3 	bl	80076b0 <sync_window>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <dir_next+0x106>
 8008110:	2301      	movs	r3, #1
 8008112:	e04e      	b.n	80081b2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	899b      	ldrh	r3, [r3, #12]
 800811e:	461a      	mov	r2, r3
 8008120:	2100      	movs	r1, #0
 8008122:	f7ff f8fc 	bl	800731e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008126:	2300      	movs	r3, #0
 8008128:	613b      	str	r3, [r7, #16]
 800812a:	6979      	ldr	r1, [r7, #20]
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff fba1 	bl	8007874 <clust2sect>
 8008132:	4602      	mov	r2, r0
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	631a      	str	r2, [r3, #48]	; 0x30
 8008138:	e012      	b.n	8008160 <dir_next+0x152>
						fs->wflag = 1;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7ff fab5 	bl	80076b0 <sync_window>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <dir_next+0x142>
 800814c:	2301      	movs	r3, #1
 800814e:	e030      	b.n	80081b2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	3301      	adds	r3, #1
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	631a      	str	r2, [r3, #48]	; 0x30
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	895b      	ldrh	r3, [r3, #10]
 8008164:	461a      	mov	r2, r3
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	4293      	cmp	r3, r2
 800816a:	d3e6      	bcc.n	800813a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	1ad2      	subs	r2, r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800817e:	6979      	ldr	r1, [r7, #20]
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f7ff fb77 	bl	8007874 <clust2sect>
 8008186:	4602      	mov	r2, r0
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	899b      	ldrh	r3, [r3, #12]
 800819c:	461a      	mov	r2, r3
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80081a4:	fb00 f202 	mul.w	r2, r0, r2
 80081a8:	1a9b      	subs	r3, r3, r2
 80081aa:	18ca      	adds	r2, r1, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b086      	sub	sp, #24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80081ca:	2100      	movs	r1, #0
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff fe95 	bl	8007efc <dir_sdi>
 80081d2:	4603      	mov	r3, r0
 80081d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d12b      	bne.n	8008234 <dir_alloc+0x7a>
		n = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	4619      	mov	r1, r3
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f7ff faa6 	bl	8007738 <move_window>
 80081ec:	4603      	mov	r3, r0
 80081ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d11d      	bne.n	8008232 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2be5      	cmp	r3, #229	; 0xe5
 80081fe:	d004      	beq.n	800820a <dir_alloc+0x50>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d107      	bne.n	800821a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3301      	adds	r3, #1
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	429a      	cmp	r2, r3
 8008216:	d102      	bne.n	800821e <dir_alloc+0x64>
 8008218:	e00c      	b.n	8008234 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800821a:	2300      	movs	r3, #0
 800821c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800821e:	2101      	movs	r1, #1
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff fef4 	bl	800800e <dir_next>
 8008226:	4603      	mov	r3, r0
 8008228:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d0d7      	beq.n	80081e0 <dir_alloc+0x26>
 8008230:	e000      	b.n	8008234 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008232:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	2b04      	cmp	r3, #4
 8008238:	d101      	bne.n	800823e <dir_alloc+0x84>
 800823a:	2307      	movs	r3, #7
 800823c:	75fb      	strb	r3, [r7, #23]
	return res;
 800823e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	331a      	adds	r3, #26
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe ffbe 	bl	80071d8 <ld_word>
 800825c:	4603      	mov	r3, r0
 800825e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b03      	cmp	r3, #3
 8008266:	d109      	bne.n	800827c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	3314      	adds	r3, #20
 800826c:	4618      	mov	r0, r3
 800826e:	f7fe ffb3 	bl	80071d8 <ld_word>
 8008272:	4603      	mov	r3, r0
 8008274:	041b      	lsls	r3, r3, #16
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	4313      	orrs	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800827c:	68fb      	ldr	r3, [r7, #12]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	60b9      	str	r1, [r7, #8]
 8008290:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	331a      	adds	r3, #26
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	b292      	uxth	r2, r2
 800829a:	4611      	mov	r1, r2
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe ffd6 	bl	800724e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d109      	bne.n	80082be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f103 0214 	add.w	r2, r3, #20
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	0c1b      	lsrs	r3, r3, #16
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	4619      	mov	r1, r3
 80082b8:	4610      	mov	r0, r2
 80082ba:	f7fe ffc8 	bl	800724e <st_word>
	}
}
 80082be:	bf00      	nop
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b086      	sub	sp, #24
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80082d0:	2304      	movs	r3, #4
 80082d2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80082da:	e03c      	b.n	8008356 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6938      	ldr	r0, [r7, #16]
 80082e4:	f7ff fa28 	bl	8007738 <move_window>
 80082e8:	4603      	mov	r3, r0
 80082ea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d136      	bne.n	8008360 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d102      	bne.n	8008306 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008300:	2304      	movs	r3, #4
 8008302:	75fb      	strb	r3, [r7, #23]
 8008304:	e031      	b.n	800836a <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	330b      	adds	r3, #11
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008312:	73bb      	strb	r3, [r7, #14]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7bba      	ldrb	r2, [r7, #14]
 8008318:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	2be5      	cmp	r3, #229	; 0xe5
 800831e:	d011      	beq.n	8008344 <dir_read+0x7e>
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	2b2e      	cmp	r3, #46	; 0x2e
 8008324:	d00e      	beq.n	8008344 <dir_read+0x7e>
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b0f      	cmp	r3, #15
 800832a:	d00b      	beq.n	8008344 <dir_read+0x7e>
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	f023 0320 	bic.w	r3, r3, #32
 8008332:	2b08      	cmp	r3, #8
 8008334:	bf0c      	ite	eq
 8008336:	2301      	moveq	r3, #1
 8008338:	2300      	movne	r3, #0
 800833a:	b2db      	uxtb	r3, r3
 800833c:	461a      	mov	r2, r3
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	4293      	cmp	r3, r2
 8008342:	d00f      	beq.n	8008364 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008344:	2100      	movs	r1, #0
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff fe61 	bl	800800e <dir_next>
 800834c:	4603      	mov	r3, r0
 800834e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d108      	bne.n	8008368 <dir_read+0xa2>
	while (dp->sect) {
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1be      	bne.n	80082dc <dir_read+0x16>
 800835e:	e004      	b.n	800836a <dir_read+0xa4>
		if (res != FR_OK) break;
 8008360:	bf00      	nop
 8008362:	e002      	b.n	800836a <dir_read+0xa4>
				break;
 8008364:	bf00      	nop
 8008366:	e000      	b.n	800836a <dir_read+0xa4>
		if (res != FR_OK) break;
 8008368:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800836a:	7dfb      	ldrb	r3, [r7, #23]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <dir_read+0xb0>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	61da      	str	r2, [r3, #28]
	return res;
 8008376:	7dfb      	ldrb	r3, [r7, #23]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800838e:	2100      	movs	r1, #0
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7ff fdb3 	bl	8007efc <dir_sdi>
 8008396:	4603      	mov	r3, r0
 8008398:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <dir_find+0x24>
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	e03e      	b.n	8008422 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	4619      	mov	r1, r3
 80083aa:	6938      	ldr	r0, [r7, #16]
 80083ac:	f7ff f9c4 	bl	8007738 <move_window>
 80083b0:	4603      	mov	r3, r0
 80083b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d12f      	bne.n	800841a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <dir_find+0x4e>
 80083c8:	2304      	movs	r3, #4
 80083ca:	75fb      	strb	r3, [r7, #23]
 80083cc:	e028      	b.n	8008420 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	330b      	adds	r3, #11
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	330b      	adds	r3, #11
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <dir_find+0x86>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a18      	ldr	r0, [r3, #32]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3324      	adds	r3, #36	; 0x24
 80083f8:	220b      	movs	r2, #11
 80083fa:	4619      	mov	r1, r3
 80083fc:	f7fe ffaa 	bl	8007354 <mem_cmp>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00b      	beq.n	800841e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008406:	2100      	movs	r1, #0
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff fe00 	bl	800800e <dir_next>
 800840e:	4603      	mov	r3, r0
 8008410:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0c5      	beq.n	80083a4 <dir_find+0x24>
 8008418:	e002      	b.n	8008420 <dir_find+0xa0>
		if (res != FR_OK) break;
 800841a:	bf00      	nop
 800841c:	e000      	b.n	8008420 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800841e:	bf00      	nop

	return res;
 8008420:	7dfb      	ldrb	r3, [r7, #23]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008438:	2101      	movs	r1, #1
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7ff febd 	bl	80081ba <dir_alloc>
 8008440:	4603      	mov	r3, r0
 8008442:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d11c      	bne.n	8008484 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	4619      	mov	r1, r3
 8008450:	68b8      	ldr	r0, [r7, #8]
 8008452:	f7ff f971 	bl	8007738 <move_window>
 8008456:	4603      	mov	r3, r0
 8008458:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d111      	bne.n	8008484 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	2220      	movs	r2, #32
 8008466:	2100      	movs	r1, #0
 8008468:	4618      	mov	r0, r3
 800846a:	f7fe ff58 	bl	800731e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a18      	ldr	r0, [r3, #32]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	3324      	adds	r3, #36	; 0x24
 8008476:	220b      	movs	r2, #11
 8008478:	4619      	mov	r1, r3
 800847a:	f7fe ff2f 	bl	80072dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2201      	movs	r2, #1
 8008482:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008484:	7bfb      	ldrb	r3, [r7, #15]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	4619      	mov	r1, r3
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7ff f948 	bl	8007738 <move_window>
 80084a8:	4603      	mov	r3, r0
 80084aa:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80084ac:	7afb      	ldrb	r3, [r7, #11]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d106      	bne.n	80084c0 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	22e5      	movs	r2, #229	; 0xe5
 80084b8:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80084c0:	7afb      	ldrb	r3, [r7, #11]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3324      	adds	r3, #36	; 0x24
 80084e0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80084e2:	220b      	movs	r2, #11
 80084e4:	2120      	movs	r1, #32
 80084e6:	68b8      	ldr	r0, [r7, #8]
 80084e8:	f7fe ff19 	bl	800731e <mem_set>
	si = i = 0; ni = 8;
 80084ec:	2300      	movs	r3, #0
 80084ee:	613b      	str	r3, [r7, #16]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	61fb      	str	r3, [r7, #28]
 80084f4:	2308      	movs	r3, #8
 80084f6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	61fa      	str	r2, [r7, #28]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	4413      	add	r3, r2
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008506:	7efb      	ldrb	r3, [r7, #27]
 8008508:	2b20      	cmp	r3, #32
 800850a:	d94e      	bls.n	80085aa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800850c:	7efb      	ldrb	r3, [r7, #27]
 800850e:	2b2f      	cmp	r3, #47	; 0x2f
 8008510:	d006      	beq.n	8008520 <create_name+0x54>
 8008512:	7efb      	ldrb	r3, [r7, #27]
 8008514:	2b5c      	cmp	r3, #92	; 0x5c
 8008516:	d110      	bne.n	800853a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008518:	e002      	b.n	8008520 <create_name+0x54>
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	3301      	adds	r3, #1
 800851e:	61fb      	str	r3, [r7, #28]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	4413      	add	r3, r2
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b2f      	cmp	r3, #47	; 0x2f
 800852a:	d0f6      	beq.n	800851a <create_name+0x4e>
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	4413      	add	r3, r2
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b5c      	cmp	r3, #92	; 0x5c
 8008536:	d0f0      	beq.n	800851a <create_name+0x4e>
			break;
 8008538:	e038      	b.n	80085ac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800853a:	7efb      	ldrb	r3, [r7, #27]
 800853c:	2b2e      	cmp	r3, #46	; 0x2e
 800853e:	d003      	beq.n	8008548 <create_name+0x7c>
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	429a      	cmp	r2, r3
 8008546:	d30c      	bcc.n	8008562 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b0b      	cmp	r3, #11
 800854c:	d002      	beq.n	8008554 <create_name+0x88>
 800854e:	7efb      	ldrb	r3, [r7, #27]
 8008550:	2b2e      	cmp	r3, #46	; 0x2e
 8008552:	d001      	beq.n	8008558 <create_name+0x8c>
 8008554:	2306      	movs	r3, #6
 8008556:	e044      	b.n	80085e2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008558:	2308      	movs	r3, #8
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	230b      	movs	r3, #11
 800855e:	617b      	str	r3, [r7, #20]
			continue;
 8008560:	e022      	b.n	80085a8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008562:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008566:	2b00      	cmp	r3, #0
 8008568:	da04      	bge.n	8008574 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800856a:	7efb      	ldrb	r3, [r7, #27]
 800856c:	3b80      	subs	r3, #128	; 0x80
 800856e:	4a1f      	ldr	r2, [pc, #124]	; (80085ec <create_name+0x120>)
 8008570:	5cd3      	ldrb	r3, [r2, r3]
 8008572:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008574:	7efb      	ldrb	r3, [r7, #27]
 8008576:	4619      	mov	r1, r3
 8008578:	481d      	ldr	r0, [pc, #116]	; (80085f0 <create_name+0x124>)
 800857a:	f7fe ff12 	bl	80073a2 <chk_chr>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <create_name+0xbc>
 8008584:	2306      	movs	r3, #6
 8008586:	e02c      	b.n	80085e2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008588:	7efb      	ldrb	r3, [r7, #27]
 800858a:	2b60      	cmp	r3, #96	; 0x60
 800858c:	d905      	bls.n	800859a <create_name+0xce>
 800858e:	7efb      	ldrb	r3, [r7, #27]
 8008590:	2b7a      	cmp	r3, #122	; 0x7a
 8008592:	d802      	bhi.n	800859a <create_name+0xce>
 8008594:	7efb      	ldrb	r3, [r7, #27]
 8008596:	3b20      	subs	r3, #32
 8008598:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	613a      	str	r2, [r7, #16]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	4413      	add	r3, r2
 80085a4:	7efa      	ldrb	r2, [r7, #27]
 80085a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80085a8:	e7a6      	b.n	80084f8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80085aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	441a      	add	r2, r3
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <create_name+0xf4>
 80085bc:	2306      	movs	r3, #6
 80085be:	e010      	b.n	80085e2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2be5      	cmp	r3, #229	; 0xe5
 80085c6:	d102      	bne.n	80085ce <create_name+0x102>
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2205      	movs	r2, #5
 80085cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80085ce:	7efb      	ldrb	r3, [r7, #27]
 80085d0:	2b20      	cmp	r3, #32
 80085d2:	d801      	bhi.n	80085d8 <create_name+0x10c>
 80085d4:	2204      	movs	r2, #4
 80085d6:	e000      	b.n	80085da <create_name+0x10e>
 80085d8:	2200      	movs	r2, #0
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	330b      	adds	r3, #11
 80085de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80085e0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3720      	adds	r7, #32
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	0800dad0 	.word	0x0800dad0
 80085f0:	0800cfc8 	.word	0x0800cfc8

080085f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008608:	e002      	b.n	8008610 <follow_path+0x1c>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	3301      	adds	r3, #1
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b2f      	cmp	r3, #47	; 0x2f
 8008616:	d0f8      	beq.n	800860a <follow_path+0x16>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b5c      	cmp	r3, #92	; 0x5c
 800861e:	d0f4      	beq.n	800860a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	2200      	movs	r2, #0
 8008624:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	2b1f      	cmp	r3, #31
 800862c:	d80a      	bhi.n	8008644 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2280      	movs	r2, #128	; 0x80
 8008632:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008636:	2100      	movs	r1, #0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff fc5f 	bl	8007efc <dir_sdi>
 800863e:	4603      	mov	r3, r0
 8008640:	75fb      	strb	r3, [r7, #23]
 8008642:	e048      	b.n	80086d6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008644:	463b      	mov	r3, r7
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7ff ff3f 	bl	80084cc <create_name>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d139      	bne.n	80086cc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff fe91 	bl	8008380 <dir_find>
 800865e:	4603      	mov	r3, r0
 8008660:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008668:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	2b04      	cmp	r3, #4
 8008674:	d12c      	bne.n	80086d0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008676:	7afb      	ldrb	r3, [r7, #11]
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d127      	bne.n	80086d0 <follow_path+0xdc>
 8008680:	2305      	movs	r3, #5
 8008682:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008684:	e024      	b.n	80086d0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008686:	7afb      	ldrb	r3, [r7, #11]
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b00      	cmp	r3, #0
 800868e:	d121      	bne.n	80086d4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	799b      	ldrb	r3, [r3, #6]
 8008694:	f003 0310 	and.w	r3, r3, #16
 8008698:	2b00      	cmp	r3, #0
 800869a:	d102      	bne.n	80086a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800869c:	2305      	movs	r3, #5
 800869e:	75fb      	strb	r3, [r7, #23]
 80086a0:	e019      	b.n	80086d6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	8992      	ldrh	r2, [r2, #12]
 80086b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80086b4:	fb00 f202 	mul.w	r2, r0, r2
 80086b8:	1a9b      	subs	r3, r3, r2
 80086ba:	440b      	add	r3, r1
 80086bc:	4619      	mov	r1, r3
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f7ff fdc2 	bl	8008248 <ld_clust>
 80086c4:	4602      	mov	r2, r0
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80086ca:	e7bb      	b.n	8008644 <follow_path+0x50>
			if (res != FR_OK) break;
 80086cc:	bf00      	nop
 80086ce:	e002      	b.n	80086d6 <follow_path+0xe2>
				break;
 80086d0:	bf00      	nop
 80086d2:	e000      	b.n	80086d6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80086d4:	bf00      	nop
			}
		}
	}

	return res;
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80086e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086ec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d031      	beq.n	800875a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	e002      	b.n	8008704 <get_ldnumber+0x24>
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	3301      	adds	r3, #1
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b20      	cmp	r3, #32
 800870a:	d903      	bls.n	8008714 <get_ldnumber+0x34>
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b3a      	cmp	r3, #58	; 0x3a
 8008712:	d1f4      	bne.n	80086fe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2b3a      	cmp	r3, #58	; 0x3a
 800871a:	d11c      	bne.n	8008756 <get_ldnumber+0x76>
			tp = *path;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	60fa      	str	r2, [r7, #12]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	3b30      	subs	r3, #48	; 0x30
 800872c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2b09      	cmp	r3, #9
 8008732:	d80e      	bhi.n	8008752 <get_ldnumber+0x72>
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	429a      	cmp	r2, r3
 800873a:	d10a      	bne.n	8008752 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d107      	bne.n	8008752 <get_ldnumber+0x72>
					vol = (int)i;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	3301      	adds	r3, #1
 800874a:	617b      	str	r3, [r7, #20]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	e002      	b.n	800875c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008756:	2300      	movs	r3, #0
 8008758:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800875a:	693b      	ldr	r3, [r7, #16]
}
 800875c:	4618      	mov	r0, r3
 800875e:	371c      	adds	r7, #28
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	70da      	strb	r2, [r3, #3]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800877e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7fe ffd8 	bl	8007738 <move_window>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <check_fs+0x2a>
 800878e:	2304      	movs	r3, #4
 8008790:	e038      	b.n	8008804 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	3334      	adds	r3, #52	; 0x34
 8008796:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe fd1c 	bl	80071d8 <ld_word>
 80087a0:	4603      	mov	r3, r0
 80087a2:	461a      	mov	r2, r3
 80087a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d001      	beq.n	80087b0 <check_fs+0x48>
 80087ac:	2303      	movs	r3, #3
 80087ae:	e029      	b.n	8008804 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087b6:	2be9      	cmp	r3, #233	; 0xe9
 80087b8:	d009      	beq.n	80087ce <check_fs+0x66>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087c0:	2beb      	cmp	r3, #235	; 0xeb
 80087c2:	d11e      	bne.n	8008802 <check_fs+0x9a>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80087ca:	2b90      	cmp	r3, #144	; 0x90
 80087cc:	d119      	bne.n	8008802 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3334      	adds	r3, #52	; 0x34
 80087d2:	3336      	adds	r3, #54	; 0x36
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe fd17 	bl	8007208 <ld_dword>
 80087da:	4603      	mov	r3, r0
 80087dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80087e0:	4a0a      	ldr	r2, [pc, #40]	; (800880c <check_fs+0xa4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d101      	bne.n	80087ea <check_fs+0x82>
 80087e6:	2300      	movs	r3, #0
 80087e8:	e00c      	b.n	8008804 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	3334      	adds	r3, #52	; 0x34
 80087ee:	3352      	adds	r3, #82	; 0x52
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fe fd09 	bl	8007208 <ld_dword>
 80087f6:	4603      	mov	r3, r0
 80087f8:	4a05      	ldr	r2, [pc, #20]	; (8008810 <check_fs+0xa8>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d101      	bne.n	8008802 <check_fs+0x9a>
 80087fe:	2300      	movs	r3, #0
 8008800:	e000      	b.n	8008804 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008802:	2302      	movs	r3, #2
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	00544146 	.word	0x00544146
 8008810:	33544146 	.word	0x33544146

08008814 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b096      	sub	sp, #88	; 0x58
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7ff ff59 	bl	80086e0 <get_ldnumber>
 800882e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008832:	2b00      	cmp	r3, #0
 8008834:	da01      	bge.n	800883a <find_volume+0x26>
 8008836:	230b      	movs	r3, #11
 8008838:	e262      	b.n	8008d00 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800883a:	4a9f      	ldr	r2, [pc, #636]	; (8008ab8 <find_volume+0x2a4>)
 800883c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008842:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <find_volume+0x3a>
 800884a:	230c      	movs	r3, #12
 800884c:	e258      	b.n	8008d00 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008852:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	f023 0301 	bic.w	r3, r3, #1
 800885a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d01a      	beq.n	800889a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fc17 	bl	800709c <disk_status>
 800886e:	4603      	mov	r3, r0
 8008870:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008874:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10c      	bne.n	800889a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d007      	beq.n	8008896 <find_volume+0x82>
 8008886:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008892:	230a      	movs	r3, #10
 8008894:	e234      	b.n	8008d00 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8008896:	2300      	movs	r3, #0
 8008898:	e232      	b.n	8008d00 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	2200      	movs	r2, #0
 800889e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80088a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80088a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fe fc0f 	bl	80070d0 <disk_initialize>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80088b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80088c4:	2303      	movs	r3, #3
 80088c6:	e21b      	b.n	8008d00 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80088c8:	79fb      	ldrb	r3, [r7, #7]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d007      	beq.n	80088de <find_volume+0xca>
 80088ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088d2:	f003 0304 	and.w	r3, r3, #4
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80088da:	230a      	movs	r3, #10
 80088dc:	e210      	b.n	8008d00 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	7858      	ldrb	r0, [r3, #1]
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	330c      	adds	r3, #12
 80088e6:	461a      	mov	r2, r3
 80088e8:	2102      	movs	r1, #2
 80088ea:	f7fe fc57 	bl	800719c <disk_ioctl>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <find_volume+0xe4>
 80088f4:	2301      	movs	r3, #1
 80088f6:	e203      	b.n	8008d00 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	899b      	ldrh	r3, [r3, #12]
 80088fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008900:	d80d      	bhi.n	800891e <find_volume+0x10a>
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	899b      	ldrh	r3, [r3, #12]
 8008906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800890a:	d308      	bcc.n	800891e <find_volume+0x10a>
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	899b      	ldrh	r3, [r3, #12]
 8008910:	461a      	mov	r2, r3
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	899b      	ldrh	r3, [r3, #12]
 8008916:	3b01      	subs	r3, #1
 8008918:	4013      	ands	r3, r2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <find_volume+0x10e>
 800891e:	2301      	movs	r3, #1
 8008920:	e1ee      	b.n	8008d00 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008926:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008928:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800892a:	f7ff ff1d 	bl	8008768 <check_fs>
 800892e:	4603      	mov	r3, r0
 8008930:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008938:	2b02      	cmp	r3, #2
 800893a:	d149      	bne.n	80089d0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800893c:	2300      	movs	r3, #0
 800893e:	643b      	str	r3, [r7, #64]	; 0x40
 8008940:	e01e      	b.n	8008980 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008944:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008950:	4413      	add	r3, r2
 8008952:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	3304      	adds	r3, #4
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d006      	beq.n	800896c <find_volume+0x158>
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	3308      	adds	r3, #8
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe fc50 	bl	8007208 <ld_dword>
 8008968:	4602      	mov	r2, r0
 800896a:	e000      	b.n	800896e <find_volume+0x15a>
 800896c:	2200      	movs	r2, #0
 800896e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	3358      	adds	r3, #88	; 0x58
 8008974:	443b      	add	r3, r7
 8008976:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800897a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800897c:	3301      	adds	r3, #1
 800897e:	643b      	str	r3, [r7, #64]	; 0x40
 8008980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008982:	2b03      	cmp	r3, #3
 8008984:	d9dd      	bls.n	8008942 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008986:	2300      	movs	r3, #0
 8008988:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800898a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <find_volume+0x182>
 8008990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008992:	3b01      	subs	r3, #1
 8008994:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	3358      	adds	r3, #88	; 0x58
 800899c:	443b      	add	r3, r7
 800899e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80089a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80089a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d005      	beq.n	80089b6 <find_volume+0x1a2>
 80089aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089ae:	f7ff fedb 	bl	8008768 <check_fs>
 80089b2:	4603      	mov	r3, r0
 80089b4:	e000      	b.n	80089b8 <find_volume+0x1a4>
 80089b6:	2303      	movs	r3, #3
 80089b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80089bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d905      	bls.n	80089d0 <find_volume+0x1bc>
 80089c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c6:	3301      	adds	r3, #1
 80089c8:	643b      	str	r3, [r7, #64]	; 0x40
 80089ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d9e2      	bls.n	8008996 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80089d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	d101      	bne.n	80089dc <find_volume+0x1c8>
 80089d8:	2301      	movs	r3, #1
 80089da:	e191      	b.n	8008d00 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80089dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d901      	bls.n	80089e8 <find_volume+0x1d4>
 80089e4:	230d      	movs	r3, #13
 80089e6:	e18b      	b.n	8008d00 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80089e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ea:	3334      	adds	r3, #52	; 0x34
 80089ec:	330b      	adds	r3, #11
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fbf2 	bl	80071d8 <ld_word>
 80089f4:	4603      	mov	r3, r0
 80089f6:	461a      	mov	r2, r3
 80089f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fa:	899b      	ldrh	r3, [r3, #12]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d001      	beq.n	8008a04 <find_volume+0x1f0>
 8008a00:	230d      	movs	r3, #13
 8008a02:	e17d      	b.n	8008d00 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	3334      	adds	r3, #52	; 0x34
 8008a08:	3316      	adds	r3, #22
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fbe4 	bl	80071d8 <ld_word>
 8008a10:	4603      	mov	r3, r0
 8008a12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d106      	bne.n	8008a28 <find_volume+0x214>
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	3334      	adds	r3, #52	; 0x34
 8008a1e:	3324      	adds	r3, #36	; 0x24
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe fbf1 	bl	8007208 <ld_dword>
 8008a26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a2c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a30:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3a:	789b      	ldrb	r3, [r3, #2]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d005      	beq.n	8008a4c <find_volume+0x238>
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	789b      	ldrb	r3, [r3, #2]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d001      	beq.n	8008a4c <find_volume+0x238>
 8008a48:	230d      	movs	r3, #13
 8008a4a:	e159      	b.n	8008d00 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4e:	789b      	ldrb	r3, [r3, #2]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a54:	fb02 f303 	mul.w	r3, r2, r3
 8008a58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	895b      	ldrh	r3, [r3, #10]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d008      	beq.n	8008a80 <find_volume+0x26c>
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	895b      	ldrh	r3, [r3, #10]
 8008a72:	461a      	mov	r2, r3
 8008a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a76:	895b      	ldrh	r3, [r3, #10]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <find_volume+0x270>
 8008a80:	230d      	movs	r3, #13
 8008a82:	e13d      	b.n	8008d00 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	3334      	adds	r3, #52	; 0x34
 8008a88:	3311      	adds	r3, #17
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fba4 	bl	80071d8 <ld_word>
 8008a90:	4603      	mov	r3, r0
 8008a92:	461a      	mov	r2, r3
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9a:	891b      	ldrh	r3, [r3, #8]
 8008a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a9e:	8992      	ldrh	r2, [r2, #12]
 8008aa0:	0952      	lsrs	r2, r2, #5
 8008aa2:	b292      	uxth	r2, r2
 8008aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008aa8:	fb01 f202 	mul.w	r2, r1, r2
 8008aac:	1a9b      	subs	r3, r3, r2
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <find_volume+0x2a8>
 8008ab4:	230d      	movs	r3, #13
 8008ab6:	e123      	b.n	8008d00 <find_volume+0x4ec>
 8008ab8:	200024e8 	.word	0x200024e8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	3334      	adds	r3, #52	; 0x34
 8008ac0:	3313      	adds	r3, #19
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fb88 	bl	80071d8 <ld_word>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <find_volume+0x2cc>
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	3334      	adds	r3, #52	; 0x34
 8008ad6:	3320      	adds	r3, #32
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe fb95 	bl	8007208 <ld_dword>
 8008ade:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae2:	3334      	adds	r3, #52	; 0x34
 8008ae4:	330e      	adds	r3, #14
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fe fb76 	bl	80071d8 <ld_word>
 8008aec:	4603      	mov	r3, r0
 8008aee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008af0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <find_volume+0x2e6>
 8008af6:	230d      	movs	r3, #13
 8008af8:	e102      	b.n	8008d00 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008afa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008afe:	4413      	add	r3, r2
 8008b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b02:	8911      	ldrh	r1, [r2, #8]
 8008b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b06:	8992      	ldrh	r2, [r2, #12]
 8008b08:	0952      	lsrs	r2, r2, #5
 8008b0a:	b292      	uxth	r2, r2
 8008b0c:	fbb1 f2f2 	udiv	r2, r1, r2
 8008b10:	b292      	uxth	r2, r2
 8008b12:	4413      	add	r3, r2
 8008b14:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d201      	bcs.n	8008b22 <find_volume+0x30e>
 8008b1e:	230d      	movs	r3, #13
 8008b20:	e0ee      	b.n	8008d00 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b2a:	8952      	ldrh	r2, [r2, #10]
 8008b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <find_volume+0x328>
 8008b38:	230d      	movs	r3, #13
 8008b3a:	e0e1      	b.n	8008d00 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d802      	bhi.n	8008b52 <find_volume+0x33e>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d802      	bhi.n	8008b62 <find_volume+0x34e>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	1c9a      	adds	r2, r3, #2
 8008b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b68:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b6e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008b70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b74:	441a      	add	r2, r3
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008b7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	441a      	add	r2, r3
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008b84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d11e      	bne.n	8008bca <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8e:	3334      	adds	r3, #52	; 0x34
 8008b90:	332a      	adds	r3, #42	; 0x2a
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fb20 	bl	80071d8 <ld_word>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <find_volume+0x38e>
 8008b9e:	230d      	movs	r3, #13
 8008ba0:	e0ae      	b.n	8008d00 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba4:	891b      	ldrh	r3, [r3, #8]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <find_volume+0x39a>
 8008baa:	230d      	movs	r3, #13
 8008bac:	e0a8      	b.n	8008d00 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	3334      	adds	r3, #52	; 0x34
 8008bb2:	332c      	adds	r3, #44	; 0x2c
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fb27 	bl	8007208 <ld_dword>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8008bc8:	e01f      	b.n	8008c0a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bcc:	891b      	ldrh	r3, [r3, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <find_volume+0x3c2>
 8008bd2:	230d      	movs	r3, #13
 8008bd4:	e094      	b.n	8008d00 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bdc:	441a      	add	r2, r3
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008be2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d103      	bne.n	8008bf2 <find_volume+0x3de>
 8008bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	e00a      	b.n	8008c08 <find_volume+0x3f4>
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	699a      	ldr	r2, [r3, #24]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	4413      	add	r3, r2
 8008bfc:	085a      	lsrs	r2, r3, #1
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008c08:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	69da      	ldr	r2, [r3, #28]
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c10:	899b      	ldrh	r3, [r3, #12]
 8008c12:	4619      	mov	r1, r3
 8008c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c16:	440b      	add	r3, r1
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c1c:	8989      	ldrh	r1, [r1, #12]
 8008c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d201      	bcs.n	8008c2a <find_volume+0x416>
 8008c26:	230d      	movs	r3, #13
 8008c28:	e06a      	b.n	8008d00 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c30:	615a      	str	r2, [r3, #20]
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	695a      	ldr	r2, [r3, #20]
 8008c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c38:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	2280      	movs	r2, #128	; 0x80
 8008c3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d149      	bne.n	8008cdc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4a:	3334      	adds	r3, #52	; 0x34
 8008c4c:	3330      	adds	r3, #48	; 0x30
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe fac2 	bl	80071d8 <ld_word>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d140      	bne.n	8008cdc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c62:	f7fe fd69 	bl	8007738 <move_window>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d137      	bne.n	8008cdc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6e:	2200      	movs	r2, #0
 8008c70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c74:	3334      	adds	r3, #52	; 0x34
 8008c76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe faac 	bl	80071d8 <ld_word>
 8008c80:	4603      	mov	r3, r0
 8008c82:	461a      	mov	r2, r3
 8008c84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d127      	bne.n	8008cdc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	3334      	adds	r3, #52	; 0x34
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fe fab9 	bl	8007208 <ld_dword>
 8008c96:	4603      	mov	r3, r0
 8008c98:	4a1b      	ldr	r2, [pc, #108]	; (8008d08 <find_volume+0x4f4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d11e      	bne.n	8008cdc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	3334      	adds	r3, #52	; 0x34
 8008ca2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe faae 	bl	8007208 <ld_dword>
 8008cac:	4603      	mov	r3, r0
 8008cae:	4a17      	ldr	r2, [pc, #92]	; (8008d0c <find_volume+0x4f8>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d113      	bne.n	8008cdc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	3334      	adds	r3, #52	; 0x34
 8008cb8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe faa3 	bl	8007208 <ld_dword>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	3334      	adds	r3, #52	; 0x34
 8008ccc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fe fa99 	bl	8007208 <ld_dword>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008ce2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008ce4:	4b0a      	ldr	r3, [pc, #40]	; (8008d10 <find_volume+0x4fc>)
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <find_volume+0x4fc>)
 8008cee:	801a      	strh	r2, [r3, #0]
 8008cf0:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <find_volume+0x4fc>)
 8008cf2:	881a      	ldrh	r2, [r3, #0]
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008cf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cfa:	f7fe fcb5 	bl	8007668 <clear_lock>
#endif
	return FR_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3758      	adds	r7, #88	; 0x58
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	41615252 	.word	0x41615252
 8008d0c:	61417272 	.word	0x61417272
 8008d10:	200024ec 	.word	0x200024ec

08008d14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008d1e:	2309      	movs	r3, #9
 8008d20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01c      	beq.n	8008d62 <validate+0x4e>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d018      	beq.n	8008d62 <validate+0x4e>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d013      	beq.n	8008d62 <validate+0x4e>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	889a      	ldrh	r2, [r3, #4]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	88db      	ldrh	r3, [r3, #6]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d10c      	bne.n	8008d62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	785b      	ldrb	r3, [r3, #1]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fe f9a4 	bl	800709c <disk_status>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <validate+0x4e>
			res = FR_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <validate+0x5a>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	e000      	b.n	8008d70 <validate+0x5c>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	6013      	str	r3, [r2, #0]
	return res;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b088      	sub	sp, #32
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008d92:	f107 0310 	add.w	r3, r7, #16
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7ff fca2 	bl	80086e0 <get_ldnumber>
 8008d9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	da01      	bge.n	8008da8 <f_mount+0x28>
 8008da4:	230b      	movs	r3, #11
 8008da6:	e02b      	b.n	8008e00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008da8:	4a17      	ldr	r2, [pc, #92]	; (8008e08 <f_mount+0x88>)
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008db0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d005      	beq.n	8008dc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008db8:	69b8      	ldr	r0, [r7, #24]
 8008dba:	f7fe fc55 	bl	8007668 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	490d      	ldr	r1, [pc, #52]	; (8008e08 <f_mount+0x88>)
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <f_mount+0x66>
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d001      	beq.n	8008dea <f_mount+0x6a>
 8008de6:	2300      	movs	r3, #0
 8008de8:	e00a      	b.n	8008e00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008dea:	f107 010c 	add.w	r1, r7, #12
 8008dee:	f107 0308 	add.w	r3, r7, #8
 8008df2:	2200      	movs	r2, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff fd0d 	bl	8008814 <find_volume>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3720      	adds	r7, #32
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	200024e8 	.word	0x200024e8

08008e0c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b098      	sub	sp, #96	; 0x60
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <f_open+0x18>
 8008e20:	2309      	movs	r3, #9
 8008e22:	e1bb      	b.n	800919c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008e24:	79fb      	ldrb	r3, [r7, #7]
 8008e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e2a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008e2c:	79fa      	ldrb	r2, [r7, #7]
 8008e2e:	f107 0110 	add.w	r1, r7, #16
 8008e32:	f107 0308 	add.w	r3, r7, #8
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff fcec 	bl	8008814 <find_volume>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008e42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f040 819f 	bne.w	800918a <f_open+0x37e>
		dj.obj.fs = fs;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	f107 0314 	add.w	r3, r7, #20
 8008e56:	4611      	mov	r1, r2
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7ff fbcb 	bl	80085f4 <follow_path>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008e64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d11a      	bne.n	8008ea2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008e6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e70:	b25b      	sxtb	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	da03      	bge.n	8008e7e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008e76:	2306      	movs	r3, #6
 8008e78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008e7c:	e011      	b.n	8008ea2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	f023 0301 	bic.w	r3, r3, #1
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bf14      	ite	ne
 8008e88:	2301      	movne	r3, #1
 8008e8a:	2300      	moveq	r3, #0
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f107 0314 	add.w	r3, r7, #20
 8008e94:	4611      	mov	r1, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe fa9e 	bl	80073d8 <chk_lock>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	f003 031c 	and.w	r3, r3, #28
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d07f      	beq.n	8008fac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008eac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d017      	beq.n	8008ee4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008eb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d10e      	bne.n	8008eda <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008ebc:	f7fe fae8 	bl	8007490 <enq_lock>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d006      	beq.n	8008ed4 <f_open+0xc8>
 8008ec6:	f107 0314 	add.w	r3, r7, #20
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7ff faad 	bl	800842a <dir_register>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	e000      	b.n	8008ed6 <f_open+0xca>
 8008ed4:	2312      	movs	r3, #18
 8008ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	f043 0308 	orr.w	r3, r3, #8
 8008ee0:	71fb      	strb	r3, [r7, #7]
 8008ee2:	e010      	b.n	8008f06 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008ee4:	7ebb      	ldrb	r3, [r7, #26]
 8008ee6:	f003 0311 	and.w	r3, r3, #17
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <f_open+0xea>
					res = FR_DENIED;
 8008eee:	2307      	movs	r3, #7
 8008ef0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ef4:	e007      	b.n	8008f06 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	f003 0304 	and.w	r3, r3, #4
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <f_open+0xfa>
 8008f00:	2308      	movs	r3, #8
 8008f02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d168      	bne.n	8008fe0 <f_open+0x1d4>
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	f003 0308 	and.w	r3, r3, #8
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d063      	beq.n	8008fe0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008f18:	f7fe f862 	bl	8006fe0 <get_fattime>
 8008f1c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f20:	330e      	adds	r3, #14
 8008f22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fe f9ad 	bl	8007284 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2c:	3316      	adds	r3, #22
 8008f2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe f9a7 	bl	8007284 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f38:	330b      	adds	r3, #11
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f42:	4611      	mov	r1, r2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7ff f97f 	bl	8008248 <ld_clust>
 8008f4a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f50:	2200      	movs	r2, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff f997 	bl	8008286 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5a:	331c      	adds	r3, #28
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fe f990 	bl	8007284 <st_dword>
					fs->wflag = 1;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	2201      	movs	r2, #1
 8008f68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d037      	beq.n	8008fe0 <f_open+0x1d4>
						dw = fs->winsect;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f74:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008f76:	f107 0314 	add.w	r3, r7, #20
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe fe87 	bl	8007c92 <remove_chain>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d126      	bne.n	8008fe0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe fbce 	bl	8007738 <move_window>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fa6:	3a01      	subs	r2, #1
 8008fa8:	611a      	str	r2, [r3, #16]
 8008faa:	e019      	b.n	8008fe0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008fac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d115      	bne.n	8008fe0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008fb4:	7ebb      	ldrb	r3, [r7, #26]
 8008fb6:	f003 0310 	and.w	r3, r3, #16
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008fbe:	2304      	movs	r3, #4
 8008fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008fc4:	e00c      	b.n	8008fe0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d007      	beq.n	8008fe0 <f_open+0x1d4>
 8008fd0:	7ebb      	ldrb	r3, [r7, #26]
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <f_open+0x1d4>
						res = FR_DENIED;
 8008fda:	2307      	movs	r3, #7
 8008fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d128      	bne.n	800903a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	f003 0308 	and.w	r3, r3, #8
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008ff2:	79fb      	ldrb	r3, [r7, #7]
 8008ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009008:	79fb      	ldrb	r3, [r7, #7]
 800900a:	f023 0301 	bic.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	bf14      	ite	ne
 8009012:	2301      	movne	r3, #1
 8009014:	2300      	moveq	r3, #0
 8009016:	b2db      	uxtb	r3, r3
 8009018:	461a      	mov	r2, r3
 800901a:	f107 0314 	add.w	r3, r7, #20
 800901e:	4611      	mov	r1, r2
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe fa57 	bl	80074d4 <inc_lock>
 8009026:	4602      	mov	r2, r0
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <f_open+0x22e>
 8009034:	2302      	movs	r3, #2
 8009036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800903a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800903e:	2b00      	cmp	r3, #0
 8009040:	f040 80a3 	bne.w	800918a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff f8fc 	bl	8008248 <ld_clust>
 8009050:	4602      	mov	r2, r0
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009058:	331c      	adds	r3, #28
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe f8d4 	bl	8007208 <ld_dword>
 8009060:	4602      	mov	r2, r0
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	88da      	ldrh	r2, [r3, #6]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	79fa      	ldrb	r2, [r7, #7]
 800907e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3330      	adds	r3, #48	; 0x30
 8009096:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800909a:	2100      	movs	r1, #0
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe f93e 	bl	800731e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	f003 0320 	and.w	r3, r3, #32
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d06e      	beq.n	800918a <f_open+0x37e>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d06a      	beq.n	800918a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	895b      	ldrh	r3, [r3, #10]
 80090c0:	461a      	mov	r2, r3
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	899b      	ldrh	r3, [r3, #12]
 80090c6:	fb02 f303 	mul.w	r3, r2, r3
 80090ca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	657b      	str	r3, [r7, #84]	; 0x54
 80090d8:	e016      	b.n	8009108 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe fbe7 	bl	80078b2 <get_fat>
 80090e4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80090e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d802      	bhi.n	80090f2 <f_open+0x2e6>
 80090ec:	2302      	movs	r3, #2
 80090ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80090f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090f8:	d102      	bne.n	8009100 <f_open+0x2f4>
 80090fa:	2301      	movs	r3, #1
 80090fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009100:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	657b      	str	r3, [r7, #84]	; 0x54
 8009108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800910c:	2b00      	cmp	r3, #0
 800910e:	d103      	bne.n	8009118 <f_open+0x30c>
 8009110:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009114:	429a      	cmp	r2, r3
 8009116:	d8e0      	bhi.n	80090da <f_open+0x2ce>
				}
				fp->clust = clst;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800911c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800911e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009122:	2b00      	cmp	r3, #0
 8009124:	d131      	bne.n	800918a <f_open+0x37e>
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	899b      	ldrh	r3, [r3, #12]
 800912a:	461a      	mov	r2, r3
 800912c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800912e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009132:	fb01 f202 	mul.w	r2, r1, r2
 8009136:	1a9b      	subs	r3, r3, r2
 8009138:	2b00      	cmp	r3, #0
 800913a:	d026      	beq.n	800918a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009140:	4618      	mov	r0, r3
 8009142:	f7fe fb97 	bl	8007874 <clust2sect>
 8009146:	6478      	str	r0, [r7, #68]	; 0x44
 8009148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800914a:	2b00      	cmp	r3, #0
 800914c:	d103      	bne.n	8009156 <f_open+0x34a>
						res = FR_INT_ERR;
 800914e:	2302      	movs	r3, #2
 8009150:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009154:	e019      	b.n	800918a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	899b      	ldrh	r3, [r3, #12]
 800915a:	461a      	mov	r2, r3
 800915c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800915e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009164:	441a      	add	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	7858      	ldrb	r0, [r3, #1]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6a1a      	ldr	r2, [r3, #32]
 8009178:	2301      	movs	r3, #1
 800917a:	f7fd ffcf 	bl	800711c <disk_read>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <f_open+0x37e>
 8009184:	2301      	movs	r3, #1
 8009186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800918a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <f_open+0x38c>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800919c:	4618      	mov	r0, r3
 800919e:	3760      	adds	r7, #96	; 0x60
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08e      	sub	sp, #56	; 0x38
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f107 0214 	add.w	r2, r7, #20
 80091c2:	4611      	mov	r1, r2
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7ff fda5 	bl	8008d14 <validate>
 80091ca:	4603      	mov	r3, r0
 80091cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80091d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d107      	bne.n	80091e8 <f_read+0x44>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	7d5b      	ldrb	r3, [r3, #21]
 80091dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80091e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <f_read+0x4a>
 80091e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091ec:	e135      	b.n	800945a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	7d1b      	ldrb	r3, [r3, #20]
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <f_read+0x5a>
 80091fa:	2307      	movs	r3, #7
 80091fc:	e12d      	b.n	800945a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	68da      	ldr	r2, [r3, #12]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	429a      	cmp	r2, r3
 8009210:	f240 811e 	bls.w	8009450 <f_read+0x2ac>
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009218:	e11a      	b.n	8009450 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	8992      	ldrh	r2, [r2, #12]
 8009222:	fbb3 f1f2 	udiv	r1, r3, r2
 8009226:	fb01 f202 	mul.w	r2, r1, r2
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	2b00      	cmp	r3, #0
 800922e:	f040 80d5 	bne.w	80093dc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	8992      	ldrh	r2, [r2, #12]
 800923a:	fbb3 f3f2 	udiv	r3, r3, r2
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	8952      	ldrh	r2, [r2, #10]
 8009242:	3a01      	subs	r2, #1
 8009244:	4013      	ands	r3, r2
 8009246:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d12f      	bne.n	80092ae <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d103      	bne.n	800925e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	633b      	str	r3, [r7, #48]	; 0x30
 800925c:	e013      	b.n	8009286 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009262:	2b00      	cmp	r3, #0
 8009264:	d007      	beq.n	8009276 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	4619      	mov	r1, r3
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f7fe fe0d 	bl	8007e8c <clmt_clust>
 8009272:	6338      	str	r0, [r7, #48]	; 0x30
 8009274:	e007      	b.n	8009286 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	4619      	mov	r1, r3
 800927e:	4610      	mov	r0, r2
 8009280:	f7fe fb17 	bl	80078b2 <get_fat>
 8009284:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	2b01      	cmp	r3, #1
 800928a:	d804      	bhi.n	8009296 <f_read+0xf2>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2202      	movs	r2, #2
 8009290:	755a      	strb	r2, [r3, #21]
 8009292:	2302      	movs	r3, #2
 8009294:	e0e1      	b.n	800945a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800929c:	d104      	bne.n	80092a8 <f_read+0x104>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2201      	movs	r2, #1
 80092a2:	755a      	strb	r2, [r3, #21]
 80092a4:	2301      	movs	r3, #1
 80092a6:	e0d8      	b.n	800945a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	4619      	mov	r1, r3
 80092b6:	4610      	mov	r0, r2
 80092b8:	f7fe fadc 	bl	8007874 <clust2sect>
 80092bc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d104      	bne.n	80092ce <f_read+0x12a>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2202      	movs	r2, #2
 80092c8:	755a      	strb	r2, [r3, #21]
 80092ca:	2302      	movs	r3, #2
 80092cc:	e0c5      	b.n	800945a <f_read+0x2b6>
			sect += csect;
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	4413      	add	r3, r2
 80092d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	899b      	ldrh	r3, [r3, #12]
 80092da:	461a      	mov	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	fbb3 f3f2 	udiv	r3, r3, r2
 80092e2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d041      	beq.n	800936e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	4413      	add	r3, r2
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	8952      	ldrh	r2, [r2, #10]
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d905      	bls.n	8009304 <f_read+0x160>
					cc = fs->csize - csect;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	895b      	ldrh	r3, [r3, #10]
 80092fc:	461a      	mov	r2, r3
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	7858      	ldrb	r0, [r3, #1]
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800930e:	f7fd ff05 	bl	800711c <disk_read>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d004      	beq.n	8009322 <f_read+0x17e>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2201      	movs	r2, #1
 800931c:	755a      	strb	r2, [r3, #21]
 800931e:	2301      	movs	r3, #1
 8009320:	e09b      	b.n	800945a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	7d1b      	ldrb	r3, [r3, #20]
 8009326:	b25b      	sxtb	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	da18      	bge.n	800935e <f_read+0x1ba>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6a1a      	ldr	r2, [r3, #32]
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009336:	429a      	cmp	r2, r3
 8009338:	d911      	bls.n	800935e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6a1a      	ldr	r2, [r3, #32]
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	8992      	ldrh	r2, [r2, #12]
 8009346:	fb02 f303 	mul.w	r3, r2, r3
 800934a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800934c:	18d0      	adds	r0, r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	899b      	ldrh	r3, [r3, #12]
 8009358:	461a      	mov	r2, r3
 800935a:	f7fd ffbf 	bl	80072dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	899b      	ldrh	r3, [r3, #12]
 8009362:	461a      	mov	r2, r3
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009366:	fb02 f303 	mul.w	r3, r2, r3
 800936a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800936c:	e05c      	b.n	8009428 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	429a      	cmp	r2, r3
 8009376:	d02e      	beq.n	80093d6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	7d1b      	ldrb	r3, [r3, #20]
 800937c:	b25b      	sxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	da18      	bge.n	80093b4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	7858      	ldrb	r0, [r3, #1]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6a1a      	ldr	r2, [r3, #32]
 8009390:	2301      	movs	r3, #1
 8009392:	f7fd fee3 	bl	800715c <disk_write>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d004      	beq.n	80093a6 <f_read+0x202>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2201      	movs	r2, #1
 80093a0:	755a      	strb	r2, [r3, #21]
 80093a2:	2301      	movs	r3, #1
 80093a4:	e059      	b.n	800945a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	7d1b      	ldrb	r3, [r3, #20]
 80093aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	7858      	ldrb	r0, [r3, #1]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093be:	2301      	movs	r3, #1
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	f7fd feab 	bl	800711c <disk_read>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d004      	beq.n	80093d6 <f_read+0x232>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2201      	movs	r2, #1
 80093d0:	755a      	strb	r2, [r3, #21]
 80093d2:	2301      	movs	r3, #1
 80093d4:	e041      	b.n	800945a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	899b      	ldrh	r3, [r3, #12]
 80093e0:	4618      	mov	r0, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	8992      	ldrh	r2, [r2, #12]
 80093ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80093ee:	fb01 f202 	mul.w	r2, r1, r2
 80093f2:	1a9b      	subs	r3, r3, r2
 80093f4:	1ac3      	subs	r3, r0, r3
 80093f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80093f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d901      	bls.n	8009404 <f_read+0x260>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	8992      	ldrh	r2, [r2, #12]
 8009412:	fbb3 f0f2 	udiv	r0, r3, r2
 8009416:	fb00 f202 	mul.w	r2, r0, r2
 800941a:	1a9b      	subs	r3, r3, r2
 800941c:	440b      	add	r3, r1
 800941e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009420:	4619      	mov	r1, r3
 8009422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009424:	f7fd ff5a 	bl	80072dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	4413      	add	r3, r2
 800942e:	627b      	str	r3, [r7, #36]	; 0x24
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	699a      	ldr	r2, [r3, #24]
 8009434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009436:	441a      	add	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	619a      	str	r2, [r3, #24]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	441a      	add	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f47f aee1 	bne.w	800921a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3738      	adds	r7, #56	; 0x38
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b08c      	sub	sp, #48	; 0x30
 8009466:	af00      	add	r7, sp, #0
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	607a      	str	r2, [r7, #4]
 800946e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2200      	movs	r2, #0
 8009478:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f107 0210 	add.w	r2, r7, #16
 8009480:	4611      	mov	r1, r2
 8009482:	4618      	mov	r0, r3
 8009484:	f7ff fc46 	bl	8008d14 <validate>
 8009488:	4603      	mov	r3, r0
 800948a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800948e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009492:	2b00      	cmp	r3, #0
 8009494:	d107      	bne.n	80094a6 <f_write+0x44>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	7d5b      	ldrb	r3, [r3, #21]
 800949a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800949e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d002      	beq.n	80094ac <f_write+0x4a>
 80094a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094aa:	e16a      	b.n	8009782 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	7d1b      	ldrb	r3, [r3, #20]
 80094b0:	f003 0302 	and.w	r3, r3, #2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <f_write+0x5a>
 80094b8:	2307      	movs	r3, #7
 80094ba:	e162      	b.n	8009782 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	699a      	ldr	r2, [r3, #24]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	441a      	add	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	f080 814c 	bcs.w	8009766 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	43db      	mvns	r3, r3
 80094d4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80094d6:	e146      	b.n	8009766 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	8992      	ldrh	r2, [r2, #12]
 80094e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80094e4:	fb01 f202 	mul.w	r2, r1, r2
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f040 80f1 	bne.w	80096d2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	8992      	ldrh	r2, [r2, #12]
 80094f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	8952      	ldrh	r2, [r2, #10]
 8009500:	3a01      	subs	r2, #1
 8009502:	4013      	ands	r3, r2
 8009504:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d143      	bne.n	8009594 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10c      	bne.n	800952e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	2b00      	cmp	r3, #0
 800951e:	d11a      	bne.n	8009556 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2100      	movs	r1, #0
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe fc19 	bl	8007d5c <create_chain>
 800952a:	62b8      	str	r0, [r7, #40]	; 0x28
 800952c:	e013      	b.n	8009556 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009532:	2b00      	cmp	r3, #0
 8009534:	d007      	beq.n	8009546 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	4619      	mov	r1, r3
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7fe fca5 	bl	8007e8c <clmt_clust>
 8009542:	62b8      	str	r0, [r7, #40]	; 0x28
 8009544:	e007      	b.n	8009556 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	4619      	mov	r1, r3
 800954e:	4610      	mov	r0, r2
 8009550:	f7fe fc04 	bl	8007d5c <create_chain>
 8009554:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8109 	beq.w	8009770 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	2b01      	cmp	r3, #1
 8009562:	d104      	bne.n	800956e <f_write+0x10c>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2202      	movs	r2, #2
 8009568:	755a      	strb	r2, [r3, #21]
 800956a:	2302      	movs	r3, #2
 800956c:	e109      	b.n	8009782 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009574:	d104      	bne.n	8009580 <f_write+0x11e>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2201      	movs	r2, #1
 800957a:	755a      	strb	r2, [r3, #21]
 800957c:	2301      	movs	r3, #1
 800957e:	e100      	b.n	8009782 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009584:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d102      	bne.n	8009594 <f_write+0x132>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009592:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	7d1b      	ldrb	r3, [r3, #20]
 8009598:	b25b      	sxtb	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	da18      	bge.n	80095d0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	7858      	ldrb	r0, [r3, #1]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6a1a      	ldr	r2, [r3, #32]
 80095ac:	2301      	movs	r3, #1
 80095ae:	f7fd fdd5 	bl	800715c <disk_write>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <f_write+0x160>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	755a      	strb	r2, [r3, #21]
 80095be:	2301      	movs	r3, #1
 80095c0:	e0df      	b.n	8009782 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	7d1b      	ldrb	r3, [r3, #20]
 80095c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	4619      	mov	r1, r3
 80095d8:	4610      	mov	r0, r2
 80095da:	f7fe f94b 	bl	8007874 <clust2sect>
 80095de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d104      	bne.n	80095f0 <f_write+0x18e>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2202      	movs	r2, #2
 80095ea:	755a      	strb	r2, [r3, #21]
 80095ec:	2302      	movs	r3, #2
 80095ee:	e0c8      	b.n	8009782 <f_write+0x320>
			sect += csect;
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	4413      	add	r3, r2
 80095f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	899b      	ldrh	r3, [r3, #12]
 80095fc:	461a      	mov	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	fbb3 f3f2 	udiv	r3, r3, r2
 8009604:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d043      	beq.n	8009694 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	4413      	add	r3, r2
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	8952      	ldrh	r2, [r2, #10]
 8009616:	4293      	cmp	r3, r2
 8009618:	d905      	bls.n	8009626 <f_write+0x1c4>
					cc = fs->csize - csect;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	895b      	ldrh	r3, [r3, #10]
 800961e:	461a      	mov	r2, r3
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	7858      	ldrb	r0, [r3, #1]
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	69f9      	ldr	r1, [r7, #28]
 8009630:	f7fd fd94 	bl	800715c <disk_write>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d004      	beq.n	8009644 <f_write+0x1e2>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2201      	movs	r2, #1
 800963e:	755a      	strb	r2, [r3, #21]
 8009640:	2301      	movs	r3, #1
 8009642:	e09e      	b.n	8009782 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6a1a      	ldr	r2, [r3, #32]
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	6a3a      	ldr	r2, [r7, #32]
 800964e:	429a      	cmp	r2, r3
 8009650:	d918      	bls.n	8009684 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a1a      	ldr	r2, [r3, #32]
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	8992      	ldrh	r2, [r2, #12]
 8009664:	fb02 f303 	mul.w	r3, r2, r3
 8009668:	69fa      	ldr	r2, [r7, #28]
 800966a:	18d1      	adds	r1, r2, r3
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	899b      	ldrh	r3, [r3, #12]
 8009670:	461a      	mov	r2, r3
 8009672:	f7fd fe33 	bl	80072dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	7d1b      	ldrb	r3, [r3, #20]
 800967a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800967e:	b2da      	uxtb	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	899b      	ldrh	r3, [r3, #12]
 8009688:	461a      	mov	r2, r3
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	fb02 f303 	mul.w	r3, r2, r3
 8009690:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009692:	e04b      	b.n	800972c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	429a      	cmp	r2, r3
 800969c:	d016      	beq.n	80096cc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	699a      	ldr	r2, [r3, #24]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d210      	bcs.n	80096cc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	7858      	ldrb	r0, [r3, #1]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096b4:	2301      	movs	r3, #1
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	f7fd fd30 	bl	800711c <disk_read>
 80096bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d004      	beq.n	80096cc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2201      	movs	r2, #1
 80096c6:	755a      	strb	r2, [r3, #21]
 80096c8:	2301      	movs	r3, #1
 80096ca:	e05a      	b.n	8009782 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	899b      	ldrh	r3, [r3, #12]
 80096d6:	4618      	mov	r0, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	8992      	ldrh	r2, [r2, #12]
 80096e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80096e4:	fb01 f202 	mul.w	r2, r1, r2
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	1ac3      	subs	r3, r0, r3
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80096ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d901      	bls.n	80096fa <f_write+0x298>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	8992      	ldrh	r2, [r2, #12]
 8009708:	fbb3 f0f2 	udiv	r0, r3, r2
 800970c:	fb00 f202 	mul.w	r2, r0, r2
 8009710:	1a9b      	subs	r3, r3, r2
 8009712:	440b      	add	r3, r1
 8009714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009716:	69f9      	ldr	r1, [r7, #28]
 8009718:	4618      	mov	r0, r3
 800971a:	f7fd fddf 	bl	80072dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	7d1b      	ldrb	r3, [r3, #20]
 8009722:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009726:	b2da      	uxtb	r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800972c:	69fa      	ldr	r2, [r7, #28]
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	4413      	add	r3, r2
 8009732:	61fb      	str	r3, [r7, #28]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	699a      	ldr	r2, [r3, #24]
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	441a      	add	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	619a      	str	r2, [r3, #24]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	68da      	ldr	r2, [r3, #12]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	429a      	cmp	r2, r3
 800974a:	bf38      	it	cc
 800974c:	461a      	movcc	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	60da      	str	r2, [r3, #12]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	441a      	add	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	f47f aeb5 	bne.w	80094d8 <f_write+0x76>
 800976e:	e000      	b.n	8009772 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009770:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	7d1b      	ldrb	r3, [r3, #20]
 8009776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800977a:	b2da      	uxtb	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3730      	adds	r7, #48	; 0x30
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b086      	sub	sp, #24
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f107 0208 	add.w	r2, r7, #8
 8009798:	4611      	mov	r1, r2
 800979a:	4618      	mov	r0, r3
 800979c:	f7ff faba 	bl	8008d14 <validate>
 80097a0:	4603      	mov	r3, r0
 80097a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d168      	bne.n	800987c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	7d1b      	ldrb	r3, [r3, #20]
 80097ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d062      	beq.n	800987c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	7d1b      	ldrb	r3, [r3, #20]
 80097ba:	b25b      	sxtb	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	da15      	bge.n	80097ec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	7858      	ldrb	r0, [r3, #1]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a1a      	ldr	r2, [r3, #32]
 80097ce:	2301      	movs	r3, #1
 80097d0:	f7fd fcc4 	bl	800715c <disk_write>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <f_sync+0x54>
 80097da:	2301      	movs	r3, #1
 80097dc:	e04f      	b.n	800987e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	7d1b      	ldrb	r3, [r3, #20]
 80097e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80097ec:	f7fd fbf8 	bl	8006fe0 <get_fattime>
 80097f0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f7fd ff9c 	bl	8007738 <move_window>
 8009800:	4603      	mov	r3, r0
 8009802:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009804:	7dfb      	ldrb	r3, [r7, #23]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d138      	bne.n	800987c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	330b      	adds	r3, #11
 8009814:	781a      	ldrb	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	330b      	adds	r3, #11
 800981a:	f042 0220 	orr.w	r2, r2, #32
 800981e:	b2d2      	uxtb	r2, r2
 8009820:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	461a      	mov	r2, r3
 800982c:	68f9      	ldr	r1, [r7, #12]
 800982e:	f7fe fd2a 	bl	8008286 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f103 021c 	add.w	r2, r3, #28
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	4619      	mov	r1, r3
 800983e:	4610      	mov	r0, r2
 8009840:	f7fd fd20 	bl	8007284 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3316      	adds	r3, #22
 8009848:	6939      	ldr	r1, [r7, #16]
 800984a:	4618      	mov	r0, r3
 800984c:	f7fd fd1a 	bl	8007284 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3312      	adds	r3, #18
 8009854:	2100      	movs	r1, #0
 8009856:	4618      	mov	r0, r3
 8009858:	f7fd fcf9 	bl	800724e <st_word>
					fs->wflag = 1;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2201      	movs	r2, #1
 8009860:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	4618      	mov	r0, r3
 8009866:	f7fd ff95 	bl	8007794 <sync_fs>
 800986a:	4603      	mov	r3, r0
 800986c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	7d1b      	ldrb	r3, [r3, #20]
 8009872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009876:	b2da      	uxtb	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800987c:	7dfb      	ldrb	r3, [r7, #23]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7ff ff7b 	bl	800978a <f_sync>
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009898:	7bfb      	ldrb	r3, [r7, #15]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d118      	bne.n	80098d0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f107 0208 	add.w	r2, r7, #8
 80098a4:	4611      	mov	r1, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff fa34 	bl	8008d14 <validate>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10c      	bne.n	80098d0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fd fe98 	bl	80075f0 <dec_lock>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d102      	bne.n	80098d0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b092      	sub	sp, #72	; 0x48
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80098e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80098ea:	f107 030c 	add.w	r3, r7, #12
 80098ee:	2200      	movs	r2, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fe ff8f 	bl	8008814 <find_volume>
 80098f6:	4603      	mov	r3, r0
 80098f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80098fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009900:	2b00      	cmp	r3, #0
 8009902:	f040 8099 	bne.w	8009a38 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	695a      	ldr	r2, [r3, #20]
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	3b02      	subs	r3, #2
 8009916:	429a      	cmp	r2, r3
 8009918:	d804      	bhi.n	8009924 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	695a      	ldr	r2, [r3, #20]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	e089      	b.n	8009a38 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d128      	bne.n	8009982 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009930:	2302      	movs	r3, #2
 8009932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009938:	f107 0314 	add.w	r3, r7, #20
 800993c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800993e:	4618      	mov	r0, r3
 8009940:	f7fd ffb7 	bl	80078b2 <get_fat>
 8009944:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800994c:	d103      	bne.n	8009956 <f_getfree+0x7c>
 800994e:	2301      	movs	r3, #1
 8009950:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009954:	e063      	b.n	8009a1e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009958:	2b01      	cmp	r3, #1
 800995a:	d103      	bne.n	8009964 <f_getfree+0x8a>
 800995c:	2302      	movs	r3, #2
 800995e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009962:	e05c      	b.n	8009a1e <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009966:	2b00      	cmp	r3, #0
 8009968:	d102      	bne.n	8009970 <f_getfree+0x96>
 800996a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800996c:	3301      	adds	r3, #1
 800996e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009972:	3301      	adds	r3, #1
 8009974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800997c:	429a      	cmp	r2, r3
 800997e:	d3db      	bcc.n	8009938 <f_getfree+0x5e>
 8009980:	e04d      	b.n	8009a1e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800998e:	2300      	movs	r3, #0
 8009990:	637b      	str	r3, [r7, #52]	; 0x34
 8009992:	2300      	movs	r3, #0
 8009994:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009998:	2b00      	cmp	r3, #0
 800999a:	d113      	bne.n	80099c4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800999c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a0:	1c5a      	adds	r2, r3, #1
 80099a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80099a4:	4619      	mov	r1, r3
 80099a6:	f7fd fec7 	bl	8007738 <move_window>
 80099aa:	4603      	mov	r3, r0
 80099ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80099b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d131      	bne.n	8009a1c <f_getfree+0x142>
							p = fs->win;
 80099b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ba:	3334      	adds	r3, #52	; 0x34
 80099bc:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80099be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c0:	899b      	ldrh	r3, [r3, #12]
 80099c2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d10f      	bne.n	80099ec <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80099cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099ce:	f7fd fc03 	bl	80071d8 <ld_word>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d102      	bne.n	80099de <f_getfree+0x104>
 80099d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099da:	3301      	adds	r3, #1
 80099dc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	3302      	adds	r3, #2
 80099e2:	633b      	str	r3, [r7, #48]	; 0x30
 80099e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e6:	3b02      	subs	r3, #2
 80099e8:	637b      	str	r3, [r7, #52]	; 0x34
 80099ea:	e010      	b.n	8009a0e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80099ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099ee:	f7fd fc0b 	bl	8007208 <ld_dword>
 80099f2:	4603      	mov	r3, r0
 80099f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d102      	bne.n	8009a02 <f_getfree+0x128>
 80099fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099fe:	3301      	adds	r3, #1
 8009a00:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	3304      	adds	r3, #4
 8009a06:	633b      	str	r3, [r7, #48]	; 0x30
 8009a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0a:	3b04      	subs	r3, #4
 8009a0c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a10:	3b01      	subs	r3, #1
 8009a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1bd      	bne.n	8009996 <f_getfree+0xbc>
 8009a1a:	e000      	b.n	8009a1e <f_getfree+0x144>
							if (res != FR_OK) break;
 8009a1c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a22:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a28:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2c:	791a      	ldrb	r2, [r3, #4]
 8009a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a30:	f042 0201 	orr.w	r2, r2, #1
 8009a34:	b2d2      	uxtb	r2, r2
 8009a36:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009a38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3748      	adds	r7, #72	; 0x48
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b09e      	sub	sp, #120	; 0x78
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009a50:	f107 010c 	add.w	r1, r7, #12
 8009a54:	1d3b      	adds	r3, r7, #4
 8009a56:	2202      	movs	r2, #2
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fedb 	bl	8008814 <find_volume>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8009a68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f040 808e 	bne.w	8009b8e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe fdba 	bl	80085f4 <follow_path>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8009a86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d108      	bne.n	8009aa0 <f_unlink+0x5c>
 8009a8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a92:	2102      	movs	r1, #2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fd fc9f 	bl	80073d8 <chk_lock>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009aa0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d172      	bne.n	8009b8e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009aa8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009aac:	b25b      	sxtb	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	da03      	bge.n	8009aba <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009ab2:	2306      	movs	r3, #6
 8009ab4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009ab8:	e008      	b.n	8009acc <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8009aba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009ac6:	2307      	movs	r3, #7
 8009ac8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8009acc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d134      	bne.n	8009b3e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe fbb4 	bl	8008248 <ld_clust>
 8009ae0:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009ae2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009ae6:	f003 0310 	and.w	r3, r3, #16
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d027      	beq.n	8009b3e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8009af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009af4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009af6:	f107 0310 	add.w	r3, r7, #16
 8009afa:	2100      	movs	r1, #0
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe f9fd 	bl	8007efc <dir_sdi>
 8009b02:	4603      	mov	r3, r0
 8009b04:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8009b08:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d116      	bne.n	8009b3e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009b10:	f107 0310 	add.w	r3, r7, #16
 8009b14:	2100      	movs	r1, #0
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe fbd5 	bl	80082c6 <dir_read>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009b22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d102      	bne.n	8009b30 <f_unlink+0xec>
 8009b2a:	2307      	movs	r3, #7
 8009b2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009b30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b34:	2b04      	cmp	r3, #4
 8009b36:	d102      	bne.n	8009b3e <f_unlink+0xfa>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8009b3e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d123      	bne.n	8009b8e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8009b46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe fc9f 	bl	800848e <dir_remove>
 8009b50:	4603      	mov	r3, r0
 8009b52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8009b56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10c      	bne.n	8009b78 <f_unlink+0x134>
 8009b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d009      	beq.n	8009b78 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8009b64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b68:	2200      	movs	r2, #0
 8009b6a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fe f890 	bl	8007c92 <remove_chain>
 8009b72:	4603      	mov	r3, r0
 8009b74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009b78:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d106      	bne.n	8009b8e <f_unlink+0x14a>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fd fe06 	bl	8007794 <sync_fs>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009b8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3778      	adds	r7, #120	; 0x78
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b088      	sub	sp, #32
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009bae:	e01b      	b.n	8009be8 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009bb0:	f107 0310 	add.w	r3, r7, #16
 8009bb4:	f107 0114 	add.w	r1, r7, #20
 8009bb8:	2201      	movs	r2, #1
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff faf2 	bl	80091a4 <f_read>
		if (rc != 1) break;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d116      	bne.n	8009bf4 <f_gets+0x5a>
		c = s[0];
 8009bc6:	7d3b      	ldrb	r3, [r7, #20]
 8009bc8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
 8009bcc:	2b0d      	cmp	r3, #13
 8009bce:	d100      	bne.n	8009bd2 <f_gets+0x38>
 8009bd0:	e00a      	b.n	8009be8 <f_gets+0x4e>
		*p++ = c;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	61ba      	str	r2, [r7, #24]
 8009bd8:	7dfa      	ldrb	r2, [r7, #23]
 8009bda:	701a      	strb	r2, [r3, #0]
		n++;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	3301      	adds	r3, #1
 8009be0:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	2b0a      	cmp	r3, #10
 8009be6:	d007      	beq.n	8009bf8 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	69fa      	ldr	r2, [r7, #28]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	dbde      	blt.n	8009bb0 <f_gets+0x16>
 8009bf2:	e002      	b.n	8009bfa <f_gets+0x60>
		if (rc != 1) break;
 8009bf4:	bf00      	nop
 8009bf6:	e000      	b.n	8009bfa <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8009bf8:	bf00      	nop
	}
	*p = 0;
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <f_gets+0x70>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	e000      	b.n	8009c0c <f_gets+0x72>
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3720      	adds	r7, #32
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	2b0a      	cmp	r3, #10
 8009c24:	d103      	bne.n	8009c2e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009c26:	210d      	movs	r1, #13
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff fff3 	bl	8009c14 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	db25      	blt.n	8009c86 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	60fa      	str	r2, [r7, #12]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	4413      	add	r3, r2
 8009c44:	78fa      	ldrb	r2, [r7, #3]
 8009c46:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b3c      	cmp	r3, #60	; 0x3c
 8009c4c:	dd12      	ble.n	8009c74 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6818      	ldr	r0, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f103 010c 	add.w	r1, r3, #12
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	f107 0308 	add.w	r3, r7, #8
 8009c5e:	f7ff fc00 	bl	8009462 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d101      	bne.n	8009c6e <putc_bfd+0x5a>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e001      	b.n	8009c72 <putc_bfd+0x5e>
 8009c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c72:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	609a      	str	r2, [r3, #8]
 8009c84:	e000      	b.n	8009c88 <putc_bfd+0x74>
	if (i < 0) return;
 8009c86:	bf00      	nop
}
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	db16      	blt.n	8009ccc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f103 010c 	add.w	r1, r3, #12
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	461a      	mov	r2, r3
 8009cae:	f107 030c 	add.w	r3, r7, #12
 8009cb2:	f7ff fbd6 	bl	8009462 <f_write>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d107      	bne.n	8009ccc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d102      	bne.n	8009ccc <putc_flush+0x3e>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	e001      	b.n	8009cd0 <putc_flush+0x42>
	return EOF;
 8009ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	683a      	ldr	r2, [r7, #0]
 8009ce6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	605a      	str	r2, [r3, #4]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	609a      	str	r2, [r3, #8]
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b096      	sub	sp, #88	; 0x58
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009d0c:	f107 030c 	add.w	r3, r7, #12
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff ffe0 	bl	8009cd8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009d18:	e009      	b.n	8009d2e <f_puts+0x2c>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	1c5a      	adds	r2, r3, #1
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	781a      	ldrb	r2, [r3, #0]
 8009d22:	f107 030c 	add.w	r3, r7, #12
 8009d26:	4611      	mov	r1, r2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7ff ff73 	bl	8009c14 <putc_bfd>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1f1      	bne.n	8009d1a <f_puts+0x18>
	return putc_flush(&pb);
 8009d36:	f107 030c 	add.w	r3, r7, #12
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7ff ffa7 	bl	8009c8e <putc_flush>
 8009d40:	4603      	mov	r3, r0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3758      	adds	r7, #88	; 0x58
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	4613      	mov	r3, r2
 8009d58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009d62:	4b1f      	ldr	r3, [pc, #124]	; (8009de0 <FATFS_LinkDriverEx+0x94>)
 8009d64:	7a5b      	ldrb	r3, [r3, #9]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d131      	bne.n	8009dd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009d6c:	4b1c      	ldr	r3, [pc, #112]	; (8009de0 <FATFS_LinkDriverEx+0x94>)
 8009d6e:	7a5b      	ldrb	r3, [r3, #9]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	461a      	mov	r2, r3
 8009d74:	4b1a      	ldr	r3, [pc, #104]	; (8009de0 <FATFS_LinkDriverEx+0x94>)
 8009d76:	2100      	movs	r1, #0
 8009d78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009d7a:	4b19      	ldr	r3, [pc, #100]	; (8009de0 <FATFS_LinkDriverEx+0x94>)
 8009d7c:	7a5b      	ldrb	r3, [r3, #9]
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	4a17      	ldr	r2, [pc, #92]	; (8009de0 <FATFS_LinkDriverEx+0x94>)
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009d8a:	4b15      	ldr	r3, [pc, #84]	; (8009de0 <FATFS_LinkDriverEx+0x94>)
 8009d8c:	7a5b      	ldrb	r3, [r3, #9]
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	461a      	mov	r2, r3
 8009d92:	4b13      	ldr	r3, [pc, #76]	; (8009de0 <FATFS_LinkDriverEx+0x94>)
 8009d94:	4413      	add	r3, r2
 8009d96:	79fa      	ldrb	r2, [r7, #7]
 8009d98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009d9a:	4b11      	ldr	r3, [pc, #68]	; (8009de0 <FATFS_LinkDriverEx+0x94>)
 8009d9c:	7a5b      	ldrb	r3, [r3, #9]
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	1c5a      	adds	r2, r3, #1
 8009da2:	b2d1      	uxtb	r1, r2
 8009da4:	4a0e      	ldr	r2, [pc, #56]	; (8009de0 <FATFS_LinkDriverEx+0x94>)
 8009da6:	7251      	strb	r1, [r2, #9]
 8009da8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009daa:	7dbb      	ldrb	r3, [r7, #22]
 8009dac:	3330      	adds	r3, #48	; 0x30
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	3301      	adds	r3, #1
 8009db8:	223a      	movs	r2, #58	; 0x3a
 8009dba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	3302      	adds	r3, #2
 8009dc0:	222f      	movs	r2, #47	; 0x2f
 8009dc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	3303      	adds	r3, #3
 8009dc8:	2200      	movs	r2, #0
 8009dca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20002510 	.word	0x20002510

08009de4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009dee:	2200      	movs	r2, #0
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7ff ffaa 	bl	8009d4c <FATFS_LinkDriverEx>
 8009df8:	4603      	mov	r3, r0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <__errno>:
 8009e04:	4b01      	ldr	r3, [pc, #4]	; (8009e0c <__errno+0x8>)
 8009e06:	6818      	ldr	r0, [r3, #0]
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	20000024 	.word	0x20000024

08009e10 <__libc_init_array>:
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	4d0d      	ldr	r5, [pc, #52]	; (8009e48 <__libc_init_array+0x38>)
 8009e14:	4c0d      	ldr	r4, [pc, #52]	; (8009e4c <__libc_init_array+0x3c>)
 8009e16:	1b64      	subs	r4, r4, r5
 8009e18:	10a4      	asrs	r4, r4, #2
 8009e1a:	2600      	movs	r6, #0
 8009e1c:	42a6      	cmp	r6, r4
 8009e1e:	d109      	bne.n	8009e34 <__libc_init_array+0x24>
 8009e20:	4d0b      	ldr	r5, [pc, #44]	; (8009e50 <__libc_init_array+0x40>)
 8009e22:	4c0c      	ldr	r4, [pc, #48]	; (8009e54 <__libc_init_array+0x44>)
 8009e24:	f002 ffac 	bl	800cd80 <_init>
 8009e28:	1b64      	subs	r4, r4, r5
 8009e2a:	10a4      	asrs	r4, r4, #2
 8009e2c:	2600      	movs	r6, #0
 8009e2e:	42a6      	cmp	r6, r4
 8009e30:	d105      	bne.n	8009e3e <__libc_init_array+0x2e>
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e38:	4798      	blx	r3
 8009e3a:	3601      	adds	r6, #1
 8009e3c:	e7ee      	b.n	8009e1c <__libc_init_array+0xc>
 8009e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e42:	4798      	blx	r3
 8009e44:	3601      	adds	r6, #1
 8009e46:	e7f2      	b.n	8009e2e <__libc_init_array+0x1e>
 8009e48:	0800df34 	.word	0x0800df34
 8009e4c:	0800df34 	.word	0x0800df34
 8009e50:	0800df34 	.word	0x0800df34
 8009e54:	0800df38 	.word	0x0800df38

08009e58 <malloc>:
 8009e58:	4b02      	ldr	r3, [pc, #8]	; (8009e64 <malloc+0xc>)
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	6818      	ldr	r0, [r3, #0]
 8009e5e:	f000 b87f 	b.w	8009f60 <_malloc_r>
 8009e62:	bf00      	nop
 8009e64:	20000024 	.word	0x20000024

08009e68 <free>:
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <free+0xc>)
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	6818      	ldr	r0, [r3, #0]
 8009e6e:	f000 b80b 	b.w	8009e88 <_free_r>
 8009e72:	bf00      	nop
 8009e74:	20000024 	.word	0x20000024

08009e78 <memset>:
 8009e78:	4402      	add	r2, r0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d100      	bne.n	8009e82 <memset+0xa>
 8009e80:	4770      	bx	lr
 8009e82:	f803 1b01 	strb.w	r1, [r3], #1
 8009e86:	e7f9      	b.n	8009e7c <memset+0x4>

08009e88 <_free_r>:
 8009e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e8a:	2900      	cmp	r1, #0
 8009e8c:	d044      	beq.n	8009f18 <_free_r+0x90>
 8009e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e92:	9001      	str	r0, [sp, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f1a1 0404 	sub.w	r4, r1, #4
 8009e9a:	bfb8      	it	lt
 8009e9c:	18e4      	addlt	r4, r4, r3
 8009e9e:	f001 ff7b 	bl	800bd98 <__malloc_lock>
 8009ea2:	4a1e      	ldr	r2, [pc, #120]	; (8009f1c <_free_r+0x94>)
 8009ea4:	9801      	ldr	r0, [sp, #4]
 8009ea6:	6813      	ldr	r3, [r2, #0]
 8009ea8:	b933      	cbnz	r3, 8009eb8 <_free_r+0x30>
 8009eaa:	6063      	str	r3, [r4, #4]
 8009eac:	6014      	str	r4, [r2, #0]
 8009eae:	b003      	add	sp, #12
 8009eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009eb4:	f001 bf76 	b.w	800bda4 <__malloc_unlock>
 8009eb8:	42a3      	cmp	r3, r4
 8009eba:	d908      	bls.n	8009ece <_free_r+0x46>
 8009ebc:	6825      	ldr	r5, [r4, #0]
 8009ebe:	1961      	adds	r1, r4, r5
 8009ec0:	428b      	cmp	r3, r1
 8009ec2:	bf01      	itttt	eq
 8009ec4:	6819      	ldreq	r1, [r3, #0]
 8009ec6:	685b      	ldreq	r3, [r3, #4]
 8009ec8:	1949      	addeq	r1, r1, r5
 8009eca:	6021      	streq	r1, [r4, #0]
 8009ecc:	e7ed      	b.n	8009eaa <_free_r+0x22>
 8009ece:	461a      	mov	r2, r3
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	b10b      	cbz	r3, 8009ed8 <_free_r+0x50>
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	d9fa      	bls.n	8009ece <_free_r+0x46>
 8009ed8:	6811      	ldr	r1, [r2, #0]
 8009eda:	1855      	adds	r5, r2, r1
 8009edc:	42a5      	cmp	r5, r4
 8009ede:	d10b      	bne.n	8009ef8 <_free_r+0x70>
 8009ee0:	6824      	ldr	r4, [r4, #0]
 8009ee2:	4421      	add	r1, r4
 8009ee4:	1854      	adds	r4, r2, r1
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	6011      	str	r1, [r2, #0]
 8009eea:	d1e0      	bne.n	8009eae <_free_r+0x26>
 8009eec:	681c      	ldr	r4, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	6053      	str	r3, [r2, #4]
 8009ef2:	4421      	add	r1, r4
 8009ef4:	6011      	str	r1, [r2, #0]
 8009ef6:	e7da      	b.n	8009eae <_free_r+0x26>
 8009ef8:	d902      	bls.n	8009f00 <_free_r+0x78>
 8009efa:	230c      	movs	r3, #12
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	e7d6      	b.n	8009eae <_free_r+0x26>
 8009f00:	6825      	ldr	r5, [r4, #0]
 8009f02:	1961      	adds	r1, r4, r5
 8009f04:	428b      	cmp	r3, r1
 8009f06:	bf04      	itt	eq
 8009f08:	6819      	ldreq	r1, [r3, #0]
 8009f0a:	685b      	ldreq	r3, [r3, #4]
 8009f0c:	6063      	str	r3, [r4, #4]
 8009f0e:	bf04      	itt	eq
 8009f10:	1949      	addeq	r1, r1, r5
 8009f12:	6021      	streq	r1, [r4, #0]
 8009f14:	6054      	str	r4, [r2, #4]
 8009f16:	e7ca      	b.n	8009eae <_free_r+0x26>
 8009f18:	b003      	add	sp, #12
 8009f1a:	bd30      	pop	{r4, r5, pc}
 8009f1c:	2000251c 	.word	0x2000251c

08009f20 <sbrk_aligned>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	4e0e      	ldr	r6, [pc, #56]	; (8009f5c <sbrk_aligned+0x3c>)
 8009f24:	460c      	mov	r4, r1
 8009f26:	6831      	ldr	r1, [r6, #0]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	b911      	cbnz	r1, 8009f32 <sbrk_aligned+0x12>
 8009f2c:	f000 fd84 	bl	800aa38 <_sbrk_r>
 8009f30:	6030      	str	r0, [r6, #0]
 8009f32:	4621      	mov	r1, r4
 8009f34:	4628      	mov	r0, r5
 8009f36:	f000 fd7f 	bl	800aa38 <_sbrk_r>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d00a      	beq.n	8009f54 <sbrk_aligned+0x34>
 8009f3e:	1cc4      	adds	r4, r0, #3
 8009f40:	f024 0403 	bic.w	r4, r4, #3
 8009f44:	42a0      	cmp	r0, r4
 8009f46:	d007      	beq.n	8009f58 <sbrk_aligned+0x38>
 8009f48:	1a21      	subs	r1, r4, r0
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 fd74 	bl	800aa38 <_sbrk_r>
 8009f50:	3001      	adds	r0, #1
 8009f52:	d101      	bne.n	8009f58 <sbrk_aligned+0x38>
 8009f54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009f58:	4620      	mov	r0, r4
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	20002520 	.word	0x20002520

08009f60 <_malloc_r>:
 8009f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f64:	1ccd      	adds	r5, r1, #3
 8009f66:	f025 0503 	bic.w	r5, r5, #3
 8009f6a:	3508      	adds	r5, #8
 8009f6c:	2d0c      	cmp	r5, #12
 8009f6e:	bf38      	it	cc
 8009f70:	250c      	movcc	r5, #12
 8009f72:	2d00      	cmp	r5, #0
 8009f74:	4607      	mov	r7, r0
 8009f76:	db01      	blt.n	8009f7c <_malloc_r+0x1c>
 8009f78:	42a9      	cmp	r1, r5
 8009f7a:	d905      	bls.n	8009f88 <_malloc_r+0x28>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	2600      	movs	r6, #0
 8009f82:	4630      	mov	r0, r6
 8009f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f88:	4e2e      	ldr	r6, [pc, #184]	; (800a044 <_malloc_r+0xe4>)
 8009f8a:	f001 ff05 	bl	800bd98 <__malloc_lock>
 8009f8e:	6833      	ldr	r3, [r6, #0]
 8009f90:	461c      	mov	r4, r3
 8009f92:	bb34      	cbnz	r4, 8009fe2 <_malloc_r+0x82>
 8009f94:	4629      	mov	r1, r5
 8009f96:	4638      	mov	r0, r7
 8009f98:	f7ff ffc2 	bl	8009f20 <sbrk_aligned>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	d14d      	bne.n	800a03e <_malloc_r+0xde>
 8009fa2:	6834      	ldr	r4, [r6, #0]
 8009fa4:	4626      	mov	r6, r4
 8009fa6:	2e00      	cmp	r6, #0
 8009fa8:	d140      	bne.n	800a02c <_malloc_r+0xcc>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	4631      	mov	r1, r6
 8009fae:	4638      	mov	r0, r7
 8009fb0:	eb04 0803 	add.w	r8, r4, r3
 8009fb4:	f000 fd40 	bl	800aa38 <_sbrk_r>
 8009fb8:	4580      	cmp	r8, r0
 8009fba:	d13a      	bne.n	800a032 <_malloc_r+0xd2>
 8009fbc:	6821      	ldr	r1, [r4, #0]
 8009fbe:	3503      	adds	r5, #3
 8009fc0:	1a6d      	subs	r5, r5, r1
 8009fc2:	f025 0503 	bic.w	r5, r5, #3
 8009fc6:	3508      	adds	r5, #8
 8009fc8:	2d0c      	cmp	r5, #12
 8009fca:	bf38      	it	cc
 8009fcc:	250c      	movcc	r5, #12
 8009fce:	4629      	mov	r1, r5
 8009fd0:	4638      	mov	r0, r7
 8009fd2:	f7ff ffa5 	bl	8009f20 <sbrk_aligned>
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	d02b      	beq.n	800a032 <_malloc_r+0xd2>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	442b      	add	r3, r5
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	e00e      	b.n	800a000 <_malloc_r+0xa0>
 8009fe2:	6822      	ldr	r2, [r4, #0]
 8009fe4:	1b52      	subs	r2, r2, r5
 8009fe6:	d41e      	bmi.n	800a026 <_malloc_r+0xc6>
 8009fe8:	2a0b      	cmp	r2, #11
 8009fea:	d916      	bls.n	800a01a <_malloc_r+0xba>
 8009fec:	1961      	adds	r1, r4, r5
 8009fee:	42a3      	cmp	r3, r4
 8009ff0:	6025      	str	r5, [r4, #0]
 8009ff2:	bf18      	it	ne
 8009ff4:	6059      	strne	r1, [r3, #4]
 8009ff6:	6863      	ldr	r3, [r4, #4]
 8009ff8:	bf08      	it	eq
 8009ffa:	6031      	streq	r1, [r6, #0]
 8009ffc:	5162      	str	r2, [r4, r5]
 8009ffe:	604b      	str	r3, [r1, #4]
 800a000:	4638      	mov	r0, r7
 800a002:	f104 060b 	add.w	r6, r4, #11
 800a006:	f001 fecd 	bl	800bda4 <__malloc_unlock>
 800a00a:	f026 0607 	bic.w	r6, r6, #7
 800a00e:	1d23      	adds	r3, r4, #4
 800a010:	1af2      	subs	r2, r6, r3
 800a012:	d0b6      	beq.n	8009f82 <_malloc_r+0x22>
 800a014:	1b9b      	subs	r3, r3, r6
 800a016:	50a3      	str	r3, [r4, r2]
 800a018:	e7b3      	b.n	8009f82 <_malloc_r+0x22>
 800a01a:	6862      	ldr	r2, [r4, #4]
 800a01c:	42a3      	cmp	r3, r4
 800a01e:	bf0c      	ite	eq
 800a020:	6032      	streq	r2, [r6, #0]
 800a022:	605a      	strne	r2, [r3, #4]
 800a024:	e7ec      	b.n	800a000 <_malloc_r+0xa0>
 800a026:	4623      	mov	r3, r4
 800a028:	6864      	ldr	r4, [r4, #4]
 800a02a:	e7b2      	b.n	8009f92 <_malloc_r+0x32>
 800a02c:	4634      	mov	r4, r6
 800a02e:	6876      	ldr	r6, [r6, #4]
 800a030:	e7b9      	b.n	8009fa6 <_malloc_r+0x46>
 800a032:	230c      	movs	r3, #12
 800a034:	603b      	str	r3, [r7, #0]
 800a036:	4638      	mov	r0, r7
 800a038:	f001 feb4 	bl	800bda4 <__malloc_unlock>
 800a03c:	e7a1      	b.n	8009f82 <_malloc_r+0x22>
 800a03e:	6025      	str	r5, [r4, #0]
 800a040:	e7de      	b.n	800a000 <_malloc_r+0xa0>
 800a042:	bf00      	nop
 800a044:	2000251c 	.word	0x2000251c

0800a048 <__cvt>:
 800a048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a04c:	ec55 4b10 	vmov	r4, r5, d0
 800a050:	2d00      	cmp	r5, #0
 800a052:	460e      	mov	r6, r1
 800a054:	4619      	mov	r1, r3
 800a056:	462b      	mov	r3, r5
 800a058:	bfbb      	ittet	lt
 800a05a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a05e:	461d      	movlt	r5, r3
 800a060:	2300      	movge	r3, #0
 800a062:	232d      	movlt	r3, #45	; 0x2d
 800a064:	700b      	strb	r3, [r1, #0]
 800a066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a068:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a06c:	4691      	mov	r9, r2
 800a06e:	f023 0820 	bic.w	r8, r3, #32
 800a072:	bfbc      	itt	lt
 800a074:	4622      	movlt	r2, r4
 800a076:	4614      	movlt	r4, r2
 800a078:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a07c:	d005      	beq.n	800a08a <__cvt+0x42>
 800a07e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a082:	d100      	bne.n	800a086 <__cvt+0x3e>
 800a084:	3601      	adds	r6, #1
 800a086:	2102      	movs	r1, #2
 800a088:	e000      	b.n	800a08c <__cvt+0x44>
 800a08a:	2103      	movs	r1, #3
 800a08c:	ab03      	add	r3, sp, #12
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	ab02      	add	r3, sp, #8
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	ec45 4b10 	vmov	d0, r4, r5
 800a098:	4653      	mov	r3, sl
 800a09a:	4632      	mov	r2, r6
 800a09c:	f000 fe5c 	bl	800ad58 <_dtoa_r>
 800a0a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a0a4:	4607      	mov	r7, r0
 800a0a6:	d102      	bne.n	800a0ae <__cvt+0x66>
 800a0a8:	f019 0f01 	tst.w	r9, #1
 800a0ac:	d022      	beq.n	800a0f4 <__cvt+0xac>
 800a0ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0b2:	eb07 0906 	add.w	r9, r7, r6
 800a0b6:	d110      	bne.n	800a0da <__cvt+0x92>
 800a0b8:	783b      	ldrb	r3, [r7, #0]
 800a0ba:	2b30      	cmp	r3, #48	; 0x30
 800a0bc:	d10a      	bne.n	800a0d4 <__cvt+0x8c>
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	f7f6 fd17 	bl	8000af8 <__aeabi_dcmpeq>
 800a0ca:	b918      	cbnz	r0, 800a0d4 <__cvt+0x8c>
 800a0cc:	f1c6 0601 	rsb	r6, r6, #1
 800a0d0:	f8ca 6000 	str.w	r6, [sl]
 800a0d4:	f8da 3000 	ldr.w	r3, [sl]
 800a0d8:	4499      	add	r9, r3
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4620      	mov	r0, r4
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	f7f6 fd09 	bl	8000af8 <__aeabi_dcmpeq>
 800a0e6:	b108      	cbz	r0, 800a0ec <__cvt+0xa4>
 800a0e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a0ec:	2230      	movs	r2, #48	; 0x30
 800a0ee:	9b03      	ldr	r3, [sp, #12]
 800a0f0:	454b      	cmp	r3, r9
 800a0f2:	d307      	bcc.n	800a104 <__cvt+0xbc>
 800a0f4:	9b03      	ldr	r3, [sp, #12]
 800a0f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0f8:	1bdb      	subs	r3, r3, r7
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	b004      	add	sp, #16
 800a100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a104:	1c59      	adds	r1, r3, #1
 800a106:	9103      	str	r1, [sp, #12]
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	e7f0      	b.n	800a0ee <__cvt+0xa6>

0800a10c <__exponent>:
 800a10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a10e:	4603      	mov	r3, r0
 800a110:	2900      	cmp	r1, #0
 800a112:	bfb8      	it	lt
 800a114:	4249      	neglt	r1, r1
 800a116:	f803 2b02 	strb.w	r2, [r3], #2
 800a11a:	bfb4      	ite	lt
 800a11c:	222d      	movlt	r2, #45	; 0x2d
 800a11e:	222b      	movge	r2, #43	; 0x2b
 800a120:	2909      	cmp	r1, #9
 800a122:	7042      	strb	r2, [r0, #1]
 800a124:	dd2a      	ble.n	800a17c <__exponent+0x70>
 800a126:	f10d 0407 	add.w	r4, sp, #7
 800a12a:	46a4      	mov	ip, r4
 800a12c:	270a      	movs	r7, #10
 800a12e:	46a6      	mov	lr, r4
 800a130:	460a      	mov	r2, r1
 800a132:	fb91 f6f7 	sdiv	r6, r1, r7
 800a136:	fb07 1516 	mls	r5, r7, r6, r1
 800a13a:	3530      	adds	r5, #48	; 0x30
 800a13c:	2a63      	cmp	r2, #99	; 0x63
 800a13e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a142:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a146:	4631      	mov	r1, r6
 800a148:	dcf1      	bgt.n	800a12e <__exponent+0x22>
 800a14a:	3130      	adds	r1, #48	; 0x30
 800a14c:	f1ae 0502 	sub.w	r5, lr, #2
 800a150:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a154:	1c44      	adds	r4, r0, #1
 800a156:	4629      	mov	r1, r5
 800a158:	4561      	cmp	r1, ip
 800a15a:	d30a      	bcc.n	800a172 <__exponent+0x66>
 800a15c:	f10d 0209 	add.w	r2, sp, #9
 800a160:	eba2 020e 	sub.w	r2, r2, lr
 800a164:	4565      	cmp	r5, ip
 800a166:	bf88      	it	hi
 800a168:	2200      	movhi	r2, #0
 800a16a:	4413      	add	r3, r2
 800a16c:	1a18      	subs	r0, r3, r0
 800a16e:	b003      	add	sp, #12
 800a170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a172:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a176:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a17a:	e7ed      	b.n	800a158 <__exponent+0x4c>
 800a17c:	2330      	movs	r3, #48	; 0x30
 800a17e:	3130      	adds	r1, #48	; 0x30
 800a180:	7083      	strb	r3, [r0, #2]
 800a182:	70c1      	strb	r1, [r0, #3]
 800a184:	1d03      	adds	r3, r0, #4
 800a186:	e7f1      	b.n	800a16c <__exponent+0x60>

0800a188 <_printf_float>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	ed2d 8b02 	vpush	{d8}
 800a190:	b08d      	sub	sp, #52	; 0x34
 800a192:	460c      	mov	r4, r1
 800a194:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a198:	4616      	mov	r6, r2
 800a19a:	461f      	mov	r7, r3
 800a19c:	4605      	mov	r5, r0
 800a19e:	f001 fd81 	bl	800bca4 <_localeconv_r>
 800a1a2:	f8d0 a000 	ldr.w	sl, [r0]
 800a1a6:	4650      	mov	r0, sl
 800a1a8:	f7f6 f824 	bl	80001f4 <strlen>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a1bc:	3307      	adds	r3, #7
 800a1be:	f023 0307 	bic.w	r3, r3, #7
 800a1c2:	f103 0208 	add.w	r2, r3, #8
 800a1c6:	f8c8 2000 	str.w	r2, [r8]
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a1d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a1d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1da:	9307      	str	r3, [sp, #28]
 800a1dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1e0:	ee08 0a10 	vmov	s16, r0
 800a1e4:	4b9f      	ldr	r3, [pc, #636]	; (800a464 <_printf_float+0x2dc>)
 800a1e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1ee:	f7f6 fcb5 	bl	8000b5c <__aeabi_dcmpun>
 800a1f2:	bb88      	cbnz	r0, 800a258 <_printf_float+0xd0>
 800a1f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1f8:	4b9a      	ldr	r3, [pc, #616]	; (800a464 <_printf_float+0x2dc>)
 800a1fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1fe:	f7f6 fc8f 	bl	8000b20 <__aeabi_dcmple>
 800a202:	bb48      	cbnz	r0, 800a258 <_printf_float+0xd0>
 800a204:	2200      	movs	r2, #0
 800a206:	2300      	movs	r3, #0
 800a208:	4640      	mov	r0, r8
 800a20a:	4649      	mov	r1, r9
 800a20c:	f7f6 fc7e 	bl	8000b0c <__aeabi_dcmplt>
 800a210:	b110      	cbz	r0, 800a218 <_printf_float+0x90>
 800a212:	232d      	movs	r3, #45	; 0x2d
 800a214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a218:	4b93      	ldr	r3, [pc, #588]	; (800a468 <_printf_float+0x2e0>)
 800a21a:	4894      	ldr	r0, [pc, #592]	; (800a46c <_printf_float+0x2e4>)
 800a21c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a220:	bf94      	ite	ls
 800a222:	4698      	movls	r8, r3
 800a224:	4680      	movhi	r8, r0
 800a226:	2303      	movs	r3, #3
 800a228:	6123      	str	r3, [r4, #16]
 800a22a:	9b05      	ldr	r3, [sp, #20]
 800a22c:	f023 0204 	bic.w	r2, r3, #4
 800a230:	6022      	str	r2, [r4, #0]
 800a232:	f04f 0900 	mov.w	r9, #0
 800a236:	9700      	str	r7, [sp, #0]
 800a238:	4633      	mov	r3, r6
 800a23a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a23c:	4621      	mov	r1, r4
 800a23e:	4628      	mov	r0, r5
 800a240:	f000 f9d8 	bl	800a5f4 <_printf_common>
 800a244:	3001      	adds	r0, #1
 800a246:	f040 8090 	bne.w	800a36a <_printf_float+0x1e2>
 800a24a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a24e:	b00d      	add	sp, #52	; 0x34
 800a250:	ecbd 8b02 	vpop	{d8}
 800a254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a258:	4642      	mov	r2, r8
 800a25a:	464b      	mov	r3, r9
 800a25c:	4640      	mov	r0, r8
 800a25e:	4649      	mov	r1, r9
 800a260:	f7f6 fc7c 	bl	8000b5c <__aeabi_dcmpun>
 800a264:	b140      	cbz	r0, 800a278 <_printf_float+0xf0>
 800a266:	464b      	mov	r3, r9
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bfbc      	itt	lt
 800a26c:	232d      	movlt	r3, #45	; 0x2d
 800a26e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a272:	487f      	ldr	r0, [pc, #508]	; (800a470 <_printf_float+0x2e8>)
 800a274:	4b7f      	ldr	r3, [pc, #508]	; (800a474 <_printf_float+0x2ec>)
 800a276:	e7d1      	b.n	800a21c <_printf_float+0x94>
 800a278:	6863      	ldr	r3, [r4, #4]
 800a27a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a27e:	9206      	str	r2, [sp, #24]
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	d13f      	bne.n	800a304 <_printf_float+0x17c>
 800a284:	2306      	movs	r3, #6
 800a286:	6063      	str	r3, [r4, #4]
 800a288:	9b05      	ldr	r3, [sp, #20]
 800a28a:	6861      	ldr	r1, [r4, #4]
 800a28c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a290:	2300      	movs	r3, #0
 800a292:	9303      	str	r3, [sp, #12]
 800a294:	ab0a      	add	r3, sp, #40	; 0x28
 800a296:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a29a:	ab09      	add	r3, sp, #36	; 0x24
 800a29c:	ec49 8b10 	vmov	d0, r8, r9
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	6022      	str	r2, [r4, #0]
 800a2a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f7ff fecd 	bl	800a048 <__cvt>
 800a2ae:	9b06      	ldr	r3, [sp, #24]
 800a2b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2b2:	2b47      	cmp	r3, #71	; 0x47
 800a2b4:	4680      	mov	r8, r0
 800a2b6:	d108      	bne.n	800a2ca <_printf_float+0x142>
 800a2b8:	1cc8      	adds	r0, r1, #3
 800a2ba:	db02      	blt.n	800a2c2 <_printf_float+0x13a>
 800a2bc:	6863      	ldr	r3, [r4, #4]
 800a2be:	4299      	cmp	r1, r3
 800a2c0:	dd41      	ble.n	800a346 <_printf_float+0x1be>
 800a2c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a2c6:	fa5f fb8b 	uxtb.w	fp, fp
 800a2ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2ce:	d820      	bhi.n	800a312 <_printf_float+0x18a>
 800a2d0:	3901      	subs	r1, #1
 800a2d2:	465a      	mov	r2, fp
 800a2d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a2d8:	9109      	str	r1, [sp, #36]	; 0x24
 800a2da:	f7ff ff17 	bl	800a10c <__exponent>
 800a2de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2e0:	1813      	adds	r3, r2, r0
 800a2e2:	2a01      	cmp	r2, #1
 800a2e4:	4681      	mov	r9, r0
 800a2e6:	6123      	str	r3, [r4, #16]
 800a2e8:	dc02      	bgt.n	800a2f0 <_printf_float+0x168>
 800a2ea:	6822      	ldr	r2, [r4, #0]
 800a2ec:	07d2      	lsls	r2, r2, #31
 800a2ee:	d501      	bpl.n	800a2f4 <_printf_float+0x16c>
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	6123      	str	r3, [r4, #16]
 800a2f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d09c      	beq.n	800a236 <_printf_float+0xae>
 800a2fc:	232d      	movs	r3, #45	; 0x2d
 800a2fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a302:	e798      	b.n	800a236 <_printf_float+0xae>
 800a304:	9a06      	ldr	r2, [sp, #24]
 800a306:	2a47      	cmp	r2, #71	; 0x47
 800a308:	d1be      	bne.n	800a288 <_printf_float+0x100>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1bc      	bne.n	800a288 <_printf_float+0x100>
 800a30e:	2301      	movs	r3, #1
 800a310:	e7b9      	b.n	800a286 <_printf_float+0xfe>
 800a312:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a316:	d118      	bne.n	800a34a <_printf_float+0x1c2>
 800a318:	2900      	cmp	r1, #0
 800a31a:	6863      	ldr	r3, [r4, #4]
 800a31c:	dd0b      	ble.n	800a336 <_printf_float+0x1ae>
 800a31e:	6121      	str	r1, [r4, #16]
 800a320:	b913      	cbnz	r3, 800a328 <_printf_float+0x1a0>
 800a322:	6822      	ldr	r2, [r4, #0]
 800a324:	07d0      	lsls	r0, r2, #31
 800a326:	d502      	bpl.n	800a32e <_printf_float+0x1a6>
 800a328:	3301      	adds	r3, #1
 800a32a:	440b      	add	r3, r1
 800a32c:	6123      	str	r3, [r4, #16]
 800a32e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a330:	f04f 0900 	mov.w	r9, #0
 800a334:	e7de      	b.n	800a2f4 <_printf_float+0x16c>
 800a336:	b913      	cbnz	r3, 800a33e <_printf_float+0x1b6>
 800a338:	6822      	ldr	r2, [r4, #0]
 800a33a:	07d2      	lsls	r2, r2, #31
 800a33c:	d501      	bpl.n	800a342 <_printf_float+0x1ba>
 800a33e:	3302      	adds	r3, #2
 800a340:	e7f4      	b.n	800a32c <_printf_float+0x1a4>
 800a342:	2301      	movs	r3, #1
 800a344:	e7f2      	b.n	800a32c <_printf_float+0x1a4>
 800a346:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34c:	4299      	cmp	r1, r3
 800a34e:	db05      	blt.n	800a35c <_printf_float+0x1d4>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	6121      	str	r1, [r4, #16]
 800a354:	07d8      	lsls	r0, r3, #31
 800a356:	d5ea      	bpl.n	800a32e <_printf_float+0x1a6>
 800a358:	1c4b      	adds	r3, r1, #1
 800a35a:	e7e7      	b.n	800a32c <_printf_float+0x1a4>
 800a35c:	2900      	cmp	r1, #0
 800a35e:	bfd4      	ite	le
 800a360:	f1c1 0202 	rsble	r2, r1, #2
 800a364:	2201      	movgt	r2, #1
 800a366:	4413      	add	r3, r2
 800a368:	e7e0      	b.n	800a32c <_printf_float+0x1a4>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	055a      	lsls	r2, r3, #21
 800a36e:	d407      	bmi.n	800a380 <_printf_float+0x1f8>
 800a370:	6923      	ldr	r3, [r4, #16]
 800a372:	4642      	mov	r2, r8
 800a374:	4631      	mov	r1, r6
 800a376:	4628      	mov	r0, r5
 800a378:	47b8      	blx	r7
 800a37a:	3001      	adds	r0, #1
 800a37c:	d12c      	bne.n	800a3d8 <_printf_float+0x250>
 800a37e:	e764      	b.n	800a24a <_printf_float+0xc2>
 800a380:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a384:	f240 80e0 	bls.w	800a548 <_printf_float+0x3c0>
 800a388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a38c:	2200      	movs	r2, #0
 800a38e:	2300      	movs	r3, #0
 800a390:	f7f6 fbb2 	bl	8000af8 <__aeabi_dcmpeq>
 800a394:	2800      	cmp	r0, #0
 800a396:	d034      	beq.n	800a402 <_printf_float+0x27a>
 800a398:	4a37      	ldr	r2, [pc, #220]	; (800a478 <_printf_float+0x2f0>)
 800a39a:	2301      	movs	r3, #1
 800a39c:	4631      	mov	r1, r6
 800a39e:	4628      	mov	r0, r5
 800a3a0:	47b8      	blx	r7
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	f43f af51 	beq.w	800a24a <_printf_float+0xc2>
 800a3a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	db02      	blt.n	800a3b6 <_printf_float+0x22e>
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	07d8      	lsls	r0, r3, #31
 800a3b4:	d510      	bpl.n	800a3d8 <_printf_float+0x250>
 800a3b6:	ee18 3a10 	vmov	r3, s16
 800a3ba:	4652      	mov	r2, sl
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4628      	mov	r0, r5
 800a3c0:	47b8      	blx	r7
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f43f af41 	beq.w	800a24a <_printf_float+0xc2>
 800a3c8:	f04f 0800 	mov.w	r8, #0
 800a3cc:	f104 091a 	add.w	r9, r4, #26
 800a3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	4543      	cmp	r3, r8
 800a3d6:	dc09      	bgt.n	800a3ec <_printf_float+0x264>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	079b      	lsls	r3, r3, #30
 800a3dc:	f100 8105 	bmi.w	800a5ea <_printf_float+0x462>
 800a3e0:	68e0      	ldr	r0, [r4, #12]
 800a3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3e4:	4298      	cmp	r0, r3
 800a3e6:	bfb8      	it	lt
 800a3e8:	4618      	movlt	r0, r3
 800a3ea:	e730      	b.n	800a24e <_printf_float+0xc6>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	464a      	mov	r2, r9
 800a3f0:	4631      	mov	r1, r6
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	47b8      	blx	r7
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	f43f af27 	beq.w	800a24a <_printf_float+0xc2>
 800a3fc:	f108 0801 	add.w	r8, r8, #1
 800a400:	e7e6      	b.n	800a3d0 <_printf_float+0x248>
 800a402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	dc39      	bgt.n	800a47c <_printf_float+0x2f4>
 800a408:	4a1b      	ldr	r2, [pc, #108]	; (800a478 <_printf_float+0x2f0>)
 800a40a:	2301      	movs	r3, #1
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	f43f af19 	beq.w	800a24a <_printf_float+0xc2>
 800a418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a41c:	4313      	orrs	r3, r2
 800a41e:	d102      	bne.n	800a426 <_printf_float+0x29e>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	07d9      	lsls	r1, r3, #31
 800a424:	d5d8      	bpl.n	800a3d8 <_printf_float+0x250>
 800a426:	ee18 3a10 	vmov	r3, s16
 800a42a:	4652      	mov	r2, sl
 800a42c:	4631      	mov	r1, r6
 800a42e:	4628      	mov	r0, r5
 800a430:	47b8      	blx	r7
 800a432:	3001      	adds	r0, #1
 800a434:	f43f af09 	beq.w	800a24a <_printf_float+0xc2>
 800a438:	f04f 0900 	mov.w	r9, #0
 800a43c:	f104 0a1a 	add.w	sl, r4, #26
 800a440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a442:	425b      	negs	r3, r3
 800a444:	454b      	cmp	r3, r9
 800a446:	dc01      	bgt.n	800a44c <_printf_float+0x2c4>
 800a448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a44a:	e792      	b.n	800a372 <_printf_float+0x1ea>
 800a44c:	2301      	movs	r3, #1
 800a44e:	4652      	mov	r2, sl
 800a450:	4631      	mov	r1, r6
 800a452:	4628      	mov	r0, r5
 800a454:	47b8      	blx	r7
 800a456:	3001      	adds	r0, #1
 800a458:	f43f aef7 	beq.w	800a24a <_printf_float+0xc2>
 800a45c:	f109 0901 	add.w	r9, r9, #1
 800a460:	e7ee      	b.n	800a440 <_printf_float+0x2b8>
 800a462:	bf00      	nop
 800a464:	7fefffff 	.word	0x7fefffff
 800a468:	0800db54 	.word	0x0800db54
 800a46c:	0800db58 	.word	0x0800db58
 800a470:	0800db60 	.word	0x0800db60
 800a474:	0800db5c 	.word	0x0800db5c
 800a478:	0800db64 	.word	0x0800db64
 800a47c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a47e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a480:	429a      	cmp	r2, r3
 800a482:	bfa8      	it	ge
 800a484:	461a      	movge	r2, r3
 800a486:	2a00      	cmp	r2, #0
 800a488:	4691      	mov	r9, r2
 800a48a:	dc37      	bgt.n	800a4fc <_printf_float+0x374>
 800a48c:	f04f 0b00 	mov.w	fp, #0
 800a490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a494:	f104 021a 	add.w	r2, r4, #26
 800a498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a49a:	9305      	str	r3, [sp, #20]
 800a49c:	eba3 0309 	sub.w	r3, r3, r9
 800a4a0:	455b      	cmp	r3, fp
 800a4a2:	dc33      	bgt.n	800a50c <_printf_float+0x384>
 800a4a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	db3b      	blt.n	800a524 <_printf_float+0x39c>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	07da      	lsls	r2, r3, #31
 800a4b0:	d438      	bmi.n	800a524 <_printf_float+0x39c>
 800a4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b4:	9a05      	ldr	r2, [sp, #20]
 800a4b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4b8:	1a9a      	subs	r2, r3, r2
 800a4ba:	eba3 0901 	sub.w	r9, r3, r1
 800a4be:	4591      	cmp	r9, r2
 800a4c0:	bfa8      	it	ge
 800a4c2:	4691      	movge	r9, r2
 800a4c4:	f1b9 0f00 	cmp.w	r9, #0
 800a4c8:	dc35      	bgt.n	800a536 <_printf_float+0x3ae>
 800a4ca:	f04f 0800 	mov.w	r8, #0
 800a4ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4d2:	f104 0a1a 	add.w	sl, r4, #26
 800a4d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4da:	1a9b      	subs	r3, r3, r2
 800a4dc:	eba3 0309 	sub.w	r3, r3, r9
 800a4e0:	4543      	cmp	r3, r8
 800a4e2:	f77f af79 	ble.w	800a3d8 <_printf_float+0x250>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	4652      	mov	r2, sl
 800a4ea:	4631      	mov	r1, r6
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	47b8      	blx	r7
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	f43f aeaa 	beq.w	800a24a <_printf_float+0xc2>
 800a4f6:	f108 0801 	add.w	r8, r8, #1
 800a4fa:	e7ec      	b.n	800a4d6 <_printf_float+0x34e>
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	4631      	mov	r1, r6
 800a500:	4642      	mov	r2, r8
 800a502:	4628      	mov	r0, r5
 800a504:	47b8      	blx	r7
 800a506:	3001      	adds	r0, #1
 800a508:	d1c0      	bne.n	800a48c <_printf_float+0x304>
 800a50a:	e69e      	b.n	800a24a <_printf_float+0xc2>
 800a50c:	2301      	movs	r3, #1
 800a50e:	4631      	mov	r1, r6
 800a510:	4628      	mov	r0, r5
 800a512:	9205      	str	r2, [sp, #20]
 800a514:	47b8      	blx	r7
 800a516:	3001      	adds	r0, #1
 800a518:	f43f ae97 	beq.w	800a24a <_printf_float+0xc2>
 800a51c:	9a05      	ldr	r2, [sp, #20]
 800a51e:	f10b 0b01 	add.w	fp, fp, #1
 800a522:	e7b9      	b.n	800a498 <_printf_float+0x310>
 800a524:	ee18 3a10 	vmov	r3, s16
 800a528:	4652      	mov	r2, sl
 800a52a:	4631      	mov	r1, r6
 800a52c:	4628      	mov	r0, r5
 800a52e:	47b8      	blx	r7
 800a530:	3001      	adds	r0, #1
 800a532:	d1be      	bne.n	800a4b2 <_printf_float+0x32a>
 800a534:	e689      	b.n	800a24a <_printf_float+0xc2>
 800a536:	9a05      	ldr	r2, [sp, #20]
 800a538:	464b      	mov	r3, r9
 800a53a:	4442      	add	r2, r8
 800a53c:	4631      	mov	r1, r6
 800a53e:	4628      	mov	r0, r5
 800a540:	47b8      	blx	r7
 800a542:	3001      	adds	r0, #1
 800a544:	d1c1      	bne.n	800a4ca <_printf_float+0x342>
 800a546:	e680      	b.n	800a24a <_printf_float+0xc2>
 800a548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a54a:	2a01      	cmp	r2, #1
 800a54c:	dc01      	bgt.n	800a552 <_printf_float+0x3ca>
 800a54e:	07db      	lsls	r3, r3, #31
 800a550:	d538      	bpl.n	800a5c4 <_printf_float+0x43c>
 800a552:	2301      	movs	r3, #1
 800a554:	4642      	mov	r2, r8
 800a556:	4631      	mov	r1, r6
 800a558:	4628      	mov	r0, r5
 800a55a:	47b8      	blx	r7
 800a55c:	3001      	adds	r0, #1
 800a55e:	f43f ae74 	beq.w	800a24a <_printf_float+0xc2>
 800a562:	ee18 3a10 	vmov	r3, s16
 800a566:	4652      	mov	r2, sl
 800a568:	4631      	mov	r1, r6
 800a56a:	4628      	mov	r0, r5
 800a56c:	47b8      	blx	r7
 800a56e:	3001      	adds	r0, #1
 800a570:	f43f ae6b 	beq.w	800a24a <_printf_float+0xc2>
 800a574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a578:	2200      	movs	r2, #0
 800a57a:	2300      	movs	r3, #0
 800a57c:	f7f6 fabc 	bl	8000af8 <__aeabi_dcmpeq>
 800a580:	b9d8      	cbnz	r0, 800a5ba <_printf_float+0x432>
 800a582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a584:	f108 0201 	add.w	r2, r8, #1
 800a588:	3b01      	subs	r3, #1
 800a58a:	4631      	mov	r1, r6
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b8      	blx	r7
 800a590:	3001      	adds	r0, #1
 800a592:	d10e      	bne.n	800a5b2 <_printf_float+0x42a>
 800a594:	e659      	b.n	800a24a <_printf_float+0xc2>
 800a596:	2301      	movs	r3, #1
 800a598:	4652      	mov	r2, sl
 800a59a:	4631      	mov	r1, r6
 800a59c:	4628      	mov	r0, r5
 800a59e:	47b8      	blx	r7
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	f43f ae52 	beq.w	800a24a <_printf_float+0xc2>
 800a5a6:	f108 0801 	add.w	r8, r8, #1
 800a5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	4543      	cmp	r3, r8
 800a5b0:	dcf1      	bgt.n	800a596 <_printf_float+0x40e>
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a5b8:	e6dc      	b.n	800a374 <_printf_float+0x1ec>
 800a5ba:	f04f 0800 	mov.w	r8, #0
 800a5be:	f104 0a1a 	add.w	sl, r4, #26
 800a5c2:	e7f2      	b.n	800a5aa <_printf_float+0x422>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	4642      	mov	r2, r8
 800a5c8:	e7df      	b.n	800a58a <_printf_float+0x402>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	464a      	mov	r2, r9
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	47b8      	blx	r7
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	f43f ae38 	beq.w	800a24a <_printf_float+0xc2>
 800a5da:	f108 0801 	add.w	r8, r8, #1
 800a5de:	68e3      	ldr	r3, [r4, #12]
 800a5e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5e2:	1a5b      	subs	r3, r3, r1
 800a5e4:	4543      	cmp	r3, r8
 800a5e6:	dcf0      	bgt.n	800a5ca <_printf_float+0x442>
 800a5e8:	e6fa      	b.n	800a3e0 <_printf_float+0x258>
 800a5ea:	f04f 0800 	mov.w	r8, #0
 800a5ee:	f104 0919 	add.w	r9, r4, #25
 800a5f2:	e7f4      	b.n	800a5de <_printf_float+0x456>

0800a5f4 <_printf_common>:
 800a5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f8:	4616      	mov	r6, r2
 800a5fa:	4699      	mov	r9, r3
 800a5fc:	688a      	ldr	r2, [r1, #8]
 800a5fe:	690b      	ldr	r3, [r1, #16]
 800a600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a604:	4293      	cmp	r3, r2
 800a606:	bfb8      	it	lt
 800a608:	4613      	movlt	r3, r2
 800a60a:	6033      	str	r3, [r6, #0]
 800a60c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a610:	4607      	mov	r7, r0
 800a612:	460c      	mov	r4, r1
 800a614:	b10a      	cbz	r2, 800a61a <_printf_common+0x26>
 800a616:	3301      	adds	r3, #1
 800a618:	6033      	str	r3, [r6, #0]
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	0699      	lsls	r1, r3, #26
 800a61e:	bf42      	ittt	mi
 800a620:	6833      	ldrmi	r3, [r6, #0]
 800a622:	3302      	addmi	r3, #2
 800a624:	6033      	strmi	r3, [r6, #0]
 800a626:	6825      	ldr	r5, [r4, #0]
 800a628:	f015 0506 	ands.w	r5, r5, #6
 800a62c:	d106      	bne.n	800a63c <_printf_common+0x48>
 800a62e:	f104 0a19 	add.w	sl, r4, #25
 800a632:	68e3      	ldr	r3, [r4, #12]
 800a634:	6832      	ldr	r2, [r6, #0]
 800a636:	1a9b      	subs	r3, r3, r2
 800a638:	42ab      	cmp	r3, r5
 800a63a:	dc26      	bgt.n	800a68a <_printf_common+0x96>
 800a63c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a640:	1e13      	subs	r3, r2, #0
 800a642:	6822      	ldr	r2, [r4, #0]
 800a644:	bf18      	it	ne
 800a646:	2301      	movne	r3, #1
 800a648:	0692      	lsls	r2, r2, #26
 800a64a:	d42b      	bmi.n	800a6a4 <_printf_common+0xb0>
 800a64c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a650:	4649      	mov	r1, r9
 800a652:	4638      	mov	r0, r7
 800a654:	47c0      	blx	r8
 800a656:	3001      	adds	r0, #1
 800a658:	d01e      	beq.n	800a698 <_printf_common+0xa4>
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	68e5      	ldr	r5, [r4, #12]
 800a65e:	6832      	ldr	r2, [r6, #0]
 800a660:	f003 0306 	and.w	r3, r3, #6
 800a664:	2b04      	cmp	r3, #4
 800a666:	bf08      	it	eq
 800a668:	1aad      	subeq	r5, r5, r2
 800a66a:	68a3      	ldr	r3, [r4, #8]
 800a66c:	6922      	ldr	r2, [r4, #16]
 800a66e:	bf0c      	ite	eq
 800a670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a674:	2500      	movne	r5, #0
 800a676:	4293      	cmp	r3, r2
 800a678:	bfc4      	itt	gt
 800a67a:	1a9b      	subgt	r3, r3, r2
 800a67c:	18ed      	addgt	r5, r5, r3
 800a67e:	2600      	movs	r6, #0
 800a680:	341a      	adds	r4, #26
 800a682:	42b5      	cmp	r5, r6
 800a684:	d11a      	bne.n	800a6bc <_printf_common+0xc8>
 800a686:	2000      	movs	r0, #0
 800a688:	e008      	b.n	800a69c <_printf_common+0xa8>
 800a68a:	2301      	movs	r3, #1
 800a68c:	4652      	mov	r2, sl
 800a68e:	4649      	mov	r1, r9
 800a690:	4638      	mov	r0, r7
 800a692:	47c0      	blx	r8
 800a694:	3001      	adds	r0, #1
 800a696:	d103      	bne.n	800a6a0 <_printf_common+0xac>
 800a698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a0:	3501      	adds	r5, #1
 800a6a2:	e7c6      	b.n	800a632 <_printf_common+0x3e>
 800a6a4:	18e1      	adds	r1, r4, r3
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	2030      	movs	r0, #48	; 0x30
 800a6aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6ae:	4422      	add	r2, r4
 800a6b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6b8:	3302      	adds	r3, #2
 800a6ba:	e7c7      	b.n	800a64c <_printf_common+0x58>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	4622      	mov	r2, r4
 800a6c0:	4649      	mov	r1, r9
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	47c0      	blx	r8
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	d0e6      	beq.n	800a698 <_printf_common+0xa4>
 800a6ca:	3601      	adds	r6, #1
 800a6cc:	e7d9      	b.n	800a682 <_printf_common+0x8e>
	...

0800a6d0 <_printf_i>:
 800a6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d4:	7e0f      	ldrb	r7, [r1, #24]
 800a6d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6d8:	2f78      	cmp	r7, #120	; 0x78
 800a6da:	4691      	mov	r9, r2
 800a6dc:	4680      	mov	r8, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	469a      	mov	sl, r3
 800a6e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6e6:	d807      	bhi.n	800a6f8 <_printf_i+0x28>
 800a6e8:	2f62      	cmp	r7, #98	; 0x62
 800a6ea:	d80a      	bhi.n	800a702 <_printf_i+0x32>
 800a6ec:	2f00      	cmp	r7, #0
 800a6ee:	f000 80d8 	beq.w	800a8a2 <_printf_i+0x1d2>
 800a6f2:	2f58      	cmp	r7, #88	; 0x58
 800a6f4:	f000 80a3 	beq.w	800a83e <_printf_i+0x16e>
 800a6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a700:	e03a      	b.n	800a778 <_printf_i+0xa8>
 800a702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a706:	2b15      	cmp	r3, #21
 800a708:	d8f6      	bhi.n	800a6f8 <_printf_i+0x28>
 800a70a:	a101      	add	r1, pc, #4	; (adr r1, 800a710 <_printf_i+0x40>)
 800a70c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a710:	0800a769 	.word	0x0800a769
 800a714:	0800a77d 	.word	0x0800a77d
 800a718:	0800a6f9 	.word	0x0800a6f9
 800a71c:	0800a6f9 	.word	0x0800a6f9
 800a720:	0800a6f9 	.word	0x0800a6f9
 800a724:	0800a6f9 	.word	0x0800a6f9
 800a728:	0800a77d 	.word	0x0800a77d
 800a72c:	0800a6f9 	.word	0x0800a6f9
 800a730:	0800a6f9 	.word	0x0800a6f9
 800a734:	0800a6f9 	.word	0x0800a6f9
 800a738:	0800a6f9 	.word	0x0800a6f9
 800a73c:	0800a889 	.word	0x0800a889
 800a740:	0800a7ad 	.word	0x0800a7ad
 800a744:	0800a86b 	.word	0x0800a86b
 800a748:	0800a6f9 	.word	0x0800a6f9
 800a74c:	0800a6f9 	.word	0x0800a6f9
 800a750:	0800a8ab 	.word	0x0800a8ab
 800a754:	0800a6f9 	.word	0x0800a6f9
 800a758:	0800a7ad 	.word	0x0800a7ad
 800a75c:	0800a6f9 	.word	0x0800a6f9
 800a760:	0800a6f9 	.word	0x0800a6f9
 800a764:	0800a873 	.word	0x0800a873
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	1d1a      	adds	r2, r3, #4
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	602a      	str	r2, [r5, #0]
 800a770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a778:	2301      	movs	r3, #1
 800a77a:	e0a3      	b.n	800a8c4 <_printf_i+0x1f4>
 800a77c:	6820      	ldr	r0, [r4, #0]
 800a77e:	6829      	ldr	r1, [r5, #0]
 800a780:	0606      	lsls	r6, r0, #24
 800a782:	f101 0304 	add.w	r3, r1, #4
 800a786:	d50a      	bpl.n	800a79e <_printf_i+0xce>
 800a788:	680e      	ldr	r6, [r1, #0]
 800a78a:	602b      	str	r3, [r5, #0]
 800a78c:	2e00      	cmp	r6, #0
 800a78e:	da03      	bge.n	800a798 <_printf_i+0xc8>
 800a790:	232d      	movs	r3, #45	; 0x2d
 800a792:	4276      	negs	r6, r6
 800a794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a798:	485e      	ldr	r0, [pc, #376]	; (800a914 <_printf_i+0x244>)
 800a79a:	230a      	movs	r3, #10
 800a79c:	e019      	b.n	800a7d2 <_printf_i+0x102>
 800a79e:	680e      	ldr	r6, [r1, #0]
 800a7a0:	602b      	str	r3, [r5, #0]
 800a7a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7a6:	bf18      	it	ne
 800a7a8:	b236      	sxthne	r6, r6
 800a7aa:	e7ef      	b.n	800a78c <_printf_i+0xbc>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	6820      	ldr	r0, [r4, #0]
 800a7b0:	1d19      	adds	r1, r3, #4
 800a7b2:	6029      	str	r1, [r5, #0]
 800a7b4:	0601      	lsls	r1, r0, #24
 800a7b6:	d501      	bpl.n	800a7bc <_printf_i+0xec>
 800a7b8:	681e      	ldr	r6, [r3, #0]
 800a7ba:	e002      	b.n	800a7c2 <_printf_i+0xf2>
 800a7bc:	0646      	lsls	r6, r0, #25
 800a7be:	d5fb      	bpl.n	800a7b8 <_printf_i+0xe8>
 800a7c0:	881e      	ldrh	r6, [r3, #0]
 800a7c2:	4854      	ldr	r0, [pc, #336]	; (800a914 <_printf_i+0x244>)
 800a7c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a7c6:	bf0c      	ite	eq
 800a7c8:	2308      	moveq	r3, #8
 800a7ca:	230a      	movne	r3, #10
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7d2:	6865      	ldr	r5, [r4, #4]
 800a7d4:	60a5      	str	r5, [r4, #8]
 800a7d6:	2d00      	cmp	r5, #0
 800a7d8:	bfa2      	ittt	ge
 800a7da:	6821      	ldrge	r1, [r4, #0]
 800a7dc:	f021 0104 	bicge.w	r1, r1, #4
 800a7e0:	6021      	strge	r1, [r4, #0]
 800a7e2:	b90e      	cbnz	r6, 800a7e8 <_printf_i+0x118>
 800a7e4:	2d00      	cmp	r5, #0
 800a7e6:	d04d      	beq.n	800a884 <_printf_i+0x1b4>
 800a7e8:	4615      	mov	r5, r2
 800a7ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7ee:	fb03 6711 	mls	r7, r3, r1, r6
 800a7f2:	5dc7      	ldrb	r7, [r0, r7]
 800a7f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7f8:	4637      	mov	r7, r6
 800a7fa:	42bb      	cmp	r3, r7
 800a7fc:	460e      	mov	r6, r1
 800a7fe:	d9f4      	bls.n	800a7ea <_printf_i+0x11a>
 800a800:	2b08      	cmp	r3, #8
 800a802:	d10b      	bne.n	800a81c <_printf_i+0x14c>
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	07de      	lsls	r6, r3, #31
 800a808:	d508      	bpl.n	800a81c <_printf_i+0x14c>
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	6861      	ldr	r1, [r4, #4]
 800a80e:	4299      	cmp	r1, r3
 800a810:	bfde      	ittt	le
 800a812:	2330      	movle	r3, #48	; 0x30
 800a814:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a818:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a81c:	1b52      	subs	r2, r2, r5
 800a81e:	6122      	str	r2, [r4, #16]
 800a820:	f8cd a000 	str.w	sl, [sp]
 800a824:	464b      	mov	r3, r9
 800a826:	aa03      	add	r2, sp, #12
 800a828:	4621      	mov	r1, r4
 800a82a:	4640      	mov	r0, r8
 800a82c:	f7ff fee2 	bl	800a5f4 <_printf_common>
 800a830:	3001      	adds	r0, #1
 800a832:	d14c      	bne.n	800a8ce <_printf_i+0x1fe>
 800a834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a838:	b004      	add	sp, #16
 800a83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83e:	4835      	ldr	r0, [pc, #212]	; (800a914 <_printf_i+0x244>)
 800a840:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a844:	6829      	ldr	r1, [r5, #0]
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	f851 6b04 	ldr.w	r6, [r1], #4
 800a84c:	6029      	str	r1, [r5, #0]
 800a84e:	061d      	lsls	r5, r3, #24
 800a850:	d514      	bpl.n	800a87c <_printf_i+0x1ac>
 800a852:	07df      	lsls	r7, r3, #31
 800a854:	bf44      	itt	mi
 800a856:	f043 0320 	orrmi.w	r3, r3, #32
 800a85a:	6023      	strmi	r3, [r4, #0]
 800a85c:	b91e      	cbnz	r6, 800a866 <_printf_i+0x196>
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	f023 0320 	bic.w	r3, r3, #32
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	2310      	movs	r3, #16
 800a868:	e7b0      	b.n	800a7cc <_printf_i+0xfc>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	f043 0320 	orr.w	r3, r3, #32
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	2378      	movs	r3, #120	; 0x78
 800a874:	4828      	ldr	r0, [pc, #160]	; (800a918 <_printf_i+0x248>)
 800a876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a87a:	e7e3      	b.n	800a844 <_printf_i+0x174>
 800a87c:	0659      	lsls	r1, r3, #25
 800a87e:	bf48      	it	mi
 800a880:	b2b6      	uxthmi	r6, r6
 800a882:	e7e6      	b.n	800a852 <_printf_i+0x182>
 800a884:	4615      	mov	r5, r2
 800a886:	e7bb      	b.n	800a800 <_printf_i+0x130>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	6826      	ldr	r6, [r4, #0]
 800a88c:	6961      	ldr	r1, [r4, #20]
 800a88e:	1d18      	adds	r0, r3, #4
 800a890:	6028      	str	r0, [r5, #0]
 800a892:	0635      	lsls	r5, r6, #24
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	d501      	bpl.n	800a89c <_printf_i+0x1cc>
 800a898:	6019      	str	r1, [r3, #0]
 800a89a:	e002      	b.n	800a8a2 <_printf_i+0x1d2>
 800a89c:	0670      	lsls	r0, r6, #25
 800a89e:	d5fb      	bpl.n	800a898 <_printf_i+0x1c8>
 800a8a0:	8019      	strh	r1, [r3, #0]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	4615      	mov	r5, r2
 800a8a8:	e7ba      	b.n	800a820 <_printf_i+0x150>
 800a8aa:	682b      	ldr	r3, [r5, #0]
 800a8ac:	1d1a      	adds	r2, r3, #4
 800a8ae:	602a      	str	r2, [r5, #0]
 800a8b0:	681d      	ldr	r5, [r3, #0]
 800a8b2:	6862      	ldr	r2, [r4, #4]
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f7f5 fcaa 	bl	8000210 <memchr>
 800a8bc:	b108      	cbz	r0, 800a8c2 <_printf_i+0x1f2>
 800a8be:	1b40      	subs	r0, r0, r5
 800a8c0:	6060      	str	r0, [r4, #4]
 800a8c2:	6863      	ldr	r3, [r4, #4]
 800a8c4:	6123      	str	r3, [r4, #16]
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8cc:	e7a8      	b.n	800a820 <_printf_i+0x150>
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	462a      	mov	r2, r5
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	47d0      	blx	sl
 800a8d8:	3001      	adds	r0, #1
 800a8da:	d0ab      	beq.n	800a834 <_printf_i+0x164>
 800a8dc:	6823      	ldr	r3, [r4, #0]
 800a8de:	079b      	lsls	r3, r3, #30
 800a8e0:	d413      	bmi.n	800a90a <_printf_i+0x23a>
 800a8e2:	68e0      	ldr	r0, [r4, #12]
 800a8e4:	9b03      	ldr	r3, [sp, #12]
 800a8e6:	4298      	cmp	r0, r3
 800a8e8:	bfb8      	it	lt
 800a8ea:	4618      	movlt	r0, r3
 800a8ec:	e7a4      	b.n	800a838 <_printf_i+0x168>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	4632      	mov	r2, r6
 800a8f2:	4649      	mov	r1, r9
 800a8f4:	4640      	mov	r0, r8
 800a8f6:	47d0      	blx	sl
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	d09b      	beq.n	800a834 <_printf_i+0x164>
 800a8fc:	3501      	adds	r5, #1
 800a8fe:	68e3      	ldr	r3, [r4, #12]
 800a900:	9903      	ldr	r1, [sp, #12]
 800a902:	1a5b      	subs	r3, r3, r1
 800a904:	42ab      	cmp	r3, r5
 800a906:	dcf2      	bgt.n	800a8ee <_printf_i+0x21e>
 800a908:	e7eb      	b.n	800a8e2 <_printf_i+0x212>
 800a90a:	2500      	movs	r5, #0
 800a90c:	f104 0619 	add.w	r6, r4, #25
 800a910:	e7f5      	b.n	800a8fe <_printf_i+0x22e>
 800a912:	bf00      	nop
 800a914:	0800db66 	.word	0x0800db66
 800a918:	0800db77 	.word	0x0800db77

0800a91c <iprintf>:
 800a91c:	b40f      	push	{r0, r1, r2, r3}
 800a91e:	4b0a      	ldr	r3, [pc, #40]	; (800a948 <iprintf+0x2c>)
 800a920:	b513      	push	{r0, r1, r4, lr}
 800a922:	681c      	ldr	r4, [r3, #0]
 800a924:	b124      	cbz	r4, 800a930 <iprintf+0x14>
 800a926:	69a3      	ldr	r3, [r4, #24]
 800a928:	b913      	cbnz	r3, 800a930 <iprintf+0x14>
 800a92a:	4620      	mov	r0, r4
 800a92c:	f001 f91c 	bl	800bb68 <__sinit>
 800a930:	ab05      	add	r3, sp, #20
 800a932:	9a04      	ldr	r2, [sp, #16]
 800a934:	68a1      	ldr	r1, [r4, #8]
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	4620      	mov	r0, r4
 800a93a:	f001 ff59 	bl	800c7f0 <_vfiprintf_r>
 800a93e:	b002      	add	sp, #8
 800a940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a944:	b004      	add	sp, #16
 800a946:	4770      	bx	lr
 800a948:	20000024 	.word	0x20000024

0800a94c <_puts_r>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	460e      	mov	r6, r1
 800a950:	4605      	mov	r5, r0
 800a952:	b118      	cbz	r0, 800a95c <_puts_r+0x10>
 800a954:	6983      	ldr	r3, [r0, #24]
 800a956:	b90b      	cbnz	r3, 800a95c <_puts_r+0x10>
 800a958:	f001 f906 	bl	800bb68 <__sinit>
 800a95c:	69ab      	ldr	r3, [r5, #24]
 800a95e:	68ac      	ldr	r4, [r5, #8]
 800a960:	b913      	cbnz	r3, 800a968 <_puts_r+0x1c>
 800a962:	4628      	mov	r0, r5
 800a964:	f001 f900 	bl	800bb68 <__sinit>
 800a968:	4b2c      	ldr	r3, [pc, #176]	; (800aa1c <_puts_r+0xd0>)
 800a96a:	429c      	cmp	r4, r3
 800a96c:	d120      	bne.n	800a9b0 <_puts_r+0x64>
 800a96e:	686c      	ldr	r4, [r5, #4]
 800a970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a972:	07db      	lsls	r3, r3, #31
 800a974:	d405      	bmi.n	800a982 <_puts_r+0x36>
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	0598      	lsls	r0, r3, #22
 800a97a:	d402      	bmi.n	800a982 <_puts_r+0x36>
 800a97c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a97e:	f001 f996 	bl	800bcae <__retarget_lock_acquire_recursive>
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	0719      	lsls	r1, r3, #28
 800a986:	d51d      	bpl.n	800a9c4 <_puts_r+0x78>
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	b1db      	cbz	r3, 800a9c4 <_puts_r+0x78>
 800a98c:	3e01      	subs	r6, #1
 800a98e:	68a3      	ldr	r3, [r4, #8]
 800a990:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a994:	3b01      	subs	r3, #1
 800a996:	60a3      	str	r3, [r4, #8]
 800a998:	bb39      	cbnz	r1, 800a9ea <_puts_r+0x9e>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	da38      	bge.n	800aa10 <_puts_r+0xc4>
 800a99e:	4622      	mov	r2, r4
 800a9a0:	210a      	movs	r1, #10
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f000 f88c 	bl	800aac0 <__swbuf_r>
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	d011      	beq.n	800a9d0 <_puts_r+0x84>
 800a9ac:	250a      	movs	r5, #10
 800a9ae:	e011      	b.n	800a9d4 <_puts_r+0x88>
 800a9b0:	4b1b      	ldr	r3, [pc, #108]	; (800aa20 <_puts_r+0xd4>)
 800a9b2:	429c      	cmp	r4, r3
 800a9b4:	d101      	bne.n	800a9ba <_puts_r+0x6e>
 800a9b6:	68ac      	ldr	r4, [r5, #8]
 800a9b8:	e7da      	b.n	800a970 <_puts_r+0x24>
 800a9ba:	4b1a      	ldr	r3, [pc, #104]	; (800aa24 <_puts_r+0xd8>)
 800a9bc:	429c      	cmp	r4, r3
 800a9be:	bf08      	it	eq
 800a9c0:	68ec      	ldreq	r4, [r5, #12]
 800a9c2:	e7d5      	b.n	800a970 <_puts_r+0x24>
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f000 f8cc 	bl	800ab64 <__swsetup_r>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d0dd      	beq.n	800a98c <_puts_r+0x40>
 800a9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a9d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9d6:	07da      	lsls	r2, r3, #31
 800a9d8:	d405      	bmi.n	800a9e6 <_puts_r+0x9a>
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	059b      	lsls	r3, r3, #22
 800a9de:	d402      	bmi.n	800a9e6 <_puts_r+0x9a>
 800a9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9e2:	f001 f965 	bl	800bcb0 <__retarget_lock_release_recursive>
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	da04      	bge.n	800a9f8 <_puts_r+0xac>
 800a9ee:	69a2      	ldr	r2, [r4, #24]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	dc06      	bgt.n	800aa02 <_puts_r+0xb6>
 800a9f4:	290a      	cmp	r1, #10
 800a9f6:	d004      	beq.n	800aa02 <_puts_r+0xb6>
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	6022      	str	r2, [r4, #0]
 800a9fe:	7019      	strb	r1, [r3, #0]
 800aa00:	e7c5      	b.n	800a98e <_puts_r+0x42>
 800aa02:	4622      	mov	r2, r4
 800aa04:	4628      	mov	r0, r5
 800aa06:	f000 f85b 	bl	800aac0 <__swbuf_r>
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d1bf      	bne.n	800a98e <_puts_r+0x42>
 800aa0e:	e7df      	b.n	800a9d0 <_puts_r+0x84>
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	250a      	movs	r5, #10
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	6022      	str	r2, [r4, #0]
 800aa18:	701d      	strb	r5, [r3, #0]
 800aa1a:	e7db      	b.n	800a9d4 <_puts_r+0x88>
 800aa1c:	0800dc38 	.word	0x0800dc38
 800aa20:	0800dc58 	.word	0x0800dc58
 800aa24:	0800dc18 	.word	0x0800dc18

0800aa28 <puts>:
 800aa28:	4b02      	ldr	r3, [pc, #8]	; (800aa34 <puts+0xc>)
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	f7ff bf8d 	b.w	800a94c <_puts_r>
 800aa32:	bf00      	nop
 800aa34:	20000024 	.word	0x20000024

0800aa38 <_sbrk_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4d06      	ldr	r5, [pc, #24]	; (800aa54 <_sbrk_r+0x1c>)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	4604      	mov	r4, r0
 800aa40:	4608      	mov	r0, r1
 800aa42:	602b      	str	r3, [r5, #0]
 800aa44:	f7f8 fa94 	bl	8002f70 <_sbrk>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_sbrk_r+0x1a>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_sbrk_r+0x1a>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	20002528 	.word	0x20002528

0800aa58 <sniprintf>:
 800aa58:	b40c      	push	{r2, r3}
 800aa5a:	b530      	push	{r4, r5, lr}
 800aa5c:	4b17      	ldr	r3, [pc, #92]	; (800aabc <sniprintf+0x64>)
 800aa5e:	1e0c      	subs	r4, r1, #0
 800aa60:	681d      	ldr	r5, [r3, #0]
 800aa62:	b09d      	sub	sp, #116	; 0x74
 800aa64:	da08      	bge.n	800aa78 <sniprintf+0x20>
 800aa66:	238b      	movs	r3, #139	; 0x8b
 800aa68:	602b      	str	r3, [r5, #0]
 800aa6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa6e:	b01d      	add	sp, #116	; 0x74
 800aa70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa74:	b002      	add	sp, #8
 800aa76:	4770      	bx	lr
 800aa78:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aa7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa80:	bf14      	ite	ne
 800aa82:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800aa86:	4623      	moveq	r3, r4
 800aa88:	9304      	str	r3, [sp, #16]
 800aa8a:	9307      	str	r3, [sp, #28]
 800aa8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa90:	9002      	str	r0, [sp, #8]
 800aa92:	9006      	str	r0, [sp, #24]
 800aa94:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa9a:	ab21      	add	r3, sp, #132	; 0x84
 800aa9c:	a902      	add	r1, sp, #8
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	9301      	str	r3, [sp, #4]
 800aaa2:	f001 fd7b 	bl	800c59c <_svfiprintf_r>
 800aaa6:	1c43      	adds	r3, r0, #1
 800aaa8:	bfbc      	itt	lt
 800aaaa:	238b      	movlt	r3, #139	; 0x8b
 800aaac:	602b      	strlt	r3, [r5, #0]
 800aaae:	2c00      	cmp	r4, #0
 800aab0:	d0dd      	beq.n	800aa6e <sniprintf+0x16>
 800aab2:	9b02      	ldr	r3, [sp, #8]
 800aab4:	2200      	movs	r2, #0
 800aab6:	701a      	strb	r2, [r3, #0]
 800aab8:	e7d9      	b.n	800aa6e <sniprintf+0x16>
 800aaba:	bf00      	nop
 800aabc:	20000024 	.word	0x20000024

0800aac0 <__swbuf_r>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	460e      	mov	r6, r1
 800aac4:	4614      	mov	r4, r2
 800aac6:	4605      	mov	r5, r0
 800aac8:	b118      	cbz	r0, 800aad2 <__swbuf_r+0x12>
 800aaca:	6983      	ldr	r3, [r0, #24]
 800aacc:	b90b      	cbnz	r3, 800aad2 <__swbuf_r+0x12>
 800aace:	f001 f84b 	bl	800bb68 <__sinit>
 800aad2:	4b21      	ldr	r3, [pc, #132]	; (800ab58 <__swbuf_r+0x98>)
 800aad4:	429c      	cmp	r4, r3
 800aad6:	d12b      	bne.n	800ab30 <__swbuf_r+0x70>
 800aad8:	686c      	ldr	r4, [r5, #4]
 800aada:	69a3      	ldr	r3, [r4, #24]
 800aadc:	60a3      	str	r3, [r4, #8]
 800aade:	89a3      	ldrh	r3, [r4, #12]
 800aae0:	071a      	lsls	r2, r3, #28
 800aae2:	d52f      	bpl.n	800ab44 <__swbuf_r+0x84>
 800aae4:	6923      	ldr	r3, [r4, #16]
 800aae6:	b36b      	cbz	r3, 800ab44 <__swbuf_r+0x84>
 800aae8:	6923      	ldr	r3, [r4, #16]
 800aaea:	6820      	ldr	r0, [r4, #0]
 800aaec:	1ac0      	subs	r0, r0, r3
 800aaee:	6963      	ldr	r3, [r4, #20]
 800aaf0:	b2f6      	uxtb	r6, r6
 800aaf2:	4283      	cmp	r3, r0
 800aaf4:	4637      	mov	r7, r6
 800aaf6:	dc04      	bgt.n	800ab02 <__swbuf_r+0x42>
 800aaf8:	4621      	mov	r1, r4
 800aafa:	4628      	mov	r0, r5
 800aafc:	f000 ffa0 	bl	800ba40 <_fflush_r>
 800ab00:	bb30      	cbnz	r0, 800ab50 <__swbuf_r+0x90>
 800ab02:	68a3      	ldr	r3, [r4, #8]
 800ab04:	3b01      	subs	r3, #1
 800ab06:	60a3      	str	r3, [r4, #8]
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	1c5a      	adds	r2, r3, #1
 800ab0c:	6022      	str	r2, [r4, #0]
 800ab0e:	701e      	strb	r6, [r3, #0]
 800ab10:	6963      	ldr	r3, [r4, #20]
 800ab12:	3001      	adds	r0, #1
 800ab14:	4283      	cmp	r3, r0
 800ab16:	d004      	beq.n	800ab22 <__swbuf_r+0x62>
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	07db      	lsls	r3, r3, #31
 800ab1c:	d506      	bpl.n	800ab2c <__swbuf_r+0x6c>
 800ab1e:	2e0a      	cmp	r6, #10
 800ab20:	d104      	bne.n	800ab2c <__swbuf_r+0x6c>
 800ab22:	4621      	mov	r1, r4
 800ab24:	4628      	mov	r0, r5
 800ab26:	f000 ff8b 	bl	800ba40 <_fflush_r>
 800ab2a:	b988      	cbnz	r0, 800ab50 <__swbuf_r+0x90>
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab30:	4b0a      	ldr	r3, [pc, #40]	; (800ab5c <__swbuf_r+0x9c>)
 800ab32:	429c      	cmp	r4, r3
 800ab34:	d101      	bne.n	800ab3a <__swbuf_r+0x7a>
 800ab36:	68ac      	ldr	r4, [r5, #8]
 800ab38:	e7cf      	b.n	800aada <__swbuf_r+0x1a>
 800ab3a:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <__swbuf_r+0xa0>)
 800ab3c:	429c      	cmp	r4, r3
 800ab3e:	bf08      	it	eq
 800ab40:	68ec      	ldreq	r4, [r5, #12]
 800ab42:	e7ca      	b.n	800aada <__swbuf_r+0x1a>
 800ab44:	4621      	mov	r1, r4
 800ab46:	4628      	mov	r0, r5
 800ab48:	f000 f80c 	bl	800ab64 <__swsetup_r>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d0cb      	beq.n	800aae8 <__swbuf_r+0x28>
 800ab50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ab54:	e7ea      	b.n	800ab2c <__swbuf_r+0x6c>
 800ab56:	bf00      	nop
 800ab58:	0800dc38 	.word	0x0800dc38
 800ab5c:	0800dc58 	.word	0x0800dc58
 800ab60:	0800dc18 	.word	0x0800dc18

0800ab64 <__swsetup_r>:
 800ab64:	4b32      	ldr	r3, [pc, #200]	; (800ac30 <__swsetup_r+0xcc>)
 800ab66:	b570      	push	{r4, r5, r6, lr}
 800ab68:	681d      	ldr	r5, [r3, #0]
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	b125      	cbz	r5, 800ab7a <__swsetup_r+0x16>
 800ab70:	69ab      	ldr	r3, [r5, #24]
 800ab72:	b913      	cbnz	r3, 800ab7a <__swsetup_r+0x16>
 800ab74:	4628      	mov	r0, r5
 800ab76:	f000 fff7 	bl	800bb68 <__sinit>
 800ab7a:	4b2e      	ldr	r3, [pc, #184]	; (800ac34 <__swsetup_r+0xd0>)
 800ab7c:	429c      	cmp	r4, r3
 800ab7e:	d10f      	bne.n	800aba0 <__swsetup_r+0x3c>
 800ab80:	686c      	ldr	r4, [r5, #4]
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab88:	0719      	lsls	r1, r3, #28
 800ab8a:	d42c      	bmi.n	800abe6 <__swsetup_r+0x82>
 800ab8c:	06dd      	lsls	r5, r3, #27
 800ab8e:	d411      	bmi.n	800abb4 <__swsetup_r+0x50>
 800ab90:	2309      	movs	r3, #9
 800ab92:	6033      	str	r3, [r6, #0]
 800ab94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab98:	81a3      	strh	r3, [r4, #12]
 800ab9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab9e:	e03e      	b.n	800ac1e <__swsetup_r+0xba>
 800aba0:	4b25      	ldr	r3, [pc, #148]	; (800ac38 <__swsetup_r+0xd4>)
 800aba2:	429c      	cmp	r4, r3
 800aba4:	d101      	bne.n	800abaa <__swsetup_r+0x46>
 800aba6:	68ac      	ldr	r4, [r5, #8]
 800aba8:	e7eb      	b.n	800ab82 <__swsetup_r+0x1e>
 800abaa:	4b24      	ldr	r3, [pc, #144]	; (800ac3c <__swsetup_r+0xd8>)
 800abac:	429c      	cmp	r4, r3
 800abae:	bf08      	it	eq
 800abb0:	68ec      	ldreq	r4, [r5, #12]
 800abb2:	e7e6      	b.n	800ab82 <__swsetup_r+0x1e>
 800abb4:	0758      	lsls	r0, r3, #29
 800abb6:	d512      	bpl.n	800abde <__swsetup_r+0x7a>
 800abb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abba:	b141      	cbz	r1, 800abce <__swsetup_r+0x6a>
 800abbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abc0:	4299      	cmp	r1, r3
 800abc2:	d002      	beq.n	800abca <__swsetup_r+0x66>
 800abc4:	4630      	mov	r0, r6
 800abc6:	f7ff f95f 	bl	8009e88 <_free_r>
 800abca:	2300      	movs	r3, #0
 800abcc:	6363      	str	r3, [r4, #52]	; 0x34
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abd4:	81a3      	strh	r3, [r4, #12]
 800abd6:	2300      	movs	r3, #0
 800abd8:	6063      	str	r3, [r4, #4]
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	6023      	str	r3, [r4, #0]
 800abde:	89a3      	ldrh	r3, [r4, #12]
 800abe0:	f043 0308 	orr.w	r3, r3, #8
 800abe4:	81a3      	strh	r3, [r4, #12]
 800abe6:	6923      	ldr	r3, [r4, #16]
 800abe8:	b94b      	cbnz	r3, 800abfe <__swsetup_r+0x9a>
 800abea:	89a3      	ldrh	r3, [r4, #12]
 800abec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abf4:	d003      	beq.n	800abfe <__swsetup_r+0x9a>
 800abf6:	4621      	mov	r1, r4
 800abf8:	4630      	mov	r0, r6
 800abfa:	f001 f87f 	bl	800bcfc <__smakebuf_r>
 800abfe:	89a0      	ldrh	r0, [r4, #12]
 800ac00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac04:	f010 0301 	ands.w	r3, r0, #1
 800ac08:	d00a      	beq.n	800ac20 <__swsetup_r+0xbc>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60a3      	str	r3, [r4, #8]
 800ac0e:	6963      	ldr	r3, [r4, #20]
 800ac10:	425b      	negs	r3, r3
 800ac12:	61a3      	str	r3, [r4, #24]
 800ac14:	6923      	ldr	r3, [r4, #16]
 800ac16:	b943      	cbnz	r3, 800ac2a <__swsetup_r+0xc6>
 800ac18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac1c:	d1ba      	bne.n	800ab94 <__swsetup_r+0x30>
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}
 800ac20:	0781      	lsls	r1, r0, #30
 800ac22:	bf58      	it	pl
 800ac24:	6963      	ldrpl	r3, [r4, #20]
 800ac26:	60a3      	str	r3, [r4, #8]
 800ac28:	e7f4      	b.n	800ac14 <__swsetup_r+0xb0>
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	e7f7      	b.n	800ac1e <__swsetup_r+0xba>
 800ac2e:	bf00      	nop
 800ac30:	20000024 	.word	0x20000024
 800ac34:	0800dc38 	.word	0x0800dc38
 800ac38:	0800dc58 	.word	0x0800dc58
 800ac3c:	0800dc18 	.word	0x0800dc18

0800ac40 <quorem>:
 800ac40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac44:	6903      	ldr	r3, [r0, #16]
 800ac46:	690c      	ldr	r4, [r1, #16]
 800ac48:	42a3      	cmp	r3, r4
 800ac4a:	4607      	mov	r7, r0
 800ac4c:	f2c0 8081 	blt.w	800ad52 <quorem+0x112>
 800ac50:	3c01      	subs	r4, #1
 800ac52:	f101 0814 	add.w	r8, r1, #20
 800ac56:	f100 0514 	add.w	r5, r0, #20
 800ac5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac74:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac78:	d331      	bcc.n	800acde <quorem+0x9e>
 800ac7a:	f04f 0e00 	mov.w	lr, #0
 800ac7e:	4640      	mov	r0, r8
 800ac80:	46ac      	mov	ip, r5
 800ac82:	46f2      	mov	sl, lr
 800ac84:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac88:	b293      	uxth	r3, r2
 800ac8a:	fb06 e303 	mla	r3, r6, r3, lr
 800ac8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	ebaa 0303 	sub.w	r3, sl, r3
 800ac98:	f8dc a000 	ldr.w	sl, [ip]
 800ac9c:	0c12      	lsrs	r2, r2, #16
 800ac9e:	fa13 f38a 	uxtah	r3, r3, sl
 800aca2:	fb06 e202 	mla	r2, r6, r2, lr
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	9b00      	ldr	r3, [sp, #0]
 800acaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800acae:	b292      	uxth	r2, r2
 800acb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800acb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800acb8:	f8bd 3000 	ldrh.w	r3, [sp]
 800acbc:	4581      	cmp	r9, r0
 800acbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acc2:	f84c 3b04 	str.w	r3, [ip], #4
 800acc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800acca:	d2db      	bcs.n	800ac84 <quorem+0x44>
 800accc:	f855 300b 	ldr.w	r3, [r5, fp]
 800acd0:	b92b      	cbnz	r3, 800acde <quorem+0x9e>
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	3b04      	subs	r3, #4
 800acd6:	429d      	cmp	r5, r3
 800acd8:	461a      	mov	r2, r3
 800acda:	d32e      	bcc.n	800ad3a <quorem+0xfa>
 800acdc:	613c      	str	r4, [r7, #16]
 800acde:	4638      	mov	r0, r7
 800ace0:	f001 fae8 	bl	800c2b4 <__mcmp>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	db24      	blt.n	800ad32 <quorem+0xf2>
 800ace8:	3601      	adds	r6, #1
 800acea:	4628      	mov	r0, r5
 800acec:	f04f 0c00 	mov.w	ip, #0
 800acf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800acf4:	f8d0 e000 	ldr.w	lr, [r0]
 800acf8:	b293      	uxth	r3, r2
 800acfa:	ebac 0303 	sub.w	r3, ip, r3
 800acfe:	0c12      	lsrs	r2, r2, #16
 800ad00:	fa13 f38e 	uxtah	r3, r3, lr
 800ad04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ad08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad12:	45c1      	cmp	r9, r8
 800ad14:	f840 3b04 	str.w	r3, [r0], #4
 800ad18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ad1c:	d2e8      	bcs.n	800acf0 <quorem+0xb0>
 800ad1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad26:	b922      	cbnz	r2, 800ad32 <quorem+0xf2>
 800ad28:	3b04      	subs	r3, #4
 800ad2a:	429d      	cmp	r5, r3
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	d30a      	bcc.n	800ad46 <quorem+0x106>
 800ad30:	613c      	str	r4, [r7, #16]
 800ad32:	4630      	mov	r0, r6
 800ad34:	b003      	add	sp, #12
 800ad36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3a:	6812      	ldr	r2, [r2, #0]
 800ad3c:	3b04      	subs	r3, #4
 800ad3e:	2a00      	cmp	r2, #0
 800ad40:	d1cc      	bne.n	800acdc <quorem+0x9c>
 800ad42:	3c01      	subs	r4, #1
 800ad44:	e7c7      	b.n	800acd6 <quorem+0x96>
 800ad46:	6812      	ldr	r2, [r2, #0]
 800ad48:	3b04      	subs	r3, #4
 800ad4a:	2a00      	cmp	r2, #0
 800ad4c:	d1f0      	bne.n	800ad30 <quorem+0xf0>
 800ad4e:	3c01      	subs	r4, #1
 800ad50:	e7eb      	b.n	800ad2a <quorem+0xea>
 800ad52:	2000      	movs	r0, #0
 800ad54:	e7ee      	b.n	800ad34 <quorem+0xf4>
	...

0800ad58 <_dtoa_r>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	ed2d 8b04 	vpush	{d8-d9}
 800ad60:	ec57 6b10 	vmov	r6, r7, d0
 800ad64:	b093      	sub	sp, #76	; 0x4c
 800ad66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ad6c:	9106      	str	r1, [sp, #24]
 800ad6e:	ee10 aa10 	vmov	sl, s0
 800ad72:	4604      	mov	r4, r0
 800ad74:	9209      	str	r2, [sp, #36]	; 0x24
 800ad76:	930c      	str	r3, [sp, #48]	; 0x30
 800ad78:	46bb      	mov	fp, r7
 800ad7a:	b975      	cbnz	r5, 800ad9a <_dtoa_r+0x42>
 800ad7c:	2010      	movs	r0, #16
 800ad7e:	f7ff f86b 	bl	8009e58 <malloc>
 800ad82:	4602      	mov	r2, r0
 800ad84:	6260      	str	r0, [r4, #36]	; 0x24
 800ad86:	b920      	cbnz	r0, 800ad92 <_dtoa_r+0x3a>
 800ad88:	4ba7      	ldr	r3, [pc, #668]	; (800b028 <_dtoa_r+0x2d0>)
 800ad8a:	21ea      	movs	r1, #234	; 0xea
 800ad8c:	48a7      	ldr	r0, [pc, #668]	; (800b02c <_dtoa_r+0x2d4>)
 800ad8e:	f001 feb5 	bl	800cafc <__assert_func>
 800ad92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad96:	6005      	str	r5, [r0, #0]
 800ad98:	60c5      	str	r5, [r0, #12]
 800ad9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad9c:	6819      	ldr	r1, [r3, #0]
 800ad9e:	b151      	cbz	r1, 800adb6 <_dtoa_r+0x5e>
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	604a      	str	r2, [r1, #4]
 800ada4:	2301      	movs	r3, #1
 800ada6:	4093      	lsls	r3, r2
 800ada8:	608b      	str	r3, [r1, #8]
 800adaa:	4620      	mov	r0, r4
 800adac:	f001 f840 	bl	800be30 <_Bfree>
 800adb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	1e3b      	subs	r3, r7, #0
 800adb8:	bfaa      	itet	ge
 800adba:	2300      	movge	r3, #0
 800adbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800adc0:	f8c8 3000 	strge.w	r3, [r8]
 800adc4:	4b9a      	ldr	r3, [pc, #616]	; (800b030 <_dtoa_r+0x2d8>)
 800adc6:	bfbc      	itt	lt
 800adc8:	2201      	movlt	r2, #1
 800adca:	f8c8 2000 	strlt.w	r2, [r8]
 800adce:	ea33 030b 	bics.w	r3, r3, fp
 800add2:	d11b      	bne.n	800ae0c <_dtoa_r+0xb4>
 800add4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800add6:	f242 730f 	movw	r3, #9999	; 0x270f
 800adda:	6013      	str	r3, [r2, #0]
 800addc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ade0:	4333      	orrs	r3, r6
 800ade2:	f000 8592 	beq.w	800b90a <_dtoa_r+0xbb2>
 800ade6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ade8:	b963      	cbnz	r3, 800ae04 <_dtoa_r+0xac>
 800adea:	4b92      	ldr	r3, [pc, #584]	; (800b034 <_dtoa_r+0x2dc>)
 800adec:	e022      	b.n	800ae34 <_dtoa_r+0xdc>
 800adee:	4b92      	ldr	r3, [pc, #584]	; (800b038 <_dtoa_r+0x2e0>)
 800adf0:	9301      	str	r3, [sp, #4]
 800adf2:	3308      	adds	r3, #8
 800adf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	9801      	ldr	r0, [sp, #4]
 800adfa:	b013      	add	sp, #76	; 0x4c
 800adfc:	ecbd 8b04 	vpop	{d8-d9}
 800ae00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae04:	4b8b      	ldr	r3, [pc, #556]	; (800b034 <_dtoa_r+0x2dc>)
 800ae06:	9301      	str	r3, [sp, #4]
 800ae08:	3303      	adds	r3, #3
 800ae0a:	e7f3      	b.n	800adf4 <_dtoa_r+0x9c>
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2300      	movs	r3, #0
 800ae10:	4650      	mov	r0, sl
 800ae12:	4659      	mov	r1, fp
 800ae14:	f7f5 fe70 	bl	8000af8 <__aeabi_dcmpeq>
 800ae18:	ec4b ab19 	vmov	d9, sl, fp
 800ae1c:	4680      	mov	r8, r0
 800ae1e:	b158      	cbz	r0, 800ae38 <_dtoa_r+0xe0>
 800ae20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae22:	2301      	movs	r3, #1
 800ae24:	6013      	str	r3, [r2, #0]
 800ae26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 856b 	beq.w	800b904 <_dtoa_r+0xbac>
 800ae2e:	4883      	ldr	r0, [pc, #524]	; (800b03c <_dtoa_r+0x2e4>)
 800ae30:	6018      	str	r0, [r3, #0]
 800ae32:	1e43      	subs	r3, r0, #1
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	e7df      	b.n	800adf8 <_dtoa_r+0xa0>
 800ae38:	ec4b ab10 	vmov	d0, sl, fp
 800ae3c:	aa10      	add	r2, sp, #64	; 0x40
 800ae3e:	a911      	add	r1, sp, #68	; 0x44
 800ae40:	4620      	mov	r0, r4
 800ae42:	f001 fadd 	bl	800c400 <__d2b>
 800ae46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ae4a:	ee08 0a10 	vmov	s16, r0
 800ae4e:	2d00      	cmp	r5, #0
 800ae50:	f000 8084 	beq.w	800af5c <_dtoa_r+0x204>
 800ae54:	ee19 3a90 	vmov	r3, s19
 800ae58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ae60:	4656      	mov	r6, sl
 800ae62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ae66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ae6e:	4b74      	ldr	r3, [pc, #464]	; (800b040 <_dtoa_r+0x2e8>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	4630      	mov	r0, r6
 800ae74:	4639      	mov	r1, r7
 800ae76:	f7f5 fa1f 	bl	80002b8 <__aeabi_dsub>
 800ae7a:	a365      	add	r3, pc, #404	; (adr r3, 800b010 <_dtoa_r+0x2b8>)
 800ae7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae80:	f7f5 fbd2 	bl	8000628 <__aeabi_dmul>
 800ae84:	a364      	add	r3, pc, #400	; (adr r3, 800b018 <_dtoa_r+0x2c0>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f7f5 fa17 	bl	80002bc <__adddf3>
 800ae8e:	4606      	mov	r6, r0
 800ae90:	4628      	mov	r0, r5
 800ae92:	460f      	mov	r7, r1
 800ae94:	f7f5 fb5e 	bl	8000554 <__aeabi_i2d>
 800ae98:	a361      	add	r3, pc, #388	; (adr r3, 800b020 <_dtoa_r+0x2c8>)
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	f7f5 fbc3 	bl	8000628 <__aeabi_dmul>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4630      	mov	r0, r6
 800aea8:	4639      	mov	r1, r7
 800aeaa:	f7f5 fa07 	bl	80002bc <__adddf3>
 800aeae:	4606      	mov	r6, r0
 800aeb0:	460f      	mov	r7, r1
 800aeb2:	f7f5 fe69 	bl	8000b88 <__aeabi_d2iz>
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	9000      	str	r0, [sp, #0]
 800aeba:	2300      	movs	r3, #0
 800aebc:	4630      	mov	r0, r6
 800aebe:	4639      	mov	r1, r7
 800aec0:	f7f5 fe24 	bl	8000b0c <__aeabi_dcmplt>
 800aec4:	b150      	cbz	r0, 800aedc <_dtoa_r+0x184>
 800aec6:	9800      	ldr	r0, [sp, #0]
 800aec8:	f7f5 fb44 	bl	8000554 <__aeabi_i2d>
 800aecc:	4632      	mov	r2, r6
 800aece:	463b      	mov	r3, r7
 800aed0:	f7f5 fe12 	bl	8000af8 <__aeabi_dcmpeq>
 800aed4:	b910      	cbnz	r0, 800aedc <_dtoa_r+0x184>
 800aed6:	9b00      	ldr	r3, [sp, #0]
 800aed8:	3b01      	subs	r3, #1
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	9b00      	ldr	r3, [sp, #0]
 800aede:	2b16      	cmp	r3, #22
 800aee0:	d85a      	bhi.n	800af98 <_dtoa_r+0x240>
 800aee2:	9a00      	ldr	r2, [sp, #0]
 800aee4:	4b57      	ldr	r3, [pc, #348]	; (800b044 <_dtoa_r+0x2ec>)
 800aee6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeee:	ec51 0b19 	vmov	r0, r1, d9
 800aef2:	f7f5 fe0b 	bl	8000b0c <__aeabi_dcmplt>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d050      	beq.n	800af9c <_dtoa_r+0x244>
 800aefa:	9b00      	ldr	r3, [sp, #0]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	2300      	movs	r3, #0
 800af02:	930b      	str	r3, [sp, #44]	; 0x2c
 800af04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af06:	1b5d      	subs	r5, r3, r5
 800af08:	1e6b      	subs	r3, r5, #1
 800af0a:	9305      	str	r3, [sp, #20]
 800af0c:	bf45      	ittet	mi
 800af0e:	f1c5 0301 	rsbmi	r3, r5, #1
 800af12:	9304      	strmi	r3, [sp, #16]
 800af14:	2300      	movpl	r3, #0
 800af16:	2300      	movmi	r3, #0
 800af18:	bf4c      	ite	mi
 800af1a:	9305      	strmi	r3, [sp, #20]
 800af1c:	9304      	strpl	r3, [sp, #16]
 800af1e:	9b00      	ldr	r3, [sp, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	db3d      	blt.n	800afa0 <_dtoa_r+0x248>
 800af24:	9b05      	ldr	r3, [sp, #20]
 800af26:	9a00      	ldr	r2, [sp, #0]
 800af28:	920a      	str	r2, [sp, #40]	; 0x28
 800af2a:	4413      	add	r3, r2
 800af2c:	9305      	str	r3, [sp, #20]
 800af2e:	2300      	movs	r3, #0
 800af30:	9307      	str	r3, [sp, #28]
 800af32:	9b06      	ldr	r3, [sp, #24]
 800af34:	2b09      	cmp	r3, #9
 800af36:	f200 8089 	bhi.w	800b04c <_dtoa_r+0x2f4>
 800af3a:	2b05      	cmp	r3, #5
 800af3c:	bfc4      	itt	gt
 800af3e:	3b04      	subgt	r3, #4
 800af40:	9306      	strgt	r3, [sp, #24]
 800af42:	9b06      	ldr	r3, [sp, #24]
 800af44:	f1a3 0302 	sub.w	r3, r3, #2
 800af48:	bfcc      	ite	gt
 800af4a:	2500      	movgt	r5, #0
 800af4c:	2501      	movle	r5, #1
 800af4e:	2b03      	cmp	r3, #3
 800af50:	f200 8087 	bhi.w	800b062 <_dtoa_r+0x30a>
 800af54:	e8df f003 	tbb	[pc, r3]
 800af58:	59383a2d 	.word	0x59383a2d
 800af5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800af60:	441d      	add	r5, r3
 800af62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800af66:	2b20      	cmp	r3, #32
 800af68:	bfc1      	itttt	gt
 800af6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800af72:	fa0b f303 	lslgt.w	r3, fp, r3
 800af76:	fa26 f000 	lsrgt.w	r0, r6, r0
 800af7a:	bfda      	itte	le
 800af7c:	f1c3 0320 	rsble	r3, r3, #32
 800af80:	fa06 f003 	lslle.w	r0, r6, r3
 800af84:	4318      	orrgt	r0, r3
 800af86:	f7f5 fad5 	bl	8000534 <__aeabi_ui2d>
 800af8a:	2301      	movs	r3, #1
 800af8c:	4606      	mov	r6, r0
 800af8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800af92:	3d01      	subs	r5, #1
 800af94:	930e      	str	r3, [sp, #56]	; 0x38
 800af96:	e76a      	b.n	800ae6e <_dtoa_r+0x116>
 800af98:	2301      	movs	r3, #1
 800af9a:	e7b2      	b.n	800af02 <_dtoa_r+0x1aa>
 800af9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800af9e:	e7b1      	b.n	800af04 <_dtoa_r+0x1ac>
 800afa0:	9b04      	ldr	r3, [sp, #16]
 800afa2:	9a00      	ldr	r2, [sp, #0]
 800afa4:	1a9b      	subs	r3, r3, r2
 800afa6:	9304      	str	r3, [sp, #16]
 800afa8:	4253      	negs	r3, r2
 800afaa:	9307      	str	r3, [sp, #28]
 800afac:	2300      	movs	r3, #0
 800afae:	930a      	str	r3, [sp, #40]	; 0x28
 800afb0:	e7bf      	b.n	800af32 <_dtoa_r+0x1da>
 800afb2:	2300      	movs	r3, #0
 800afb4:	9308      	str	r3, [sp, #32]
 800afb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afb8:	2b00      	cmp	r3, #0
 800afba:	dc55      	bgt.n	800b068 <_dtoa_r+0x310>
 800afbc:	2301      	movs	r3, #1
 800afbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800afc2:	461a      	mov	r2, r3
 800afc4:	9209      	str	r2, [sp, #36]	; 0x24
 800afc6:	e00c      	b.n	800afe2 <_dtoa_r+0x28a>
 800afc8:	2301      	movs	r3, #1
 800afca:	e7f3      	b.n	800afb4 <_dtoa_r+0x25c>
 800afcc:	2300      	movs	r3, #0
 800afce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afd0:	9308      	str	r3, [sp, #32]
 800afd2:	9b00      	ldr	r3, [sp, #0]
 800afd4:	4413      	add	r3, r2
 800afd6:	9302      	str	r3, [sp, #8]
 800afd8:	3301      	adds	r3, #1
 800afda:	2b01      	cmp	r3, #1
 800afdc:	9303      	str	r3, [sp, #12]
 800afde:	bfb8      	it	lt
 800afe0:	2301      	movlt	r3, #1
 800afe2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800afe4:	2200      	movs	r2, #0
 800afe6:	6042      	str	r2, [r0, #4]
 800afe8:	2204      	movs	r2, #4
 800afea:	f102 0614 	add.w	r6, r2, #20
 800afee:	429e      	cmp	r6, r3
 800aff0:	6841      	ldr	r1, [r0, #4]
 800aff2:	d93d      	bls.n	800b070 <_dtoa_r+0x318>
 800aff4:	4620      	mov	r0, r4
 800aff6:	f000 fedb 	bl	800bdb0 <_Balloc>
 800affa:	9001      	str	r0, [sp, #4]
 800affc:	2800      	cmp	r0, #0
 800affe:	d13b      	bne.n	800b078 <_dtoa_r+0x320>
 800b000:	4b11      	ldr	r3, [pc, #68]	; (800b048 <_dtoa_r+0x2f0>)
 800b002:	4602      	mov	r2, r0
 800b004:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b008:	e6c0      	b.n	800ad8c <_dtoa_r+0x34>
 800b00a:	2301      	movs	r3, #1
 800b00c:	e7df      	b.n	800afce <_dtoa_r+0x276>
 800b00e:	bf00      	nop
 800b010:	636f4361 	.word	0x636f4361
 800b014:	3fd287a7 	.word	0x3fd287a7
 800b018:	8b60c8b3 	.word	0x8b60c8b3
 800b01c:	3fc68a28 	.word	0x3fc68a28
 800b020:	509f79fb 	.word	0x509f79fb
 800b024:	3fd34413 	.word	0x3fd34413
 800b028:	0800db95 	.word	0x0800db95
 800b02c:	0800dbac 	.word	0x0800dbac
 800b030:	7ff00000 	.word	0x7ff00000
 800b034:	0800db91 	.word	0x0800db91
 800b038:	0800db88 	.word	0x0800db88
 800b03c:	0800db65 	.word	0x0800db65
 800b040:	3ff80000 	.word	0x3ff80000
 800b044:	0800dd00 	.word	0x0800dd00
 800b048:	0800dc07 	.word	0x0800dc07
 800b04c:	2501      	movs	r5, #1
 800b04e:	2300      	movs	r3, #0
 800b050:	9306      	str	r3, [sp, #24]
 800b052:	9508      	str	r5, [sp, #32]
 800b054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b058:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b05c:	2200      	movs	r2, #0
 800b05e:	2312      	movs	r3, #18
 800b060:	e7b0      	b.n	800afc4 <_dtoa_r+0x26c>
 800b062:	2301      	movs	r3, #1
 800b064:	9308      	str	r3, [sp, #32]
 800b066:	e7f5      	b.n	800b054 <_dtoa_r+0x2fc>
 800b068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b06a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b06e:	e7b8      	b.n	800afe2 <_dtoa_r+0x28a>
 800b070:	3101      	adds	r1, #1
 800b072:	6041      	str	r1, [r0, #4]
 800b074:	0052      	lsls	r2, r2, #1
 800b076:	e7b8      	b.n	800afea <_dtoa_r+0x292>
 800b078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b07a:	9a01      	ldr	r2, [sp, #4]
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	9b03      	ldr	r3, [sp, #12]
 800b080:	2b0e      	cmp	r3, #14
 800b082:	f200 809d 	bhi.w	800b1c0 <_dtoa_r+0x468>
 800b086:	2d00      	cmp	r5, #0
 800b088:	f000 809a 	beq.w	800b1c0 <_dtoa_r+0x468>
 800b08c:	9b00      	ldr	r3, [sp, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	dd32      	ble.n	800b0f8 <_dtoa_r+0x3a0>
 800b092:	4ab7      	ldr	r2, [pc, #732]	; (800b370 <_dtoa_r+0x618>)
 800b094:	f003 030f 	and.w	r3, r3, #15
 800b098:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b09c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0a0:	9b00      	ldr	r3, [sp, #0]
 800b0a2:	05d8      	lsls	r0, r3, #23
 800b0a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b0a8:	d516      	bpl.n	800b0d8 <_dtoa_r+0x380>
 800b0aa:	4bb2      	ldr	r3, [pc, #712]	; (800b374 <_dtoa_r+0x61c>)
 800b0ac:	ec51 0b19 	vmov	r0, r1, d9
 800b0b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0b4:	f7f5 fbe2 	bl	800087c <__aeabi_ddiv>
 800b0b8:	f007 070f 	and.w	r7, r7, #15
 800b0bc:	4682      	mov	sl, r0
 800b0be:	468b      	mov	fp, r1
 800b0c0:	2503      	movs	r5, #3
 800b0c2:	4eac      	ldr	r6, [pc, #688]	; (800b374 <_dtoa_r+0x61c>)
 800b0c4:	b957      	cbnz	r7, 800b0dc <_dtoa_r+0x384>
 800b0c6:	4642      	mov	r2, r8
 800b0c8:	464b      	mov	r3, r9
 800b0ca:	4650      	mov	r0, sl
 800b0cc:	4659      	mov	r1, fp
 800b0ce:	f7f5 fbd5 	bl	800087c <__aeabi_ddiv>
 800b0d2:	4682      	mov	sl, r0
 800b0d4:	468b      	mov	fp, r1
 800b0d6:	e028      	b.n	800b12a <_dtoa_r+0x3d2>
 800b0d8:	2502      	movs	r5, #2
 800b0da:	e7f2      	b.n	800b0c2 <_dtoa_r+0x36a>
 800b0dc:	07f9      	lsls	r1, r7, #31
 800b0de:	d508      	bpl.n	800b0f2 <_dtoa_r+0x39a>
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	4649      	mov	r1, r9
 800b0e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0e8:	f7f5 fa9e 	bl	8000628 <__aeabi_dmul>
 800b0ec:	3501      	adds	r5, #1
 800b0ee:	4680      	mov	r8, r0
 800b0f0:	4689      	mov	r9, r1
 800b0f2:	107f      	asrs	r7, r7, #1
 800b0f4:	3608      	adds	r6, #8
 800b0f6:	e7e5      	b.n	800b0c4 <_dtoa_r+0x36c>
 800b0f8:	f000 809b 	beq.w	800b232 <_dtoa_r+0x4da>
 800b0fc:	9b00      	ldr	r3, [sp, #0]
 800b0fe:	4f9d      	ldr	r7, [pc, #628]	; (800b374 <_dtoa_r+0x61c>)
 800b100:	425e      	negs	r6, r3
 800b102:	4b9b      	ldr	r3, [pc, #620]	; (800b370 <_dtoa_r+0x618>)
 800b104:	f006 020f 	and.w	r2, r6, #15
 800b108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	ec51 0b19 	vmov	r0, r1, d9
 800b114:	f7f5 fa88 	bl	8000628 <__aeabi_dmul>
 800b118:	1136      	asrs	r6, r6, #4
 800b11a:	4682      	mov	sl, r0
 800b11c:	468b      	mov	fp, r1
 800b11e:	2300      	movs	r3, #0
 800b120:	2502      	movs	r5, #2
 800b122:	2e00      	cmp	r6, #0
 800b124:	d17a      	bne.n	800b21c <_dtoa_r+0x4c4>
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1d3      	bne.n	800b0d2 <_dtoa_r+0x37a>
 800b12a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 8082 	beq.w	800b236 <_dtoa_r+0x4de>
 800b132:	4b91      	ldr	r3, [pc, #580]	; (800b378 <_dtoa_r+0x620>)
 800b134:	2200      	movs	r2, #0
 800b136:	4650      	mov	r0, sl
 800b138:	4659      	mov	r1, fp
 800b13a:	f7f5 fce7 	bl	8000b0c <__aeabi_dcmplt>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d079      	beq.n	800b236 <_dtoa_r+0x4de>
 800b142:	9b03      	ldr	r3, [sp, #12]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d076      	beq.n	800b236 <_dtoa_r+0x4de>
 800b148:	9b02      	ldr	r3, [sp, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	dd36      	ble.n	800b1bc <_dtoa_r+0x464>
 800b14e:	9b00      	ldr	r3, [sp, #0]
 800b150:	4650      	mov	r0, sl
 800b152:	4659      	mov	r1, fp
 800b154:	1e5f      	subs	r7, r3, #1
 800b156:	2200      	movs	r2, #0
 800b158:	4b88      	ldr	r3, [pc, #544]	; (800b37c <_dtoa_r+0x624>)
 800b15a:	f7f5 fa65 	bl	8000628 <__aeabi_dmul>
 800b15e:	9e02      	ldr	r6, [sp, #8]
 800b160:	4682      	mov	sl, r0
 800b162:	468b      	mov	fp, r1
 800b164:	3501      	adds	r5, #1
 800b166:	4628      	mov	r0, r5
 800b168:	f7f5 f9f4 	bl	8000554 <__aeabi_i2d>
 800b16c:	4652      	mov	r2, sl
 800b16e:	465b      	mov	r3, fp
 800b170:	f7f5 fa5a 	bl	8000628 <__aeabi_dmul>
 800b174:	4b82      	ldr	r3, [pc, #520]	; (800b380 <_dtoa_r+0x628>)
 800b176:	2200      	movs	r2, #0
 800b178:	f7f5 f8a0 	bl	80002bc <__adddf3>
 800b17c:	46d0      	mov	r8, sl
 800b17e:	46d9      	mov	r9, fp
 800b180:	4682      	mov	sl, r0
 800b182:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b186:	2e00      	cmp	r6, #0
 800b188:	d158      	bne.n	800b23c <_dtoa_r+0x4e4>
 800b18a:	4b7e      	ldr	r3, [pc, #504]	; (800b384 <_dtoa_r+0x62c>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	4640      	mov	r0, r8
 800b190:	4649      	mov	r1, r9
 800b192:	f7f5 f891 	bl	80002b8 <__aeabi_dsub>
 800b196:	4652      	mov	r2, sl
 800b198:	465b      	mov	r3, fp
 800b19a:	4680      	mov	r8, r0
 800b19c:	4689      	mov	r9, r1
 800b19e:	f7f5 fcd3 	bl	8000b48 <__aeabi_dcmpgt>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	f040 8295 	bne.w	800b6d2 <_dtoa_r+0x97a>
 800b1a8:	4652      	mov	r2, sl
 800b1aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	f7f5 fcab 	bl	8000b0c <__aeabi_dcmplt>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f040 8289 	bne.w	800b6ce <_dtoa_r+0x976>
 800b1bc:	ec5b ab19 	vmov	sl, fp, d9
 800b1c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f2c0 8148 	blt.w	800b458 <_dtoa_r+0x700>
 800b1c8:	9a00      	ldr	r2, [sp, #0]
 800b1ca:	2a0e      	cmp	r2, #14
 800b1cc:	f300 8144 	bgt.w	800b458 <_dtoa_r+0x700>
 800b1d0:	4b67      	ldr	r3, [pc, #412]	; (800b370 <_dtoa_r+0x618>)
 800b1d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f280 80d5 	bge.w	800b38c <_dtoa_r+0x634>
 800b1e2:	9b03      	ldr	r3, [sp, #12]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f300 80d1 	bgt.w	800b38c <_dtoa_r+0x634>
 800b1ea:	f040 826f 	bne.w	800b6cc <_dtoa_r+0x974>
 800b1ee:	4b65      	ldr	r3, [pc, #404]	; (800b384 <_dtoa_r+0x62c>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	f7f5 fa17 	bl	8000628 <__aeabi_dmul>
 800b1fa:	4652      	mov	r2, sl
 800b1fc:	465b      	mov	r3, fp
 800b1fe:	f7f5 fc99 	bl	8000b34 <__aeabi_dcmpge>
 800b202:	9e03      	ldr	r6, [sp, #12]
 800b204:	4637      	mov	r7, r6
 800b206:	2800      	cmp	r0, #0
 800b208:	f040 8245 	bne.w	800b696 <_dtoa_r+0x93e>
 800b20c:	9d01      	ldr	r5, [sp, #4]
 800b20e:	2331      	movs	r3, #49	; 0x31
 800b210:	f805 3b01 	strb.w	r3, [r5], #1
 800b214:	9b00      	ldr	r3, [sp, #0]
 800b216:	3301      	adds	r3, #1
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	e240      	b.n	800b69e <_dtoa_r+0x946>
 800b21c:	07f2      	lsls	r2, r6, #31
 800b21e:	d505      	bpl.n	800b22c <_dtoa_r+0x4d4>
 800b220:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b224:	f7f5 fa00 	bl	8000628 <__aeabi_dmul>
 800b228:	3501      	adds	r5, #1
 800b22a:	2301      	movs	r3, #1
 800b22c:	1076      	asrs	r6, r6, #1
 800b22e:	3708      	adds	r7, #8
 800b230:	e777      	b.n	800b122 <_dtoa_r+0x3ca>
 800b232:	2502      	movs	r5, #2
 800b234:	e779      	b.n	800b12a <_dtoa_r+0x3d2>
 800b236:	9f00      	ldr	r7, [sp, #0]
 800b238:	9e03      	ldr	r6, [sp, #12]
 800b23a:	e794      	b.n	800b166 <_dtoa_r+0x40e>
 800b23c:	9901      	ldr	r1, [sp, #4]
 800b23e:	4b4c      	ldr	r3, [pc, #304]	; (800b370 <_dtoa_r+0x618>)
 800b240:	4431      	add	r1, r6
 800b242:	910d      	str	r1, [sp, #52]	; 0x34
 800b244:	9908      	ldr	r1, [sp, #32]
 800b246:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b24a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b24e:	2900      	cmp	r1, #0
 800b250:	d043      	beq.n	800b2da <_dtoa_r+0x582>
 800b252:	494d      	ldr	r1, [pc, #308]	; (800b388 <_dtoa_r+0x630>)
 800b254:	2000      	movs	r0, #0
 800b256:	f7f5 fb11 	bl	800087c <__aeabi_ddiv>
 800b25a:	4652      	mov	r2, sl
 800b25c:	465b      	mov	r3, fp
 800b25e:	f7f5 f82b 	bl	80002b8 <__aeabi_dsub>
 800b262:	9d01      	ldr	r5, [sp, #4]
 800b264:	4682      	mov	sl, r0
 800b266:	468b      	mov	fp, r1
 800b268:	4649      	mov	r1, r9
 800b26a:	4640      	mov	r0, r8
 800b26c:	f7f5 fc8c 	bl	8000b88 <__aeabi_d2iz>
 800b270:	4606      	mov	r6, r0
 800b272:	f7f5 f96f 	bl	8000554 <__aeabi_i2d>
 800b276:	4602      	mov	r2, r0
 800b278:	460b      	mov	r3, r1
 800b27a:	4640      	mov	r0, r8
 800b27c:	4649      	mov	r1, r9
 800b27e:	f7f5 f81b 	bl	80002b8 <__aeabi_dsub>
 800b282:	3630      	adds	r6, #48	; 0x30
 800b284:	f805 6b01 	strb.w	r6, [r5], #1
 800b288:	4652      	mov	r2, sl
 800b28a:	465b      	mov	r3, fp
 800b28c:	4680      	mov	r8, r0
 800b28e:	4689      	mov	r9, r1
 800b290:	f7f5 fc3c 	bl	8000b0c <__aeabi_dcmplt>
 800b294:	2800      	cmp	r0, #0
 800b296:	d163      	bne.n	800b360 <_dtoa_r+0x608>
 800b298:	4642      	mov	r2, r8
 800b29a:	464b      	mov	r3, r9
 800b29c:	4936      	ldr	r1, [pc, #216]	; (800b378 <_dtoa_r+0x620>)
 800b29e:	2000      	movs	r0, #0
 800b2a0:	f7f5 f80a 	bl	80002b8 <__aeabi_dsub>
 800b2a4:	4652      	mov	r2, sl
 800b2a6:	465b      	mov	r3, fp
 800b2a8:	f7f5 fc30 	bl	8000b0c <__aeabi_dcmplt>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	f040 80b5 	bne.w	800b41c <_dtoa_r+0x6c4>
 800b2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2b4:	429d      	cmp	r5, r3
 800b2b6:	d081      	beq.n	800b1bc <_dtoa_r+0x464>
 800b2b8:	4b30      	ldr	r3, [pc, #192]	; (800b37c <_dtoa_r+0x624>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	4650      	mov	r0, sl
 800b2be:	4659      	mov	r1, fp
 800b2c0:	f7f5 f9b2 	bl	8000628 <__aeabi_dmul>
 800b2c4:	4b2d      	ldr	r3, [pc, #180]	; (800b37c <_dtoa_r+0x624>)
 800b2c6:	4682      	mov	sl, r0
 800b2c8:	468b      	mov	fp, r1
 800b2ca:	4640      	mov	r0, r8
 800b2cc:	4649      	mov	r1, r9
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f7f5 f9aa 	bl	8000628 <__aeabi_dmul>
 800b2d4:	4680      	mov	r8, r0
 800b2d6:	4689      	mov	r9, r1
 800b2d8:	e7c6      	b.n	800b268 <_dtoa_r+0x510>
 800b2da:	4650      	mov	r0, sl
 800b2dc:	4659      	mov	r1, fp
 800b2de:	f7f5 f9a3 	bl	8000628 <__aeabi_dmul>
 800b2e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2e4:	9d01      	ldr	r5, [sp, #4]
 800b2e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2e8:	4682      	mov	sl, r0
 800b2ea:	468b      	mov	fp, r1
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	f7f5 fc4a 	bl	8000b88 <__aeabi_d2iz>
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	f7f5 f92d 	bl	8000554 <__aeabi_i2d>
 800b2fa:	3630      	adds	r6, #48	; 0x30
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	4640      	mov	r0, r8
 800b302:	4649      	mov	r1, r9
 800b304:	f7f4 ffd8 	bl	80002b8 <__aeabi_dsub>
 800b308:	f805 6b01 	strb.w	r6, [r5], #1
 800b30c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b30e:	429d      	cmp	r5, r3
 800b310:	4680      	mov	r8, r0
 800b312:	4689      	mov	r9, r1
 800b314:	f04f 0200 	mov.w	r2, #0
 800b318:	d124      	bne.n	800b364 <_dtoa_r+0x60c>
 800b31a:	4b1b      	ldr	r3, [pc, #108]	; (800b388 <_dtoa_r+0x630>)
 800b31c:	4650      	mov	r0, sl
 800b31e:	4659      	mov	r1, fp
 800b320:	f7f4 ffcc 	bl	80002bc <__adddf3>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	4640      	mov	r0, r8
 800b32a:	4649      	mov	r1, r9
 800b32c:	f7f5 fc0c 	bl	8000b48 <__aeabi_dcmpgt>
 800b330:	2800      	cmp	r0, #0
 800b332:	d173      	bne.n	800b41c <_dtoa_r+0x6c4>
 800b334:	4652      	mov	r2, sl
 800b336:	465b      	mov	r3, fp
 800b338:	4913      	ldr	r1, [pc, #76]	; (800b388 <_dtoa_r+0x630>)
 800b33a:	2000      	movs	r0, #0
 800b33c:	f7f4 ffbc 	bl	80002b8 <__aeabi_dsub>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	4640      	mov	r0, r8
 800b346:	4649      	mov	r1, r9
 800b348:	f7f5 fbe0 	bl	8000b0c <__aeabi_dcmplt>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	f43f af35 	beq.w	800b1bc <_dtoa_r+0x464>
 800b352:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b354:	1e6b      	subs	r3, r5, #1
 800b356:	930f      	str	r3, [sp, #60]	; 0x3c
 800b358:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b35c:	2b30      	cmp	r3, #48	; 0x30
 800b35e:	d0f8      	beq.n	800b352 <_dtoa_r+0x5fa>
 800b360:	9700      	str	r7, [sp, #0]
 800b362:	e049      	b.n	800b3f8 <_dtoa_r+0x6a0>
 800b364:	4b05      	ldr	r3, [pc, #20]	; (800b37c <_dtoa_r+0x624>)
 800b366:	f7f5 f95f 	bl	8000628 <__aeabi_dmul>
 800b36a:	4680      	mov	r8, r0
 800b36c:	4689      	mov	r9, r1
 800b36e:	e7bd      	b.n	800b2ec <_dtoa_r+0x594>
 800b370:	0800dd00 	.word	0x0800dd00
 800b374:	0800dcd8 	.word	0x0800dcd8
 800b378:	3ff00000 	.word	0x3ff00000
 800b37c:	40240000 	.word	0x40240000
 800b380:	401c0000 	.word	0x401c0000
 800b384:	40140000 	.word	0x40140000
 800b388:	3fe00000 	.word	0x3fe00000
 800b38c:	9d01      	ldr	r5, [sp, #4]
 800b38e:	4656      	mov	r6, sl
 800b390:	465f      	mov	r7, fp
 800b392:	4642      	mov	r2, r8
 800b394:	464b      	mov	r3, r9
 800b396:	4630      	mov	r0, r6
 800b398:	4639      	mov	r1, r7
 800b39a:	f7f5 fa6f 	bl	800087c <__aeabi_ddiv>
 800b39e:	f7f5 fbf3 	bl	8000b88 <__aeabi_d2iz>
 800b3a2:	4682      	mov	sl, r0
 800b3a4:	f7f5 f8d6 	bl	8000554 <__aeabi_i2d>
 800b3a8:	4642      	mov	r2, r8
 800b3aa:	464b      	mov	r3, r9
 800b3ac:	f7f5 f93c 	bl	8000628 <__aeabi_dmul>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	4639      	mov	r1, r7
 800b3b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b3bc:	f7f4 ff7c 	bl	80002b8 <__aeabi_dsub>
 800b3c0:	f805 6b01 	strb.w	r6, [r5], #1
 800b3c4:	9e01      	ldr	r6, [sp, #4]
 800b3c6:	9f03      	ldr	r7, [sp, #12]
 800b3c8:	1bae      	subs	r6, r5, r6
 800b3ca:	42b7      	cmp	r7, r6
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	d135      	bne.n	800b43e <_dtoa_r+0x6e6>
 800b3d2:	f7f4 ff73 	bl	80002bc <__adddf3>
 800b3d6:	4642      	mov	r2, r8
 800b3d8:	464b      	mov	r3, r9
 800b3da:	4606      	mov	r6, r0
 800b3dc:	460f      	mov	r7, r1
 800b3de:	f7f5 fbb3 	bl	8000b48 <__aeabi_dcmpgt>
 800b3e2:	b9d0      	cbnz	r0, 800b41a <_dtoa_r+0x6c2>
 800b3e4:	4642      	mov	r2, r8
 800b3e6:	464b      	mov	r3, r9
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	f7f5 fb84 	bl	8000af8 <__aeabi_dcmpeq>
 800b3f0:	b110      	cbz	r0, 800b3f8 <_dtoa_r+0x6a0>
 800b3f2:	f01a 0f01 	tst.w	sl, #1
 800b3f6:	d110      	bne.n	800b41a <_dtoa_r+0x6c2>
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	ee18 1a10 	vmov	r1, s16
 800b3fe:	f000 fd17 	bl	800be30 <_Bfree>
 800b402:	2300      	movs	r3, #0
 800b404:	9800      	ldr	r0, [sp, #0]
 800b406:	702b      	strb	r3, [r5, #0]
 800b408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b40a:	3001      	adds	r0, #1
 800b40c:	6018      	str	r0, [r3, #0]
 800b40e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b410:	2b00      	cmp	r3, #0
 800b412:	f43f acf1 	beq.w	800adf8 <_dtoa_r+0xa0>
 800b416:	601d      	str	r5, [r3, #0]
 800b418:	e4ee      	b.n	800adf8 <_dtoa_r+0xa0>
 800b41a:	9f00      	ldr	r7, [sp, #0]
 800b41c:	462b      	mov	r3, r5
 800b41e:	461d      	mov	r5, r3
 800b420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b424:	2a39      	cmp	r2, #57	; 0x39
 800b426:	d106      	bne.n	800b436 <_dtoa_r+0x6de>
 800b428:	9a01      	ldr	r2, [sp, #4]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d1f7      	bne.n	800b41e <_dtoa_r+0x6c6>
 800b42e:	9901      	ldr	r1, [sp, #4]
 800b430:	2230      	movs	r2, #48	; 0x30
 800b432:	3701      	adds	r7, #1
 800b434:	700a      	strb	r2, [r1, #0]
 800b436:	781a      	ldrb	r2, [r3, #0]
 800b438:	3201      	adds	r2, #1
 800b43a:	701a      	strb	r2, [r3, #0]
 800b43c:	e790      	b.n	800b360 <_dtoa_r+0x608>
 800b43e:	4ba6      	ldr	r3, [pc, #664]	; (800b6d8 <_dtoa_r+0x980>)
 800b440:	2200      	movs	r2, #0
 800b442:	f7f5 f8f1 	bl	8000628 <__aeabi_dmul>
 800b446:	2200      	movs	r2, #0
 800b448:	2300      	movs	r3, #0
 800b44a:	4606      	mov	r6, r0
 800b44c:	460f      	mov	r7, r1
 800b44e:	f7f5 fb53 	bl	8000af8 <__aeabi_dcmpeq>
 800b452:	2800      	cmp	r0, #0
 800b454:	d09d      	beq.n	800b392 <_dtoa_r+0x63a>
 800b456:	e7cf      	b.n	800b3f8 <_dtoa_r+0x6a0>
 800b458:	9a08      	ldr	r2, [sp, #32]
 800b45a:	2a00      	cmp	r2, #0
 800b45c:	f000 80d7 	beq.w	800b60e <_dtoa_r+0x8b6>
 800b460:	9a06      	ldr	r2, [sp, #24]
 800b462:	2a01      	cmp	r2, #1
 800b464:	f300 80ba 	bgt.w	800b5dc <_dtoa_r+0x884>
 800b468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b46a:	2a00      	cmp	r2, #0
 800b46c:	f000 80b2 	beq.w	800b5d4 <_dtoa_r+0x87c>
 800b470:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b474:	9e07      	ldr	r6, [sp, #28]
 800b476:	9d04      	ldr	r5, [sp, #16]
 800b478:	9a04      	ldr	r2, [sp, #16]
 800b47a:	441a      	add	r2, r3
 800b47c:	9204      	str	r2, [sp, #16]
 800b47e:	9a05      	ldr	r2, [sp, #20]
 800b480:	2101      	movs	r1, #1
 800b482:	441a      	add	r2, r3
 800b484:	4620      	mov	r0, r4
 800b486:	9205      	str	r2, [sp, #20]
 800b488:	f000 fd8a 	bl	800bfa0 <__i2b>
 800b48c:	4607      	mov	r7, r0
 800b48e:	2d00      	cmp	r5, #0
 800b490:	dd0c      	ble.n	800b4ac <_dtoa_r+0x754>
 800b492:	9b05      	ldr	r3, [sp, #20]
 800b494:	2b00      	cmp	r3, #0
 800b496:	dd09      	ble.n	800b4ac <_dtoa_r+0x754>
 800b498:	42ab      	cmp	r3, r5
 800b49a:	9a04      	ldr	r2, [sp, #16]
 800b49c:	bfa8      	it	ge
 800b49e:	462b      	movge	r3, r5
 800b4a0:	1ad2      	subs	r2, r2, r3
 800b4a2:	9204      	str	r2, [sp, #16]
 800b4a4:	9a05      	ldr	r2, [sp, #20]
 800b4a6:	1aed      	subs	r5, r5, r3
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	9305      	str	r3, [sp, #20]
 800b4ac:	9b07      	ldr	r3, [sp, #28]
 800b4ae:	b31b      	cbz	r3, 800b4f8 <_dtoa_r+0x7a0>
 800b4b0:	9b08      	ldr	r3, [sp, #32]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 80af 	beq.w	800b616 <_dtoa_r+0x8be>
 800b4b8:	2e00      	cmp	r6, #0
 800b4ba:	dd13      	ble.n	800b4e4 <_dtoa_r+0x78c>
 800b4bc:	4639      	mov	r1, r7
 800b4be:	4632      	mov	r2, r6
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f000 fe2d 	bl	800c120 <__pow5mult>
 800b4c6:	ee18 2a10 	vmov	r2, s16
 800b4ca:	4601      	mov	r1, r0
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f000 fd7c 	bl	800bfcc <__multiply>
 800b4d4:	ee18 1a10 	vmov	r1, s16
 800b4d8:	4680      	mov	r8, r0
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 fca8 	bl	800be30 <_Bfree>
 800b4e0:	ee08 8a10 	vmov	s16, r8
 800b4e4:	9b07      	ldr	r3, [sp, #28]
 800b4e6:	1b9a      	subs	r2, r3, r6
 800b4e8:	d006      	beq.n	800b4f8 <_dtoa_r+0x7a0>
 800b4ea:	ee18 1a10 	vmov	r1, s16
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f000 fe16 	bl	800c120 <__pow5mult>
 800b4f4:	ee08 0a10 	vmov	s16, r0
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 fd50 	bl	800bfa0 <__i2b>
 800b500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b502:	2b00      	cmp	r3, #0
 800b504:	4606      	mov	r6, r0
 800b506:	f340 8088 	ble.w	800b61a <_dtoa_r+0x8c2>
 800b50a:	461a      	mov	r2, r3
 800b50c:	4601      	mov	r1, r0
 800b50e:	4620      	mov	r0, r4
 800b510:	f000 fe06 	bl	800c120 <__pow5mult>
 800b514:	9b06      	ldr	r3, [sp, #24]
 800b516:	2b01      	cmp	r3, #1
 800b518:	4606      	mov	r6, r0
 800b51a:	f340 8081 	ble.w	800b620 <_dtoa_r+0x8c8>
 800b51e:	f04f 0800 	mov.w	r8, #0
 800b522:	6933      	ldr	r3, [r6, #16]
 800b524:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b528:	6918      	ldr	r0, [r3, #16]
 800b52a:	f000 fce9 	bl	800bf00 <__hi0bits>
 800b52e:	f1c0 0020 	rsb	r0, r0, #32
 800b532:	9b05      	ldr	r3, [sp, #20]
 800b534:	4418      	add	r0, r3
 800b536:	f010 001f 	ands.w	r0, r0, #31
 800b53a:	f000 8092 	beq.w	800b662 <_dtoa_r+0x90a>
 800b53e:	f1c0 0320 	rsb	r3, r0, #32
 800b542:	2b04      	cmp	r3, #4
 800b544:	f340 808a 	ble.w	800b65c <_dtoa_r+0x904>
 800b548:	f1c0 001c 	rsb	r0, r0, #28
 800b54c:	9b04      	ldr	r3, [sp, #16]
 800b54e:	4403      	add	r3, r0
 800b550:	9304      	str	r3, [sp, #16]
 800b552:	9b05      	ldr	r3, [sp, #20]
 800b554:	4403      	add	r3, r0
 800b556:	4405      	add	r5, r0
 800b558:	9305      	str	r3, [sp, #20]
 800b55a:	9b04      	ldr	r3, [sp, #16]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	dd07      	ble.n	800b570 <_dtoa_r+0x818>
 800b560:	ee18 1a10 	vmov	r1, s16
 800b564:	461a      	mov	r2, r3
 800b566:	4620      	mov	r0, r4
 800b568:	f000 fe34 	bl	800c1d4 <__lshift>
 800b56c:	ee08 0a10 	vmov	s16, r0
 800b570:	9b05      	ldr	r3, [sp, #20]
 800b572:	2b00      	cmp	r3, #0
 800b574:	dd05      	ble.n	800b582 <_dtoa_r+0x82a>
 800b576:	4631      	mov	r1, r6
 800b578:	461a      	mov	r2, r3
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 fe2a 	bl	800c1d4 <__lshift>
 800b580:	4606      	mov	r6, r0
 800b582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b584:	2b00      	cmp	r3, #0
 800b586:	d06e      	beq.n	800b666 <_dtoa_r+0x90e>
 800b588:	ee18 0a10 	vmov	r0, s16
 800b58c:	4631      	mov	r1, r6
 800b58e:	f000 fe91 	bl	800c2b4 <__mcmp>
 800b592:	2800      	cmp	r0, #0
 800b594:	da67      	bge.n	800b666 <_dtoa_r+0x90e>
 800b596:	9b00      	ldr	r3, [sp, #0]
 800b598:	3b01      	subs	r3, #1
 800b59a:	ee18 1a10 	vmov	r1, s16
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	220a      	movs	r2, #10
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f000 fc65 	bl	800be74 <__multadd>
 800b5aa:	9b08      	ldr	r3, [sp, #32]
 800b5ac:	ee08 0a10 	vmov	s16, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 81b1 	beq.w	800b918 <_dtoa_r+0xbc0>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	4639      	mov	r1, r7
 800b5ba:	220a      	movs	r2, #10
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 fc59 	bl	800be74 <__multadd>
 800b5c2:	9b02      	ldr	r3, [sp, #8]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	4607      	mov	r7, r0
 800b5c8:	f300 808e 	bgt.w	800b6e8 <_dtoa_r+0x990>
 800b5cc:	9b06      	ldr	r3, [sp, #24]
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	dc51      	bgt.n	800b676 <_dtoa_r+0x91e>
 800b5d2:	e089      	b.n	800b6e8 <_dtoa_r+0x990>
 800b5d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b5da:	e74b      	b.n	800b474 <_dtoa_r+0x71c>
 800b5dc:	9b03      	ldr	r3, [sp, #12]
 800b5de:	1e5e      	subs	r6, r3, #1
 800b5e0:	9b07      	ldr	r3, [sp, #28]
 800b5e2:	42b3      	cmp	r3, r6
 800b5e4:	bfbf      	itttt	lt
 800b5e6:	9b07      	ldrlt	r3, [sp, #28]
 800b5e8:	9607      	strlt	r6, [sp, #28]
 800b5ea:	1af2      	sublt	r2, r6, r3
 800b5ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b5ee:	bfb6      	itet	lt
 800b5f0:	189b      	addlt	r3, r3, r2
 800b5f2:	1b9e      	subge	r6, r3, r6
 800b5f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b5f6:	9b03      	ldr	r3, [sp, #12]
 800b5f8:	bfb8      	it	lt
 800b5fa:	2600      	movlt	r6, #0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	bfb7      	itett	lt
 800b600:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b604:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b608:	1a9d      	sublt	r5, r3, r2
 800b60a:	2300      	movlt	r3, #0
 800b60c:	e734      	b.n	800b478 <_dtoa_r+0x720>
 800b60e:	9e07      	ldr	r6, [sp, #28]
 800b610:	9d04      	ldr	r5, [sp, #16]
 800b612:	9f08      	ldr	r7, [sp, #32]
 800b614:	e73b      	b.n	800b48e <_dtoa_r+0x736>
 800b616:	9a07      	ldr	r2, [sp, #28]
 800b618:	e767      	b.n	800b4ea <_dtoa_r+0x792>
 800b61a:	9b06      	ldr	r3, [sp, #24]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	dc18      	bgt.n	800b652 <_dtoa_r+0x8fa>
 800b620:	f1ba 0f00 	cmp.w	sl, #0
 800b624:	d115      	bne.n	800b652 <_dtoa_r+0x8fa>
 800b626:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b62a:	b993      	cbnz	r3, 800b652 <_dtoa_r+0x8fa>
 800b62c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b630:	0d1b      	lsrs	r3, r3, #20
 800b632:	051b      	lsls	r3, r3, #20
 800b634:	b183      	cbz	r3, 800b658 <_dtoa_r+0x900>
 800b636:	9b04      	ldr	r3, [sp, #16]
 800b638:	3301      	adds	r3, #1
 800b63a:	9304      	str	r3, [sp, #16]
 800b63c:	9b05      	ldr	r3, [sp, #20]
 800b63e:	3301      	adds	r3, #1
 800b640:	9305      	str	r3, [sp, #20]
 800b642:	f04f 0801 	mov.w	r8, #1
 800b646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f47f af6a 	bne.w	800b522 <_dtoa_r+0x7ca>
 800b64e:	2001      	movs	r0, #1
 800b650:	e76f      	b.n	800b532 <_dtoa_r+0x7da>
 800b652:	f04f 0800 	mov.w	r8, #0
 800b656:	e7f6      	b.n	800b646 <_dtoa_r+0x8ee>
 800b658:	4698      	mov	r8, r3
 800b65a:	e7f4      	b.n	800b646 <_dtoa_r+0x8ee>
 800b65c:	f43f af7d 	beq.w	800b55a <_dtoa_r+0x802>
 800b660:	4618      	mov	r0, r3
 800b662:	301c      	adds	r0, #28
 800b664:	e772      	b.n	800b54c <_dtoa_r+0x7f4>
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	dc37      	bgt.n	800b6dc <_dtoa_r+0x984>
 800b66c:	9b06      	ldr	r3, [sp, #24]
 800b66e:	2b02      	cmp	r3, #2
 800b670:	dd34      	ble.n	800b6dc <_dtoa_r+0x984>
 800b672:	9b03      	ldr	r3, [sp, #12]
 800b674:	9302      	str	r3, [sp, #8]
 800b676:	9b02      	ldr	r3, [sp, #8]
 800b678:	b96b      	cbnz	r3, 800b696 <_dtoa_r+0x93e>
 800b67a:	4631      	mov	r1, r6
 800b67c:	2205      	movs	r2, #5
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 fbf8 	bl	800be74 <__multadd>
 800b684:	4601      	mov	r1, r0
 800b686:	4606      	mov	r6, r0
 800b688:	ee18 0a10 	vmov	r0, s16
 800b68c:	f000 fe12 	bl	800c2b4 <__mcmp>
 800b690:	2800      	cmp	r0, #0
 800b692:	f73f adbb 	bgt.w	800b20c <_dtoa_r+0x4b4>
 800b696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b698:	9d01      	ldr	r5, [sp, #4]
 800b69a:	43db      	mvns	r3, r3
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	f04f 0800 	mov.w	r8, #0
 800b6a2:	4631      	mov	r1, r6
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f000 fbc3 	bl	800be30 <_Bfree>
 800b6aa:	2f00      	cmp	r7, #0
 800b6ac:	f43f aea4 	beq.w	800b3f8 <_dtoa_r+0x6a0>
 800b6b0:	f1b8 0f00 	cmp.w	r8, #0
 800b6b4:	d005      	beq.n	800b6c2 <_dtoa_r+0x96a>
 800b6b6:	45b8      	cmp	r8, r7
 800b6b8:	d003      	beq.n	800b6c2 <_dtoa_r+0x96a>
 800b6ba:	4641      	mov	r1, r8
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f000 fbb7 	bl	800be30 <_Bfree>
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f000 fbb3 	bl	800be30 <_Bfree>
 800b6ca:	e695      	b.n	800b3f8 <_dtoa_r+0x6a0>
 800b6cc:	2600      	movs	r6, #0
 800b6ce:	4637      	mov	r7, r6
 800b6d0:	e7e1      	b.n	800b696 <_dtoa_r+0x93e>
 800b6d2:	9700      	str	r7, [sp, #0]
 800b6d4:	4637      	mov	r7, r6
 800b6d6:	e599      	b.n	800b20c <_dtoa_r+0x4b4>
 800b6d8:	40240000 	.word	0x40240000
 800b6dc:	9b08      	ldr	r3, [sp, #32]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f000 80ca 	beq.w	800b878 <_dtoa_r+0xb20>
 800b6e4:	9b03      	ldr	r3, [sp, #12]
 800b6e6:	9302      	str	r3, [sp, #8]
 800b6e8:	2d00      	cmp	r5, #0
 800b6ea:	dd05      	ble.n	800b6f8 <_dtoa_r+0x9a0>
 800b6ec:	4639      	mov	r1, r7
 800b6ee:	462a      	mov	r2, r5
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f000 fd6f 	bl	800c1d4 <__lshift>
 800b6f6:	4607      	mov	r7, r0
 800b6f8:	f1b8 0f00 	cmp.w	r8, #0
 800b6fc:	d05b      	beq.n	800b7b6 <_dtoa_r+0xa5e>
 800b6fe:	6879      	ldr	r1, [r7, #4]
 800b700:	4620      	mov	r0, r4
 800b702:	f000 fb55 	bl	800bdb0 <_Balloc>
 800b706:	4605      	mov	r5, r0
 800b708:	b928      	cbnz	r0, 800b716 <_dtoa_r+0x9be>
 800b70a:	4b87      	ldr	r3, [pc, #540]	; (800b928 <_dtoa_r+0xbd0>)
 800b70c:	4602      	mov	r2, r0
 800b70e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b712:	f7ff bb3b 	b.w	800ad8c <_dtoa_r+0x34>
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	3202      	adds	r2, #2
 800b71a:	0092      	lsls	r2, r2, #2
 800b71c:	f107 010c 	add.w	r1, r7, #12
 800b720:	300c      	adds	r0, #12
 800b722:	f000 fb2b 	bl	800bd7c <memcpy>
 800b726:	2201      	movs	r2, #1
 800b728:	4629      	mov	r1, r5
 800b72a:	4620      	mov	r0, r4
 800b72c:	f000 fd52 	bl	800c1d4 <__lshift>
 800b730:	9b01      	ldr	r3, [sp, #4]
 800b732:	f103 0901 	add.w	r9, r3, #1
 800b736:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b73a:	4413      	add	r3, r2
 800b73c:	9305      	str	r3, [sp, #20]
 800b73e:	f00a 0301 	and.w	r3, sl, #1
 800b742:	46b8      	mov	r8, r7
 800b744:	9304      	str	r3, [sp, #16]
 800b746:	4607      	mov	r7, r0
 800b748:	4631      	mov	r1, r6
 800b74a:	ee18 0a10 	vmov	r0, s16
 800b74e:	f7ff fa77 	bl	800ac40 <quorem>
 800b752:	4641      	mov	r1, r8
 800b754:	9002      	str	r0, [sp, #8]
 800b756:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b75a:	ee18 0a10 	vmov	r0, s16
 800b75e:	f000 fda9 	bl	800c2b4 <__mcmp>
 800b762:	463a      	mov	r2, r7
 800b764:	9003      	str	r0, [sp, #12]
 800b766:	4631      	mov	r1, r6
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 fdbf 	bl	800c2ec <__mdiff>
 800b76e:	68c2      	ldr	r2, [r0, #12]
 800b770:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b774:	4605      	mov	r5, r0
 800b776:	bb02      	cbnz	r2, 800b7ba <_dtoa_r+0xa62>
 800b778:	4601      	mov	r1, r0
 800b77a:	ee18 0a10 	vmov	r0, s16
 800b77e:	f000 fd99 	bl	800c2b4 <__mcmp>
 800b782:	4602      	mov	r2, r0
 800b784:	4629      	mov	r1, r5
 800b786:	4620      	mov	r0, r4
 800b788:	9207      	str	r2, [sp, #28]
 800b78a:	f000 fb51 	bl	800be30 <_Bfree>
 800b78e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b792:	ea43 0102 	orr.w	r1, r3, r2
 800b796:	9b04      	ldr	r3, [sp, #16]
 800b798:	430b      	orrs	r3, r1
 800b79a:	464d      	mov	r5, r9
 800b79c:	d10f      	bne.n	800b7be <_dtoa_r+0xa66>
 800b79e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b7a2:	d02a      	beq.n	800b7fa <_dtoa_r+0xaa2>
 800b7a4:	9b03      	ldr	r3, [sp, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	dd02      	ble.n	800b7b0 <_dtoa_r+0xa58>
 800b7aa:	9b02      	ldr	r3, [sp, #8]
 800b7ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b7b0:	f88b a000 	strb.w	sl, [fp]
 800b7b4:	e775      	b.n	800b6a2 <_dtoa_r+0x94a>
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	e7ba      	b.n	800b730 <_dtoa_r+0x9d8>
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	e7e2      	b.n	800b784 <_dtoa_r+0xa2c>
 800b7be:	9b03      	ldr	r3, [sp, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	db04      	blt.n	800b7ce <_dtoa_r+0xa76>
 800b7c4:	9906      	ldr	r1, [sp, #24]
 800b7c6:	430b      	orrs	r3, r1
 800b7c8:	9904      	ldr	r1, [sp, #16]
 800b7ca:	430b      	orrs	r3, r1
 800b7cc:	d122      	bne.n	800b814 <_dtoa_r+0xabc>
 800b7ce:	2a00      	cmp	r2, #0
 800b7d0:	ddee      	ble.n	800b7b0 <_dtoa_r+0xa58>
 800b7d2:	ee18 1a10 	vmov	r1, s16
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f000 fcfb 	bl	800c1d4 <__lshift>
 800b7de:	4631      	mov	r1, r6
 800b7e0:	ee08 0a10 	vmov	s16, r0
 800b7e4:	f000 fd66 	bl	800c2b4 <__mcmp>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	dc03      	bgt.n	800b7f4 <_dtoa_r+0xa9c>
 800b7ec:	d1e0      	bne.n	800b7b0 <_dtoa_r+0xa58>
 800b7ee:	f01a 0f01 	tst.w	sl, #1
 800b7f2:	d0dd      	beq.n	800b7b0 <_dtoa_r+0xa58>
 800b7f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b7f8:	d1d7      	bne.n	800b7aa <_dtoa_r+0xa52>
 800b7fa:	2339      	movs	r3, #57	; 0x39
 800b7fc:	f88b 3000 	strb.w	r3, [fp]
 800b800:	462b      	mov	r3, r5
 800b802:	461d      	mov	r5, r3
 800b804:	3b01      	subs	r3, #1
 800b806:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b80a:	2a39      	cmp	r2, #57	; 0x39
 800b80c:	d071      	beq.n	800b8f2 <_dtoa_r+0xb9a>
 800b80e:	3201      	adds	r2, #1
 800b810:	701a      	strb	r2, [r3, #0]
 800b812:	e746      	b.n	800b6a2 <_dtoa_r+0x94a>
 800b814:	2a00      	cmp	r2, #0
 800b816:	dd07      	ble.n	800b828 <_dtoa_r+0xad0>
 800b818:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b81c:	d0ed      	beq.n	800b7fa <_dtoa_r+0xaa2>
 800b81e:	f10a 0301 	add.w	r3, sl, #1
 800b822:	f88b 3000 	strb.w	r3, [fp]
 800b826:	e73c      	b.n	800b6a2 <_dtoa_r+0x94a>
 800b828:	9b05      	ldr	r3, [sp, #20]
 800b82a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b82e:	4599      	cmp	r9, r3
 800b830:	d047      	beq.n	800b8c2 <_dtoa_r+0xb6a>
 800b832:	ee18 1a10 	vmov	r1, s16
 800b836:	2300      	movs	r3, #0
 800b838:	220a      	movs	r2, #10
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 fb1a 	bl	800be74 <__multadd>
 800b840:	45b8      	cmp	r8, r7
 800b842:	ee08 0a10 	vmov	s16, r0
 800b846:	f04f 0300 	mov.w	r3, #0
 800b84a:	f04f 020a 	mov.w	r2, #10
 800b84e:	4641      	mov	r1, r8
 800b850:	4620      	mov	r0, r4
 800b852:	d106      	bne.n	800b862 <_dtoa_r+0xb0a>
 800b854:	f000 fb0e 	bl	800be74 <__multadd>
 800b858:	4680      	mov	r8, r0
 800b85a:	4607      	mov	r7, r0
 800b85c:	f109 0901 	add.w	r9, r9, #1
 800b860:	e772      	b.n	800b748 <_dtoa_r+0x9f0>
 800b862:	f000 fb07 	bl	800be74 <__multadd>
 800b866:	4639      	mov	r1, r7
 800b868:	4680      	mov	r8, r0
 800b86a:	2300      	movs	r3, #0
 800b86c:	220a      	movs	r2, #10
 800b86e:	4620      	mov	r0, r4
 800b870:	f000 fb00 	bl	800be74 <__multadd>
 800b874:	4607      	mov	r7, r0
 800b876:	e7f1      	b.n	800b85c <_dtoa_r+0xb04>
 800b878:	9b03      	ldr	r3, [sp, #12]
 800b87a:	9302      	str	r3, [sp, #8]
 800b87c:	9d01      	ldr	r5, [sp, #4]
 800b87e:	ee18 0a10 	vmov	r0, s16
 800b882:	4631      	mov	r1, r6
 800b884:	f7ff f9dc 	bl	800ac40 <quorem>
 800b888:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b88c:	9b01      	ldr	r3, [sp, #4]
 800b88e:	f805 ab01 	strb.w	sl, [r5], #1
 800b892:	1aea      	subs	r2, r5, r3
 800b894:	9b02      	ldr	r3, [sp, #8]
 800b896:	4293      	cmp	r3, r2
 800b898:	dd09      	ble.n	800b8ae <_dtoa_r+0xb56>
 800b89a:	ee18 1a10 	vmov	r1, s16
 800b89e:	2300      	movs	r3, #0
 800b8a0:	220a      	movs	r2, #10
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f000 fae6 	bl	800be74 <__multadd>
 800b8a8:	ee08 0a10 	vmov	s16, r0
 800b8ac:	e7e7      	b.n	800b87e <_dtoa_r+0xb26>
 800b8ae:	9b02      	ldr	r3, [sp, #8]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	bfc8      	it	gt
 800b8b4:	461d      	movgt	r5, r3
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	bfd8      	it	le
 800b8ba:	2501      	movle	r5, #1
 800b8bc:	441d      	add	r5, r3
 800b8be:	f04f 0800 	mov.w	r8, #0
 800b8c2:	ee18 1a10 	vmov	r1, s16
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f000 fc83 	bl	800c1d4 <__lshift>
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	ee08 0a10 	vmov	s16, r0
 800b8d4:	f000 fcee 	bl	800c2b4 <__mcmp>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	dc91      	bgt.n	800b800 <_dtoa_r+0xaa8>
 800b8dc:	d102      	bne.n	800b8e4 <_dtoa_r+0xb8c>
 800b8de:	f01a 0f01 	tst.w	sl, #1
 800b8e2:	d18d      	bne.n	800b800 <_dtoa_r+0xaa8>
 800b8e4:	462b      	mov	r3, r5
 800b8e6:	461d      	mov	r5, r3
 800b8e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8ec:	2a30      	cmp	r2, #48	; 0x30
 800b8ee:	d0fa      	beq.n	800b8e6 <_dtoa_r+0xb8e>
 800b8f0:	e6d7      	b.n	800b6a2 <_dtoa_r+0x94a>
 800b8f2:	9a01      	ldr	r2, [sp, #4]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d184      	bne.n	800b802 <_dtoa_r+0xaaa>
 800b8f8:	9b00      	ldr	r3, [sp, #0]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	2331      	movs	r3, #49	; 0x31
 800b900:	7013      	strb	r3, [r2, #0]
 800b902:	e6ce      	b.n	800b6a2 <_dtoa_r+0x94a>
 800b904:	4b09      	ldr	r3, [pc, #36]	; (800b92c <_dtoa_r+0xbd4>)
 800b906:	f7ff ba95 	b.w	800ae34 <_dtoa_r+0xdc>
 800b90a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f47f aa6e 	bne.w	800adee <_dtoa_r+0x96>
 800b912:	4b07      	ldr	r3, [pc, #28]	; (800b930 <_dtoa_r+0xbd8>)
 800b914:	f7ff ba8e 	b.w	800ae34 <_dtoa_r+0xdc>
 800b918:	9b02      	ldr	r3, [sp, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	dcae      	bgt.n	800b87c <_dtoa_r+0xb24>
 800b91e:	9b06      	ldr	r3, [sp, #24]
 800b920:	2b02      	cmp	r3, #2
 800b922:	f73f aea8 	bgt.w	800b676 <_dtoa_r+0x91e>
 800b926:	e7a9      	b.n	800b87c <_dtoa_r+0xb24>
 800b928:	0800dc07 	.word	0x0800dc07
 800b92c:	0800db64 	.word	0x0800db64
 800b930:	0800db88 	.word	0x0800db88

0800b934 <__sflush_r>:
 800b934:	898a      	ldrh	r2, [r1, #12]
 800b936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b93a:	4605      	mov	r5, r0
 800b93c:	0710      	lsls	r0, r2, #28
 800b93e:	460c      	mov	r4, r1
 800b940:	d458      	bmi.n	800b9f4 <__sflush_r+0xc0>
 800b942:	684b      	ldr	r3, [r1, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	dc05      	bgt.n	800b954 <__sflush_r+0x20>
 800b948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	dc02      	bgt.n	800b954 <__sflush_r+0x20>
 800b94e:	2000      	movs	r0, #0
 800b950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b956:	2e00      	cmp	r6, #0
 800b958:	d0f9      	beq.n	800b94e <__sflush_r+0x1a>
 800b95a:	2300      	movs	r3, #0
 800b95c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b960:	682f      	ldr	r7, [r5, #0]
 800b962:	602b      	str	r3, [r5, #0]
 800b964:	d032      	beq.n	800b9cc <__sflush_r+0x98>
 800b966:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b968:	89a3      	ldrh	r3, [r4, #12]
 800b96a:	075a      	lsls	r2, r3, #29
 800b96c:	d505      	bpl.n	800b97a <__sflush_r+0x46>
 800b96e:	6863      	ldr	r3, [r4, #4]
 800b970:	1ac0      	subs	r0, r0, r3
 800b972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b974:	b10b      	cbz	r3, 800b97a <__sflush_r+0x46>
 800b976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b978:	1ac0      	subs	r0, r0, r3
 800b97a:	2300      	movs	r3, #0
 800b97c:	4602      	mov	r2, r0
 800b97e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b980:	6a21      	ldr	r1, [r4, #32]
 800b982:	4628      	mov	r0, r5
 800b984:	47b0      	blx	r6
 800b986:	1c43      	adds	r3, r0, #1
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	d106      	bne.n	800b99a <__sflush_r+0x66>
 800b98c:	6829      	ldr	r1, [r5, #0]
 800b98e:	291d      	cmp	r1, #29
 800b990:	d82c      	bhi.n	800b9ec <__sflush_r+0xb8>
 800b992:	4a2a      	ldr	r2, [pc, #168]	; (800ba3c <__sflush_r+0x108>)
 800b994:	40ca      	lsrs	r2, r1
 800b996:	07d6      	lsls	r6, r2, #31
 800b998:	d528      	bpl.n	800b9ec <__sflush_r+0xb8>
 800b99a:	2200      	movs	r2, #0
 800b99c:	6062      	str	r2, [r4, #4]
 800b99e:	04d9      	lsls	r1, r3, #19
 800b9a0:	6922      	ldr	r2, [r4, #16]
 800b9a2:	6022      	str	r2, [r4, #0]
 800b9a4:	d504      	bpl.n	800b9b0 <__sflush_r+0x7c>
 800b9a6:	1c42      	adds	r2, r0, #1
 800b9a8:	d101      	bne.n	800b9ae <__sflush_r+0x7a>
 800b9aa:	682b      	ldr	r3, [r5, #0]
 800b9ac:	b903      	cbnz	r3, 800b9b0 <__sflush_r+0x7c>
 800b9ae:	6560      	str	r0, [r4, #84]	; 0x54
 800b9b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9b2:	602f      	str	r7, [r5, #0]
 800b9b4:	2900      	cmp	r1, #0
 800b9b6:	d0ca      	beq.n	800b94e <__sflush_r+0x1a>
 800b9b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9bc:	4299      	cmp	r1, r3
 800b9be:	d002      	beq.n	800b9c6 <__sflush_r+0x92>
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	f7fe fa61 	bl	8009e88 <_free_r>
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	6360      	str	r0, [r4, #52]	; 0x34
 800b9ca:	e7c1      	b.n	800b950 <__sflush_r+0x1c>
 800b9cc:	6a21      	ldr	r1, [r4, #32]
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	47b0      	blx	r6
 800b9d4:	1c41      	adds	r1, r0, #1
 800b9d6:	d1c7      	bne.n	800b968 <__sflush_r+0x34>
 800b9d8:	682b      	ldr	r3, [r5, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d0c4      	beq.n	800b968 <__sflush_r+0x34>
 800b9de:	2b1d      	cmp	r3, #29
 800b9e0:	d001      	beq.n	800b9e6 <__sflush_r+0xb2>
 800b9e2:	2b16      	cmp	r3, #22
 800b9e4:	d101      	bne.n	800b9ea <__sflush_r+0xb6>
 800b9e6:	602f      	str	r7, [r5, #0]
 800b9e8:	e7b1      	b.n	800b94e <__sflush_r+0x1a>
 800b9ea:	89a3      	ldrh	r3, [r4, #12]
 800b9ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f0:	81a3      	strh	r3, [r4, #12]
 800b9f2:	e7ad      	b.n	800b950 <__sflush_r+0x1c>
 800b9f4:	690f      	ldr	r7, [r1, #16]
 800b9f6:	2f00      	cmp	r7, #0
 800b9f8:	d0a9      	beq.n	800b94e <__sflush_r+0x1a>
 800b9fa:	0793      	lsls	r3, r2, #30
 800b9fc:	680e      	ldr	r6, [r1, #0]
 800b9fe:	bf08      	it	eq
 800ba00:	694b      	ldreq	r3, [r1, #20]
 800ba02:	600f      	str	r7, [r1, #0]
 800ba04:	bf18      	it	ne
 800ba06:	2300      	movne	r3, #0
 800ba08:	eba6 0807 	sub.w	r8, r6, r7
 800ba0c:	608b      	str	r3, [r1, #8]
 800ba0e:	f1b8 0f00 	cmp.w	r8, #0
 800ba12:	dd9c      	ble.n	800b94e <__sflush_r+0x1a>
 800ba14:	6a21      	ldr	r1, [r4, #32]
 800ba16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba18:	4643      	mov	r3, r8
 800ba1a:	463a      	mov	r2, r7
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b0      	blx	r6
 800ba20:	2800      	cmp	r0, #0
 800ba22:	dc06      	bgt.n	800ba32 <__sflush_r+0xfe>
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba2a:	81a3      	strh	r3, [r4, #12]
 800ba2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba30:	e78e      	b.n	800b950 <__sflush_r+0x1c>
 800ba32:	4407      	add	r7, r0
 800ba34:	eba8 0800 	sub.w	r8, r8, r0
 800ba38:	e7e9      	b.n	800ba0e <__sflush_r+0xda>
 800ba3a:	bf00      	nop
 800ba3c:	20400001 	.word	0x20400001

0800ba40 <_fflush_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	690b      	ldr	r3, [r1, #16]
 800ba44:	4605      	mov	r5, r0
 800ba46:	460c      	mov	r4, r1
 800ba48:	b913      	cbnz	r3, 800ba50 <_fflush_r+0x10>
 800ba4a:	2500      	movs	r5, #0
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	b118      	cbz	r0, 800ba5a <_fflush_r+0x1a>
 800ba52:	6983      	ldr	r3, [r0, #24]
 800ba54:	b90b      	cbnz	r3, 800ba5a <_fflush_r+0x1a>
 800ba56:	f000 f887 	bl	800bb68 <__sinit>
 800ba5a:	4b14      	ldr	r3, [pc, #80]	; (800baac <_fflush_r+0x6c>)
 800ba5c:	429c      	cmp	r4, r3
 800ba5e:	d11b      	bne.n	800ba98 <_fflush_r+0x58>
 800ba60:	686c      	ldr	r4, [r5, #4]
 800ba62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d0ef      	beq.n	800ba4a <_fflush_r+0xa>
 800ba6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba6c:	07d0      	lsls	r0, r2, #31
 800ba6e:	d404      	bmi.n	800ba7a <_fflush_r+0x3a>
 800ba70:	0599      	lsls	r1, r3, #22
 800ba72:	d402      	bmi.n	800ba7a <_fflush_r+0x3a>
 800ba74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba76:	f000 f91a 	bl	800bcae <__retarget_lock_acquire_recursive>
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	f7ff ff59 	bl	800b934 <__sflush_r>
 800ba82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba84:	07da      	lsls	r2, r3, #31
 800ba86:	4605      	mov	r5, r0
 800ba88:	d4e0      	bmi.n	800ba4c <_fflush_r+0xc>
 800ba8a:	89a3      	ldrh	r3, [r4, #12]
 800ba8c:	059b      	lsls	r3, r3, #22
 800ba8e:	d4dd      	bmi.n	800ba4c <_fflush_r+0xc>
 800ba90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba92:	f000 f90d 	bl	800bcb0 <__retarget_lock_release_recursive>
 800ba96:	e7d9      	b.n	800ba4c <_fflush_r+0xc>
 800ba98:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <_fflush_r+0x70>)
 800ba9a:	429c      	cmp	r4, r3
 800ba9c:	d101      	bne.n	800baa2 <_fflush_r+0x62>
 800ba9e:	68ac      	ldr	r4, [r5, #8]
 800baa0:	e7df      	b.n	800ba62 <_fflush_r+0x22>
 800baa2:	4b04      	ldr	r3, [pc, #16]	; (800bab4 <_fflush_r+0x74>)
 800baa4:	429c      	cmp	r4, r3
 800baa6:	bf08      	it	eq
 800baa8:	68ec      	ldreq	r4, [r5, #12]
 800baaa:	e7da      	b.n	800ba62 <_fflush_r+0x22>
 800baac:	0800dc38 	.word	0x0800dc38
 800bab0:	0800dc58 	.word	0x0800dc58
 800bab4:	0800dc18 	.word	0x0800dc18

0800bab8 <std>:
 800bab8:	2300      	movs	r3, #0
 800baba:	b510      	push	{r4, lr}
 800babc:	4604      	mov	r4, r0
 800babe:	e9c0 3300 	strd	r3, r3, [r0]
 800bac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bac6:	6083      	str	r3, [r0, #8]
 800bac8:	8181      	strh	r1, [r0, #12]
 800baca:	6643      	str	r3, [r0, #100]	; 0x64
 800bacc:	81c2      	strh	r2, [r0, #14]
 800bace:	6183      	str	r3, [r0, #24]
 800bad0:	4619      	mov	r1, r3
 800bad2:	2208      	movs	r2, #8
 800bad4:	305c      	adds	r0, #92	; 0x5c
 800bad6:	f7fe f9cf 	bl	8009e78 <memset>
 800bada:	4b05      	ldr	r3, [pc, #20]	; (800baf0 <std+0x38>)
 800badc:	6263      	str	r3, [r4, #36]	; 0x24
 800bade:	4b05      	ldr	r3, [pc, #20]	; (800baf4 <std+0x3c>)
 800bae0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bae2:	4b05      	ldr	r3, [pc, #20]	; (800baf8 <std+0x40>)
 800bae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bae6:	4b05      	ldr	r3, [pc, #20]	; (800bafc <std+0x44>)
 800bae8:	6224      	str	r4, [r4, #32]
 800baea:	6323      	str	r3, [r4, #48]	; 0x30
 800baec:	bd10      	pop	{r4, pc}
 800baee:	bf00      	nop
 800baf0:	0800ca51 	.word	0x0800ca51
 800baf4:	0800ca73 	.word	0x0800ca73
 800baf8:	0800caab 	.word	0x0800caab
 800bafc:	0800cacf 	.word	0x0800cacf

0800bb00 <_cleanup_r>:
 800bb00:	4901      	ldr	r1, [pc, #4]	; (800bb08 <_cleanup_r+0x8>)
 800bb02:	f000 b8af 	b.w	800bc64 <_fwalk_reent>
 800bb06:	bf00      	nop
 800bb08:	0800ba41 	.word	0x0800ba41

0800bb0c <__sfmoreglue>:
 800bb0c:	b570      	push	{r4, r5, r6, lr}
 800bb0e:	2268      	movs	r2, #104	; 0x68
 800bb10:	1e4d      	subs	r5, r1, #1
 800bb12:	4355      	muls	r5, r2
 800bb14:	460e      	mov	r6, r1
 800bb16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb1a:	f7fe fa21 	bl	8009f60 <_malloc_r>
 800bb1e:	4604      	mov	r4, r0
 800bb20:	b140      	cbz	r0, 800bb34 <__sfmoreglue+0x28>
 800bb22:	2100      	movs	r1, #0
 800bb24:	e9c0 1600 	strd	r1, r6, [r0]
 800bb28:	300c      	adds	r0, #12
 800bb2a:	60a0      	str	r0, [r4, #8]
 800bb2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb30:	f7fe f9a2 	bl	8009e78 <memset>
 800bb34:	4620      	mov	r0, r4
 800bb36:	bd70      	pop	{r4, r5, r6, pc}

0800bb38 <__sfp_lock_acquire>:
 800bb38:	4801      	ldr	r0, [pc, #4]	; (800bb40 <__sfp_lock_acquire+0x8>)
 800bb3a:	f000 b8b8 	b.w	800bcae <__retarget_lock_acquire_recursive>
 800bb3e:	bf00      	nop
 800bb40:	20002525 	.word	0x20002525

0800bb44 <__sfp_lock_release>:
 800bb44:	4801      	ldr	r0, [pc, #4]	; (800bb4c <__sfp_lock_release+0x8>)
 800bb46:	f000 b8b3 	b.w	800bcb0 <__retarget_lock_release_recursive>
 800bb4a:	bf00      	nop
 800bb4c:	20002525 	.word	0x20002525

0800bb50 <__sinit_lock_acquire>:
 800bb50:	4801      	ldr	r0, [pc, #4]	; (800bb58 <__sinit_lock_acquire+0x8>)
 800bb52:	f000 b8ac 	b.w	800bcae <__retarget_lock_acquire_recursive>
 800bb56:	bf00      	nop
 800bb58:	20002526 	.word	0x20002526

0800bb5c <__sinit_lock_release>:
 800bb5c:	4801      	ldr	r0, [pc, #4]	; (800bb64 <__sinit_lock_release+0x8>)
 800bb5e:	f000 b8a7 	b.w	800bcb0 <__retarget_lock_release_recursive>
 800bb62:	bf00      	nop
 800bb64:	20002526 	.word	0x20002526

0800bb68 <__sinit>:
 800bb68:	b510      	push	{r4, lr}
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	f7ff fff0 	bl	800bb50 <__sinit_lock_acquire>
 800bb70:	69a3      	ldr	r3, [r4, #24]
 800bb72:	b11b      	cbz	r3, 800bb7c <__sinit+0x14>
 800bb74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb78:	f7ff bff0 	b.w	800bb5c <__sinit_lock_release>
 800bb7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb80:	6523      	str	r3, [r4, #80]	; 0x50
 800bb82:	4b13      	ldr	r3, [pc, #76]	; (800bbd0 <__sinit+0x68>)
 800bb84:	4a13      	ldr	r2, [pc, #76]	; (800bbd4 <__sinit+0x6c>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb8a:	42a3      	cmp	r3, r4
 800bb8c:	bf04      	itt	eq
 800bb8e:	2301      	moveq	r3, #1
 800bb90:	61a3      	streq	r3, [r4, #24]
 800bb92:	4620      	mov	r0, r4
 800bb94:	f000 f820 	bl	800bbd8 <__sfp>
 800bb98:	6060      	str	r0, [r4, #4]
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 f81c 	bl	800bbd8 <__sfp>
 800bba0:	60a0      	str	r0, [r4, #8]
 800bba2:	4620      	mov	r0, r4
 800bba4:	f000 f818 	bl	800bbd8 <__sfp>
 800bba8:	2200      	movs	r2, #0
 800bbaa:	60e0      	str	r0, [r4, #12]
 800bbac:	2104      	movs	r1, #4
 800bbae:	6860      	ldr	r0, [r4, #4]
 800bbb0:	f7ff ff82 	bl	800bab8 <std>
 800bbb4:	68a0      	ldr	r0, [r4, #8]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	2109      	movs	r1, #9
 800bbba:	f7ff ff7d 	bl	800bab8 <std>
 800bbbe:	68e0      	ldr	r0, [r4, #12]
 800bbc0:	2202      	movs	r2, #2
 800bbc2:	2112      	movs	r1, #18
 800bbc4:	f7ff ff78 	bl	800bab8 <std>
 800bbc8:	2301      	movs	r3, #1
 800bbca:	61a3      	str	r3, [r4, #24]
 800bbcc:	e7d2      	b.n	800bb74 <__sinit+0xc>
 800bbce:	bf00      	nop
 800bbd0:	0800db50 	.word	0x0800db50
 800bbd4:	0800bb01 	.word	0x0800bb01

0800bbd8 <__sfp>:
 800bbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbda:	4607      	mov	r7, r0
 800bbdc:	f7ff ffac 	bl	800bb38 <__sfp_lock_acquire>
 800bbe0:	4b1e      	ldr	r3, [pc, #120]	; (800bc5c <__sfp+0x84>)
 800bbe2:	681e      	ldr	r6, [r3, #0]
 800bbe4:	69b3      	ldr	r3, [r6, #24]
 800bbe6:	b913      	cbnz	r3, 800bbee <__sfp+0x16>
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f7ff ffbd 	bl	800bb68 <__sinit>
 800bbee:	3648      	adds	r6, #72	; 0x48
 800bbf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	d503      	bpl.n	800bc00 <__sfp+0x28>
 800bbf8:	6833      	ldr	r3, [r6, #0]
 800bbfa:	b30b      	cbz	r3, 800bc40 <__sfp+0x68>
 800bbfc:	6836      	ldr	r6, [r6, #0]
 800bbfe:	e7f7      	b.n	800bbf0 <__sfp+0x18>
 800bc00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc04:	b9d5      	cbnz	r5, 800bc3c <__sfp+0x64>
 800bc06:	4b16      	ldr	r3, [pc, #88]	; (800bc60 <__sfp+0x88>)
 800bc08:	60e3      	str	r3, [r4, #12]
 800bc0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc0e:	6665      	str	r5, [r4, #100]	; 0x64
 800bc10:	f000 f84c 	bl	800bcac <__retarget_lock_init_recursive>
 800bc14:	f7ff ff96 	bl	800bb44 <__sfp_lock_release>
 800bc18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc20:	6025      	str	r5, [r4, #0]
 800bc22:	61a5      	str	r5, [r4, #24]
 800bc24:	2208      	movs	r2, #8
 800bc26:	4629      	mov	r1, r5
 800bc28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc2c:	f7fe f924 	bl	8009e78 <memset>
 800bc30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc38:	4620      	mov	r0, r4
 800bc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc3c:	3468      	adds	r4, #104	; 0x68
 800bc3e:	e7d9      	b.n	800bbf4 <__sfp+0x1c>
 800bc40:	2104      	movs	r1, #4
 800bc42:	4638      	mov	r0, r7
 800bc44:	f7ff ff62 	bl	800bb0c <__sfmoreglue>
 800bc48:	4604      	mov	r4, r0
 800bc4a:	6030      	str	r0, [r6, #0]
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d1d5      	bne.n	800bbfc <__sfp+0x24>
 800bc50:	f7ff ff78 	bl	800bb44 <__sfp_lock_release>
 800bc54:	230c      	movs	r3, #12
 800bc56:	603b      	str	r3, [r7, #0]
 800bc58:	e7ee      	b.n	800bc38 <__sfp+0x60>
 800bc5a:	bf00      	nop
 800bc5c:	0800db50 	.word	0x0800db50
 800bc60:	ffff0001 	.word	0xffff0001

0800bc64 <_fwalk_reent>:
 800bc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc68:	4606      	mov	r6, r0
 800bc6a:	4688      	mov	r8, r1
 800bc6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc70:	2700      	movs	r7, #0
 800bc72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc76:	f1b9 0901 	subs.w	r9, r9, #1
 800bc7a:	d505      	bpl.n	800bc88 <_fwalk_reent+0x24>
 800bc7c:	6824      	ldr	r4, [r4, #0]
 800bc7e:	2c00      	cmp	r4, #0
 800bc80:	d1f7      	bne.n	800bc72 <_fwalk_reent+0xe>
 800bc82:	4638      	mov	r0, r7
 800bc84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc88:	89ab      	ldrh	r3, [r5, #12]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d907      	bls.n	800bc9e <_fwalk_reent+0x3a>
 800bc8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc92:	3301      	adds	r3, #1
 800bc94:	d003      	beq.n	800bc9e <_fwalk_reent+0x3a>
 800bc96:	4629      	mov	r1, r5
 800bc98:	4630      	mov	r0, r6
 800bc9a:	47c0      	blx	r8
 800bc9c:	4307      	orrs	r7, r0
 800bc9e:	3568      	adds	r5, #104	; 0x68
 800bca0:	e7e9      	b.n	800bc76 <_fwalk_reent+0x12>
	...

0800bca4 <_localeconv_r>:
 800bca4:	4800      	ldr	r0, [pc, #0]	; (800bca8 <_localeconv_r+0x4>)
 800bca6:	4770      	bx	lr
 800bca8:	20000178 	.word	0x20000178

0800bcac <__retarget_lock_init_recursive>:
 800bcac:	4770      	bx	lr

0800bcae <__retarget_lock_acquire_recursive>:
 800bcae:	4770      	bx	lr

0800bcb0 <__retarget_lock_release_recursive>:
 800bcb0:	4770      	bx	lr

0800bcb2 <__swhatbuf_r>:
 800bcb2:	b570      	push	{r4, r5, r6, lr}
 800bcb4:	460e      	mov	r6, r1
 800bcb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcba:	2900      	cmp	r1, #0
 800bcbc:	b096      	sub	sp, #88	; 0x58
 800bcbe:	4614      	mov	r4, r2
 800bcc0:	461d      	mov	r5, r3
 800bcc2:	da08      	bge.n	800bcd6 <__swhatbuf_r+0x24>
 800bcc4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	602a      	str	r2, [r5, #0]
 800bccc:	061a      	lsls	r2, r3, #24
 800bcce:	d410      	bmi.n	800bcf2 <__swhatbuf_r+0x40>
 800bcd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcd4:	e00e      	b.n	800bcf4 <__swhatbuf_r+0x42>
 800bcd6:	466a      	mov	r2, sp
 800bcd8:	f000 ff50 	bl	800cb7c <_fstat_r>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	dbf1      	blt.n	800bcc4 <__swhatbuf_r+0x12>
 800bce0:	9a01      	ldr	r2, [sp, #4]
 800bce2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bce6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bcea:	425a      	negs	r2, r3
 800bcec:	415a      	adcs	r2, r3
 800bcee:	602a      	str	r2, [r5, #0]
 800bcf0:	e7ee      	b.n	800bcd0 <__swhatbuf_r+0x1e>
 800bcf2:	2340      	movs	r3, #64	; 0x40
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	6023      	str	r3, [r4, #0]
 800bcf8:	b016      	add	sp, #88	; 0x58
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}

0800bcfc <__smakebuf_r>:
 800bcfc:	898b      	ldrh	r3, [r1, #12]
 800bcfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd00:	079d      	lsls	r5, r3, #30
 800bd02:	4606      	mov	r6, r0
 800bd04:	460c      	mov	r4, r1
 800bd06:	d507      	bpl.n	800bd18 <__smakebuf_r+0x1c>
 800bd08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	6123      	str	r3, [r4, #16]
 800bd10:	2301      	movs	r3, #1
 800bd12:	6163      	str	r3, [r4, #20]
 800bd14:	b002      	add	sp, #8
 800bd16:	bd70      	pop	{r4, r5, r6, pc}
 800bd18:	ab01      	add	r3, sp, #4
 800bd1a:	466a      	mov	r2, sp
 800bd1c:	f7ff ffc9 	bl	800bcb2 <__swhatbuf_r>
 800bd20:	9900      	ldr	r1, [sp, #0]
 800bd22:	4605      	mov	r5, r0
 800bd24:	4630      	mov	r0, r6
 800bd26:	f7fe f91b 	bl	8009f60 <_malloc_r>
 800bd2a:	b948      	cbnz	r0, 800bd40 <__smakebuf_r+0x44>
 800bd2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd30:	059a      	lsls	r2, r3, #22
 800bd32:	d4ef      	bmi.n	800bd14 <__smakebuf_r+0x18>
 800bd34:	f023 0303 	bic.w	r3, r3, #3
 800bd38:	f043 0302 	orr.w	r3, r3, #2
 800bd3c:	81a3      	strh	r3, [r4, #12]
 800bd3e:	e7e3      	b.n	800bd08 <__smakebuf_r+0xc>
 800bd40:	4b0d      	ldr	r3, [pc, #52]	; (800bd78 <__smakebuf_r+0x7c>)
 800bd42:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd44:	89a3      	ldrh	r3, [r4, #12]
 800bd46:	6020      	str	r0, [r4, #0]
 800bd48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	9b00      	ldr	r3, [sp, #0]
 800bd50:	6163      	str	r3, [r4, #20]
 800bd52:	9b01      	ldr	r3, [sp, #4]
 800bd54:	6120      	str	r0, [r4, #16]
 800bd56:	b15b      	cbz	r3, 800bd70 <__smakebuf_r+0x74>
 800bd58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f000 ff1f 	bl	800cba0 <_isatty_r>
 800bd62:	b128      	cbz	r0, 800bd70 <__smakebuf_r+0x74>
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	f023 0303 	bic.w	r3, r3, #3
 800bd6a:	f043 0301 	orr.w	r3, r3, #1
 800bd6e:	81a3      	strh	r3, [r4, #12]
 800bd70:	89a0      	ldrh	r0, [r4, #12]
 800bd72:	4305      	orrs	r5, r0
 800bd74:	81a5      	strh	r5, [r4, #12]
 800bd76:	e7cd      	b.n	800bd14 <__smakebuf_r+0x18>
 800bd78:	0800bb01 	.word	0x0800bb01

0800bd7c <memcpy>:
 800bd7c:	440a      	add	r2, r1
 800bd7e:	4291      	cmp	r1, r2
 800bd80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bd84:	d100      	bne.n	800bd88 <memcpy+0xc>
 800bd86:	4770      	bx	lr
 800bd88:	b510      	push	{r4, lr}
 800bd8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd92:	4291      	cmp	r1, r2
 800bd94:	d1f9      	bne.n	800bd8a <memcpy+0xe>
 800bd96:	bd10      	pop	{r4, pc}

0800bd98 <__malloc_lock>:
 800bd98:	4801      	ldr	r0, [pc, #4]	; (800bda0 <__malloc_lock+0x8>)
 800bd9a:	f7ff bf88 	b.w	800bcae <__retarget_lock_acquire_recursive>
 800bd9e:	bf00      	nop
 800bda0:	20002524 	.word	0x20002524

0800bda4 <__malloc_unlock>:
 800bda4:	4801      	ldr	r0, [pc, #4]	; (800bdac <__malloc_unlock+0x8>)
 800bda6:	f7ff bf83 	b.w	800bcb0 <__retarget_lock_release_recursive>
 800bdaa:	bf00      	nop
 800bdac:	20002524 	.word	0x20002524

0800bdb0 <_Balloc>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	b976      	cbnz	r6, 800bdd8 <_Balloc+0x28>
 800bdba:	2010      	movs	r0, #16
 800bdbc:	f7fe f84c 	bl	8009e58 <malloc>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	6260      	str	r0, [r4, #36]	; 0x24
 800bdc4:	b920      	cbnz	r0, 800bdd0 <_Balloc+0x20>
 800bdc6:	4b18      	ldr	r3, [pc, #96]	; (800be28 <_Balloc+0x78>)
 800bdc8:	4818      	ldr	r0, [pc, #96]	; (800be2c <_Balloc+0x7c>)
 800bdca:	2166      	movs	r1, #102	; 0x66
 800bdcc:	f000 fe96 	bl	800cafc <__assert_func>
 800bdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdd4:	6006      	str	r6, [r0, #0]
 800bdd6:	60c6      	str	r6, [r0, #12]
 800bdd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bdda:	68f3      	ldr	r3, [r6, #12]
 800bddc:	b183      	cbz	r3, 800be00 <_Balloc+0x50>
 800bdde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bde6:	b9b8      	cbnz	r0, 800be18 <_Balloc+0x68>
 800bde8:	2101      	movs	r1, #1
 800bdea:	fa01 f605 	lsl.w	r6, r1, r5
 800bdee:	1d72      	adds	r2, r6, #5
 800bdf0:	0092      	lsls	r2, r2, #2
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f000 fb60 	bl	800c4b8 <_calloc_r>
 800bdf8:	b160      	cbz	r0, 800be14 <_Balloc+0x64>
 800bdfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdfe:	e00e      	b.n	800be1e <_Balloc+0x6e>
 800be00:	2221      	movs	r2, #33	; 0x21
 800be02:	2104      	movs	r1, #4
 800be04:	4620      	mov	r0, r4
 800be06:	f000 fb57 	bl	800c4b8 <_calloc_r>
 800be0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be0c:	60f0      	str	r0, [r6, #12]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1e4      	bne.n	800bdde <_Balloc+0x2e>
 800be14:	2000      	movs	r0, #0
 800be16:	bd70      	pop	{r4, r5, r6, pc}
 800be18:	6802      	ldr	r2, [r0, #0]
 800be1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be1e:	2300      	movs	r3, #0
 800be20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be24:	e7f7      	b.n	800be16 <_Balloc+0x66>
 800be26:	bf00      	nop
 800be28:	0800db95 	.word	0x0800db95
 800be2c:	0800dc78 	.word	0x0800dc78

0800be30 <_Bfree>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be34:	4605      	mov	r5, r0
 800be36:	460c      	mov	r4, r1
 800be38:	b976      	cbnz	r6, 800be58 <_Bfree+0x28>
 800be3a:	2010      	movs	r0, #16
 800be3c:	f7fe f80c 	bl	8009e58 <malloc>
 800be40:	4602      	mov	r2, r0
 800be42:	6268      	str	r0, [r5, #36]	; 0x24
 800be44:	b920      	cbnz	r0, 800be50 <_Bfree+0x20>
 800be46:	4b09      	ldr	r3, [pc, #36]	; (800be6c <_Bfree+0x3c>)
 800be48:	4809      	ldr	r0, [pc, #36]	; (800be70 <_Bfree+0x40>)
 800be4a:	218a      	movs	r1, #138	; 0x8a
 800be4c:	f000 fe56 	bl	800cafc <__assert_func>
 800be50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be54:	6006      	str	r6, [r0, #0]
 800be56:	60c6      	str	r6, [r0, #12]
 800be58:	b13c      	cbz	r4, 800be6a <_Bfree+0x3a>
 800be5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be5c:	6862      	ldr	r2, [r4, #4]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be64:	6021      	str	r1, [r4, #0]
 800be66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be6a:	bd70      	pop	{r4, r5, r6, pc}
 800be6c:	0800db95 	.word	0x0800db95
 800be70:	0800dc78 	.word	0x0800dc78

0800be74 <__multadd>:
 800be74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be78:	690d      	ldr	r5, [r1, #16]
 800be7a:	4607      	mov	r7, r0
 800be7c:	460c      	mov	r4, r1
 800be7e:	461e      	mov	r6, r3
 800be80:	f101 0c14 	add.w	ip, r1, #20
 800be84:	2000      	movs	r0, #0
 800be86:	f8dc 3000 	ldr.w	r3, [ip]
 800be8a:	b299      	uxth	r1, r3
 800be8c:	fb02 6101 	mla	r1, r2, r1, r6
 800be90:	0c1e      	lsrs	r6, r3, #16
 800be92:	0c0b      	lsrs	r3, r1, #16
 800be94:	fb02 3306 	mla	r3, r2, r6, r3
 800be98:	b289      	uxth	r1, r1
 800be9a:	3001      	adds	r0, #1
 800be9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bea0:	4285      	cmp	r5, r0
 800bea2:	f84c 1b04 	str.w	r1, [ip], #4
 800bea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800beaa:	dcec      	bgt.n	800be86 <__multadd+0x12>
 800beac:	b30e      	cbz	r6, 800bef2 <__multadd+0x7e>
 800beae:	68a3      	ldr	r3, [r4, #8]
 800beb0:	42ab      	cmp	r3, r5
 800beb2:	dc19      	bgt.n	800bee8 <__multadd+0x74>
 800beb4:	6861      	ldr	r1, [r4, #4]
 800beb6:	4638      	mov	r0, r7
 800beb8:	3101      	adds	r1, #1
 800beba:	f7ff ff79 	bl	800bdb0 <_Balloc>
 800bebe:	4680      	mov	r8, r0
 800bec0:	b928      	cbnz	r0, 800bece <__multadd+0x5a>
 800bec2:	4602      	mov	r2, r0
 800bec4:	4b0c      	ldr	r3, [pc, #48]	; (800bef8 <__multadd+0x84>)
 800bec6:	480d      	ldr	r0, [pc, #52]	; (800befc <__multadd+0x88>)
 800bec8:	21b5      	movs	r1, #181	; 0xb5
 800beca:	f000 fe17 	bl	800cafc <__assert_func>
 800bece:	6922      	ldr	r2, [r4, #16]
 800bed0:	3202      	adds	r2, #2
 800bed2:	f104 010c 	add.w	r1, r4, #12
 800bed6:	0092      	lsls	r2, r2, #2
 800bed8:	300c      	adds	r0, #12
 800beda:	f7ff ff4f 	bl	800bd7c <memcpy>
 800bede:	4621      	mov	r1, r4
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7ff ffa5 	bl	800be30 <_Bfree>
 800bee6:	4644      	mov	r4, r8
 800bee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800beec:	3501      	adds	r5, #1
 800beee:	615e      	str	r6, [r3, #20]
 800bef0:	6125      	str	r5, [r4, #16]
 800bef2:	4620      	mov	r0, r4
 800bef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef8:	0800dc07 	.word	0x0800dc07
 800befc:	0800dc78 	.word	0x0800dc78

0800bf00 <__hi0bits>:
 800bf00:	0c03      	lsrs	r3, r0, #16
 800bf02:	041b      	lsls	r3, r3, #16
 800bf04:	b9d3      	cbnz	r3, 800bf3c <__hi0bits+0x3c>
 800bf06:	0400      	lsls	r0, r0, #16
 800bf08:	2310      	movs	r3, #16
 800bf0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf0e:	bf04      	itt	eq
 800bf10:	0200      	lsleq	r0, r0, #8
 800bf12:	3308      	addeq	r3, #8
 800bf14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf18:	bf04      	itt	eq
 800bf1a:	0100      	lsleq	r0, r0, #4
 800bf1c:	3304      	addeq	r3, #4
 800bf1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf22:	bf04      	itt	eq
 800bf24:	0080      	lsleq	r0, r0, #2
 800bf26:	3302      	addeq	r3, #2
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	db05      	blt.n	800bf38 <__hi0bits+0x38>
 800bf2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf30:	f103 0301 	add.w	r3, r3, #1
 800bf34:	bf08      	it	eq
 800bf36:	2320      	moveq	r3, #32
 800bf38:	4618      	mov	r0, r3
 800bf3a:	4770      	bx	lr
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	e7e4      	b.n	800bf0a <__hi0bits+0xa>

0800bf40 <__lo0bits>:
 800bf40:	6803      	ldr	r3, [r0, #0]
 800bf42:	f013 0207 	ands.w	r2, r3, #7
 800bf46:	4601      	mov	r1, r0
 800bf48:	d00b      	beq.n	800bf62 <__lo0bits+0x22>
 800bf4a:	07da      	lsls	r2, r3, #31
 800bf4c:	d423      	bmi.n	800bf96 <__lo0bits+0x56>
 800bf4e:	0798      	lsls	r0, r3, #30
 800bf50:	bf49      	itett	mi
 800bf52:	085b      	lsrmi	r3, r3, #1
 800bf54:	089b      	lsrpl	r3, r3, #2
 800bf56:	2001      	movmi	r0, #1
 800bf58:	600b      	strmi	r3, [r1, #0]
 800bf5a:	bf5c      	itt	pl
 800bf5c:	600b      	strpl	r3, [r1, #0]
 800bf5e:	2002      	movpl	r0, #2
 800bf60:	4770      	bx	lr
 800bf62:	b298      	uxth	r0, r3
 800bf64:	b9a8      	cbnz	r0, 800bf92 <__lo0bits+0x52>
 800bf66:	0c1b      	lsrs	r3, r3, #16
 800bf68:	2010      	movs	r0, #16
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	b90a      	cbnz	r2, 800bf72 <__lo0bits+0x32>
 800bf6e:	3008      	adds	r0, #8
 800bf70:	0a1b      	lsrs	r3, r3, #8
 800bf72:	071a      	lsls	r2, r3, #28
 800bf74:	bf04      	itt	eq
 800bf76:	091b      	lsreq	r3, r3, #4
 800bf78:	3004      	addeq	r0, #4
 800bf7a:	079a      	lsls	r2, r3, #30
 800bf7c:	bf04      	itt	eq
 800bf7e:	089b      	lsreq	r3, r3, #2
 800bf80:	3002      	addeq	r0, #2
 800bf82:	07da      	lsls	r2, r3, #31
 800bf84:	d403      	bmi.n	800bf8e <__lo0bits+0x4e>
 800bf86:	085b      	lsrs	r3, r3, #1
 800bf88:	f100 0001 	add.w	r0, r0, #1
 800bf8c:	d005      	beq.n	800bf9a <__lo0bits+0x5a>
 800bf8e:	600b      	str	r3, [r1, #0]
 800bf90:	4770      	bx	lr
 800bf92:	4610      	mov	r0, r2
 800bf94:	e7e9      	b.n	800bf6a <__lo0bits+0x2a>
 800bf96:	2000      	movs	r0, #0
 800bf98:	4770      	bx	lr
 800bf9a:	2020      	movs	r0, #32
 800bf9c:	4770      	bx	lr
	...

0800bfa0 <__i2b>:
 800bfa0:	b510      	push	{r4, lr}
 800bfa2:	460c      	mov	r4, r1
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	f7ff ff03 	bl	800bdb0 <_Balloc>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	b928      	cbnz	r0, 800bfba <__i2b+0x1a>
 800bfae:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <__i2b+0x24>)
 800bfb0:	4805      	ldr	r0, [pc, #20]	; (800bfc8 <__i2b+0x28>)
 800bfb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bfb6:	f000 fda1 	bl	800cafc <__assert_func>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	6144      	str	r4, [r0, #20]
 800bfbe:	6103      	str	r3, [r0, #16]
 800bfc0:	bd10      	pop	{r4, pc}
 800bfc2:	bf00      	nop
 800bfc4:	0800dc07 	.word	0x0800dc07
 800bfc8:	0800dc78 	.word	0x0800dc78

0800bfcc <__multiply>:
 800bfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd0:	4691      	mov	r9, r2
 800bfd2:	690a      	ldr	r2, [r1, #16]
 800bfd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	bfb8      	it	lt
 800bfdc:	460b      	movlt	r3, r1
 800bfde:	460c      	mov	r4, r1
 800bfe0:	bfbc      	itt	lt
 800bfe2:	464c      	movlt	r4, r9
 800bfe4:	4699      	movlt	r9, r3
 800bfe6:	6927      	ldr	r7, [r4, #16]
 800bfe8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bfec:	68a3      	ldr	r3, [r4, #8]
 800bfee:	6861      	ldr	r1, [r4, #4]
 800bff0:	eb07 060a 	add.w	r6, r7, sl
 800bff4:	42b3      	cmp	r3, r6
 800bff6:	b085      	sub	sp, #20
 800bff8:	bfb8      	it	lt
 800bffa:	3101      	addlt	r1, #1
 800bffc:	f7ff fed8 	bl	800bdb0 <_Balloc>
 800c000:	b930      	cbnz	r0, 800c010 <__multiply+0x44>
 800c002:	4602      	mov	r2, r0
 800c004:	4b44      	ldr	r3, [pc, #272]	; (800c118 <__multiply+0x14c>)
 800c006:	4845      	ldr	r0, [pc, #276]	; (800c11c <__multiply+0x150>)
 800c008:	f240 115d 	movw	r1, #349	; 0x15d
 800c00c:	f000 fd76 	bl	800cafc <__assert_func>
 800c010:	f100 0514 	add.w	r5, r0, #20
 800c014:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c018:	462b      	mov	r3, r5
 800c01a:	2200      	movs	r2, #0
 800c01c:	4543      	cmp	r3, r8
 800c01e:	d321      	bcc.n	800c064 <__multiply+0x98>
 800c020:	f104 0314 	add.w	r3, r4, #20
 800c024:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c028:	f109 0314 	add.w	r3, r9, #20
 800c02c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c030:	9202      	str	r2, [sp, #8]
 800c032:	1b3a      	subs	r2, r7, r4
 800c034:	3a15      	subs	r2, #21
 800c036:	f022 0203 	bic.w	r2, r2, #3
 800c03a:	3204      	adds	r2, #4
 800c03c:	f104 0115 	add.w	r1, r4, #21
 800c040:	428f      	cmp	r7, r1
 800c042:	bf38      	it	cc
 800c044:	2204      	movcc	r2, #4
 800c046:	9201      	str	r2, [sp, #4]
 800c048:	9a02      	ldr	r2, [sp, #8]
 800c04a:	9303      	str	r3, [sp, #12]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d80c      	bhi.n	800c06a <__multiply+0x9e>
 800c050:	2e00      	cmp	r6, #0
 800c052:	dd03      	ble.n	800c05c <__multiply+0x90>
 800c054:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d05a      	beq.n	800c112 <__multiply+0x146>
 800c05c:	6106      	str	r6, [r0, #16]
 800c05e:	b005      	add	sp, #20
 800c060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c064:	f843 2b04 	str.w	r2, [r3], #4
 800c068:	e7d8      	b.n	800c01c <__multiply+0x50>
 800c06a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c06e:	f1ba 0f00 	cmp.w	sl, #0
 800c072:	d024      	beq.n	800c0be <__multiply+0xf2>
 800c074:	f104 0e14 	add.w	lr, r4, #20
 800c078:	46a9      	mov	r9, r5
 800c07a:	f04f 0c00 	mov.w	ip, #0
 800c07e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c082:	f8d9 1000 	ldr.w	r1, [r9]
 800c086:	fa1f fb82 	uxth.w	fp, r2
 800c08a:	b289      	uxth	r1, r1
 800c08c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c090:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c094:	f8d9 2000 	ldr.w	r2, [r9]
 800c098:	4461      	add	r1, ip
 800c09a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c09e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c0a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c0a6:	b289      	uxth	r1, r1
 800c0a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0ac:	4577      	cmp	r7, lr
 800c0ae:	f849 1b04 	str.w	r1, [r9], #4
 800c0b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0b6:	d8e2      	bhi.n	800c07e <__multiply+0xb2>
 800c0b8:	9a01      	ldr	r2, [sp, #4]
 800c0ba:	f845 c002 	str.w	ip, [r5, r2]
 800c0be:	9a03      	ldr	r2, [sp, #12]
 800c0c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	f1b9 0f00 	cmp.w	r9, #0
 800c0ca:	d020      	beq.n	800c10e <__multiply+0x142>
 800c0cc:	6829      	ldr	r1, [r5, #0]
 800c0ce:	f104 0c14 	add.w	ip, r4, #20
 800c0d2:	46ae      	mov	lr, r5
 800c0d4:	f04f 0a00 	mov.w	sl, #0
 800c0d8:	f8bc b000 	ldrh.w	fp, [ip]
 800c0dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c0e0:	fb09 220b 	mla	r2, r9, fp, r2
 800c0e4:	4492      	add	sl, r2
 800c0e6:	b289      	uxth	r1, r1
 800c0e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c0ec:	f84e 1b04 	str.w	r1, [lr], #4
 800c0f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c0f4:	f8be 1000 	ldrh.w	r1, [lr]
 800c0f8:	0c12      	lsrs	r2, r2, #16
 800c0fa:	fb09 1102 	mla	r1, r9, r2, r1
 800c0fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c102:	4567      	cmp	r7, ip
 800c104:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c108:	d8e6      	bhi.n	800c0d8 <__multiply+0x10c>
 800c10a:	9a01      	ldr	r2, [sp, #4]
 800c10c:	50a9      	str	r1, [r5, r2]
 800c10e:	3504      	adds	r5, #4
 800c110:	e79a      	b.n	800c048 <__multiply+0x7c>
 800c112:	3e01      	subs	r6, #1
 800c114:	e79c      	b.n	800c050 <__multiply+0x84>
 800c116:	bf00      	nop
 800c118:	0800dc07 	.word	0x0800dc07
 800c11c:	0800dc78 	.word	0x0800dc78

0800c120 <__pow5mult>:
 800c120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c124:	4615      	mov	r5, r2
 800c126:	f012 0203 	ands.w	r2, r2, #3
 800c12a:	4606      	mov	r6, r0
 800c12c:	460f      	mov	r7, r1
 800c12e:	d007      	beq.n	800c140 <__pow5mult+0x20>
 800c130:	4c25      	ldr	r4, [pc, #148]	; (800c1c8 <__pow5mult+0xa8>)
 800c132:	3a01      	subs	r2, #1
 800c134:	2300      	movs	r3, #0
 800c136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c13a:	f7ff fe9b 	bl	800be74 <__multadd>
 800c13e:	4607      	mov	r7, r0
 800c140:	10ad      	asrs	r5, r5, #2
 800c142:	d03d      	beq.n	800c1c0 <__pow5mult+0xa0>
 800c144:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c146:	b97c      	cbnz	r4, 800c168 <__pow5mult+0x48>
 800c148:	2010      	movs	r0, #16
 800c14a:	f7fd fe85 	bl	8009e58 <malloc>
 800c14e:	4602      	mov	r2, r0
 800c150:	6270      	str	r0, [r6, #36]	; 0x24
 800c152:	b928      	cbnz	r0, 800c160 <__pow5mult+0x40>
 800c154:	4b1d      	ldr	r3, [pc, #116]	; (800c1cc <__pow5mult+0xac>)
 800c156:	481e      	ldr	r0, [pc, #120]	; (800c1d0 <__pow5mult+0xb0>)
 800c158:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c15c:	f000 fcce 	bl	800cafc <__assert_func>
 800c160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c164:	6004      	str	r4, [r0, #0]
 800c166:	60c4      	str	r4, [r0, #12]
 800c168:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c16c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c170:	b94c      	cbnz	r4, 800c186 <__pow5mult+0x66>
 800c172:	f240 2171 	movw	r1, #625	; 0x271
 800c176:	4630      	mov	r0, r6
 800c178:	f7ff ff12 	bl	800bfa0 <__i2b>
 800c17c:	2300      	movs	r3, #0
 800c17e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c182:	4604      	mov	r4, r0
 800c184:	6003      	str	r3, [r0, #0]
 800c186:	f04f 0900 	mov.w	r9, #0
 800c18a:	07eb      	lsls	r3, r5, #31
 800c18c:	d50a      	bpl.n	800c1a4 <__pow5mult+0x84>
 800c18e:	4639      	mov	r1, r7
 800c190:	4622      	mov	r2, r4
 800c192:	4630      	mov	r0, r6
 800c194:	f7ff ff1a 	bl	800bfcc <__multiply>
 800c198:	4639      	mov	r1, r7
 800c19a:	4680      	mov	r8, r0
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7ff fe47 	bl	800be30 <_Bfree>
 800c1a2:	4647      	mov	r7, r8
 800c1a4:	106d      	asrs	r5, r5, #1
 800c1a6:	d00b      	beq.n	800c1c0 <__pow5mult+0xa0>
 800c1a8:	6820      	ldr	r0, [r4, #0]
 800c1aa:	b938      	cbnz	r0, 800c1bc <__pow5mult+0x9c>
 800c1ac:	4622      	mov	r2, r4
 800c1ae:	4621      	mov	r1, r4
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f7ff ff0b 	bl	800bfcc <__multiply>
 800c1b6:	6020      	str	r0, [r4, #0]
 800c1b8:	f8c0 9000 	str.w	r9, [r0]
 800c1bc:	4604      	mov	r4, r0
 800c1be:	e7e4      	b.n	800c18a <__pow5mult+0x6a>
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1c6:	bf00      	nop
 800c1c8:	0800ddc8 	.word	0x0800ddc8
 800c1cc:	0800db95 	.word	0x0800db95
 800c1d0:	0800dc78 	.word	0x0800dc78

0800c1d4 <__lshift>:
 800c1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d8:	460c      	mov	r4, r1
 800c1da:	6849      	ldr	r1, [r1, #4]
 800c1dc:	6923      	ldr	r3, [r4, #16]
 800c1de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1e2:	68a3      	ldr	r3, [r4, #8]
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	4691      	mov	r9, r2
 800c1e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1ec:	f108 0601 	add.w	r6, r8, #1
 800c1f0:	42b3      	cmp	r3, r6
 800c1f2:	db0b      	blt.n	800c20c <__lshift+0x38>
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	f7ff fddb 	bl	800bdb0 <_Balloc>
 800c1fa:	4605      	mov	r5, r0
 800c1fc:	b948      	cbnz	r0, 800c212 <__lshift+0x3e>
 800c1fe:	4602      	mov	r2, r0
 800c200:	4b2a      	ldr	r3, [pc, #168]	; (800c2ac <__lshift+0xd8>)
 800c202:	482b      	ldr	r0, [pc, #172]	; (800c2b0 <__lshift+0xdc>)
 800c204:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c208:	f000 fc78 	bl	800cafc <__assert_func>
 800c20c:	3101      	adds	r1, #1
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	e7ee      	b.n	800c1f0 <__lshift+0x1c>
 800c212:	2300      	movs	r3, #0
 800c214:	f100 0114 	add.w	r1, r0, #20
 800c218:	f100 0210 	add.w	r2, r0, #16
 800c21c:	4618      	mov	r0, r3
 800c21e:	4553      	cmp	r3, sl
 800c220:	db37      	blt.n	800c292 <__lshift+0xbe>
 800c222:	6920      	ldr	r0, [r4, #16]
 800c224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c228:	f104 0314 	add.w	r3, r4, #20
 800c22c:	f019 091f 	ands.w	r9, r9, #31
 800c230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c234:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c238:	d02f      	beq.n	800c29a <__lshift+0xc6>
 800c23a:	f1c9 0e20 	rsb	lr, r9, #32
 800c23e:	468a      	mov	sl, r1
 800c240:	f04f 0c00 	mov.w	ip, #0
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	fa02 f209 	lsl.w	r2, r2, r9
 800c24a:	ea42 020c 	orr.w	r2, r2, ip
 800c24e:	f84a 2b04 	str.w	r2, [sl], #4
 800c252:	f853 2b04 	ldr.w	r2, [r3], #4
 800c256:	4298      	cmp	r0, r3
 800c258:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c25c:	d8f2      	bhi.n	800c244 <__lshift+0x70>
 800c25e:	1b03      	subs	r3, r0, r4
 800c260:	3b15      	subs	r3, #21
 800c262:	f023 0303 	bic.w	r3, r3, #3
 800c266:	3304      	adds	r3, #4
 800c268:	f104 0215 	add.w	r2, r4, #21
 800c26c:	4290      	cmp	r0, r2
 800c26e:	bf38      	it	cc
 800c270:	2304      	movcc	r3, #4
 800c272:	f841 c003 	str.w	ip, [r1, r3]
 800c276:	f1bc 0f00 	cmp.w	ip, #0
 800c27a:	d001      	beq.n	800c280 <__lshift+0xac>
 800c27c:	f108 0602 	add.w	r6, r8, #2
 800c280:	3e01      	subs	r6, #1
 800c282:	4638      	mov	r0, r7
 800c284:	612e      	str	r6, [r5, #16]
 800c286:	4621      	mov	r1, r4
 800c288:	f7ff fdd2 	bl	800be30 <_Bfree>
 800c28c:	4628      	mov	r0, r5
 800c28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c292:	f842 0f04 	str.w	r0, [r2, #4]!
 800c296:	3301      	adds	r3, #1
 800c298:	e7c1      	b.n	800c21e <__lshift+0x4a>
 800c29a:	3904      	subs	r1, #4
 800c29c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2a4:	4298      	cmp	r0, r3
 800c2a6:	d8f9      	bhi.n	800c29c <__lshift+0xc8>
 800c2a8:	e7ea      	b.n	800c280 <__lshift+0xac>
 800c2aa:	bf00      	nop
 800c2ac:	0800dc07 	.word	0x0800dc07
 800c2b0:	0800dc78 	.word	0x0800dc78

0800c2b4 <__mcmp>:
 800c2b4:	b530      	push	{r4, r5, lr}
 800c2b6:	6902      	ldr	r2, [r0, #16]
 800c2b8:	690c      	ldr	r4, [r1, #16]
 800c2ba:	1b12      	subs	r2, r2, r4
 800c2bc:	d10e      	bne.n	800c2dc <__mcmp+0x28>
 800c2be:	f100 0314 	add.w	r3, r0, #20
 800c2c2:	3114      	adds	r1, #20
 800c2c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c2c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c2cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c2d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c2d4:	42a5      	cmp	r5, r4
 800c2d6:	d003      	beq.n	800c2e0 <__mcmp+0x2c>
 800c2d8:	d305      	bcc.n	800c2e6 <__mcmp+0x32>
 800c2da:	2201      	movs	r2, #1
 800c2dc:	4610      	mov	r0, r2
 800c2de:	bd30      	pop	{r4, r5, pc}
 800c2e0:	4283      	cmp	r3, r0
 800c2e2:	d3f3      	bcc.n	800c2cc <__mcmp+0x18>
 800c2e4:	e7fa      	b.n	800c2dc <__mcmp+0x28>
 800c2e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2ea:	e7f7      	b.n	800c2dc <__mcmp+0x28>

0800c2ec <__mdiff>:
 800c2ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f0:	460c      	mov	r4, r1
 800c2f2:	4606      	mov	r6, r0
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	4690      	mov	r8, r2
 800c2fa:	f7ff ffdb 	bl	800c2b4 <__mcmp>
 800c2fe:	1e05      	subs	r5, r0, #0
 800c300:	d110      	bne.n	800c324 <__mdiff+0x38>
 800c302:	4629      	mov	r1, r5
 800c304:	4630      	mov	r0, r6
 800c306:	f7ff fd53 	bl	800bdb0 <_Balloc>
 800c30a:	b930      	cbnz	r0, 800c31a <__mdiff+0x2e>
 800c30c:	4b3a      	ldr	r3, [pc, #232]	; (800c3f8 <__mdiff+0x10c>)
 800c30e:	4602      	mov	r2, r0
 800c310:	f240 2132 	movw	r1, #562	; 0x232
 800c314:	4839      	ldr	r0, [pc, #228]	; (800c3fc <__mdiff+0x110>)
 800c316:	f000 fbf1 	bl	800cafc <__assert_func>
 800c31a:	2301      	movs	r3, #1
 800c31c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c324:	bfa4      	itt	ge
 800c326:	4643      	movge	r3, r8
 800c328:	46a0      	movge	r8, r4
 800c32a:	4630      	mov	r0, r6
 800c32c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c330:	bfa6      	itte	ge
 800c332:	461c      	movge	r4, r3
 800c334:	2500      	movge	r5, #0
 800c336:	2501      	movlt	r5, #1
 800c338:	f7ff fd3a 	bl	800bdb0 <_Balloc>
 800c33c:	b920      	cbnz	r0, 800c348 <__mdiff+0x5c>
 800c33e:	4b2e      	ldr	r3, [pc, #184]	; (800c3f8 <__mdiff+0x10c>)
 800c340:	4602      	mov	r2, r0
 800c342:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c346:	e7e5      	b.n	800c314 <__mdiff+0x28>
 800c348:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c34c:	6926      	ldr	r6, [r4, #16]
 800c34e:	60c5      	str	r5, [r0, #12]
 800c350:	f104 0914 	add.w	r9, r4, #20
 800c354:	f108 0514 	add.w	r5, r8, #20
 800c358:	f100 0e14 	add.w	lr, r0, #20
 800c35c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c360:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c364:	f108 0210 	add.w	r2, r8, #16
 800c368:	46f2      	mov	sl, lr
 800c36a:	2100      	movs	r1, #0
 800c36c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c370:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c374:	fa1f f883 	uxth.w	r8, r3
 800c378:	fa11 f18b 	uxtah	r1, r1, fp
 800c37c:	0c1b      	lsrs	r3, r3, #16
 800c37e:	eba1 0808 	sub.w	r8, r1, r8
 800c382:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c386:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c38a:	fa1f f888 	uxth.w	r8, r8
 800c38e:	1419      	asrs	r1, r3, #16
 800c390:	454e      	cmp	r6, r9
 800c392:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c396:	f84a 3b04 	str.w	r3, [sl], #4
 800c39a:	d8e7      	bhi.n	800c36c <__mdiff+0x80>
 800c39c:	1b33      	subs	r3, r6, r4
 800c39e:	3b15      	subs	r3, #21
 800c3a0:	f023 0303 	bic.w	r3, r3, #3
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	3415      	adds	r4, #21
 800c3a8:	42a6      	cmp	r6, r4
 800c3aa:	bf38      	it	cc
 800c3ac:	2304      	movcc	r3, #4
 800c3ae:	441d      	add	r5, r3
 800c3b0:	4473      	add	r3, lr
 800c3b2:	469e      	mov	lr, r3
 800c3b4:	462e      	mov	r6, r5
 800c3b6:	4566      	cmp	r6, ip
 800c3b8:	d30e      	bcc.n	800c3d8 <__mdiff+0xec>
 800c3ba:	f10c 0203 	add.w	r2, ip, #3
 800c3be:	1b52      	subs	r2, r2, r5
 800c3c0:	f022 0203 	bic.w	r2, r2, #3
 800c3c4:	3d03      	subs	r5, #3
 800c3c6:	45ac      	cmp	ip, r5
 800c3c8:	bf38      	it	cc
 800c3ca:	2200      	movcc	r2, #0
 800c3cc:	441a      	add	r2, r3
 800c3ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c3d2:	b17b      	cbz	r3, 800c3f4 <__mdiff+0x108>
 800c3d4:	6107      	str	r7, [r0, #16]
 800c3d6:	e7a3      	b.n	800c320 <__mdiff+0x34>
 800c3d8:	f856 8b04 	ldr.w	r8, [r6], #4
 800c3dc:	fa11 f288 	uxtah	r2, r1, r8
 800c3e0:	1414      	asrs	r4, r2, #16
 800c3e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c3e6:	b292      	uxth	r2, r2
 800c3e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c3ec:	f84e 2b04 	str.w	r2, [lr], #4
 800c3f0:	1421      	asrs	r1, r4, #16
 800c3f2:	e7e0      	b.n	800c3b6 <__mdiff+0xca>
 800c3f4:	3f01      	subs	r7, #1
 800c3f6:	e7ea      	b.n	800c3ce <__mdiff+0xe2>
 800c3f8:	0800dc07 	.word	0x0800dc07
 800c3fc:	0800dc78 	.word	0x0800dc78

0800c400 <__d2b>:
 800c400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c404:	4689      	mov	r9, r1
 800c406:	2101      	movs	r1, #1
 800c408:	ec57 6b10 	vmov	r6, r7, d0
 800c40c:	4690      	mov	r8, r2
 800c40e:	f7ff fccf 	bl	800bdb0 <_Balloc>
 800c412:	4604      	mov	r4, r0
 800c414:	b930      	cbnz	r0, 800c424 <__d2b+0x24>
 800c416:	4602      	mov	r2, r0
 800c418:	4b25      	ldr	r3, [pc, #148]	; (800c4b0 <__d2b+0xb0>)
 800c41a:	4826      	ldr	r0, [pc, #152]	; (800c4b4 <__d2b+0xb4>)
 800c41c:	f240 310a 	movw	r1, #778	; 0x30a
 800c420:	f000 fb6c 	bl	800cafc <__assert_func>
 800c424:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c42c:	bb35      	cbnz	r5, 800c47c <__d2b+0x7c>
 800c42e:	2e00      	cmp	r6, #0
 800c430:	9301      	str	r3, [sp, #4]
 800c432:	d028      	beq.n	800c486 <__d2b+0x86>
 800c434:	4668      	mov	r0, sp
 800c436:	9600      	str	r6, [sp, #0]
 800c438:	f7ff fd82 	bl	800bf40 <__lo0bits>
 800c43c:	9900      	ldr	r1, [sp, #0]
 800c43e:	b300      	cbz	r0, 800c482 <__d2b+0x82>
 800c440:	9a01      	ldr	r2, [sp, #4]
 800c442:	f1c0 0320 	rsb	r3, r0, #32
 800c446:	fa02 f303 	lsl.w	r3, r2, r3
 800c44a:	430b      	orrs	r3, r1
 800c44c:	40c2      	lsrs	r2, r0
 800c44e:	6163      	str	r3, [r4, #20]
 800c450:	9201      	str	r2, [sp, #4]
 800c452:	9b01      	ldr	r3, [sp, #4]
 800c454:	61a3      	str	r3, [r4, #24]
 800c456:	2b00      	cmp	r3, #0
 800c458:	bf14      	ite	ne
 800c45a:	2202      	movne	r2, #2
 800c45c:	2201      	moveq	r2, #1
 800c45e:	6122      	str	r2, [r4, #16]
 800c460:	b1d5      	cbz	r5, 800c498 <__d2b+0x98>
 800c462:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c466:	4405      	add	r5, r0
 800c468:	f8c9 5000 	str.w	r5, [r9]
 800c46c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c470:	f8c8 0000 	str.w	r0, [r8]
 800c474:	4620      	mov	r0, r4
 800c476:	b003      	add	sp, #12
 800c478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c47c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c480:	e7d5      	b.n	800c42e <__d2b+0x2e>
 800c482:	6161      	str	r1, [r4, #20]
 800c484:	e7e5      	b.n	800c452 <__d2b+0x52>
 800c486:	a801      	add	r0, sp, #4
 800c488:	f7ff fd5a 	bl	800bf40 <__lo0bits>
 800c48c:	9b01      	ldr	r3, [sp, #4]
 800c48e:	6163      	str	r3, [r4, #20]
 800c490:	2201      	movs	r2, #1
 800c492:	6122      	str	r2, [r4, #16]
 800c494:	3020      	adds	r0, #32
 800c496:	e7e3      	b.n	800c460 <__d2b+0x60>
 800c498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c49c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c4a0:	f8c9 0000 	str.w	r0, [r9]
 800c4a4:	6918      	ldr	r0, [r3, #16]
 800c4a6:	f7ff fd2b 	bl	800bf00 <__hi0bits>
 800c4aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4ae:	e7df      	b.n	800c470 <__d2b+0x70>
 800c4b0:	0800dc07 	.word	0x0800dc07
 800c4b4:	0800dc78 	.word	0x0800dc78

0800c4b8 <_calloc_r>:
 800c4b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4ba:	fba1 2402 	umull	r2, r4, r1, r2
 800c4be:	b94c      	cbnz	r4, 800c4d4 <_calloc_r+0x1c>
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	9201      	str	r2, [sp, #4]
 800c4c4:	f7fd fd4c 	bl	8009f60 <_malloc_r>
 800c4c8:	9a01      	ldr	r2, [sp, #4]
 800c4ca:	4605      	mov	r5, r0
 800c4cc:	b930      	cbnz	r0, 800c4dc <_calloc_r+0x24>
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	b003      	add	sp, #12
 800c4d2:	bd30      	pop	{r4, r5, pc}
 800c4d4:	220c      	movs	r2, #12
 800c4d6:	6002      	str	r2, [r0, #0]
 800c4d8:	2500      	movs	r5, #0
 800c4da:	e7f8      	b.n	800c4ce <_calloc_r+0x16>
 800c4dc:	4621      	mov	r1, r4
 800c4de:	f7fd fccb 	bl	8009e78 <memset>
 800c4e2:	e7f4      	b.n	800c4ce <_calloc_r+0x16>

0800c4e4 <__ssputs_r>:
 800c4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e8:	688e      	ldr	r6, [r1, #8]
 800c4ea:	429e      	cmp	r6, r3
 800c4ec:	4682      	mov	sl, r0
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	4690      	mov	r8, r2
 800c4f2:	461f      	mov	r7, r3
 800c4f4:	d838      	bhi.n	800c568 <__ssputs_r+0x84>
 800c4f6:	898a      	ldrh	r2, [r1, #12]
 800c4f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4fc:	d032      	beq.n	800c564 <__ssputs_r+0x80>
 800c4fe:	6825      	ldr	r5, [r4, #0]
 800c500:	6909      	ldr	r1, [r1, #16]
 800c502:	eba5 0901 	sub.w	r9, r5, r1
 800c506:	6965      	ldr	r5, [r4, #20]
 800c508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c50c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c510:	3301      	adds	r3, #1
 800c512:	444b      	add	r3, r9
 800c514:	106d      	asrs	r5, r5, #1
 800c516:	429d      	cmp	r5, r3
 800c518:	bf38      	it	cc
 800c51a:	461d      	movcc	r5, r3
 800c51c:	0553      	lsls	r3, r2, #21
 800c51e:	d531      	bpl.n	800c584 <__ssputs_r+0xa0>
 800c520:	4629      	mov	r1, r5
 800c522:	f7fd fd1d 	bl	8009f60 <_malloc_r>
 800c526:	4606      	mov	r6, r0
 800c528:	b950      	cbnz	r0, 800c540 <__ssputs_r+0x5c>
 800c52a:	230c      	movs	r3, #12
 800c52c:	f8ca 3000 	str.w	r3, [sl]
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c536:	81a3      	strh	r3, [r4, #12]
 800c538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c540:	6921      	ldr	r1, [r4, #16]
 800c542:	464a      	mov	r2, r9
 800c544:	f7ff fc1a 	bl	800bd7c <memcpy>
 800c548:	89a3      	ldrh	r3, [r4, #12]
 800c54a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c54e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c552:	81a3      	strh	r3, [r4, #12]
 800c554:	6126      	str	r6, [r4, #16]
 800c556:	6165      	str	r5, [r4, #20]
 800c558:	444e      	add	r6, r9
 800c55a:	eba5 0509 	sub.w	r5, r5, r9
 800c55e:	6026      	str	r6, [r4, #0]
 800c560:	60a5      	str	r5, [r4, #8]
 800c562:	463e      	mov	r6, r7
 800c564:	42be      	cmp	r6, r7
 800c566:	d900      	bls.n	800c56a <__ssputs_r+0x86>
 800c568:	463e      	mov	r6, r7
 800c56a:	6820      	ldr	r0, [r4, #0]
 800c56c:	4632      	mov	r2, r6
 800c56e:	4641      	mov	r1, r8
 800c570:	f000 fb4a 	bl	800cc08 <memmove>
 800c574:	68a3      	ldr	r3, [r4, #8]
 800c576:	1b9b      	subs	r3, r3, r6
 800c578:	60a3      	str	r3, [r4, #8]
 800c57a:	6823      	ldr	r3, [r4, #0]
 800c57c:	4433      	add	r3, r6
 800c57e:	6023      	str	r3, [r4, #0]
 800c580:	2000      	movs	r0, #0
 800c582:	e7db      	b.n	800c53c <__ssputs_r+0x58>
 800c584:	462a      	mov	r2, r5
 800c586:	f000 fb59 	bl	800cc3c <_realloc_r>
 800c58a:	4606      	mov	r6, r0
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d1e1      	bne.n	800c554 <__ssputs_r+0x70>
 800c590:	6921      	ldr	r1, [r4, #16]
 800c592:	4650      	mov	r0, sl
 800c594:	f7fd fc78 	bl	8009e88 <_free_r>
 800c598:	e7c7      	b.n	800c52a <__ssputs_r+0x46>
	...

0800c59c <_svfiprintf_r>:
 800c59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a0:	4698      	mov	r8, r3
 800c5a2:	898b      	ldrh	r3, [r1, #12]
 800c5a4:	061b      	lsls	r3, r3, #24
 800c5a6:	b09d      	sub	sp, #116	; 0x74
 800c5a8:	4607      	mov	r7, r0
 800c5aa:	460d      	mov	r5, r1
 800c5ac:	4614      	mov	r4, r2
 800c5ae:	d50e      	bpl.n	800c5ce <_svfiprintf_r+0x32>
 800c5b0:	690b      	ldr	r3, [r1, #16]
 800c5b2:	b963      	cbnz	r3, 800c5ce <_svfiprintf_r+0x32>
 800c5b4:	2140      	movs	r1, #64	; 0x40
 800c5b6:	f7fd fcd3 	bl	8009f60 <_malloc_r>
 800c5ba:	6028      	str	r0, [r5, #0]
 800c5bc:	6128      	str	r0, [r5, #16]
 800c5be:	b920      	cbnz	r0, 800c5ca <_svfiprintf_r+0x2e>
 800c5c0:	230c      	movs	r3, #12
 800c5c2:	603b      	str	r3, [r7, #0]
 800c5c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5c8:	e0d1      	b.n	800c76e <_svfiprintf_r+0x1d2>
 800c5ca:	2340      	movs	r3, #64	; 0x40
 800c5cc:	616b      	str	r3, [r5, #20]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d2:	2320      	movs	r3, #32
 800c5d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5dc:	2330      	movs	r3, #48	; 0x30
 800c5de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c788 <_svfiprintf_r+0x1ec>
 800c5e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5e6:	f04f 0901 	mov.w	r9, #1
 800c5ea:	4623      	mov	r3, r4
 800c5ec:	469a      	mov	sl, r3
 800c5ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5f2:	b10a      	cbz	r2, 800c5f8 <_svfiprintf_r+0x5c>
 800c5f4:	2a25      	cmp	r2, #37	; 0x25
 800c5f6:	d1f9      	bne.n	800c5ec <_svfiprintf_r+0x50>
 800c5f8:	ebba 0b04 	subs.w	fp, sl, r4
 800c5fc:	d00b      	beq.n	800c616 <_svfiprintf_r+0x7a>
 800c5fe:	465b      	mov	r3, fp
 800c600:	4622      	mov	r2, r4
 800c602:	4629      	mov	r1, r5
 800c604:	4638      	mov	r0, r7
 800c606:	f7ff ff6d 	bl	800c4e4 <__ssputs_r>
 800c60a:	3001      	adds	r0, #1
 800c60c:	f000 80aa 	beq.w	800c764 <_svfiprintf_r+0x1c8>
 800c610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c612:	445a      	add	r2, fp
 800c614:	9209      	str	r2, [sp, #36]	; 0x24
 800c616:	f89a 3000 	ldrb.w	r3, [sl]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f000 80a2 	beq.w	800c764 <_svfiprintf_r+0x1c8>
 800c620:	2300      	movs	r3, #0
 800c622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c62a:	f10a 0a01 	add.w	sl, sl, #1
 800c62e:	9304      	str	r3, [sp, #16]
 800c630:	9307      	str	r3, [sp, #28]
 800c632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c636:	931a      	str	r3, [sp, #104]	; 0x68
 800c638:	4654      	mov	r4, sl
 800c63a:	2205      	movs	r2, #5
 800c63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c640:	4851      	ldr	r0, [pc, #324]	; (800c788 <_svfiprintf_r+0x1ec>)
 800c642:	f7f3 fde5 	bl	8000210 <memchr>
 800c646:	9a04      	ldr	r2, [sp, #16]
 800c648:	b9d8      	cbnz	r0, 800c682 <_svfiprintf_r+0xe6>
 800c64a:	06d0      	lsls	r0, r2, #27
 800c64c:	bf44      	itt	mi
 800c64e:	2320      	movmi	r3, #32
 800c650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c654:	0711      	lsls	r1, r2, #28
 800c656:	bf44      	itt	mi
 800c658:	232b      	movmi	r3, #43	; 0x2b
 800c65a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c65e:	f89a 3000 	ldrb.w	r3, [sl]
 800c662:	2b2a      	cmp	r3, #42	; 0x2a
 800c664:	d015      	beq.n	800c692 <_svfiprintf_r+0xf6>
 800c666:	9a07      	ldr	r2, [sp, #28]
 800c668:	4654      	mov	r4, sl
 800c66a:	2000      	movs	r0, #0
 800c66c:	f04f 0c0a 	mov.w	ip, #10
 800c670:	4621      	mov	r1, r4
 800c672:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c676:	3b30      	subs	r3, #48	; 0x30
 800c678:	2b09      	cmp	r3, #9
 800c67a:	d94e      	bls.n	800c71a <_svfiprintf_r+0x17e>
 800c67c:	b1b0      	cbz	r0, 800c6ac <_svfiprintf_r+0x110>
 800c67e:	9207      	str	r2, [sp, #28]
 800c680:	e014      	b.n	800c6ac <_svfiprintf_r+0x110>
 800c682:	eba0 0308 	sub.w	r3, r0, r8
 800c686:	fa09 f303 	lsl.w	r3, r9, r3
 800c68a:	4313      	orrs	r3, r2
 800c68c:	9304      	str	r3, [sp, #16]
 800c68e:	46a2      	mov	sl, r4
 800c690:	e7d2      	b.n	800c638 <_svfiprintf_r+0x9c>
 800c692:	9b03      	ldr	r3, [sp, #12]
 800c694:	1d19      	adds	r1, r3, #4
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	9103      	str	r1, [sp, #12]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	bfbb      	ittet	lt
 800c69e:	425b      	neglt	r3, r3
 800c6a0:	f042 0202 	orrlt.w	r2, r2, #2
 800c6a4:	9307      	strge	r3, [sp, #28]
 800c6a6:	9307      	strlt	r3, [sp, #28]
 800c6a8:	bfb8      	it	lt
 800c6aa:	9204      	strlt	r2, [sp, #16]
 800c6ac:	7823      	ldrb	r3, [r4, #0]
 800c6ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c6b0:	d10c      	bne.n	800c6cc <_svfiprintf_r+0x130>
 800c6b2:	7863      	ldrb	r3, [r4, #1]
 800c6b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6b6:	d135      	bne.n	800c724 <_svfiprintf_r+0x188>
 800c6b8:	9b03      	ldr	r3, [sp, #12]
 800c6ba:	1d1a      	adds	r2, r3, #4
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	9203      	str	r2, [sp, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bfb8      	it	lt
 800c6c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c6c8:	3402      	adds	r4, #2
 800c6ca:	9305      	str	r3, [sp, #20]
 800c6cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c798 <_svfiprintf_r+0x1fc>
 800c6d0:	7821      	ldrb	r1, [r4, #0]
 800c6d2:	2203      	movs	r2, #3
 800c6d4:	4650      	mov	r0, sl
 800c6d6:	f7f3 fd9b 	bl	8000210 <memchr>
 800c6da:	b140      	cbz	r0, 800c6ee <_svfiprintf_r+0x152>
 800c6dc:	2340      	movs	r3, #64	; 0x40
 800c6de:	eba0 000a 	sub.w	r0, r0, sl
 800c6e2:	fa03 f000 	lsl.w	r0, r3, r0
 800c6e6:	9b04      	ldr	r3, [sp, #16]
 800c6e8:	4303      	orrs	r3, r0
 800c6ea:	3401      	adds	r4, #1
 800c6ec:	9304      	str	r3, [sp, #16]
 800c6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f2:	4826      	ldr	r0, [pc, #152]	; (800c78c <_svfiprintf_r+0x1f0>)
 800c6f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6f8:	2206      	movs	r2, #6
 800c6fa:	f7f3 fd89 	bl	8000210 <memchr>
 800c6fe:	2800      	cmp	r0, #0
 800c700:	d038      	beq.n	800c774 <_svfiprintf_r+0x1d8>
 800c702:	4b23      	ldr	r3, [pc, #140]	; (800c790 <_svfiprintf_r+0x1f4>)
 800c704:	bb1b      	cbnz	r3, 800c74e <_svfiprintf_r+0x1b2>
 800c706:	9b03      	ldr	r3, [sp, #12]
 800c708:	3307      	adds	r3, #7
 800c70a:	f023 0307 	bic.w	r3, r3, #7
 800c70e:	3308      	adds	r3, #8
 800c710:	9303      	str	r3, [sp, #12]
 800c712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c714:	4433      	add	r3, r6
 800c716:	9309      	str	r3, [sp, #36]	; 0x24
 800c718:	e767      	b.n	800c5ea <_svfiprintf_r+0x4e>
 800c71a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c71e:	460c      	mov	r4, r1
 800c720:	2001      	movs	r0, #1
 800c722:	e7a5      	b.n	800c670 <_svfiprintf_r+0xd4>
 800c724:	2300      	movs	r3, #0
 800c726:	3401      	adds	r4, #1
 800c728:	9305      	str	r3, [sp, #20]
 800c72a:	4619      	mov	r1, r3
 800c72c:	f04f 0c0a 	mov.w	ip, #10
 800c730:	4620      	mov	r0, r4
 800c732:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c736:	3a30      	subs	r2, #48	; 0x30
 800c738:	2a09      	cmp	r2, #9
 800c73a:	d903      	bls.n	800c744 <_svfiprintf_r+0x1a8>
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d0c5      	beq.n	800c6cc <_svfiprintf_r+0x130>
 800c740:	9105      	str	r1, [sp, #20]
 800c742:	e7c3      	b.n	800c6cc <_svfiprintf_r+0x130>
 800c744:	fb0c 2101 	mla	r1, ip, r1, r2
 800c748:	4604      	mov	r4, r0
 800c74a:	2301      	movs	r3, #1
 800c74c:	e7f0      	b.n	800c730 <_svfiprintf_r+0x194>
 800c74e:	ab03      	add	r3, sp, #12
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	462a      	mov	r2, r5
 800c754:	4b0f      	ldr	r3, [pc, #60]	; (800c794 <_svfiprintf_r+0x1f8>)
 800c756:	a904      	add	r1, sp, #16
 800c758:	4638      	mov	r0, r7
 800c75a:	f7fd fd15 	bl	800a188 <_printf_float>
 800c75e:	1c42      	adds	r2, r0, #1
 800c760:	4606      	mov	r6, r0
 800c762:	d1d6      	bne.n	800c712 <_svfiprintf_r+0x176>
 800c764:	89ab      	ldrh	r3, [r5, #12]
 800c766:	065b      	lsls	r3, r3, #25
 800c768:	f53f af2c 	bmi.w	800c5c4 <_svfiprintf_r+0x28>
 800c76c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c76e:	b01d      	add	sp, #116	; 0x74
 800c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c774:	ab03      	add	r3, sp, #12
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	462a      	mov	r2, r5
 800c77a:	4b06      	ldr	r3, [pc, #24]	; (800c794 <_svfiprintf_r+0x1f8>)
 800c77c:	a904      	add	r1, sp, #16
 800c77e:	4638      	mov	r0, r7
 800c780:	f7fd ffa6 	bl	800a6d0 <_printf_i>
 800c784:	e7eb      	b.n	800c75e <_svfiprintf_r+0x1c2>
 800c786:	bf00      	nop
 800c788:	0800ddd4 	.word	0x0800ddd4
 800c78c:	0800ddde 	.word	0x0800ddde
 800c790:	0800a189 	.word	0x0800a189
 800c794:	0800c4e5 	.word	0x0800c4e5
 800c798:	0800ddda 	.word	0x0800ddda

0800c79c <__sfputc_r>:
 800c79c:	6893      	ldr	r3, [r2, #8]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	b410      	push	{r4}
 800c7a4:	6093      	str	r3, [r2, #8]
 800c7a6:	da08      	bge.n	800c7ba <__sfputc_r+0x1e>
 800c7a8:	6994      	ldr	r4, [r2, #24]
 800c7aa:	42a3      	cmp	r3, r4
 800c7ac:	db01      	blt.n	800c7b2 <__sfputc_r+0x16>
 800c7ae:	290a      	cmp	r1, #10
 800c7b0:	d103      	bne.n	800c7ba <__sfputc_r+0x1e>
 800c7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7b6:	f7fe b983 	b.w	800aac0 <__swbuf_r>
 800c7ba:	6813      	ldr	r3, [r2, #0]
 800c7bc:	1c58      	adds	r0, r3, #1
 800c7be:	6010      	str	r0, [r2, #0]
 800c7c0:	7019      	strb	r1, [r3, #0]
 800c7c2:	4608      	mov	r0, r1
 800c7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <__sfputs_r>:
 800c7ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7cc:	4606      	mov	r6, r0
 800c7ce:	460f      	mov	r7, r1
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	18d5      	adds	r5, r2, r3
 800c7d4:	42ac      	cmp	r4, r5
 800c7d6:	d101      	bne.n	800c7dc <__sfputs_r+0x12>
 800c7d8:	2000      	movs	r0, #0
 800c7da:	e007      	b.n	800c7ec <__sfputs_r+0x22>
 800c7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7e0:	463a      	mov	r2, r7
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7ff ffda 	bl	800c79c <__sfputc_r>
 800c7e8:	1c43      	adds	r3, r0, #1
 800c7ea:	d1f3      	bne.n	800c7d4 <__sfputs_r+0xa>
 800c7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7f0 <_vfiprintf_r>:
 800c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f4:	460d      	mov	r5, r1
 800c7f6:	b09d      	sub	sp, #116	; 0x74
 800c7f8:	4614      	mov	r4, r2
 800c7fa:	4698      	mov	r8, r3
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	b118      	cbz	r0, 800c808 <_vfiprintf_r+0x18>
 800c800:	6983      	ldr	r3, [r0, #24]
 800c802:	b90b      	cbnz	r3, 800c808 <_vfiprintf_r+0x18>
 800c804:	f7ff f9b0 	bl	800bb68 <__sinit>
 800c808:	4b89      	ldr	r3, [pc, #548]	; (800ca30 <_vfiprintf_r+0x240>)
 800c80a:	429d      	cmp	r5, r3
 800c80c:	d11b      	bne.n	800c846 <_vfiprintf_r+0x56>
 800c80e:	6875      	ldr	r5, [r6, #4]
 800c810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c812:	07d9      	lsls	r1, r3, #31
 800c814:	d405      	bmi.n	800c822 <_vfiprintf_r+0x32>
 800c816:	89ab      	ldrh	r3, [r5, #12]
 800c818:	059a      	lsls	r2, r3, #22
 800c81a:	d402      	bmi.n	800c822 <_vfiprintf_r+0x32>
 800c81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c81e:	f7ff fa46 	bl	800bcae <__retarget_lock_acquire_recursive>
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	071b      	lsls	r3, r3, #28
 800c826:	d501      	bpl.n	800c82c <_vfiprintf_r+0x3c>
 800c828:	692b      	ldr	r3, [r5, #16]
 800c82a:	b9eb      	cbnz	r3, 800c868 <_vfiprintf_r+0x78>
 800c82c:	4629      	mov	r1, r5
 800c82e:	4630      	mov	r0, r6
 800c830:	f7fe f998 	bl	800ab64 <__swsetup_r>
 800c834:	b1c0      	cbz	r0, 800c868 <_vfiprintf_r+0x78>
 800c836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c838:	07dc      	lsls	r4, r3, #31
 800c83a:	d50e      	bpl.n	800c85a <_vfiprintf_r+0x6a>
 800c83c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c840:	b01d      	add	sp, #116	; 0x74
 800c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c846:	4b7b      	ldr	r3, [pc, #492]	; (800ca34 <_vfiprintf_r+0x244>)
 800c848:	429d      	cmp	r5, r3
 800c84a:	d101      	bne.n	800c850 <_vfiprintf_r+0x60>
 800c84c:	68b5      	ldr	r5, [r6, #8]
 800c84e:	e7df      	b.n	800c810 <_vfiprintf_r+0x20>
 800c850:	4b79      	ldr	r3, [pc, #484]	; (800ca38 <_vfiprintf_r+0x248>)
 800c852:	429d      	cmp	r5, r3
 800c854:	bf08      	it	eq
 800c856:	68f5      	ldreq	r5, [r6, #12]
 800c858:	e7da      	b.n	800c810 <_vfiprintf_r+0x20>
 800c85a:	89ab      	ldrh	r3, [r5, #12]
 800c85c:	0598      	lsls	r0, r3, #22
 800c85e:	d4ed      	bmi.n	800c83c <_vfiprintf_r+0x4c>
 800c860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c862:	f7ff fa25 	bl	800bcb0 <__retarget_lock_release_recursive>
 800c866:	e7e9      	b.n	800c83c <_vfiprintf_r+0x4c>
 800c868:	2300      	movs	r3, #0
 800c86a:	9309      	str	r3, [sp, #36]	; 0x24
 800c86c:	2320      	movs	r3, #32
 800c86e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c872:	f8cd 800c 	str.w	r8, [sp, #12]
 800c876:	2330      	movs	r3, #48	; 0x30
 800c878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca3c <_vfiprintf_r+0x24c>
 800c87c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c880:	f04f 0901 	mov.w	r9, #1
 800c884:	4623      	mov	r3, r4
 800c886:	469a      	mov	sl, r3
 800c888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c88c:	b10a      	cbz	r2, 800c892 <_vfiprintf_r+0xa2>
 800c88e:	2a25      	cmp	r2, #37	; 0x25
 800c890:	d1f9      	bne.n	800c886 <_vfiprintf_r+0x96>
 800c892:	ebba 0b04 	subs.w	fp, sl, r4
 800c896:	d00b      	beq.n	800c8b0 <_vfiprintf_r+0xc0>
 800c898:	465b      	mov	r3, fp
 800c89a:	4622      	mov	r2, r4
 800c89c:	4629      	mov	r1, r5
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f7ff ff93 	bl	800c7ca <__sfputs_r>
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	f000 80aa 	beq.w	800c9fe <_vfiprintf_r+0x20e>
 800c8aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8ac:	445a      	add	r2, fp
 800c8ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 80a2 	beq.w	800c9fe <_vfiprintf_r+0x20e>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8c4:	f10a 0a01 	add.w	sl, sl, #1
 800c8c8:	9304      	str	r3, [sp, #16]
 800c8ca:	9307      	str	r3, [sp, #28]
 800c8cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8d0:	931a      	str	r3, [sp, #104]	; 0x68
 800c8d2:	4654      	mov	r4, sl
 800c8d4:	2205      	movs	r2, #5
 800c8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8da:	4858      	ldr	r0, [pc, #352]	; (800ca3c <_vfiprintf_r+0x24c>)
 800c8dc:	f7f3 fc98 	bl	8000210 <memchr>
 800c8e0:	9a04      	ldr	r2, [sp, #16]
 800c8e2:	b9d8      	cbnz	r0, 800c91c <_vfiprintf_r+0x12c>
 800c8e4:	06d1      	lsls	r1, r2, #27
 800c8e6:	bf44      	itt	mi
 800c8e8:	2320      	movmi	r3, #32
 800c8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ee:	0713      	lsls	r3, r2, #28
 800c8f0:	bf44      	itt	mi
 800c8f2:	232b      	movmi	r3, #43	; 0x2b
 800c8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c8fe:	d015      	beq.n	800c92c <_vfiprintf_r+0x13c>
 800c900:	9a07      	ldr	r2, [sp, #28]
 800c902:	4654      	mov	r4, sl
 800c904:	2000      	movs	r0, #0
 800c906:	f04f 0c0a 	mov.w	ip, #10
 800c90a:	4621      	mov	r1, r4
 800c90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c910:	3b30      	subs	r3, #48	; 0x30
 800c912:	2b09      	cmp	r3, #9
 800c914:	d94e      	bls.n	800c9b4 <_vfiprintf_r+0x1c4>
 800c916:	b1b0      	cbz	r0, 800c946 <_vfiprintf_r+0x156>
 800c918:	9207      	str	r2, [sp, #28]
 800c91a:	e014      	b.n	800c946 <_vfiprintf_r+0x156>
 800c91c:	eba0 0308 	sub.w	r3, r0, r8
 800c920:	fa09 f303 	lsl.w	r3, r9, r3
 800c924:	4313      	orrs	r3, r2
 800c926:	9304      	str	r3, [sp, #16]
 800c928:	46a2      	mov	sl, r4
 800c92a:	e7d2      	b.n	800c8d2 <_vfiprintf_r+0xe2>
 800c92c:	9b03      	ldr	r3, [sp, #12]
 800c92e:	1d19      	adds	r1, r3, #4
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	9103      	str	r1, [sp, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	bfbb      	ittet	lt
 800c938:	425b      	neglt	r3, r3
 800c93a:	f042 0202 	orrlt.w	r2, r2, #2
 800c93e:	9307      	strge	r3, [sp, #28]
 800c940:	9307      	strlt	r3, [sp, #28]
 800c942:	bfb8      	it	lt
 800c944:	9204      	strlt	r2, [sp, #16]
 800c946:	7823      	ldrb	r3, [r4, #0]
 800c948:	2b2e      	cmp	r3, #46	; 0x2e
 800c94a:	d10c      	bne.n	800c966 <_vfiprintf_r+0x176>
 800c94c:	7863      	ldrb	r3, [r4, #1]
 800c94e:	2b2a      	cmp	r3, #42	; 0x2a
 800c950:	d135      	bne.n	800c9be <_vfiprintf_r+0x1ce>
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	1d1a      	adds	r2, r3, #4
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	9203      	str	r2, [sp, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	bfb8      	it	lt
 800c95e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c962:	3402      	adds	r4, #2
 800c964:	9305      	str	r3, [sp, #20]
 800c966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca4c <_vfiprintf_r+0x25c>
 800c96a:	7821      	ldrb	r1, [r4, #0]
 800c96c:	2203      	movs	r2, #3
 800c96e:	4650      	mov	r0, sl
 800c970:	f7f3 fc4e 	bl	8000210 <memchr>
 800c974:	b140      	cbz	r0, 800c988 <_vfiprintf_r+0x198>
 800c976:	2340      	movs	r3, #64	; 0x40
 800c978:	eba0 000a 	sub.w	r0, r0, sl
 800c97c:	fa03 f000 	lsl.w	r0, r3, r0
 800c980:	9b04      	ldr	r3, [sp, #16]
 800c982:	4303      	orrs	r3, r0
 800c984:	3401      	adds	r4, #1
 800c986:	9304      	str	r3, [sp, #16]
 800c988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c98c:	482c      	ldr	r0, [pc, #176]	; (800ca40 <_vfiprintf_r+0x250>)
 800c98e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c992:	2206      	movs	r2, #6
 800c994:	f7f3 fc3c 	bl	8000210 <memchr>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d03f      	beq.n	800ca1c <_vfiprintf_r+0x22c>
 800c99c:	4b29      	ldr	r3, [pc, #164]	; (800ca44 <_vfiprintf_r+0x254>)
 800c99e:	bb1b      	cbnz	r3, 800c9e8 <_vfiprintf_r+0x1f8>
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	3307      	adds	r3, #7
 800c9a4:	f023 0307 	bic.w	r3, r3, #7
 800c9a8:	3308      	adds	r3, #8
 800c9aa:	9303      	str	r3, [sp, #12]
 800c9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ae:	443b      	add	r3, r7
 800c9b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9b2:	e767      	b.n	800c884 <_vfiprintf_r+0x94>
 800c9b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	2001      	movs	r0, #1
 800c9bc:	e7a5      	b.n	800c90a <_vfiprintf_r+0x11a>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	3401      	adds	r4, #1
 800c9c2:	9305      	str	r3, [sp, #20]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	f04f 0c0a 	mov.w	ip, #10
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9d0:	3a30      	subs	r2, #48	; 0x30
 800c9d2:	2a09      	cmp	r2, #9
 800c9d4:	d903      	bls.n	800c9de <_vfiprintf_r+0x1ee>
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d0c5      	beq.n	800c966 <_vfiprintf_r+0x176>
 800c9da:	9105      	str	r1, [sp, #20]
 800c9dc:	e7c3      	b.n	800c966 <_vfiprintf_r+0x176>
 800c9de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e7f0      	b.n	800c9ca <_vfiprintf_r+0x1da>
 800c9e8:	ab03      	add	r3, sp, #12
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	462a      	mov	r2, r5
 800c9ee:	4b16      	ldr	r3, [pc, #88]	; (800ca48 <_vfiprintf_r+0x258>)
 800c9f0:	a904      	add	r1, sp, #16
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f7fd fbc8 	bl	800a188 <_printf_float>
 800c9f8:	4607      	mov	r7, r0
 800c9fa:	1c78      	adds	r0, r7, #1
 800c9fc:	d1d6      	bne.n	800c9ac <_vfiprintf_r+0x1bc>
 800c9fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca00:	07d9      	lsls	r1, r3, #31
 800ca02:	d405      	bmi.n	800ca10 <_vfiprintf_r+0x220>
 800ca04:	89ab      	ldrh	r3, [r5, #12]
 800ca06:	059a      	lsls	r2, r3, #22
 800ca08:	d402      	bmi.n	800ca10 <_vfiprintf_r+0x220>
 800ca0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca0c:	f7ff f950 	bl	800bcb0 <__retarget_lock_release_recursive>
 800ca10:	89ab      	ldrh	r3, [r5, #12]
 800ca12:	065b      	lsls	r3, r3, #25
 800ca14:	f53f af12 	bmi.w	800c83c <_vfiprintf_r+0x4c>
 800ca18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca1a:	e711      	b.n	800c840 <_vfiprintf_r+0x50>
 800ca1c:	ab03      	add	r3, sp, #12
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	462a      	mov	r2, r5
 800ca22:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <_vfiprintf_r+0x258>)
 800ca24:	a904      	add	r1, sp, #16
 800ca26:	4630      	mov	r0, r6
 800ca28:	f7fd fe52 	bl	800a6d0 <_printf_i>
 800ca2c:	e7e4      	b.n	800c9f8 <_vfiprintf_r+0x208>
 800ca2e:	bf00      	nop
 800ca30:	0800dc38 	.word	0x0800dc38
 800ca34:	0800dc58 	.word	0x0800dc58
 800ca38:	0800dc18 	.word	0x0800dc18
 800ca3c:	0800ddd4 	.word	0x0800ddd4
 800ca40:	0800ddde 	.word	0x0800ddde
 800ca44:	0800a189 	.word	0x0800a189
 800ca48:	0800c7cb 	.word	0x0800c7cb
 800ca4c:	0800ddda 	.word	0x0800ddda

0800ca50 <__sread>:
 800ca50:	b510      	push	{r4, lr}
 800ca52:	460c      	mov	r4, r1
 800ca54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca58:	f000 f920 	bl	800cc9c <_read_r>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	bfab      	itete	ge
 800ca60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca62:	89a3      	ldrhlt	r3, [r4, #12]
 800ca64:	181b      	addge	r3, r3, r0
 800ca66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca6a:	bfac      	ite	ge
 800ca6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca6e:	81a3      	strhlt	r3, [r4, #12]
 800ca70:	bd10      	pop	{r4, pc}

0800ca72 <__swrite>:
 800ca72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca76:	461f      	mov	r7, r3
 800ca78:	898b      	ldrh	r3, [r1, #12]
 800ca7a:	05db      	lsls	r3, r3, #23
 800ca7c:	4605      	mov	r5, r0
 800ca7e:	460c      	mov	r4, r1
 800ca80:	4616      	mov	r6, r2
 800ca82:	d505      	bpl.n	800ca90 <__swrite+0x1e>
 800ca84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca88:	2302      	movs	r3, #2
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f000 f898 	bl	800cbc0 <_lseek_r>
 800ca90:	89a3      	ldrh	r3, [r4, #12]
 800ca92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca9a:	81a3      	strh	r3, [r4, #12]
 800ca9c:	4632      	mov	r2, r6
 800ca9e:	463b      	mov	r3, r7
 800caa0:	4628      	mov	r0, r5
 800caa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caa6:	f000 b817 	b.w	800cad8 <_write_r>

0800caaa <__sseek>:
 800caaa:	b510      	push	{r4, lr}
 800caac:	460c      	mov	r4, r1
 800caae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cab2:	f000 f885 	bl	800cbc0 <_lseek_r>
 800cab6:	1c43      	adds	r3, r0, #1
 800cab8:	89a3      	ldrh	r3, [r4, #12]
 800caba:	bf15      	itete	ne
 800cabc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cabe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cac6:	81a3      	strheq	r3, [r4, #12]
 800cac8:	bf18      	it	ne
 800caca:	81a3      	strhne	r3, [r4, #12]
 800cacc:	bd10      	pop	{r4, pc}

0800cace <__sclose>:
 800cace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cad2:	f000 b831 	b.w	800cb38 <_close_r>
	...

0800cad8 <_write_r>:
 800cad8:	b538      	push	{r3, r4, r5, lr}
 800cada:	4d07      	ldr	r5, [pc, #28]	; (800caf8 <_write_r+0x20>)
 800cadc:	4604      	mov	r4, r0
 800cade:	4608      	mov	r0, r1
 800cae0:	4611      	mov	r1, r2
 800cae2:	2200      	movs	r2, #0
 800cae4:	602a      	str	r2, [r5, #0]
 800cae6:	461a      	mov	r2, r3
 800cae8:	f7f6 f9f1 	bl	8002ece <_write>
 800caec:	1c43      	adds	r3, r0, #1
 800caee:	d102      	bne.n	800caf6 <_write_r+0x1e>
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	b103      	cbz	r3, 800caf6 <_write_r+0x1e>
 800caf4:	6023      	str	r3, [r4, #0]
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	20002528 	.word	0x20002528

0800cafc <__assert_func>:
 800cafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cafe:	4614      	mov	r4, r2
 800cb00:	461a      	mov	r2, r3
 800cb02:	4b09      	ldr	r3, [pc, #36]	; (800cb28 <__assert_func+0x2c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4605      	mov	r5, r0
 800cb08:	68d8      	ldr	r0, [r3, #12]
 800cb0a:	b14c      	cbz	r4, 800cb20 <__assert_func+0x24>
 800cb0c:	4b07      	ldr	r3, [pc, #28]	; (800cb2c <__assert_func+0x30>)
 800cb0e:	9100      	str	r1, [sp, #0]
 800cb10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb14:	4906      	ldr	r1, [pc, #24]	; (800cb30 <__assert_func+0x34>)
 800cb16:	462b      	mov	r3, r5
 800cb18:	f000 f81e 	bl	800cb58 <fiprintf>
 800cb1c:	f000 f8dd 	bl	800ccda <abort>
 800cb20:	4b04      	ldr	r3, [pc, #16]	; (800cb34 <__assert_func+0x38>)
 800cb22:	461c      	mov	r4, r3
 800cb24:	e7f3      	b.n	800cb0e <__assert_func+0x12>
 800cb26:	bf00      	nop
 800cb28:	20000024 	.word	0x20000024
 800cb2c:	0800dde5 	.word	0x0800dde5
 800cb30:	0800ddf2 	.word	0x0800ddf2
 800cb34:	0800de20 	.word	0x0800de20

0800cb38 <_close_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	4d06      	ldr	r5, [pc, #24]	; (800cb54 <_close_r+0x1c>)
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	4604      	mov	r4, r0
 800cb40:	4608      	mov	r0, r1
 800cb42:	602b      	str	r3, [r5, #0]
 800cb44:	f7f6 f9df 	bl	8002f06 <_close>
 800cb48:	1c43      	adds	r3, r0, #1
 800cb4a:	d102      	bne.n	800cb52 <_close_r+0x1a>
 800cb4c:	682b      	ldr	r3, [r5, #0]
 800cb4e:	b103      	cbz	r3, 800cb52 <_close_r+0x1a>
 800cb50:	6023      	str	r3, [r4, #0]
 800cb52:	bd38      	pop	{r3, r4, r5, pc}
 800cb54:	20002528 	.word	0x20002528

0800cb58 <fiprintf>:
 800cb58:	b40e      	push	{r1, r2, r3}
 800cb5a:	b503      	push	{r0, r1, lr}
 800cb5c:	4601      	mov	r1, r0
 800cb5e:	ab03      	add	r3, sp, #12
 800cb60:	4805      	ldr	r0, [pc, #20]	; (800cb78 <fiprintf+0x20>)
 800cb62:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb66:	6800      	ldr	r0, [r0, #0]
 800cb68:	9301      	str	r3, [sp, #4]
 800cb6a:	f7ff fe41 	bl	800c7f0 <_vfiprintf_r>
 800cb6e:	b002      	add	sp, #8
 800cb70:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb74:	b003      	add	sp, #12
 800cb76:	4770      	bx	lr
 800cb78:	20000024 	.word	0x20000024

0800cb7c <_fstat_r>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	4d07      	ldr	r5, [pc, #28]	; (800cb9c <_fstat_r+0x20>)
 800cb80:	2300      	movs	r3, #0
 800cb82:	4604      	mov	r4, r0
 800cb84:	4608      	mov	r0, r1
 800cb86:	4611      	mov	r1, r2
 800cb88:	602b      	str	r3, [r5, #0]
 800cb8a:	f7f6 f9c8 	bl	8002f1e <_fstat>
 800cb8e:	1c43      	adds	r3, r0, #1
 800cb90:	d102      	bne.n	800cb98 <_fstat_r+0x1c>
 800cb92:	682b      	ldr	r3, [r5, #0]
 800cb94:	b103      	cbz	r3, 800cb98 <_fstat_r+0x1c>
 800cb96:	6023      	str	r3, [r4, #0]
 800cb98:	bd38      	pop	{r3, r4, r5, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20002528 	.word	0x20002528

0800cba0 <_isatty_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4d06      	ldr	r5, [pc, #24]	; (800cbbc <_isatty_r+0x1c>)
 800cba4:	2300      	movs	r3, #0
 800cba6:	4604      	mov	r4, r0
 800cba8:	4608      	mov	r0, r1
 800cbaa:	602b      	str	r3, [r5, #0]
 800cbac:	f7f6 f9c7 	bl	8002f3e <_isatty>
 800cbb0:	1c43      	adds	r3, r0, #1
 800cbb2:	d102      	bne.n	800cbba <_isatty_r+0x1a>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	b103      	cbz	r3, 800cbba <_isatty_r+0x1a>
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	bd38      	pop	{r3, r4, r5, pc}
 800cbbc:	20002528 	.word	0x20002528

0800cbc0 <_lseek_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4d07      	ldr	r5, [pc, #28]	; (800cbe0 <_lseek_r+0x20>)
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	4608      	mov	r0, r1
 800cbc8:	4611      	mov	r1, r2
 800cbca:	2200      	movs	r2, #0
 800cbcc:	602a      	str	r2, [r5, #0]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	f7f6 f9c0 	bl	8002f54 <_lseek>
 800cbd4:	1c43      	adds	r3, r0, #1
 800cbd6:	d102      	bne.n	800cbde <_lseek_r+0x1e>
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	b103      	cbz	r3, 800cbde <_lseek_r+0x1e>
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	20002528 	.word	0x20002528

0800cbe4 <__ascii_mbtowc>:
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	b901      	cbnz	r1, 800cbea <__ascii_mbtowc+0x6>
 800cbe8:	a901      	add	r1, sp, #4
 800cbea:	b142      	cbz	r2, 800cbfe <__ascii_mbtowc+0x1a>
 800cbec:	b14b      	cbz	r3, 800cc02 <__ascii_mbtowc+0x1e>
 800cbee:	7813      	ldrb	r3, [r2, #0]
 800cbf0:	600b      	str	r3, [r1, #0]
 800cbf2:	7812      	ldrb	r2, [r2, #0]
 800cbf4:	1e10      	subs	r0, r2, #0
 800cbf6:	bf18      	it	ne
 800cbf8:	2001      	movne	r0, #1
 800cbfa:	b002      	add	sp, #8
 800cbfc:	4770      	bx	lr
 800cbfe:	4610      	mov	r0, r2
 800cc00:	e7fb      	b.n	800cbfa <__ascii_mbtowc+0x16>
 800cc02:	f06f 0001 	mvn.w	r0, #1
 800cc06:	e7f8      	b.n	800cbfa <__ascii_mbtowc+0x16>

0800cc08 <memmove>:
 800cc08:	4288      	cmp	r0, r1
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	eb01 0402 	add.w	r4, r1, r2
 800cc10:	d902      	bls.n	800cc18 <memmove+0x10>
 800cc12:	4284      	cmp	r4, r0
 800cc14:	4623      	mov	r3, r4
 800cc16:	d807      	bhi.n	800cc28 <memmove+0x20>
 800cc18:	1e43      	subs	r3, r0, #1
 800cc1a:	42a1      	cmp	r1, r4
 800cc1c:	d008      	beq.n	800cc30 <memmove+0x28>
 800cc1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc26:	e7f8      	b.n	800cc1a <memmove+0x12>
 800cc28:	4402      	add	r2, r0
 800cc2a:	4601      	mov	r1, r0
 800cc2c:	428a      	cmp	r2, r1
 800cc2e:	d100      	bne.n	800cc32 <memmove+0x2a>
 800cc30:	bd10      	pop	{r4, pc}
 800cc32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc3a:	e7f7      	b.n	800cc2c <memmove+0x24>

0800cc3c <_realloc_r>:
 800cc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc40:	4680      	mov	r8, r0
 800cc42:	4614      	mov	r4, r2
 800cc44:	460e      	mov	r6, r1
 800cc46:	b921      	cbnz	r1, 800cc52 <_realloc_r+0x16>
 800cc48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4c:	4611      	mov	r1, r2
 800cc4e:	f7fd b987 	b.w	8009f60 <_malloc_r>
 800cc52:	b92a      	cbnz	r2, 800cc60 <_realloc_r+0x24>
 800cc54:	f7fd f918 	bl	8009e88 <_free_r>
 800cc58:	4625      	mov	r5, r4
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc60:	f000 f842 	bl	800cce8 <_malloc_usable_size_r>
 800cc64:	4284      	cmp	r4, r0
 800cc66:	4607      	mov	r7, r0
 800cc68:	d802      	bhi.n	800cc70 <_realloc_r+0x34>
 800cc6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc6e:	d812      	bhi.n	800cc96 <_realloc_r+0x5a>
 800cc70:	4621      	mov	r1, r4
 800cc72:	4640      	mov	r0, r8
 800cc74:	f7fd f974 	bl	8009f60 <_malloc_r>
 800cc78:	4605      	mov	r5, r0
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d0ed      	beq.n	800cc5a <_realloc_r+0x1e>
 800cc7e:	42bc      	cmp	r4, r7
 800cc80:	4622      	mov	r2, r4
 800cc82:	4631      	mov	r1, r6
 800cc84:	bf28      	it	cs
 800cc86:	463a      	movcs	r2, r7
 800cc88:	f7ff f878 	bl	800bd7c <memcpy>
 800cc8c:	4631      	mov	r1, r6
 800cc8e:	4640      	mov	r0, r8
 800cc90:	f7fd f8fa 	bl	8009e88 <_free_r>
 800cc94:	e7e1      	b.n	800cc5a <_realloc_r+0x1e>
 800cc96:	4635      	mov	r5, r6
 800cc98:	e7df      	b.n	800cc5a <_realloc_r+0x1e>
	...

0800cc9c <_read_r>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	4d07      	ldr	r5, [pc, #28]	; (800ccbc <_read_r+0x20>)
 800cca0:	4604      	mov	r4, r0
 800cca2:	4608      	mov	r0, r1
 800cca4:	4611      	mov	r1, r2
 800cca6:	2200      	movs	r2, #0
 800cca8:	602a      	str	r2, [r5, #0]
 800ccaa:	461a      	mov	r2, r3
 800ccac:	f7f6 f8f2 	bl	8002e94 <_read>
 800ccb0:	1c43      	adds	r3, r0, #1
 800ccb2:	d102      	bne.n	800ccba <_read_r+0x1e>
 800ccb4:	682b      	ldr	r3, [r5, #0]
 800ccb6:	b103      	cbz	r3, 800ccba <_read_r+0x1e>
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	bd38      	pop	{r3, r4, r5, pc}
 800ccbc:	20002528 	.word	0x20002528

0800ccc0 <__ascii_wctomb>:
 800ccc0:	b149      	cbz	r1, 800ccd6 <__ascii_wctomb+0x16>
 800ccc2:	2aff      	cmp	r2, #255	; 0xff
 800ccc4:	bf85      	ittet	hi
 800ccc6:	238a      	movhi	r3, #138	; 0x8a
 800ccc8:	6003      	strhi	r3, [r0, #0]
 800ccca:	700a      	strbls	r2, [r1, #0]
 800cccc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ccd0:	bf98      	it	ls
 800ccd2:	2001      	movls	r0, #1
 800ccd4:	4770      	bx	lr
 800ccd6:	4608      	mov	r0, r1
 800ccd8:	4770      	bx	lr

0800ccda <abort>:
 800ccda:	b508      	push	{r3, lr}
 800ccdc:	2006      	movs	r0, #6
 800ccde:	f000 f833 	bl	800cd48 <raise>
 800cce2:	2001      	movs	r0, #1
 800cce4:	f7f6 f8cc 	bl	8002e80 <_exit>

0800cce8 <_malloc_usable_size_r>:
 800cce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccec:	1f18      	subs	r0, r3, #4
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	bfbc      	itt	lt
 800ccf2:	580b      	ldrlt	r3, [r1, r0]
 800ccf4:	18c0      	addlt	r0, r0, r3
 800ccf6:	4770      	bx	lr

0800ccf8 <_raise_r>:
 800ccf8:	291f      	cmp	r1, #31
 800ccfa:	b538      	push	{r3, r4, r5, lr}
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	460d      	mov	r5, r1
 800cd00:	d904      	bls.n	800cd0c <_raise_r+0x14>
 800cd02:	2316      	movs	r3, #22
 800cd04:	6003      	str	r3, [r0, #0]
 800cd06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
 800cd0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd0e:	b112      	cbz	r2, 800cd16 <_raise_r+0x1e>
 800cd10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd14:	b94b      	cbnz	r3, 800cd2a <_raise_r+0x32>
 800cd16:	4620      	mov	r0, r4
 800cd18:	f000 f830 	bl	800cd7c <_getpid_r>
 800cd1c:	462a      	mov	r2, r5
 800cd1e:	4601      	mov	r1, r0
 800cd20:	4620      	mov	r0, r4
 800cd22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd26:	f000 b817 	b.w	800cd58 <_kill_r>
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d00a      	beq.n	800cd44 <_raise_r+0x4c>
 800cd2e:	1c59      	adds	r1, r3, #1
 800cd30:	d103      	bne.n	800cd3a <_raise_r+0x42>
 800cd32:	2316      	movs	r3, #22
 800cd34:	6003      	str	r3, [r0, #0]
 800cd36:	2001      	movs	r0, #1
 800cd38:	e7e7      	b.n	800cd0a <_raise_r+0x12>
 800cd3a:	2400      	movs	r4, #0
 800cd3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd40:	4628      	mov	r0, r5
 800cd42:	4798      	blx	r3
 800cd44:	2000      	movs	r0, #0
 800cd46:	e7e0      	b.n	800cd0a <_raise_r+0x12>

0800cd48 <raise>:
 800cd48:	4b02      	ldr	r3, [pc, #8]	; (800cd54 <raise+0xc>)
 800cd4a:	4601      	mov	r1, r0
 800cd4c:	6818      	ldr	r0, [r3, #0]
 800cd4e:	f7ff bfd3 	b.w	800ccf8 <_raise_r>
 800cd52:	bf00      	nop
 800cd54:	20000024 	.word	0x20000024

0800cd58 <_kill_r>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	4d07      	ldr	r5, [pc, #28]	; (800cd78 <_kill_r+0x20>)
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	4604      	mov	r4, r0
 800cd60:	4608      	mov	r0, r1
 800cd62:	4611      	mov	r1, r2
 800cd64:	602b      	str	r3, [r5, #0]
 800cd66:	f7f6 f87b 	bl	8002e60 <_kill>
 800cd6a:	1c43      	adds	r3, r0, #1
 800cd6c:	d102      	bne.n	800cd74 <_kill_r+0x1c>
 800cd6e:	682b      	ldr	r3, [r5, #0]
 800cd70:	b103      	cbz	r3, 800cd74 <_kill_r+0x1c>
 800cd72:	6023      	str	r3, [r4, #0]
 800cd74:	bd38      	pop	{r3, r4, r5, pc}
 800cd76:	bf00      	nop
 800cd78:	20002528 	.word	0x20002528

0800cd7c <_getpid_r>:
 800cd7c:	f7f6 b868 	b.w	8002e50 <_getpid>

0800cd80 <_init>:
 800cd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd82:	bf00      	nop
 800cd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd86:	bc08      	pop	{r3}
 800cd88:	469e      	mov	lr, r3
 800cd8a:	4770      	bx	lr

0800cd8c <_fini>:
 800cd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd8e:	bf00      	nop
 800cd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd92:	bc08      	pop	{r3}
 800cd94:	469e      	mov	lr, r3
 800cd96:	4770      	bx	lr
