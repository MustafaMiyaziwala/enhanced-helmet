
enhanced-helmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001194  08009958  08009958  00019958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaec  0800aaec  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaec  0800aaec  0001aaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaf4  0800aaf4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaf4  0800aaf4  0001aaf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaf8  0800aaf8  0001aaf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800aafc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002340  200001f4  0800acf0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002534  0800acf0  00022534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021f6c  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000393e  00000000  00000000  00042190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001ca26  00000000  00000000  00045ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  000624f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017e8  00000000  00000000  00063930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af6f  00000000  00000000  00065118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025cdb  00000000  00000000  00080087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0cfb  00000000  00000000  000a5d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146a5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004df4  00000000  00000000  00146ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009940 	.word	0x08009940

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08009940 	.word	0x08009940

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <OV5462_write_i2c_reg>:
#include "OV5462.h"

uint8_t OV5462_write_i2c_reg(OV5462_t* ov5462, int addr, int data) {
 8000f1c:	b500      	push	{lr}
 8000f1e:	b085      	sub	sp, #20
	uint8_t buf[4];
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8000f20:	120b      	asrs	r3, r1, #8
 8000f22:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = (uint8_t)(addr & 0xFF); // lower addr byte
 8000f26:	f88d 100d 	strb.w	r1, [sp, #13]
	buf[2] = data;
 8000f2a:	f88d 200e 	strb.w	r2, [sp, #14]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8000f2e:	6800      	ldr	r0, [r0, #0]
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2303      	movs	r3, #3
 8000f38:	aa03      	add	r2, sp, #12
 8000f3a:	2178      	movs	r1, #120	; 0x78
 8000f3c:	f002 f958 	bl	80031f0 <HAL_I2C_Master_Transmit>
	if ( ret != HAL_OK ) {
		return 1;
	}

	return 0;
}
 8000f40:	3800      	subs	r0, #0
 8000f42:	bf18      	it	ne
 8000f44:	2001      	movne	r0, #1
 8000f46:	b005      	add	sp, #20
 8000f48:	f85d fb04 	ldr.w	pc, [sp], #4

08000f4c <OV5462_write_i2c_regs>:

uint8_t OV5462_write_i2c_regs(OV5462_t* ov5462, const reg_value_pair regs[]) {
 8000f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f50:	4606      	mov	r6, r0
	const reg_value_pair* curr = regs;
	HAL_StatusTypeDef ret;

	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000f52:	1d0c      	adds	r4, r1, #4
 8000f54:	f64f 77ff 	movw	r7, #65535	; 0xffff
		ret = OV5462_write_i2c_reg(ov5462, curr->addr, curr->value);
		// do we need a delay here?
		HAL_Delay(1);
 8000f58:	f04f 0801 	mov.w	r8, #1
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000f5c:	e00a      	b.n	8000f74 <OV5462_write_i2c_regs+0x28>
		ret = OV5462_write_i2c_reg(ov5462, curr->addr, curr->value);
 8000f5e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8000f62:	4630      	mov	r0, r6
 8000f64:	f7ff ffda 	bl	8000f1c <OV5462_write_i2c_reg>
 8000f68:	4605      	mov	r5, r0
		HAL_Delay(1);
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	f001 fc4c 	bl	8002808 <HAL_Delay>
		++curr;

		if ( ret != HAL_OK ) {
 8000f70:	3404      	adds	r4, #4
 8000f72:	b955      	cbnz	r5, 8000f8a <OV5462_write_i2c_regs+0x3e>
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000f74:	4623      	mov	r3, r4
 8000f76:	f834 1c04 	ldrh.w	r1, [r4, #-4]
 8000f7a:	42b9      	cmp	r1, r7
 8000f7c:	d1ef      	bne.n	8000f5e <OV5462_write_i2c_regs+0x12>
 8000f7e:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 8000f82:	2aff      	cmp	r2, #255	; 0xff
 8000f84:	d1eb      	bne.n	8000f5e <OV5462_write_i2c_regs+0x12>
			return 1;
		}
	}

	return 0;
 8000f86:	2000      	movs	r0, #0
 8000f88:	e000      	b.n	8000f8c <OV5462_write_i2c_regs+0x40>
			return 1;
 8000f8a:	2001      	movs	r0, #1
}
 8000f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f90 <OV5462_read_i2c_reg>:

uint8_t OV5462_read_i2c_reg(OV5462_t* ov5462, int addr) {
 8000f90:	b530      	push	{r4, r5, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	4604      	mov	r4, r0
	uint8_t buf[2];
	buf[0] = (uint8_t)(addr >> 8);
 8000f96:	120b      	asrs	r3, r1, #8
 8000f98:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = (uint8_t)(addr & 0xFF);
 8000f9c:	f88d 100d 	strb.w	r1, [sp, #13]

	HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 2, HAL_MAX_DELAY);
 8000fa0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000fa4:	9500      	str	r5, [sp, #0]
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	aa03      	add	r2, sp, #12
 8000faa:	2179      	movs	r1, #121	; 0x79
 8000fac:	6800      	ldr	r0, [r0, #0]
 8000fae:	f002 f91f 	bl	80031f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 1, HAL_MAX_DELAY);
 8000fb2:	9500      	str	r5, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	aa03      	add	r2, sp, #12
 8000fb8:	2179      	movs	r1, #121	; 0x79
 8000fba:	6820      	ldr	r0, [r4, #0]
 8000fbc:	f002 fa1c 	bl	80033f8 <HAL_I2C_Master_Receive>

	return buf[0];
}
 8000fc0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000fc4:	b005      	add	sp, #20
 8000fc6:	bd30      	pop	{r4, r5, pc}

08000fc8 <OV5462_write_spi_reg>:

void OV5462_write_spi_reg(OV5462_t* ov5462, uint8_t addr, uint8_t data) {
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	4605      	mov	r5, r0
 8000fce:	460c      	mov	r4, r1
 8000fd0:	4616      	mov	r6, r2
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8000fd2:	4f0f      	ldr	r7, [pc, #60]	; (8001010 <OV5462_write_spi_reg+0x48>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	4638      	mov	r0, r7
 8000fda:	f001 ff07 	bl	8002dec <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr | 0x80 };
 8000fde:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8000fe2:	f88d 4004 	strb.w	r4, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	2201      	movs	r2, #1
 8000fea:	a901      	add	r1, sp, #4
 8000fec:	6868      	ldr	r0, [r5, #4]
 8000fee:	f003 f87a 	bl	80040e6 <HAL_SPI_Transmit>
	buf[0] = data;
 8000ff2:	f88d 6004 	strb.w	r6, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8000ff6:	2364      	movs	r3, #100	; 0x64
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	a901      	add	r1, sp, #4
 8000ffc:	6868      	ldr	r0, [r5, #4]
 8000ffe:	f003 f872 	bl	80040e6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 8001002:	2201      	movs	r2, #1
 8001004:	2110      	movs	r1, #16
 8001006:	4638      	mov	r0, r7
 8001008:	f001 fef0 	bl	8002dec <HAL_GPIO_WritePin>

//	HAL_Delay(100);
}
 800100c:	b003      	add	sp, #12
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	40020800 	.word	0x40020800

08001014 <OV5462_read_spi_reg>:

uint8_t OV5462_read_spi_reg(OV5462_t* ov5462, uint8_t addr) {
 8001014:	b570      	push	{r4, r5, r6, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	4604      	mov	r4, r0
 800101a:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 800101c:	4e0e      	ldr	r6, [pc, #56]	; (8001058 <OV5462_read_spi_reg+0x44>)
 800101e:	2200      	movs	r2, #0
 8001020:	2110      	movs	r1, #16
 8001022:	4630      	mov	r0, r6
 8001024:	f001 fee2 	bl	8002dec <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr };
 8001028:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800102c:	2364      	movs	r3, #100	; 0x64
 800102e:	2201      	movs	r2, #1
 8001030:	a901      	add	r1, sp, #4
 8001032:	6860      	ldr	r0, [r4, #4]
 8001034:	f003 f857 	bl	80040e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ov5462->hspi, buf, 1, 100);
 8001038:	2364      	movs	r3, #100	; 0x64
 800103a:	2201      	movs	r2, #1
 800103c:	a901      	add	r1, sp, #4
 800103e:	6860      	ldr	r0, [r4, #4]
 8001040:	f003 fa44 	bl	80044cc <HAL_SPI_Receive>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 8001044:	2201      	movs	r2, #1
 8001046:	2110      	movs	r1, #16
 8001048:	4630      	mov	r0, r6
 800104a:	f001 fecf 	bl	8002dec <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	return buf[0];
}
 800104e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001052:	b002      	add	sp, #8
 8001054:	bd70      	pop	{r4, r5, r6, pc}
 8001056:	bf00      	nop
 8001058:	40020800 	.word	0x40020800

0800105c <OV5462_init>:


uint8_t OV5462_init(OV5462_t* ov5462) {
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select is default HIGH
 8001060:	2201      	movs	r2, #1
 8001062:	2110      	movs	r1, #16
 8001064:	4821      	ldr	r0, [pc, #132]	; (80010ec <OV5462_init+0x90>)
 8001066:	f001 fec1 	bl	8002dec <HAL_GPIO_WritePin>

	OV5462_write_i2c_reg(ov5462, 0x3008, 0x80);
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	f243 0108 	movw	r1, #12296	; 0x3008
 8001070:	4628      	mov	r0, r5
 8001072:	f7ff ff53 	bl	8000f1c <OV5462_write_i2c_reg>
	OV5462_write_i2c_regs(ov5462, SET_QVGA_MODE); // determine if we need to do this for our application
 8001076:	491e      	ldr	r1, [pc, #120]	; (80010f0 <OV5462_init+0x94>)
 8001078:	4628      	mov	r0, r5
 800107a:	f7ff ff67 	bl	8000f4c <OV5462_write_i2c_regs>

	uint8_t err = 0;
	// configure camera for JPEG capture
	err |= OV5462_write_i2c_regs(ov5462, CONFIGURE_JPEG_CAPTURE); // use JPEG capture mode
 800107e:	491d      	ldr	r1, [pc, #116]	; (80010f4 <OV5462_init+0x98>)
 8001080:	4628      	mov	r0, r5
 8001082:	f7ff ff63 	bl	8000f4c <OV5462_write_i2c_regs>
 8001086:	4604      	mov	r4, r0
	err |=OV5462_write_i2c_regs(ov5462, SET_RESOLUTION_320X240); // set sensor to low resolution
 8001088:	491b      	ldr	r1, [pc, #108]	; (80010f8 <OV5462_init+0x9c>)
 800108a:	4628      	mov	r0, r5
 800108c:	f7ff ff5e 	bl	8000f4c <OV5462_write_i2c_regs>
 8001090:	4304      	orrs	r4, r0
 8001092:	b2e4      	uxtb	r4, r4
	err |=OV5462_write_i2c_reg(ov5462, 0x3818, 0xa8);
 8001094:	22a8      	movs	r2, #168	; 0xa8
 8001096:	f643 0118 	movw	r1, #14360	; 0x3818
 800109a:	4628      	mov	r0, r5
 800109c:	f7ff ff3e 	bl	8000f1c <OV5462_write_i2c_reg>
 80010a0:	4304      	orrs	r4, r0
 80010a2:	b2e4      	uxtb	r4, r4
	err |=OV5462_write_i2c_reg(ov5462, 0x3621, 0x10);
 80010a4:	2210      	movs	r2, #16
 80010a6:	f243 6121 	movw	r1, #13857	; 0x3621
 80010aa:	4628      	mov	r0, r5
 80010ac:	f7ff ff36 	bl	8000f1c <OV5462_write_i2c_reg>
 80010b0:	4304      	orrs	r4, r0
 80010b2:	b2e4      	uxtb	r4, r4
	err |=OV5462_write_i2c_reg(ov5462, 0x3801, 0xb0);
 80010b4:	22b0      	movs	r2, #176	; 0xb0
 80010b6:	f643 0101 	movw	r1, #14337	; 0x3801
 80010ba:	4628      	mov	r0, r5
 80010bc:	f7ff ff2e 	bl	8000f1c <OV5462_write_i2c_reg>
 80010c0:	4304      	orrs	r4, r0
 80010c2:	b2e4      	uxtb	r4, r4
	err |=OV5462_write_i2c_reg(ov5462, 0x4407, 0x04); // 04?
 80010c4:	2204      	movs	r2, #4
 80010c6:	f244 4107 	movw	r1, #17415	; 0x4407
 80010ca:	4628      	mov	r0, r5
 80010cc:	f7ff ff26 	bl	8000f1c <OV5462_write_i2c_reg>
 80010d0:	4304      	orrs	r4, r0
 80010d2:	b2e4      	uxtb	r4, r4

	OV5462_write_spi_reg(ov5462, OV5462_ARDUCHIP_TIM, OV5462_VSYNC_LEVEL_MASK);
 80010d4:	2202      	movs	r2, #2
 80010d6:	2103      	movs	r1, #3
 80010d8:	4628      	mov	r0, r5
 80010da:	f7ff ff75 	bl	8000fc8 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 80010de:	2201      	movs	r2, #1
 80010e0:	2104      	movs	r1, #4
 80010e2:	4628      	mov	r0, r5
 80010e4:	f7ff ff70 	bl	8000fc8 <OV5462_write_spi_reg>

	return err;
}
 80010e8:	4620      	mov	r0, r4
 80010ea:	bd38      	pop	{r3, r4, r5, pc}
 80010ec:	40020800 	.word	0x40020800
 80010f0:	08009cdc 	.word	0x08009cdc
 80010f4:	08009bbc 	.word	0x08009bbc
 80010f8:	0800a5fc 	.word	0x0800a5fc

080010fc <OV5462_continuous_capture_init>:

void OV5462_continuous_capture_init(OV5462_t* ov5462) {
 80010fc:	b510      	push	{r4, lr}
 80010fe:	4604      	mov	r4, r0
	uint8_t camera_version = OV5462_read_spi_reg(ov5462, 0x40);
 8001100:	2140      	movs	r1, #64	; 0x40
 8001102:	f7ff ff87 	bl	8001014 <OV5462_read_spi_reg>

	// set continuous capture (depends on version)
	if (camera_version && 0x70) {
		frames = 0xFF;
	} else {
		frames = 0x07;
 8001106:	2800      	cmp	r0, #0
	}

	OV5462_write_spi_reg(ov5462, ARDUCHIP_FRAMES, frames);
 8001108:	bf14      	ite	ne
 800110a:	22ff      	movne	r2, #255	; 0xff
 800110c:	2207      	moveq	r2, #7
 800110e:	2101      	movs	r1, #1
 8001110:	4620      	mov	r0, r4
 8001112:	f7ff ff59 	bl	8000fc8 <OV5462_write_spi_reg>
}
 8001116:	bd10      	pop	{r4, pc}

08001118 <OV5462_read_fifo_length>:

uint32_t OV5462_read_fifo_length(OV5462_t* ov5462) {
 8001118:	b570      	push	{r4, r5, r6, lr}
 800111a:	4605      	mov	r5, r0
	uint32_t lower, middle, upper;
	lower = OV5462_read_spi_reg(ov5462, FIFO_SIZE_LOWER);
 800111c:	2142      	movs	r1, #66	; 0x42
 800111e:	f7ff ff79 	bl	8001014 <OV5462_read_spi_reg>
 8001122:	4606      	mov	r6, r0
	middle = OV5462_read_spi_reg(ov5462, FIFO_SIZE_MIDDLE);
 8001124:	2143      	movs	r1, #67	; 0x43
 8001126:	4628      	mov	r0, r5
 8001128:	f7ff ff74 	bl	8001014 <OV5462_read_spi_reg>
 800112c:	4604      	mov	r4, r0
	upper = OV5462_read_spi_reg(ov5462, FIFO_SIZE_UPPER);
 800112e:	2144      	movs	r1, #68	; 0x44
 8001130:	4628      	mov	r0, r5
 8001132:	f7ff ff6f 	bl	8001014 <OV5462_read_spi_reg>

	return ((upper << 16) | (middle << 8) | lower) & 0x07fffff;
 8001136:	0224      	lsls	r4, r4, #8
 8001138:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800113c:	ea44 0006 	orr.w	r0, r4, r6
}
 8001140:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8001144:	bd70      	pop	{r4, r5, r6, pc}

08001146 <OV5462_request_FIFO_burst>:

void OV5462_request_FIFO_burst(OV5462_t* ov5462) {
 8001146:	b500      	push	{lr}
 8001148:	b083      	sub	sp, #12
	uint8_t buf[1] = { BURST_FIFO_READ };
 800114a:	233c      	movs	r3, #60	; 0x3c
 800114c:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 8001150:	2364      	movs	r3, #100	; 0x64
 8001152:	2201      	movs	r2, #1
 8001154:	a901      	add	r1, sp, #4
 8001156:	6840      	ldr	r0, [r0, #4]
 8001158:	f002 ffc5 	bl	80040e6 <HAL_SPI_Transmit>
}
 800115c:	b003      	add	sp, #12
 800115e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001164 <SPI_OptimizedReadByte>:

uint8_t SPI_OptimizedReadByte(uint8_t* data) {
	while (((SPI1->SR)&(1>>7))) {}; // wait for BSY bit to reset
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SPI_OptimizedReadByte+0x1c>)
 8001166:	689a      	ldr	r2, [r3, #8]
	SPI1->DR = 0; // dummy byte
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
	while (!((SPI1->SR) & (1<<0))) {};
 800116c:	461a      	mov	r2, r3
 800116e:	6893      	ldr	r3, [r2, #8]
 8001170:	f013 0f01 	tst.w	r3, #1
 8001174:	d0fb      	beq.n	800116e <SPI_OptimizedReadByte+0xa>
	return SPI1->DR;
 8001176:	4b02      	ldr	r3, [pc, #8]	; (8001180 <SPI_OptimizedReadByte+0x1c>)
 8001178:	68d8      	ldr	r0, [r3, #12]
}
 800117a:	b2c0      	uxtb	r0, r0
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40013000 	.word	0x40013000

08001184 <SPI_TxBuffer>:
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
}

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001184:	b510      	push	{r4, lr}
 8001186:	460a      	mov	r2, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SPI_TxBuffer+0x1c>)
 800118a:	681c      	ldr	r4, [r3, #0]
 800118c:	68a3      	ldr	r3, [r4, #8]
 800118e:	f013 0f02 	tst.w	r3, #2
 8001192:	d0fb      	beq.n	800118c <SPI_TxBuffer+0x8>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001194:	2364      	movs	r3, #100	; 0x64
 8001196:	4601      	mov	r1, r0
 8001198:	4801      	ldr	r0, [pc, #4]	; (80011a0 <SPI_TxBuffer+0x1c>)
 800119a:	f002 ffa4 	bl	80040e6 <HAL_SPI_Transmit>
}
 800119e:	bd10      	pop	{r4, pc}
 80011a0:	20002398 	.word	0x20002398

080011a4 <SPI_TxByte>:
{
 80011a4:	b500      	push	{lr}
 80011a6:	b083      	sub	sp, #12
 80011a8:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <SPI_TxByte+0x28>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	6893      	ldr	r3, [r2, #8]
 80011b2:	f013 0f02 	tst.w	r3, #2
 80011b6:	d0fb      	beq.n	80011b0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	2201      	movs	r2, #1
 80011bc:	f10d 0107 	add.w	r1, sp, #7
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <SPI_TxByte+0x28>)
 80011c2:	f002 ff90 	bl	80040e6 <HAL_SPI_Transmit>
}
 80011c6:	b003      	add	sp, #12
 80011c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80011cc:	20002398 	.word	0x20002398

080011d0 <SELECT>:
{
 80011d0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2102      	movs	r1, #2
 80011d6:	4803      	ldr	r0, [pc, #12]	; (80011e4 <SELECT+0x14>)
 80011d8:	f001 fe08 	bl	8002dec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f001 fb13 	bl	8002808 <HAL_Delay>
}
 80011e2:	bd08      	pop	{r3, pc}
 80011e4:	40020800 	.word	0x40020800

080011e8 <DESELECT>:
{
 80011e8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2102      	movs	r1, #2
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <DESELECT+0x14>)
 80011f0:	f001 fdfc 	bl	8002dec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f001 fb07 	bl	8002808 <HAL_Delay>
}
 80011fa:	bd08      	pop	{r3, pc}
 80011fc:	40020800 	.word	0x40020800

08001200 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001200:	b500      	push	{lr}
 8001202:	b085      	sub	sp, #20
	uint8_t dummy, data;
	dummy = 0xFF;
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	f88d 300f 	strb.w	r3, [sp, #15]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <SPI_RxByte+0x34>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	6893      	ldr	r3, [r2, #8]
 8001210:	f013 0f02 	tst.w	r3, #2
 8001214:	d0fb      	beq.n	800120e <SPI_RxByte+0xe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001216:	2364      	movs	r3, #100	; 0x64
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	f10d 020e 	add.w	r2, sp, #14
 8001220:	f10d 010f 	add.w	r1, sp, #15
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <SPI_RxByte+0x34>)
 8001226:	f003 f837 	bl	8004298 <HAL_SPI_TransmitReceive>

	return data;
}
 800122a:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800122e:	b005      	add	sp, #20
 8001230:	f85d fb04 	ldr.w	pc, [sp], #4
 8001234:	20002398 	.word	0x20002398

08001238 <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void)
{
 8001238:	b530      	push	{r4, r5, lr}
 800123a:	b083      	sub	sp, #12
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
 800123c:	f7ff ffd4 	bl	80011e8 <DESELECT>
 8001240:	240a      	movs	r4, #10
	for(int i = 0; i < 10; i++)
	{
		SPI_TxByte(0xFF);
 8001242:	25ff      	movs	r5, #255	; 0xff
 8001244:	4628      	mov	r0, r5
 8001246:	f7ff ffad 	bl	80011a4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800124a:	3c01      	subs	r4, #1
 800124c:	d1fa      	bne.n	8001244 <SD_PowerOn+0xc>
	}

	/* slave select */
	SELECT();
 800124e:	f7ff ffbf 	bl	80011d0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001252:	2340      	movs	r3, #64	; 0x40
 8001254:	f88d 3000 	strb.w	r3, [sp]
	args[1] = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	f88d 3001 	strb.w	r3, [sp, #1]
	args[2] = 0;
 800125e:	f88d 3002 	strb.w	r3, [sp, #2]
	args[3] = 0;
 8001262:	f88d 3003 	strb.w	r3, [sp, #3]
	args[4] = 0;
 8001266:	f88d 3004 	strb.w	r3, [sp, #4]
	args[5] = 0x95;		/* CRC */
 800126a:	2395      	movs	r3, #149	; 0x95
 800126c:	f88d 3005 	strb.w	r3, [sp, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001270:	2106      	movs	r1, #6
 8001272:	4668      	mov	r0, sp
 8001274:	f7ff ff86 	bl	8001184 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001278:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800127c:	f7ff ffc0 	bl	8001200 <SPI_RxByte>
 8001280:	2801      	cmp	r0, #1
 8001282:	d001      	beq.n	8001288 <SD_PowerOn+0x50>
 8001284:	3c01      	subs	r4, #1
 8001286:	d1f9      	bne.n	800127c <SD_PowerOn+0x44>
	{
		cnt--;
	}

	DESELECT();
 8001288:	f7ff ffae 	bl	80011e8 <DESELECT>
	SPI_TxByte(0XFF);
 800128c:	20ff      	movs	r0, #255	; 0xff
 800128e:	f7ff ff89 	bl	80011a4 <SPI_TxByte>

	PowerFlag = 1;
 8001292:	4b02      	ldr	r3, [pc, #8]	; (800129c <SD_PowerOn+0x64>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
}
 8001298:	b003      	add	sp, #12
 800129a:	bd30      	pop	{r4, r5, pc}
 800129c:	20000211 	.word	0x20000211

080012a0 <SD_ReadyWait>:
{
 80012a0:	b510      	push	{r4, lr}
	Timer2 = 500;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <SD_ReadyWait+0x1c>)
 80012a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012a8:	801a      	strh	r2, [r3, #0]
	} while ((res != 0xFF) && Timer2);
 80012aa:	461c      	mov	r4, r3
		res = SPI_RxByte();
 80012ac:	f7ff ffa8 	bl	8001200 <SPI_RxByte>
	} while ((res != 0xFF) && Timer2);
 80012b0:	28ff      	cmp	r0, #255	; 0xff
 80012b2:	d002      	beq.n	80012ba <SD_ReadyWait+0x1a>
 80012b4:	8823      	ldrh	r3, [r4, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f8      	bne.n	80012ac <SD_ReadyWait+0xc>
}
 80012ba:	bd10      	pop	{r4, pc}
 80012bc:	20000214 	.word	0x20000214

080012c0 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012c0:	b538      	push	{r3, r4, r5, lr}
 80012c2:	4605      	mov	r5, r0
 80012c4:	460c      	mov	r4, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012c6:	f7ff ffeb 	bl	80012a0 <SD_ReadyWait>
 80012ca:	28ff      	cmp	r0, #255	; 0xff
 80012cc:	d001      	beq.n	80012d2 <SD_SendCmd+0x12>
 80012ce:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 80012d0:	bd38      	pop	{r3, r4, r5, pc}
	SPI_TxByte(cmd); 					/* Command */
 80012d2:	4628      	mov	r0, r5
 80012d4:	f7ff ff66 	bl	80011a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80012d8:	0e20      	lsrs	r0, r4, #24
 80012da:	f7ff ff63 	bl	80011a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80012de:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80012e2:	f7ff ff5f 	bl	80011a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80012e6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80012ea:	f7ff ff5b 	bl	80011a4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80012ee:	b2e0      	uxtb	r0, r4
 80012f0:	f7ff ff58 	bl	80011a4 <SPI_TxByte>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80012f4:	2d40      	cmp	r5, #64	; 0x40
 80012f6:	d009      	beq.n	800130c <SD_SendCmd+0x4c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80012f8:	2d48      	cmp	r5, #72	; 0x48
 80012fa:	d015      	beq.n	8001328 <SD_SendCmd+0x68>
	SPI_TxByte(crc);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f7ff ff51 	bl	80011a4 <SPI_TxByte>
	if (cmd == CMD12) SPI_RxByte();
 8001302:	2d4c      	cmp	r5, #76	; 0x4c
 8001304:	d105      	bne.n	8001312 <SD_SendCmd+0x52>
 8001306:	f7ff ff7b 	bl	8001200 <SPI_RxByte>
 800130a:	e002      	b.n	8001312 <SD_SendCmd+0x52>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800130c:	2095      	movs	r0, #149	; 0x95
	SPI_TxByte(crc);
 800130e:	f7ff ff49 	bl	80011a4 <SPI_TxByte>
{
 8001312:	240a      	movs	r4, #10
		res = SPI_RxByte();
 8001314:	f7ff ff74 	bl	8001200 <SPI_RxByte>
	} while ((res & 0x80) && --n);
 8001318:	f010 0f80 	tst.w	r0, #128	; 0x80
 800131c:	d0d8      	beq.n	80012d0 <SD_SendCmd+0x10>
 800131e:	1e63      	subs	r3, r4, #1
 8001320:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001324:	d1f6      	bne.n	8001314 <SD_SendCmd+0x54>
 8001326:	e7d3      	b.n	80012d0 <SD_SendCmd+0x10>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001328:	2087      	movs	r0, #135	; 0x87
 800132a:	e7f0      	b.n	800130e <SD_SendCmd+0x4e>

0800132c <SD_RxDataBlock>:
{
 800132c:	b570      	push	{r4, r5, r6, lr}
 800132e:	4605      	mov	r5, r0
 8001330:	460e      	mov	r6, r1
	Timer1 = 200;
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <SD_RxDataBlock+0x48>)
 8001334:	22c8      	movs	r2, #200	; 0xc8
 8001336:	801a      	strh	r2, [r3, #0]
	} while((token == 0xFF) && Timer1);
 8001338:	461c      	mov	r4, r3
		token = SPI_RxByte();
 800133a:	f7ff ff61 	bl	8001200 <SPI_RxByte>
	} while((token == 0xFF) && Timer1);
 800133e:	28ff      	cmp	r0, #255	; 0xff
 8001340:	d104      	bne.n	800134c <SD_RxDataBlock+0x20>
 8001342:	8823      	ldrh	r3, [r4, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f8      	bne.n	800133a <SD_RxDataBlock+0xe>
	if(token != 0xFE) return FALSE;
 8001348:	2000      	movs	r0, #0
 800134a:	e00f      	b.n	800136c <SD_RxDataBlock+0x40>
 800134c:	28fe      	cmp	r0, #254	; 0xfe
 800134e:	d10e      	bne.n	800136e <SD_RxDataBlock+0x42>
 8001350:	462c      	mov	r4, r5
	*buff = SPI_RxByte();
 8001352:	f7ff ff55 	bl	8001200 <SPI_RxByte>
 8001356:	f804 0b01 	strb.w	r0, [r4], #1
	} while(len--);
 800135a:	1b33      	subs	r3, r6, r4
 800135c:	3301      	adds	r3, #1
 800135e:	42dd      	cmn	r5, r3
 8001360:	d1f7      	bne.n	8001352 <SD_RxDataBlock+0x26>
	SPI_RxByte();
 8001362:	f7ff ff4d 	bl	8001200 <SPI_RxByte>
	SPI_RxByte();
 8001366:	f7ff ff4b 	bl	8001200 <SPI_RxByte>
	return TRUE;
 800136a:	2001      	movs	r0, #1
}
 800136c:	bd70      	pop	{r4, r5, r6, pc}
	if(token != 0xFE) return FALSE;
 800136e:	2000      	movs	r0, #0
 8001370:	e7fc      	b.n	800136c <SD_RxDataBlock+0x40>
 8001372:	bf00      	nop
 8001374:	20000212 	.word	0x20000212

08001378 <SD_TxDataBlock>:
{
 8001378:	b530      	push	{r4, r5, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	4605      	mov	r5, r0
 800137e:	460c      	mov	r4, r1
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001380:	f7ff ff8e 	bl	80012a0 <SD_ReadyWait>
 8001384:	28ff      	cmp	r0, #255	; 0xff
 8001386:	d002      	beq.n	800138e <SD_TxDataBlock+0x16>
 8001388:	2000      	movs	r0, #0
}
 800138a:	b003      	add	sp, #12
 800138c:	bd30      	pop	{r4, r5, pc}
	SPI_TxByte(token);
 800138e:	4620      	mov	r0, r4
 8001390:	f7ff ff08 	bl	80011a4 <SPI_TxByte>
	if (token != 0xFD)
 8001394:	2cfd      	cmp	r4, #253	; 0xfd
 8001396:	d108      	bne.n	80013aa <SD_TxDataBlock+0x32>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001398:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800139c:	f000 001f 	and.w	r0, r0, #31
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80013a0:	2805      	cmp	r0, #5
 80013a2:	bf14      	ite	ne
 80013a4:	2000      	movne	r0, #0
 80013a6:	2001      	moveq	r0, #1
 80013a8:	e7ef      	b.n	800138a <SD_TxDataBlock+0x12>
		SPI_TxBuffer((uint8_t*)buff, 512);
 80013aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ae:	4628      	mov	r0, r5
 80013b0:	f7ff fee8 	bl	8001184 <SPI_TxBuffer>
		SPI_RxByte();
 80013b4:	f7ff ff24 	bl	8001200 <SPI_RxByte>
		SPI_RxByte();
 80013b8:	f7ff ff22 	bl	8001200 <SPI_RxByte>
 80013bc:	2441      	movs	r4, #65	; 0x41
			resp = SPI_RxByte();
 80013be:	f7ff ff1f 	bl	8001200 <SPI_RxByte>
 80013c2:	f88d 0007 	strb.w	r0, [sp, #7]
			if ((resp & 0x1F) == 0x05) break;
 80013c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d003      	beq.n	80013da <SD_TxDataBlock+0x62>
		while (i <= 64)
 80013d2:	1e63      	subs	r3, r4, #1
 80013d4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80013d8:	d1f1      	bne.n	80013be <SD_TxDataBlock+0x46>
		while (SPI_RxByte() == 0);
 80013da:	f7ff ff11 	bl	8001200 <SPI_RxByte>
 80013de:	2800      	cmp	r0, #0
 80013e0:	d0fb      	beq.n	80013da <SD_TxDataBlock+0x62>
 80013e2:	e7d9      	b.n	8001398 <SD_TxDataBlock+0x20>

080013e4 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80013e4:	2800      	cmp	r0, #0
 80013e6:	f040 80b2 	bne.w	800154e <SD_disk_initialize+0x16a>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80013ea:	4b5a      	ldr	r3, [pc, #360]	; (8001554 <SD_disk_initialize+0x170>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	f013 0f02 	tst.w	r3, #2
 80013f2:	d003      	beq.n	80013fc <SD_disk_initialize+0x18>
 80013f4:	4b57      	ldr	r3, [pc, #348]	; (8001554 <SD_disk_initialize+0x170>)
 80013f6:	7818      	ldrb	r0, [r3, #0]
 80013f8:	b2c0      	uxtb	r0, r0
 80013fa:	4770      	bx	lr
{
 80013fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001400:	b082      	sub	sp, #8

	/* power on */
	SD_PowerOn();
 8001402:	f7ff ff19 	bl	8001238 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001406:	f7ff fee3 	bl	80011d0 <SELECT>

	/* check disk type */
	type = 0;

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800140a:	2100      	movs	r1, #0
 800140c:	2040      	movs	r0, #64	; 0x40
 800140e:	f7ff ff57 	bl	80012c0 <SD_SendCmd>
 8001412:	4604      	mov	r4, r0
 8001414:	2801      	cmp	r0, #1
 8001416:	d009      	beq.n	800142c <SD_disk_initialize+0x48>
			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
		}
	}

	CardType = type;
 8001418:	2400      	movs	r4, #0
 800141a:	4b4f      	ldr	r3, [pc, #316]	; (8001558 <SD_disk_initialize+0x174>)
 800141c:	701c      	strb	r4, [r3, #0]

	/* Idle */
	DESELECT();
 800141e:	f7ff fee3 	bl	80011e8 <DESELECT>
	SPI_RxByte();
 8001422:	f7ff feed 	bl	8001200 <SPI_RxByte>
	PowerFlag = 0;
 8001426:	4b4d      	ldr	r3, [pc, #308]	; (800155c <SD_disk_initialize+0x178>)
 8001428:	701c      	strb	r4, [r3, #0]
}
 800142a:	e083      	b.n	8001534 <SD_disk_initialize+0x150>
		Timer1 = 1000;
 800142c:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <SD_disk_initialize+0x17c>)
 800142e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001432:	801a      	strh	r2, [r3, #0]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001434:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001438:	2048      	movs	r0, #72	; 0x48
 800143a:	f7ff ff41 	bl	80012c0 <SD_SendCmd>
 800143e:	2801      	cmp	r0, #1
 8001440:	d13e      	bne.n	80014c0 <SD_disk_initialize+0xdc>
 8001442:	ae01      	add	r6, sp, #4
 8001444:	ad02      	add	r5, sp, #8
 8001446:	4634      	mov	r4, r6
				ocr[n] = SPI_RxByte();
 8001448:	f7ff feda 	bl	8001200 <SPI_RxByte>
 800144c:	f804 0b01 	strb.w	r0, [r4], #1
			for (n = 0; n < 4; n++)
 8001450:	42ac      	cmp	r4, r5
 8001452:	d1f9      	bne.n	8001448 <SD_disk_initialize+0x64>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001454:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d1dd      	bne.n	8001418 <SD_disk_initialize+0x34>
 800145c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001460:	2baa      	cmp	r3, #170	; 0xaa
 8001462:	d1d9      	bne.n	8001418 <SD_disk_initialize+0x34>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001464:	2700      	movs	r7, #0
 8001466:	2477      	movs	r4, #119	; 0x77
				} while (Timer1);
 8001468:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001560 <SD_disk_initialize+0x17c>
 800146c:	e003      	b.n	8001476 <SD_disk_initialize+0x92>
 800146e:	f8b8 3000 	ldrh.w	r3, [r8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0d0      	beq.n	8001418 <SD_disk_initialize+0x34>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001476:	4639      	mov	r1, r7
 8001478:	4620      	mov	r0, r4
 800147a:	f7ff ff21 	bl	80012c0 <SD_SendCmd>
 800147e:	2801      	cmp	r0, #1
 8001480:	d8f5      	bhi.n	800146e <SD_disk_initialize+0x8a>
 8001482:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001486:	2069      	movs	r0, #105	; 0x69
 8001488:	f7ff ff1a 	bl	80012c0 <SD_SendCmd>
 800148c:	2800      	cmp	r0, #0
 800148e:	d1ee      	bne.n	800146e <SD_disk_initialize+0x8a>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001490:	4b33      	ldr	r3, [pc, #204]	; (8001560 <SD_disk_initialize+0x17c>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0bf      	beq.n	8001418 <SD_disk_initialize+0x34>
 8001498:	2100      	movs	r1, #0
 800149a:	207a      	movs	r0, #122	; 0x7a
 800149c:	f7ff ff10 	bl	80012c0 <SD_SendCmd>
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d1b9      	bne.n	8001418 <SD_disk_initialize+0x34>
						ocr[n] = SPI_RxByte();
 80014a4:	f7ff feac 	bl	8001200 <SPI_RxByte>
 80014a8:	f806 0b01 	strb.w	r0, [r6], #1
					for (n = 0; n < 4; n++)
 80014ac:	42ae      	cmp	r6, r5
 80014ae:	d1f9      	bne.n	80014a4 <SD_disk_initialize+0xc0>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80014b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80014b8:	bf14      	ite	ne
 80014ba:	240c      	movne	r4, #12
 80014bc:	2404      	moveq	r4, #4
 80014be:	e02e      	b.n	800151e <SD_disk_initialize+0x13a>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80014c0:	2100      	movs	r1, #0
 80014c2:	2077      	movs	r0, #119	; 0x77
 80014c4:	f7ff fefc 	bl	80012c0 <SD_SendCmd>
 80014c8:	2801      	cmp	r0, #1
 80014ca:	d903      	bls.n	80014d4 <SD_disk_initialize+0xf0>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014cc:	2500      	movs	r5, #0
 80014ce:	2741      	movs	r7, #65	; 0x41
			} while (Timer1);
 80014d0:	4e23      	ldr	r6, [pc, #140]	; (8001560 <SD_disk_initialize+0x17c>)
 80014d2:	e010      	b.n	80014f6 <SD_disk_initialize+0x112>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80014d4:	2100      	movs	r1, #0
 80014d6:	2069      	movs	r0, #105	; 0x69
 80014d8:	f7ff fef2 	bl	80012c0 <SD_SendCmd>
 80014dc:	2801      	cmp	r0, #1
 80014de:	bf98      	it	ls
 80014e0:	2402      	movls	r4, #2
 80014e2:	e7f3      	b.n	80014cc <SD_disk_initialize+0xe8>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80014e4:	4629      	mov	r1, r5
 80014e6:	2077      	movs	r0, #119	; 0x77
 80014e8:	f7ff feea 	bl	80012c0 <SD_SendCmd>
 80014ec:	2801      	cmp	r0, #1
 80014ee:	d927      	bls.n	8001540 <SD_disk_initialize+0x15c>
			} while (Timer1);
 80014f0:	8833      	ldrh	r3, [r6, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d090      	beq.n	8001418 <SD_disk_initialize+0x34>
				if (type == CT_SD1)
 80014f6:	2c02      	cmp	r4, #2
 80014f8:	d0f4      	beq.n	80014e4 <SD_disk_initialize+0x100>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014fa:	4629      	mov	r1, r5
 80014fc:	4638      	mov	r0, r7
 80014fe:	f7ff fedf 	bl	80012c0 <SD_SendCmd>
 8001502:	2800      	cmp	r0, #0
 8001504:	d1f4      	bne.n	80014f0 <SD_disk_initialize+0x10c>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <SD_disk_initialize+0x17c>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d084      	beq.n	8001418 <SD_disk_initialize+0x34>
 800150e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001512:	2050      	movs	r0, #80	; 0x50
 8001514:	f7ff fed4 	bl	80012c0 <SD_SendCmd>
 8001518:	2800      	cmp	r0, #0
 800151a:	f47f af7d 	bne.w	8001418 <SD_disk_initialize+0x34>
	CardType = type;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <SD_disk_initialize+0x174>)
 8001520:	701c      	strb	r4, [r3, #0]
	DESELECT();
 8001522:	f7ff fe61 	bl	80011e8 <DESELECT>
	SPI_RxByte();
 8001526:	f7ff fe6b 	bl	8001200 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
	{
		Stat &= ~STA_NOINIT;
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SD_disk_initialize+0x170>)
 800152c:	7813      	ldrb	r3, [r2, #0]
 800152e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001532:	7013      	strb	r3, [r2, #0]
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <SD_disk_initialize+0x170>)
 8001536:	7818      	ldrb	r0, [r3, #0]
 8001538:	b2c0      	uxtb	r0, r0
}
 800153a:	b002      	add	sp, #8
 800153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001540:	4629      	mov	r1, r5
 8001542:	2069      	movs	r0, #105	; 0x69
 8001544:	f7ff febc 	bl	80012c0 <SD_SendCmd>
 8001548:	2800      	cmp	r0, #0
 800154a:	d1d1      	bne.n	80014f0 <SD_disk_initialize+0x10c>
 800154c:	e7db      	b.n	8001506 <SD_disk_initialize+0x122>
	if(drv) return STA_NOINIT;
 800154e:	2001      	movs	r0, #1
}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000000 	.word	0x20000000
 8001558:	20000210 	.word	0x20000210
 800155c:	20000211 	.word	0x20000211
 8001560:	20000212 	.word	0x20000212

08001564 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
	if (drv) return STA_NOINIT;
 8001564:	b918      	cbnz	r0, 800156e <SD_disk_status+0xa>
	return Stat;
 8001566:	4b03      	ldr	r3, [pc, #12]	; (8001574 <SD_disk_status+0x10>)
 8001568:	7818      	ldrb	r0, [r3, #0]
 800156a:	b2c0      	uxtb	r0, r0
 800156c:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 800156e:	2001      	movs	r0, #1
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000000 	.word	0x20000000

08001578 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001578:	2800      	cmp	r0, #0
 800157a:	d13f      	bne.n	80015fc <SD_disk_read+0x84>
{
 800157c:	b570      	push	{r4, r5, r6, lr}
 800157e:	460d      	mov	r5, r1
 8001580:	4616      	mov	r6, r2
 8001582:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8001584:	2b00      	cmp	r3, #0
 8001586:	d03b      	beq.n	8001600 <SD_disk_read+0x88>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <SD_disk_read+0x90>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	f013 0f01 	tst.w	r3, #1
 8001590:	d138      	bne.n	8001604 <SD_disk_read+0x8c>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <SD_disk_read+0x94>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f013 0f04 	tst.w	r3, #4
 800159a:	bf08      	it	eq
 800159c:	0256      	lsleq	r6, r2, #9

	SELECT();
 800159e:	f7ff fe17 	bl	80011d0 <SELECT>

	if (count == 1)
 80015a2:	2c01      	cmp	r4, #1
 80015a4:	d01b      	beq.n	80015de <SD_disk_read+0x66>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80015a6:	4631      	mov	r1, r6
 80015a8:	2052      	movs	r0, #82	; 0x52
 80015aa:	f7ff fe89 	bl	80012c0 <SD_SendCmd>
 80015ae:	b970      	cbnz	r0, 80015ce <SD_disk_read+0x56>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80015b0:	f44f 7600 	mov.w	r6, #512	; 0x200
 80015b4:	4631      	mov	r1, r6
 80015b6:	4628      	mov	r0, r5
 80015b8:	f7ff feb8 	bl	800132c <SD_RxDataBlock>
 80015bc:	b118      	cbz	r0, 80015c6 <SD_disk_read+0x4e>
				buff += 512;
 80015be:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 80015c2:	3c01      	subs	r4, #1
 80015c4:	d1f6      	bne.n	80015b4 <SD_disk_read+0x3c>

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80015c6:	2100      	movs	r1, #0
 80015c8:	204c      	movs	r0, #76	; 0x4c
 80015ca:	f7ff fe79 	bl	80012c0 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80015ce:	f7ff fe0b 	bl	80011e8 <DESELECT>
	SPI_RxByte();
 80015d2:	f7ff fe15 	bl	8001200 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80015d6:	1e20      	subs	r0, r4, #0
 80015d8:	bf18      	it	ne
 80015da:	2001      	movne	r0, #1
}
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80015de:	4631      	mov	r1, r6
 80015e0:	2051      	movs	r0, #81	; 0x51
 80015e2:	f7ff fe6d 	bl	80012c0 <SD_SendCmd>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d1f1      	bne.n	80015ce <SD_disk_read+0x56>
 80015ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ee:	4628      	mov	r0, r5
 80015f0:	f7ff fe9c 	bl	800132c <SD_RxDataBlock>
 80015f4:	fab0 f480 	clz	r4, r0
 80015f8:	0964      	lsrs	r4, r4, #5
 80015fa:	e7e8      	b.n	80015ce <SD_disk_read+0x56>
	if (pdrv || !count) return RES_PARERR;
 80015fc:	2004      	movs	r0, #4
}
 80015fe:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8001600:	2004      	movs	r0, #4
 8001602:	e7eb      	b.n	80015dc <SD_disk_read+0x64>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001604:	2003      	movs	r0, #3
 8001606:	e7e9      	b.n	80015dc <SD_disk_read+0x64>
 8001608:	20000000 	.word	0x20000000
 800160c:	20000210 	.word	0x20000210

08001610 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001610:	2800      	cmp	r0, #0
 8001612:	d153      	bne.n	80016bc <SD_disk_write+0xac>
{
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	460d      	mov	r5, r1
 8001618:	4616      	mov	r6, r2
 800161a:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 800161c:	2b00      	cmp	r3, #0
 800161e:	d04f      	beq.n	80016c0 <SD_disk_write+0xb0>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <SD_disk_write+0xbc>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	f013 0f01 	tst.w	r3, #1
 8001628:	d14c      	bne.n	80016c4 <SD_disk_write+0xb4>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <SD_disk_write+0xbc>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	f013 0f04 	tst.w	r3, #4
 8001632:	d149      	bne.n	80016c8 <SD_disk_write+0xb8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <SD_disk_write+0xc0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	f013 0f04 	tst.w	r3, #4
 800163c:	bf08      	it	eq
 800163e:	0256      	lsleq	r6, r2, #9

	SELECT();
 8001640:	f7ff fdc6 	bl	80011d0 <SELECT>

	if (count == 1)
 8001644:	2c01      	cmp	r4, #1
 8001646:	d022      	beq.n	800168e <SD_disk_write+0x7e>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <SD_disk_write+0xc0>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	f013 0f02 	tst.w	r3, #2
 8001650:	d12b      	bne.n	80016aa <SD_disk_write+0x9a>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001652:	4631      	mov	r1, r6
 8001654:	2059      	movs	r0, #89	; 0x59
 8001656:	f7ff fe33 	bl	80012c0 <SD_SendCmd>
 800165a:	b980      	cbnz	r0, 800167e <SD_disk_write+0x6e>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800165c:	26fc      	movs	r6, #252	; 0xfc
 800165e:	4631      	mov	r1, r6
 8001660:	4628      	mov	r0, r5
 8001662:	f7ff fe89 	bl	8001378 <SD_TxDataBlock>
 8001666:	b118      	cbz	r0, 8001670 <SD_disk_write+0x60>
				buff += 512;
 8001668:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 800166c:	3c01      	subs	r4, #1
 800166e:	d1f6      	bne.n	800165e <SD_disk_write+0x4e>

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001670:	21fd      	movs	r1, #253	; 0xfd
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff fe80 	bl	8001378 <SD_TxDataBlock>
			{
				count = 1;
 8001678:	2800      	cmp	r0, #0
 800167a:	bf08      	it	eq
 800167c:	2401      	moveq	r4, #1
			}
		}
	}

	/* Idle */
	DESELECT();
 800167e:	f7ff fdb3 	bl	80011e8 <DESELECT>
	SPI_RxByte();
 8001682:	f7ff fdbd 	bl	8001200 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001686:	1e20      	subs	r0, r4, #0
 8001688:	bf18      	it	ne
 800168a:	2001      	movne	r0, #1
}
 800168c:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800168e:	4631      	mov	r1, r6
 8001690:	2058      	movs	r0, #88	; 0x58
 8001692:	f7ff fe15 	bl	80012c0 <SD_SendCmd>
 8001696:	2800      	cmp	r0, #0
 8001698:	d1f1      	bne.n	800167e <SD_disk_write+0x6e>
 800169a:	21fe      	movs	r1, #254	; 0xfe
 800169c:	4628      	mov	r0, r5
 800169e:	f7ff fe6b 	bl	8001378 <SD_TxDataBlock>
 80016a2:	fab0 f480 	clz	r4, r0
 80016a6:	0964      	lsrs	r4, r4, #5
 80016a8:	e7e9      	b.n	800167e <SD_disk_write+0x6e>
			SD_SendCmd(CMD55, 0);
 80016aa:	2100      	movs	r1, #0
 80016ac:	2077      	movs	r0, #119	; 0x77
 80016ae:	f7ff fe07 	bl	80012c0 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80016b2:	4621      	mov	r1, r4
 80016b4:	2057      	movs	r0, #87	; 0x57
 80016b6:	f7ff fe03 	bl	80012c0 <SD_SendCmd>
 80016ba:	e7ca      	b.n	8001652 <SD_disk_write+0x42>
	if (pdrv || !count) return RES_PARERR;
 80016bc:	2004      	movs	r0, #4
}
 80016be:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 80016c0:	2004      	movs	r0, #4
 80016c2:	e7e3      	b.n	800168c <SD_disk_write+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016c4:	2003      	movs	r0, #3
 80016c6:	e7e1      	b.n	800168c <SD_disk_write+0x7c>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80016c8:	2002      	movs	r0, #2
 80016ca:	e7df      	b.n	800168c <SD_disk_write+0x7c>
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000210 	.word	0x20000210

080016d4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80016d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d6:	b085      	sub	sp, #20
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80016d8:	2800      	cmp	r0, #0
 80016da:	f040 80af 	bne.w	800183c <SD_disk_ioctl+0x168>
 80016de:	460d      	mov	r5, r1
 80016e0:	4616      	mov	r6, r2
 80016e2:	4607      	mov	r7, r0
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 80016e4:	2905      	cmp	r1, #5
 80016e6:	d013      	beq.n	8001710 <SD_disk_ioctl+0x3c>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016e8:	4b56      	ldr	r3, [pc, #344]	; (8001844 <SD_disk_ioctl+0x170>)
 80016ea:	781c      	ldrb	r4, [r3, #0]
 80016ec:	f014 0401 	ands.w	r4, r4, #1
 80016f0:	f040 80a6 	bne.w	8001840 <SD_disk_ioctl+0x16c>

		SELECT();
 80016f4:	f7ff fd6c 	bl	80011d0 <SELECT>

		switch (ctrl)
 80016f8:	2d0d      	cmp	r5, #13
 80016fa:	f200 8093 	bhi.w	8001824 <SD_disk_ioctl+0x150>
 80016fe:	e8df f005 	tbb	[pc, r5]
 8001702:	1c5e      	.short	0x1c5e
 8001704:	9191915a 	.word	0x9191915a
 8001708:	91919191 	.word	0x91919191
 800170c:	83746591 	.word	0x83746591
		switch (*ptr)
 8001710:	7814      	ldrb	r4, [r2, #0]
 8001712:	2c01      	cmp	r4, #1
 8001714:	d008      	beq.n	8001728 <SD_disk_ioctl+0x54>
 8001716:	2c02      	cmp	r4, #2
 8001718:	d00a      	beq.n	8001730 <SD_disk_ioctl+0x5c>
 800171a:	b10c      	cbz	r4, 8001720 <SD_disk_ioctl+0x4c>
 800171c:	2404      	movs	r4, #4
 800171e:	e086      	b.n	800182e <SD_disk_ioctl+0x15a>
	PowerFlag = 0;
 8001720:	4b49      	ldr	r3, [pc, #292]	; (8001848 <SD_disk_ioctl+0x174>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
}
 8001726:	e082      	b.n	800182e <SD_disk_ioctl+0x15a>
			SD_PowerOn();		/* Power On */
 8001728:	f7ff fd86 	bl	8001238 <SD_PowerOn>
			res = RES_OK;
 800172c:	463c      	mov	r4, r7
			break;
 800172e:	e07e      	b.n	800182e <SD_disk_ioctl+0x15a>
	return PowerFlag;
 8001730:	4b45      	ldr	r3, [pc, #276]	; (8001848 <SD_disk_ioctl+0x174>)
			*(ptr + 1) = SD_CheckPower();
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	7053      	strb	r3, [r2, #1]
			res = RES_OK;		/* Power Check */
 8001736:	4604      	mov	r4, r0
			break;
 8001738:	e079      	b.n	800182e <SD_disk_ioctl+0x15a>
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800173a:	2100      	movs	r1, #0
 800173c:	2049      	movs	r0, #73	; 0x49
 800173e:	f7ff fdbf 	bl	80012c0 <SD_SendCmd>
 8001742:	4604      	mov	r4, r0
 8001744:	b108      	cbz	r0, 800174a <SD_disk_ioctl+0x76>
	res = RES_ERROR;
 8001746:	462c      	mov	r4, r5
 8001748:	e06d      	b.n	8001826 <SD_disk_ioctl+0x152>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800174a:	2110      	movs	r1, #16
 800174c:	4668      	mov	r0, sp
 800174e:	f7ff fded 	bl	800132c <SD_RxDataBlock>
 8001752:	2800      	cmp	r0, #0
 8001754:	d06e      	beq.n	8001834 <SD_disk_ioctl+0x160>
			{
				if ((csd[0] >> 6) == 1)
 8001756:	f89d 3000 	ldrb.w	r3, [sp]
 800175a:	099b      	lsrs	r3, r3, #6
 800175c:	2b01      	cmp	r3, #1
 800175e:	d01f      	beq.n	80017a0 <SD_disk_ioctl+0xcc>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001760:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001764:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	eb03 1392 	add.w	r3, r3, r2, lsr #6
 800176e:	3301      	adds	r3, #1
 8001770:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001774:	0292      	lsls	r2, r2, #10
 8001776:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800177a:	4413      	add	r3, r2
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800177c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001780:	f002 020f 	and.w	r2, r2, #15
 8001784:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8001788:	eb02 12d1 	add.w	r2, r2, r1, lsr #7
 800178c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8001790:	0049      	lsls	r1, r1, #1
 8001792:	f001 0106 	and.w	r1, r1, #6
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001796:	440a      	add	r2, r1
 8001798:	3a07      	subs	r2, #7
 800179a:	4093      	lsls	r3, r2
 800179c:	6033      	str	r3, [r6, #0]
 800179e:	e042      	b.n	8001826 <SD_disk_ioctl+0x152>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80017a0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80017a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80017a8:	3301      	adds	r3, #1
 80017aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
					*(DWORD*) buff = (DWORD) csize << 10;
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	029b      	lsls	r3, r3, #10
 80017b2:	6033      	str	r3, [r6, #0]
 80017b4:	e037      	b.n	8001826 <SD_disk_ioctl+0x152>
				}
				res = RES_OK;
			}
			break;
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80017b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ba:	8033      	strh	r3, [r6, #0]
			res = RES_OK;
			break;
 80017bc:	e033      	b.n	8001826 <SD_disk_ioctl+0x152>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017be:	f7ff fd6f 	bl	80012a0 <SD_ReadyWait>
	res = RES_ERROR;
 80017c2:	f1b0 04ff 	subs.w	r4, r0, #255	; 0xff
 80017c6:	bf18      	it	ne
 80017c8:	2401      	movne	r4, #1
 80017ca:	e02c      	b.n	8001826 <SD_disk_ioctl+0x152>
			break;
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017cc:	2100      	movs	r1, #0
 80017ce:	2049      	movs	r0, #73	; 0x49
 80017d0:	f7ff fd76 	bl	80012c0 <SD_SendCmd>
 80017d4:	b108      	cbz	r0, 80017da <SD_disk_ioctl+0x106>
	res = RES_ERROR;
 80017d6:	2401      	movs	r4, #1
 80017d8:	e025      	b.n	8001826 <SD_disk_ioctl+0x152>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017da:	2110      	movs	r1, #16
 80017dc:	4630      	mov	r0, r6
 80017de:	f7ff fda5 	bl	800132c <SD_RxDataBlock>
	res = RES_ERROR;
 80017e2:	fab0 f480 	clz	r4, r0
 80017e6:	0964      	lsrs	r4, r4, #5
 80017e8:	e01d      	b.n	8001826 <SD_disk_ioctl+0x152>
			break;
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017ea:	2100      	movs	r1, #0
 80017ec:	204a      	movs	r0, #74	; 0x4a
 80017ee:	f7ff fd67 	bl	80012c0 <SD_SendCmd>
 80017f2:	b108      	cbz	r0, 80017f8 <SD_disk_ioctl+0x124>
	res = RES_ERROR;
 80017f4:	2401      	movs	r4, #1
 80017f6:	e016      	b.n	8001826 <SD_disk_ioctl+0x152>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017f8:	2110      	movs	r1, #16
 80017fa:	4630      	mov	r0, r6
 80017fc:	f7ff fd96 	bl	800132c <SD_RxDataBlock>
	res = RES_ERROR;
 8001800:	fab0 f480 	clz	r4, r0
 8001804:	0964      	lsrs	r4, r4, #5
 8001806:	e00e      	b.n	8001826 <SD_disk_ioctl+0x152>
			break;
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001808:	2100      	movs	r1, #0
 800180a:	207a      	movs	r0, #122	; 0x7a
 800180c:	f7ff fd58 	bl	80012c0 <SD_SendCmd>
 8001810:	b990      	cbnz	r0, 8001838 <SD_disk_ioctl+0x164>
 8001812:	1d34      	adds	r4, r6, #4
			{
				for (n = 0; n < 4; n++)
				{
					*ptr++ = SPI_RxByte();
 8001814:	f7ff fcf4 	bl	8001200 <SPI_RxByte>
 8001818:	f806 0b01 	strb.w	r0, [r6], #1
				for (n = 0; n < 4; n++)
 800181c:	42b4      	cmp	r4, r6
 800181e:	d1f9      	bne.n	8001814 <SD_disk_ioctl+0x140>
				}
				res = RES_OK;
			}
		default:
			res = RES_PARERR;
 8001820:	2404      	movs	r4, #4
 8001822:	e000      	b.n	8001826 <SD_disk_ioctl+0x152>
		switch (ctrl)
 8001824:	2404      	movs	r4, #4
		}

		DESELECT();
 8001826:	f7ff fcdf 	bl	80011e8 <DESELECT>
		SPI_RxByte();
 800182a:	f7ff fce9 	bl	8001200 <SPI_RxByte>
	}

	return res;
}
 800182e:	4620      	mov	r0, r4
 8001830:	b005      	add	sp, #20
 8001832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = RES_ERROR;
 8001834:	462c      	mov	r4, r5
 8001836:	e7f6      	b.n	8001826 <SD_disk_ioctl+0x152>
			res = RES_PARERR;
 8001838:	2404      	movs	r4, #4
 800183a:	e7f4      	b.n	8001826 <SD_disk_ioctl+0x152>
	if (drv) return RES_PARERR;
 800183c:	2404      	movs	r4, #4
 800183e:	e7f6      	b.n	800182e <SD_disk_ioctl+0x15a>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001840:	2403      	movs	r4, #3
 8001842:	e7f4      	b.n	800182e <SD_disk_ioctl+0x15a>
 8001844:	20000000 	.word	0x20000000
 8001848:	20000211 	.word	0x20000211

0800184c <read_fifo_and_write_data_file>:

	check_capturing = 1;
	TIM2->CNT = 0;
}

int __attribute__((optimize("O0"))) read_fifo_and_write_data_file() {
 800184c:	b580      	push	{r7, lr}
 800184e:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
//	while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {}; // wait for buffer to fill before saving
//	while (!(OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {}; // wait for final frame
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_READ);
 8001856:	2210      	movs	r2, #16
 8001858:	2104      	movs	r1, #4
 800185a:	48a2      	ldr	r0, [pc, #648]	; (8001ae4 <read_fifo_and_write_data_file+0x298>)
 800185c:	f7ff fbb4 	bl	8000fc8 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 8001860:	2201      	movs	r2, #1
 8001862:	2104      	movs	r1, #4
 8001864:	489f      	ldr	r0, [pc, #636]	; (8001ae4 <read_fifo_and_write_data_file+0x298>)
 8001866:	f7ff fbaf 	bl	8000fc8 <OV5462_write_spi_reg>

	uint8_t temp=0;
 800186a:	2300      	movs	r3, #0
 800186c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001870:	f102 020f 	add.w	r2, r2, #15
 8001874:	7013      	strb	r3, [r2, #0]
	uint32_t length = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800187c:	f102 0214 	add.w	r2, r2, #20
 8001880:	6013      	str	r3, [r2, #0]
	int i = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001888:	f102 0210 	add.w	r2, r2, #16
 800188c:	6013      	str	r3, [r2, #0]
	uint8_t buf[CHUNK_SIZE];

	static int video_id = 0;

	length = OV5462_read_fifo_length(&ov5462);
 800188e:	4895      	ldr	r0, [pc, #596]	; (8001ae4 <read_fifo_and_write_data_file+0x298>)
 8001890:	f7ff fc42 	bl	8001118 <OV5462_read_fifo_length>
 8001894:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001898:	f103 0314 	add.w	r3, r3, #20
 800189c:	6018      	str	r0, [r3, #0]
	printf("Buffer length: %lu\r\n", length);
 800189e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80018a2:	f103 0314 	add.w	r3, r3, #20
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	488f      	ldr	r0, [pc, #572]	; (8001ae8 <read_fifo_and_write_data_file+0x29c>)
 80018aa:	f005 fe17 	bl	80074dc <iprintf>

	if (length >= MAX_FIFO_LENGTH) {
 80018ae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80018b2:	f103 0314 	add.w	r3, r3, #20
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a8c      	ldr	r2, [pc, #560]	; (8001aec <read_fifo_and_write_data_file+0x2a0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d908      	bls.n	80018d0 <read_fifo_and_write_data_file+0x84>
		printf("Buffer too large\r\n");
 80018be:	488c      	ldr	r0, [pc, #560]	; (8001af0 <read_fifo_and_write_data_file+0x2a4>)
 80018c0:	f005 fe92 	bl	80075e8 <puts>
		length = MAX_FIFO_LENGTH-1;
 80018c4:	4b89      	ldr	r3, [pc, #548]	; (8001aec <read_fifo_and_write_data_file+0x2a0>)
 80018c6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80018ca:	f102 0214 	add.w	r2, r2, #20
 80018ce:	6013      	str	r3, [r2, #0]
	}

	if (length == 0) {
 80018d0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80018d4:	f103 0314 	add.w	r3, r3, #20
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d105      	bne.n	80018ea <read_fifo_and_write_data_file+0x9e>
		printf("Buffer empty\r\n");
 80018de:	4885      	ldr	r0, [pc, #532]	; (8001af4 <read_fifo_and_write_data_file+0x2a8>)
 80018e0:	f005 fe82 	bl	80075e8 <puts>
		return -1;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e8:	e0f5      	b.n	8001ad6 <read_fifo_and_write_data_file+0x28a>
	}

//	length = MAX_FIFO_LENGTH-1; // !! ASSUME BUFFER IS FULL !!

	int filename_len = snprintf(NULL, 0, "%d.DAT", video_id);
 80018ea:	4b83      	ldr	r3, [pc, #524]	; (8001af8 <read_fifo_and_write_data_file+0x2ac>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a83      	ldr	r2, [pc, #524]	; (8001afc <read_fifo_and_write_data_file+0x2b0>)
 80018f0:	2100      	movs	r1, #0
 80018f2:	2000      	movs	r0, #0
 80018f4:	f005 fe90 	bl	8007618 <sniprintf>
 80018f8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80018fc:	f103 0308 	add.w	r3, r3, #8
 8001900:	6018      	str	r0, [r3, #0]
	char* filename = malloc(filename_len+1);
 8001902:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001906:	f103 0308 	add.w	r3, r3, #8
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	4618      	mov	r0, r3
 8001910:	f005 f882 	bl	8006a18 <malloc>
 8001914:	4603      	mov	r3, r0
 8001916:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800191a:	f102 0204 	add.w	r2, r2, #4
 800191e:	6013      	str	r3, [r2, #0]
	snprintf(filename, filename_len+1, "%d.DAT", video_id);
 8001920:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001924:	f103 0308 	add.w	r3, r3, #8
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	4619      	mov	r1, r3
 800192e:	4b72      	ldr	r3, [pc, #456]	; (8001af8 <read_fifo_and_write_data_file+0x2ac>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a72      	ldr	r2, [pc, #456]	; (8001afc <read_fifo_and_write_data_file+0x2b0>)
 8001934:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8001938:	f100 0004 	add.w	r0, r0, #4
 800193c:	6800      	ldr	r0, [r0, #0]
 800193e:	f005 fe6b 	bl	8007618 <sniprintf>

	FRESULT fr = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001942:	2213      	movs	r2, #19
 8001944:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001948:	f103 0304 	add.w	r3, r3, #4
 800194c:	6819      	ldr	r1, [r3, #0]
 800194e:	486c      	ldr	r0, [pc, #432]	; (8001b00 <read_fifo_and_write_data_file+0x2b4>)
 8001950:	f004 fb58 	bl	8006004 <f_open>
 8001954:	4603      	mov	r3, r0
 8001956:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800195a:	f102 0203 	add.w	r2, r2, #3
 800195e:	7013      	strb	r3, [r2, #0]
	printf("%s\r\n", filename);
 8001960:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001964:	f103 0304 	add.w	r3, r3, #4
 8001968:	6819      	ldr	r1, [r3, #0]
 800196a:	4866      	ldr	r0, [pc, #408]	; (8001b04 <read_fifo_and_write_data_file+0x2b8>)
 800196c:	f005 fdb6 	bl	80074dc <iprintf>
	free(filename);
 8001970:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001974:	f103 0304 	add.w	r3, r3, #4
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	f005 f855 	bl	8006a28 <free>
	if (fr) printf("file open failed\r\n");
 800197e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001982:	f103 0303 	add.w	r3, r3, #3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <read_fifo_and_write_data_file+0x146>
 800198c:	485e      	ldr	r0, [pc, #376]	; (8001b08 <read_fifo_and_write_data_file+0x2bc>)
 800198e:	f005 fe2b 	bl	80075e8 <puts>
	++video_id;
 8001992:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <read_fifo_and_write_data_file+0x2ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <read_fifo_and_write_data_file+0x2ac>)
 800199a:	6013      	str	r3, [r2, #0]
	i = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80019a2:	f102 0210 	add.w	r2, r2, #16
 80019a6:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2110      	movs	r1, #16
 80019ac:	4857      	ldr	r0, [pc, #348]	; (8001b0c <read_fifo_and_write_data_file+0x2c0>)
 80019ae:	f001 fa1d 	bl	8002dec <HAL_GPIO_WritePin>
	OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 80019b2:	484c      	ldr	r0, [pc, #304]	; (8001ae4 <read_fifo_and_write_data_file+0x298>)
 80019b4:	f7ff fbc7 	bl	8001146 <OV5462_request_FIFO_burst>

	while (length--) {
 80019b8:	e06c      	b.n	8001a94 <read_fifo_and_write_data_file+0x248>
		temp = SPI_OptimizedReadByte();
 80019ba:	f7ff fbd3 	bl	8001164 <SPI_OptimizedReadByte>
 80019be:	4603      	mov	r3, r0
 80019c0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80019c4:	f102 020f 	add.w	r2, r2, #15
 80019c8:	7013      	strb	r3, [r2, #0]
		if (i < CHUNK_SIZE) {
 80019ca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80019ce:	f103 0310 	add.w	r3, r3, #16
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d8:	da15      	bge.n	8001a06 <read_fifo_and_write_data_file+0x1ba>
			buf[i++] = temp;
 80019da:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80019de:	f103 0310 	add.w	r3, r3, #16
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80019ea:	f101 0110 	add.w	r1, r1, #16
 80019ee:	600a      	str	r2, [r1, #0]
 80019f0:	f107 0218 	add.w	r2, r7, #24
 80019f4:	4413      	add	r3, r2
 80019f6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80019fa:	f102 020f 	add.w	r2, r2, #15
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001a04:	e046      	b.n	8001a94 <read_fifo_and_write_data_file+0x248>
		} else {
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8001a06:	2201      	movs	r2, #1
 8001a08:	2110      	movs	r1, #16
 8001a0a:	4840      	ldr	r0, [pc, #256]	; (8001b0c <read_fifo_and_write_data_file+0x2c0>)
 8001a0c:	f001 f9ee 	bl	8002dec <HAL_GPIO_WritePin>

			fr = f_write(&fil, buf, sizeof(uint8_t)*CHUNK_SIZE, &bw);
 8001a10:	f107 0118 	add.w	r1, r7, #24
 8001a14:	3918      	subs	r1, #24
 8001a16:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <read_fifo_and_write_data_file+0x2c4>)
 8001a18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a1c:	4838      	ldr	r0, [pc, #224]	; (8001b00 <read_fifo_and_write_data_file+0x2b4>)
 8001a1e:	f004 fd02 	bl	8006426 <f_write>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001a28:	f102 0203 	add.w	r2, r2, #3
 8001a2c:	7013      	strb	r3, [r2, #0]
			if (fr) printf("%d\r\n", fr);
 8001a2e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a32:	f103 0303 	add.w	r3, r3, #3
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <read_fifo_and_write_data_file+0x202>
 8001a3c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a40:	f103 0303 	add.w	r3, r3, #3
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4832      	ldr	r0, [pc, #200]	; (8001b14 <read_fifo_and_write_data_file+0x2c8>)
 8001a4a:	f005 fd47 	bl	80074dc <iprintf>

			i = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001a54:	f102 0210 	add.w	r2, r2, #16
 8001a58:	6013      	str	r3, [r2, #0]
			buf[i++] = temp;
 8001a5a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a5e:	f103 0310 	add.w	r3, r3, #16
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001a6a:	f101 0110 	add.w	r1, r1, #16
 8001a6e:	600a      	str	r2, [r1, #0]
 8001a70:	f107 0218 	add.w	r2, r7, #24
 8001a74:	4413      	add	r3, r2
 8001a76:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001a7a:	f102 020f 	add.w	r2, r2, #15
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	f803 2c18 	strb.w	r2, [r3, #-24]
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2110      	movs	r1, #16
 8001a88:	4820      	ldr	r0, [pc, #128]	; (8001b0c <read_fifo_and_write_data_file+0x2c0>)
 8001a8a:	f001 f9af 	bl	8002dec <HAL_GPIO_WritePin>

			OV5462_request_FIFO_burst(&ov5462); // send FIFO burst command
 8001a8e:	4815      	ldr	r0, [pc, #84]	; (8001ae4 <read_fifo_and_write_data_file+0x298>)
 8001a90:	f7ff fb59 	bl	8001146 <OV5462_request_FIFO_burst>
	while (length--) {
 8001a94:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a98:	f103 0314 	add.w	r3, r3, #20
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	1e5a      	subs	r2, r3, #1
 8001aa0:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001aa4:	f101 0114 	add.w	r1, r1, #20
 8001aa8:	600a      	str	r2, [r1, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d185      	bne.n	80019ba <read_fifo_and_write_data_file+0x16e>
//			buf[i++] = temp_last;
//			buf[i++] = temp;
//		}
//	}

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2110      	movs	r1, #16
 8001ab2:	4816      	ldr	r0, [pc, #88]	; (8001b0c <read_fifo_and_write_data_file+0x2c0>)
 8001ab4:	f001 f99a 	bl	8002dec <HAL_GPIO_WritePin>
	is_header = 0;
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <read_fifo_and_write_data_file+0x2cc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
	f_close(&fil);
 8001abe:	4810      	ldr	r0, [pc, #64]	; (8001b00 <read_fifo_and_write_data_file+0x2b4>)
 8001ac0:	f004 fe36 	bl	8006730 <f_close>
	printf("Save complete \r\n");
 8001ac4:	4815      	ldr	r0, [pc, #84]	; (8001b1c <read_fifo_and_write_data_file+0x2d0>)
 8001ac6:	f005 fd8f 	bl	80075e8 <puts>
	save_requested = 0;
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <read_fifo_and_write_data_file+0x2d4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

	trigger_capture();
 8001ad0:	f000 f8e6 	bl	8001ca0 <trigger_capture>

//	OV5462_continuous_capture_init(&ov5462); // restore continuous capture functionality

	return 0;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000228 	.word	0x20000228
 8001ae8:	08009958 	.word	0x08009958
 8001aec:	007ffffe 	.word	0x007ffffe
 8001af0:	08009970 	.word	0x08009970
 8001af4:	08009984 	.word	0x08009984
 8001af8:	20000218 	.word	0x20000218
 8001afc:	08009994 	.word	0x08009994
 8001b00:	20000230 	.word	0x20000230
 8001b04:	0800999c 	.word	0x0800999c
 8001b08:	080099a4 	.word	0x080099a4
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	2000021c 	.word	0x2000021c
 8001b14:	080099b8 	.word	0x080099b8
 8001b18:	20000220 	.word	0x20000220
 8001b1c:	080099c0 	.word	0x080099c0
 8001b20:	20000224 	.word	0x20000224

08001b24 <testSD>:
int testSD() {
 8001b24:	b510      	push	{r4, lr}
 8001b26:	b082      	sub	sp, #8
	if(f_mount(&fs, "/", 0) != FR_OK) {
 8001b28:	2200      	movs	r2, #0
 8001b2a:	4948      	ldr	r1, [pc, #288]	; (8001c4c <testSD+0x128>)
 8001b2c:	4848      	ldr	r0, [pc, #288]	; (8001c50 <testSD+0x12c>)
 8001b2e:	f004 fa35 	bl	8005f9c <f_mount>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d156      	bne.n	8001be4 <testSD+0xc0>
	ret = f_open(&fil, "/TEST.TXT", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b36:	2213      	movs	r2, #19
 8001b38:	4946      	ldr	r1, [pc, #280]	; (8001c54 <testSD+0x130>)
 8001b3a:	4847      	ldr	r0, [pc, #284]	; (8001c58 <testSD+0x134>)
 8001b3c:	f004 fa62 	bl	8006004 <f_open>
	if(ret != FR_OK) {
 8001b40:	4601      	mov	r1, r0
 8001b42:	2800      	cmp	r0, #0
 8001b44:	d154      	bne.n	8001bf0 <testSD+0xcc>
	if(f_getfree("", &fre_clust, &pfs) != FR_OK) {
 8001b46:	4a45      	ldr	r2, [pc, #276]	; (8001c5c <testSD+0x138>)
 8001b48:	4945      	ldr	r1, [pc, #276]	; (8001c60 <testSD+0x13c>)
 8001b4a:	4846      	ldr	r0, [pc, #280]	; (8001c64 <testSD+0x140>)
 8001b4c:	f004 fe05 	bl	800675a <f_getfree>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d153      	bne.n	8001bfc <testSD+0xd8>
	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001b54:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <testSD+0x138>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	895c      	ldrh	r4, [r3, #10]
 8001b5a:	6998      	ldr	r0, [r3, #24]
 8001b5c:	3802      	subs	r0, #2
 8001b5e:	fb04 f000 	mul.w	r0, r4, r0
 8001b62:	f7fe fce7 	bl	8000534 <__aeabi_ui2d>
 8001b66:	2200      	movs	r2, #0
 8001b68:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <testSD+0x144>)
 8001b6a:	f7fe fd5d 	bl	8000628 <__aeabi_dmul>
 8001b6e:	f7ff f833 	bl	8000bd8 <__aeabi_d2uiz>
 8001b72:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <testSD+0x148>)
 8001b74:	6018      	str	r0, [r3, #0]
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <testSD+0x13c>)
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	fb04 f000 	mul.w	r0, r4, r0
 8001b7e:	f7fe fcd9 	bl	8000534 <__aeabi_ui2d>
 8001b82:	2200      	movs	r2, #0
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <testSD+0x144>)
 8001b86:	f7fe fd4f 	bl	8000628 <__aeabi_dmul>
 8001b8a:	f7ff f825 	bl	8000bd8 <__aeabi_d2uiz>
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <testSD+0x14c>)
 8001b90:	6018      	str	r0, [r3, #0]
	if(free_space < 1) {
 8001b92:	2800      	cmp	r0, #0
 8001b94:	d038      	beq.n	8001c08 <testSD+0xe4>
	f_puts("TEST", &fil);
 8001b96:	4c30      	ldr	r4, [pc, #192]	; (8001c58 <testSD+0x134>)
 8001b98:	4621      	mov	r1, r4
 8001b9a:	4836      	ldr	r0, [pc, #216]	; (8001c74 <testSD+0x150>)
 8001b9c:	f004 fecc 	bl	8006938 <f_puts>
	ret = f_close(&fil);
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f004 fdc5 	bl	8006730 <f_close>
	if(ret != FR_OK) {
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	bba0      	cbnz	r0, 8001c14 <testSD+0xf0>
	ret = f_open(&fil, "/TEST.TXT", FA_READ);
 8001baa:	2201      	movs	r2, #1
 8001bac:	4929      	ldr	r1, [pc, #164]	; (8001c54 <testSD+0x130>)
 8001bae:	482a      	ldr	r0, [pc, #168]	; (8001c58 <testSD+0x134>)
 8001bb0:	f004 fa28 	bl	8006004 <f_open>
	if(ret != FR_OK) {
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	bb98      	cbnz	r0, 8001c20 <testSD+0xfc>
	f_gets(buffer, sizeof(buffer), &fil);
 8001bb8:	4a27      	ldr	r2, [pc, #156]	; (8001c58 <testSD+0x134>)
 8001bba:	2105      	movs	r1, #5
 8001bbc:	4668      	mov	r0, sp
 8001bbe:	f004 fe96 	bl	80068ee <f_gets>
	if (strcmp(buffer, "TEST")) {
 8001bc2:	492c      	ldr	r1, [pc, #176]	; (8001c74 <testSD+0x150>)
 8001bc4:	4668      	mov	r0, sp
 8001bc6:	f7fe fb0b 	bl	80001e0 <strcmp>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	bb70      	cbnz	r0, 8001c2c <testSD+0x108>
	if(f_close(&fil) != FR_OK) {
 8001bce:	4822      	ldr	r0, [pc, #136]	; (8001c58 <testSD+0x134>)
 8001bd0:	f004 fdae 	bl	8006730 <f_close>
 8001bd4:	bb80      	cbnz	r0, 8001c38 <testSD+0x114>
	if(f_unlink("test.txt") != FR_OK) {
 8001bd6:	4828      	ldr	r0, [pc, #160]	; (8001c78 <testSD+0x154>)
 8001bd8:	f004 fe2f 	bl	800683a <f_unlink>
 8001bdc:	bb90      	cbnz	r0, 8001c44 <testSD+0x120>
}
 8001bde:	4620      	mov	r0, r4
 8001be0:	b002      	add	sp, #8
 8001be2:	bd10      	pop	{r4, pc}
		printf("Failed to mount SD Card\r\n");
 8001be4:	4825      	ldr	r0, [pc, #148]	; (8001c7c <testSD+0x158>)
 8001be6:	f005 fcff 	bl	80075e8 <puts>
		return -1;
 8001bea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001bee:	e7f6      	b.n	8001bde <testSD+0xba>
		printf("Failed to open file (%i) \r\n", ret);
 8001bf0:	4823      	ldr	r0, [pc, #140]	; (8001c80 <testSD+0x15c>)
 8001bf2:	f005 fc73 	bl	80074dc <iprintf>
		return -1;
 8001bf6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001bfa:	e7f0      	b.n	8001bde <testSD+0xba>
		printf("Free space check failed\r\n");
 8001bfc:	4821      	ldr	r0, [pc, #132]	; (8001c84 <testSD+0x160>)
 8001bfe:	f005 fcf3 	bl	80075e8 <puts>
		return -1;
 8001c02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001c06:	e7ea      	b.n	8001bde <testSD+0xba>
		printf("Drive is full\r\n");
 8001c08:	481f      	ldr	r0, [pc, #124]	; (8001c88 <testSD+0x164>)
 8001c0a:	f005 fced 	bl	80075e8 <puts>
		return -1;
 8001c0e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001c12:	e7e4      	b.n	8001bde <testSD+0xba>
		printf("Failed to close file (%i) \r\n", ret);
 8001c14:	481d      	ldr	r0, [pc, #116]	; (8001c8c <testSD+0x168>)
 8001c16:	f005 fc61 	bl	80074dc <iprintf>
		return -1;
 8001c1a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001c1e:	e7de      	b.n	8001bde <testSD+0xba>
		printf("Failed to open in read mode (%i) \r\n", ret);
 8001c20:	481b      	ldr	r0, [pc, #108]	; (8001c90 <testSD+0x16c>)
 8001c22:	f005 fc5b 	bl	80074dc <iprintf>
		return -1;
 8001c26:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001c2a:	e7d8      	b.n	8001bde <testSD+0xba>
		printf("File contents MISMATCH. FAIL R/W test\r\n");
 8001c2c:	4819      	ldr	r0, [pc, #100]	; (8001c94 <testSD+0x170>)
 8001c2e:	f005 fcdb 	bl	80075e8 <puts>
		return -1;
 8001c32:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001c36:	e7d2      	b.n	8001bde <testSD+0xba>
		printf("Failed to close\r\n");
 8001c38:	4817      	ldr	r0, [pc, #92]	; (8001c98 <testSD+0x174>)
 8001c3a:	f005 fcd5 	bl	80075e8 <puts>
		return -1;
 8001c3e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001c42:	e7cc      	b.n	8001bde <testSD+0xba>
		printf("Failed to delete test file \r\n");
 8001c44:	4815      	ldr	r0, [pc, #84]	; (8001c9c <testSD+0x178>)
 8001c46:	f005 fccf 	bl	80075e8 <puts>
 8001c4a:	e7c8      	b.n	8001bde <testSD+0xba>
 8001c4c:	080099d0 	.word	0x080099d0
 8001c50:	20001270 	.word	0x20001270
 8001c54:	080099f0 	.word	0x080099f0
 8001c58:	20000230 	.word	0x20000230
 8001c5c:	200024d4 	.word	0x200024d4
 8001c60:	20001268 	.word	0x20001268
 8001c64:	08009a18 	.word	0x08009a18
 8001c68:	3fe00000 	.word	0x3fe00000
 8001c6c:	200024d8 	.word	0x200024d8
 8001c70:	2000126c 	.word	0x2000126c
 8001c74:	08009a48 	.word	0x08009a48
 8001c78:	08009ad0 	.word	0x08009ad0
 8001c7c:	080099d4 	.word	0x080099d4
 8001c80:	080099fc 	.word	0x080099fc
 8001c84:	08009a1c 	.word	0x08009a1c
 8001c88:	08009a38 	.word	0x08009a38
 8001c8c:	08009a50 	.word	0x08009a50
 8001c90:	08009a70 	.word	0x08009a70
 8001c94:	08009a94 	.word	0x08009a94
 8001c98:	08009abc 	.word	0x08009abc
 8001c9c:	08009adc 	.word	0x08009adc

08001ca0 <trigger_capture>:
void trigger_capture() {
 8001ca0:	b538      	push	{r3, r4, r5, lr}
	printf("Capture!\r\n");
 8001ca2:	4811      	ldr	r0, [pc, #68]	; (8001ce8 <trigger_capture+0x48>)
 8001ca4:	f005 fca0 	bl	80075e8 <puts>
	capture_flag = 0;
 8001ca8:	2500      	movs	r5, #0
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <trigger_capture+0x4c>)
 8001cac:	601d      	str	r5, [r3, #0]
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK); // clear flag
 8001cae:	4c10      	ldr	r4, [pc, #64]	; (8001cf0 <trigger_capture+0x50>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff f987 	bl	8000fc8 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_WRITE);
 8001cba:	2220      	movs	r2, #32
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff f982 	bl	8000fc8 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_RESET_READ);
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	2104      	movs	r1, #4
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff f97d 	bl	8000fc8 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK); // start capture
 8001cce:	2202      	movs	r2, #2
 8001cd0:	2104      	movs	r1, #4
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff f978 	bl	8000fc8 <OV5462_write_spi_reg>
	check_capturing = 1;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <trigger_capture+0x54>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
	TIM2->CNT = 0;
 8001cde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ce2:	625d      	str	r5, [r3, #36]	; 0x24
}
 8001ce4:	bd38      	pop	{r3, r4, r5, pc}
 8001ce6:	bf00      	nop
 8001ce8:	08009afc 	.word	0x08009afc
 8001cec:	20001260 	.word	0x20001260
 8001cf0:	20000228 	.word	0x20000228
 8001cf4:	20001264 	.word	0x20001264

08001cf8 <set_capture_flag>:

void set_capture_flag(int f) {
	capture_flag = f;
 8001cf8:	4b01      	ldr	r3, [pc, #4]	; (8001d00 <set_capture_flag+0x8>)
 8001cfa:	6018      	str	r0, [r3, #0]
}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20001260 	.word	0x20001260

08001d04 <set_save_requested>:

void set_save_requested(int f) {
	save_requested = f;
 8001d04:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <set_save_requested+0x8>)
 8001d06:	6018      	str	r0, [r3, #0]
}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000224 	.word	0x20000224

08001d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d10:	b500      	push	{lr}
 8001d12:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d14:	2230      	movs	r2, #48	; 0x30
 8001d16:	2100      	movs	r1, #0
 8001d18:	a808      	add	r0, sp, #32
 8001d1a:	f004 fe8d 	bl	8006a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9303      	str	r3, [sp, #12]
 8001d22:	9304      	str	r3, [sp, #16]
 8001d24:	9305      	str	r3, [sp, #20]
 8001d26:	9306      	str	r3, [sp, #24]
 8001d28:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <SystemClock_Config+0x9c>)
 8001d2e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001d30:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001d34:	6411      	str	r1, [r2, #64]	; 0x40
 8001d36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d38:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001d3c:	9201      	str	r2, [sp, #4]
 8001d3e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d40:	9302      	str	r3, [sp, #8]
 8001d42:	491b      	ldr	r1, [pc, #108]	; (8001db0 <SystemClock_Config+0xa0>)
 8001d44:	680a      	ldr	r2, [r1, #0]
 8001d46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d4e:	600a      	str	r2, [r1, #0]
 8001d50:	680a      	ldr	r2, [r1, #0]
 8001d52:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001d56:	9202      	str	r2, [sp, #8]
 8001d58:	9a02      	ldr	r2, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d5e:	2201      	movs	r2, #1
 8001d60:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d62:	2210      	movs	r2, #16
 8001d64:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d66:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d68:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d6a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d70:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d72:	2304      	movs	r3, #4
 8001d74:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d76:	2307      	movs	r3, #7
 8001d78:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7a:	a808      	add	r0, sp, #32
 8001d7c:	f001 fd32 	bl	80037e4 <HAL_RCC_OscConfig>
 8001d80:	b980      	cbnz	r0, 8001da4 <SystemClock_Config+0x94>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d82:	230f      	movs	r3, #15
 8001d84:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d86:	2102      	movs	r1, #2
 8001d88:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d92:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d94:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d96:	a803      	add	r0, sp, #12
 8001d98:	f001 ff8a 	bl	8003cb0 <HAL_RCC_ClockConfig>
 8001d9c:	b920      	cbnz	r0, 8001da8 <SystemClock_Config+0x98>
  {
    Error_Handler();
  }
}
 8001d9e:	b015      	add	sp, #84	; 0x54
 8001da0:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <SystemClock_Config+0x96>
 8001da8:	b672      	cpsid	i
 8001daa:	e7fe      	b.n	8001daa <SystemClock_Config+0x9a>
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40007000 	.word	0x40007000

08001db4 <main>:
{
 8001db4:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
 8001db8:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001dba:	f000 fcf9 	bl	80027b0 <HAL_Init>
  SystemClock_Config();
 8001dbe:	f7ff ffa7 	bl	8001d10 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	2400      	movs	r4, #0
 8001dc4:	9406      	str	r4, [sp, #24]
 8001dc6:	9407      	str	r4, [sp, #28]
 8001dc8:	9408      	str	r4, [sp, #32]
 8001dca:	9409      	str	r4, [sp, #36]	; 0x24
 8001dcc:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	9400      	str	r4, [sp, #0]
 8001dd0:	4ba7      	ldr	r3, [pc, #668]	; (8002070 <main+0x2bc>)
 8001dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd4:	f042 0204 	orr.w	r2, r2, #4
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ddc:	f002 0204 	and.w	r2, r2, #4
 8001de0:	9200      	str	r2, [sp, #0]
 8001de2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de4:	9401      	str	r4, [sp, #4]
 8001de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001de8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
 8001dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001df4:	9201      	str	r2, [sp, #4]
 8001df6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	9402      	str	r4, [sp, #8]
 8001dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
 8001e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e04:	f002 0201 	and.w	r2, r2, #1
 8001e08:	9202      	str	r2, [sp, #8]
 8001e0a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0c:	9403      	str	r4, [sp, #12]
 8001e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e10:	f042 0202 	orr.w	r2, r2, #2
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	9303      	str	r3, [sp, #12]
 8001e1e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, SD_SPI2_CS_Pin|CAM_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e20:	4e94      	ldr	r6, [pc, #592]	; (8002074 <main+0x2c0>)
 8001e22:	4622      	mov	r2, r4
 8001e24:	2112      	movs	r1, #18
 8001e26:	4630      	mov	r0, r6
 8001e28:	f000 ffe0 	bl	8002dec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_SPI2_CS_GPIO_Port, DAC_SPI2_CS_Pin, GPIO_PIN_RESET);
 8001e2c:	f8df 8294 	ldr.w	r8, [pc, #660]	; 80020c4 <main+0x310>
 8001e30:	4622      	mov	r2, r4
 8001e32:	2104      	movs	r1, #4
 8001e34:	4640      	mov	r0, r8
 8001e36:	f000 ffd9 	bl	8002dec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e3e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e44:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e48:	a906      	add	r1, sp, #24
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	f000 fee8 	bl	8002c20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_SPI2_CS_Pin;
 8001e50:	2302      	movs	r3, #2
 8001e52:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2501      	movs	r5, #1
 8001e56:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e58:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SD_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	a906      	add	r1, sp, #24
 8001e5e:	4630      	mov	r0, r6
 8001e60:	f000 fede 	bl	8002c20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAM_SPI1_CS_Pin;
 8001e64:	2310      	movs	r3, #16
 8001e66:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(CAM_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	a906      	add	r1, sp, #24
 8001e70:	4630      	mov	r0, r6
 8001e72:	f000 fed5 	bl	8002c20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_SPI2_CS_Pin;
 8001e76:	2304      	movs	r3, #4
 8001e78:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(DAC_SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001e80:	a906      	add	r1, sp, #24
 8001e82:	4640      	mov	r0, r8
 8001e84:	f000 fecc 	bl	8002c20 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001e88:	4622      	mov	r2, r4
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	2028      	movs	r0, #40	; 0x28
 8001e8e:	f000 fe6f 	bl	8002b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e92:	2028      	movs	r0, #40	; 0x28
 8001e94:	f000 fea2 	bl	8002bdc <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8001e98:	4877      	ldr	r0, [pc, #476]	; (8002078 <main+0x2c4>)
 8001e9a:	4b78      	ldr	r3, [pc, #480]	; (800207c <main+0x2c8>)
 8001e9c:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e9e:	4b78      	ldr	r3, [pc, #480]	; (8002080 <main+0x2cc>)
 8001ea0:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ea2:	6084      	str	r4, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ea4:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eaa:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eac:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eae:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eb0:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eb2:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eb4:	f001 f8da 	bl	800306c <HAL_I2C_Init>
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	f040 8115 	bne.w	80020e8 <main+0x334>
  hspi2.Instance = SPI2;
 8001ebe:	4871      	ldr	r0, [pc, #452]	; (8002084 <main+0x2d0>)
 8001ec0:	4b71      	ldr	r3, [pc, #452]	; (8002088 <main+0x2d4>)
 8001ec2:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ec4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ec8:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ece:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ed0:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ed2:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed8:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001eda:	2210      	movs	r2, #16
 8001edc:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ede:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ee4:	230a      	movs	r3, #10
 8001ee6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ee8:	f002 f89e 	bl	8004028 <HAL_SPI_Init>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	f040 80fd 	bne.w	80020ec <main+0x338>
  huart2.Instance = USART2;
 8001ef2:	4866      	ldr	r0, [pc, #408]	; (800208c <main+0x2d8>)
 8001ef4:	4b66      	ldr	r3, [pc, #408]	; (8002090 <main+0x2dc>)
 8001ef6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001ef8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001efc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	2300      	movs	r3, #0
 8001f00:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f02:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f04:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f06:	220c      	movs	r2, #12
 8001f08:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f0c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f0e:	f002 fef5 	bl	8004cfc <HAL_UART_Init>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	f040 80ec 	bne.w	80020f0 <main+0x33c>
  MX_FATFS_Init();
 8001f18:	f002 ff92 	bl	8004e40 <MX_FATFS_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9306      	str	r3, [sp, #24]
 8001f20:	9307      	str	r3, [sp, #28]
 8001f22:	9308      	str	r3, [sp, #32]
 8001f24:	9309      	str	r3, [sp, #36]	; 0x24
  hadc1.Instance = ADC1;
 8001f26:	485b      	ldr	r0, [pc, #364]	; (8002094 <main+0x2e0>)
 8001f28:	4a5b      	ldr	r2, [pc, #364]	; (8002098 <main+0x2e4>)
 8001f2a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f30:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f32:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f34:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f36:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f38:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f3c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f3e:	4a57      	ldr	r2, [pc, #348]	; (800209c <main+0x2e8>)
 8001f40:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f42:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f44:	2201      	movs	r2, #1
 8001f46:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f48:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f4c:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f4e:	f000 fc6f 	bl	8002830 <HAL_ADC_Init>
 8001f52:	2800      	cmp	r0, #0
 8001f54:	f040 80ce 	bne.w	80020f4 <main+0x340>
  sConfig.Channel = ADC_CHANNEL_8;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	9306      	str	r3, [sp, #24]
  sConfig.Rank = 1;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	9307      	str	r3, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f60:	2300      	movs	r3, #0
 8001f62:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f64:	a906      	add	r1, sp, #24
 8001f66:	484b      	ldr	r0, [pc, #300]	; (8002094 <main+0x2e0>)
 8001f68:	f000 fd24 	bl	80029b4 <HAL_ADC_ConfigChannel>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	f040 80c3 	bne.w	80020f8 <main+0x344>
  hspi1.Instance = SPI1;
 8001f72:	484b      	ldr	r0, [pc, #300]	; (80020a0 <main+0x2ec>)
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <main+0x2f0>)
 8001f76:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f78:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f7c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f82:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f84:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f86:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f8e:	2210      	movs	r2, #16
 8001f90:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f92:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f94:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f96:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f98:	230a      	movs	r3, #10
 8001f9a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f9c:	f002 f844 	bl	8004028 <HAL_SPI_Init>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	f040 80ab 	bne.w	80020fc <main+0x348>
  hspi3.Instance = SPI3;
 8001fa6:	4840      	ldr	r0, [pc, #256]	; (80020a8 <main+0x2f4>)
 8001fa8:	4b40      	ldr	r3, [pc, #256]	; (80020ac <main+0x2f8>)
 8001faa:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001fac:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001fb0:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb6:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb8:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fba:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc0:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc2:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc4:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fc6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001fca:	230a      	movs	r3, #10
 8001fcc:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001fce:	f002 f82b 	bl	8004028 <HAL_SPI_Init>
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	f040 8094 	bne.w	8002100 <main+0x34c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9306      	str	r3, [sp, #24]
 8001fdc:	9307      	str	r3, [sp, #28]
 8001fde:	9308      	str	r3, [sp, #32]
 8001fe0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe2:	9304      	str	r3, [sp, #16]
 8001fe4:	9305      	str	r3, [sp, #20]
  htim2.Instance = TIM2;
 8001fe6:	4832      	ldr	r0, [pc, #200]	; (80020b0 <main+0x2fc>)
 8001fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fec:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 8399;
 8001fee:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001ff2:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 610000;
 8001ff6:	4a2f      	ldr	r2, [pc, #188]	; (80020b4 <main+0x300>)
 8001ff8:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ffe:	f002 fc8b 	bl	8004918 <HAL_TIM_Base_Init>
 8002002:	2800      	cmp	r0, #0
 8002004:	d17e      	bne.n	8002104 <main+0x350>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200a:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800200c:	a906      	add	r1, sp, #24
 800200e:	4828      	ldr	r0, [pc, #160]	; (80020b0 <main+0x2fc>)
 8002010:	f002 fcbb 	bl	800498a <HAL_TIM_ConfigClockSource>
 8002014:	2800      	cmp	r0, #0
 8002016:	d177      	bne.n	8002108 <main+0x354>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201c:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800201e:	a904      	add	r1, sp, #16
 8002020:	4823      	ldr	r0, [pc, #140]	; (80020b0 <main+0x2fc>)
 8002022:	f002 fd67 	bl	8004af4 <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	2800      	cmp	r0, #0
 8002028:	d170      	bne.n	800210c <main+0x358>
  HAL_TIM_Base_Start_IT(&htim2);
 800202a:	4821      	ldr	r0, [pc, #132]	; (80020b0 <main+0x2fc>)
 800202c:	f002 fb12 	bl	8004654 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	2110      	movs	r1, #16
 8002034:	480f      	ldr	r0, [pc, #60]	; (8002074 <main+0x2c0>)
 8002036:	f000 fed9 	bl	8002dec <HAL_GPIO_WritePin>
  	uint8_t buf[1] = { 0x00 }; // dummy write
 800203a:	2300      	movs	r3, #0
 800203c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8002040:	4c17      	ldr	r4, [pc, #92]	; (80020a0 <main+0x2ec>)
 8002042:	2364      	movs	r3, #100	; 0x64
 8002044:	2201      	movs	r2, #1
 8002046:	a90b      	add	r1, sp, #44	; 0x2c
 8002048:	4620      	mov	r0, r4
 800204a:	f002 f84c 	bl	80040e6 <HAL_SPI_Transmit>
  	ov5462.hi2c = &hi2c1;
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <main+0x304>)
 8002050:	4a09      	ldr	r2, [pc, #36]	; (8002078 <main+0x2c4>)
 8002052:	601a      	str	r2, [r3, #0]
	ov5462.hspi = &hspi1;
 8002054:	605c      	str	r4, [r3, #4]
	printf("program start!\r\n");
 8002056:	4819      	ldr	r0, [pc, #100]	; (80020bc <main+0x308>)
 8002058:	f005 fac6 	bl	80075e8 <puts>
  	HAL_Delay(1000);
 800205c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002060:	f000 fbd2 	bl	8002808 <HAL_Delay>
			printf("SD test FAIL! Retrying...\r\n");
 8002064:	4c16      	ldr	r4, [pc, #88]	; (80020c0 <main+0x30c>)
 8002066:	f504 76a4 	add.w	r6, r4, #328	; 0x148
			f_mount(NULL, "/", 1);
 800206a:	2501      	movs	r5, #1
 800206c:	e02c      	b.n	80020c8 <main+0x314>
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40020800 	.word	0x40020800
 8002078:	200022ec 	.word	0x200022ec
 800207c:	40005400 	.word	0x40005400
 8002080:	000186a0 	.word	0x000186a0
 8002084:	20002398 	.word	0x20002398
 8002088:	40003800 	.word	0x40003800
 800208c:	20002490 	.word	0x20002490
 8002090:	40004400 	.word	0x40004400
 8002094:	200022a4 	.word	0x200022a4
 8002098:	40012000 	.word	0x40012000
 800209c:	0f000001 	.word	0x0f000001
 80020a0:	20002340 	.word	0x20002340
 80020a4:	40013000 	.word	0x40013000
 80020a8:	200023f0 	.word	0x200023f0
 80020ac:	40003c00 	.word	0x40003c00
 80020b0:	20002448 	.word	0x20002448
 80020b4:	00094ed0 	.word	0x00094ed0
 80020b8:	20000228 	.word	0x20000228
 80020bc:	08009b08 	.word	0x08009b08
 80020c0:	080099d0 	.word	0x080099d0
 80020c4:	40020400 	.word	0x40020400
		if(testSD()) {
 80020c8:	f7ff fd2c 	bl	8001b24 <testSD>
 80020cc:	b300      	cbz	r0, 8002110 <main+0x35c>
			printf("SD test FAIL! Retrying...\r\n");
 80020ce:	4630      	mov	r0, r6
 80020d0:	f005 fa8a 	bl	80075e8 <puts>
			f_mount(NULL, "/", 1);
 80020d4:	462a      	mov	r2, r5
 80020d6:	4621      	mov	r1, r4
 80020d8:	2000      	movs	r0, #0
 80020da:	f003 ff5f 	bl	8005f9c <f_mount>
			HAL_Delay(10000);
 80020de:	f242 7010 	movw	r0, #10000	; 0x2710
 80020e2:	f000 fb91 	bl	8002808 <HAL_Delay>
		if(testSD()) {
 80020e6:	e7ef      	b.n	80020c8 <main+0x314>
 80020e8:	b672      	cpsid	i
  while (1)
 80020ea:	e7fe      	b.n	80020ea <main+0x336>
 80020ec:	b672      	cpsid	i
 80020ee:	e7fe      	b.n	80020ee <main+0x33a>
 80020f0:	b672      	cpsid	i
 80020f2:	e7fe      	b.n	80020f2 <main+0x33e>
 80020f4:	b672      	cpsid	i
 80020f6:	e7fe      	b.n	80020f6 <main+0x342>
 80020f8:	b672      	cpsid	i
 80020fa:	e7fe      	b.n	80020fa <main+0x346>
 80020fc:	b672      	cpsid	i
 80020fe:	e7fe      	b.n	80020fe <main+0x34a>
 8002100:	b672      	cpsid	i
 8002102:	e7fe      	b.n	8002102 <main+0x34e>
 8002104:	b672      	cpsid	i
 8002106:	e7fe      	b.n	8002106 <main+0x352>
 8002108:	b672      	cpsid	i
 800210a:	e7fe      	b.n	800210a <main+0x356>
 800210c:	b672      	cpsid	i
 800210e:	e7fe      	b.n	800210e <main+0x35a>
			printf("SD test PASS!\r\n");
 8002110:	484a      	ldr	r0, [pc, #296]	; (800223c <main+0x488>)
 8002112:	f005 fa69 	bl	80075e8 <puts>
  		OV5462_write_spi_reg(&ov5462, 0x00, 0x25);
 8002116:	4c4a      	ldr	r4, [pc, #296]	; (8002240 <main+0x48c>)
  		printf("SPI Test FAIL!\r\n");
 8002118:	4d4a      	ldr	r5, [pc, #296]	; (8002244 <main+0x490>)
  		OV5462_write_spi_reg(&ov5462, 0x00, 0x25);
 800211a:	2225      	movs	r2, #37	; 0x25
 800211c:	2100      	movs	r1, #0
 800211e:	4620      	mov	r0, r4
 8002120:	f7fe ff52 	bl	8000fc8 <OV5462_write_spi_reg>
  		uint8_t tmp = OV5462_read_spi_reg(&ov5462, 0x00);
 8002124:	2100      	movs	r1, #0
 8002126:	4620      	mov	r0, r4
 8002128:	f7fe ff74 	bl	8001014 <OV5462_read_spi_reg>
  		if (tmp == 0x25) {
 800212c:	2825      	cmp	r0, #37	; 0x25
 800212e:	d007      	beq.n	8002140 <main+0x38c>
  		printf("SPI Test FAIL!\r\n");
 8002130:	4628      	mov	r0, r5
 8002132:	f005 fa59 	bl	80075e8 <puts>
  		HAL_Delay(1000);
 8002136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800213a:	f000 fb65 	bl	8002808 <HAL_Delay>
  	while (1) {
 800213e:	e7ec      	b.n	800211a <main+0x366>
  		printf("SPI Test PASS!\r\n");
 8002140:	4841      	ldr	r0, [pc, #260]	; (8002248 <main+0x494>)
 8002142:	f005 fa51 	bl	80075e8 <puts>
  		uint8_t upper = OV5462_read_i2c_reg(&ov5462, CHIPID_UPPER);
 8002146:	4d3e      	ldr	r5, [pc, #248]	; (8002240 <main+0x48c>)
  			printf("I2C Test FAIL!\r\n");
 8002148:	4e40      	ldr	r6, [pc, #256]	; (800224c <main+0x498>)
  		break; // continue to program
 800214a:	e006      	b.n	800215a <main+0x3a6>
  			printf("I2C Test FAIL!\r\n");
 800214c:	4630      	mov	r0, r6
 800214e:	f005 fa4b 	bl	80075e8 <puts>
  			HAL_Delay(1000);
 8002152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002156:	f000 fb57 	bl	8002808 <HAL_Delay>
  		uint8_t upper = OV5462_read_i2c_reg(&ov5462, CHIPID_UPPER);
 800215a:	f243 010a 	movw	r1, #12298	; 0x300a
 800215e:	4628      	mov	r0, r5
 8002160:	f7fe ff16 	bl	8000f90 <OV5462_read_i2c_reg>
 8002164:	4604      	mov	r4, r0
  		uint8_t lower = OV5462_read_i2c_reg(&ov5462, CHIPID_LOWER);
 8002166:	f243 010b 	movw	r1, #12299	; 0x300b
 800216a:	4628      	mov	r0, r5
 800216c:	f7fe ff10 	bl	8000f90 <OV5462_read_i2c_reg>
  		if (upper == 0x56 && lower == 0x42) {
 8002170:	2c56      	cmp	r4, #86	; 0x56
 8002172:	d1eb      	bne.n	800214c <main+0x398>
 8002174:	2842      	cmp	r0, #66	; 0x42
 8002176:	d1e9      	bne.n	800214c <main+0x398>
  			printf("I2C Test PASS!\r\n");
 8002178:	4835      	ldr	r0, [pc, #212]	; (8002250 <main+0x49c>)
 800217a:	f005 fa35 	bl	80075e8 <puts>
  	if (OV5462_init(&ov5462)) {
 800217e:	4830      	ldr	r0, [pc, #192]	; (8002240 <main+0x48c>)
 8002180:	f7fe ff6c 	bl	800105c <OV5462_init>
 8002184:	b968      	cbnz	r0, 80021a2 <main+0x3ee>
  	OV5462_continuous_capture_init(&ov5462);
 8002186:	482e      	ldr	r0, [pc, #184]	; (8002240 <main+0x48c>)
 8002188:	f7fe ffb8 	bl	80010fc <OV5462_continuous_capture_init>
  	trigger_capture();
 800218c:	f7ff fd88 	bl	8001ca0 <trigger_capture>
  	check_capturing = 1;
 8002190:	4b30      	ldr	r3, [pc, #192]	; (8002254 <main+0x4a0>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
	 if (capture_flag && (OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {
 8002196:	4d30      	ldr	r5, [pc, #192]	; (8002258 <main+0x4a4>)
 8002198:	4e29      	ldr	r6, [pc, #164]	; (8002240 <main+0x48c>)
		 if (save_requested) {
 800219a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8002268 <main+0x4b4>
	 if (check_capturing) {
 800219e:	461c      	mov	r4, r3
 80021a0:	e007      	b.n	80021b2 <main+0x3fe>
  		printf("Init fail!\r\n");
 80021a2:	482e      	ldr	r0, [pc, #184]	; (800225c <main+0x4a8>)
 80021a4:	f005 fa20 	bl	80075e8 <puts>
 80021a8:	e7ed      	b.n	8002186 <main+0x3d2>
			 trigger_capture();
 80021aa:	f7ff fd79 	bl	8001ca0 <trigger_capture>
	 if (check_capturing) {
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	b983      	cbnz	r3, 80021d4 <main+0x420>
	 if (capture_flag && (OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK)) {
 80021b2:	682b      	ldr	r3, [r5, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0fa      	beq.n	80021ae <main+0x3fa>
 80021b8:	2141      	movs	r1, #65	; 0x41
 80021ba:	4630      	mov	r0, r6
 80021bc:	f7fe ff2a 	bl	8001014 <OV5462_read_spi_reg>
 80021c0:	f010 0f08 	tst.w	r0, #8
 80021c4:	d0f3      	beq.n	80021ae <main+0x3fa>
		 if (save_requested) {
 80021c6:	f8d8 3000 	ldr.w	r3, [r8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0ed      	beq.n	80021aa <main+0x3f6>
			 read_fifo_and_write_data_file();
 80021ce:	f7ff fb3d 	bl	800184c <read_fifo_and_write_data_file>
 80021d2:	e7ec      	b.n	80021ae <main+0x3fa>
		 if (TIM2->CNT < 10000) {
 80021d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021da:	f242 730f 	movw	r3, #9999	; 0x270f
 80021de:	429a      	cmp	r2, r3
 80021e0:	d828      	bhi.n	8002234 <main+0x480>
			 if (OV5462_read_spi_reg(&ov5462, ARDUCHIP_TRIGGER) & CAPTURE_DONE_MASK) {
 80021e2:	2141      	movs	r1, #65	; 0x41
 80021e4:	4630      	mov	r0, r6
 80021e6:	f7fe ff15 	bl	8001014 <OV5462_read_spi_reg>
 80021ea:	f010 0f08 	tst.w	r0, #8
 80021ee:	d0e0      	beq.n	80021b2 <main+0x3fe>
				 uint32_t length = OV5462_read_fifo_length(&ov5462);
 80021f0:	4630      	mov	r0, r6
 80021f2:	f7fe ff91 	bl	8001118 <OV5462_read_fifo_length>
 80021f6:	4601      	mov	r1, r0
				 if (length < 0x3FFFFF) {
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <main+0x4ac>)
 80021fa:	4298      	cmp	r0, r3
 80021fc:	d80f      	bhi.n	800221e <main+0x46a>
					 printf("Premature capture completion! %lu bytes \r\n", length);
 80021fe:	4819      	ldr	r0, [pc, #100]	; (8002264 <main+0x4b0>)
 8002200:	f005 f96c 	bl	80074dc <iprintf>
					OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8002204:	2201      	movs	r2, #1
 8002206:	2104      	movs	r1, #4
 8002208:	4630      	mov	r0, r6
 800220a:	f7fe fedd 	bl	8000fc8 <OV5462_write_spi_reg>
					OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK);
 800220e:	2202      	movs	r2, #2
 8002210:	2104      	movs	r1, #4
 8002212:	4630      	mov	r0, r6
 8002214:	f7fe fed8 	bl	8000fc8 <OV5462_write_spi_reg>
					check_capturing = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	6023      	str	r3, [r4, #0]
 800221c:	e7c9      	b.n	80021b2 <main+0x3fe>
					 OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 800221e:	2201      	movs	r2, #1
 8002220:	2104      	movs	r1, #4
 8002222:	4630      	mov	r0, r6
 8002224:	f7fe fed0 	bl	8000fc8 <OV5462_write_spi_reg>
					 OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK);
 8002228:	2202      	movs	r2, #2
 800222a:	2104      	movs	r1, #4
 800222c:	4630      	mov	r0, r6
 800222e:	f7fe fecb 	bl	8000fc8 <OV5462_write_spi_reg>
 8002232:	e7be      	b.n	80021b2 <main+0x3fe>
			 check_capturing = 0; // it's been over a second, the capture probably started successfully
 8002234:	2300      	movs	r3, #0
 8002236:	6023      	str	r3, [r4, #0]
 8002238:	e7bb      	b.n	80021b2 <main+0x3fe>
 800223a:	bf00      	nop
 800223c:	08009b34 	.word	0x08009b34
 8002240:	20000228 	.word	0x20000228
 8002244:	08009b54 	.word	0x08009b54
 8002248:	08009b44 	.word	0x08009b44
 800224c:	08009b74 	.word	0x08009b74
 8002250:	08009b64 	.word	0x08009b64
 8002254:	20001264 	.word	0x20001264
 8002258:	20001260 	.word	0x20001260
 800225c:	08009b84 	.word	0x08009b84
 8002260:	003ffffe 	.word	0x003ffffe
 8002264:	08009b90 	.word	0x08009b90
 8002268:	20000224 	.word	0x20000224

0800226c <__io_putchar>:
{
 800226c:	b500      	push	{lr}
 800226e:	b083      	sub	sp, #12
 8002270:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002276:	2201      	movs	r2, #1
 8002278:	a901      	add	r1, sp, #4
 800227a:	4803      	ldr	r0, [pc, #12]	; (8002288 <__io_putchar+0x1c>)
 800227c:	f002 fd6d 	bl	8004d5a <HAL_UART_Transmit>
}
 8002280:	9801      	ldr	r0, [sp, #4]
 8002282:	b003      	add	sp, #12
 8002284:	f85d fb04 	ldr.w	pc, [sp], #4
 8002288:	20002490 	.word	0x20002490

0800228c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800228c:	b500      	push	{lr}
 800228e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002290:	2100      	movs	r1, #0
 8002292:	9100      	str	r1, [sp, #0]
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_MspInit+0x3c>)
 8002296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002298:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800229c:	645a      	str	r2, [r3, #68]	; 0x44
 800229e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022a0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80022a4:	9200      	str	r2, [sp, #0]
 80022a6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a8:	9101      	str	r1, [sp, #4]
 80022aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80022bc:	2005      	movs	r0, #5
 80022be:	f000 fc45 	bl	8002b4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	b003      	add	sp, #12
 80022c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80022c8:	40023800 	.word	0x40023800

080022cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022cc:	b530      	push	{r4, r5, lr}
 80022ce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	2300      	movs	r3, #0
 80022d2:	9303      	str	r3, [sp, #12]
 80022d4:	9304      	str	r3, [sp, #16]
 80022d6:	9305      	str	r3, [sp, #20]
 80022d8:	9306      	str	r3, [sp, #24]
 80022da:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80022dc:	6802      	ldr	r2, [r0, #0]
 80022de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022e2:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022ea:	b009      	add	sp, #36	; 0x24
 80022ec:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ee:	2400      	movs	r4, #0
 80022f0:	9400      	str	r4, [sp, #0]
 80022f2:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80022f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
 80022fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002300:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002304:	9200      	str	r2, [sp, #0]
 8002306:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002308:	9401      	str	r4, [sp, #4]
 800230a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800230c:	f042 0204 	orr.w	r2, r2, #4
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
 8002312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002314:	f002 0204 	and.w	r2, r2, #4
 8002318:	9201      	str	r2, [sp, #4]
 800231a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231c:	9402      	str	r4, [sp, #8]
 800231e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002320:	f042 0202 	orr.w	r2, r2, #2
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	9302      	str	r3, [sp, #8]
 800232e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ULTRA_RIGHT_ADC_IN10_Pin;
 8002330:	2301      	movs	r3, #1
 8002332:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002334:	2503      	movs	r5, #3
 8002336:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(ULTRA_RIGHT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8002338:	a903      	add	r1, sp, #12
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <HAL_ADC_MspInit+0x84>)
 800233c:	f000 fc70 	bl	8002c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULTRA_LEFT_ADC_IN8_Pin|ULTRA_CENTER_ADC1_IN9_Pin;
 8002340:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002342:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	a903      	add	r1, sp, #12
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <HAL_ADC_MspInit+0x88>)
 800234a:	f000 fc69 	bl	8002c20 <HAL_GPIO_Init>
}
 800234e:	e7cc      	b.n	80022ea <HAL_ADC_MspInit+0x1e>
 8002350:	40020800 	.word	0x40020800
 8002354:	40020400 	.word	0x40020400

08002358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002358:	b530      	push	{r4, r5, lr}
 800235a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	2300      	movs	r3, #0
 800235e:	9303      	str	r3, [sp, #12]
 8002360:	9304      	str	r3, [sp, #16]
 8002362:	9305      	str	r3, [sp, #20]
 8002364:	9306      	str	r3, [sp, #24]
 8002366:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8002368:	6802      	ldr	r2, [r0, #0]
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_I2C_MspInit+0x64>)
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002370:	b009      	add	sp, #36	; 0x24
 8002372:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002374:	2500      	movs	r5, #0
 8002376:	9501      	str	r5, [sp, #4]
 8002378:	4c11      	ldr	r4, [pc, #68]	; (80023c0 <HAL_I2C_MspInit+0x68>)
 800237a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6323      	str	r3, [r4, #48]	; 0x30
 8002382:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 800238c:	23c0      	movs	r3, #192	; 0xc0
 800238e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002390:	2312      	movs	r3, #18
 8002392:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002398:	2304      	movs	r3, #4
 800239a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	a903      	add	r1, sp, #12
 800239e:	4809      	ldr	r0, [pc, #36]	; (80023c4 <HAL_I2C_MspInit+0x6c>)
 80023a0:	f000 fc3e 	bl	8002c20 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023a4:	9502      	str	r5, [sp, #8]
 80023a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ac:	6423      	str	r3, [r4, #64]	; 0x40
 80023ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b4:	9302      	str	r3, [sp, #8]
 80023b6:	9b02      	ldr	r3, [sp, #8]
}
 80023b8:	e7da      	b.n	8002370 <HAL_I2C_MspInit+0x18>
 80023ba:	bf00      	nop
 80023bc:	40005400 	.word	0x40005400
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020400 	.word	0x40020400

080023c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ca:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	2300      	movs	r3, #0
 80023ce:	9307      	str	r3, [sp, #28]
 80023d0:	9308      	str	r3, [sp, #32]
 80023d2:	9309      	str	r3, [sp, #36]	; 0x24
 80023d4:	930a      	str	r3, [sp, #40]	; 0x28
 80023d6:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hspi->Instance==SPI1)
 80023d8:	6803      	ldr	r3, [r0, #0]
 80023da:	4a46      	ldr	r2, [pc, #280]	; (80024f4 <HAL_SPI_MspInit+0x12c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d007      	beq.n	80023f0 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80023e0:	4a45      	ldr	r2, [pc, #276]	; (80024f8 <HAL_SPI_MspInit+0x130>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d027      	beq.n	8002436 <HAL_SPI_MspInit+0x6e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80023e6:	4a45      	ldr	r2, [pc, #276]	; (80024fc <HAL_SPI_MspInit+0x134>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d05e      	beq.n	80024aa <HAL_SPI_MspInit+0xe2>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80023ec:	b00d      	add	sp, #52	; 0x34
 80023ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023f0:	2100      	movs	r1, #0
 80023f2:	9100      	str	r1, [sp, #0]
 80023f4:	4b42      	ldr	r3, [pc, #264]	; (8002500 <HAL_SPI_MspInit+0x138>)
 80023f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
 80023fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002400:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002404:	9200      	str	r2, [sp, #0]
 8002406:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002408:	9101      	str	r1, [sp, #4]
 800240a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAM_SPI1_SCK_Pin|CAM_SPI1_MISO_Pin|CAM_SPI1_MOSI_Pin;
 800241c:	23e0      	movs	r3, #224	; 0xe0
 800241e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002428:	2305      	movs	r3, #5
 800242a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	a907      	add	r1, sp, #28
 800242e:	4835      	ldr	r0, [pc, #212]	; (8002504 <HAL_SPI_MspInit+0x13c>)
 8002430:	f000 fbf6 	bl	8002c20 <HAL_GPIO_Init>
 8002434:	e7da      	b.n	80023ec <HAL_SPI_MspInit+0x24>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002436:	2200      	movs	r2, #0
 8002438:	9202      	str	r2, [sp, #8]
 800243a:	4b31      	ldr	r3, [pc, #196]	; (8002500 <HAL_SPI_MspInit+0x138>)
 800243c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800243e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002442:	6419      	str	r1, [r3, #64]	; 0x40
 8002444:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002446:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800244a:	9102      	str	r1, [sp, #8]
 800244c:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800244e:	9203      	str	r2, [sp, #12]
 8002450:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002452:	f041 0104 	orr.w	r1, r1, #4
 8002456:	6319      	str	r1, [r3, #48]	; 0x30
 8002458:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245a:	f001 0104 	and.w	r1, r1, #4
 800245e:	9103      	str	r1, [sp, #12]
 8002460:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	9204      	str	r2, [sp, #16]
 8002464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002466:	f042 0202 	orr.w	r2, r2, #2
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	9304      	str	r3, [sp, #16]
 8002474:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = SD_SPI2_MISO_Pin|SD_SPI2_MOSI_Pin;
 8002476:	230c      	movs	r3, #12
 8002478:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2702      	movs	r7, #2
 800247c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800247e:	2601      	movs	r6, #1
 8002480:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002482:	2503      	movs	r5, #3
 8002484:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002486:	2405      	movs	r4, #5
 8002488:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248a:	a907      	add	r1, sp, #28
 800248c:	481e      	ldr	r0, [pc, #120]	; (8002508 <HAL_SPI_MspInit+0x140>)
 800248e:	f000 fbc7 	bl	8002c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_SPI2_SCK_Pin;
 8002492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002496:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800249a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800249e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(SD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80024a0:	a907      	add	r1, sp, #28
 80024a2:	481a      	ldr	r0, [pc, #104]	; (800250c <HAL_SPI_MspInit+0x144>)
 80024a4:	f000 fbbc 	bl	8002c20 <HAL_GPIO_Init>
 80024a8:	e7a0      	b.n	80023ec <HAL_SPI_MspInit+0x24>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024aa:	2100      	movs	r1, #0
 80024ac:	9105      	str	r1, [sp, #20]
 80024ae:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_SPI_MspInit+0x138>)
 80024b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
 80024b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ba:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80024be:	9205      	str	r2, [sp, #20]
 80024c0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c2:	9106      	str	r1, [sp, #24]
 80024c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c6:	f042 0204 	orr.w	r2, r2, #4
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	9306      	str	r3, [sp, #24]
 80024d4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80024d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024da:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e0:	2303      	movs	r3, #3
 80024e2:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024e4:	2306      	movs	r3, #6
 80024e6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e8:	a907      	add	r1, sp, #28
 80024ea:	4807      	ldr	r0, [pc, #28]	; (8002508 <HAL_SPI_MspInit+0x140>)
 80024ec:	f000 fb98 	bl	8002c20 <HAL_GPIO_Init>
}
 80024f0:	e77c      	b.n	80023ec <HAL_SPI_MspInit+0x24>
 80024f2:	bf00      	nop
 80024f4:	40013000 	.word	0x40013000
 80024f8:	40003800 	.word	0x40003800
 80024fc:	40003c00 	.word	0x40003c00
 8002500:	40023800 	.word	0x40023800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020800 	.word	0x40020800
 800250c:	40020400 	.word	0x40020400

08002510 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002510:	6803      	ldr	r3, [r0, #0]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d000      	beq.n	800251a <HAL_TIM_Base_MspInit+0xa>
 8002518:	4770      	bx	lr
{
 800251a:	b500      	push	{lr}
 800251c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800251e:	2200      	movs	r2, #0
 8002520:	9201      	str	r2, [sp, #4]
 8002522:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002526:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002528:	f041 0101 	orr.w	r1, r1, #1
 800252c:	6419      	str	r1, [r3, #64]	; 0x40
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002538:	2102      	movs	r1, #2
 800253a:	201c      	movs	r0, #28
 800253c:	f000 fb18 	bl	8002b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002540:	201c      	movs	r0, #28
 8002542:	f000 fb4b 	bl	8002bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002546:	b003      	add	sp, #12
 8002548:	f85d fb04 	ldr.w	pc, [sp], #4

0800254c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800254c:	b500      	push	{lr}
 800254e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	2300      	movs	r3, #0
 8002552:	9303      	str	r3, [sp, #12]
 8002554:	9304      	str	r3, [sp, #16]
 8002556:	9305      	str	r3, [sp, #20]
 8002558:	9306      	str	r3, [sp, #24]
 800255a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800255c:	6802      	ldr	r2, [r0, #0]
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_UART_MspInit+0x64>)
 8002560:	429a      	cmp	r2, r3
 8002562:	d002      	beq.n	800256a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002564:	b009      	add	sp, #36	; 0x24
 8002566:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800256a:	2100      	movs	r1, #0
 800256c:	9101      	str	r1, [sp, #4]
 800256e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002574:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
 800257a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002580:	9201      	str	r2, [sp, #4]
 8002582:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	9102      	str	r1, [sp, #8]
 8002586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	9302      	str	r3, [sp, #8]
 8002596:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DEBUG_USART_TX_Pin|DEBUG_USART_RX_Pin;
 8002598:	230c      	movs	r3, #12
 800259a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025a0:	2307      	movs	r3, #7
 80025a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	a903      	add	r1, sp, #12
 80025a6:	4803      	ldr	r0, [pc, #12]	; (80025b4 <HAL_UART_MspInit+0x68>)
 80025a8:	f000 fb3a 	bl	8002c20 <HAL_GPIO_Init>
}
 80025ac:	e7da      	b.n	8002564 <HAL_UART_MspInit+0x18>
 80025ae:	bf00      	nop
 80025b0:	40004400 	.word	0x40004400
 80025b4:	40020000 	.word	0x40020000

080025b8 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile extern uint8_t Timer1, Timer2;

void SDTimer_Handler() {

	if (Timer1 > 0) {
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <SDTimer_Handler+0x24>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b123      	cbz	r3, 80025c8 <SDTimer_Handler+0x10>
		--Timer1;
 80025be:	4a07      	ldr	r2, [pc, #28]	; (80025dc <SDTimer_Handler+0x24>)
 80025c0:	7813      	ldrb	r3, [r2, #0]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	7013      	strb	r3, [r2, #0]
	}

	if (Timer2 > 0) {
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <SDTimer_Handler+0x28>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b123      	cbz	r3, 80025d8 <SDTimer_Handler+0x20>
		--Timer2;
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <SDTimer_Handler+0x28>)
 80025d0:	7813      	ldrb	r3, [r2, #0]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	7013      	strb	r3, [r2, #0]
	}
}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000212 	.word	0x20000212
 80025e0:	20000214 	.word	0x20000214

080025e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <NMI_Handler>

080025e6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <HardFault_Handler>

080025e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <MemManage_Handler>

080025ea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ea:	e7fe      	b.n	80025ea <BusFault_Handler>

080025ec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <UsageFault_Handler>

080025ee <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ee:	4770      	bx	lr

080025f0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f0:	4770      	bx	lr

080025f2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f2:	4770      	bx	lr

080025f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	++FatFsCnt;
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <SysTick_Handler+0x28>)
 80025f8:	7813      	ldrb	r3, [r2, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	7013      	strb	r3, [r2, #0]

	if (FatFsCnt >= 10) {
 8002600:	7813      	ldrb	r3, [r2, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b09      	cmp	r3, #9
 8002606:	d802      	bhi.n	800260e <SysTick_Handler+0x1a>
		FatFsCnt = 0;
		SDTimer_Handler();
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002608:	f000 f8ec 	bl	80027e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260c:	bd08      	pop	{r3, pc}
		FatFsCnt = 0;
 800260e:	4613      	mov	r3, r2
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002614:	f7ff ffd0 	bl	80025b8 <SDTimer_Handler>
 8002618:	e7f6      	b.n	8002608 <SysTick_Handler+0x14>
 800261a:	bf00      	nop
 800261c:	200024dc 	.word	0x200024dc

08002620 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002620:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002622:	4803      	ldr	r0, [pc, #12]	; (8002630 <TIM2_IRQHandler+0x10>)
 8002624:	f002 f857 	bl	80046d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  set_capture_flag(1);
 8002628:	2001      	movs	r0, #1
 800262a:	f7ff fb65 	bl	8001cf8 <set_capture_flag>

  /* USER CODE END TIM2_IRQn 1 */
}
 800262e:	bd08      	pop	{r3, pc}
 8002630:	20002448 	.word	0x20002448

08002634 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002634:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002636:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800263a:	f000 fbdf 	bl	8002dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  set_save_requested(1);
 800263e:	2001      	movs	r0, #1
 8002640:	f7ff fb60 	bl	8001d04 <set_save_requested>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002644:	bd08      	pop	{r3, pc}

08002646 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002646:	2001      	movs	r0, #1
 8002648:	4770      	bx	lr

0800264a <_kill>:

int _kill(int pid, int sig)
{
 800264a:	b508      	push	{r3, lr}
	errno = EINVAL;
 800264c:	f004 f9ba 	bl	80069c4 <__errno>
 8002650:	2316      	movs	r3, #22
 8002652:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002658:	bd08      	pop	{r3, pc}

0800265a <_exit>:

void _exit (int status)
{
 800265a:	b508      	push	{r3, lr}
	errno = EINVAL;
 800265c:	f004 f9b2 	bl	80069c4 <__errno>
 8002660:	2316      	movs	r3, #22
 8002662:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002664:	e7fe      	b.n	8002664 <_exit+0xa>

08002666 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002666:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002668:	1e16      	subs	r6, r2, #0
 800266a:	dd07      	ble.n	800267c <_read+0x16>
 800266c:	460c      	mov	r4, r1
 800266e:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002670:	f3af 8000 	nop.w
 8002674:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002678:	42a5      	cmp	r5, r4
 800267a:	d1f9      	bne.n	8002670 <_read+0xa>
	}

return len;
}
 800267c:	4630      	mov	r0, r6
 800267e:	bd70      	pop	{r4, r5, r6, pc}

08002680 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002680:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	1e16      	subs	r6, r2, #0
 8002684:	dd07      	ble.n	8002696 <_write+0x16>
 8002686:	460c      	mov	r4, r1
 8002688:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800268a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800268e:	f7ff fded 	bl	800226c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	42a5      	cmp	r5, r4
 8002694:	d1f9      	bne.n	800268a <_write+0xa>
	}
	return len;
}
 8002696:	4630      	mov	r0, r6
 8002698:	bd70      	pop	{r4, r5, r6, pc}

0800269a <_close>:

int _close(int file)
{
	return -1;
}
 800269a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800269e:	4770      	bx	lr

080026a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80026a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a4:	604b      	str	r3, [r1, #4]
	return 0;
}
 80026a6:	2000      	movs	r0, #0
 80026a8:	4770      	bx	lr

080026aa <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80026aa:	2001      	movs	r0, #1
 80026ac:	4770      	bx	lr

080026ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80026ae:	2000      	movs	r0, #0
 80026b0:	4770      	bx	lr
	...

080026b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b4:	b508      	push	{r3, lr}
 80026b6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <_sbrk+0x38>)
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	b152      	cbz	r2, 80026d4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026be:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <_sbrk+0x38>)
 80026c0:	6810      	ldr	r0, [r2, #0]
 80026c2:	4403      	add	r3, r0
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <_sbrk+0x3c>)
 80026c6:	490b      	ldr	r1, [pc, #44]	; (80026f4 <_sbrk+0x40>)
 80026c8:	1a52      	subs	r2, r2, r1
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d806      	bhi.n	80026dc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80026ce:	4a07      	ldr	r2, [pc, #28]	; (80026ec <_sbrk+0x38>)
 80026d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80026d2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80026d4:	4a05      	ldr	r2, [pc, #20]	; (80026ec <_sbrk+0x38>)
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <_sbrk+0x44>)
 80026d8:	6011      	str	r1, [r2, #0]
 80026da:	e7f0      	b.n	80026be <_sbrk+0xa>
    errno = ENOMEM;
 80026dc:	f004 f972 	bl	80069c4 <__errno>
 80026e0:	230c      	movs	r3, #12
 80026e2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e8:	e7f3      	b.n	80026d2 <_sbrk+0x1e>
 80026ea:	bf00      	nop
 80026ec:	200024e0 	.word	0x200024e0
 80026f0:	20018000 	.word	0x20018000
 80026f4:	00000400 	.word	0x00000400
 80026f8:	20002538 	.word	0x20002538

080026fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026fc:	4a03      	ldr	r2, [pc, #12]	; (800270c <SystemInit+0x10>)
 80026fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002702:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002706:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002714:	480d      	ldr	r0, [pc, #52]	; (800274c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002716:	490e      	ldr	r1, [pc, #56]	; (8002750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800271c:	e002      	b.n	8002724 <LoopCopyDataInit>

0800271e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800271e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002722:	3304      	adds	r3, #4

08002724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002728:	d3f9      	bcc.n	800271e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272a:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800272c:	4c0b      	ldr	r4, [pc, #44]	; (800275c <LoopFillZerobss+0x26>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002730:	e001      	b.n	8002736 <LoopFillZerobss>

08002732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002734:	3204      	adds	r2, #4

08002736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002738:	d3fb      	bcc.n	8002732 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800273a:	f7ff ffdf 	bl	80026fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800273e:	f004 f947 	bl	80069d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002742:	f7ff fb37 	bl	8001db4 <main>
  bx  lr    
 8002746:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002748:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002750:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002754:	0800aafc 	.word	0x0800aafc
  ldr r2, =_sbss
 8002758:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800275c:	20002534 	.word	0x20002534

08002760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC_IRQHandler>
	...

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b510      	push	{r4, lr}
 8002766:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_InitTick+0x40>)
 800276a:	7818      	ldrb	r0, [r3, #0]
 800276c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002770:	fbb3 f3f0 	udiv	r3, r3, r0
 8002774:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <HAL_InitTick+0x44>)
 8002776:	6810      	ldr	r0, [r2, #0]
 8002778:	fbb0 f0f3 	udiv	r0, r0, r3
 800277c:	f000 fa3c 	bl	8002bf8 <HAL_SYSTICK_Config>
 8002780:	b968      	cbnz	r0, 800279e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002782:	2c0f      	cmp	r4, #15
 8002784:	d901      	bls.n	800278a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002786:	2001      	movs	r0, #1
 8002788:	e00a      	b.n	80027a0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278a:	2200      	movs	r2, #0
 800278c:	4621      	mov	r1, r4
 800278e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002792:	f000 f9ed 	bl	8002b70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_InitTick+0x48>)
 8002798:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800279a:	2000      	movs	r0, #0
 800279c:	e000      	b.n	80027a0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800279e:	2001      	movs	r0, #1
}
 80027a0:	bd10      	pop	{r4, pc}
 80027a2:	bf00      	nop
 80027a4:	20000008 	.word	0x20000008
 80027a8:	20000004 	.word	0x20000004
 80027ac:	2000000c 	.word	0x2000000c

080027b0 <HAL_Init>:
{
 80027b0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_Init+0x30>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027cc:	2003      	movs	r0, #3
 80027ce:	f000 f9bd 	bl	8002b4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f7ff ffc6 	bl	8002764 <HAL_InitTick>
  HAL_MspInit();
 80027d8:	f7ff fd58 	bl	800228c <HAL_MspInit>
}
 80027dc:	2000      	movs	r0, #0
 80027de:	bd08      	pop	{r3, pc}
 80027e0:	40023c00 	.word	0x40023c00

080027e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80027e4:	4a03      	ldr	r2, [pc, #12]	; (80027f4 <HAL_IncTick+0x10>)
 80027e6:	6811      	ldr	r1, [r2, #0]
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_IncTick+0x14>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	440b      	add	r3, r1
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	200024e4 	.word	0x200024e4
 80027f8:	20000008 	.word	0x20000008

080027fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80027fc:	4b01      	ldr	r3, [pc, #4]	; (8002804 <HAL_GetTick+0x8>)
 80027fe:	6818      	ldr	r0, [r3, #0]
}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	200024e4 	.word	0x200024e4

08002808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002808:	b538      	push	{r3, r4, r5, lr}
 800280a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800280c:	f7ff fff6 	bl	80027fc <HAL_GetTick>
 8002810:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002812:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002816:	d002      	beq.n	800281e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <HAL_Delay+0x24>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800281e:	f7ff ffed 	bl	80027fc <HAL_GetTick>
 8002822:	1b40      	subs	r0, r0, r5
 8002824:	42a0      	cmp	r0, r4
 8002826:	d3fa      	bcc.n	800281e <HAL_Delay+0x16>
  {
  }
}
 8002828:	bd38      	pop	{r3, r4, r5, pc}
 800282a:	bf00      	nop
 800282c:	20000008 	.word	0x20000008

08002830 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002830:	2800      	cmp	r0, #0
 8002832:	f000 80b9 	beq.w	80029a8 <HAL_ADC_Init+0x178>
{
 8002836:	b510      	push	{r4, lr}
 8002838:	4604      	mov	r4, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800283a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800283c:	b143      	cbz	r3, 8002850 <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800283e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002840:	f013 0f10 	tst.w	r3, #16
 8002844:	d00b      	beq.n	800285e <HAL_ADC_Init+0x2e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002846:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002848:	2300      	movs	r3, #0
 800284a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800284e:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8002850:	f7ff fd3c 	bl	80022cc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002854:	2300      	movs	r3, #0
 8002856:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002858:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800285c:	e7ef      	b.n	800283e <HAL_ADC_Init+0xe>
    ADC_STATE_CLR_SET(hadc->State,
 800285e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002860:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002864:	f023 0302 	bic.w	r3, r3, #2
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800286e:	4b4f      	ldr	r3, [pc, #316]	; (80029ac <HAL_ADC_Init+0x17c>)
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002876:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	6861      	ldr	r1, [r4, #4]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	6853      	ldr	r3, [r2, #4]
 8002884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002888:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800288a:	6822      	ldr	r2, [r4, #0]
 800288c:	6853      	ldr	r3, [r2, #4]
 800288e:	6921      	ldr	r1, [r4, #16]
 8002890:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002894:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002896:	6822      	ldr	r2, [r4, #0]
 8002898:	6853      	ldr	r3, [r2, #4]
 800289a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800289e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028a0:	6822      	ldr	r2, [r4, #0]
 80028a2:	6853      	ldr	r3, [r2, #4]
 80028a4:	68a1      	ldr	r1, [r4, #8]
 80028a6:	430b      	orrs	r3, r1
 80028a8:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028aa:	6822      	ldr	r2, [r4, #0]
 80028ac:	6893      	ldr	r3, [r2, #8]
 80028ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028b2:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028b4:	6822      	ldr	r2, [r4, #0]
 80028b6:	6893      	ldr	r3, [r2, #8]
 80028b8:	68e1      	ldr	r1, [r4, #12]
 80028ba:	430b      	orrs	r3, r1
 80028bc:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028c0:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_ADC_Init+0x180>)
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d05f      	beq.n	8002986 <HAL_ADC_Init+0x156>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028c6:	6822      	ldr	r2, [r4, #0]
 80028c8:	6893      	ldr	r3, [r2, #8]
 80028ca:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80028ce:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028d0:	6822      	ldr	r2, [r4, #0]
 80028d2:	6893      	ldr	r3, [r2, #8]
 80028d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80028d6:	430b      	orrs	r3, r1
 80028d8:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028da:	6822      	ldr	r2, [r4, #0]
 80028dc:	6893      	ldr	r3, [r2, #8]
 80028de:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80028e2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028e4:	6822      	ldr	r2, [r4, #0]
 80028e6:	6893      	ldr	r3, [r2, #8]
 80028e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80028ea:	430b      	orrs	r3, r1
 80028ec:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028ee:	6822      	ldr	r2, [r4, #0]
 80028f0:	6893      	ldr	r3, [r2, #8]
 80028f2:	f023 0302 	bic.w	r3, r3, #2
 80028f6:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028f8:	6822      	ldr	r2, [r4, #0]
 80028fa:	6893      	ldr	r3, [r2, #8]
 80028fc:	7e21      	ldrb	r1, [r4, #24]
 80028fe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002902:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002904:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d047      	beq.n	800299c <HAL_ADC_Init+0x16c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800290c:	6822      	ldr	r2, [r4, #0]
 800290e:	6853      	ldr	r3, [r2, #4]
 8002910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002914:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002916:	6822      	ldr	r2, [r4, #0]
 8002918:	6853      	ldr	r3, [r2, #4]
 800291a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800291e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002920:	6821      	ldr	r1, [r4, #0]
 8002922:	684b      	ldr	r3, [r1, #4]
 8002924:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002926:	3a01      	subs	r2, #1
 8002928:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800292c:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002932:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002936:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002938:	6821      	ldr	r1, [r4, #0]
 800293a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800293c:	69e2      	ldr	r2, [r4, #28]
 800293e:	3a01      	subs	r2, #1
 8002940:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002944:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002946:	6822      	ldr	r2, [r4, #0]
 8002948:	6893      	ldr	r3, [r2, #8]
 800294a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800294e:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002950:	6822      	ldr	r2, [r4, #0]
 8002952:	6893      	ldr	r3, [r2, #8]
 8002954:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002958:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800295c:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800295e:	6822      	ldr	r2, [r4, #0]
 8002960:	6893      	ldr	r3, [r2, #8]
 8002962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002966:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002968:	6822      	ldr	r2, [r4, #0]
 800296a:	6893      	ldr	r3, [r2, #8]
 800296c:	6961      	ldr	r1, [r4, #20]
 800296e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002972:	6093      	str	r3, [r2, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002974:	2000      	movs	r0, #0
 8002976:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002978:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6423      	str	r3, [r4, #64]	; 0x40
 8002984:	e760      	b.n	8002848 <HAL_ADC_Init+0x18>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002986:	6822      	ldr	r2, [r4, #0]
 8002988:	6893      	ldr	r3, [r2, #8]
 800298a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800298e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002990:	6822      	ldr	r2, [r4, #0]
 8002992:	6893      	ldr	r3, [r2, #8]
 8002994:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002998:	6093      	str	r3, [r2, #8]
 800299a:	e7a8      	b.n	80028ee <HAL_ADC_Init+0xbe>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800299c:	6822      	ldr	r2, [r4, #0]
 800299e:	6853      	ldr	r3, [r2, #4]
 80029a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029a4:	6053      	str	r3, [r2, #4]
 80029a6:	e7c2      	b.n	800292e <HAL_ADC_Init+0xfe>
    return HAL_ERROR;
 80029a8:	2001      	movs	r0, #1
}
 80029aa:	4770      	bx	lr
 80029ac:	40012300 	.word	0x40012300
 80029b0:	0f000001 	.word	0x0f000001

080029b4 <HAL_ADC_ConfigChannel>:
{
 80029b4:	b430      	push	{r4, r5}
 80029b6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80029bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	f000 80bb 	beq.w	8002b3c <HAL_ADC_ConfigChannel+0x188>
 80029c6:	2301      	movs	r3, #1
 80029c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029cc:	680b      	ldr	r3, [r1, #0]
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d93c      	bls.n	8002a4c <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029d2:	6804      	ldr	r4, [r0, #0]
 80029d4:	68e2      	ldr	r2, [r4, #12]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80029dc:	3b1e      	subs	r3, #30
 80029de:	f04f 0c07 	mov.w	ip, #7
 80029e2:	fa0c f303 	lsl.w	r3, ip, r3
 80029e6:	ea22 0303 	bic.w	r3, r2, r3
 80029ea:	60e3      	str	r3, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029ec:	6804      	ldr	r4, [r0, #0]
 80029ee:	68e5      	ldr	r5, [r4, #12]
 80029f0:	880b      	ldrh	r3, [r1, #0]
 80029f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80029f6:	3b1e      	subs	r3, #30
 80029f8:	688a      	ldr	r2, [r1, #8]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	432b      	orrs	r3, r5
 8002a00:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8002a02:	684b      	ldr	r3, [r1, #4]
 8002a04:	2b06      	cmp	r3, #6
 8002a06:	d837      	bhi.n	8002a78 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a08:	6804      	ldr	r4, [r0, #0]
 8002a0a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002a0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a10:	3b05      	subs	r3, #5
 8002a12:	f04f 0c1f 	mov.w	ip, #31
 8002a16:	fa0c f303 	lsl.w	r3, ip, r3
 8002a1a:	ea22 0303 	bic.w	r3, r2, r3
 8002a1e:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a20:	6804      	ldr	r4, [r0, #0]
 8002a22:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002a24:	880a      	ldrh	r2, [r1, #0]
 8002a26:	684b      	ldr	r3, [r1, #4]
 8002a28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a2c:	3b05      	subs	r3, #5
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	432b      	orrs	r3, r5
 8002a34:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a36:	6802      	ldr	r2, [r0, #0]
 8002a38:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_ADC_ConfigChannel+0x18c>)
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d04c      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x124>
  __HAL_UNLOCK(hadc);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002a44:	4618      	mov	r0, r3
}
 8002a46:	b002      	add	sp, #8
 8002a48:	bc30      	pop	{r4, r5}
 8002a4a:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a4c:	6804      	ldr	r4, [r0, #0]
 8002a4e:	6922      	ldr	r2, [r4, #16]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002a56:	f04f 0c07 	mov.w	ip, #7
 8002a5a:	fa0c f303 	lsl.w	r3, ip, r3
 8002a5e:	ea22 0303 	bic.w	r3, r2, r3
 8002a62:	6123      	str	r3, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a64:	6804      	ldr	r4, [r0, #0]
 8002a66:	6925      	ldr	r5, [r4, #16]
 8002a68:	880b      	ldrh	r3, [r1, #0]
 8002a6a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002a6e:	688b      	ldr	r3, [r1, #8]
 8002a70:	4093      	lsls	r3, r2
 8002a72:	432b      	orrs	r3, r5
 8002a74:	6123      	str	r3, [r4, #16]
 8002a76:	e7c4      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13U)
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	d816      	bhi.n	8002aaa <HAL_ADC_ConfigChannel+0xf6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a7c:	6805      	ldr	r5, [r0, #0]
 8002a7e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002a80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a84:	3b23      	subs	r3, #35	; 0x23
 8002a86:	241f      	movs	r4, #31
 8002a88:	fa04 f303 	lsl.w	r3, r4, r3
 8002a8c:	ea22 0303 	bic.w	r3, r2, r3
 8002a90:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a92:	6804      	ldr	r4, [r0, #0]
 8002a94:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002a96:	880a      	ldrh	r2, [r1, #0]
 8002a98:	684b      	ldr	r3, [r1, #4]
 8002a9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a9e:	3b23      	subs	r3, #35	; 0x23
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	432b      	orrs	r3, r5
 8002aa6:	6323      	str	r3, [r4, #48]	; 0x30
 8002aa8:	e7c5      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x82>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aaa:	6805      	ldr	r5, [r0, #0]
 8002aac:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002aae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ab2:	3b41      	subs	r3, #65	; 0x41
 8002ab4:	241f      	movs	r4, #31
 8002ab6:	fa04 f303 	lsl.w	r3, r4, r3
 8002aba:	ea22 0303 	bic.w	r3, r2, r3
 8002abe:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ac0:	6804      	ldr	r4, [r0, #0]
 8002ac2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002ac4:	880a      	ldrh	r2, [r1, #0]
 8002ac6:	684b      	ldr	r3, [r1, #4]
 8002ac8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002acc:	3b41      	subs	r3, #65	; 0x41
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	432b      	orrs	r3, r5
 8002ad4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ad6:	e7ae      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x82>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ad8:	680b      	ldr	r3, [r1, #0]
 8002ada:	2b12      	cmp	r3, #18
 8002adc:	d024      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0x174>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ade:	680b      	ldr	r3, [r1, #0]
 8002ae0:	3b10      	subs	r3, #16
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d8ab      	bhi.n	8002a3e <HAL_ADC_ConfigChannel+0x8a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <HAL_ADC_ConfigChannel+0x190>)
 8002ae8:	6853      	ldr	r3, [r2, #4]
 8002aea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002aee:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002af0:	680b      	ldr	r3, [r1, #0]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d1a3      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x8a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_ADC_ConfigChannel+0x194>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8002afe:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8002b02:	f202 3283 	addw	r2, r2, #899	; 0x383
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	0c9b      	lsrs	r3, r3, #18
 8002b0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002b14:	9b01      	ldr	r3, [sp, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d091      	beq.n	8002a3e <HAL_ADC_ConfigChannel+0x8a>
        counter--;
 8002b1a:	9b01      	ldr	r3, [sp, #4]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002b20:	9b01      	ldr	r3, [sp, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x166>
 8002b26:	e78a      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x8a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <HAL_ADC_ConfigChannel+0x190>)
 8002b2a:	6853      	ldr	r3, [r2, #4]
 8002b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b30:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b32:	6802      	ldr	r2, [r0, #0]
 8002b34:	4b02      	ldr	r3, [pc, #8]	; (8002b40 <HAL_ADC_ConfigChannel+0x18c>)
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d0d1      	beq.n	8002ade <HAL_ADC_ConfigChannel+0x12a>
 8002b3a:	e780      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x8a>
  __HAL_LOCK(hadc);
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	e782      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x92>
 8002b40:	40012000 	.word	0x40012000
 8002b44:	40012300 	.word	0x40012300
 8002b48:	20000004 	.word	0x20000004

08002b4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b4c:	4907      	ldr	r1, [pc, #28]	; (8002b6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b4e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	0203      	lsls	r3, r0, #8
 8002b52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b5a:	0412      	lsls	r2, r2, #16
 8002b5c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002b68:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b70:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_NVIC_SetPriority+0x64>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7a:	f1c3 0c07 	rsb	ip, r3, #7
 8002b7e:	f1bc 0f04 	cmp.w	ip, #4
 8002b82:	bf28      	it	cs
 8002b84:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b88:	f103 0e04 	add.w	lr, r3, #4
 8002b8c:	f1be 0f06 	cmp.w	lr, #6
 8002b90:	bf8c      	ite	hi
 8002b92:	3b03      	subhi	r3, #3
 8002b94:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b96:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8002b9a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b9e:	ea21 010c 	bic.w	r1, r1, ip
 8002ba2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba4:	fa0e f303 	lsl.w	r3, lr, r3
 8002ba8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	db09      	blt.n	8002bc6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	0109      	lsls	r1, r1, #4
 8002bb4:	b2c9      	uxtb	r1, r1
 8002bb6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002bba:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002bbe:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002bc2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	f000 000f 	and.w	r0, r0, #15
 8002bca:	0109      	lsls	r1, r1, #4
 8002bcc:	b2c9      	uxtb	r1, r1
 8002bce:	4b02      	ldr	r3, [pc, #8]	; (8002bd8 <HAL_NVIC_SetPriority+0x68>)
 8002bd0:	5419      	strb	r1, [r3, r0]
 8002bd2:	e7f6      	b.n	8002bc2 <HAL_NVIC_SetPriority+0x52>
 8002bd4:	e000ed00 	.word	0xe000ed00
 8002bd8:	e000ed14 	.word	0xe000ed14

08002bdc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	db08      	blt.n	8002bf2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be0:	0942      	lsrs	r2, r0, #5
 8002be2:	f000 001f 	and.w	r0, r0, #31
 8002be6:	2301      	movs	r3, #1
 8002be8:	fa03 f000 	lsl.w	r0, r3, r0
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <HAL_NVIC_EnableIRQ+0x18>)
 8002bee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bf2:	4770      	bx	lr
 8002bf4:	e000e100 	.word	0xe000e100

08002bf8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	3801      	subs	r0, #1
 8002bfa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002bfe:	d20b      	bcs.n	8002c18 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002c04:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <HAL_SYSTICK_Config+0x24>)
 8002c08:	21f0      	movs	r1, #240	; 0xf0
 8002c0a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0e:	2000      	movs	r0, #0
 8002c10:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	2207      	movs	r2, #7
 8002c14:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c16:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c18:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c24:	b083      	sub	sp, #12
 8002c26:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c28:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c2a:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c2e:	2503      	movs	r5, #3
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c30:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8002de8 <HAL_GPIO_Init+0x1c8>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c34:	4c6a      	ldr	r4, [pc, #424]	; (8002de0 <HAL_GPIO_Init+0x1c0>)
 8002c36:	e04b      	b.n	8002cd0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8002c38:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c3a:	fa05 fa02 	lsl.w	sl, r5, r2
 8002c3e:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c42:	68cf      	ldr	r7, [r1, #12]
 8002c44:	4097      	lsls	r7, r2
 8002c46:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002c4a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002c4c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c4e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c52:	684f      	ldr	r7, [r1, #4]
 8002c54:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8002c58:	409f      	lsls	r7, r3
 8002c5a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8002c5e:	6047      	str	r7, [r0, #4]
 8002c60:	e044      	b.n	8002cec <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c62:	f04f 0c00 	mov.w	ip, #0
 8002c66:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002c6a:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c6e:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8002c72:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c78:	684e      	ldr	r6, [r1, #4]
 8002c7a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002c7e:	bf0c      	ite	eq
 8002c80:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8002c84:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8002c88:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8002c8a:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c8c:	684e      	ldr	r6, [r1, #4]
 8002c8e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8002c92:	bf0c      	ite	eq
 8002c94:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8002c98:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8002c9c:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8002c9e:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca0:	684e      	ldr	r6, [r1, #4]
 8002ca2:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	bf0c      	ite	eq
 8002ca8:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8002cac:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8002cb0:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb2:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cb4:	684e      	ldr	r6, [r1, #4]
 8002cb6:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002cba:	bf0c      	ite	eq
 8002cbc:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8002cc0:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8002cc4:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	3202      	adds	r2, #2
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	f000 8085 	beq.w	8002dda <HAL_GPIO_Init+0x1ba>
    ioposition = 0x01U << position;
 8002cd0:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd4:	680f      	ldr	r7, [r1, #0]
 8002cd6:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8002cda:	ea3c 0607 	bics.w	r6, ip, r7
 8002cde:	d1f2      	bne.n	8002cc6 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce0:	684f      	ldr	r7, [r1, #4]
 8002ce2:	f007 0703 	and.w	r7, r7, #3
 8002ce6:	3f01      	subs	r7, #1
 8002ce8:	2f01      	cmp	r7, #1
 8002cea:	d9a5      	bls.n	8002c38 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cec:	684f      	ldr	r7, [r1, #4]
 8002cee:	f007 0703 	and.w	r7, r7, #3
 8002cf2:	2f03      	cmp	r7, #3
 8002cf4:	d024      	beq.n	8002d40 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8002cf6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cf8:	fa05 fc02 	lsl.w	ip, r5, r2
 8002cfc:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d00:	688f      	ldr	r7, [r1, #8]
 8002d02:	4097      	lsls	r7, r2
 8002d04:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8002d08:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0a:	684f      	ldr	r7, [r1, #4]
 8002d0c:	f007 0703 	and.w	r7, r7, #3
 8002d10:	2f02      	cmp	r7, #2
 8002d12:	d115      	bne.n	8002d40 <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3U];
 8002d14:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8002d18:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002d1c:	f8dc a020 	ldr.w	sl, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d20:	f003 0707 	and.w	r7, r3, #7
 8002d24:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8002d28:	270f      	movs	r7, #15
 8002d2a:	fa07 f70b 	lsl.w	r7, r7, fp
 8002d2e:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d32:	690f      	ldr	r7, [r1, #16]
 8002d34:	fa07 f70b 	lsl.w	r7, r7, fp
 8002d38:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002d3c:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8002d40:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d42:	fa05 fc02 	lsl.w	ip, r5, r2
 8002d46:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d4a:	684f      	ldr	r7, [r1, #4]
 8002d4c:	f007 0703 	and.w	r7, r7, #3
 8002d50:	4097      	lsls	r7, r2
 8002d52:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8002d56:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d58:	684f      	ldr	r7, [r1, #4]
 8002d5a:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8002d5e:	d0b2      	beq.n	8002cc6 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d60:	2700      	movs	r7, #0
 8002d62:	9701      	str	r7, [sp, #4]
 8002d64:	4e1f      	ldr	r6, [pc, #124]	; (8002de4 <HAL_GPIO_Init+0x1c4>)
 8002d66:	6c77      	ldr	r7, [r6, #68]	; 0x44
 8002d68:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8002d6c:	6477      	str	r7, [r6, #68]	; 0x44
 8002d6e:	6c77      	ldr	r7, [r6, #68]	; 0x44
 8002d70:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8002d74:	9701      	str	r7, [sp, #4]
 8002d76:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002d78:	f023 0703 	bic.w	r7, r3, #3
 8002d7c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002d80:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002d84:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d88:	f003 0c03 	and.w	ip, r3, #3
 8002d8c:	ea4f 0b8c 	mov.w	fp, ip, lsl #2
 8002d90:	f04f 0c0f 	mov.w	ip, #15
 8002d94:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002d98:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d9c:	4540      	cmp	r0, r8
 8002d9e:	f43f af60 	beq.w	8002c62 <HAL_GPIO_Init+0x42>
 8002da2:	f5a6 5650 	sub.w	r6, r6, #13312	; 0x3400
 8002da6:	42b0      	cmp	r0, r6
 8002da8:	d010      	beq.n	8002dcc <HAL_GPIO_Init+0x1ac>
 8002daa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002dae:	42b0      	cmp	r0, r6
 8002db0:	d00e      	beq.n	8002dd0 <HAL_GPIO_Init+0x1b0>
 8002db2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002db6:	42b0      	cmp	r0, r6
 8002db8:	d00d      	beq.n	8002dd6 <HAL_GPIO_Init+0x1b6>
 8002dba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002dbe:	42b0      	cmp	r0, r6
 8002dc0:	bf0c      	ite	eq
 8002dc2:	f04f 0c04 	moveq.w	ip, #4
 8002dc6:	f04f 0c07 	movne.w	ip, #7
 8002dca:	e74c      	b.n	8002c66 <HAL_GPIO_Init+0x46>
 8002dcc:	46f4      	mov	ip, lr
 8002dce:	e74a      	b.n	8002c66 <HAL_GPIO_Init+0x46>
 8002dd0:	f04f 0c02 	mov.w	ip, #2
 8002dd4:	e747      	b.n	8002c66 <HAL_GPIO_Init+0x46>
 8002dd6:	46ac      	mov	ip, r5
 8002dd8:	e745      	b.n	8002c66 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8002dda:	b003      	add	sp, #12
 8002ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002de0:	40013c00 	.word	0x40013c00
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020000 	.word	0x40020000

08002dec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dec:	b10a      	cbz	r2, 8002df2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dee:	6181      	str	r1, [r0, #24]
 8002df0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002df2:	0409      	lsls	r1, r1, #16
 8002df4:	6181      	str	r1, [r0, #24]
  }
}
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_GPIO_EXTI_IRQHandler>:
{
 8002dfc:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4203      	tst	r3, r0
 8002e04:	d100      	bne.n	8002e08 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8002e06:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002e0a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e0c:	f7ff fff4 	bl	8002df8 <HAL_GPIO_EXTI_Callback>
}
 8002e10:	e7f9      	b.n	8002e06 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002e12:	bf00      	nop
 8002e14:	40013c00 	.word	0x40013c00

08002e18 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e18:	6803      	ldr	r3, [r0, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002e20:	d101      	bne.n	8002e26 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8002e22:	2000      	movs	r0, #0
}
 8002e24:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e2a:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e30:	2220      	movs	r2, #32
 8002e32:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e36:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e3a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002e3c:	f042 0204 	orr.w	r2, r2, #4
 8002e40:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002e42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8002e46:	2001      	movs	r0, #1
 8002e48:	4770      	bx	lr

08002e4a <I2C_WaitOnFlagUntilTimeout>:
{
 8002e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4e:	4606      	mov	r6, r0
 8002e50:	460c      	mov	r4, r1
 8002e52:	4617      	mov	r7, r2
 8002e54:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e56:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002e5a:	f1b8 0f01 	cmp.w	r8, #1
 8002e5e:	6833      	ldr	r3, [r6, #0]
 8002e60:	bf0c      	ite	eq
 8002e62:	695b      	ldreq	r3, [r3, #20]
 8002e64:	699b      	ldrne	r3, [r3, #24]
 8002e66:	ea24 0c03 	bic.w	ip, r4, r3
 8002e6a:	fa1f fc8c 	uxth.w	ip, ip
 8002e6e:	fabc fc8c 	clz	ip, ip
 8002e72:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002e76:	4567      	cmp	r7, ip
 8002e78:	d119      	bne.n	8002eae <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002e7a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002e7e:	d0ec      	beq.n	8002e5a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e80:	f7ff fcbc 	bl	80027fc <HAL_GetTick>
 8002e84:	9b06      	ldr	r3, [sp, #24]
 8002e86:	1ac0      	subs	r0, r0, r3
 8002e88:	42a8      	cmp	r0, r5
 8002e8a:	d801      	bhi.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x46>
 8002e8c:	2d00      	cmp	r5, #0
 8002e8e:	d1e4      	bne.n	8002e5a <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e94:	2220      	movs	r2, #32
 8002e96:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e9a:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e9e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002ea0:	f042 0220 	orr.w	r2, r2, #32
 8002ea4:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ea6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8002eaa:	2001      	movs	r0, #1
 8002eac:	e000      	b.n	8002eb0 <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 8002eae:	2000      	movs	r0, #0
}
 8002eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eb8:	4605      	mov	r5, r0
 8002eba:	460e      	mov	r6, r1
 8002ebc:	4617      	mov	r7, r2
 8002ebe:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ec0:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002ec4:	e03b      	b.n	8002f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ecc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ece:	682b      	ldr	r3, [r5, #0]
 8002ed0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ed4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eda:	2220      	movs	r2, #32
 8002edc:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ee4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002ee6:	f042 0204 	orr.w	r2, r2, #4
 8002eea:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002eec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002ef0:	2001      	movs	r0, #1
}
 8002ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7ff fc81 	bl	80027fc <HAL_GetTick>
 8002efa:	eba0 0009 	sub.w	r0, r0, r9
 8002efe:	42b8      	cmp	r0, r7
 8002f00:	d800      	bhi.n	8002f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x50>
 8002f02:	b9e7      	cbnz	r7, 8002f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f12:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002f14:	f042 0220 	orr.w	r2, r2, #32
 8002f18:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f1a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8002f1e:	2001      	movs	r0, #1
 8002f20:	e7e7      	b.n	8002ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f22:	682b      	ldr	r3, [r5, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	ea26 0303 	bic.w	r3, r6, r3
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	b19b      	cbz	r3, 8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f2e:	682b      	ldr	r3, [r5, #0]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002f36:	d1c6      	bne.n	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
    if (Timeout != HAL_MAX_DELAY)
 8002f38:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8002f3c:	d1db      	bne.n	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f3e:	f1b8 0f01 	cmp.w	r8, #1
 8002f42:	d0ee      	beq.n	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x6e>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	699c      	ldr	r4, [r3, #24]
 8002f48:	ea26 0404 	bic.w	r4, r6, r4
 8002f4c:	b2a4      	uxth	r4, r4
 8002f4e:	2c00      	cmp	r4, #0
 8002f50:	d1ed      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7a>
  return HAL_OK;
 8002f52:	2000      	movs	r0, #0
 8002f54:	e7cd      	b.n	8002ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
 8002f56:	2000      	movs	r0, #0
 8002f58:	e7cb      	b.n	8002ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08002f5a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002f5a:	b570      	push	{r4, r5, r6, lr}
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	460d      	mov	r5, r1
 8002f60:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f6a:	d11c      	bne.n	8002fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7ff ff53 	bl	8002e18 <I2C_IsAcknowledgeFailed>
 8002f72:	b9d0      	cbnz	r0, 8002faa <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002f74:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002f78:	d0f3      	beq.n	8002f62 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7ff fc3f 	bl	80027fc <HAL_GetTick>
 8002f7e:	1b80      	subs	r0, r0, r6
 8002f80:	42a8      	cmp	r0, r5
 8002f82:	d801      	bhi.n	8002f88 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002f84:	2d00      	cmp	r5, #0
 8002f86:	d1ec      	bne.n	8002f62 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f98:	f042 0220 	orr.w	r2, r2, #32
 8002f9c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	e000      	b.n	8002fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002fa6:	2000      	movs	r0, #0
}
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002faa:	2001      	movs	r0, #1
 8002fac:	e7fc      	b.n	8002fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08002fae <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002fae:	b570      	push	{r4, r5, r6, lr}
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	460d      	mov	r5, r1
 8002fb4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f013 0f04 	tst.w	r3, #4
 8002fbe:	d11c      	bne.n	8002ffa <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f7ff ff29 	bl	8002e18 <I2C_IsAcknowledgeFailed>
 8002fc6:	b9d0      	cbnz	r0, 8002ffe <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002fc8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002fcc:	d0f3      	beq.n	8002fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fce:	f7ff fc15 	bl	80027fc <HAL_GetTick>
 8002fd2:	1b80      	subs	r0, r0, r6
 8002fd4:	42a8      	cmp	r0, r5
 8002fd6:	d801      	bhi.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002fd8:	2d00      	cmp	r5, #0
 8002fda:	d1ec      	bne.n	8002fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002fec:	f042 0220 	orr.w	r2, r2, #32
 8002ff0:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ff2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	e000      	b.n	8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002ffa:	2000      	movs	r0, #0
}
 8002ffc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002ffe:	2001      	movs	r0, #1
 8003000:	e7fc      	b.n	8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003002 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003002:	b570      	push	{r4, r5, r6, lr}
 8003004:	4605      	mov	r5, r0
 8003006:	460c      	mov	r4, r1
 8003008:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800300a:	682b      	ldr	r3, [r5, #0]
 800300c:	6959      	ldr	r1, [r3, #20]
 800300e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003012:	d129      	bne.n	8003068 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003014:	6959      	ldr	r1, [r3, #20]
 8003016:	f011 0f10 	tst.w	r1, #16
 800301a:	d115      	bne.n	8003048 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301c:	f7ff fbee 	bl	80027fc <HAL_GetTick>
 8003020:	1b80      	subs	r0, r0, r6
 8003022:	42a0      	cmp	r0, r4
 8003024:	d801      	bhi.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8003026:	2c00      	cmp	r4, #0
 8003028:	d1ef      	bne.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800302a:	2300      	movs	r3, #0
 800302c:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800302e:	2220      	movs	r2, #32
 8003030:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003034:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800303a:	f042 0220 	orr.w	r2, r2, #32
 800303e:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003040:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003044:	2001      	movs	r0, #1
}
 8003046:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003048:	f06f 0210 	mvn.w	r2, #16
 800304c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	2300      	movs	r3, #0
 8003050:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003052:	2220      	movs	r2, #32
 8003054:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800305c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800305e:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003060:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003064:	2001      	movs	r0, #1
 8003066:	e7ee      	b.n	8003046 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8003068:	2000      	movs	r0, #0
 800306a:	e7ec      	b.n	8003046 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>

0800306c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800306c:	2800      	cmp	r0, #0
 800306e:	f000 80b0 	beq.w	80031d2 <HAL_I2C_Init+0x166>
{
 8003072:	b570      	push	{r4, r5, r6, lr}
 8003074:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003076:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800307a:	2b00      	cmp	r3, #0
 800307c:	d073      	beq.n	8003166 <HAL_I2C_Init+0xfa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800307e:	2324      	movs	r3, #36	; 0x24
 8003080:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003084:	6822      	ldr	r2, [r4, #0]
 8003086:	6813      	ldr	r3, [r2, #0]
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800308e:	6822      	ldr	r2, [r4, #0]
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003096:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	6813      	ldr	r3, [r2, #0]
 800309c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030a0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a2:	f000 feb7 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030a6:	6862      	ldr	r2, [r4, #4]
 80030a8:	4b4c      	ldr	r3, [pc, #304]	; (80031dc <HAL_I2C_Init+0x170>)
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d860      	bhi.n	8003170 <HAL_I2C_Init+0x104>
 80030ae:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_I2C_Init+0x174>)
 80030b0:	4298      	cmp	r0, r3
 80030b2:	f240 8090 	bls.w	80031d6 <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 80030b6:	494b      	ldr	r1, [pc, #300]	; (80031e4 <HAL_I2C_Init+0x178>)
 80030b8:	fba1 3100 	umull	r3, r1, r1, r0
 80030bc:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030be:	6825      	ldr	r5, [r4, #0]
 80030c0:	686a      	ldr	r2, [r5, #4]
 80030c2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80030c6:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80030ca:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030cc:	6821      	ldr	r1, [r4, #0]
 80030ce:	6a0a      	ldr	r2, [r1, #32]
 80030d0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80030d4:	4d41      	ldr	r5, [pc, #260]	; (80031dc <HAL_I2C_Init+0x170>)
 80030d6:	6866      	ldr	r6, [r4, #4]
 80030d8:	42ae      	cmp	r6, r5
 80030da:	d84e      	bhi.n	800317a <HAL_I2C_Init+0x10e>
 80030dc:	3301      	adds	r3, #1
 80030de:	4313      	orrs	r3, r2
 80030e0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030e2:	6821      	ldr	r1, [r4, #0]
 80030e4:	69ca      	ldr	r2, [r1, #28]
 80030e6:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80030ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ee:	6865      	ldr	r5, [r4, #4]
 80030f0:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <HAL_I2C_Init+0x170>)
 80030f2:	429d      	cmp	r5, r3
 80030f4:	d84b      	bhi.n	800318e <HAL_I2C_Init+0x122>
 80030f6:	1e43      	subs	r3, r0, #1
 80030f8:	006d      	lsls	r5, r5, #1
 80030fa:	fbb3 f3f5 	udiv	r3, r3, r5
 80030fe:	3301      	adds	r3, #1
 8003100:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003104:	4203      	tst	r3, r0
 8003106:	d05e      	beq.n	80031c6 <HAL_I2C_Init+0x15a>
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	4313      	orrs	r3, r2
 800310e:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003110:	6821      	ldr	r1, [r4, #0]
 8003112:	680a      	ldr	r2, [r1, #0]
 8003114:	69e3      	ldr	r3, [r4, #28]
 8003116:	6a20      	ldr	r0, [r4, #32]
 8003118:	4303      	orrs	r3, r0
 800311a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003122:	6821      	ldr	r1, [r4, #0]
 8003124:	688a      	ldr	r2, [r1, #8]
 8003126:	6923      	ldr	r3, [r4, #16]
 8003128:	68e0      	ldr	r0, [r4, #12]
 800312a:	4303      	orrs	r3, r0
 800312c:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8003130:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003134:	4313      	orrs	r3, r2
 8003136:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003138:	6821      	ldr	r1, [r4, #0]
 800313a:	68ca      	ldr	r2, [r1, #12]
 800313c:	6963      	ldr	r3, [r4, #20]
 800313e:	69a0      	ldr	r0, [r4, #24]
 8003140:	4303      	orrs	r3, r0
 8003142:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003146:	4313      	orrs	r3, r2
 8003148:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800314a:	6822      	ldr	r2, [r4, #0]
 800314c:	6813      	ldr	r3, [r2, #0]
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	2000      	movs	r0, #0
 8003156:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003158:	2320      	movs	r3, #32
 800315a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800315e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003160:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003164:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003166:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800316a:	f7ff f8f5 	bl	8002358 <HAL_I2C_MspInit>
 800316e:	e786      	b.n	800307e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_I2C_Init+0x17c>)
 8003172:	4298      	cmp	r0, r3
 8003174:	d89f      	bhi.n	80030b6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003176:	2001      	movs	r0, #1
 8003178:	e7f4      	b.n	8003164 <HAL_I2C_Init+0xf8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317a:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800317e:	fb05 f303 	mul.w	r3, r5, r3
 8003182:	4d1a      	ldr	r5, [pc, #104]	; (80031ec <HAL_I2C_Init+0x180>)
 8003184:	fba5 5303 	umull	r5, r3, r5, r3
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	3301      	adds	r3, #1
 800318c:	e7a7      	b.n	80030de <HAL_I2C_Init+0x72>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800318e:	68a3      	ldr	r3, [r4, #8]
 8003190:	b95b      	cbnz	r3, 80031aa <HAL_I2C_Init+0x13e>
 8003192:	3801      	subs	r0, #1
 8003194:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8003198:	fbb0 f3f3 	udiv	r3, r0, r3
 800319c:	3301      	adds	r3, #1
 800319e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a2:	b193      	cbz	r3, 80031ca <HAL_I2C_Init+0x15e>
 80031a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a8:	e7b0      	b.n	800310c <HAL_I2C_Init+0xa0>
 80031aa:	3801      	subs	r0, #1
 80031ac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80031b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80031b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031be:	b133      	cbz	r3, 80031ce <HAL_I2C_Init+0x162>
 80031c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c4:	e7a2      	b.n	800310c <HAL_I2C_Init+0xa0>
 80031c6:	2304      	movs	r3, #4
 80031c8:	e7a0      	b.n	800310c <HAL_I2C_Init+0xa0>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e79e      	b.n	800310c <HAL_I2C_Init+0xa0>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e79c      	b.n	800310c <HAL_I2C_Init+0xa0>
    return HAL_ERROR;
 80031d2:	2001      	movs	r0, #1
}
 80031d4:	4770      	bx	lr
    return HAL_ERROR;
 80031d6:	2001      	movs	r0, #1
 80031d8:	e7c4      	b.n	8003164 <HAL_I2C_Init+0xf8>
 80031da:	bf00      	nop
 80031dc:	000186a0 	.word	0x000186a0
 80031e0:	001e847f 	.word	0x001e847f
 80031e4:	431bde83 	.word	0x431bde83
 80031e8:	003d08ff 	.word	0x003d08ff
 80031ec:	10624dd3 	.word	0x10624dd3

080031f0 <HAL_I2C_Master_Transmit>:
{
 80031f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031f4:	b085      	sub	sp, #20
 80031f6:	4604      	mov	r4, r0
 80031f8:	460f      	mov	r7, r1
 80031fa:	4691      	mov	r9, r2
 80031fc:	4698      	mov	r8, r3
 80031fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003200:	f7ff fafc 	bl	80027fc <HAL_GetTick>
 8003204:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003206:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800320a:	b2c0      	uxtb	r0, r0
 800320c:	2820      	cmp	r0, #32
 800320e:	d004      	beq.n	800321a <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8003210:	2702      	movs	r7, #2
}
 8003212:	4638      	mov	r0, r7
 8003214:	b005      	add	sp, #20
 8003216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800321a:	9500      	str	r5, [sp, #0]
 800321c:	2319      	movs	r3, #25
 800321e:	2201      	movs	r2, #1
 8003220:	4971      	ldr	r1, [pc, #452]	; (80033e8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003222:	4620      	mov	r0, r4
 8003224:	f7ff fe11 	bl	8002e4a <I2C_WaitOnFlagUntilTimeout>
 8003228:	2800      	cmp	r0, #0
 800322a:	f040 80d7 	bne.w	80033dc <HAL_I2C_Master_Transmit+0x1ec>
    __HAL_LOCK(hi2c);
 800322e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003232:	2b01      	cmp	r3, #1
 8003234:	f000 80d4 	beq.w	80033e0 <HAL_I2C_Master_Transmit+0x1f0>
 8003238:	2301      	movs	r3, #1
 800323a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	f012 0f01 	tst.w	r2, #1
 8003246:	d103      	bne.n	8003250 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003250:	6822      	ldr	r2, [r4, #0]
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003258:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800325a:	2321      	movs	r3, #33	; 0x21
 800325c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003260:	2310      	movs	r3, #16
 8003262:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003266:	2300      	movs	r3, #0
 8003268:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800326a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800326e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003272:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003274:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003276:	4b5d      	ldr	r3, [pc, #372]	; (80033ec <HAL_I2C_Master_Transmit+0x1fc>)
 8003278:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800327a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800327c:	2b08      	cmp	r3, #8
 800327e:	d00d      	beq.n	800329c <HAL_I2C_Master_Transmit+0xac>
 8003280:	2b01      	cmp	r3, #1
 8003282:	d00b      	beq.n	800329c <HAL_I2C_Master_Transmit+0xac>
 8003284:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003288:	d008      	beq.n	800329c <HAL_I2C_Master_Transmit+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800328a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800328c:	2b12      	cmp	r3, #18
 800328e:	d10a      	bne.n	80032a6 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003290:	6822      	ldr	r2, [r4, #0]
 8003292:	6813      	ldr	r3, [r2, #0]
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e004      	b.n	80032a6 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a4:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a6:	9500      	str	r5, [sp, #0]
 80032a8:	4633      	mov	r3, r6
 80032aa:	2200      	movs	r2, #0
 80032ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032b0:	4620      	mov	r0, r4
 80032b2:	f7ff fdca 	bl	8002e4a <I2C_WaitOnFlagUntilTimeout>
 80032b6:	b9d0      	cbnz	r0, 80032ee <HAL_I2C_Master_Transmit+0xfe>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032b8:	6923      	ldr	r3, [r4, #16]
 80032ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032be:	d120      	bne.n	8003302 <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80032c6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c8:	462b      	mov	r3, r5
 80032ca:	4632      	mov	r2, r6
 80032cc:	4948      	ldr	r1, [pc, #288]	; (80033f0 <HAL_I2C_Master_Transmit+0x200>)
 80032ce:	4620      	mov	r0, r4
 80032d0:	f7ff fdf0 	bl	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032d4:	4607      	mov	r7, r0
 80032d6:	2800      	cmp	r0, #0
 80032d8:	f040 8084 	bne.w	80033e4 <HAL_I2C_Master_Transmit+0x1f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032dc:	2300      	movs	r3, #0
 80032de:	9303      	str	r3, [sp, #12]
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	9203      	str	r2, [sp, #12]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	9303      	str	r3, [sp, #12]
 80032ea:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80032ec:	e02f      	b.n	800334e <HAL_I2C_Master_Transmit+0x15e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032f6:	d002      	beq.n	80032fe <HAL_I2C_Master_Transmit+0x10e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032fc:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80032fe:	2701      	movs	r7, #1
 8003300:	e787      	b.n	8003212 <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003302:	6822      	ldr	r2, [r4, #0]
 8003304:	11fb      	asrs	r3, r7, #7
 8003306:	f003 0306 	and.w	r3, r3, #6
 800330a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800330e:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003310:	462b      	mov	r3, r5
 8003312:	4632      	mov	r2, r6
 8003314:	4937      	ldr	r1, [pc, #220]	; (80033f4 <HAL_I2C_Master_Transmit+0x204>)
 8003316:	4620      	mov	r0, r4
 8003318:	f7ff fdcc 	bl	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331c:	2800      	cmp	r0, #0
 800331e:	d1ee      	bne.n	80032fe <HAL_I2C_Master_Transmit+0x10e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	b2ff      	uxtb	r7, r7
 8003324:	611f      	str	r7, [r3, #16]
 8003326:	e7cf      	b.n	80032c8 <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800332a:	2b04      	cmp	r3, #4
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Master_Transmit+0x142>
        return HAL_ERROR;
 800332e:	2701      	movs	r7, #1
 8003330:	e76f      	b.n	8003212 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800333a:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800333c:	2701      	movs	r7, #1
 800333e:	e768      	b.n	8003212 <HAL_I2C_Master_Transmit+0x22>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003340:	462a      	mov	r2, r5
 8003342:	4631      	mov	r1, r6
 8003344:	4620      	mov	r0, r4
 8003346:	f7ff fe32 	bl	8002fae <I2C_WaitOnBTFFlagUntilTimeout>
 800334a:	2800      	cmp	r0, #0
 800334c:	d12c      	bne.n	80033a8 <HAL_I2C_Master_Transmit+0x1b8>
    while (hi2c->XferSize > 0U)
 800334e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003350:	2b00      	cmp	r3, #0
 8003352:	d035      	beq.n	80033c0 <HAL_I2C_Master_Transmit+0x1d0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003354:	462a      	mov	r2, r5
 8003356:	4631      	mov	r1, r6
 8003358:	4620      	mov	r0, r4
 800335a:	f7ff fdfe 	bl	8002f5a <I2C_WaitOnTXEFlagUntilTimeout>
 800335e:	2800      	cmp	r0, #0
 8003360:	d1e2      	bne.n	8003328 <HAL_I2C_Master_Transmit+0x138>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800336a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800336c:	1c53      	adds	r3, r2, #1
 800336e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003370:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003372:	3901      	subs	r1, #1
 8003374:	b289      	uxth	r1, r1
 8003376:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003378:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800337a:	3901      	subs	r1, #1
 800337c:	b289      	uxth	r1, r1
 800337e:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	6958      	ldr	r0, [r3, #20]
 8003384:	f010 0f04 	tst.w	r0, #4
 8003388:	d0da      	beq.n	8003340 <HAL_I2C_Master_Transmit+0x150>
 800338a:	2900      	cmp	r1, #0
 800338c:	d0d8      	beq.n	8003340 <HAL_I2C_Master_Transmit+0x150>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338e:	7852      	ldrb	r2, [r2, #1]
 8003390:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003394:	3301      	adds	r3, #1
 8003396:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003398:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800339a:	3b01      	subs	r3, #1
 800339c:	b29b      	uxth	r3, r3
 800339e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80033a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033a2:	3b01      	subs	r3, #1
 80033a4:	8523      	strh	r3, [r4, #40]	; 0x28
 80033a6:	e7cb      	b.n	8003340 <HAL_I2C_Master_Transmit+0x150>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Master_Transmit+0x1c2>
        return HAL_ERROR;
 80033ae:	2701      	movs	r7, #1
 80033b0:	e72f      	b.n	8003212 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b2:	6822      	ldr	r2, [r4, #0]
 80033b4:	6813      	ldr	r3, [r2, #0]
 80033b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ba:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80033bc:	2701      	movs	r7, #1
 80033be:	e728      	b.n	8003212 <HAL_I2C_Master_Transmit+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	6822      	ldr	r2, [r4, #0]
 80033c2:	6813      	ldr	r3, [r2, #0]
 80033c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033c8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80033ca:	2320      	movs	r3, #32
 80033cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80033d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80033da:	e71a      	b.n	8003212 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80033dc:	2702      	movs	r7, #2
 80033de:	e718      	b.n	8003212 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80033e0:	2702      	movs	r7, #2
 80033e2:	e716      	b.n	8003212 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80033e4:	2701      	movs	r7, #1
 80033e6:	e714      	b.n	8003212 <HAL_I2C_Master_Transmit+0x22>
 80033e8:	00100002 	.word	0x00100002
 80033ec:	ffff0000 	.word	0xffff0000
 80033f0:	00010002 	.word	0x00010002
 80033f4:	00010008 	.word	0x00010008

080033f8 <HAL_I2C_Master_Receive>:
{
 80033f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033fc:	b089      	sub	sp, #36	; 0x24
 80033fe:	4604      	mov	r4, r0
 8003400:	460f      	mov	r7, r1
 8003402:	4691      	mov	r9, r2
 8003404:	4698      	mov	r8, r3
 8003406:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8003408:	f7ff f9f8 	bl	80027fc <HAL_GetTick>
 800340c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800340e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003412:	b2c0      	uxtb	r0, r0
 8003414:	2820      	cmp	r0, #32
 8003416:	d005      	beq.n	8003424 <HAL_I2C_Master_Receive+0x2c>
    return HAL_BUSY;
 8003418:	f04f 0902 	mov.w	r9, #2
}
 800341c:	4648      	mov	r0, r9
 800341e:	b009      	add	sp, #36	; 0x24
 8003420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003424:	9500      	str	r5, [sp, #0]
 8003426:	2319      	movs	r3, #25
 8003428:	2201      	movs	r2, #1
 800342a:	4988      	ldr	r1, [pc, #544]	; (800364c <HAL_I2C_Master_Receive+0x254>)
 800342c:	4620      	mov	r0, r4
 800342e:	f7ff fd0c 	bl	8002e4a <I2C_WaitOnFlagUntilTimeout>
 8003432:	2800      	cmp	r0, #0
 8003434:	f040 81bd 	bne.w	80037b2 <HAL_I2C_Master_Receive+0x3ba>
    __HAL_LOCK(hi2c);
 8003438:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	f000 81bb 	beq.w	80037b8 <HAL_I2C_Master_Receive+0x3c0>
 8003442:	2301      	movs	r3, #1
 8003444:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	f012 0f01 	tst.w	r2, #1
 8003450:	d103      	bne.n	800345a <HAL_I2C_Master_Receive+0x62>
      __HAL_I2C_ENABLE(hi2c);
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	6813      	ldr	r3, [r2, #0]
 800345e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003462:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003464:	2322      	movs	r3, #34	; 0x22
 8003466:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800346a:	2310      	movs	r3, #16
 800346c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003470:	2300      	movs	r3, #0
 8003472:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003474:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003478:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800347c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800347e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003480:	4b73      	ldr	r3, [pc, #460]	; (8003650 <HAL_I2C_Master_Receive+0x258>)
 8003482:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003484:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003486:	6821      	ldr	r1, [r4, #0]
 8003488:	680b      	ldr	r3, [r1, #0]
 800348a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800348e:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003490:	2a08      	cmp	r2, #8
 8003492:	d00d      	beq.n	80034b0 <HAL_I2C_Master_Receive+0xb8>
 8003494:	2a01      	cmp	r2, #1
 8003496:	d00b      	beq.n	80034b0 <HAL_I2C_Master_Receive+0xb8>
 8003498:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800349c:	d008      	beq.n	80034b0 <HAL_I2C_Master_Receive+0xb8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800349e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034a0:	2b11      	cmp	r3, #17
 80034a2:	d10a      	bne.n	80034ba <HAL_I2C_Master_Receive+0xc2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a4:	6822      	ldr	r2, [r4, #0]
 80034a6:	6813      	ldr	r3, [r2, #0]
 80034a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e004      	b.n	80034ba <HAL_I2C_Master_Receive+0xc2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	6813      	ldr	r3, [r2, #0]
 80034b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b8:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ba:	9500      	str	r5, [sp, #0]
 80034bc:	4633      	mov	r3, r6
 80034be:	2200      	movs	r2, #0
 80034c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034c4:	4620      	mov	r0, r4
 80034c6:	f7ff fcc0 	bl	8002e4a <I2C_WaitOnFlagUntilTimeout>
 80034ca:	bb40      	cbnz	r0, 800351e <HAL_I2C_Master_Receive+0x126>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d2:	d12d      	bne.n	8003530 <HAL_I2C_Master_Receive+0x138>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	f047 0701 	orr.w	r7, r7, #1
 80034da:	b2ff      	uxtb	r7, r7
 80034dc:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034de:	462b      	mov	r3, r5
 80034e0:	4632      	mov	r2, r6
 80034e2:	495c      	ldr	r1, [pc, #368]	; (8003654 <HAL_I2C_Master_Receive+0x25c>)
 80034e4:	4620      	mov	r0, r4
 80034e6:	f7ff fce5 	bl	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034ea:	4681      	mov	r9, r0
 80034ec:	2800      	cmp	r0, #0
 80034ee:	f040 8166 	bne.w	80037be <HAL_I2C_Master_Receive+0x3c6>
    if (hi2c->XferSize == 0U)
 80034f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d15a      	bne.n	80035ae <HAL_I2C_Master_Receive+0x1b6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f8:	9303      	str	r3, [sp, #12]
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	9203      	str	r2, [sp, #12]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	9203      	str	r2, [sp, #12]
 8003504:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350c:	601a      	str	r2, [r3, #0]
    while (hi2c->XferSize > 0U)
 800350e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8003510:	2900      	cmp	r1, #0
 8003512:	f000 8145 	beq.w	80037a0 <HAL_I2C_Master_Receive+0x3a8>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003516:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800365c <HAL_I2C_Master_Receive+0x264>
 800351a:	2700      	movs	r7, #0
 800351c:	e0cd      	b.n	80036ba <HAL_I2C_Master_Receive+0x2c2>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003526:	d012      	beq.n	800354e <HAL_I2C_Master_Receive+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800352c:	6423      	str	r3, [r4, #64]	; 0x40
 800352e:	e00e      	b.n	800354e <HAL_I2C_Master_Receive+0x156>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003530:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8003534:	f008 0806 	and.w	r8, r8, #6
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800353e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003540:	462b      	mov	r3, r5
 8003542:	4632      	mov	r2, r6
 8003544:	4944      	ldr	r1, [pc, #272]	; (8003658 <HAL_I2C_Master_Receive+0x260>)
 8003546:	4620      	mov	r0, r4
 8003548:	f7ff fcb4 	bl	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800354c:	b110      	cbz	r0, 8003554 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800354e:	f04f 0901 	mov.w	r9, #1
 8003552:	e763      	b.n	800341c <HAL_I2C_Master_Receive+0x24>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	b2ff      	uxtb	r7, r7
 8003558:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800355a:	462b      	mov	r3, r5
 800355c:	4632      	mov	r2, r6
 800355e:	493d      	ldr	r1, [pc, #244]	; (8003654 <HAL_I2C_Master_Receive+0x25c>)
 8003560:	4620      	mov	r0, r4
 8003562:	f7ff fca7 	bl	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003566:	2800      	cmp	r0, #0
 8003568:	d1f1      	bne.n	800354e <HAL_I2C_Master_Receive+0x156>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356a:	2200      	movs	r2, #0
 800356c:	9207      	str	r2, [sp, #28]
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	6959      	ldr	r1, [r3, #20]
 8003572:	9107      	str	r1, [sp, #28]
 8003574:	6999      	ldr	r1, [r3, #24]
 8003576:	9107      	str	r1, [sp, #28]
 8003578:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800357a:	6819      	ldr	r1, [r3, #0]
 800357c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003580:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003582:	9500      	str	r5, [sp, #0]
 8003584:	4633      	mov	r3, r6
 8003586:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800358a:	4620      	mov	r0, r4
 800358c:	f7ff fc5d 	bl	8002e4a <I2C_WaitOnFlagUntilTimeout>
 8003590:	b920      	cbnz	r0, 800359c <HAL_I2C_Master_Receive+0x1a4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003592:	6822      	ldr	r2, [r4, #0]
 8003594:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8003598:	6113      	str	r3, [r2, #16]
 800359a:	e7a0      	b.n	80034de <HAL_I2C_Master_Receive+0xe6>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035a4:	d0d3      	beq.n	800354e <HAL_I2C_Master_Receive+0x156>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035aa:	6423      	str	r3, [r4, #64]	; 0x40
 80035ac:	e7cf      	b.n	800354e <HAL_I2C_Master_Receive+0x156>
    else if (hi2c->XferSize == 1U)
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d00f      	beq.n	80035d2 <HAL_I2C_Master_Receive+0x1da>
    else if (hi2c->XferSize == 2U)
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d01f      	beq.n	80035f6 <HAL_I2C_Master_Receive+0x1fe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	6822      	ldr	r2, [r4, #0]
 80035b8:	6813      	ldr	r3, [r2, #0]
 80035ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035be:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c0:	2300      	movs	r3, #0
 80035c2:	9306      	str	r3, [sp, #24]
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	9206      	str	r2, [sp, #24]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	9306      	str	r3, [sp, #24]
 80035ce:	9b06      	ldr	r3, [sp, #24]
 80035d0:	e79d      	b.n	800350e <HAL_I2C_Master_Receive+0x116>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	6813      	ldr	r3, [r2, #0]
 80035d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035da:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035dc:	2300      	movs	r3, #0
 80035de:	9304      	str	r3, [sp, #16]
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	695a      	ldr	r2, [r3, #20]
 80035e4:	9204      	str	r2, [sp, #16]
 80035e6:	699a      	ldr	r2, [r3, #24]
 80035e8:	9204      	str	r2, [sp, #16]
 80035ea:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e78b      	b.n	800350e <HAL_I2C_Master_Receive+0x116>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	6813      	ldr	r3, [r2, #0]
 80035fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035fe:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003600:	6822      	ldr	r2, [r4, #0]
 8003602:	6813      	ldr	r3, [r2, #0]
 8003604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003608:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360a:	2300      	movs	r3, #0
 800360c:	9305      	str	r3, [sp, #20]
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	9205      	str	r2, [sp, #20]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	9305      	str	r3, [sp, #20]
 8003618:	9b05      	ldr	r3, [sp, #20]
 800361a:	e778      	b.n	800350e <HAL_I2C_Master_Receive+0x116>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361c:	462a      	mov	r2, r5
 800361e:	4631      	mov	r1, r6
 8003620:	4620      	mov	r0, r4
 8003622:	f7ff fcee 	bl	8003002 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003626:	2800      	cmp	r0, #0
 8003628:	f040 80cc 	bne.w	80037c4 <HAL_I2C_Master_Receive+0x3cc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003632:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003636:	3301      	adds	r3, #1
 8003638:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800363a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800363c:	3b01      	subs	r3, #1
 800363e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003640:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003642:	3b01      	subs	r3, #1
 8003644:	b29b      	uxth	r3, r3
 8003646:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003648:	e034      	b.n	80036b4 <HAL_I2C_Master_Receive+0x2bc>
 800364a:	bf00      	nop
 800364c:	00100002 	.word	0x00100002
 8003650:	ffff0000 	.word	0xffff0000
 8003654:	00010002 	.word	0x00010002
 8003658:	00010008 	.word	0x00010008
 800365c:	00010004 	.word	0x00010004
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003660:	9500      	str	r5, [sp, #0]
 8003662:	4633      	mov	r3, r6
 8003664:	463a      	mov	r2, r7
 8003666:	4641      	mov	r1, r8
 8003668:	4620      	mov	r0, r4
 800366a:	f7ff fbee 	bl	8002e4a <I2C_WaitOnFlagUntilTimeout>
 800366e:	2800      	cmp	r0, #0
 8003670:	f040 80ab 	bne.w	80037ca <HAL_I2C_Master_Receive+0x3d2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	6822      	ldr	r2, [r4, #0]
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800367c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003684:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003686:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003688:	1c53      	adds	r3, r2, #1
 800368a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800368c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003692:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003694:	3b01      	subs	r3, #1
 8003696:	b29b      	uxth	r3, r3
 8003698:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80036a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036a2:	3301      	adds	r3, #1
 80036a4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80036a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80036a8:	3b01      	subs	r3, #1
 80036aa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80036ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036b4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80036b6:	2900      	cmp	r1, #0
 80036b8:	d072      	beq.n	80037a0 <HAL_I2C_Master_Receive+0x3a8>
      if (hi2c->XferSize <= 3U)
 80036ba:	2903      	cmp	r1, #3
 80036bc:	d849      	bhi.n	8003752 <HAL_I2C_Master_Receive+0x35a>
        if (hi2c->XferSize == 1U)
 80036be:	2901      	cmp	r1, #1
 80036c0:	d0ac      	beq.n	800361c <HAL_I2C_Master_Receive+0x224>
        else if (hi2c->XferSize == 2U)
 80036c2:	2902      	cmp	r1, #2
 80036c4:	d0cc      	beq.n	8003660 <HAL_I2C_Master_Receive+0x268>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036c6:	9500      	str	r5, [sp, #0]
 80036c8:	4633      	mov	r3, r6
 80036ca:	463a      	mov	r2, r7
 80036cc:	4641      	mov	r1, r8
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff fbbb 	bl	8002e4a <I2C_WaitOnFlagUntilTimeout>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d17b      	bne.n	80037d0 <HAL_I2C_Master_Receive+0x3d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d8:	6822      	ldr	r2, [r4, #0]
 80036da:	6813      	ldr	r3, [r2, #0]
 80036dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036e8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80036ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036ec:	3301      	adds	r3, #1
 80036ee:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80036f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80036f2:	3b01      	subs	r3, #1
 80036f4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80036f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036fe:	9500      	str	r5, [sp, #0]
 8003700:	4633      	mov	r3, r6
 8003702:	463a      	mov	r2, r7
 8003704:	4641      	mov	r1, r8
 8003706:	4620      	mov	r0, r4
 8003708:	f7ff fb9f 	bl	8002e4a <I2C_WaitOnFlagUntilTimeout>
 800370c:	2800      	cmp	r0, #0
 800370e:	d162      	bne.n	80037d6 <HAL_I2C_Master_Receive+0x3de>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	6822      	ldr	r2, [r4, #0]
 8003712:	6813      	ldr	r3, [r2, #0]
 8003714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003718:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003720:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003722:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003724:	1c53      	adds	r3, r2, #1
 8003726:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003728:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800372e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003730:	3b01      	subs	r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800373c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800373e:	3301      	adds	r3, #1
 8003740:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003742:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003748:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800374a:	3b01      	subs	r3, #1
 800374c:	b29b      	uxth	r3, r3
 800374e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003750:	e7b0      	b.n	80036b4 <HAL_I2C_Master_Receive+0x2bc>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003752:	462a      	mov	r2, r5
 8003754:	4631      	mov	r1, r6
 8003756:	4620      	mov	r0, r4
 8003758:	f7ff fc53 	bl	8003002 <I2C_WaitOnRXNEFlagUntilTimeout>
 800375c:	2800      	cmp	r0, #0
 800375e:	d13d      	bne.n	80037dc <HAL_I2C_Master_Receive+0x3e4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003766:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003768:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800376a:	1c53      	adds	r3, r2, #1
 800376c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800376e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003774:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003776:	3b01      	subs	r3, #1
 8003778:	b29b      	uxth	r3, r3
 800377a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	6959      	ldr	r1, [r3, #20]
 8003780:	f011 0f04 	tst.w	r1, #4
 8003784:	d096      	beq.n	80036b4 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800378a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800378c:	3301      	adds	r3, #1
 800378e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003790:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003792:	3b01      	subs	r3, #1
 8003794:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003796:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003798:	3b01      	subs	r3, #1
 800379a:	b29b      	uxth	r3, r3
 800379c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800379e:	e789      	b.n	80036b4 <HAL_I2C_Master_Receive+0x2bc>
    hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	2320      	movs	r3, #32
 80037a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80037ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80037b0:	e634      	b.n	800341c <HAL_I2C_Master_Receive+0x24>
      return HAL_BUSY;
 80037b2:	f04f 0902 	mov.w	r9, #2
 80037b6:	e631      	b.n	800341c <HAL_I2C_Master_Receive+0x24>
    __HAL_LOCK(hi2c);
 80037b8:	f04f 0902 	mov.w	r9, #2
 80037bc:	e62e      	b.n	800341c <HAL_I2C_Master_Receive+0x24>
      return HAL_ERROR;
 80037be:	f04f 0901 	mov.w	r9, #1
 80037c2:	e62b      	b.n	800341c <HAL_I2C_Master_Receive+0x24>
            return HAL_ERROR;
 80037c4:	f04f 0901 	mov.w	r9, #1
 80037c8:	e628      	b.n	800341c <HAL_I2C_Master_Receive+0x24>
            return HAL_ERROR;
 80037ca:	f04f 0901 	mov.w	r9, #1
 80037ce:	e625      	b.n	800341c <HAL_I2C_Master_Receive+0x24>
            return HAL_ERROR;
 80037d0:	f04f 0901 	mov.w	r9, #1
 80037d4:	e622      	b.n	800341c <HAL_I2C_Master_Receive+0x24>
            return HAL_ERROR;
 80037d6:	f04f 0901 	mov.w	r9, #1
 80037da:	e61f      	b.n	800341c <HAL_I2C_Master_Receive+0x24>
          return HAL_ERROR;
 80037dc:	f04f 0901 	mov.w	r9, #1
 80037e0:	e61c      	b.n	800341c <HAL_I2C_Master_Receive+0x24>
 80037e2:	bf00      	nop

080037e4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e4:	2800      	cmp	r0, #0
 80037e6:	f000 81e1 	beq.w	8003bac <HAL_RCC_OscConfig+0x3c8>
{
 80037ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f2:	6803      	ldr	r3, [r0, #0]
 80037f4:	f013 0f01 	tst.w	r3, #1
 80037f8:	d03b      	beq.n	8003872 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037fa:	4b9f      	ldr	r3, [pc, #636]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b04      	cmp	r3, #4
 8003804:	d02c      	beq.n	8003860 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003806:	4b9c      	ldr	r3, [pc, #624]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800380e:	2b08      	cmp	r3, #8
 8003810:	d021      	beq.n	8003856 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003812:	6863      	ldr	r3, [r4, #4]
 8003814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003818:	d04f      	beq.n	80038ba <HAL_RCC_OscConfig+0xd6>
 800381a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381e:	d052      	beq.n	80038c6 <HAL_RCC_OscConfig+0xe2>
 8003820:	4b95      	ldr	r3, [pc, #596]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003830:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003832:	6863      	ldr	r3, [r4, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d050      	beq.n	80038da <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fe ffe0 	bl	80027fc <HAL_GetTick>
 800383c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	4e8e      	ldr	r6, [pc, #568]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003840:	6833      	ldr	r3, [r6, #0]
 8003842:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003846:	d114      	bne.n	8003872 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003848:	f7fe ffd8 	bl	80027fc <HAL_GetTick>
 800384c:	1b40      	subs	r0, r0, r5
 800384e:	2864      	cmp	r0, #100	; 0x64
 8003850:	d9f6      	bls.n	8003840 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8003852:	2003      	movs	r0, #3
 8003854:	e1b1      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003856:	4b88      	ldr	r3, [pc, #544]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800385e:	d0d8      	beq.n	8003812 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	4b85      	ldr	r3, [pc, #532]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003868:	d003      	beq.n	8003872 <HAL_RCC_OscConfig+0x8e>
 800386a:	6863      	ldr	r3, [r4, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 819f 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	f013 0f02 	tst.w	r3, #2
 8003878:	d054      	beq.n	8003924 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800387a:	4b7f      	ldr	r3, [pc, #508]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f013 0f0c 	tst.w	r3, #12
 8003882:	d03e      	beq.n	8003902 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003884:	4b7c      	ldr	r3, [pc, #496]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800388c:	2b08      	cmp	r3, #8
 800388e:	d033      	beq.n	80038f8 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003890:	68e3      	ldr	r3, [r4, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d068      	beq.n	8003968 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003896:	4b79      	ldr	r3, [pc, #484]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe ffae 	bl	80027fc <HAL_GetTick>
 80038a0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4e75      	ldr	r6, [pc, #468]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 80038a4:	6833      	ldr	r3, [r6, #0]
 80038a6:	f013 0f02 	tst.w	r3, #2
 80038aa:	d154      	bne.n	8003956 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ac:	f7fe ffa6 	bl	80027fc <HAL_GetTick>
 80038b0:	1b40      	subs	r0, r0, r5
 80038b2:	2802      	cmp	r0, #2
 80038b4:	d9f6      	bls.n	80038a4 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 80038b6:	2003      	movs	r0, #3
 80038b8:	e17f      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ba:	4a6f      	ldr	r2, [pc, #444]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 80038bc:	6813      	ldr	r3, [r2, #0]
 80038be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	e7b5      	b.n	8003832 <HAL_RCC_OscConfig+0x4e>
 80038c6:	4b6c      	ldr	r3, [pc, #432]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e7ab      	b.n	8003832 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80038da:	f7fe ff8f 	bl	80027fc <HAL_GetTick>
 80038de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e0:	4e65      	ldr	r6, [pc, #404]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 80038e2:	6833      	ldr	r3, [r6, #0]
 80038e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80038e8:	d0c3      	beq.n	8003872 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ea:	f7fe ff87 	bl	80027fc <HAL_GetTick>
 80038ee:	1b40      	subs	r0, r0, r5
 80038f0:	2864      	cmp	r0, #100	; 0x64
 80038f2:	d9f6      	bls.n	80038e2 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 80038f4:	2003      	movs	r0, #3
 80038f6:	e160      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f8:	4b5f      	ldr	r3, [pc, #380]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003900:	d1c6      	bne.n	8003890 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	4b5d      	ldr	r3, [pc, #372]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f013 0f02 	tst.w	r3, #2
 800390a:	d003      	beq.n	8003914 <HAL_RCC_OscConfig+0x130>
 800390c:	68e3      	ldr	r3, [r4, #12]
 800390e:	2b01      	cmp	r3, #1
 8003910:	f040 8150 	bne.w	8003bb4 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	6921      	ldr	r1, [r4, #16]
 800391a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800391e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003922:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	f013 0f08 	tst.w	r3, #8
 800392a:	d042      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800392c:	6963      	ldr	r3, [r4, #20]
 800392e:	b36b      	cbz	r3, 800398c <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003930:	4b52      	ldr	r3, [pc, #328]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003932:	2201      	movs	r2, #1
 8003934:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fe ff60 	bl	80027fc <HAL_GetTick>
 800393c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4e4e      	ldr	r6, [pc, #312]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003940:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003942:	f013 0f02 	tst.w	r3, #2
 8003946:	d134      	bne.n	80039b2 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003948:	f7fe ff58 	bl	80027fc <HAL_GetTick>
 800394c:	1b40      	subs	r0, r0, r5
 800394e:	2802      	cmp	r0, #2
 8003950:	d9f6      	bls.n	8003940 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8003952:	2003      	movs	r0, #3
 8003954:	e131      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	4a48      	ldr	r2, [pc, #288]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003958:	6813      	ldr	r3, [r2, #0]
 800395a:	6921      	ldr	r1, [r4, #16]
 800395c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003960:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e7dd      	b.n	8003924 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003968:	4b44      	ldr	r3, [pc, #272]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800396e:	f7fe ff45 	bl	80027fc <HAL_GetTick>
 8003972:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003974:	4e40      	ldr	r6, [pc, #256]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003976:	6833      	ldr	r3, [r6, #0]
 8003978:	f013 0f02 	tst.w	r3, #2
 800397c:	d0d2      	beq.n	8003924 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800397e:	f7fe ff3d 	bl	80027fc <HAL_GetTick>
 8003982:	1b40      	subs	r0, r0, r5
 8003984:	2802      	cmp	r0, #2
 8003986:	d9f6      	bls.n	8003976 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8003988:	2003      	movs	r0, #3
 800398a:	e116      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398c:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 800398e:	2200      	movs	r2, #0
 8003990:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003994:	f7fe ff32 	bl	80027fc <HAL_GetTick>
 8003998:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399a:	4e37      	ldr	r6, [pc, #220]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 800399c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800399e:	f013 0f02 	tst.w	r3, #2
 80039a2:	d006      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a4:	f7fe ff2a 	bl	80027fc <HAL_GetTick>
 80039a8:	1b40      	subs	r0, r0, r5
 80039aa:	2802      	cmp	r0, #2
 80039ac:	d9f6      	bls.n	800399c <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 80039ae:	2003      	movs	r0, #3
 80039b0:	e103      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	f013 0f04 	tst.w	r3, #4
 80039b8:	d076      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ba:	4b2f      	ldr	r3, [pc, #188]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80039c2:	d133      	bne.n	8003a2c <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c4:	2300      	movs	r3, #0
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 80039ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80039dc:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039de:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039e6:	d023      	beq.n	8003a30 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e8:	68a3      	ldr	r3, [r4, #8]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d034      	beq.n	8003a58 <HAL_RCC_OscConfig+0x274>
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d038      	beq.n	8003a64 <HAL_RCC_OscConfig+0x280>
 80039f2:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 80039f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	671a      	str	r2, [r3, #112]	; 0x70
 80039fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039fe:	f022 0204 	bic.w	r2, r2, #4
 8003a02:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a04:	68a3      	ldr	r3, [r4, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d03c      	beq.n	8003a84 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0a:	f7fe fef7 	bl	80027fc <HAL_GetTick>
 8003a0e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	4f19      	ldr	r7, [pc, #100]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a18:	f013 0f02 	tst.w	r3, #2
 8003a1c:	d143      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7fe feed 	bl	80027fc <HAL_GetTick>
 8003a22:	1b80      	subs	r0, r0, r6
 8003a24:	4540      	cmp	r0, r8
 8003a26:	d9f6      	bls.n	8003a16 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8003a28:	2003      	movs	r0, #3
 8003a2a:	e0c6      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8003a2c:	2500      	movs	r5, #0
 8003a2e:	e7d6      	b.n	80039de <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a32:	6813      	ldr	r3, [r2, #0]
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fedf 	bl	80027fc <HAL_GetTick>
 8003a3e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	4f0f      	ldr	r7, [pc, #60]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a48:	d1ce      	bne.n	80039e8 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7fe fed7 	bl	80027fc <HAL_GetTick>
 8003a4e:	1b80      	subs	r0, r0, r6
 8003a50:	2802      	cmp	r0, #2
 8003a52:	d9f6      	bls.n	8003a42 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8003a54:	2003      	movs	r0, #3
 8003a56:	e0b0      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a58:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003a5a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6713      	str	r3, [r2, #112]	; 0x70
 8003a62:	e7cf      	b.n	8003a04 <HAL_RCC_OscConfig+0x220>
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <HAL_RCC_OscConfig+0x294>)
 8003a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a68:	f042 0204 	orr.w	r2, r2, #4
 8003a6c:	671a      	str	r2, [r3, #112]	; 0x70
 8003a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	671a      	str	r2, [r3, #112]	; 0x70
 8003a76:	e7c5      	b.n	8003a04 <HAL_RCC_OscConfig+0x220>
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	42470000 	.word	0x42470000
 8003a80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fe feba 	bl	80027fc <HAL_GetTick>
 8003a88:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8a:	4f52      	ldr	r7, [pc, #328]	; (8003bd4 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a92:	f013 0f02 	tst.w	r3, #2
 8003a96:	d006      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fe feb0 	bl	80027fc <HAL_GetTick>
 8003a9c:	1b80      	subs	r0, r0, r6
 8003a9e:	4540      	cmp	r0, r8
 8003aa0:	d9f6      	bls.n	8003a90 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8003aa2:	2003      	movs	r0, #3
 8003aa4:	e089      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa6:	b9ed      	cbnz	r5, 8003ae4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa8:	69a3      	ldr	r3, [r4, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8084 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ab0:	4a48      	ldr	r2, [pc, #288]	; (8003bd4 <HAL_RCC_OscConfig+0x3f0>)
 8003ab2:	6892      	ldr	r2, [r2, #8]
 8003ab4:	f002 020c 	and.w	r2, r2, #12
 8003ab8:	2a08      	cmp	r2, #8
 8003aba:	d051      	beq.n	8003b60 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d017      	beq.n	8003af0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac0:	4b45      	ldr	r3, [pc, #276]	; (8003bd8 <HAL_RCC_OscConfig+0x3f4>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7fe fe99 	bl	80027fc <HAL_GetTick>
 8003aca:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003acc:	4d41      	ldr	r5, [pc, #260]	; (8003bd4 <HAL_RCC_OscConfig+0x3f0>)
 8003ace:	682b      	ldr	r3, [r5, #0]
 8003ad0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ad4:	d042      	beq.n	8003b5c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fe fe91 	bl	80027fc <HAL_GetTick>
 8003ada:	1b00      	subs	r0, r0, r4
 8003adc:	2802      	cmp	r0, #2
 8003ade:	d9f6      	bls.n	8003ace <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003ae0:	2003      	movs	r0, #3
 8003ae2:	e06a      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae4:	4a3b      	ldr	r2, [pc, #236]	; (8003bd4 <HAL_RCC_OscConfig+0x3f0>)
 8003ae6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	e7db      	b.n	8003aa8 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8003af0:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <HAL_RCC_OscConfig+0x3f4>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003af6:	f7fe fe81 	bl	80027fc <HAL_GetTick>
 8003afa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afc:	4e35      	ldr	r6, [pc, #212]	; (8003bd4 <HAL_RCC_OscConfig+0x3f0>)
 8003afe:	6833      	ldr	r3, [r6, #0]
 8003b00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b04:	d006      	beq.n	8003b14 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fe fe79 	bl	80027fc <HAL_GetTick>
 8003b0a:	1b40      	subs	r0, r0, r5
 8003b0c:	2802      	cmp	r0, #2
 8003b0e:	d9f6      	bls.n	8003afe <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8003b10:	2003      	movs	r0, #3
 8003b12:	e052      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b14:	69e3      	ldr	r3, [r4, #28]
 8003b16:	6a22      	ldr	r2, [r4, #32]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b1c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003b20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003b26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b28:	0852      	lsrs	r2, r2, #1
 8003b2a:	3a01      	subs	r2, #1
 8003b2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b30:	4a28      	ldr	r2, [pc, #160]	; (8003bd4 <HAL_RCC_OscConfig+0x3f0>)
 8003b32:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b34:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <HAL_RCC_OscConfig+0x3f4>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003b3a:	f7fe fe5f 	bl	80027fc <HAL_GetTick>
 8003b3e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b40:	4d24      	ldr	r5, [pc, #144]	; (8003bd4 <HAL_RCC_OscConfig+0x3f0>)
 8003b42:	682b      	ldr	r3, [r5, #0]
 8003b44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b48:	d106      	bne.n	8003b58 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4a:	f7fe fe57 	bl	80027fc <HAL_GetTick>
 8003b4e:	1b00      	subs	r0, r0, r4
 8003b50:	2802      	cmp	r0, #2
 8003b52:	d9f6      	bls.n	8003b42 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8003b54:	2003      	movs	r0, #3
 8003b56:	e030      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003b58:	2000      	movs	r0, #0
 8003b5a:	e02e      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e02c      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d02d      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCC_OscConfig+0x3f0>)
 8003b66:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b68:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6c:	69e2      	ldr	r2, [r4, #28]
 8003b6e:	4291      	cmp	r1, r2
 8003b70:	d128      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	6a21      	ldr	r1, [r4, #32]
 8003b78:	428a      	cmp	r2, r1
 8003b7a:	d125      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b7e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003b82:	401a      	ands	r2, r3
 8003b84:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003b88:	d120      	bne.n	8003bcc <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b8a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003b8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b90:	0852      	lsrs	r2, r2, #1
 8003b92:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b94:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003b98:	d11a      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b9c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8003ba4:	bf14      	ite	ne
 8003ba6:	2001      	movne	r0, #1
 8003ba8:	2000      	moveq	r0, #0
 8003baa:	e006      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8003bac:	2001      	movs	r0, #1
}
 8003bae:	4770      	bx	lr
        return HAL_ERROR;
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	e002      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8003bb8:	2000      	movs	r0, #0
}
 8003bba:	b002      	add	sp, #8
 8003bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	e7fa      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	e7f8      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
 8003bc8:	2001      	movs	r0, #1
 8003bca:	e7f6      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
 8003bcc:	2001      	movs	r0, #1
 8003bce:	e7f4      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
 8003bd0:	2001      	movs	r0, #1
 8003bd2:	e7f2      	b.n	8003bba <HAL_RCC_OscConfig+0x3d6>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	42470000 	.word	0x42470000

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bde:	4b31      	ldr	r3, [pc, #196]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d057      	beq.n	8003c9a <HAL_RCC_GetSysClockFreq+0xbe>
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d157      	bne.n	8003c9e <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bee:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003bfc:	d02a      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfe:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c00:	6859      	ldr	r1, [r3, #4]
 8003c02:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003c06:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003c0a:	ebb1 000c 	subs.w	r0, r1, ip
 8003c0e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003c12:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003c16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c1a:	0181      	lsls	r1, r0, #6
 8003c1c:	1a09      	subs	r1, r1, r0
 8003c1e:	eb63 030e 	sbc.w	r3, r3, lr
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c28:	00c9      	lsls	r1, r1, #3
 8003c2a:	eb11 0c0c 	adds.w	ip, r1, ip
 8003c2e:	f143 0300 	adc.w	r3, r3, #0
 8003c32:	0259      	lsls	r1, r3, #9
 8003c34:	2300      	movs	r3, #0
 8003c36:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8003c3a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8003c3e:	f7fc ffeb 	bl	8000c18 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c42:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003c4e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003c52:	e025      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003c5c:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003c60:	ebb1 000c 	subs.w	r0, r1, ip
 8003c64:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003c68:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003c6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c70:	0181      	lsls	r1, r0, #6
 8003c72:	1a09      	subs	r1, r1, r0
 8003c74:	eb63 030e 	sbc.w	r3, r3, lr
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c7e:	00c9      	lsls	r1, r1, #3
 8003c80:	eb11 0c0c 	adds.w	ip, r1, ip
 8003c84:	f143 0300 	adc.w	r3, r3, #0
 8003c88:	0299      	lsls	r1, r3, #10
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003c90:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003c94:	f7fc ffc0 	bl	8000c18 <__aeabi_uldivmod>
 8003c98:	e7d3      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c9a:	4803      	ldr	r0, [pc, #12]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c9c:	e000      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 8003c9e:	4803      	ldr	r0, [pc, #12]	; (8003cac <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003ca0:	bd08      	pop	{r3, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	007a1200 	.word	0x007a1200
 8003cac:	00f42400 	.word	0x00f42400

08003cb0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	f000 809d 	beq.w	8003df0 <HAL_RCC_ClockConfig+0x140>
{
 8003cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cba:	460d      	mov	r5, r1
 8003cbc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cbe:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <HAL_RCC_ClockConfig+0x150>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	428b      	cmp	r3, r1
 8003cc8:	d208      	bcs.n	8003cdc <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	b2cb      	uxtb	r3, r1
 8003ccc:	4a4c      	ldr	r2, [pc, #304]	; (8003e00 <HAL_RCC_ClockConfig+0x150>)
 8003cce:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd0:	6813      	ldr	r3, [r2, #0]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	428b      	cmp	r3, r1
 8003cd8:	f040 808c 	bne.w	8003df4 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	f013 0f02 	tst.w	r3, #2
 8003ce2:	d017      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	f013 0f04 	tst.w	r3, #4
 8003ce8:	d004      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cea:	4a46      	ldr	r2, [pc, #280]	; (8003e04 <HAL_RCC_ClockConfig+0x154>)
 8003cec:	6893      	ldr	r3, [r2, #8]
 8003cee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cf2:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	f013 0f08 	tst.w	r3, #8
 8003cfa:	d004      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cfc:	4a41      	ldr	r2, [pc, #260]	; (8003e04 <HAL_RCC_ClockConfig+0x154>)
 8003cfe:	6893      	ldr	r3, [r2, #8]
 8003d00:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d04:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d06:	4a3f      	ldr	r2, [pc, #252]	; (8003e04 <HAL_RCC_ClockConfig+0x154>)
 8003d08:	6893      	ldr	r3, [r2, #8]
 8003d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0e:	68a1      	ldr	r1, [r4, #8]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	f013 0f01 	tst.w	r3, #1
 8003d1a:	d032      	beq.n	8003d82 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1c:	6862      	ldr	r2, [r4, #4]
 8003d1e:	2a01      	cmp	r2, #1
 8003d20:	d021      	beq.n	8003d66 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d22:	1e93      	subs	r3, r2, #2
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d925      	bls.n	8003d74 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <HAL_RCC_ClockConfig+0x154>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f013 0f02 	tst.w	r3, #2
 8003d30:	d062      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d32:	4934      	ldr	r1, [pc, #208]	; (8003e04 <HAL_RCC_ClockConfig+0x154>)
 8003d34:	688b      	ldr	r3, [r1, #8]
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003d3e:	f7fe fd5d 	bl	80027fc <HAL_GetTick>
 8003d42:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d44:	4f2f      	ldr	r7, [pc, #188]	; (8003e04 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d46:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	6862      	ldr	r2, [r4, #4]
 8003d52:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003d56:	d014      	beq.n	8003d82 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d58:	f7fe fd50 	bl	80027fc <HAL_GetTick>
 8003d5c:	1b80      	subs	r0, r0, r6
 8003d5e:	4540      	cmp	r0, r8
 8003d60:	d9f3      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8003d62:	2003      	movs	r0, #3
 8003d64:	e042      	b.n	8003dec <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCC_ClockConfig+0x154>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d6e:	d1e0      	bne.n	8003d32 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003d70:	2001      	movs	r0, #1
 8003d72:	e03b      	b.n	8003dec <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d74:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <HAL_RCC_ClockConfig+0x154>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d7c:	d1d9      	bne.n	8003d32 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003d7e:	2001      	movs	r0, #1
 8003d80:	e034      	b.n	8003dec <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d82:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <HAL_RCC_ClockConfig+0x150>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	42ab      	cmp	r3, r5
 8003d8c:	d907      	bls.n	8003d9e <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	b2ea      	uxtb	r2, r5
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_RCC_ClockConfig+0x150>)
 8003d92:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	42ab      	cmp	r3, r5
 8003d9c:	d12e      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	f013 0f04 	tst.w	r3, #4
 8003da4:	d006      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da6:	4a17      	ldr	r2, [pc, #92]	; (8003e04 <HAL_RCC_ClockConfig+0x154>)
 8003da8:	6893      	ldr	r3, [r2, #8]
 8003daa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003dae:	68e1      	ldr	r1, [r4, #12]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	f013 0f08 	tst.w	r3, #8
 8003dba:	d007      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dbc:	4a11      	ldr	r2, [pc, #68]	; (8003e04 <HAL_RCC_ClockConfig+0x154>)
 8003dbe:	6893      	ldr	r3, [r2, #8]
 8003dc0:	6921      	ldr	r1, [r4, #16]
 8003dc2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003dc6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003dca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dcc:	f7ff ff06 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <HAL_RCC_ClockConfig+0x154>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003dd8:	4a0b      	ldr	r2, [pc, #44]	; (8003e08 <HAL_RCC_ClockConfig+0x158>)
 8003dda:	5cd3      	ldrb	r3, [r2, r3]
 8003ddc:	40d8      	lsrs	r0, r3
 8003dde:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_ClockConfig+0x15c>)
 8003de0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_ClockConfig+0x160>)
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	f7fe fcbd 	bl	8002764 <HAL_InitTick>
  return HAL_OK;
 8003dea:	2000      	movs	r0, #0
}
 8003dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003df0:	2001      	movs	r0, #1
}
 8003df2:	4770      	bx	lr
      return HAL_ERROR;
 8003df4:	2001      	movs	r0, #1
 8003df6:	e7f9      	b.n	8003dec <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8003df8:	2001      	movs	r0, #1
 8003dfa:	e7f7      	b.n	8003dec <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	e7f5      	b.n	8003dec <HAL_RCC_ClockConfig+0x13c>
 8003e00:	40023c00 	.word	0x40023c00
 8003e04:	40023800 	.word	0x40023800
 8003e08:	0800a668 	.word	0x0800a668
 8003e0c:	20000004 	.word	0x20000004
 8003e10:	2000000c 	.word	0x2000000c

08003e14 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e14:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003e1c:	4a03      	ldr	r2, [pc, #12]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e1e:	5cd3      	ldrb	r3, [r2, r3]
 8003e20:	4a03      	ldr	r2, [pc, #12]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e22:	6810      	ldr	r0, [r2, #0]
}
 8003e24:	40d8      	lsrs	r0, r3
 8003e26:	4770      	bx	lr
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	0800a678 	.word	0x0800a678
 8003e30:	20000004 	.word	0x20000004

08003e34 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003e3c:	4a03      	ldr	r2, [pc, #12]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003e3e:	5cd3      	ldrb	r3, [r2, r3]
 8003e40:	4a03      	ldr	r2, [pc, #12]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003e42:	6810      	ldr	r0, [r2, #0]
}
 8003e44:	40d8      	lsrs	r0, r3
 8003e46:	4770      	bx	lr
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	0800a678 	.word	0x0800a678
 8003e50:	20000004 	.word	0x20000004

08003e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	4681      	mov	r9, r0
 8003e5c:	460f      	mov	r7, r1
 8003e5e:	4616      	mov	r6, r2
 8003e60:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e62:	f7fe fccb 	bl	80027fc <HAL_GetTick>
 8003e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e68:	442b      	add	r3, r5
 8003e6a:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003e6e:	f7fe fcc5 	bl	80027fc <HAL_GetTick>
 8003e72:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e74:	4b2d      	ldr	r3, [pc, #180]	; (8003f2c <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003e7c:	fb08 f303 	mul.w	r3, r8, r3
 8003e80:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e82:	f8d9 3000 	ldr.w	r3, [r9]
 8003e86:	689c      	ldr	r4, [r3, #8]
 8003e88:	ea37 0204 	bics.w	r2, r7, r4
 8003e8c:	bf0c      	ite	eq
 8003e8e:	f04f 0c01 	moveq.w	ip, #1
 8003e92:	f04f 0c00 	movne.w	ip, #0
 8003e96:	45b4      	cmp	ip, r6
 8003e98:	d044      	beq.n	8003f24 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003e9e:	d0f2      	beq.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ea0:	f7fe fcac 	bl	80027fc <HAL_GetTick>
 8003ea4:	eba0 000a 	sub.w	r0, r0, sl
 8003ea8:	4540      	cmp	r0, r8
 8003eaa:	d207      	bcs.n	8003ebc <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003eac:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf08      	it	eq
 8003eb2:	4698      	moveq	r8, r3
      }
      count--;
 8003eb4:	9b01      	ldr	r3, [sp, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	e7e2      	b.n	8003e82 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ebc:	f8d9 2000 	ldr.w	r2, [r9]
 8003ec0:	6853      	ldr	r3, [r2, #4]
 8003ec2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003ec6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed0:	d00c      	beq.n	8003eec <SPI_WaitFlagStateUntilTimeout+0x98>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ed2:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8003ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eda:	d016      	beq.n	8003f0a <SPI_WaitFlagStateUntilTimeout+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 8003edc:	2301      	movs	r3, #1
 8003ede:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8003ee8:	2003      	movs	r0, #3
 8003eea:	e01c      	b.n	8003f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef4:	d002      	beq.n	8003efc <SPI_WaitFlagStateUntilTimeout+0xa8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efa:	d1ea      	bne.n	8003ed2 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8003efc:	f8d9 2000 	ldr.w	r2, [r9]
 8003f00:	6813      	ldr	r3, [r2, #0]
 8003f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e7e3      	b.n	8003ed2 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8003f0a:	f8d9 2000 	ldr.w	r2, [r9]
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	f8d9 2000 	ldr.w	r2, [r9]
 8003f1a:	6813      	ldr	r3, [r2, #0]
 8003f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e7db      	b.n	8003edc <SPI_WaitFlagStateUntilTimeout+0x88>
    }
  }

  return HAL_OK;
 8003f24:	2000      	movs	r0, #0
}
 8003f26:	b002      	add	sp, #8
 8003f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2c:	20000004 	.word	0x20000004

08003f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b510      	push	{r4, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f36:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <SPI_EndRxTxTransaction+0x60>)
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <SPI_EndRxTxTransaction+0x64>)
 8003f3c:	fba3 3000 	umull	r3, r0, r3, r0
 8003f40:	0d40      	lsrs	r0, r0, #21
 8003f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f46:	fb03 f000 	mul.w	r0, r3, r0
 8003f4a:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f4c:	6863      	ldr	r3, [r4, #4]
 8003f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f52:	d00b      	beq.n	8003f6c <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f54:	9b03      	ldr	r3, [sp, #12]
 8003f56:	b1bb      	cbz	r3, 8003f88 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8003f58:	9b03      	ldr	r3, [sp, #12]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f66:	d1f5      	bne.n	8003f54 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8003f68:	2000      	movs	r0, #0
 8003f6a:	e00e      	b.n	8003f8a <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6c:	9200      	str	r2, [sp, #0]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	2200      	movs	r2, #0
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	4620      	mov	r0, r4
 8003f76:	f7ff ff6d 	bl	8003e54 <SPI_WaitFlagStateUntilTimeout>
 8003f7a:	b130      	cbz	r0, 8003f8a <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f7e:	f043 0320 	orr.w	r3, r3, #32
 8003f82:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f84:	2003      	movs	r0, #3
 8003f86:	e000      	b.n	8003f8a <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8003f88:	2000      	movs	r0, #0
}
 8003f8a:	b004      	add	sp, #16
 8003f8c:	bd10      	pop	{r4, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000004 	.word	0x20000004
 8003f94:	165e9f81 	.word	0x165e9f81

08003f98 <SPI_EndRxTransaction>:
{
 8003f98:	b510      	push	{r4, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa0:	6841      	ldr	r1, [r0, #4]
 8003fa2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8003fa6:	d009      	beq.n	8003fbc <SPI_EndRxTransaction+0x24>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa8:	9200      	str	r2, [sp, #0]
 8003faa:	2200      	movs	r2, #0
 8003fac:	2101      	movs	r1, #1
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f7ff ff50 	bl	8003e54 <SPI_WaitFlagStateUntilTimeout>
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d131      	bne.n	800401c <SPI_EndRxTransaction+0x84>
}
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbc:	6881      	ldr	r1, [r0, #8]
 8003fbe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003fc2:	d002      	beq.n	8003fca <SPI_EndRxTransaction+0x32>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003fc8:	d10c      	bne.n	8003fe4 <SPI_EndRxTransaction+0x4c>
    __HAL_SPI_DISABLE(hspi);
 8003fca:	6820      	ldr	r0, [r4, #0]
 8003fcc:	6801      	ldr	r1, [r0, #0]
 8003fce:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003fd2:	6001      	str	r1, [r0, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fd4:	6861      	ldr	r1, [r4, #4]
 8003fd6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8003fda:	d1e5      	bne.n	8003fa8 <SPI_EndRxTransaction+0x10>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003fdc:	68a1      	ldr	r1, [r4, #8]
 8003fde:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003fe2:	d00d      	beq.n	8004000 <SPI_EndRxTransaction+0x68>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe4:	9200      	str	r2, [sp, #0]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	4620      	mov	r0, r4
 8003fec:	f7ff ff32 	bl	8003e54 <SPI_WaitFlagStateUntilTimeout>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d0e1      	beq.n	8003fb8 <SPI_EndRxTransaction+0x20>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ff6:	f043 0320 	orr.w	r3, r3, #32
 8003ffa:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ffc:	2003      	movs	r0, #3
 8003ffe:	e7db      	b.n	8003fb8 <SPI_EndRxTransaction+0x20>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004000:	9200      	str	r2, [sp, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	2101      	movs	r1, #1
 8004006:	4620      	mov	r0, r4
 8004008:	f7ff ff24 	bl	8003e54 <SPI_WaitFlagStateUntilTimeout>
 800400c:	2800      	cmp	r0, #0
 800400e:	d0d3      	beq.n	8003fb8 <SPI_EndRxTransaction+0x20>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004010:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004012:	f043 0320 	orr.w	r3, r3, #32
 8004016:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004018:	2003      	movs	r0, #3
 800401a:	e7cd      	b.n	8003fb8 <SPI_EndRxTransaction+0x20>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800401c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800401e:	f043 0320 	orr.w	r3, r3, #32
 8004022:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004024:	2003      	movs	r0, #3
 8004026:	e7c7      	b.n	8003fb8 <SPI_EndRxTransaction+0x20>

08004028 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004028:	2800      	cmp	r0, #0
 800402a:	d05a      	beq.n	80040e2 <HAL_SPI_Init+0xba>
{
 800402c:	b510      	push	{r4, lr}
 800402e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004030:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004032:	b933      	cbnz	r3, 8004042 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004034:	6843      	ldr	r3, [r0, #4]
 8004036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403a:	d005      	beq.n	8004048 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800403c:	2300      	movs	r3, #0
 800403e:	61c3      	str	r3, [r0, #28]
 8004040:	e002      	b.n	8004048 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004042:	2300      	movs	r3, #0
 8004044:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004046:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004048:	2300      	movs	r3, #0
 800404a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800404c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004050:	2b00      	cmp	r3, #0
 8004052:	d040      	beq.n	80040d6 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004054:	2302      	movs	r3, #2
 8004056:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	6813      	ldr	r3, [r2, #0]
 800405e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004062:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	6863      	ldr	r3, [r4, #4]
 8004068:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800406c:	68a1      	ldr	r1, [r4, #8]
 800406e:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004072:	430b      	orrs	r3, r1
 8004074:	68e1      	ldr	r1, [r4, #12]
 8004076:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 800407a:	430b      	orrs	r3, r1
 800407c:	6921      	ldr	r1, [r4, #16]
 800407e:	f001 0102 	and.w	r1, r1, #2
 8004082:	430b      	orrs	r3, r1
 8004084:	6961      	ldr	r1, [r4, #20]
 8004086:	f001 0101 	and.w	r1, r1, #1
 800408a:	430b      	orrs	r3, r1
 800408c:	69a1      	ldr	r1, [r4, #24]
 800408e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004092:	430b      	orrs	r3, r1
 8004094:	69e1      	ldr	r1, [r4, #28]
 8004096:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800409a:	430b      	orrs	r3, r1
 800409c:	6a21      	ldr	r1, [r4, #32]
 800409e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80040a2:	430b      	orrs	r3, r1
 80040a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80040a6:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040ae:	6821      	ldr	r1, [r4, #0]
 80040b0:	8b63      	ldrh	r3, [r4, #26]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80040b8:	f002 0210 	and.w	r2, r2, #16
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040c0:	6822      	ldr	r2, [r4, #0]
 80040c2:	69d3      	ldr	r3, [r2, #28]
 80040c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040c8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ca:	2000      	movs	r0, #0
 80040cc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80040d4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80040d6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80040da:	4620      	mov	r0, r4
 80040dc:	f7fe f974 	bl	80023c8 <HAL_SPI_MspInit>
 80040e0:	e7b8      	b.n	8004054 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80040e2:	2001      	movs	r0, #1
}
 80040e4:	4770      	bx	lr

080040e6 <HAL_SPI_Transmit>:
{
 80040e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80040ee:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	f000 80ce 	beq.w	8004294 <HAL_SPI_Transmit+0x1ae>
 80040f8:	4604      	mov	r4, r0
 80040fa:	4688      	mov	r8, r1
 80040fc:	4617      	mov	r7, r2
 80040fe:	2301      	movs	r3, #1
 8004100:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004104:	f7fe fb7a 	bl	80027fc <HAL_GetTick>
 8004108:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800410a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800410e:	b2c0      	uxtb	r0, r0
 8004110:	2801      	cmp	r0, #1
 8004112:	f040 80b1 	bne.w	8004278 <HAL_SPI_Transmit+0x192>
  if ((pData == NULL) || (Size == 0U))
 8004116:	f1b8 0f00 	cmp.w	r8, #0
 800411a:	f000 80ae 	beq.w	800427a <HAL_SPI_Transmit+0x194>
 800411e:	2f00      	cmp	r7, #0
 8004120:	f000 80ab 	beq.w	800427a <HAL_SPI_Transmit+0x194>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004124:	2303      	movs	r3, #3
 8004126:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800412a:	2300      	movs	r3, #0
 800412c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800412e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004132:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004134:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004136:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004138:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800413a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800413c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800413e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004140:	68a3      	ldr	r3, [r4, #8]
 8004142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004146:	d035      	beq.n	80041b4 <HAL_SPI_Transmit+0xce>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004150:	d103      	bne.n	800415a <HAL_SPI_Transmit+0x74>
    __HAL_SPI_ENABLE(hspi);
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004158:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800415a:	68e3      	ldr	r3, [r4, #12]
 800415c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004160:	d033      	beq.n	80041ca <HAL_SPI_Transmit+0xe4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004162:	6863      	ldr	r3, [r4, #4]
 8004164:	b10b      	cbz	r3, 800416a <HAL_SPI_Transmit+0x84>
 8004166:	2f01      	cmp	r7, #1
 8004168:	d10a      	bne.n	8004180 <HAL_SPI_Transmit+0x9a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800416e:	7812      	ldrb	r2, [r2, #0]
 8004170:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004172:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004174:	3301      	adds	r3, #1
 8004176:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004178:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800417a:	3b01      	subs	r3, #1
 800417c:	b29b      	uxth	r3, r3
 800417e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004180:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d15f      	bne.n	8004248 <HAL_SPI_Transmit+0x162>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004188:	4632      	mov	r2, r6
 800418a:	4629      	mov	r1, r5
 800418c:	4620      	mov	r0, r4
 800418e:	f7ff fecf 	bl	8003f30 <SPI_EndRxTxTransaction>
 8004192:	b108      	cbz	r0, 8004198 <HAL_SPI_Transmit+0xb2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004194:	2320      	movs	r3, #32
 8004196:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004198:	68a3      	ldr	r3, [r4, #8]
 800419a:	b933      	cbnz	r3, 80041aa <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	9201      	str	r2, [sp, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80041ac:	3800      	subs	r0, #0
 80041ae:	bf18      	it	ne
 80041b0:	2001      	movne	r0, #1
error:
 80041b2:	e062      	b.n	800427a <HAL_SPI_Transmit+0x194>
    __HAL_SPI_DISABLE(hspi);
 80041b4:	6822      	ldr	r2, [r4, #0]
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041bc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	6813      	ldr	r3, [r2, #0]
 80041c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	e7be      	b.n	8004148 <HAL_SPI_Transmit+0x62>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ca:	6863      	ldr	r3, [r4, #4]
 80041cc:	b10b      	cbz	r3, 80041d2 <HAL_SPI_Transmit+0xec>
 80041ce:	2f01      	cmp	r7, #1
 80041d0:	d10a      	bne.n	80041e8 <HAL_SPI_Transmit+0x102>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80041d6:	8812      	ldrh	r2, [r2, #0]
 80041d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041dc:	3302      	adds	r3, #2
 80041de:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80041e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80041e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	b963      	cbnz	r3, 8004208 <HAL_SPI_Transmit+0x122>
 80041ee:	e7cb      	b.n	8004188 <HAL_SPI_Transmit+0xa2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041f0:	f7fe fb04 	bl	80027fc <HAL_GetTick>
 80041f4:	1b80      	subs	r0, r0, r6
 80041f6:	42a8      	cmp	r0, r5
 80041f8:	d316      	bcc.n	8004228 <HAL_SPI_Transmit+0x142>
 80041fa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80041fe:	d145      	bne.n	800428c <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 8004200:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0bf      	beq.n	8004188 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	f012 0f02 	tst.w	r2, #2
 8004210:	d0ee      	beq.n	80041f0 <HAL_SPI_Transmit+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004212:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004214:	8812      	ldrh	r2, [r2, #0]
 8004216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004218:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800421a:	3302      	adds	r3, #2
 800421c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800421e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004220:	3b01      	subs	r3, #1
 8004222:	b29b      	uxth	r3, r3
 8004224:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004226:	e7eb      	b.n	8004200 <HAL_SPI_Transmit+0x11a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004228:	2d00      	cmp	r5, #0
 800422a:	d1e9      	bne.n	8004200 <HAL_SPI_Transmit+0x11a>
          errorcode = HAL_TIMEOUT;
 800422c:	2003      	movs	r0, #3
 800422e:	e024      	b.n	800427a <HAL_SPI_Transmit+0x194>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004230:	f7fe fae4 	bl	80027fc <HAL_GetTick>
 8004234:	1b80      	subs	r0, r0, r6
 8004236:	42a8      	cmp	r0, r5
 8004238:	d31a      	bcc.n	8004270 <HAL_SPI_Transmit+0x18a>
 800423a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800423e:	d127      	bne.n	8004290 <HAL_SPI_Transmit+0x1aa>
    while (hspi->TxXferCount > 0U)
 8004240:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8004242:	b289      	uxth	r1, r1
 8004244:	2900      	cmp	r1, #0
 8004246:	d09f      	beq.n	8004188 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	f012 0f02 	tst.w	r2, #2
 8004250:	d0ee      	beq.n	8004230 <HAL_SPI_Transmit+0x14a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004252:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004254:	7812      	ldrb	r2, [r2, #0]
 8004256:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004258:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800425a:	3301      	adds	r3, #1
 800425c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800425e:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8004262:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004266:	fa1f fc8c 	uxth.w	ip, ip
 800426a:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 800426e:	e7e7      	b.n	8004240 <HAL_SPI_Transmit+0x15a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004270:	2d00      	cmp	r5, #0
 8004272:	d1e5      	bne.n	8004240 <HAL_SPI_Transmit+0x15a>
          errorcode = HAL_TIMEOUT;
 8004274:	2003      	movs	r0, #3
 8004276:	e000      	b.n	800427a <HAL_SPI_Transmit+0x194>
    errorcode = HAL_BUSY;
 8004278:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800427a:	2301      	movs	r3, #1
 800427c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004280:	2300      	movs	r3, #0
 8004282:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004286:	b002      	add	sp, #8
 8004288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 800428c:	2003      	movs	r0, #3
 800428e:	e7f4      	b.n	800427a <HAL_SPI_Transmit+0x194>
          errorcode = HAL_TIMEOUT;
 8004290:	2003      	movs	r0, #3
 8004292:	e7f2      	b.n	800427a <HAL_SPI_Transmit+0x194>
  __HAL_LOCK(hspi);
 8004294:	2002      	movs	r0, #2
 8004296:	e7f6      	b.n	8004286 <HAL_SPI_Transmit+0x1a0>

08004298 <HAL_SPI_TransmitReceive>:
{
 8004298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800429c:	b083      	sub	sp, #12
 800429e:	461f      	mov	r7, r3
 80042a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80042a2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	f000 810e 	beq.w	80044c8 <HAL_SPI_TransmitReceive+0x230>
 80042ac:	4604      	mov	r4, r0
 80042ae:	4688      	mov	r8, r1
 80042b0:	4691      	mov	r9, r2
 80042b2:	2301      	movs	r3, #1
 80042b4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80042b8:	f7fe faa0 	bl	80027fc <HAL_GetTick>
 80042bc:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80042be:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80042c2:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042c4:	2801      	cmp	r0, #1
 80042c6:	d00b      	beq.n	80042e0 <HAL_SPI_TransmitReceive+0x48>
 80042c8:	6863      	ldr	r3, [r4, #4]
 80042ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ce:	f040 80e3 	bne.w	8004498 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f040 80e9 	bne.w	80044ac <HAL_SPI_TransmitReceive+0x214>
 80042da:	2804      	cmp	r0, #4
 80042dc:	f040 80e8 	bne.w	80044b0 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042e0:	f1b8 0f00 	cmp.w	r8, #0
 80042e4:	f000 80e6 	beq.w	80044b4 <HAL_SPI_TransmitReceive+0x21c>
 80042e8:	f1b9 0f00 	cmp.w	r9, #0
 80042ec:	f000 80e4 	beq.w	80044b8 <HAL_SPI_TransmitReceive+0x220>
 80042f0:	2f00      	cmp	r7, #0
 80042f2:	f000 80e3 	beq.w	80044bc <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042f6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042fe:	bf1c      	itt	ne
 8004300:	2305      	movne	r3, #5
 8004302:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004306:	2300      	movs	r3, #0
 8004308:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800430a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800430e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004310:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004312:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004316:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004318:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800431a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800431c:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004326:	d103      	bne.n	8004330 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800432e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004330:	68e3      	ldr	r3, [r4, #12]
 8004332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004336:	d012      	beq.n	800435e <HAL_SPI_TransmitReceive+0xc6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004338:	6863      	ldr	r3, [r4, #4]
 800433a:	b10b      	cbz	r3, 8004340 <HAL_SPI_TransmitReceive+0xa8>
 800433c:	2f01      	cmp	r7, #1
 800433e:	d10a      	bne.n	8004356 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004348:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800434a:	3301      	adds	r3, #1
 800434c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800434e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004350:	3b01      	subs	r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004356:	2701      	movs	r7, #1
        txallowed = 0U;
 8004358:	f04f 0800 	mov.w	r8, #0
 800435c:	e067      	b.n	800442e <HAL_SPI_TransmitReceive+0x196>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	b10b      	cbz	r3, 8004366 <HAL_SPI_TransmitReceive+0xce>
 8004362:	2f01      	cmp	r7, #1
 8004364:	d10a      	bne.n	800437c <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800436a:	8812      	ldrh	r2, [r2, #0]
 800436c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800436e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004370:	3302      	adds	r3, #2
 8004372:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004374:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004376:	3b01      	subs	r3, #1
 8004378:	b29b      	uxth	r3, r3
 800437a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800437c:	2701      	movs	r7, #1
        txallowed = 0U;
 800437e:	f04f 0800 	mov.w	r8, #0
 8004382:	e01b      	b.n	80043bc <HAL_SPI_TransmitReceive+0x124>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	6893      	ldr	r3, [r2, #8]
 8004388:	f013 0301 	ands.w	r3, r3, #1
 800438c:	d00d      	beq.n	80043aa <HAL_SPI_TransmitReceive+0x112>
 800438e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004390:	b289      	uxth	r1, r1
 8004392:	b151      	cbz	r1, 80043aa <HAL_SPI_TransmitReceive+0x112>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004394:	68d1      	ldr	r1, [r2, #12]
 8004396:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004398:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800439a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800439c:	3202      	adds	r2, #2
 800439e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80043a0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80043a2:	3a01      	subs	r2, #1
 80043a4:	b292      	uxth	r2, r2
 80043a6:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 80043a8:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043aa:	f7fe fa27 	bl	80027fc <HAL_GetTick>
 80043ae:	1b80      	subs	r0, r0, r6
 80043b0:	42a8      	cmp	r0, r5
 80043b2:	d303      	bcc.n	80043bc <HAL_SPI_TransmitReceive+0x124>
 80043b4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80043b8:	f040 8082 	bne.w	80044c0 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80043be:	b29b      	uxth	r3, r3
 80043c0:	b91b      	cbnz	r3, 80043ca <HAL_SPI_TransmitReceive+0x132>
 80043c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d052      	beq.n	8004470 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	f012 0f02 	tst.w	r2, #2
 80043d2:	d0d7      	beq.n	8004384 <HAL_SPI_TransmitReceive+0xec>
 80043d4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80043d6:	b292      	uxth	r2, r2
 80043d8:	2a00      	cmp	r2, #0
 80043da:	d0d3      	beq.n	8004384 <HAL_SPI_TransmitReceive+0xec>
 80043dc:	2f00      	cmp	r7, #0
 80043de:	d0d1      	beq.n	8004384 <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80043e2:	8812      	ldrh	r2, [r2, #0]
 80043e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80043e8:	3302      	adds	r3, #2
 80043ea:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80043ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80043f4:	4647      	mov	r7, r8
 80043f6:	e7c5      	b.n	8004384 <HAL_SPI_TransmitReceive+0xec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043f8:	6822      	ldr	r2, [r4, #0]
 80043fa:	6893      	ldr	r3, [r2, #8]
 80043fc:	f013 0301 	ands.w	r3, r3, #1
 8004400:	d00d      	beq.n	800441e <HAL_SPI_TransmitReceive+0x186>
 8004402:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004404:	b289      	uxth	r1, r1
 8004406:	b151      	cbz	r1, 800441e <HAL_SPI_TransmitReceive+0x186>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004408:	68d1      	ldr	r1, [r2, #12]
 800440a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800440c:	7011      	strb	r1, [r2, #0]
        hspi->pRxBuffPtr++;
 800440e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004410:	3201      	adds	r2, #1
 8004412:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004414:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004416:	3a01      	subs	r2, #1
 8004418:	b292      	uxth	r2, r2
 800441a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 800441c:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800441e:	f7fe f9ed 	bl	80027fc <HAL_GetTick>
 8004422:	1b83      	subs	r3, r0, r6
 8004424:	42ab      	cmp	r3, r5
 8004426:	d31f      	bcc.n	8004468 <HAL_SPI_TransmitReceive+0x1d0>
 8004428:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800442c:	d14a      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x22c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800442e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004430:	b29b      	uxth	r3, r3
 8004432:	b913      	cbnz	r3, 800443a <HAL_SPI_TransmitReceive+0x1a2>
 8004434:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004436:	b29b      	uxth	r3, r3
 8004438:	b1d3      	cbz	r3, 8004470 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	f012 0f02 	tst.w	r2, #2
 8004442:	d0d9      	beq.n	80043f8 <HAL_SPI_TransmitReceive+0x160>
 8004444:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004446:	b292      	uxth	r2, r2
 8004448:	2a00      	cmp	r2, #0
 800444a:	d0d5      	beq.n	80043f8 <HAL_SPI_TransmitReceive+0x160>
 800444c:	2f01      	cmp	r7, #1
 800444e:	d1d3      	bne.n	80043f8 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004450:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004452:	7812      	ldrb	r2, [r2, #0]
 8004454:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004456:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004458:	3301      	adds	r3, #1
 800445a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800445c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800445e:	3b01      	subs	r3, #1
 8004460:	b29b      	uxth	r3, r3
 8004462:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004464:	4647      	mov	r7, r8
 8004466:	e7c7      	b.n	80043f8 <HAL_SPI_TransmitReceive+0x160>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004468:	2d00      	cmp	r5, #0
 800446a:	d1e0      	bne.n	800442e <HAL_SPI_TransmitReceive+0x196>
        errorcode = HAL_TIMEOUT;
 800446c:	2003      	movs	r0, #3
 800446e:	e014      	b.n	800449a <HAL_SPI_TransmitReceive+0x202>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004470:	4632      	mov	r2, r6
 8004472:	4629      	mov	r1, r5
 8004474:	4620      	mov	r0, r4
 8004476:	f7ff fd5b 	bl	8003f30 <SPI_EndRxTxTransaction>
 800447a:	b948      	cbnz	r0, 8004490 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800447c:	68a3      	ldr	r3, [r4, #8]
 800447e:	b963      	cbnz	r3, 800449a <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	9201      	str	r2, [sp, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	9b01      	ldr	r3, [sp, #4]
 800448e:	e004      	b.n	800449a <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004490:	2320      	movs	r3, #32
 8004492:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004494:	2001      	movs	r0, #1
    goto error;
 8004496:	e000      	b.n	800449a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8004498:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800449a:	2301      	movs	r3, #1
 800449c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044a0:	2300      	movs	r3, #0
 80044a2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80044a6:	b003      	add	sp, #12
 80044a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80044ac:	2002      	movs	r0, #2
 80044ae:	e7f4      	b.n	800449a <HAL_SPI_TransmitReceive+0x202>
 80044b0:	2002      	movs	r0, #2
 80044b2:	e7f2      	b.n	800449a <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 80044b4:	2001      	movs	r0, #1
 80044b6:	e7f0      	b.n	800449a <HAL_SPI_TransmitReceive+0x202>
 80044b8:	2001      	movs	r0, #1
 80044ba:	e7ee      	b.n	800449a <HAL_SPI_TransmitReceive+0x202>
 80044bc:	2001      	movs	r0, #1
 80044be:	e7ec      	b.n	800449a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80044c0:	2003      	movs	r0, #3
 80044c2:	e7ea      	b.n	800449a <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80044c4:	2003      	movs	r0, #3
 80044c6:	e7e8      	b.n	800449a <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 80044c8:	2002      	movs	r0, #2
 80044ca:	e7ec      	b.n	80044a6 <HAL_SPI_TransmitReceive+0x20e>

080044cc <HAL_SPI_Receive>:
{
 80044cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	4604      	mov	r4, r0
 80044d4:	4688      	mov	r8, r1
 80044d6:	4617      	mov	r7, r2
 80044d8:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044da:	6843      	ldr	r3, [r0, #4]
 80044dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044e0:	d045      	beq.n	800456e <HAL_SPI_Receive+0xa2>
  __HAL_LOCK(hspi);
 80044e2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	f000 80b2 	beq.w	8004650 <HAL_SPI_Receive+0x184>
 80044ec:	2301      	movs	r3, #1
 80044ee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80044f2:	f7fe f983 	bl	80027fc <HAL_GetTick>
 80044f6:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80044f8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80044fc:	b2c0      	uxtb	r0, r0
 80044fe:	2801      	cmp	r0, #1
 8004500:	f040 8098 	bne.w	8004634 <HAL_SPI_Receive+0x168>
  if ((pData == NULL) || (Size == 0U))
 8004504:	f1b8 0f00 	cmp.w	r8, #0
 8004508:	f000 8095 	beq.w	8004636 <HAL_SPI_Receive+0x16a>
 800450c:	2f00      	cmp	r7, #0
 800450e:	f000 8092 	beq.w	8004636 <HAL_SPI_Receive+0x16a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004512:	2304      	movs	r3, #4
 8004514:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004518:	2300      	movs	r3, #0
 800451a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800451c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004520:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004522:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004524:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004526:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004528:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800452a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800452c:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800452e:	68a3      	ldr	r3, [r4, #8]
 8004530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004534:	d027      	beq.n	8004586 <HAL_SPI_Receive+0xba>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800453e:	d103      	bne.n	8004548 <HAL_SPI_Receive+0x7c>
    __HAL_SPI_ENABLE(hspi);
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004546:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004548:	68e3      	ldr	r3, [r4, #12]
 800454a:	b33b      	cbz	r3, 800459c <HAL_SPI_Receive+0xd0>
    while (hspi->RxXferCount > 0U)
 800454c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d157      	bne.n	8004604 <HAL_SPI_Receive+0x138>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004554:	4632      	mov	r2, r6
 8004556:	4629      	mov	r1, r5
 8004558:	4620      	mov	r0, r4
 800455a:	f7ff fd1d 	bl	8003f98 <SPI_EndRxTransaction>
 800455e:	b108      	cbz	r0, 8004564 <HAL_SPI_Receive+0x98>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004560:	2320      	movs	r3, #32
 8004562:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004564:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004566:	3800      	subs	r0, #0
 8004568:	bf18      	it	ne
 800456a:	2001      	movne	r0, #1
error :
 800456c:	e063      	b.n	8004636 <HAL_SPI_Receive+0x16a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800456e:	6883      	ldr	r3, [r0, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1b6      	bne.n	80044e2 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004574:	2304      	movs	r3, #4
 8004576:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800457a:	9500      	str	r5, [sp, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	460a      	mov	r2, r1
 8004580:	f7ff fe8a 	bl	8004298 <HAL_SPI_TransmitReceive>
 8004584:	e05d      	b.n	8004642 <HAL_SPI_Receive+0x176>
    __HAL_SPI_DISABLE(hspi);
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	6813      	ldr	r3, [r2, #0]
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	6813      	ldr	r3, [r2, #0]
 8004594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e7cc      	b.n	8004536 <HAL_SPI_Receive+0x6a>
    while (hspi->RxXferCount > 0U)
 800459c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800459e:	b29b      	uxth	r3, r3
 80045a0:	b963      	cbnz	r3, 80045bc <HAL_SPI_Receive+0xf0>
 80045a2:	e7d7      	b.n	8004554 <HAL_SPI_Receive+0x88>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a4:	f7fe f92a 	bl	80027fc <HAL_GetTick>
 80045a8:	1b80      	subs	r0, r0, r6
 80045aa:	42a8      	cmp	r0, r5
 80045ac:	d31a      	bcc.n	80045e4 <HAL_SPI_Receive+0x118>
 80045ae:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80045b2:	d149      	bne.n	8004648 <HAL_SPI_Receive+0x17c>
    while (hspi->RxXferCount > 0U)
 80045b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0cb      	beq.n	8004554 <HAL_SPI_Receive+0x88>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	f012 0f01 	tst.w	r2, #1
 80045c4:	d0ee      	beq.n	80045a4 <HAL_SPI_Receive+0xd8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045c8:	7b1b      	ldrb	r3, [r3, #12]
 80045ca:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045ce:	3301      	adds	r3, #1
 80045d0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80045d2:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 80045d6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80045da:	fa1f fc8c 	uxth.w	ip, ip
 80045de:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 80045e2:	e7e7      	b.n	80045b4 <HAL_SPI_Receive+0xe8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e4:	2d00      	cmp	r5, #0
 80045e6:	d1e5      	bne.n	80045b4 <HAL_SPI_Receive+0xe8>
          errorcode = HAL_TIMEOUT;
 80045e8:	2003      	movs	r0, #3
 80045ea:	e024      	b.n	8004636 <HAL_SPI_Receive+0x16a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ec:	f7fe f906 	bl	80027fc <HAL_GetTick>
 80045f0:	1b80      	subs	r0, r0, r6
 80045f2:	42a8      	cmp	r0, r5
 80045f4:	d31a      	bcc.n	800462c <HAL_SPI_Receive+0x160>
 80045f6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80045fa:	d127      	bne.n	800464c <HAL_SPI_Receive+0x180>
    while (hspi->RxXferCount > 0U)
 80045fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0a7      	beq.n	8004554 <HAL_SPI_Receive+0x88>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	f012 0f01 	tst.w	r2, #1
 800460c:	d0ee      	beq.n	80045ec <HAL_SPI_Receive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004612:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004616:	3302      	adds	r3, #2
 8004618:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800461a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 800461e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004622:	fa1f fc8c 	uxth.w	ip, ip
 8004626:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800462a:	e7e7      	b.n	80045fc <HAL_SPI_Receive+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800462c:	2d00      	cmp	r5, #0
 800462e:	d1e5      	bne.n	80045fc <HAL_SPI_Receive+0x130>
          errorcode = HAL_TIMEOUT;
 8004630:	2003      	movs	r0, #3
 8004632:	e000      	b.n	8004636 <HAL_SPI_Receive+0x16a>
    errorcode = HAL_BUSY;
 8004634:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004636:	2301      	movs	r3, #1
 8004638:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800463c:	2300      	movs	r3, #0
 800463e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004642:	b002      	add	sp, #8
 8004644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 8004648:	2003      	movs	r0, #3
 800464a:	e7f4      	b.n	8004636 <HAL_SPI_Receive+0x16a>
          errorcode = HAL_TIMEOUT;
 800464c:	2003      	movs	r0, #3
 800464e:	e7f2      	b.n	8004636 <HAL_SPI_Receive+0x16a>
  __HAL_LOCK(hspi);
 8004650:	2002      	movs	r0, #2
 8004652:	e7f6      	b.n	8004642 <HAL_SPI_Receive+0x176>

08004654 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004654:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d12f      	bne.n	80046be <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465e:	2302      	movs	r3, #2
 8004660:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004664:	6802      	ldr	r2, [r0, #0]
 8004666:	68d3      	ldr	r3, [r2, #12]
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466e:	6803      	ldr	r3, [r0, #0]
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <HAL_TIM_Base_Start_IT+0x74>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d018      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x54>
 8004676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467a:	d015      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x54>
 800467c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004680:	4293      	cmp	r3, r2
 8004682:	d011      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x54>
 8004684:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004688:	4293      	cmp	r3, r2
 800468a:	d00d      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x54>
 800468c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004690:	4293      	cmp	r3, r2
 8004692:	d009      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x54>
 8004694:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004698:	4293      	cmp	r3, r2
 800469a:	d005      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a4:	2000      	movs	r0, #0
 80046a6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ae:	2a06      	cmp	r2, #6
 80046b0:	d007      	beq.n	80046c2 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	f042 0201 	orr.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80046ba:	2000      	movs	r0, #0
 80046bc:	4770      	bx	lr
    return HAL_ERROR;
 80046be:	2001      	movs	r0, #1
 80046c0:	4770      	bx	lr
  return HAL_OK;
 80046c2:	2000      	movs	r0, #0
}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40010000 	.word	0x40010000

080046cc <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046cc:	4770      	bx	lr

080046ce <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046d0:	4770      	bx	lr

080046d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046d4:	4770      	bx	lr

080046d6 <HAL_TIM_IRQHandler>:
{
 80046d6:	b510      	push	{r4, lr}
 80046d8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046da:	6803      	ldr	r3, [r0, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	f012 0f02 	tst.w	r2, #2
 80046e2:	d011      	beq.n	8004708 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	f012 0f02 	tst.w	r2, #2
 80046ea:	d00d      	beq.n	8004708 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046ec:	f06f 0202 	mvn.w	r2, #2
 80046f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046f2:	2301      	movs	r3, #1
 80046f4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046f6:	6803      	ldr	r3, [r0, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f013 0f03 	tst.w	r3, #3
 80046fe:	d070      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004700:	f7ff ffe6 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004704:	2300      	movs	r3, #0
 8004706:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	f012 0f04 	tst.w	r2, #4
 8004710:	d012      	beq.n	8004738 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	f012 0f04 	tst.w	r2, #4
 8004718:	d00e      	beq.n	8004738 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800471a:	f06f 0204 	mvn.w	r2, #4
 800471e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004720:	2302      	movs	r3, #2
 8004722:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f413 7f40 	tst.w	r3, #768	; 0x300
 800472c:	d05f      	beq.n	80047ee <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	4620      	mov	r0, r4
 8004730:	f7ff ffce 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004734:	2300      	movs	r3, #0
 8004736:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	f012 0f08 	tst.w	r2, #8
 8004740:	d012      	beq.n	8004768 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	f012 0f08 	tst.w	r2, #8
 8004748:	d00e      	beq.n	8004768 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800474a:	f06f 0208 	mvn.w	r2, #8
 800474e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004750:	2304      	movs	r3, #4
 8004752:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f013 0f03 	tst.w	r3, #3
 800475c:	d04e      	beq.n	80047fc <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800475e:	4620      	mov	r0, r4
 8004760:	f7ff ffb6 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004764:	2300      	movs	r3, #0
 8004766:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	f012 0f10 	tst.w	r2, #16
 8004770:	d012      	beq.n	8004798 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	f012 0f10 	tst.w	r2, #16
 8004778:	d00e      	beq.n	8004798 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800477a:	f06f 0210 	mvn.w	r2, #16
 800477e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004780:	2308      	movs	r3, #8
 8004782:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f413 7f40 	tst.w	r3, #768	; 0x300
 800478c:	d03d      	beq.n	800480a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	4620      	mov	r0, r4
 8004790:	f7ff ff9e 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004794:	2300      	movs	r3, #0
 8004796:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	f012 0f01 	tst.w	r2, #1
 80047a0:	d003      	beq.n	80047aa <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	f012 0f01 	tst.w	r2, #1
 80047a8:	d136      	bne.n	8004818 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047b2:	d003      	beq.n	80047bc <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047ba:	d134      	bne.n	8004826 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80047cc:	d132      	bne.n	8004834 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	f012 0f20 	tst.w	r2, #32
 80047d6:	d003      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	f012 0f20 	tst.w	r2, #32
 80047de:	d130      	bne.n	8004842 <HAL_TIM_IRQHandler+0x16c>
}
 80047e0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	f7ff ff74 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e6:	4620      	mov	r0, r4
 80047e8:	f7ff ff73 	bl	80046d2 <HAL_TIM_PWM_PulseFinishedCallback>
 80047ec:	e78a      	b.n	8004704 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff ff6d 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	4620      	mov	r0, r4
 80047f6:	f7ff ff6c 	bl	80046d2 <HAL_TIM_PWM_PulseFinishedCallback>
 80047fa:	e79b      	b.n	8004734 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fc:	4620      	mov	r0, r4
 80047fe:	f7ff ff66 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004802:	4620      	mov	r0, r4
 8004804:	f7ff ff65 	bl	80046d2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004808:	e7ac      	b.n	8004764 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	4620      	mov	r0, r4
 800480c:	f7ff ff5f 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	4620      	mov	r0, r4
 8004812:	f7ff ff5e 	bl	80046d2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004816:	e7bd      	b.n	8004794 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004818:	f06f 0201 	mvn.w	r2, #1
 800481c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800481e:	4620      	mov	r0, r4
 8004820:	f7ff ff54 	bl	80046cc <HAL_TIM_PeriodElapsedCallback>
 8004824:	e7c1      	b.n	80047aa <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004826:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800482a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800482c:	4620      	mov	r0, r4
 800482e:	f000 f99e 	bl	8004b6e <HAL_TIMEx_BreakCallback>
 8004832:	e7c3      	b.n	80047bc <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004834:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004838:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800483a:	4620      	mov	r0, r4
 800483c:	f7ff ff4a 	bl	80046d4 <HAL_TIM_TriggerCallback>
 8004840:	e7c5      	b.n	80047ce <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004842:	f06f 0220 	mvn.w	r2, #32
 8004846:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004848:	4620      	mov	r0, r4
 800484a:	f000 f98f 	bl	8004b6c <HAL_TIMEx_CommutCallback>
}
 800484e:	e7c7      	b.n	80047e0 <HAL_TIM_IRQHandler+0x10a>

08004850 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004850:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004852:	4a30      	ldr	r2, [pc, #192]	; (8004914 <TIM_Base_SetConfig+0xc4>)
 8004854:	4290      	cmp	r0, r2
 8004856:	d042      	beq.n	80048de <TIM_Base_SetConfig+0x8e>
 8004858:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800485c:	d021      	beq.n	80048a2 <TIM_Base_SetConfig+0x52>
 800485e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004862:	4290      	cmp	r0, r2
 8004864:	d031      	beq.n	80048ca <TIM_Base_SetConfig+0x7a>
 8004866:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800486a:	4290      	cmp	r0, r2
 800486c:	d04c      	beq.n	8004908 <TIM_Base_SetConfig+0xb8>
 800486e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004872:	4290      	cmp	r0, r2
 8004874:	d02e      	beq.n	80048d4 <TIM_Base_SetConfig+0x84>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004876:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800487a:	4290      	cmp	r0, r2
 800487c:	d015      	beq.n	80048aa <TIM_Base_SetConfig+0x5a>
 800487e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004882:	4290      	cmp	r0, r2
 8004884:	d011      	beq.n	80048aa <TIM_Base_SetConfig+0x5a>
 8004886:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800488a:	4290      	cmp	r0, r2
 800488c:	d00d      	beq.n	80048aa <TIM_Base_SetConfig+0x5a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800488e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004892:	694a      	ldr	r2, [r1, #20]
 8004894:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004896:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004898:	688b      	ldr	r3, [r1, #8]
 800489a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800489c:	680b      	ldr	r3, [r1, #0]
 800489e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a0:	e010      	b.n	80048c4 <TIM_Base_SetConfig+0x74>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048a6:	684a      	ldr	r2, [r1, #4]
 80048a8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80048aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ae:	68ca      	ldr	r2, [r1, #12]
 80048b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b6:	694a      	ldr	r2, [r1, #20]
 80048b8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80048ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048bc:	688b      	ldr	r3, [r1, #8]
 80048be:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048c0:	680b      	ldr	r3, [r1, #0]
 80048c2:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c4:	2301      	movs	r3, #1
 80048c6:	6143      	str	r3, [r0, #20]
}
 80048c8:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048ce:	684a      	ldr	r2, [r1, #4]
 80048d0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d2:	e7ea      	b.n	80048aa <TIM_Base_SetConfig+0x5a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048d8:	684a      	ldr	r2, [r1, #4]
 80048da:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048dc:	e7e5      	b.n	80048aa <TIM_Base_SetConfig+0x5a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048e2:	684a      	ldr	r2, [r1, #4]
 80048e4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ea:	68ca      	ldr	r2, [r1, #12]
 80048ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f2:	694a      	ldr	r2, [r1, #20]
 80048f4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80048f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f8:	688b      	ldr	r3, [r1, #8]
 80048fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048fc:	680b      	ldr	r3, [r1, #0]
 80048fe:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004900:	690a      	ldr	r2, [r1, #16]
 8004902:	4b04      	ldr	r3, [pc, #16]	; (8004914 <TIM_Base_SetConfig+0xc4>)
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
 8004906:	e7dd      	b.n	80048c4 <TIM_Base_SetConfig+0x74>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800490c:	684a      	ldr	r2, [r1, #4]
 800490e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004910:	e7cb      	b.n	80048aa <TIM_Base_SetConfig+0x5a>
 8004912:	bf00      	nop
 8004914:	40010000 	.word	0x40010000

08004918 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004918:	b340      	cbz	r0, 800496c <HAL_TIM_Base_Init+0x54>
{
 800491a:	b510      	push	{r4, lr}
 800491c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800491e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004922:	b1f3      	cbz	r3, 8004962 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	2302      	movs	r3, #2
 8004926:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492a:	4621      	mov	r1, r4
 800492c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004930:	f7ff ff8e 	bl	8004850 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004934:	2301      	movs	r3, #1
 8004936:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800493e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004942:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004946:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800494e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004952:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800495a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800495e:	2000      	movs	r0, #0
}
 8004960:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004962:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004966:	f7fd fdd3 	bl	8002510 <HAL_TIM_Base_MspInit>
 800496a:	e7db      	b.n	8004924 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800496c:	2001      	movs	r0, #1
}
 800496e:	4770      	bx	lr

08004970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004970:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004972:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004974:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004978:	430a      	orrs	r2, r1
 800497a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800497e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004982:	6082      	str	r2, [r0, #8]
}
 8004984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800498a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800498e:	2b01      	cmp	r3, #1
 8004990:	f000 80ae 	beq.w	8004af0 <HAL_TIM_ConfigClockSource+0x166>
{
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004998:	2301      	movs	r3, #1
 800499a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800499e:	2302      	movs	r3, #2
 80049a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80049a4:	6802      	ldr	r2, [r0, #0]
 80049a6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80049b0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80049b2:	680b      	ldr	r3, [r1, #0]
 80049b4:	2b60      	cmp	r3, #96	; 0x60
 80049b6:	d060      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0xf0>
 80049b8:	d83d      	bhi.n	8004a36 <HAL_TIM_ConfigClockSource+0xac>
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d079      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x128>
 80049be:	d91c      	bls.n	80049fa <HAL_TIM_ConfigClockSource+0x70>
 80049c0:	2b50      	cmp	r3, #80	; 0x50
 80049c2:	d136      	bne.n	8004a32 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c4:	6803      	ldr	r3, [r0, #0]
 80049c6:	6848      	ldr	r0, [r1, #4]
 80049c8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80049ca:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049cc:	6a1a      	ldr	r2, [r3, #32]
 80049ce:	f022 0201 	bic.w	r2, r2, #1
 80049d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049da:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049de:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80049e2:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80049e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e6:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80049ea:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80049f4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2000      	movs	r0, #0
}
 80049f8:	e012      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d002      	beq.n	8004a04 <HAL_TIM_ConfigClockSource+0x7a>
 80049fe:	d90b      	bls.n	8004a18 <HAL_TIM_ConfigClockSource+0x8e>
 8004a00:	2b30      	cmp	r3, #48	; 0x30
 8004a02:	d114      	bne.n	8004a2e <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a04:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004a06:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004a12:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2000      	movs	r0, #0
}
 8004a16:	e003      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004a18:	f033 0210 	bics.w	r2, r3, #16
 8004a1c:	d0f2      	beq.n	8004a04 <HAL_TIM_ConfigClockSource+0x7a>
 8004a1e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a26:	2300      	movs	r3, #0
 8004a28:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004a2c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004a2e:	2001      	movs	r0, #1
 8004a30:	e7f6      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x96>
 8004a32:	2001      	movs	r0, #1
 8004a34:	e7f4      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x96>
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	d055      	beq.n	8004ae8 <HAL_TIM_ConfigClockSource+0x15e>
 8004a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a40:	d10c      	bne.n	8004a5c <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8004a42:	68cb      	ldr	r3, [r1, #12]
 8004a44:	684a      	ldr	r2, [r1, #4]
 8004a46:	6889      	ldr	r1, [r1, #8]
 8004a48:	6800      	ldr	r0, [r0, #0]
 8004a4a:	f7ff ff91 	bl	8004970 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a4e:	6822      	ldr	r2, [r4, #0]
 8004a50:	6893      	ldr	r3, [r2, #8]
 8004a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a56:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a58:	2000      	movs	r0, #0
      break;
 8004a5a:	e7e1      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004a5c:	2b70      	cmp	r3, #112	; 0x70
 8004a5e:	d145      	bne.n	8004aec <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8004a60:	68cb      	ldr	r3, [r1, #12]
 8004a62:	684a      	ldr	r2, [r1, #4]
 8004a64:	6889      	ldr	r1, [r1, #8]
 8004a66:	6800      	ldr	r0, [r0, #0]
 8004a68:	f7ff ff82 	bl	8004970 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a6c:	6822      	ldr	r2, [r4, #0]
 8004a6e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004a74:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a76:	2000      	movs	r0, #0
      break;
 8004a78:	e7d2      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a7a:	6803      	ldr	r3, [r0, #0]
 8004a7c:	684d      	ldr	r5, [r1, #4]
 8004a7e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a80:	6a18      	ldr	r0, [r3, #32]
 8004a82:	f020 0010 	bic.w	r0, r0, #16
 8004a86:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a88:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004a8a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a8c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a90:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a98:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004a9c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a9e:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004aa2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aa8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004aac:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2000      	movs	r0, #0
}
 8004ab0:	e7b6      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	6803      	ldr	r3, [r0, #0]
 8004ab4:	6848      	ldr	r0, [r1, #4]
 8004ab6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004ab8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aba:	6a1a      	ldr	r2, [r3, #32]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004acc:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004ad0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad4:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ad6:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004ad8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ade:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004ae2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae4:	2000      	movs	r0, #0
}
 8004ae6:	e79b      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8004ae8:	2000      	movs	r0, #0
 8004aea:	e799      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004aec:	2001      	movs	r0, #1
 8004aee:	e797      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8004af0:	2002      	movs	r0, #2
}
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004af4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d033      	beq.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8004afc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004afe:	2301      	movs	r3, #1
 8004b00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	2302      	movs	r3, #2
 8004b06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b0a:	6804      	ldr	r4, [r0, #0]
 8004b0c:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b0e:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b14:	680d      	ldr	r5, [r1, #0]
 8004b16:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b18:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1a:	6803      	ldr	r3, [r0, #0]
 8004b1c:	4c12      	ldr	r4, [pc, #72]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8004b1e:	42a3      	cmp	r3, r4
 8004b20:	d012      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b26:	d00f      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004b28:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8004b2c:	42a3      	cmp	r3, r4
 8004b2e:	d00b      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004b30:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	d007      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004b38:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b3c:	42a3      	cmp	r3, r4
 8004b3e:	d003      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004b40:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	d104      	bne.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b4c:	6849      	ldr	r1, [r1, #4]
 8004b4e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004b5e:	4618      	mov	r0, r3
}
 8004b60:	bc30      	pop	{r4, r5}
 8004b62:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b64:	2002      	movs	r0, #2
}
 8004b66:	4770      	bx	lr
 8004b68:	40010000 	.word	0x40010000

08004b6c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b6c:	4770      	bx	lr

08004b6e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b6e:	4770      	bx	lr

08004b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b74:	6802      	ldr	r2, [r0, #0]
 8004b76:	6913      	ldr	r3, [r2, #16]
 8004b78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b7c:	68c1      	ldr	r1, [r0, #12]
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8004b82:	6801      	ldr	r1, [r0, #0]
 8004b84:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b86:	6883      	ldr	r3, [r0, #8]
 8004b88:	6900      	ldr	r0, [r0, #16]
 8004b8a:	4303      	orrs	r3, r0
 8004b8c:	6960      	ldr	r0, [r4, #20]
 8004b8e:	4303      	orrs	r3, r0
 8004b90:	69e0      	ldr	r0, [r4, #28]
 8004b92:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004b94:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8004b98:	f022 020c 	bic.w	r2, r2, #12
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	6953      	ldr	r3, [r2, #20]
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	69a1      	ldr	r1, [r4, #24]
 8004baa:	430b      	orrs	r3, r1
 8004bac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	4a2e      	ldr	r2, [pc, #184]	; (8004c6c <UART_SetConfig+0xfc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d006      	beq.n	8004bc4 <UART_SetConfig+0x54>
 8004bb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d002      	beq.n	8004bc4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bbe:	f7ff f929 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8004bc2:	e001      	b.n	8004bc8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc4:	f7ff f936 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bc8:	69e3      	ldr	r3, [r4, #28]
 8004bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bce:	d024      	beq.n	8004c1a <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	1803      	adds	r3, r0, r0
 8004bd4:	4149      	adcs	r1, r1
 8004bd6:	181b      	adds	r3, r3, r0
 8004bd8:	f141 0100 	adc.w	r1, r1, #0
 8004bdc:	00c9      	lsls	r1, r1, #3
 8004bde:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	1818      	adds	r0, r3, r0
 8004be6:	6863      	ldr	r3, [r4, #4]
 8004be8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004bec:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8004bf0:	f141 0100 	adc.w	r1, r1, #0
 8004bf4:	f7fc f810 	bl	8000c18 <__aeabi_uldivmod>
 8004bf8:	6821      	ldr	r1, [r4, #0]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <UART_SetConfig+0x100>)
 8004bfc:	fba2 4300 	umull	r4, r3, r2, r0
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2464      	movs	r4, #100	; 0x64
 8004c04:	fb04 0013 	mls	r0, r4, r3, r0
 8004c08:	0100      	lsls	r0, r0, #4
 8004c0a:	3032      	adds	r0, #50	; 0x32
 8004c0c:	fba2 2000 	umull	r2, r0, r2, r0
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8004c16:	6088      	str	r0, [r1, #8]
  }
}
 8004c18:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	1802      	adds	r2, r0, r0
 8004c1e:	eb43 0103 	adc.w	r1, r3, r3
 8004c22:	1812      	adds	r2, r2, r0
 8004c24:	f141 0100 	adc.w	r1, r1, #0
 8004c28:	00c9      	lsls	r1, r1, #3
 8004c2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c2e:	00d2      	lsls	r2, r2, #3
 8004c30:	1810      	adds	r0, r2, r0
 8004c32:	f141 0100 	adc.w	r1, r1, #0
 8004c36:	6862      	ldr	r2, [r4, #4]
 8004c38:	1892      	adds	r2, r2, r2
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	f7fb ffec 	bl	8000c18 <__aeabi_uldivmod>
 8004c40:	4d0b      	ldr	r5, [pc, #44]	; (8004c70 <UART_SetConfig+0x100>)
 8004c42:	fba5 3200 	umull	r3, r2, r5, r0
 8004c46:	0951      	lsrs	r1, r2, #5
 8004c48:	2364      	movs	r3, #100	; 0x64
 8004c4a:	fb03 0311 	mls	r3, r3, r1, r0
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	3332      	adds	r3, #50	; 0x32
 8004c52:	fba5 2303 	umull	r2, r3, r5, r3
 8004c56:	6820      	ldr	r0, [r4, #0]
 8004c58:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8004c5c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c66:	4413      	add	r3, r2
 8004c68:	6083      	str	r3, [r0, #8]
 8004c6a:	e7d5      	b.n	8004c18 <UART_SetConfig+0xa8>
 8004c6c:	40011000 	.word	0x40011000
 8004c70:	51eb851f 	.word	0x51eb851f

08004c74 <UART_WaitOnFlagUntilTimeout>:
{
 8004c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c78:	4680      	mov	r8, r0
 8004c7a:	460e      	mov	r6, r1
 8004c7c:	4615      	mov	r5, r2
 8004c7e:	4699      	mov	r9, r3
 8004c80:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c82:	f8d8 2000 	ldr.w	r2, [r8]
 8004c86:	6814      	ldr	r4, [r2, #0]
 8004c88:	ea36 0304 	bics.w	r3, r6, r4
 8004c8c:	bf0c      	ite	eq
 8004c8e:	f04f 0c01 	moveq.w	ip, #1
 8004c92:	f04f 0c00 	movne.w	ip, #0
 8004c96:	45ac      	cmp	ip, r5
 8004c98:	d12d      	bne.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 8004c9a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8004c9e:	d0f2      	beq.n	8004c86 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ca0:	b12f      	cbz	r7, 8004cae <UART_WaitOnFlagUntilTimeout+0x3a>
 8004ca2:	f7fd fdab 	bl	80027fc <HAL_GetTick>
 8004ca6:	eba0 0009 	sub.w	r0, r0, r9
 8004caa:	42b8      	cmp	r0, r7
 8004cac:	d9e9      	bls.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cae:	f8d8 2000 	ldr.w	r2, [r8]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	f102 030c 	add.w	r3, r2, #12
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	320c      	adds	r2, #12
 8004cc0:	e842 3100 	strex	r1, r3, [r2]
 8004cc4:	2900      	cmp	r1, #0
 8004cc6:	d1f2      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc8:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	f102 0314 	add.w	r3, r2, #20
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	3214      	adds	r2, #20
 8004cda:	e842 3100 	strex	r1, r3, [r2]
 8004cde:	2900      	cmp	r1, #0
 8004ce0:	d1f2      	bne.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x54>
        huart->gState  = HAL_UART_STATE_READY;
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ce8:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004cec:	2300      	movs	r3, #0
 8004cee:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004cf2:	2003      	movs	r0, #3
 8004cf4:	e000      	b.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 8004cf6:	2000      	movs	r0, #0
}
 8004cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004cfc <HAL_UART_Init>:
  if (huart == NULL)
 8004cfc:	b358      	cbz	r0, 8004d56 <HAL_UART_Init+0x5a>
{
 8004cfe:	b510      	push	{r4, lr}
 8004d00:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004d02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d06:	b30b      	cbz	r3, 8004d4c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004d08:	2324      	movs	r3, #36	; 0x24
 8004d0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	68d3      	ldr	r3, [r2, #12]
 8004d12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d16:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f7ff ff29 	bl	8004b70 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1e:	6822      	ldr	r2, [r4, #0]
 8004d20:	6913      	ldr	r3, [r2, #16]
 8004d22:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004d26:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d28:	6822      	ldr	r2, [r4, #0]
 8004d2a:	6953      	ldr	r3, [r2, #20]
 8004d2c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004d30:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004d32:	6822      	ldr	r2, [r4, #0]
 8004d34:	68d3      	ldr	r3, [r2, #12]
 8004d36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d3a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d40:	2320      	movs	r3, #32
 8004d42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d46:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004d4a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004d4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004d50:	f7fd fbfc 	bl	800254c <HAL_UART_MspInit>
 8004d54:	e7d8      	b.n	8004d08 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004d56:	2001      	movs	r0, #1
}
 8004d58:	4770      	bx	lr

08004d5a <HAL_UART_Transmit>:
{
 8004d5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004d62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d15a      	bne.n	8004e22 <HAL_UART_Transmit+0xc8>
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	460d      	mov	r5, r1
 8004d70:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004d72:	2900      	cmp	r1, #0
 8004d74:	d059      	beq.n	8004e2a <HAL_UART_Transmit+0xd0>
 8004d76:	2a00      	cmp	r2, #0
 8004d78:	d059      	beq.n	8004e2e <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8004d7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d057      	beq.n	8004e32 <HAL_UART_Transmit+0xd8>
 8004d82:	2301      	movs	r3, #1
 8004d84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d8c:	2321      	movs	r3, #33	; 0x21
 8004d8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004d92:	f7fd fd33 	bl	80027fc <HAL_GetTick>
 8004d96:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004d98:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d9c:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da0:	68a3      	ldr	r3, [r4, #8]
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da6:	d00c      	beq.n	8004dc2 <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8004da8:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8004dac:	2300      	movs	r3, #0
 8004dae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004db2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	b343      	cbz	r3, 8004e0a <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004db8:	f04f 0900 	mov.w	r9, #0
 8004dbc:	f04f 0880 	mov.w	r8, #128	; 0x80
 8004dc0:	e014      	b.n	8004dec <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc2:	6923      	ldr	r3, [r4, #16]
 8004dc4:	b913      	cbnz	r3, 8004dcc <HAL_UART_Transmit+0x72>
      pdata16bits = (const uint16_t *) pData;
 8004dc6:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8004dc8:	2500      	movs	r5, #0
 8004dca:	e7ef      	b.n	8004dac <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8004dcc:	f04f 0a00 	mov.w	sl, #0
 8004dd0:	e7ec      	b.n	8004dac <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8004dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ddc:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004dde:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004de0:	3a01      	subs	r2, #1
 8004de2:	b292      	uxth	r2, r2
 8004de4:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004de6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	b173      	cbz	r3, 8004e0a <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dec:	9600      	str	r6, [sp, #0]
 8004dee:	463b      	mov	r3, r7
 8004df0:	464a      	mov	r2, r9
 8004df2:	4641      	mov	r1, r8
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7ff ff3d 	bl	8004c74 <UART_WaitOnFlagUntilTimeout>
 8004dfa:	b9e0      	cbnz	r0, 8004e36 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8004dfc:	2d00      	cmp	r5, #0
 8004dfe:	d0e8      	beq.n	8004dd2 <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004e06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e08:	e7e9      	b.n	8004dde <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	9600      	str	r6, [sp, #0]
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2140      	movs	r1, #64	; 0x40
 8004e12:	4620      	mov	r0, r4
 8004e14:	f7ff ff2e 	bl	8004c74 <UART_WaitOnFlagUntilTimeout>
 8004e18:	b978      	cbnz	r0, 8004e3a <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8004e1a:	2320      	movs	r3, #32
 8004e1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004e20:	e000      	b.n	8004e24 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8004e22:	2002      	movs	r0, #2
}
 8004e24:	b002      	add	sp, #8
 8004e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	e7fa      	b.n	8004e24 <HAL_UART_Transmit+0xca>
 8004e2e:	2001      	movs	r0, #1
 8004e30:	e7f8      	b.n	8004e24 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8004e32:	2002      	movs	r0, #2
 8004e34:	e7f6      	b.n	8004e24 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8004e36:	2003      	movs	r0, #3
 8004e38:	e7f4      	b.n	8004e24 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8004e3a:	2003      	movs	r0, #3
 8004e3c:	e7f2      	b.n	8004e24 <HAL_UART_Transmit+0xca>
	...

08004e40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004e40:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004e42:	4903      	ldr	r1, [pc, #12]	; (8004e50 <MX_FATFS_Init+0x10>)
 8004e44:	4803      	ldr	r0, [pc, #12]	; (8004e54 <MX_FATFS_Init+0x14>)
 8004e46:	f001 fdb7 	bl	80069b8 <FATFS_LinkDriver>
 8004e4a:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <MX_FATFS_Init+0x18>)
 8004e4c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004e4e:	bd08      	pop	{r3, pc}
 8004e50:	200024e8 	.word	0x200024e8
 8004e54:	20000010 	.word	0x20000010
 8004e58:	200024ec 	.word	0x200024ec

08004e5c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	4770      	bx	lr

08004e60 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004e60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8004e62:	f7fc fabf 	bl	80013e4 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8004e66:	bd08      	pop	{r3, pc}

08004e68 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004e68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8004e6a:	f7fc fb7b 	bl	8001564 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8004e6e:	bd08      	pop	{r3, pc}

08004e70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004e70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004e72:	f7fc fb81 	bl	8001578 <SD_disk_read>
  /* USER CODE END READ */
}
 8004e76:	bd08      	pop	{r3, pc}

08004e78 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004e78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004e7a:	f7fc fbc9 	bl	8001610 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8004e7e:	bd08      	pop	{r3, pc}

08004e80 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004e80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004e82:	f7fc fc27 	bl	80016d4 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8004e86:	bd08      	pop	{r3, pc}

08004e88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004e88:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004e8a:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <disk_status+0x14>)
 8004e8c:	181a      	adds	r2, r3, r0
 8004e8e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	7a10      	ldrb	r0, [r2, #8]
 8004e98:	4798      	blx	r3
  return stat;
}
 8004e9a:	bd08      	pop	{r3, pc}
 8004e9c:	20002518 	.word	0x20002518

08004ea0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004ea0:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <disk_initialize+0x24>)
 8004ea4:	5c1b      	ldrb	r3, [r3, r0]
 8004ea6:	b953      	cbnz	r3, 8004ebe <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <disk_initialize+0x24>)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004eae:	181a      	adds	r2, r3, r0
 8004eb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004eb4:	6843      	ldr	r3, [r0, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	7a10      	ldrb	r0, [r2, #8]
 8004eba:	4798      	blx	r3
  }
  return stat;
}
 8004ebc:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	e7fc      	b.n	8004ebc <disk_initialize+0x1c>
 8004ec2:	bf00      	nop
 8004ec4:	20002518 	.word	0x20002518

08004ec8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ec8:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004eca:	4c05      	ldr	r4, [pc, #20]	; (8004ee0 <disk_read+0x18>)
 8004ecc:	eb04 0c00 	add.w	ip, r4, r0
 8004ed0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004ed4:	6860      	ldr	r0, [r4, #4]
 8004ed6:	6884      	ldr	r4, [r0, #8]
 8004ed8:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8004edc:	47a0      	blx	r4
  return res;
}
 8004ede:	bd10      	pop	{r4, pc}
 8004ee0:	20002518 	.word	0x20002518

08004ee4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ee4:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004ee6:	4c05      	ldr	r4, [pc, #20]	; (8004efc <disk_write+0x18>)
 8004ee8:	eb04 0c00 	add.w	ip, r4, r0
 8004eec:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004ef0:	6860      	ldr	r0, [r4, #4]
 8004ef2:	68c4      	ldr	r4, [r0, #12]
 8004ef4:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8004ef8:	47a0      	blx	r4
  return res;
}
 8004efa:	bd10      	pop	{r4, pc}
 8004efc:	20002518 	.word	0x20002518

08004f00 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004f00:	b508      	push	{r3, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <disk_ioctl+0x18>)
 8004f04:	eb03 0c00 	add.w	ip, r3, r0
 8004f08:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8004f14:	4798      	blx	r3
  return res;
}
 8004f16:	bd08      	pop	{r3, pc}
 8004f18:	20002518 	.word	0x20002518

08004f1c <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8004f1c:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8004f1e:	7883      	ldrb	r3, [r0, #2]
 8004f20:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8004f24:	7843      	ldrb	r3, [r0, #1]
 8004f26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8004f2a:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8004f2c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004f30:	4770      	bx	lr

08004f32 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004f32:	7001      	strb	r1, [r0, #0]
 8004f34:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8004f36:	7043      	strb	r3, [r0, #1]
 8004f38:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004f3a:	7083      	strb	r3, [r0, #2]
 8004f3c:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val;
 8004f3e:	70c1      	strb	r1, [r0, #3]
}
 8004f40:	4770      	bx	lr

08004f42 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8004f42:	b13a      	cbz	r2, 8004f54 <mem_cpy+0x12>
 8004f44:	3801      	subs	r0, #1
 8004f46:	188a      	adds	r2, r1, r2
		do {
			*d++ = *s++;
 8004f48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f4c:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8004f50:	4291      	cmp	r1, r2
 8004f52:	d1f9      	bne.n	8004f48 <mem_cpy+0x6>
	}
}
 8004f54:	4770      	bx	lr

08004f56 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8004f56:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8004f58:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8004f5c:	4290      	cmp	r0, r2
 8004f5e:	d1fb      	bne.n	8004f58 <mem_set+0x2>
}
 8004f60:	4770      	bx	lr
	...

08004f64 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f64:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8004f66:	4b22      	ldr	r3, [pc, #136]	; (8004ff0 <chk_lock+0x8c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	b1f3      	cbz	r3, 8004faa <chk_lock+0x46>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f6c:	6802      	ldr	r2, [r0, #0]
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00d      	beq.n	8004f8e <chk_lock+0x2a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f72:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
 8004f74:	4b1e      	ldr	r3, [pc, #120]	; (8004ff0 <chk_lock+0x8c>)
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	b32b      	cbz	r3, 8004fc6 <chk_lock+0x62>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f7a:	6804      	ldr	r4, [r0, #0]
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	d016      	beq.n	8004fae <chk_lock+0x4a>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004f80:	2a00      	cmp	r2, #0
 8004f82:	d130      	bne.n	8004fe6 <chk_lock+0x82>
 8004f84:	2902      	cmp	r1, #2
 8004f86:	bf0c      	ite	eq
 8004f88:	2000      	moveq	r0, #0
 8004f8a:	2012      	movne	r0, #18
 8004f8c:	e028      	b.n	8004fe0 <chk_lock+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8004f8e:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	6883      	ldr	r3, [r0, #8]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d001      	beq.n	8004f9c <chk_lock+0x38>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f98:	2200      	movs	r2, #0
 8004f9a:	e7eb      	b.n	8004f74 <chk_lock+0x10>
				Files[i].ofs == dp->dptr) break;
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	6943      	ldr	r3, [r0, #20]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d011      	beq.n	8004fca <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	e7e4      	b.n	8004f74 <chk_lock+0x10>
			be = 1;
 8004faa:	2201      	movs	r2, #1
 8004fac:	e7e2      	b.n	8004f74 <chk_lock+0x10>
				Files[i].clu == dp->obj.sclust &&
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <chk_lock+0x8c>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004fb0:	695c      	ldr	r4, [r3, #20]
 8004fb2:	6883      	ldr	r3, [r0, #8]
 8004fb4:	429c      	cmp	r4, r3
 8004fb6:	d1e3      	bne.n	8004f80 <chk_lock+0x1c>
				Files[i].ofs == dp->dptr) break;
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <chk_lock+0x8c>)
				Files[i].clu == dp->obj.sclust &&
 8004fba:	699c      	ldr	r4, [r3, #24]
 8004fbc:	6943      	ldr	r3, [r0, #20]
 8004fbe:	429c      	cmp	r4, r3
 8004fc0:	d1de      	bne.n	8004f80 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	e002      	b.n	8004fcc <chk_lock+0x68>
			be = 1;
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	e7da      	b.n	8004f80 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fca:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004fcc:	b969      	cbnz	r1, 8004fea <chk_lock+0x86>
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <chk_lock+0x8c>)
 8004fd0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004fd4:	899b      	ldrh	r3, [r3, #12]
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fda:	bf0c      	ite	eq
 8004fdc:	2010      	moveq	r0, #16
 8004fde:	2000      	movne	r0, #0
}
 8004fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fe4:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	e7fa      	b.n	8004fe0 <chk_lock+0x7c>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004fea:	2010      	movs	r0, #16
 8004fec:	e7f8      	b.n	8004fe0 <chk_lock+0x7c>
 8004fee:	bf00      	nop
 8004ff0:	200024f4 	.word	0x200024f4

08004ff4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ff4:	b430      	push	{r4, r5}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8004ff6:	6802      	ldr	r2, [r0, #0]
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <inc_lock+0xb4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d00c      	beq.n	800501a <inc_lock+0x26>
 8005000:	4c29      	ldr	r4, [pc, #164]	; (80050a8 <inc_lock+0xb4>)
 8005002:	6924      	ldr	r4, [r4, #16]
 8005004:	4294      	cmp	r4, r2
 8005006:	d024      	beq.n	8005052 <inc_lock+0x5e>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005008:	f04f 0c00 	mov.w	ip, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d02f      	beq.n	8005070 <inc_lock+0x7c>
 8005010:	4b25      	ldr	r3, [pc, #148]	; (80050a8 <inc_lock+0xb4>)
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	b353      	cbz	r3, 800506c <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005016:	2000      	movs	r0, #0
 8005018:	e019      	b.n	800504e <inc_lock+0x5a>
			Files[i].clu == dp->obj.sclust &&
 800501a:	4c23      	ldr	r4, [pc, #140]	; (80050a8 <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 800501c:	6865      	ldr	r5, [r4, #4]
 800501e:	6884      	ldr	r4, [r0, #8]
 8005020:	42a5      	cmp	r5, r4
 8005022:	d1ed      	bne.n	8005000 <inc_lock+0xc>
			Files[i].ofs == dp->dptr) break;
 8005024:	4c20      	ldr	r4, [pc, #128]	; (80050a8 <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 8005026:	68a5      	ldr	r5, [r4, #8]
 8005028:	6944      	ldr	r4, [r0, #20]
 800502a:	42a5      	cmp	r5, r4
 800502c:	d1e8      	bne.n	8005000 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800502e:	f04f 0c00 	mov.w	ip, #0
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005032:	2900      	cmp	r1, #0
 8005034:	d12d      	bne.n	8005092 <inc_lock+0x9e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005036:	4b1c      	ldr	r3, [pc, #112]	; (80050a8 <inc_lock+0xb4>)
 8005038:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 800503c:	899a      	ldrh	r2, [r3, #12]
 800503e:	3201      	adds	r2, #1
 8005040:	b292      	uxth	r2, r2
 8005042:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <inc_lock+0xb4>)
 8005044:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8005048:	819a      	strh	r2, [r3, #12]

	return i + 1;
 800504a:	f10c 0001 	add.w	r0, ip, #1
}
 800504e:	bc30      	pop	{r4, r5}
 8005050:	4770      	bx	lr
			Files[i].clu == dp->obj.sclust &&
 8005052:	4c15      	ldr	r4, [pc, #84]	; (80050a8 <inc_lock+0xb4>)
		if (Files[i].fs == dp->obj.fs &&
 8005054:	6965      	ldr	r5, [r4, #20]
 8005056:	6884      	ldr	r4, [r0, #8]
 8005058:	42a5      	cmp	r5, r4
 800505a:	d1d5      	bne.n	8005008 <inc_lock+0x14>
			Files[i].ofs == dp->dptr) break;
 800505c:	4c12      	ldr	r4, [pc, #72]	; (80050a8 <inc_lock+0xb4>)
			Files[i].clu == dp->obj.sclust &&
 800505e:	69a5      	ldr	r5, [r4, #24]
 8005060:	6944      	ldr	r4, [r0, #20]
 8005062:	42a5      	cmp	r5, r4
 8005064:	d1d0      	bne.n	8005008 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005066:	f04f 0c01 	mov.w	ip, #1
 800506a:	e7e2      	b.n	8005032 <inc_lock+0x3e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800506c:	f04f 0c01 	mov.w	ip, #1
		Files[i].fs = dp->obj.fs;
 8005070:	4d0d      	ldr	r5, [pc, #52]	; (80050a8 <inc_lock+0xb4>)
 8005072:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8005076:	eb05 130c 	add.w	r3, r5, ip, lsl #4
 800507a:	512a      	str	r2, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800507c:	6882      	ldr	r2, [r0, #8]
 800507e:	605a      	str	r2, [r3, #4]
		Files[i].ofs = dp->dptr;
 8005080:	6942      	ldr	r2, [r0, #20]
 8005082:	609a      	str	r2, [r3, #8]
		Files[i].ctr = 0;
 8005084:	2200      	movs	r2, #0
 8005086:	819a      	strh	r2, [r3, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005088:	2900      	cmp	r1, #0
 800508a:	d0d4      	beq.n	8005036 <inc_lock+0x42>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800508c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005090:	e7d7      	b.n	8005042 <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005092:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <inc_lock+0xb4>)
 8005094:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8005098:	899b      	ldrh	r3, [r3, #12]
 800509a:	b913      	cbnz	r3, 80050a2 <inc_lock+0xae>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800509c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050a0:	e7cf      	b.n	8005042 <inc_lock+0x4e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80050a2:	2000      	movs	r0, #0
 80050a4:	e7d3      	b.n	800504e <inc_lock+0x5a>
 80050a6:	bf00      	nop
 80050a8:	200024f4 	.word	0x200024f4

080050ac <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80050ac:	3801      	subs	r0, #1
 80050ae:	2801      	cmp	r0, #1
 80050b0:	d810      	bhi.n	80050d4 <dec_lock+0x28>
		n = Files[i].ctr;
 80050b2:	4b0e      	ldr	r3, [pc, #56]	; (80050ec <dec_lock+0x40>)
 80050b4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80050b8:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 80050ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050be:	b292      	uxth	r2, r2
 80050c0:	b152      	cbz	r2, 80050d8 <dec_lock+0x2c>
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <dec_lock+0x40>)
 80050c8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80050cc:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80050ce:	b143      	cbz	r3, 80050e2 <dec_lock+0x36>
		res = FR_OK;
 80050d0:	2000      	movs	r0, #0
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
	}
	return res;
}
 80050d2:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 80050d4:	2002      	movs	r0, #2
 80050d6:	4770      	bx	lr
		Files[i].ctr = n;
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <dec_lock+0x40>)
 80050da:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80050de:	2200      	movs	r2, #0
 80050e0:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80050e2:	0103      	lsls	r3, r0, #4
 80050e4:	2000      	movs	r0, #0
 80050e6:	4a01      	ldr	r2, [pc, #4]	; (80050ec <dec_lock+0x40>)
 80050e8:	50d0      	str	r0, [r2, r3]
 80050ea:	4770      	bx	lr
 80050ec:	200024f4 	.word	0x200024f4

080050f0 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 80050f0:	4b08      	ldr	r3, [pc, #32]	; (8005114 <clear_lock+0x24>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4298      	cmp	r0, r3
 80050f6:	d004      	beq.n	8005102 <clear_lock+0x12>
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <clear_lock+0x24>)
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	4283      	cmp	r3, r0
 80050fe:	d004      	beq.n	800510a <clear_lock+0x1a>
	}
}
 8005100:	4770      	bx	lr
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005102:	4b04      	ldr	r3, [pc, #16]	; (8005114 <clear_lock+0x24>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e7f6      	b.n	80050f8 <clear_lock+0x8>
 800510a:	4b02      	ldr	r3, [pc, #8]	; (8005114 <clear_lock+0x24>)
 800510c:	2200      	movs	r2, #0
 800510e:	611a      	str	r2, [r3, #16]
}
 8005110:	e7f6      	b.n	8005100 <clear_lock+0x10>
 8005112:	bf00      	nop
 8005114:	200024f4 	.word	0x200024f4

08005118 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8005118:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800511a:	6983      	ldr	r3, [r0, #24]
 800511c:	3b02      	subs	r3, #2
 800511e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8005120:	bf83      	ittte	hi
 8005122:	8943      	ldrhhi	r3, [r0, #10]
 8005124:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 8005126:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800512a:	2000      	movls	r0, #0
}
 800512c:	4770      	bx	lr

0800512e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800512e:	b410      	push	{r4}
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005130:	6804      	ldr	r4, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005132:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005134:	1d13      	adds	r3, r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005136:	89a0      	ldrh	r0, [r4, #12]
 8005138:	fbb1 f1f0 	udiv	r1, r1, r0
 800513c:	8960      	ldrh	r0, [r4, #10]
 800513e:	fbb1 f1f0 	udiv	r1, r1, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005142:	6850      	ldr	r0, [r2, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005144:	b148      	cbz	r0, 800515a <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 8005146:	4281      	cmp	r1, r0
 8005148:	d305      	bcc.n	8005156 <clmt_clust+0x28>
		cl -= ncl; tbl++;		/* Next fragment */
 800514a:	1a09      	subs	r1, r1, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800514c:	f853 0f08 	ldr.w	r0, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005150:	2800      	cmp	r0, #0
 8005152:	d1f8      	bne.n	8005146 <clmt_clust+0x18>
 8005154:	e001      	b.n	800515a <clmt_clust+0x2c>
	}
	return cl + *tbl;	/* Return the cluster number */
 8005156:	6858      	ldr	r0, [r3, #4]
 8005158:	4408      	add	r0, r1
}
 800515a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800515e:	4770      	bx	lr

08005160 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005160:	6801      	ldr	r1, [r0, #0]
 8005162:	b309      	cbz	r1, 80051a8 <get_ldnumber+0x48>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005164:	f891 c000 	ldrb.w	ip, [r1]
 8005168:	f1bc 0f20 	cmp.w	ip, #32
 800516c:	d909      	bls.n	8005182 <get_ldnumber+0x22>
 800516e:	460a      	mov	r2, r1
 8005170:	4663      	mov	r3, ip
 8005172:	2b3a      	cmp	r3, #58	; 0x3a
 8005174:	d00b      	beq.n	800518e <get_ldnumber+0x2e>
 8005176:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800517a:	2b20      	cmp	r3, #32
 800517c:	d8f9      	bhi.n	8005172 <get_ldnumber+0x12>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800517e:	2000      	movs	r0, #0
 8005180:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005182:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 8005186:	d001      	beq.n	800518c <get_ldnumber+0x2c>
		vol = 0;		/* Drive 0 */
 8005188:	2000      	movs	r0, #0
 800518a:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800518c:	460a      	mov	r2, r1
			i = *tp++ - '0';
 800518e:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005190:	428a      	cmp	r2, r1
 8005192:	d002      	beq.n	800519a <get_ldnumber+0x3a>
	int vol = -1;
 8005194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005198:	4770      	bx	lr
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800519a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800519e:	d106      	bne.n	80051ae <get_ldnumber+0x4e>
					*path = ++tt;
 80051a0:	3201      	adds	r2, #1
 80051a2:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 80051a4:	2000      	movs	r0, #0
 80051a6:	4770      	bx	lr
	int vol = -1;
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051ac:	4770      	bx	lr
 80051ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif
	}
	return vol;
}
 80051b2:	4770      	bx	lr

080051b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80051b8:	4604      	mov	r4, r0
 80051ba:	b198      	cbz	r0, 80051e4 <validate+0x30>
 80051bc:	6803      	ldr	r3, [r0, #0]
 80051be:	b19b      	cbz	r3, 80051e8 <validate+0x34>
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	b1a2      	cbz	r2, 80051ee <validate+0x3a>
 80051c4:	8881      	ldrh	r1, [r0, #4]
 80051c6:	88da      	ldrh	r2, [r3, #6]
 80051c8:	4291      	cmp	r1, r2
 80051ca:	d003      	beq.n	80051d4 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 80051cc:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80051ce:	2400      	movs	r4, #0
 80051d0:	602c      	str	r4, [r5, #0]
	return res;
}
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80051d4:	7858      	ldrb	r0, [r3, #1]
 80051d6:	f7ff fe57 	bl	8004e88 <disk_status>
 80051da:	f010 0001 	ands.w	r0, r0, #1
 80051de:	d109      	bne.n	80051f4 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80051e0:	6824      	ldr	r4, [r4, #0]
 80051e2:	e7f5      	b.n	80051d0 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80051e4:	2009      	movs	r0, #9
 80051e6:	e7f3      	b.n	80051d0 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80051e8:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 80051ea:	2009      	movs	r0, #9
 80051ec:	e7f0      	b.n	80051d0 <validate+0x1c>
 80051ee:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80051f0:	2400      	movs	r4, #0
 80051f2:	e7ed      	b.n	80051d0 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80051f4:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80051f6:	2400      	movs	r4, #0
 80051f8:	e7ea      	b.n	80051d0 <validate+0x1c>

080051fa <sync_window>:
{
 80051fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80051fe:	78c5      	ldrb	r5, [r0, #3]
 8005200:	b915      	cbnz	r5, 8005208 <sync_window+0xe>
}
 8005202:	4628      	mov	r0, r5
 8005204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005208:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800520a:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800520c:	f100 0834 	add.w	r8, r0, #52	; 0x34
 8005210:	2301      	movs	r3, #1
 8005212:	4632      	mov	r2, r6
 8005214:	4641      	mov	r1, r8
 8005216:	7840      	ldrb	r0, [r0, #1]
 8005218:	f7ff fe64 	bl	8004ee4 <disk_write>
 800521c:	4605      	mov	r5, r0
 800521e:	b9b8      	cbnz	r0, 8005250 <sync_window+0x56>
			fs->wflag = 0;
 8005220:	2300      	movs	r3, #0
 8005222:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005226:	1af3      	subs	r3, r6, r3
 8005228:	69e2      	ldr	r2, [r4, #28]
 800522a:	4293      	cmp	r3, r2
 800522c:	d2e9      	bcs.n	8005202 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800522e:	78a7      	ldrb	r7, [r4, #2]
 8005230:	2f01      	cmp	r7, #1
 8005232:	d9e6      	bls.n	8005202 <sync_window+0x8>
					disk_write(fs->drv, fs->win, wsect, 1);
 8005234:	f04f 0901 	mov.w	r9, #1
					wsect += fs->fsize;
 8005238:	69e3      	ldr	r3, [r4, #28]
 800523a:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800523c:	464b      	mov	r3, r9
 800523e:	4632      	mov	r2, r6
 8005240:	4641      	mov	r1, r8
 8005242:	7860      	ldrb	r0, [r4, #1]
 8005244:	f7ff fe4e 	bl	8004ee4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005248:	3f01      	subs	r7, #1
 800524a:	2f01      	cmp	r7, #1
 800524c:	d1f4      	bne.n	8005238 <sync_window+0x3e>
 800524e:	e7d8      	b.n	8005202 <sync_window+0x8>
			res = FR_DISK_ERR;
 8005250:	2501      	movs	r5, #1
 8005252:	e7d6      	b.n	8005202 <sync_window+0x8>

08005254 <move_window>:
{
 8005254:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005256:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005258:	428b      	cmp	r3, r1
 800525a:	d101      	bne.n	8005260 <move_window+0xc>
	FRESULT res = FR_OK;
 800525c:	2000      	movs	r0, #0
}
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	4604      	mov	r4, r0
 8005262:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8005264:	f7ff ffc9 	bl	80051fa <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005268:	2800      	cmp	r0, #0
 800526a:	d1f8      	bne.n	800525e <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800526c:	2301      	movs	r3, #1
 800526e:	462a      	mov	r2, r5
 8005270:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8005274:	7860      	ldrb	r0, [r4, #1]
 8005276:	f7ff fe27 	bl	8004ec8 <disk_read>
				res = FR_DISK_ERR;
 800527a:	2800      	cmp	r0, #0
 800527c:	bf1c      	itt	ne
 800527e:	2001      	movne	r0, #1
 8005280:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 8005284:	6325      	str	r5, [r4, #48]	; 0x30
 8005286:	e7ea      	b.n	800525e <move_window+0xa>

08005288 <sync_fs>:
{
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4604      	mov	r4, r0
	res = sync_window(fs);
 800528c:	f7ff ffb5 	bl	80051fa <sync_window>
	if (res == FR_OK) {
 8005290:	b950      	cbnz	r0, 80052a8 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005292:	7823      	ldrb	r3, [r4, #0]
 8005294:	2b03      	cmp	r3, #3
 8005296:	d008      	beq.n	80052aa <sync_fs+0x22>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005298:	2200      	movs	r2, #0
 800529a:	4611      	mov	r1, r2
 800529c:	7860      	ldrb	r0, [r4, #1]
 800529e:	f7ff fe2f 	bl	8004f00 <disk_ioctl>
	res = sync_window(fs);
 80052a2:	3800      	subs	r0, #0
 80052a4:	bf18      	it	ne
 80052a6:	2001      	movne	r0, #1
}
 80052a8:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80052aa:	7923      	ldrb	r3, [r4, #4]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d1f3      	bne.n	8005298 <sync_fs+0x10>
			mem_set(fs->win, 0, SS(fs));
 80052b0:	f104 0534 	add.w	r5, r4, #52	; 0x34
 80052b4:	89a2      	ldrh	r2, [r4, #12]
 80052b6:	2100      	movs	r1, #0
 80052b8:	4628      	mov	r0, r5
 80052ba:	f7ff fe4c 	bl	8004f56 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80052be:	2355      	movs	r3, #85	; 0x55
 80052c0:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 80052c4:	23aa      	movs	r3, #170	; 0xaa
 80052c6:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80052ca:	490f      	ldr	r1, [pc, #60]	; (8005308 <sync_fs+0x80>)
 80052cc:	4628      	mov	r0, r5
 80052ce:	f7ff fe30 	bl	8004f32 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80052d2:	490e      	ldr	r1, [pc, #56]	; (800530c <sync_fs+0x84>)
 80052d4:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80052d8:	f7ff fe2b 	bl	8004f32 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80052dc:	6961      	ldr	r1, [r4, #20]
 80052de:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80052e2:	f7ff fe26 	bl	8004f32 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80052e6:	6921      	ldr	r1, [r4, #16]
 80052e8:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80052ec:	f7ff fe21 	bl	8004f32 <st_dword>
			fs->winsect = fs->volbase + 1;
 80052f0:	6a22      	ldr	r2, [r4, #32]
 80052f2:	3201      	adds	r2, #1
 80052f4:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80052f6:	2301      	movs	r3, #1
 80052f8:	4629      	mov	r1, r5
 80052fa:	7860      	ldrb	r0, [r4, #1]
 80052fc:	f7ff fdf2 	bl	8004ee4 <disk_write>
			fs->fsi_flag = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	7123      	strb	r3, [r4, #4]
 8005304:	e7c8      	b.n	8005298 <sync_fs+0x10>
 8005306:	bf00      	nop
 8005308:	41615252 	.word	0x41615252
 800530c:	61417272 	.word	0x61417272

08005310 <put_fat>:
{
 8005310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005314:	2901      	cmp	r1, #1
 8005316:	f240 8095 	bls.w	8005444 <put_fat+0x134>
 800531a:	4607      	mov	r7, r0
 800531c:	460c      	mov	r4, r1
 800531e:	4616      	mov	r6, r2
 8005320:	6983      	ldr	r3, [r0, #24]
 8005322:	428b      	cmp	r3, r1
 8005324:	f240 8090 	bls.w	8005448 <put_fat+0x138>
		switch (fs->fs_type) {
 8005328:	7803      	ldrb	r3, [r0, #0]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d04d      	beq.n	80053ca <put_fat+0xba>
 800532e:	2b03      	cmp	r3, #3
 8005330:	d066      	beq.n	8005400 <put_fat+0xf0>
 8005332:	2b01      	cmp	r3, #1
 8005334:	d003      	beq.n	800533e <put_fat+0x2e>
 8005336:	2502      	movs	r5, #2
}
 8005338:	4628      	mov	r0, r5
 800533a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 800533e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005342:	8983      	ldrh	r3, [r0, #12]
 8005344:	fbb8 f3f3 	udiv	r3, r8, r3
 8005348:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800534a:	4419      	add	r1, r3
 800534c:	f7ff ff82 	bl	8005254 <move_window>
			if (res != FR_OK) break;
 8005350:	4605      	mov	r5, r0
 8005352:	2800      	cmp	r0, #0
 8005354:	d1f0      	bne.n	8005338 <put_fat+0x28>
			p = fs->win + bc++ % SS(fs);
 8005356:	f107 0a34 	add.w	sl, r7, #52	; 0x34
 800535a:	f108 0901 	add.w	r9, r8, #1
 800535e:	89bb      	ldrh	r3, [r7, #12]
 8005360:	fbb8 f2f3 	udiv	r2, r8, r3
 8005364:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005368:	f014 0401 	ands.w	r4, r4, #1
 800536c:	d023      	beq.n	80053b6 <put_fat+0xa6>
 800536e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8005372:	f003 020f 	and.w	r2, r3, #15
 8005376:	0133      	lsls	r3, r6, #4
 8005378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800537c:	4313      	orrs	r3, r2
 800537e:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8005382:	2301      	movs	r3, #1
 8005384:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005386:	89bb      	ldrh	r3, [r7, #12]
 8005388:	fbb9 f3f3 	udiv	r3, r9, r3
 800538c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800538e:	4419      	add	r1, r3
 8005390:	4638      	mov	r0, r7
 8005392:	f7ff ff5f 	bl	8005254 <move_window>
			if (res != FR_OK) break;
 8005396:	4605      	mov	r5, r0
 8005398:	2800      	cmp	r0, #0
 800539a:	d1cd      	bne.n	8005338 <put_fat+0x28>
			p = fs->win + bc % SS(fs);
 800539c:	89bb      	ldrh	r3, [r7, #12]
 800539e:	fbb9 f2f3 	udiv	r2, r9, r3
 80053a2:	fb03 9912 	mls	r9, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80053a6:	b144      	cbz	r4, 80053ba <put_fat+0xaa>
 80053a8:	f3c6 1207 	ubfx	r2, r6, #4, #8
 80053ac:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 80053b0:	2301      	movs	r3, #1
 80053b2:	70fb      	strb	r3, [r7, #3]
			break;
 80053b4:	e7c0      	b.n	8005338 <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80053b6:	b2f3      	uxtb	r3, r6
 80053b8:	e7e1      	b.n	800537e <put_fat+0x6e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80053ba:	f81a 3009 	ldrb.w	r3, [sl, r9]
 80053be:	f023 030f 	bic.w	r3, r3, #15
 80053c2:	f3c6 2203 	ubfx	r2, r6, #8, #4
 80053c6:	431a      	orrs	r2, r3
 80053c8:	e7f0      	b.n	80053ac <put_fat+0x9c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80053ca:	8983      	ldrh	r3, [r0, #12]
 80053cc:	085b      	lsrs	r3, r3, #1
 80053ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80053d2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80053d4:	4419      	add	r1, r3
 80053d6:	f7ff ff3d 	bl	8005254 <move_window>
			if (res != FR_OK) break;
 80053da:	4605      	mov	r5, r0
 80053dc:	2800      	cmp	r0, #0
 80053de:	d1ab      	bne.n	8005338 <put_fat+0x28>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80053e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053e4:	0064      	lsls	r4, r4, #1
 80053e6:	89ba      	ldrh	r2, [r7, #12]
 80053e8:	fbb4 f1f2 	udiv	r1, r4, r2
 80053ec:	fb02 4411 	mls	r4, r2, r1, r4
 80053f0:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80053f2:	551e      	strb	r6, [r3, r4]
 80053f4:	f3c6 2207 	ubfx	r2, r6, #8, #8
	*ptr++ = (BYTE)val;
 80053f8:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 80053fa:	2301      	movs	r3, #1
 80053fc:	70fb      	strb	r3, [r7, #3]
			break;
 80053fe:	e79b      	b.n	8005338 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005400:	8983      	ldrh	r3, [r0, #12]
 8005402:	089b      	lsrs	r3, r3, #2
 8005404:	fbb1 f3f3 	udiv	r3, r1, r3
 8005408:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800540a:	4419      	add	r1, r3
 800540c:	f7ff ff22 	bl	8005254 <move_window>
			if (res != FR_OK) break;
 8005410:	4605      	mov	r5, r0
 8005412:	2800      	cmp	r0, #0
 8005414:	d190      	bne.n	8005338 <put_fat+0x28>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005416:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 800541a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800541e:	00a4      	lsls	r4, r4, #2
 8005420:	89ba      	ldrh	r2, [r7, #12]
 8005422:	fbb4 f1f2 	udiv	r1, r4, r2
 8005426:	fb02 4411 	mls	r4, r2, r1, r4
 800542a:	441c      	add	r4, r3
 800542c:	4620      	mov	r0, r4
 800542e:	f7ff fd75 	bl	8004f1c <ld_dword>
 8005432:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005436:	4331      	orrs	r1, r6
 8005438:	4620      	mov	r0, r4
 800543a:	f7ff fd7a 	bl	8004f32 <st_dword>
			fs->wflag = 1;
 800543e:	2301      	movs	r3, #1
 8005440:	70fb      	strb	r3, [r7, #3]
			break;
 8005442:	e779      	b.n	8005338 <put_fat+0x28>
	FRESULT res = FR_INT_ERR;
 8005444:	2502      	movs	r5, #2
 8005446:	e777      	b.n	8005338 <put_fat+0x28>
 8005448:	2502      	movs	r5, #2
 800544a:	e775      	b.n	8005338 <put_fat+0x28>

0800544c <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 800544c:	768a      	strb	r2, [r1, #26]
 800544e:	f3c2 2307 	ubfx	r3, r2, #8, #8
	*ptr++ = (BYTE)val;
 8005452:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8005454:	7803      	ldrb	r3, [r0, #0]
 8005456:	2b03      	cmp	r3, #3
 8005458:	d000      	beq.n	800545c <st_clust+0x10>
}
 800545a:	4770      	bx	lr
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800545c:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800545e:	750a      	strb	r2, [r1, #20]
 8005460:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8005462:	754a      	strb	r2, [r1, #21]
}
 8005464:	e7f9      	b.n	800545a <st_clust+0xe>

08005466 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005466:	2901      	cmp	r1, #1
 8005468:	d96f      	bls.n	800554a <get_fat+0xe4>
{
 800546a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546c:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800546e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005470:	69ab      	ldr	r3, [r5, #24]
 8005472:	428b      	cmp	r3, r1
 8005474:	d96b      	bls.n	800554e <get_fat+0xe8>
		switch (fs->fs_type) {
 8005476:	782b      	ldrb	r3, [r5, #0]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d036      	beq.n	80054ea <get_fat+0x84>
 800547c:	2b03      	cmp	r3, #3
 800547e:	d04c      	beq.n	800551a <get_fat+0xb4>
 8005480:	2b01      	cmp	r3, #1
 8005482:	d001      	beq.n	8005488 <get_fat+0x22>
 8005484:	2001      	movs	r0, #1
 8005486:	e063      	b.n	8005550 <get_fat+0xea>
			bc = (UINT)clst; bc += bc / 2;
 8005488:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800548c:	89ab      	ldrh	r3, [r5, #12]
 800548e:	fbb6 f3f3 	udiv	r3, r6, r3
 8005492:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8005494:	4419      	add	r1, r3
 8005496:	4628      	mov	r0, r5
 8005498:	f7ff fedc 	bl	8005254 <move_window>
 800549c:	b110      	cbz	r0, 80054a4 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800549e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a2:	e055      	b.n	8005550 <get_fat+0xea>
			wc = fs->win[bc++ % SS(fs)];
 80054a4:	1c77      	adds	r7, r6, #1
 80054a6:	89a9      	ldrh	r1, [r5, #12]
 80054a8:	fbb6 f3f1 	udiv	r3, r6, r1
 80054ac:	fb01 6613 	mls	r6, r1, r3, r6
 80054b0:	442e      	add	r6, r5
 80054b2:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054b6:	fbb7 f1f1 	udiv	r1, r7, r1
 80054ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054bc:	4419      	add	r1, r3
 80054be:	4628      	mov	r0, r5
 80054c0:	f7ff fec8 	bl	8005254 <move_window>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d144      	bne.n	8005552 <get_fat+0xec>
			wc |= fs->win[bc % SS(fs)] << 8;
 80054c8:	89ab      	ldrh	r3, [r5, #12]
 80054ca:	fbb7 f2f3 	udiv	r2, r7, r3
 80054ce:	fb03 7712 	mls	r7, r3, r2, r7
 80054d2:	443d      	add	r5, r7
 80054d4:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80054d8:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80054dc:	f014 0f01 	tst.w	r4, #1
 80054e0:	bf14      	ite	ne
 80054e2:	0900      	lsrne	r0, r0, #4
 80054e4:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 80054e8:	e032      	b.n	8005550 <get_fat+0xea>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054ea:	89ab      	ldrh	r3, [r5, #12]
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80054f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80054f4:	4419      	add	r1, r3
 80054f6:	4628      	mov	r0, r5
 80054f8:	f7ff feac 	bl	8005254 <move_window>
 80054fc:	bb60      	cbnz	r0, 8005558 <get_fat+0xf2>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80054fe:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8005502:	0064      	lsls	r4, r4, #1
 8005504:	89aa      	ldrh	r2, [r5, #12]
 8005506:	fbb4 f1f2 	udiv	r1, r4, r2
 800550a:	fb02 4411 	mls	r4, r2, r1, r4
 800550e:	191a      	adds	r2, r3, r4
	rv = rv << 8 | ptr[0];
 8005510:	7852      	ldrb	r2, [r2, #1]
 8005512:	5d18      	ldrb	r0, [r3, r4]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005514:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
			break;
 8005518:	e01a      	b.n	8005550 <get_fat+0xea>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	089b      	lsrs	r3, r3, #2
 800551e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005522:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8005524:	4419      	add	r1, r3
 8005526:	4628      	mov	r0, r5
 8005528:	f7ff fe94 	bl	8005254 <move_window>
 800552c:	b9b8      	cbnz	r0, 800555e <get_fat+0xf8>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800552e:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8005532:	00a4      	lsls	r4, r4, #2
 8005534:	89ab      	ldrh	r3, [r5, #12]
 8005536:	fbb4 f2f3 	udiv	r2, r4, r3
 800553a:	fb03 4412 	mls	r4, r3, r2, r4
 800553e:	4420      	add	r0, r4
 8005540:	f7ff fcec 	bl	8004f1c <ld_dword>
 8005544:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8005548:	e002      	b.n	8005550 <get_fat+0xea>
		val = 1;	/* Internal error */
 800554a:	2001      	movs	r0, #1
}
 800554c:	4770      	bx	lr
		val = 1;	/* Internal error */
 800554e:	2001      	movs	r0, #1
}
 8005550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005556:	e7fb      	b.n	8005550 <get_fat+0xea>
 8005558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800555c:	e7f8      	b.n	8005550 <get_fat+0xea>
 800555e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
 8005562:	e7f5      	b.n	8005550 <get_fat+0xea>

08005564 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005568:	d251      	bcs.n	800560e <dir_sdi+0xaa>
{
 800556a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800556e:	4607      	mov	r7, r0
 8005570:	460e      	mov	r6, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005572:	f011 0f1f 	tst.w	r1, #31
 8005576:	d14c      	bne.n	8005612 <dir_sdi+0xae>
	FATFS *fs = dp->obj.fs;
 8005578:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 800557c:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800557e:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005580:	bb34      	cbnz	r4, 80055d0 <dir_sdi+0x6c>
 8005582:	f898 3000 	ldrb.w	r3, [r8]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d902      	bls.n	8005590 <dir_sdi+0x2c>
		clst = fs->dirbase;
 800558a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800558e:	b9f3      	cbnz	r3, 80055ce <dir_sdi+0x6a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005590:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8005594:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8005598:	d93d      	bls.n	8005616 <dir_sdi+0xb2>
		dp->sect = fs->dirbase;
 800559a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800559e:	61fb      	str	r3, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 80055a0:	61bc      	str	r4, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	2a00      	cmp	r2, #0
 80055a6:	d03e      	beq.n	8005626 <dir_sdi+0xc2>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80055a8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80055ac:	fbb6 f3f3 	udiv	r3, r6, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	61fb      	str	r3, [r7, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80055b4:	f108 0334 	add.w	r3, r8, #52	; 0x34
 80055b8:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 80055bc:	fbb6 f2f1 	udiv	r2, r6, r1
 80055c0:	fb01 6112 	mls	r1, r1, r2, r6
 80055c4:	4419      	add	r1, r3
 80055c6:	6239      	str	r1, [r7, #32]
	return FR_OK;
 80055c8:	2000      	movs	r0, #0
}
 80055ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = fs->dirbase;
 80055ce:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80055d0:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 80055d4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80055d8:	fb03 f505 	mul.w	r5, r3, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 80055dc:	42ae      	cmp	r6, r5
 80055de:	d310      	bcc.n	8005602 <dir_sdi+0x9e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80055e0:	4621      	mov	r1, r4
 80055e2:	4638      	mov	r0, r7
 80055e4:	f7ff ff3f 	bl	8005466 <get_fat>
 80055e8:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80055ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80055ee:	d014      	beq.n	800561a <dir_sdi+0xb6>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80055f0:	2801      	cmp	r0, #1
 80055f2:	d914      	bls.n	800561e <dir_sdi+0xba>
 80055f4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80055f8:	4283      	cmp	r3, r0
 80055fa:	d912      	bls.n	8005622 <dir_sdi+0xbe>
			ofs -= csz;
 80055fc:	1b76      	subs	r6, r6, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 80055fe:	42b5      	cmp	r5, r6
 8005600:	d9ee      	bls.n	80055e0 <dir_sdi+0x7c>
		dp->sect = clust2sect(fs, clst);
 8005602:	4621      	mov	r1, r4
 8005604:	4640      	mov	r0, r8
 8005606:	f7ff fd87 	bl	8005118 <clust2sect>
 800560a:	61f8      	str	r0, [r7, #28]
 800560c:	e7c8      	b.n	80055a0 <dir_sdi+0x3c>
		return FR_INT_ERR;
 800560e:	2002      	movs	r0, #2
}
 8005610:	4770      	bx	lr
		return FR_INT_ERR;
 8005612:	2002      	movs	r0, #2
 8005614:	e7d9      	b.n	80055ca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005616:	2002      	movs	r0, #2
 8005618:	e7d7      	b.n	80055ca <dir_sdi+0x66>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800561a:	2001      	movs	r0, #1
 800561c:	e7d5      	b.n	80055ca <dir_sdi+0x66>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800561e:	2002      	movs	r0, #2
 8005620:	e7d3      	b.n	80055ca <dir_sdi+0x66>
 8005622:	2002      	movs	r0, #2
 8005624:	e7d1      	b.n	80055ca <dir_sdi+0x66>
	if (!dp->sect) return FR_INT_ERR;
 8005626:	2002      	movs	r0, #2
 8005628:	e7cf      	b.n	80055ca <dir_sdi+0x66>

0800562a <create_chain>:
{
 800562a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562e:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 8005630:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8005632:	4688      	mov	r8, r1
 8005634:	b939      	cbnz	r1, 8005646 <create_chain+0x1c>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005636:	693d      	ldr	r5, [r7, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005638:	b195      	cbz	r5, 8005660 <create_chain+0x36>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	42ab      	cmp	r3, r5
 800563e:	bf98      	it	ls
 8005640:	2501      	movls	r5, #1
		ncl = scl;	/* Start cluster */
 8005642:	462c      	mov	r4, r5
 8005644:	e01b      	b.n	800567e <create_chain+0x54>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005646:	f7ff ff0e 	bl	8005466 <get_fat>
 800564a:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800564c:	2801      	cmp	r0, #1
 800564e:	d946      	bls.n	80056de <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005650:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005654:	d048      	beq.n	80056e8 <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4282      	cmp	r2, r0
 800565a:	d845      	bhi.n	80056e8 <create_chain+0xbe>
		scl = clst;
 800565c:	4645      	mov	r5, r8
 800565e:	e7f0      	b.n	8005642 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005660:	2501      	movs	r5, #1
 8005662:	e7ee      	b.n	8005642 <create_chain+0x18>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005664:	4621      	mov	r1, r4
 8005666:	4630      	mov	r0, r6
 8005668:	f7ff fefd 	bl	8005466 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800566c:	4603      	mov	r3, r0
 800566e:	b170      	cbz	r0, 800568e <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005670:	2801      	cmp	r0, #1
 8005672:	d039      	beq.n	80056e8 <create_chain+0xbe>
 8005674:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005678:	d036      	beq.n	80056e8 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800567a:	42ac      	cmp	r4, r5
 800567c:	d033      	beq.n	80056e6 <create_chain+0xbc>
			ncl++;							/* Next cluster */
 800567e:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	42a3      	cmp	r3, r4
 8005684:	d8ee      	bhi.n	8005664 <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 8005686:	2d01      	cmp	r5, #1
 8005688:	d92b      	bls.n	80056e2 <create_chain+0xb8>
				ncl = 2;
 800568a:	2402      	movs	r4, #2
 800568c:	e7ea      	b.n	8005664 <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800568e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005692:	4621      	mov	r1, r4
 8005694:	4638      	mov	r0, r7
 8005696:	f7ff fe3b 	bl	8005310 <put_fat>
		if (res == FR_OK && clst != 0) {
 800569a:	4603      	mov	r3, r0
 800569c:	b9c8      	cbnz	r0, 80056d2 <create_chain+0xa8>
 800569e:	f1b8 0f00 	cmp.w	r8, #0
 80056a2:	d10e      	bne.n	80056c2 <create_chain+0x98>
		fs->last_clst = ncl;
 80056a4:	613c      	str	r4, [r7, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	3b02      	subs	r3, #2
 80056ac:	429a      	cmp	r2, r3
 80056ae:	bf9c      	itt	ls
 80056b0:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
 80056b4:	617a      	strls	r2, [r7, #20]
		fs->fsi_flag |= 1;
 80056b6:	793b      	ldrb	r3, [r7, #4]
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	713b      	strb	r3, [r7, #4]
 80056be:	4623      	mov	r3, r4
 80056c0:	e012      	b.n	80056e8 <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80056c2:	4622      	mov	r2, r4
 80056c4:	4641      	mov	r1, r8
 80056c6:	4638      	mov	r0, r7
 80056c8:	f7ff fe22 	bl	8005310 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80056cc:	4603      	mov	r3, r0
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d0e8      	beq.n	80056a4 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	bf0c      	ite	eq
 80056d6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
 80056da:	2301      	movne	r3, #1
 80056dc:	e004      	b.n	80056e8 <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80056de:	2301      	movs	r3, #1
 80056e0:	e002      	b.n	80056e8 <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 80056e2:	2300      	movs	r3, #0
 80056e4:	e000      	b.n	80056e8 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080056ee <remove_chain>:
{
 80056ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f2:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 80056f4:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80056f6:	2901      	cmp	r1, #1
 80056f8:	d931      	bls.n	800575e <remove_chain+0x70>
 80056fa:	4606      	mov	r6, r0
 80056fc:	4611      	mov	r1, r2
 80056fe:	69ab      	ldr	r3, [r5, #24]
 8005700:	42a3      	cmp	r3, r4
 8005702:	d92f      	bls.n	8005764 <remove_chain+0x76>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005704:	b90a      	cbnz	r2, 800570a <remove_chain+0x1c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005706:	2700      	movs	r7, #0
 8005708:	e00a      	b.n	8005720 <remove_chain+0x32>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800570a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800570e:	4628      	mov	r0, r5
 8005710:	f7ff fdfe 	bl	8005310 <put_fat>
		if (res != FR_OK) return res;
 8005714:	4684      	mov	ip, r0
 8005716:	2800      	cmp	r0, #0
 8005718:	d0f5      	beq.n	8005706 <remove_chain+0x18>
 800571a:	e025      	b.n	8005768 <remove_chain+0x7a>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800571c:	42a2      	cmp	r2, r4
 800571e:	d923      	bls.n	8005768 <remove_chain+0x7a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005720:	46a0      	mov	r8, r4
 8005722:	4621      	mov	r1, r4
 8005724:	4630      	mov	r0, r6
 8005726:	f7ff fe9e 	bl	8005466 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800572a:	4604      	mov	r4, r0
 800572c:	b1f8      	cbz	r0, 800576e <remove_chain+0x80>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800572e:	2801      	cmp	r0, #1
 8005730:	d020      	beq.n	8005774 <remove_chain+0x86>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005732:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005736:	d020      	beq.n	800577a <remove_chain+0x8c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005738:	463a      	mov	r2, r7
 800573a:	4641      	mov	r1, r8
 800573c:	4628      	mov	r0, r5
 800573e:	f7ff fde7 	bl	8005310 <put_fat>
			if (res != FR_OK) return res;
 8005742:	4684      	mov	ip, r0
 8005744:	b980      	cbnz	r0, 8005768 <remove_chain+0x7a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005746:	696b      	ldr	r3, [r5, #20]
 8005748:	69aa      	ldr	r2, [r5, #24]
 800574a:	1e91      	subs	r1, r2, #2
 800574c:	428b      	cmp	r3, r1
 800574e:	d2e5      	bcs.n	800571c <remove_chain+0x2e>
			fs->free_clst++;
 8005750:	3301      	adds	r3, #1
 8005752:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8005754:	792b      	ldrb	r3, [r5, #4]
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	712b      	strb	r3, [r5, #4]
 800575c:	e7de      	b.n	800571c <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800575e:	f04f 0c02 	mov.w	ip, #2
 8005762:	e001      	b.n	8005768 <remove_chain+0x7a>
 8005764:	f04f 0c02 	mov.w	ip, #2
}
 8005768:	4660      	mov	r0, ip
 800576a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FR_OK;
 800576e:	f04f 0c00 	mov.w	ip, #0
 8005772:	e7f9      	b.n	8005768 <remove_chain+0x7a>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005774:	f04f 0c02 	mov.w	ip, #2
 8005778:	e7f6      	b.n	8005768 <remove_chain+0x7a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800577a:	f04f 0c01 	mov.w	ip, #1
 800577e:	e7f3      	b.n	8005768 <remove_chain+0x7a>

08005780 <dir_next>:
{
 8005780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005784:	6944      	ldr	r4, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005786:	69c3      	ldr	r3, [r0, #28]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d076      	beq.n	800587a <dir_next+0xfa>
 800578c:	4605      	mov	r5, r0
 800578e:	460e      	mov	r6, r1
 8005790:	3420      	adds	r4, #32
 8005792:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 8005796:	d272      	bcs.n	800587e <dir_next+0xfe>
	FATFS *fs = dp->obj.fs;
 8005798:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800579a:	89b9      	ldrh	r1, [r7, #12]
 800579c:	fbb4 f2f1 	udiv	r2, r4, r1
 80057a0:	fb01 4212 	mls	r2, r1, r2, r4
 80057a4:	b93a      	cbnz	r2, 80057b6 <dir_next+0x36>
		dp->sect++;				/* Next sector */
 80057a6:	3301      	adds	r3, #1
 80057a8:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80057aa:	6981      	ldr	r1, [r0, #24]
 80057ac:	b9a1      	cbnz	r1, 80057d8 <dir_next+0x58>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80057ae:	893b      	ldrh	r3, [r7, #8]
 80057b0:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80057b4:	d90c      	bls.n	80057d0 <dir_next+0x50>
	dp->dptr = ofs;						/* Current entry */
 80057b6:	616c      	str	r4, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80057b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057bc:	89ba      	ldrh	r2, [r7, #12]
 80057be:	fbb4 f1f2 	udiv	r1, r4, r2
 80057c2:	fb02 4411 	mls	r4, r2, r1, r4
 80057c6:	441c      	add	r4, r3
 80057c8:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80057ca:	2000      	movs	r0, #0
}
 80057cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61c3      	str	r3, [r0, #28]
 80057d4:	2004      	movs	r0, #4
 80057d6:	e7f9      	b.n	80057cc <dir_next+0x4c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80057d8:	89ba      	ldrh	r2, [r7, #12]
 80057da:	fbb4 f2f2 	udiv	r2, r4, r2
 80057de:	897b      	ldrh	r3, [r7, #10]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	ea12 0803 	ands.w	r8, r2, r3
 80057e6:	d1e6      	bne.n	80057b6 <dir_next+0x36>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80057e8:	f7ff fe3d 	bl	8005466 <get_fat>
 80057ec:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80057ee:	2801      	cmp	r0, #1
 80057f0:	d947      	bls.n	8005882 <dir_next+0x102>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80057f2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80057f6:	d046      	beq.n	8005886 <dir_next+0x106>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	4283      	cmp	r3, r0
 80057fc:	d835      	bhi.n	800586a <dir_next+0xea>
					if (!stretch) {								/* If no stretch, report EOT */
 80057fe:	b18e      	cbz	r6, 8005824 <dir_next+0xa4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005800:	69a9      	ldr	r1, [r5, #24]
 8005802:	4628      	mov	r0, r5
 8005804:	f7ff ff11 	bl	800562a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005808:	4681      	mov	r9, r0
 800580a:	2800      	cmp	r0, #0
 800580c:	d03d      	beq.n	800588a <dir_next+0x10a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800580e:	2801      	cmp	r0, #1
 8005810:	d03d      	beq.n	800588e <dir_next+0x10e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005812:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005816:	d03c      	beq.n	8005892 <dir_next+0x112>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005818:	4638      	mov	r0, r7
 800581a:	f7ff fcee 	bl	80051fa <sync_window>
 800581e:	b128      	cbz	r0, 800582c <dir_next+0xac>
 8005820:	2001      	movs	r0, #1
 8005822:	e7d3      	b.n	80057cc <dir_next+0x4c>
						dp->sect = 0; return FR_NO_FILE;
 8005824:	2300      	movs	r3, #0
 8005826:	61eb      	str	r3, [r5, #28]
 8005828:	2004      	movs	r0, #4
 800582a:	e7cf      	b.n	80057cc <dir_next+0x4c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800582c:	89ba      	ldrh	r2, [r7, #12]
 800582e:	2100      	movs	r1, #0
 8005830:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005834:	f7ff fb8f 	bl	8004f56 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005838:	4649      	mov	r1, r9
 800583a:	4638      	mov	r0, r7
 800583c:	f7ff fc6c 	bl	8005118 <clust2sect>
 8005840:	6338      	str	r0, [r7, #48]	; 0x30
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	b16b      	cbz	r3, 8005862 <dir_next+0xe2>
						fs->wflag = 1;
 8005846:	2601      	movs	r6, #1
 8005848:	70fe      	strb	r6, [r7, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800584a:	4638      	mov	r0, r7
 800584c:	f7ff fcd5 	bl	80051fa <sync_window>
 8005850:	bb08      	cbnz	r0, 8005896 <dir_next+0x116>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005852:	f108 0801 	add.w	r8, r8, #1
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	3301      	adds	r3, #1
 800585a:	633b      	str	r3, [r7, #48]	; 0x30
 800585c:	897b      	ldrh	r3, [r7, #10]
 800585e:	4543      	cmp	r3, r8
 8005860:	d8f2      	bhi.n	8005848 <dir_next+0xc8>
					fs->winsect -= n;							/* Restore window offset */
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	eba3 0308 	sub.w	r3, r3, r8
 8005868:	633b      	str	r3, [r7, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800586a:	f8c5 9018 	str.w	r9, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 800586e:	4649      	mov	r1, r9
 8005870:	4638      	mov	r0, r7
 8005872:	f7ff fc51 	bl	8005118 <clust2sect>
 8005876:	61e8      	str	r0, [r5, #28]
 8005878:	e79d      	b.n	80057b6 <dir_next+0x36>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800587a:	2004      	movs	r0, #4
 800587c:	e7a6      	b.n	80057cc <dir_next+0x4c>
 800587e:	2004      	movs	r0, #4
 8005880:	e7a4      	b.n	80057cc <dir_next+0x4c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005882:	2002      	movs	r0, #2
 8005884:	e7a2      	b.n	80057cc <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005886:	2001      	movs	r0, #1
 8005888:	e7a0      	b.n	80057cc <dir_next+0x4c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800588a:	2007      	movs	r0, #7
 800588c:	e79e      	b.n	80057cc <dir_next+0x4c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800588e:	2002      	movs	r0, #2
 8005890:	e79c      	b.n	80057cc <dir_next+0x4c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005892:	2001      	movs	r0, #1
 8005894:	e79a      	b.n	80057cc <dir_next+0x4c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005896:	2001      	movs	r0, #1
 8005898:	e798      	b.n	80057cc <dir_next+0x4c>

0800589a <dir_register>:
{
 800589a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800589e:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80058a0:	2100      	movs	r1, #0
 80058a2:	f7ff fe5f 	bl	8005564 <dir_sdi>
	if (res == FR_OK) {
 80058a6:	bb48      	cbnz	r0, 80058fc <dir_register+0x62>
			res = dir_next(dp, 1);
 80058a8:	2701      	movs	r7, #1
 80058aa:	e005      	b.n	80058b8 <dir_register+0x1e>
 80058ac:	4639      	mov	r1, r7
 80058ae:	4620      	mov	r0, r4
 80058b0:	f7ff ff66 	bl	8005780 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80058b4:	4605      	mov	r5, r0
 80058b6:	bb30      	cbnz	r0, 8005906 <dir_register+0x6c>
			res = move_window(fs, dp->sect);
 80058b8:	69e1      	ldr	r1, [r4, #28]
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff fcca 	bl	8005254 <move_window>
			if (res != FR_OK) break;
 80058c0:	4605      	mov	r5, r0
 80058c2:	bb00      	cbnz	r0, 8005906 <dir_register+0x6c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80058c4:	6a23      	ldr	r3, [r4, #32]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2be5      	cmp	r3, #229	; 0xe5
 80058ca:	d001      	beq.n	80058d0 <dir_register+0x36>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1ed      	bne.n	80058ac <dir_register+0x12>
		res = move_window(fs, dp->sect);
 80058d0:	69e1      	ldr	r1, [r4, #28]
 80058d2:	4630      	mov	r0, r6
 80058d4:	f7ff fcbe 	bl	8005254 <move_window>
		if (res == FR_OK) {
 80058d8:	4605      	mov	r5, r0
 80058da:	b108      	cbz	r0, 80058e0 <dir_register+0x46>
}
 80058dc:	4628      	mov	r0, r5
 80058de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80058e0:	2220      	movs	r2, #32
 80058e2:	2100      	movs	r1, #0
 80058e4:	6a20      	ldr	r0, [r4, #32]
 80058e6:	f7ff fb36 	bl	8004f56 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80058ea:	220b      	movs	r2, #11
 80058ec:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80058f0:	6a20      	ldr	r0, [r4, #32]
 80058f2:	f7ff fb26 	bl	8004f42 <mem_cpy>
			fs->wflag = 1;
 80058f6:	2301      	movs	r3, #1
 80058f8:	70f3      	strb	r3, [r6, #3]
 80058fa:	e7ef      	b.n	80058dc <dir_register+0x42>
 80058fc:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80058fe:	2804      	cmp	r0, #4
 8005900:	d1ec      	bne.n	80058dc <dir_register+0x42>
 8005902:	2507      	movs	r5, #7
 8005904:	e7ea      	b.n	80058dc <dir_register+0x42>
 8005906:	2d04      	cmp	r5, #4
 8005908:	d0fb      	beq.n	8005902 <dir_register+0x68>
 800590a:	e7e7      	b.n	80058dc <dir_register+0x42>

0800590c <dir_read>:
{
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	4604      	mov	r4, r0
 8005910:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 8005912:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 8005914:	f04f 0c04 	mov.w	ip, #4
		res = dir_next(dp, 0);		/* Next entry */
 8005918:	2600      	movs	r6, #0
	while (dp->sect) {
 800591a:	e005      	b.n	8005928 <dir_read+0x1c>
		res = dir_next(dp, 0);		/* Next entry */
 800591c:	4631      	mov	r1, r6
 800591e:	4620      	mov	r0, r4
 8005920:	f7ff ff2e 	bl	8005780 <dir_next>
		if (res != FR_OK) break;
 8005924:	4684      	mov	ip, r0
 8005926:	bb10      	cbnz	r0, 800596e <dir_read+0x62>
	while (dp->sect) {
 8005928:	69e1      	ldr	r1, [r4, #28]
 800592a:	b1d1      	cbz	r1, 8005962 <dir_read+0x56>
		res = move_window(fs, dp->sect);
 800592c:	4628      	mov	r0, r5
 800592e:	f7ff fc91 	bl	8005254 <move_window>
		if (res != FR_OK) break;
 8005932:	4684      	mov	ip, r0
 8005934:	b9d8      	cbnz	r0, 800596e <dir_read+0x62>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005936:	6a23      	ldr	r3, [r4, #32]
 8005938:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 800593a:	b1b2      	cbz	r2, 800596a <dir_read+0x5e>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800593c:	7adb      	ldrb	r3, [r3, #11]
 800593e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005942:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005944:	2ae5      	cmp	r2, #229	; 0xe5
 8005946:	d0e9      	beq.n	800591c <dir_read+0x10>
 8005948:	2a2e      	cmp	r2, #46	; 0x2e
 800594a:	d0e7      	beq.n	800591c <dir_read+0x10>
 800594c:	2b0f      	cmp	r3, #15
 800594e:	d0e5      	beq.n	800591c <dir_read+0x10>
 8005950:	f023 0320 	bic.w	r3, r3, #32
 8005954:	2b08      	cmp	r3, #8
 8005956:	bf14      	ite	ne
 8005958:	2300      	movne	r3, #0
 800595a:	2301      	moveq	r3, #1
 800595c:	42bb      	cmp	r3, r7
 800595e:	d1dd      	bne.n	800591c <dir_read+0x10>
 8005960:	e007      	b.n	8005972 <dir_read+0x66>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005962:	f1bc 0f00 	cmp.w	ip, #0
 8005966:	d004      	beq.n	8005972 <dir_read+0x66>
 8005968:	e001      	b.n	800596e <dir_read+0x62>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800596a:	f04f 0c04 	mov.w	ip, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800596e:	2300      	movs	r3, #0
 8005970:	61e3      	str	r3, [r4, #28]
}
 8005972:	4660      	mov	r0, ip
 8005974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005978 <check_fs>:
{
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800597c:	2300      	movs	r3, #0
 800597e:	70c3      	strb	r3, [r0, #3]
 8005980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005984:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005986:	f7ff fc65 	bl	8005254 <move_window>
 800598a:	bb40      	cbnz	r0, 80059de <check_fs+0x66>
 800598c:	4605      	mov	r5, r0
	rv = rv << 8 | ptr[0];
 800598e:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8005992:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8005996:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800599a:	b21b      	sxth	r3, r3
 800599c:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <check_fs+0x70>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d11f      	bne.n	80059e2 <check_fs+0x6a>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80059a2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80059a6:	2be9      	cmp	r3, #233	; 0xe9
 80059a8:	d007      	beq.n	80059ba <check_fs+0x42>
 80059aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80059b0:	4a0e      	ldr	r2, [pc, #56]	; (80059ec <check_fs+0x74>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d001      	beq.n	80059ba <check_fs+0x42>
	return 2;
 80059b6:	2502      	movs	r5, #2
 80059b8:	e014      	b.n	80059e4 <check_fs+0x6c>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80059ba:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 80059be:	f7ff faad 	bl	8004f1c <ld_dword>
 80059c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <check_fs+0x78>)
 80059c8:	4298      	cmp	r0, r3
 80059ca:	d00b      	beq.n	80059e4 <check_fs+0x6c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80059cc:	f104 0086 	add.w	r0, r4, #134	; 0x86
 80059d0:	f7ff faa4 	bl	8004f1c <ld_dword>
	return 2;
 80059d4:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <check_fs+0x7c>)
 80059d6:	4298      	cmp	r0, r3
 80059d8:	bf18      	it	ne
 80059da:	2502      	movne	r5, #2
 80059dc:	e002      	b.n	80059e4 <check_fs+0x6c>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80059de:	2504      	movs	r5, #4
 80059e0:	e000      	b.n	80059e4 <check_fs+0x6c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80059e2:	2503      	movs	r5, #3
}
 80059e4:	4628      	mov	r0, r5
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	ffffaa55 	.word	0xffffaa55
 80059ec:	009000eb 	.word	0x009000eb
 80059f0:	00544146 	.word	0x00544146
 80059f4:	33544146 	.word	0x33544146

080059f8 <find_volume>:
{
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	b087      	sub	sp, #28
 80059fe:	460e      	mov	r6, r1
 8005a00:	4614      	mov	r4, r2
	*rfs = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8005a06:	f7ff fbab 	bl	8005160 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a0a:	1e07      	subs	r7, r0, #0
 8005a0c:	f2c0 8196 	blt.w	8005d3c <find_volume+0x344>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005a10:	4bc5      	ldr	r3, [pc, #788]	; (8005d28 <find_volume+0x330>)
 8005a12:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	f000 8195 	beq.w	8005d46 <find_volume+0x34e>
	*rfs = fs;							/* Return pointer to the file system object */
 8005a1c:	6035      	str	r5, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005a1e:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005a22:	782b      	ldrb	r3, [r5, #0]
 8005a24:	b16b      	cbz	r3, 8005a42 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8005a26:	7868      	ldrb	r0, [r5, #1]
 8005a28:	f7ff fa2e 	bl	8004e88 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005a2c:	f010 0f01 	tst.w	r0, #1
 8005a30:	d107      	bne.n	8005a42 <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005a32:	2c00      	cmp	r4, #0
 8005a34:	f000 8183 	beq.w	8005d3e <find_volume+0x346>
				return FR_WRITE_PROTECTED;
 8005a38:	f010 0404 	ands.w	r4, r0, #4
 8005a3c:	bf18      	it	ne
 8005a3e:	240a      	movne	r4, #10
 8005a40:	e17d      	b.n	8005d3e <find_volume+0x346>
	fs->fs_type = 0;					/* Clear the file system object */
 8005a42:	2300      	movs	r3, #0
 8005a44:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005a46:	b2f8      	uxtb	r0, r7
 8005a48:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005a4a:	f7ff fa29 	bl	8004ea0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005a4e:	f010 0f01 	tst.w	r0, #1
 8005a52:	f040 817a 	bne.w	8005d4a <find_volume+0x352>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005a56:	b11c      	cbz	r4, 8005a60 <find_volume+0x68>
 8005a58:	f010 0f04 	tst.w	r0, #4
 8005a5c:	f040 8177 	bne.w	8005d4e <find_volume+0x356>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005a60:	f105 020c 	add.w	r2, r5, #12
 8005a64:	2102      	movs	r1, #2
 8005a66:	7868      	ldrb	r0, [r5, #1]
 8005a68:	f7ff fa4a 	bl	8004f00 <disk_ioctl>
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	f040 816f 	bne.w	8005d52 <find_volume+0x35a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005a74:	89aa      	ldrh	r2, [r5, #12]
 8005a76:	f5a2 7300 	sub.w	r3, r2, #512	; 0x200
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005a80:	f200 8169 	bhi.w	8005d56 <find_volume+0x35e>
 8005a84:	1e53      	subs	r3, r2, #1
 8005a86:	4213      	tst	r3, r2
 8005a88:	d001      	beq.n	8005a8e <find_volume+0x96>
 8005a8a:	2401      	movs	r4, #1
 8005a8c:	e157      	b.n	8005d3e <find_volume+0x346>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a8e:	2100      	movs	r1, #0
 8005a90:	4628      	mov	r0, r5
 8005a92:	f7ff ff71 	bl	8005978 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a96:	2802      	cmp	r0, #2
 8005a98:	f000 80ac 	beq.w	8005bf4 <find_volume+0x1fc>
	bsect = 0;
 8005a9c:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005a9e:	2804      	cmp	r0, #4
 8005aa0:	f000 815b 	beq.w	8005d5a <find_volume+0x362>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005aa4:	2801      	cmp	r0, #1
 8005aa6:	f200 815a 	bhi.w	8005d5e <find_volume+0x366>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005aaa:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
	rv = rv << 8 | ptr[0];
 8005aae:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 8005ab2:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005ab6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005aba:	459a      	cmp	sl, r3
 8005abc:	f040 8151 	bne.w	8005d62 <find_volume+0x36a>
	rv = rv << 8 | ptr[0];
 8005ac0:	f895 004b 	ldrb.w	r0, [r5, #75]	; 0x4b
 8005ac4:	f895 704a 	ldrb.w	r7, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005ac8:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
 8005acc:	d104      	bne.n	8005ad8 <find_volume+0xe0>
 8005ace:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8005ad2:	f7ff fa23 	bl	8004f1c <ld_dword>
 8005ad6:	4607      	mov	r7, r0
		fs->fsize = fasize;
 8005ad8:	61ef      	str	r7, [r5, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005ada:	f895 9044 	ldrb.w	r9, [r5, #68]	; 0x44
 8005ade:	f885 9002 	strb.w	r9, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005ae2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	f200 813c 	bhi.w	8005d66 <find_volume+0x36e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005aee:	f895 b041 	ldrb.w	fp, [r5, #65]	; 0x41
 8005af2:	fa1f f38b 	uxth.w	r3, fp
 8005af6:	816b      	strh	r3, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8136 	beq.w	8005d6a <find_volume+0x372>
 8005afe:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005b02:	ea13 0f0b 	tst.w	r3, fp
 8005b06:	f040 8132 	bne.w	8005d6e <find_volume+0x376>
	rv = rv << 8 | ptr[0];
 8005b0a:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8005b0e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8005b12:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 8005b16:	fa0f f388 	sxth.w	r3, r8
 8005b1a:	9301      	str	r3, [sp, #4]
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005b1c:	f8a5 8008 	strh.w	r8, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005b20:	ea4f 125a 	mov.w	r2, sl, lsr #5
 8005b24:	9200      	str	r2, [sp, #0]
 8005b26:	fbb8 f3f2 	udiv	r3, r8, r2
 8005b2a:	fb02 8313 	mls	r3, r2, r3, r8
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f040 811e 	bne.w	8005d72 <find_volume+0x37a>
	rv = rv << 8 | ptr[0];
 8005b36:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8005b3a:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005b3e:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 8005b42:	d103      	bne.n	8005b4c <find_volume+0x154>
 8005b44:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8005b48:	f7ff f9e8 	bl	8004f1c <ld_dword>
	rv = rv << 8 | ptr[0];
 8005b4c:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
 8005b50:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005b54:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8005b58:	f000 810d 	beq.w	8005d76 <find_volume+0x37e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b5c:	fb07 f109 	mul.w	r1, r7, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005b60:	9b00      	ldr	r3, [sp, #0]
 8005b62:	fbb8 f3f3 	udiv	r3, r8, r3
 8005b66:	4413      	add	r3, r2
 8005b68:	440b      	add	r3, r1
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005b6a:	4298      	cmp	r0, r3
 8005b6c:	f0c0 8105 	bcc.w	8005d7a <find_volume+0x382>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005b70:	1ac0      	subs	r0, r0, r3
 8005b72:	fbb0 fcfb 	udiv	ip, r0, fp
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005b76:	4558      	cmp	r0, fp
 8005b78:	f0c0 8101 	bcc.w	8005d7e <find_volume+0x386>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005b7c:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8005b80:	4584      	cmp	ip, r0
 8005b82:	d863      	bhi.n	8005c4c <find_volume+0x254>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005b84:	f640 70f5 	movw	r0, #4085	; 0xff5
 8005b88:	4584      	cmp	ip, r0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005b8a:	bf88      	it	hi
 8005b8c:	f04f 0902 	movhi.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005b90:	d85e      	bhi.n	8005c50 <find_volume+0x258>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005b92:	f10c 0b02 	add.w	fp, ip, #2
 8005b96:	f8c5 b018 	str.w	fp, [r5, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005b9a:	622e      	str	r6, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005b9c:	4432      	add	r2, r6
 8005b9e:	626a      	str	r2, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005ba0:	4433      	add	r3, r6
 8005ba2:	62eb      	str	r3, [r5, #44]	; 0x2c
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005ba4:	f1b8 0f00 	cmp.w	r8, #0
 8005ba8:	f000 80f3 	beq.w	8005d92 <find_volume+0x39a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005bac:	440a      	add	r2, r1
 8005bae:	62aa      	str	r2, [r5, #40]	; 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005bb0:	f04f 0901 	mov.w	r9, #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005bb4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8005bb8:	f00b 0b01 	and.w	fp, fp, #1
 8005bbc:	eb0b 0b53 	add.w	fp, fp, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005bc0:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005bc4:	445b      	add	r3, fp
 8005bc6:	fbb3 fafa 	udiv	sl, r3, sl
 8005bca:	45ba      	cmp	sl, r7
 8005bcc:	f200 80df 	bhi.w	8005d8e <find_volume+0x396>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bd4:	616b      	str	r3, [r5, #20]
 8005bd6:	612b      	str	r3, [r5, #16]
		fs->fsi_flag = 0x80;
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	712b      	strb	r3, [r5, #4]
	fs->fs_type = fmt;		/* FAT sub-type */
 8005bdc:	f885 9000 	strb.w	r9, [r5]
	fs->id = ++Fsid;		/* File system mount ID */
 8005be0:	4a52      	ldr	r2, [pc, #328]	; (8005d2c <find_volume+0x334>)
 8005be2:	8813      	ldrh	r3, [r2, #0]
 8005be4:	3301      	adds	r3, #1
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	8013      	strh	r3, [r2, #0]
 8005bea:	80eb      	strh	r3, [r5, #6]
	clear_lock(fs);
 8005bec:	4628      	mov	r0, r5
 8005bee:	f7ff fa7f 	bl	80050f0 <clear_lock>
	return FR_OK;
 8005bf2:	e0a4      	b.n	8005d3e <find_volume+0x346>
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	f505 76fd 	add.w	r6, r5, #506	; 0x1fa
 8005bfa:	f205 293a 	addw	r9, r5, #570	; 0x23a
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005bfe:	46b8      	mov	r8, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005c00:	f04f 0a00 	mov.w	sl, #0
 8005c04:	e005      	b.n	8005c12 <find_volume+0x21a>
 8005c06:	4650      	mov	r0, sl
 8005c08:	f848 0b04 	str.w	r0, [r8], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005c0c:	3610      	adds	r6, #16
 8005c0e:	454e      	cmp	r6, r9
 8005c10:	d007      	beq.n	8005c22 <find_volume+0x22a>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005c12:	f816 3c04 	ldrb.w	r3, [r6, #-4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f5      	beq.n	8005c06 <find_volume+0x20e>
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f7ff f97e 	bl	8004f1c <ld_dword>
 8005c20:	e7f2      	b.n	8005c08 <find_volume+0x210>
 8005c22:	f107 0810 	add.w	r8, r7, #16
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005c26:	f04f 0903 	mov.w	r9, #3
 8005c2a:	e009      	b.n	8005c40 <find_volume+0x248>
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f7ff fea2 	bl	8005978 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005c34:	2801      	cmp	r0, #1
 8005c36:	f67f af38 	bls.w	8005aaa <find_volume+0xb2>
 8005c3a:	45b8      	cmp	r8, r7
 8005c3c:	f43f af2f 	beq.w	8005a9e <find_volume+0xa6>
			bsect = br[i];
 8005c40:	f857 6b04 	ldr.w	r6, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005c44:	2e00      	cmp	r6, #0
 8005c46:	d1f1      	bne.n	8005c2c <find_volume+0x234>
 8005c48:	4648      	mov	r0, r9
 8005c4a:	e7f6      	b.n	8005c3a <find_volume+0x242>
		fmt = FS_FAT32;
 8005c4c:	f04f 0903 	mov.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005c50:	f10c 0b02 	add.w	fp, ip, #2
 8005c54:	f8c5 b018 	str.w	fp, [r5, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005c58:	622e      	str	r6, [r5, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005c5a:	4432      	add	r2, r6
 8005c5c:	626a      	str	r2, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005c5e:	4433      	add	r3, r6
 8005c60:	62eb      	str	r3, [r5, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005c62:	f1b9 0f03 	cmp.w	r9, #3
 8005c66:	d153      	bne.n	8005d10 <find_volume+0x318>
	rv = rv << 8 | ptr[0];
 8005c68:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
 8005c6c:	f895 205e 	ldrb.w	r2, [r5, #94]	; 0x5e
 8005c70:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005c74:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f040 8082 	bne.w	8005d82 <find_volume+0x38a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005c7e:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8005c82:	f7ff f94b 	bl	8004f1c <ld_dword>
 8005c86:	62a8      	str	r0, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005c88:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005c8c:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8005c90:	fbbb fafa 	udiv	sl, fp, sl
 8005c94:	4557      	cmp	r7, sl
 8005c96:	d376      	bcc.n	8005d86 <find_volume+0x38e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c9c:	616b      	str	r3, [r5, #20]
 8005c9e:	612b      	str	r3, [r5, #16]
		fs->fsi_flag = 0x80;
 8005ca0:	2380      	movs	r3, #128	; 0x80
 8005ca2:	712b      	strb	r3, [r5, #4]
	rv = rv << 8 | ptr[0];
 8005ca4:	f895 2065 	ldrb.w	r2, [r5, #101]	; 0x65
 8005ca8:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 8005cac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005cb0:	b21b      	sxth	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d192      	bne.n	8005bdc <find_volume+0x1e4>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005cb6:	1c71      	adds	r1, r6, #1
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f7ff facb 	bl	8005254 <move_window>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d18c      	bne.n	8005bdc <find_volume+0x1e4>
			fs->fsi_flag = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	712b      	strb	r3, [r5, #4]
	rv = rv << 8 | ptr[0];
 8005cc6:	f895 2233 	ldrb.w	r2, [r5, #563]	; 0x233
 8005cca:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
 8005cce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005cd2:	b21b      	sxth	r3, r3
 8005cd4:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <find_volume+0x338>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d180      	bne.n	8005bdc <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005cda:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8005cde:	f7ff f91d 	bl	8004f1c <ld_dword>
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <find_volume+0x33c>)
 8005ce4:	4298      	cmp	r0, r3
 8005ce6:	f47f af79 	bne.w	8005bdc <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005cea:	f505 7006 	add.w	r0, r5, #536	; 0x218
 8005cee:	f7ff f915 	bl	8004f1c <ld_dword>
 8005cf2:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <find_volume+0x340>)
 8005cf4:	4298      	cmp	r0, r3
 8005cf6:	f47f af71 	bne.w	8005bdc <find_volume+0x1e4>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005cfa:	f505 7007 	add.w	r0, r5, #540	; 0x21c
 8005cfe:	f7ff f90d 	bl	8004f1c <ld_dword>
 8005d02:	6168      	str	r0, [r5, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005d04:	f505 7008 	add.w	r0, r5, #544	; 0x220
 8005d08:	f7ff f908 	bl	8004f1c <ld_dword>
 8005d0c:	6128      	str	r0, [r5, #16]
 8005d0e:	e765      	b.n	8005bdc <find_volume+0x1e4>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005d10:	f1b8 0f00 	cmp.w	r8, #0
 8005d14:	d039      	beq.n	8005d8a <find_volume+0x392>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005d16:	440a      	add	r2, r1
 8005d18:	62aa      	str	r2, [r5, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005d1a:	f1b9 0f02 	cmp.w	r9, #2
 8005d1e:	f47f af49 	bne.w	8005bb4 <find_volume+0x1bc>
 8005d22:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8005d26:	e74b      	b.n	8005bc0 <find_volume+0x1c8>
 8005d28:	200024f0 	.word	0x200024f0
 8005d2c:	20002514 	.word	0x20002514
 8005d30:	ffffaa55 	.word	0xffffaa55
 8005d34:	41615252 	.word	0x41615252
 8005d38:	61417272 	.word	0x61417272
	if (vol < 0) return FR_INVALID_DRIVE;
 8005d3c:	240b      	movs	r4, #11
}
 8005d3e:	4620      	mov	r0, r4
 8005d40:	b007      	add	sp, #28
 8005d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005d46:	240c      	movs	r4, #12
 8005d48:	e7f9      	b.n	8005d3e <find_volume+0x346>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d4a:	2403      	movs	r4, #3
 8005d4c:	e7f7      	b.n	8005d3e <find_volume+0x346>
		return FR_WRITE_PROTECTED;
 8005d4e:	240a      	movs	r4, #10
 8005d50:	e7f5      	b.n	8005d3e <find_volume+0x346>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005d52:	2401      	movs	r4, #1
 8005d54:	e7f3      	b.n	8005d3e <find_volume+0x346>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005d56:	2401      	movs	r4, #1
 8005d58:	e7f1      	b.n	8005d3e <find_volume+0x346>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005d5a:	2401      	movs	r4, #1
 8005d5c:	e7ef      	b.n	8005d3e <find_volume+0x346>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005d5e:	240d      	movs	r4, #13
 8005d60:	e7ed      	b.n	8005d3e <find_volume+0x346>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005d62:	240d      	movs	r4, #13
 8005d64:	e7eb      	b.n	8005d3e <find_volume+0x346>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005d66:	240d      	movs	r4, #13
 8005d68:	e7e9      	b.n	8005d3e <find_volume+0x346>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005d6a:	240d      	movs	r4, #13
 8005d6c:	e7e7      	b.n	8005d3e <find_volume+0x346>
 8005d6e:	240d      	movs	r4, #13
 8005d70:	e7e5      	b.n	8005d3e <find_volume+0x346>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005d72:	240d      	movs	r4, #13
 8005d74:	e7e3      	b.n	8005d3e <find_volume+0x346>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005d76:	240d      	movs	r4, #13
 8005d78:	e7e1      	b.n	8005d3e <find_volume+0x346>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005d7a:	240d      	movs	r4, #13
 8005d7c:	e7df      	b.n	8005d3e <find_volume+0x346>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005d7e:	240d      	movs	r4, #13
 8005d80:	e7dd      	b.n	8005d3e <find_volume+0x346>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005d82:	240d      	movs	r4, #13
 8005d84:	e7db      	b.n	8005d3e <find_volume+0x346>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005d86:	240d      	movs	r4, #13
 8005d88:	e7d9      	b.n	8005d3e <find_volume+0x346>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005d8a:	240d      	movs	r4, #13
 8005d8c:	e7d7      	b.n	8005d3e <find_volume+0x346>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005d8e:	240d      	movs	r4, #13
 8005d90:	e7d5      	b.n	8005d3e <find_volume+0x346>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005d92:	240d      	movs	r4, #13
 8005d94:	e7d3      	b.n	8005d3e <find_volume+0x346>
 8005d96:	bf00      	nop

08005d98 <ld_clust>:
	rv = rv << 8 | ptr[0];
 8005d98:	7eca      	ldrb	r2, [r1, #27]
 8005d9a:	7e8b      	ldrb	r3, [r1, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8005d9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8005da0:	7802      	ldrb	r2, [r0, #0]
 8005da2:	2a03      	cmp	r2, #3
 8005da4:	d001      	beq.n	8005daa <ld_clust+0x12>
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	4770      	bx	lr
	rv = rv << 8 | ptr[0];
 8005daa:	7d48      	ldrb	r0, [r1, #21]
 8005dac:	7d0a      	ldrb	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005dae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
 8005db6:	e7f6      	b.n	8005da6 <ld_clust+0xe>

08005db8 <follow_path>:
{
 8005db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	4604      	mov	r4, r0
	FATFS *fs = obj->fs;
 8005dc0:	6806      	ldr	r6, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005dc2:	460d      	mov	r5, r1
 8005dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dc8:	2b2f      	cmp	r3, #47	; 0x2f
 8005dca:	d0fa      	beq.n	8005dc2 <follow_path+0xa>
 8005dcc:	2b5c      	cmp	r3, #92	; 0x5c
 8005dce:	d0f8      	beq.n	8005dc2 <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005dd4:	782b      	ldrb	r3, [r5, #0]
 8005dd6:	2b1f      	cmp	r3, #31
 8005dd8:	d902      	bls.n	8005de0 <follow_path+0x28>
	p = *path; sfn = dp->fn;
 8005dda:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8005dde:	e0a8      	b.n	8005f32 <follow_path+0x17a>
		dp->fn[NSFLAG] = NS_NONAME;
 8005de0:	2380      	movs	r3, #128	; 0x80
 8005de2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005de6:	2100      	movs	r1, #0
 8005de8:	4620      	mov	r0, r4
 8005dea:	f7ff fbbb 	bl	8005564 <dir_sdi>
 8005dee:	4686      	mov	lr, r0
}
 8005df0:	4670      	mov	r0, lr
 8005df2:	b003      	add	sp, #12
 8005df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df8:	1e42      	subs	r2, r0, #1
 8005dfa:	442a      	add	r2, r5
 8005dfc:	9901      	ldr	r1, [sp, #4]
 8005dfe:	f1c1 0c01 	rsb	ip, r1, #1
 8005e02:	eb0c 0002 	add.w	r0, ip, r2
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005e06:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005e0a:	292f      	cmp	r1, #47	; 0x2f
 8005e0c:	d0f9      	beq.n	8005e02 <follow_path+0x4a>
 8005e0e:	295c      	cmp	r1, #92	; 0x5c
 8005e10:	d0f7      	beq.n	8005e02 <follow_path+0x4a>
	*path = p + si;						/* Return pointer to the next segment */
 8005e12:	4405      	add	r5, r0
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005e14:	2f00      	cmp	r7, #0
 8005e16:	f000 80b4 	beq.w	8005f82 <follow_path+0x1ca>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005e1a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8005e1e:	2ae5      	cmp	r2, #229	; 0xe5
 8005e20:	bf04      	itt	eq
 8005e22:	2205      	moveq	r2, #5
 8005e24:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005e28:	2b21      	cmp	r3, #33	; 0x21
 8005e2a:	bf34      	ite	cc
 8005e2c:	2304      	movcc	r3, #4
 8005e2e:	2300      	movcs	r3, #0
 8005e30:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	FATFS *fs = dp->obj.fs;
 8005e34:	6827      	ldr	r7, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005e36:	2100      	movs	r1, #0
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7ff fb93 	bl	8005564 <dir_sdi>
	if (res != FR_OK) return res;
 8005e3e:	4686      	mov	lr, r0
 8005e40:	2800      	cmp	r0, #0
 8005e42:	f040 8097 	bne.w	8005f74 <follow_path+0x1bc>
		res = dir_next(dp, 0);	/* Next entry */
 8005e46:	f04f 0800 	mov.w	r8, #0
 8005e4a:	e032      	b.n	8005eb2 <follow_path+0xfa>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005e4c:	3b80      	subs	r3, #128	; 0x80
 8005e4e:	4a51      	ldr	r2, [pc, #324]	; (8005f94 <follow_path+0x1dc>)
 8005e50:	5cd3      	ldrb	r3, [r2, r3]
 8005e52:	e017      	b.n	8005e84 <follow_path+0xcc>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 8094 	bne.w	8005f82 <follow_path+0x1ca>
			sfn[i++] = c;
 8005e5a:	f80a 3007 	strb.w	r3, [sl, r7]
 8005e5e:	3701      	adds	r7, #1
		c = (BYTE)p[si++];
 8005e60:	3001      	adds	r0, #1
 8005e62:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d9d3      	bls.n	8005e12 <follow_path+0x5a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005e6a:	2b2f      	cmp	r3, #47	; 0x2f
 8005e6c:	d0c4      	beq.n	8005df8 <follow_path+0x40>
 8005e6e:	2b5c      	cmp	r3, #92	; 0x5c
 8005e70:	d0c2      	beq.n	8005df8 <follow_path+0x40>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005e72:	2b2e      	cmp	r3, #46	; 0x2e
 8005e74:	f000 8088 	beq.w	8005f88 <follow_path+0x1d0>
 8005e78:	4567      	cmp	r7, ip
 8005e7a:	f080 8082 	bcs.w	8005f82 <follow_path+0x1ca>
		if (c >= 0x80) {				/* Extended character? */
 8005e7e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e82:	d1e3      	bne.n	8005e4c <follow_path+0x94>
	while (*str && *str != chr) str++;
 8005e84:	4642      	mov	r2, r8
 8005e86:	4944      	ldr	r1, [pc, #272]	; (8005f98 <follow_path+0x1e0>)
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d0e3      	beq.n	8005e54 <follow_path+0x9c>
 8005e8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005e90:	2a00      	cmp	r2, #0
 8005e92:	d1f9      	bne.n	8005e88 <follow_path+0xd0>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005e94:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	2a19      	cmp	r2, #25
 8005e9c:	bf9c      	itt	ls
 8005e9e:	3b20      	subls	r3, #32
 8005ea0:	b2db      	uxtbls	r3, r3
 8005ea2:	e7da      	b.n	8005e5a <follow_path+0xa2>
		res = dir_next(dp, 0);	/* Next entry */
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f7ff fc6a 	bl	8005780 <dir_next>
	} while (res == FR_OK);
 8005eac:	4686      	mov	lr, r0
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d160      	bne.n	8005f74 <follow_path+0x1bc>
		res = move_window(fs, dp->sect);
 8005eb2:	69e1      	ldr	r1, [r4, #28]
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	f7ff f9cd 	bl	8005254 <move_window>
		if (res != FR_OK) break;
 8005eba:	4686      	mov	lr, r0
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d159      	bne.n	8005f74 <follow_path+0x1bc>
		c = dp->dir[DIR_Name];
 8005ec0:	6a21      	ldr	r1, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005ec2:	780b      	ldrb	r3, [r1, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d048      	beq.n	8005f5a <follow_path+0x1a2>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005ec8:	f891 c00b 	ldrb.w	ip, [r1, #11]
 8005ecc:	f00c 033f 	and.w	r3, ip, #63	; 0x3f
 8005ed0:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005ed2:	f891 e00b 	ldrb.w	lr, [r1, #11]
 8005ed6:	f01e 0e08 	ands.w	lr, lr, #8
 8005eda:	d1e3      	bne.n	8005ea4 <follow_path+0xec>
		r = *d++ - *s++;
 8005edc:	1c4a      	adds	r2, r1, #1
 8005ede:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8005ee2:	f811 3b0b 	ldrb.w	r3, [r1], #11
 8005ee6:	f894 9024 	ldrb.w	r9, [r4, #36]	; 0x24
 8005eea:	eba3 0309 	sub.w	r3, r3, r9
	} while (--cnt && r == 0);
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1d8      	bne.n	8005ea4 <follow_path+0xec>
		r = *d++ - *s++;
 8005ef2:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005ef6:	f810 9b01 	ldrb.w	r9, [r0], #1
 8005efa:	eba3 0309 	sub.w	r3, r3, r9
	} while (--cnt && r == 0);
 8005efe:	4291      	cmp	r1, r2
 8005f00:	d1f5      	bne.n	8005eee <follow_path+0x136>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1ce      	bne.n	8005ea4 <follow_path+0xec>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f06:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005f0a:	f013 0f04 	tst.w	r3, #4
 8005f0e:	f47f af6f 	bne.w	8005df0 <follow_path+0x38>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005f12:	f01c 0f10 	tst.w	ip, #16
 8005f16:	d02a      	beq.n	8005f6e <follow_path+0x1b6>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005f18:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8005f1c:	89b2      	ldrh	r2, [r6, #12]
 8005f1e:	6961      	ldr	r1, [r4, #20]
 8005f20:	fbb1 f0f2 	udiv	r0, r1, r2
 8005f24:	fb02 1110 	mls	r1, r2, r0, r1
 8005f28:	4419      	add	r1, r3
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7ff ff34 	bl	8005d98 <ld_clust>
 8005f30:	60a0      	str	r0, [r4, #8]
	mem_set(sfn, ' ', 11);
 8005f32:	220b      	movs	r2, #11
 8005f34:	2120      	movs	r1, #32
 8005f36:	4650      	mov	r0, sl
 8005f38:	f7ff f80d 	bl	8004f56 <mem_set>
		c = (BYTE)p[si++];
 8005f3c:	782b      	ldrb	r3, [r5, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d91f      	bls.n	8005f82 <follow_path+0x1ca>
 8005f42:	9501      	str	r5, [sp, #4]
 8005f44:	46ae      	mov	lr, r5
	si = i = 0; ni = 8;
 8005f46:	2700      	movs	r7, #0
 8005f48:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 8005f4c:	2001      	movs	r0, #1
			i = 8; ni = 11;				/* Goto extension */
 8005f4e:	46e3      	mov	fp, ip
 8005f50:	f04f 090b 	mov.w	r9, #11
	while (*str && *str != chr) str++;
 8005f54:	f04f 0822 	mov.w	r8, #34	; 0x22
 8005f58:	e787      	b.n	8005e6a <follow_path+0xb2>
			ns = dp->fn[NSFLAG];
 8005f5a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8005f5e:	f013 0f04 	tst.w	r3, #4
 8005f62:	bf0c      	ite	eq
 8005f64:	f04f 0e05 	moveq.w	lr, #5
 8005f68:	f04f 0e04 	movne.w	lr, #4
 8005f6c:	e740      	b.n	8005df0 <follow_path+0x38>
				res = FR_NO_PATH; break;
 8005f6e:	f04f 0e05 	mov.w	lr, #5
 8005f72:	e73d      	b.n	8005df0 <follow_path+0x38>
			ns = dp->fn[NSFLAG];
 8005f74:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005f78:	f1be 0f04 	cmp.w	lr, #4
 8005f7c:	f47f af38 	bne.w	8005df0 <follow_path+0x38>
 8005f80:	e7ed      	b.n	8005f5e <follow_path+0x1a6>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005f82:	f04f 0e06 	mov.w	lr, #6
	return res;
 8005f86:	e733      	b.n	8005df0 <follow_path+0x38>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005f88:	f1bc 0f0b 	cmp.w	ip, #11
 8005f8c:	d0f9      	beq.n	8005f82 <follow_path+0x1ca>
			i = 8; ni = 11;				/* Goto extension */
 8005f8e:	465f      	mov	r7, fp
 8005f90:	46cc      	mov	ip, r9
 8005f92:	e765      	b.n	8005e60 <follow_path+0xa8>
 8005f94:	0800a690 	.word	0x0800a690
 8005f98:	0800a680 	.word	0x0800a680

08005f9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	9001      	str	r0, [sp, #4]
 8005fa2:	9100      	str	r1, [sp, #0]
 8005fa4:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005fa6:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005fa8:	a803      	add	r0, sp, #12
 8005faa:	f7ff f8d9 	bl	8005160 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005fae:	1e04      	subs	r4, r0, #0
 8005fb0:	db1c      	blt.n	8005fec <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <f_mount+0x64>)
 8005fb4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 8005fb8:	b125      	cbz	r5, 8005fc4 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f7ff f898 	bl	80050f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 8005fc4:	9b01      	ldr	r3, [sp, #4]
 8005fc6:	b1ab      	cbz	r3, 8005ff4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005fcc:	9b01      	ldr	r3, [sp, #4]
 8005fce:	4a0c      	ldr	r2, [pc, #48]	; (8006000 <f_mount+0x64>)
 8005fd0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005fd4:	b163      	cbz	r3, 8005ff0 <f_mount+0x54>
 8005fd6:	2e01      	cmp	r6, #1
 8005fd8:	d002      	beq.n	8005fe0 <f_mount+0x44>
 8005fda:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8005fdc:	b004      	add	sp, #16
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	a901      	add	r1, sp, #4
 8005fe4:	4668      	mov	r0, sp
 8005fe6:	f7ff fd07 	bl	80059f8 <find_volume>
	LEAVE_FF(fs, res);
 8005fea:	e7f7      	b.n	8005fdc <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005fec:	200b      	movs	r0, #11
 8005fee:	e7f5      	b.n	8005fdc <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	e7f3      	b.n	8005fdc <f_mount+0x40>
	FatFs[vol] = fs;					/* Register new fs object */
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	4b02      	ldr	r3, [pc, #8]	; (8006000 <f_mount+0x64>)
 8005ff8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ffc:	e7ee      	b.n	8005fdc <f_mount+0x40>
 8005ffe:	bf00      	nop
 8006000:	200024f0 	.word	0x200024f0

08006004 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006008:	b091      	sub	sp, #68	; 0x44
 800600a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800600c:	2800      	cmp	r0, #0
 800600e:	f000 809b 	beq.w	8006148 <f_open+0x144>
 8006012:	4614      	mov	r4, r2
 8006014:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006016:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800601a:	462a      	mov	r2, r5
 800601c:	a903      	add	r1, sp, #12
 800601e:	a801      	add	r0, sp, #4
 8006020:	f7ff fcea 	bl	80059f8 <find_volume>
	if (res == FR_OK) {
 8006024:	4607      	mov	r7, r0
 8006026:	b128      	cbz	r0, 8006034 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006028:	2300      	movs	r3, #0
 800602a:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800602c:	4638      	mov	r0, r7
 800602e:	b011      	add	sp, #68	; 0x44
 8006030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006038:	9901      	ldr	r1, [sp, #4]
 800603a:	a804      	add	r0, sp, #16
 800603c:	f7ff febc 	bl	8005db8 <follow_path>
		if (res == FR_OK) {
 8006040:	4603      	mov	r3, r0
 8006042:	2800      	cmp	r0, #0
 8006044:	f040 80a3 	bne.w	800618e <f_open+0x18a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006048:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800604c:	2b00      	cmp	r3, #0
 800604e:	f2c0 808c 	blt.w	800616a <f_open+0x166>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006052:	f035 0301 	bics.w	r3, r5, #1
 8006056:	bf14      	ite	ne
 8006058:	2101      	movne	r1, #1
 800605a:	2100      	moveq	r1, #0
 800605c:	a804      	add	r0, sp, #16
 800605e:	f7fe ff81 	bl	8004f64 <chk_lock>
 8006062:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006064:	f014 0f1c 	tst.w	r4, #28
 8006068:	f000 8095 	beq.w	8006196 <f_open+0x192>
			if (res != FR_OK) {					/* No file, create new */
 800606c:	b948      	cbnz	r0, 8006082 <f_open+0x7e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800606e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006072:	f013 0f11 	tst.w	r3, #17
 8006076:	d174      	bne.n	8006162 <f_open+0x15e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006078:	f014 0f04 	tst.w	r4, #4
 800607c:	d013      	beq.n	80060a6 <f_open+0xa2>
 800607e:	2708      	movs	r7, #8
 8006080:	e7d2      	b.n	8006028 <f_open+0x24>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006082:	2b04      	cmp	r3, #4
 8006084:	f040 8081 	bne.w	800618a <f_open+0x186>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006088:	4b75      	ldr	r3, [pc, #468]	; (8006260 <f_open+0x25c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	b123      	cbz	r3, 8006098 <f_open+0x94>
 800608e:	4b74      	ldr	r3, [pc, #464]	; (8006260 <f_open+0x25c>)
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	b10b      	cbz	r3, 8006098 <f_open+0x94>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006094:	2712      	movs	r7, #18
 8006096:	e7c7      	b.n	8006028 <f_open+0x24>
 8006098:	a804      	add	r0, sp, #16
 800609a:	f7ff fbfe 	bl	800589a <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800609e:	2800      	cmp	r0, #0
 80060a0:	d15d      	bne.n	800615e <f_open+0x15a>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80060a2:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80060a6:	f015 0f08 	tst.w	r5, #8
 80060aa:	f000 8086 	beq.w	80061ba <f_open+0x1b6>
				dw = GET_FATTIME();
 80060ae:	f7fe fed5 	bl	8004e5c <get_fattime>
 80060b2:	4604      	mov	r4, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80060b4:	4601      	mov	r1, r0
 80060b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80060b8:	300e      	adds	r0, #14
 80060ba:	f7fe ff3a 	bl	8004f32 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80060be:	4621      	mov	r1, r4
 80060c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80060c2:	3016      	adds	r0, #22
 80060c4:	f7fe ff35 	bl	8004f32 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80060c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060ca:	2220      	movs	r2, #32
 80060cc:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80060ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80060d2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80060d6:	4649      	mov	r1, r9
 80060d8:	4640      	mov	r0, r8
 80060da:	f7ff fe5d 	bl	8005d98 <ld_clust>
 80060de:	4604      	mov	r4, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80060e0:	2200      	movs	r2, #0
 80060e2:	4649      	mov	r1, r9
 80060e4:	4640      	mov	r0, r8
 80060e6:	f7ff f9b1 	bl	800544c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80060ea:	2100      	movs	r1, #0
 80060ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80060ee:	301c      	adds	r0, #28
 80060f0:	f7fe ff1f 	bl	8004f32 <st_dword>
					fs->wflag = 1;
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80060fa:	2c00      	cmp	r4, #0
 80060fc:	d05b      	beq.n	80061b6 <f_open+0x1b2>
						dw = fs->winsect;
 80060fe:	9b03      	ldr	r3, [sp, #12]
 8006100:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8006104:	2200      	movs	r2, #0
 8006106:	4621      	mov	r1, r4
 8006108:	a804      	add	r0, sp, #16
 800610a:	f7ff faf0 	bl	80056ee <remove_chain>
						if (res == FR_OK) {
 800610e:	b108      	cbz	r0, 8006114 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8006110:	4607      	mov	r7, r0
 8006112:	e789      	b.n	8006028 <f_open+0x24>
							res = move_window(fs, dw);
 8006114:	4641      	mov	r1, r8
 8006116:	9803      	ldr	r0, [sp, #12]
 8006118:	f7ff f89c 	bl	8005254 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800611c:	3c01      	subs	r4, #1
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	611c      	str	r4, [r3, #16]
		if (res == FR_OK) {
 8006122:	2800      	cmp	r0, #0
 8006124:	d047      	beq.n	80061b6 <f_open+0x1b2>
							res = move_window(fs, dw);
 8006126:	4607      	mov	r7, r0
 8006128:	e77e      	b.n	8006028 <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800612a:	fbb4 f2f5 	udiv	r2, r4, r5
 800612e:	4402      	add	r2, r0
 8006130:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006132:	2301      	movs	r3, #1
 8006134:	4641      	mov	r1, r8
 8006136:	f899 0001 	ldrb.w	r0, [r9, #1]
 800613a:	f7fe fec5 	bl	8004ec8 <disk_read>
 800613e:	2800      	cmp	r0, #0
 8006140:	f43f af74 	beq.w	800602c <f_open+0x28>
 8006144:	2701      	movs	r7, #1
 8006146:	e76f      	b.n	8006028 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8006148:	2709      	movs	r7, #9
 800614a:	e76f      	b.n	800602c <f_open+0x28>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800614c:	2702      	movs	r7, #2
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800614e:	e76b      	b.n	8006028 <f_open+0x24>
					if (clst <= 1) res = FR_INT_ERR;
 8006150:	2702      	movs	r7, #2
				fp->clust = clst;
 8006152:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006154:	e768      	b.n	8006028 <f_open+0x24>
					res = FR_NO_FILE;
 8006156:	2704      	movs	r7, #4
 8006158:	e766      	b.n	8006028 <f_open+0x24>
						res = FR_DENIED;
 800615a:	2707      	movs	r7, #7
		if (res == FR_OK) {
 800615c:	e764      	b.n	8006028 <f_open+0x24>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800615e:	4607      	mov	r7, r0
 8006160:	e762      	b.n	8006028 <f_open+0x24>
					res = FR_DENIED;
 8006162:	2707      	movs	r7, #7
 8006164:	e760      	b.n	8006028 <f_open+0x24>
 8006166:	461f      	mov	r7, r3
		if (res == FR_OK) {
 8006168:	e75e      	b.n	8006028 <f_open+0x24>
				res = FR_INVALID_NAME;
 800616a:	2706      	movs	r7, #6
 800616c:	e75c      	b.n	8006028 <f_open+0x24>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800616e:	1b64      	subs	r4, r4, r5
 8006170:	42ac      	cmp	r4, r5
 8006172:	d960      	bls.n	8006236 <f_open+0x232>
					clst = get_fat(&fp->obj, clst);
 8006174:	4630      	mov	r0, r6
 8006176:	f7ff f976 	bl	8005466 <get_fat>
 800617a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800617c:	2801      	cmp	r0, #1
 800617e:	d9e7      	bls.n	8006150 <f_open+0x14c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006180:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006184:	d1f3      	bne.n	800616e <f_open+0x16a>
 8006186:	2701      	movs	r7, #1
 8006188:	e7e3      	b.n	8006152 <f_open+0x14e>
 800618a:	461f      	mov	r7, r3
 800618c:	e74c      	b.n	8006028 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800618e:	f014 0f1c 	tst.w	r4, #28
 8006192:	f47f af76 	bne.w	8006082 <f_open+0x7e>
			if (res == FR_OK) {					/* Following succeeded */
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e5      	bne.n	8006166 <f_open+0x162>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800619a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800619e:	f013 0f10 	tst.w	r3, #16
 80061a2:	d1d8      	bne.n	8006156 <f_open+0x152>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80061a4:	f014 0f02 	tst.w	r4, #2
 80061a8:	d002      	beq.n	80061b0 <f_open+0x1ac>
 80061aa:	f013 0f01 	tst.w	r3, #1
 80061ae:	d1d4      	bne.n	800615a <f_open+0x156>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80061b0:	f014 0f08 	tst.w	r4, #8
 80061b4:	d001      	beq.n	80061ba <f_open+0x1b6>
				mode |= FA_MODIFIED;
 80061b6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80061ba:	9b03      	ldr	r3, [sp, #12]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80061c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061c2:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80061c4:	f035 0301 	bics.w	r3, r5, #1
 80061c8:	bf14      	ite	ne
 80061ca:	2101      	movne	r1, #1
 80061cc:	2100      	moveq	r1, #0
 80061ce:	a804      	add	r0, sp, #16
 80061d0:	f7fe ff10 	bl	8004ff4 <inc_lock>
 80061d4:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d0b8      	beq.n	800614c <f_open+0x148>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80061da:	9c03      	ldr	r4, [sp, #12]
 80061dc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80061e0:	4641      	mov	r1, r8
 80061e2:	4620      	mov	r0, r4
 80061e4:	f7ff fdd8 	bl	8005d98 <ld_clust>
 80061e8:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80061ea:	f108 001c 	add.w	r0, r8, #28
 80061ee:	f7fe fe95 	bl	8004f1c <ld_dword>
 80061f2:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80061f4:	2100      	movs	r1, #0
 80061f6:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 80061f8:	6034      	str	r4, [r6, #0]
			fp->obj.id = fs->id;
 80061fa:	88e3      	ldrh	r3, [r4, #6]
 80061fc:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 80061fe:	7535      	strb	r5, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8006200:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006202:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006204:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006206:	f106 0830 	add.w	r8, r6, #48	; 0x30
 800620a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800620e:	4640      	mov	r0, r8
 8006210:	f7fe fea1 	bl	8004f56 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006214:	f015 0f20 	tst.w	r5, #32
 8006218:	f43f af08 	beq.w	800602c <f_open+0x28>
 800621c:	68f4      	ldr	r4, [r6, #12]
 800621e:	2c00      	cmp	r4, #0
 8006220:	f43f af04 	beq.w	800602c <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006224:	61b4      	str	r4, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006226:	9b03      	ldr	r3, [sp, #12]
 8006228:	895d      	ldrh	r5, [r3, #10]
 800622a:	899b      	ldrh	r3, [r3, #12]
 800622c:	fb03 f505 	mul.w	r5, r3, r5
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006230:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006232:	42ac      	cmp	r4, r5
 8006234:	d89e      	bhi.n	8006174 <f_open+0x170>
				fp->clust = clst;
 8006236:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006238:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800623c:	f8b9 500c 	ldrh.w	r5, [r9, #12]
 8006240:	fbb4 f3f5 	udiv	r3, r4, r5
 8006244:	fb05 4313 	mls	r3, r5, r3, r4
 8006248:	2b00      	cmp	r3, #0
 800624a:	f43f aeef 	beq.w	800602c <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800624e:	4648      	mov	r0, r9
 8006250:	f7fe ff62 	bl	8005118 <clust2sect>
 8006254:	2800      	cmp	r0, #0
 8006256:	f47f af68 	bne.w	800612a <f_open+0x126>
						res = FR_INT_ERR;
 800625a:	2702      	movs	r7, #2
 800625c:	e6e4      	b.n	8006028 <f_open+0x24>
 800625e:	bf00      	nop
 8006260:	200024f4 	.word	0x200024f4

08006264 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	b087      	sub	sp, #28
 800626a:	4604      	mov	r4, r0
 800626c:	460f      	mov	r7, r1
 800626e:	4615      	mov	r5, r2
 8006270:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8006272:	2300      	movs	r3, #0
 8006274:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006278:	a905      	add	r1, sp, #20
 800627a:	f7fe ff9b 	bl	80051b4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800627e:	9001      	str	r0, [sp, #4]
 8006280:	2800      	cmp	r0, #0
 8006282:	f040 80b3 	bne.w	80063ec <f_read+0x188>
 8006286:	7d63      	ldrb	r3, [r4, #21]
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 80ae 	bne.w	80063ec <f_read+0x188>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006290:	7d23      	ldrb	r3, [r4, #20]
 8006292:	f013 0301 	ands.w	r3, r3, #1
 8006296:	9303      	str	r3, [sp, #12]
 8006298:	f000 80c2 	beq.w	8006420 <f_read+0x1bc>
	remain = fp->obj.objsize - fp->fptr;
 800629c:	68e3      	ldr	r3, [r4, #12]
 800629e:	69a2      	ldr	r2, [r4, #24]
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	429d      	cmp	r5, r3
 80062a4:	bf28      	it	cs
 80062a6:	461d      	movcs	r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 80062a8:	2d00      	cmp	r5, #0
 80062aa:	f000 809f 	beq.w	80063ec <f_read+0x188>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80062ae:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80062b2:	9302      	str	r3, [sp, #8]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80062b4:	46bb      	mov	fp, r7
 80062b6:	e05c      	b.n	8006372 <f_read+0x10e>
					if (fp->cltbl) {
 80062b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80062ba:	b11b      	cbz	r3, 80062c4 <f_read+0x60>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80062bc:	4620      	mov	r0, r4
 80062be:	f7fe ff36 	bl	800512e <clmt_clust>
 80062c2:	e068      	b.n	8006396 <f_read+0x132>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80062c4:	69e1      	ldr	r1, [r4, #28]
 80062c6:	4620      	mov	r0, r4
 80062c8:	f7ff f8cd 	bl	8005466 <get_fat>
 80062cc:	e063      	b.n	8006396 <f_read+0x132>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80062ce:	2302      	movs	r3, #2
 80062d0:	7563      	strb	r3, [r4, #21]
 80062d2:	9301      	str	r3, [sp, #4]
 80062d4:	e08a      	b.n	80063ec <f_read+0x188>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80062d6:	2301      	movs	r3, #1
 80062d8:	7563      	strb	r3, [r4, #21]
 80062da:	9b03      	ldr	r3, [sp, #12]
 80062dc:	9301      	str	r3, [sp, #4]
 80062de:	e085      	b.n	80063ec <f_read+0x188>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80062e0:	2302      	movs	r3, #2
 80062e2:	7563      	strb	r3, [r4, #21]
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	e081      	b.n	80063ec <f_read+0x188>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80062e8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	db04      	blt.n	80062fa <f_read+0x96>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80062f0:	9b05      	ldr	r3, [sp, #20]
 80062f2:	899b      	ldrh	r3, [r3, #12]
 80062f4:	fb09 f903 	mul.w	r9, r9, r3
				continue;
 80062f8:	e02f      	b.n	800635a <f_read+0xf6>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80062fa:	6a20      	ldr	r0, [r4, #32]
 80062fc:	1bc0      	subs	r0, r0, r7
 80062fe:	4548      	cmp	r0, r9
 8006300:	d2f6      	bcs.n	80062f0 <f_read+0x8c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006302:	9b05      	ldr	r3, [sp, #20]
 8006304:	899a      	ldrh	r2, [r3, #12]
 8006306:	9902      	ldr	r1, [sp, #8]
 8006308:	fb02 b000 	mla	r0, r2, r0, fp
 800630c:	f7fe fe19 	bl	8004f42 <mem_cpy>
 8006310:	e7ee      	b.n	80062f0 <f_read+0x8c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006312:	6a22      	ldr	r2, [r4, #32]
 8006314:	42ba      	cmp	r2, r7
 8006316:	d00c      	beq.n	8006332 <f_read+0xce>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006318:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	db69      	blt.n	80063f4 <f_read+0x190>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006320:	2301      	movs	r3, #1
 8006322:	463a      	mov	r2, r7
 8006324:	9902      	ldr	r1, [sp, #8]
 8006326:	9805      	ldr	r0, [sp, #20]
 8006328:	7840      	ldrb	r0, [r0, #1]
 800632a:	f7fe fdcd 	bl	8004ec8 <disk_read>
 800632e:	2800      	cmp	r0, #0
 8006330:	d171      	bne.n	8006416 <f_read+0x1b2>
			fp->sect = sect;
 8006332:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006334:	9b05      	ldr	r3, [sp, #20]
 8006336:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800633a:	69a1      	ldr	r1, [r4, #24]
 800633c:	fbb1 f3f9 	udiv	r3, r1, r9
 8006340:	fb09 1113 	mls	r1, r9, r3, r1
 8006344:	eba9 0901 	sub.w	r9, r9, r1
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006348:	45a9      	cmp	r9, r5
 800634a:	bf28      	it	cs
 800634c:	46a9      	movcs	r9, r5
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800634e:	464a      	mov	r2, r9
 8006350:	9b02      	ldr	r3, [sp, #8]
 8006352:	4419      	add	r1, r3
 8006354:	4658      	mov	r0, fp
 8006356:	f7fe fdf4 	bl	8004f42 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800635a:	44cb      	add	fp, r9
 800635c:	69a3      	ldr	r3, [r4, #24]
 800635e:	444b      	add	r3, r9
 8006360:	61a3      	str	r3, [r4, #24]
 8006362:	f8d8 3000 	ldr.w	r3, [r8]
 8006366:	444b      	add	r3, r9
 8006368:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
 800636c:	ebb5 0509 	subs.w	r5, r5, r9
 8006370:	d03c      	beq.n	80063ec <f_read+0x188>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006372:	69a1      	ldr	r1, [r4, #24]
 8006374:	9805      	ldr	r0, [sp, #20]
 8006376:	8983      	ldrh	r3, [r0, #12]
 8006378:	fbb1 f2f3 	udiv	r2, r1, r3
 800637c:	fb03 1212 	mls	r2, r3, r2, r1
 8006380:	2a00      	cmp	r2, #0
 8006382:	d1d7      	bne.n	8006334 <f_read+0xd0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006384:	8946      	ldrh	r6, [r0, #10]
 8006386:	3e01      	subs	r6, #1
 8006388:	fbb1 f3f3 	udiv	r3, r1, r3
			if (csect == 0) {					/* On the cluster boundary? */
 800638c:	401e      	ands	r6, r3
 800638e:	d108      	bne.n	80063a2 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006390:	2900      	cmp	r1, #0
 8006392:	d191      	bne.n	80062b8 <f_read+0x54>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006394:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006396:	2801      	cmp	r0, #1
 8006398:	d999      	bls.n	80062ce <f_read+0x6a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800639a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800639e:	d09a      	beq.n	80062d6 <f_read+0x72>
				fp->clust = clst;				/* Update current cluster */
 80063a0:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80063a2:	f8dd a014 	ldr.w	sl, [sp, #20]
 80063a6:	69e1      	ldr	r1, [r4, #28]
 80063a8:	4650      	mov	r0, sl
 80063aa:	f7fe feb5 	bl	8005118 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80063ae:	4607      	mov	r7, r0
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d095      	beq.n	80062e0 <f_read+0x7c>
			sect += csect;
 80063b4:	4437      	add	r7, r6
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80063b6:	f8ba 900c 	ldrh.w	r9, [sl, #12]
			if (cc) {							/* Read maximum contiguous sectors directly */
 80063ba:	45a9      	cmp	r9, r5
 80063bc:	d8a9      	bhi.n	8006312 <f_read+0xae>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80063be:	fbb5 f9f9 	udiv	r9, r5, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80063c2:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80063c6:	eb06 0209 	add.w	r2, r6, r9
 80063ca:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 80063cc:	bf88      	it	hi
 80063ce:	eba3 0906 	subhi.w	r9, r3, r6
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80063d2:	464b      	mov	r3, r9
 80063d4:	463a      	mov	r2, r7
 80063d6:	4659      	mov	r1, fp
 80063d8:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80063dc:	f7fe fd74 	bl	8004ec8 <disk_read>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d081      	beq.n	80062e8 <f_read+0x84>
 80063e4:	2301      	movs	r3, #1
 80063e6:	7563      	strb	r3, [r4, #21]
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	9301      	str	r3, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80063ec:	9801      	ldr	r0, [sp, #4]
 80063ee:	b007      	add	sp, #28
 80063f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80063f4:	2301      	movs	r3, #1
 80063f6:	9902      	ldr	r1, [sp, #8]
 80063f8:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80063fc:	f7fe fd72 	bl	8004ee4 <disk_write>
 8006400:	b920      	cbnz	r0, 800640c <f_read+0x1a8>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006402:	7d23      	ldrb	r3, [r4, #20]
 8006404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006408:	7523      	strb	r3, [r4, #20]
 800640a:	e789      	b.n	8006320 <f_read+0xbc>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800640c:	2301      	movs	r3, #1
 800640e:	7563      	strb	r3, [r4, #21]
 8006410:	9b03      	ldr	r3, [sp, #12]
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	e7ea      	b.n	80063ec <f_read+0x188>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006416:	2301      	movs	r3, #1
 8006418:	7563      	strb	r3, [r4, #21]
 800641a:	9b03      	ldr	r3, [sp, #12]
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	e7e5      	b.n	80063ec <f_read+0x188>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006420:	2307      	movs	r3, #7
 8006422:	9301      	str	r3, [sp, #4]
 8006424:	e7e2      	b.n	80063ec <f_read+0x188>

08006426 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006426:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	b085      	sub	sp, #20
 800642c:	4604      	mov	r4, r0
 800642e:	460f      	mov	r7, r1
 8006430:	4615      	mov	r5, r2
 8006432:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8006434:	2300      	movs	r3, #0
 8006436:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800643a:	a903      	add	r1, sp, #12
 800643c:	f7fe feba 	bl	80051b4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006440:	9000      	str	r0, [sp, #0]
 8006442:	2800      	cmp	r0, #0
 8006444:	d14d      	bne.n	80064e2 <f_write+0xbc>
 8006446:	7d63      	ldrb	r3, [r4, #21]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d149      	bne.n	80064e2 <f_write+0xbc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800644e:	7d23      	ldrb	r3, [r4, #20]
 8006450:	f013 0f02 	tst.w	r3, #2
 8006454:	f000 80dd 	beq.w	8006612 <f_write+0x1ec>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006458:	69a3      	ldr	r3, [r4, #24]
 800645a:	42eb      	cmn	r3, r5
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800645c:	bf28      	it	cs
 800645e:	43dd      	mvncs	r5, r3
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006460:	2d00      	cmp	r5, #0
 8006462:	f000 80d1 	beq.w	8006608 <f_write+0x1e2>
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006466:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800646a:	9301      	str	r3, [sp, #4]
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800646c:	46bb      	mov	fp, r7
 800646e:	e0a3      	b.n	80065b8 <f_write+0x192>
					if (fp->cltbl) {
 8006470:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d039      	beq.n	80064ea <f_write+0xc4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006476:	4620      	mov	r0, r4
 8006478:	f7fe fe59 	bl	800512e <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800647c:	2800      	cmp	r0, #0
 800647e:	f000 80c3 	beq.w	8006608 <f_write+0x1e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006482:	2801      	cmp	r0, #1
 8006484:	d036      	beq.n	80064f4 <f_write+0xce>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006486:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800648a:	d037      	beq.n	80064fc <f_write+0xd6>
				fp->clust = clst;			/* Update current cluster */
 800648c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800648e:	68a3      	ldr	r3, [r4, #8]
 8006490:	b903      	cbnz	r3, 8006494 <f_write+0x6e>
 8006492:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006494:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	db33      	blt.n	8006504 <f_write+0xde>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800649c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80064a0:	69e1      	ldr	r1, [r4, #28]
 80064a2:	4650      	mov	r0, sl
 80064a4:	f7fe fe38 	bl	8005118 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80064a8:	4607      	mov	r7, r0
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d03b      	beq.n	8006526 <f_write+0x100>
			sect += csect;
 80064ae:	4437      	add	r7, r6
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80064b0:	f8ba 900c 	ldrh.w	r9, [sl, #12]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80064b4:	45a9      	cmp	r9, r5
 80064b6:	d84f      	bhi.n	8006558 <f_write+0x132>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80064b8:	fbb5 f9f9 	udiv	r9, r5, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80064bc:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 80064c0:	eb06 0209 	add.w	r2, r6, r9
 80064c4:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 80064c6:	bf88      	it	hi
 80064c8:	eba3 0906 	subhi.w	r9, r3, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80064cc:	464b      	mov	r3, r9
 80064ce:	463a      	mov	r2, r7
 80064d0:	4659      	mov	r1, fp
 80064d2:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80064d6:	f7fe fd05 	bl	8004ee4 <disk_write>
 80064da:	b340      	cbz	r0, 800652e <f_write+0x108>
 80064dc:	2301      	movs	r3, #1
 80064de:	7563      	strb	r3, [r4, #21]
 80064e0:	9300      	str	r3, [sp, #0]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 80064e2:	9800      	ldr	r0, [sp, #0]
 80064e4:	b005      	add	sp, #20
 80064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80064ea:	69e1      	ldr	r1, [r4, #28]
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff f89c 	bl	800562a <create_chain>
 80064f2:	e7c3      	b.n	800647c <f_write+0x56>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80064f4:	2302      	movs	r3, #2
 80064f6:	7563      	strb	r3, [r4, #21]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	e7f2      	b.n	80064e2 <f_write+0xbc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80064fc:	2301      	movs	r3, #1
 80064fe:	7563      	strb	r3, [r4, #21]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	e7ee      	b.n	80064e2 <f_write+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006504:	2301      	movs	r3, #1
 8006506:	6a22      	ldr	r2, [r4, #32]
 8006508:	9901      	ldr	r1, [sp, #4]
 800650a:	9803      	ldr	r0, [sp, #12]
 800650c:	7840      	ldrb	r0, [r0, #1]
 800650e:	f7fe fce9 	bl	8004ee4 <disk_write>
 8006512:	b920      	cbnz	r0, 800651e <f_write+0xf8>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006514:	7d23      	ldrb	r3, [r4, #20]
 8006516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800651a:	7523      	strb	r3, [r4, #20]
 800651c:	e7be      	b.n	800649c <f_write+0x76>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800651e:	2301      	movs	r3, #1
 8006520:	7563      	strb	r3, [r4, #21]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	e7dd      	b.n	80064e2 <f_write+0xbc>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006526:	2302      	movs	r3, #2
 8006528:	7563      	strb	r3, [r4, #21]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	e7d9      	b.n	80064e2 <f_write+0xbc>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800652e:	6a21      	ldr	r1, [r4, #32]
 8006530:	1bc9      	subs	r1, r1, r7
 8006532:	4549      	cmp	r1, r9
 8006534:	d304      	bcc.n	8006540 <f_write+0x11a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	899b      	ldrh	r3, [r3, #12]
 800653a:	fb09 f903 	mul.w	r9, r9, r3
				continue;
 800653e:	e02a      	b.n	8006596 <f_write+0x170>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	899a      	ldrh	r2, [r3, #12]
 8006544:	fb02 b101 	mla	r1, r2, r1, fp
 8006548:	9801      	ldr	r0, [sp, #4]
 800654a:	f7fe fcfa 	bl	8004f42 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800654e:	7d23      	ldrb	r3, [r4, #20]
 8006550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006554:	7523      	strb	r3, [r4, #20]
 8006556:	e7ee      	b.n	8006536 <f_write+0x110>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006558:	6a23      	ldr	r3, [r4, #32]
 800655a:	42bb      	cmp	r3, r7
 800655c:	d003      	beq.n	8006566 <f_write+0x140>
 800655e:	69a2      	ldr	r2, [r4, #24]
 8006560:	68e3      	ldr	r3, [r4, #12]
 8006562:	429a      	cmp	r2, r3
 8006564:	d343      	bcc.n	80065ee <f_write+0x1c8>
			fp->sect = sect;
 8006566:	6227      	str	r7, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800656e:	69a0      	ldr	r0, [r4, #24]
 8006570:	fbb0 f3f9 	udiv	r3, r0, r9
 8006574:	fb09 0013 	mls	r0, r9, r3, r0
 8006578:	eba9 0900 	sub.w	r9, r9, r0
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800657c:	45a9      	cmp	r9, r5
 800657e:	bf28      	it	cs
 8006580:	46a9      	movcs	r9, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006582:	464a      	mov	r2, r9
 8006584:	4659      	mov	r1, fp
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	4418      	add	r0, r3
 800658a:	f7fe fcda 	bl	8004f42 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800658e:	7d23      	ldrb	r3, [r4, #20]
 8006590:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006594:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006596:	44cb      	add	fp, r9
 8006598:	69a3      	ldr	r3, [r4, #24]
 800659a:	444b      	add	r3, r9
 800659c:	61a3      	str	r3, [r4, #24]
 800659e:	68e2      	ldr	r2, [r4, #12]
 80065a0:	4293      	cmp	r3, r2
 80065a2:	bf38      	it	cc
 80065a4:	4613      	movcc	r3, r2
 80065a6:	60e3      	str	r3, [r4, #12]
 80065a8:	f8d8 3000 	ldr.w	r3, [r8]
 80065ac:	444b      	add	r3, r9
 80065ae:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
 80065b2:	ebb5 0509 	subs.w	r5, r5, r9
 80065b6:	d027      	beq.n	8006608 <f_write+0x1e2>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80065b8:	69a1      	ldr	r1, [r4, #24]
 80065ba:	9803      	ldr	r0, [sp, #12]
 80065bc:	8983      	ldrh	r3, [r0, #12]
 80065be:	fbb1 f2f3 	udiv	r2, r1, r3
 80065c2:	fb03 1212 	mls	r2, r3, r2, r1
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	d1ce      	bne.n	8006568 <f_write+0x142>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80065ca:	8946      	ldrh	r6, [r0, #10]
 80065cc:	3e01      	subs	r6, #1
 80065ce:	fbb1 f3f3 	udiv	r3, r1, r3
			if (csect == 0) {				/* On the cluster boundary? */
 80065d2:	401e      	ands	r6, r3
 80065d4:	f47f af5e 	bne.w	8006494 <f_write+0x6e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80065d8:	2900      	cmp	r1, #0
 80065da:	f47f af49 	bne.w	8006470 <f_write+0x4a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80065de:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80065e0:	2800      	cmp	r0, #0
 80065e2:	f47f af4e 	bne.w	8006482 <f_write+0x5c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7ff f81f 	bl	800562a <create_chain>
 80065ec:	e746      	b.n	800647c <f_write+0x56>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80065ee:	2301      	movs	r3, #1
 80065f0:	463a      	mov	r2, r7
 80065f2:	9901      	ldr	r1, [sp, #4]
 80065f4:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80065f8:	f7fe fc66 	bl	8004ec8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d0b2      	beq.n	8006566 <f_write+0x140>
					ABORT(fs, FR_DISK_ERR);
 8006600:	2301      	movs	r3, #1
 8006602:	7563      	strb	r3, [r4, #21]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	e76c      	b.n	80064e2 <f_write+0xbc>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006608:	7d23      	ldrb	r3, [r4, #20]
 800660a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800660e:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8006610:	e767      	b.n	80064e2 <f_write+0xbc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006612:	2307      	movs	r3, #7
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	e764      	b.n	80064e2 <f_write+0xbc>

08006618 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	4604      	mov	r4, r0
 800661e:	460d      	mov	r5, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006620:	290a      	cmp	r1, #10
 8006622:	d00d      	beq.n	8006640 <putc_bfd+0x28>
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006624:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8006626:	2b00      	cmp	r3, #0
 8006628:	db08      	blt.n	800663c <putc_bfd+0x24>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800662a:	1c5e      	adds	r6, r3, #1
 800662c:	4423      	add	r3, r4
 800662e:	731d      	strb	r5, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006630:	2e3c      	cmp	r6, #60	; 0x3c
 8006632:	dc09      	bgt.n	8006648 <putc_bfd+0x30>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
 8006634:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 8006636:	68a3      	ldr	r3, [r4, #8]
 8006638:	3301      	adds	r3, #1
 800663a:	60a3      	str	r3, [r4, #8]
}
 800663c:	b002      	add	sp, #8
 800663e:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 8006640:	210d      	movs	r1, #13
 8006642:	f7ff ffe9 	bl	8006618 <putc_bfd>
 8006646:	e7ed      	b.n	8006624 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006648:	4621      	mov	r1, r4
 800664a:	f851 0b0c 	ldr.w	r0, [r1], #12
 800664e:	ab01      	add	r3, sp, #4
 8006650:	4632      	mov	r2, r6
 8006652:	f7ff fee8 	bl	8006426 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006656:	9b01      	ldr	r3, [sp, #4]
 8006658:	1b9e      	subs	r6, r3, r6
 800665a:	bf18      	it	ne
 800665c:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
 8006660:	e7e8      	b.n	8006634 <putc_bfd+0x1c>

08006662 <putc_flush>:
	putbuff* pb
)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006662:	6842      	ldr	r2, [r0, #4]
 8006664:	2a00      	cmp	r2, #0
 8006666:	db10      	blt.n	800668a <putc_flush+0x28>
{
 8006668:	b510      	push	{r4, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	4604      	mov	r4, r0
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800666e:	4601      	mov	r1, r0
 8006670:	f851 0b0c 	ldr.w	r0, [r1], #12
 8006674:	ab01      	add	r3, sp, #4
 8006676:	f7ff fed6 	bl	8006426 <f_write>
 800667a:	b948      	cbnz	r0, 8006690 <putc_flush+0x2e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800667c:	6862      	ldr	r2, [r4, #4]
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d108      	bne.n	8006696 <putc_flush+0x34>
 8006684:	68a0      	ldr	r0, [r4, #8]
	return EOF;
}
 8006686:	b002      	add	sp, #8
 8006688:	bd10      	pop	{r4, pc}
	return EOF;
 800668a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800668e:	4770      	bx	lr
	return EOF;
 8006690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006694:	e7f7      	b.n	8006686 <putc_flush+0x24>
 8006696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800669a:	e7f4      	b.n	8006686 <putc_flush+0x24>

0800669c <f_sync>:
{
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80066a2:	a901      	add	r1, sp, #4
 80066a4:	f7fe fd86 	bl	80051b4 <validate>
	if (res == FR_OK) {
 80066a8:	b970      	cbnz	r0, 80066c8 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80066aa:	7d23      	ldrb	r3, [r4, #20]
 80066ac:	f013 0040 	ands.w	r0, r3, #64	; 0x40
 80066b0:	d00a      	beq.n	80066c8 <f_sync+0x2c>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80066b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066b6:	d109      	bne.n	80066cc <f_sync+0x30>
			tm = GET_FATTIME();				/* Modified time */
 80066b8:	f7fe fbd0 	bl	8004e5c <get_fattime>
 80066bc:	4605      	mov	r5, r0
				res = move_window(fs, fp->dir_sect);
 80066be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80066c0:	9801      	ldr	r0, [sp, #4]
 80066c2:	f7fe fdc7 	bl	8005254 <move_window>
				if (res == FR_OK) {
 80066c6:	b178      	cbz	r0, 80066e8 <f_sync+0x4c>
}
 80066c8:	b002      	add	sp, #8
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80066cc:	2301      	movs	r3, #1
 80066ce:	6a22      	ldr	r2, [r4, #32]
 80066d0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80066d4:	9801      	ldr	r0, [sp, #4]
 80066d6:	7840      	ldrb	r0, [r0, #1]
 80066d8:	f7fe fc04 	bl	8004ee4 <disk_write>
 80066dc:	bb30      	cbnz	r0, 800672c <f_sync+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 80066de:	7d23      	ldrb	r3, [r4, #20]
 80066e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e4:	7523      	strb	r3, [r4, #20]
 80066e6:	e7e7      	b.n	80066b8 <f_sync+0x1c>
					dir = fp->dir_ptr;
 80066e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80066ea:	7af3      	ldrb	r3, [r6, #11]
 80066ec:	f043 0320 	orr.w	r3, r3, #32
 80066f0:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80066f2:	68a2      	ldr	r2, [r4, #8]
 80066f4:	4631      	mov	r1, r6
 80066f6:	6820      	ldr	r0, [r4, #0]
 80066f8:	f7fe fea8 	bl	800544c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80066fc:	68e1      	ldr	r1, [r4, #12]
 80066fe:	f106 001c 	add.w	r0, r6, #28
 8006702:	f7fe fc16 	bl	8004f32 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006706:	4629      	mov	r1, r5
 8006708:	f106 0016 	add.w	r0, r6, #22
 800670c:	f7fe fc11 	bl	8004f32 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8006710:	2300      	movs	r3, #0
 8006712:	74b3      	strb	r3, [r6, #18]
	*ptr++ = (BYTE)val;
 8006714:	74f3      	strb	r3, [r6, #19]
					fs->wflag = 1;
 8006716:	9b01      	ldr	r3, [sp, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800671c:	9801      	ldr	r0, [sp, #4]
 800671e:	f7fe fdb3 	bl	8005288 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006722:	7d23      	ldrb	r3, [r4, #20]
 8006724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006728:	7523      	strb	r3, [r4, #20]
 800672a:	e7cd      	b.n	80066c8 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800672c:	2001      	movs	r0, #1
 800672e:	e7cb      	b.n	80066c8 <f_sync+0x2c>

08006730 <f_close>:
{
 8006730:	b510      	push	{r4, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8006736:	f7ff ffb1 	bl	800669c <f_sync>
	if (res == FR_OK)
 800673a:	b108      	cbz	r0, 8006740 <f_close+0x10>
}
 800673c:	b002      	add	sp, #8
 800673e:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006740:	a901      	add	r1, sp, #4
 8006742:	4620      	mov	r0, r4
 8006744:	f7fe fd36 	bl	80051b4 <validate>
		if (res == FR_OK) {
 8006748:	2800      	cmp	r0, #0
 800674a:	d1f7      	bne.n	800673c <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800674c:	6920      	ldr	r0, [r4, #16]
 800674e:	f7fe fcad 	bl	80050ac <dec_lock>
			if (res == FR_OK)
 8006752:	2800      	cmp	r0, #0
 8006754:	d1f2      	bne.n	800673c <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 8006756:	6020      	str	r0, [r4, #0]
 8006758:	e7f0      	b.n	800673c <f_close+0xc>

0800675a <f_getfree>:
{
 800675a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675e:	b089      	sub	sp, #36	; 0x24
 8006760:	9001      	str	r0, [sp, #4]
 8006762:	4688      	mov	r8, r1
 8006764:	4614      	mov	r4, r2
	res = find_volume(&path, &fs, 0);
 8006766:	2200      	movs	r2, #0
 8006768:	a907      	add	r1, sp, #28
 800676a:	a801      	add	r0, sp, #4
 800676c:	f7ff f944 	bl	80059f8 <find_volume>
	if (res == FR_OK) {
 8006770:	4681      	mov	r9, r0
 8006772:	2800      	cmp	r0, #0
 8006774:	d15d      	bne.n	8006832 <f_getfree+0xd8>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006776:	9b07      	ldr	r3, [sp, #28]
 8006778:	6023      	str	r3, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	699d      	ldr	r5, [r3, #24]
 800677e:	1ea9      	subs	r1, r5, #2
 8006780:	428a      	cmp	r2, r1
 8006782:	d802      	bhi.n	800678a <f_getfree+0x30>
			*nclst = fs->free_clst;
 8006784:	f8c8 2000 	str.w	r2, [r8]
 8006788:	e053      	b.n	8006832 <f_getfree+0xd8>
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800678a:	781e      	ldrb	r6, [r3, #0]
 800678c:	2e01      	cmp	r6, #1
 800678e:	d005      	beq.n	800679c <f_getfree+0x42>
					clst = fs->n_fatent; sect = fs->fatbase;
 8006790:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
					i = 0; p = 0;
 8006794:	2400      	movs	r4, #0
 8006796:	4626      	mov	r6, r4
			nfree = 0;
 8006798:	4627      	mov	r7, r4
 800679a:	e02d      	b.n	80067f8 <f_getfree+0x9e>
				clst = 2; obj.fs = fs;
 800679c:	9302      	str	r3, [sp, #8]
 800679e:	2402      	movs	r4, #2
			nfree = 0;
 80067a0:	2700      	movs	r7, #0
 80067a2:	e004      	b.n	80067ae <f_getfree+0x54>
				} while (++clst < fs->n_fatent);
 80067a4:	3401      	adds	r4, #1
 80067a6:	9b07      	ldr	r3, [sp, #28]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	42a3      	cmp	r3, r4
 80067ac:	d939      	bls.n	8006822 <f_getfree+0xc8>
					stat = get_fat(&obj, clst);
 80067ae:	4621      	mov	r1, r4
 80067b0:	a802      	add	r0, sp, #8
 80067b2:	f7fe fe58 	bl	8005466 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80067b6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80067ba:	d02c      	beq.n	8006816 <f_getfree+0xbc>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80067bc:	2801      	cmp	r0, #1
 80067be:	d02c      	beq.n	800681a <f_getfree+0xc0>
					if (stat == 0) nfree++;
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d1ef      	bne.n	80067a4 <f_getfree+0x4a>
 80067c4:	3701      	adds	r7, #1
 80067c6:	e7ed      	b.n	80067a4 <f_getfree+0x4a>
							res = move_window(fs, sect++);
 80067c8:	f10a 0b01 	add.w	fp, sl, #1
 80067cc:	4651      	mov	r1, sl
 80067ce:	9807      	ldr	r0, [sp, #28]
 80067d0:	f7fe fd40 	bl	8005254 <move_window>
							if (res != FR_OK) break;
 80067d4:	bb20      	cbnz	r0, 8006820 <f_getfree+0xc6>
							p = fs->win;
 80067d6:	9b07      	ldr	r3, [sp, #28]
 80067d8:	f103 0434 	add.w	r4, r3, #52	; 0x34
							i = SS(fs);
 80067dc:	899e      	ldrh	r6, [r3, #12]
							res = move_window(fs, sect++);
 80067de:	46da      	mov	sl, fp
 80067e0:	e00c      	b.n	80067fc <f_getfree+0xa2>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80067e2:	4620      	mov	r0, r4
 80067e4:	f7fe fb9a 	bl	8004f1c <ld_dword>
 80067e8:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 80067ec:	bf08      	it	eq
 80067ee:	3701      	addeq	r7, #1
							p += 4; i -= 4;
 80067f0:	3404      	adds	r4, #4
 80067f2:	3e04      	subs	r6, #4
					} while (--clst);
 80067f4:	3d01      	subs	r5, #1
 80067f6:	d014      	beq.n	8006822 <f_getfree+0xc8>
						if (i == 0) {
 80067f8:	2e00      	cmp	r6, #0
 80067fa:	d0e5      	beq.n	80067c8 <f_getfree+0x6e>
						if (fs->fs_type == FS_FAT16) {
 80067fc:	9b07      	ldr	r3, [sp, #28]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d1ee      	bne.n	80067e2 <f_getfree+0x88>
	rv = rv << 8 | ptr[0];
 8006804:	7862      	ldrb	r2, [r4, #1]
 8006806:	7823      	ldrb	r3, [r4, #0]
							if (ld_word(p) == 0) nfree++;
 8006808:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800680c:	bf08      	it	eq
 800680e:	3701      	addeq	r7, #1
							p += 2; i -= 2;
 8006810:	3402      	adds	r4, #2
 8006812:	3e02      	subs	r6, #2
 8006814:	e7ee      	b.n	80067f4 <f_getfree+0x9a>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006816:	46b1      	mov	r9, r6
 8006818:	e003      	b.n	8006822 <f_getfree+0xc8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800681a:	f04f 0902 	mov.w	r9, #2
 800681e:	e000      	b.n	8006822 <f_getfree+0xc8>
							res = move_window(fs, sect++);
 8006820:	4681      	mov	r9, r0
			*nclst = nfree;			/* Return the free clusters */
 8006822:	f8c8 7000 	str.w	r7, [r8]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006826:	9b07      	ldr	r3, [sp, #28]
 8006828:	615f      	str	r7, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800682a:	791a      	ldrb	r2, [r3, #4]
 800682c:	f042 0201 	orr.w	r2, r2, #1
 8006830:	711a      	strb	r2, [r3, #4]
}
 8006832:	4648      	mov	r0, r9
 8006834:	b009      	add	sp, #36	; 0x24
 8006836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800683a <f_unlink>:
{
 800683a:	b570      	push	{r4, r5, r6, lr}
 800683c:	b09c      	sub	sp, #112	; 0x70
 800683e:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 8006840:	2202      	movs	r2, #2
 8006842:	a903      	add	r1, sp, #12
 8006844:	a801      	add	r0, sp, #4
 8006846:	f7ff f8d7 	bl	80059f8 <find_volume>
	dj.obj.fs = fs;
 800684a:	9a03      	ldr	r2, [sp, #12]
 800684c:	9210      	str	r2, [sp, #64]	; 0x40
	if (res == FR_OK) {
 800684e:	b108      	cbz	r0, 8006854 <f_unlink+0x1a>
}
 8006850:	b01c      	add	sp, #112	; 0x70
 8006852:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(&dj, path);		/* Follow the file path */
 8006854:	9901      	ldr	r1, [sp, #4]
 8006856:	a810      	add	r0, sp, #64	; 0x40
 8006858:	f7ff faae 	bl	8005db8 <follow_path>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800685c:	2800      	cmp	r0, #0
 800685e:	d1f7      	bne.n	8006850 <f_unlink+0x16>
 8006860:	2102      	movs	r1, #2
 8006862:	a810      	add	r0, sp, #64	; 0x40
 8006864:	f7fe fb7e 	bl	8004f64 <chk_lock>
		if (res == FR_OK) {					/* The object is accessible */
 8006868:	2800      	cmp	r0, #0
 800686a:	d1f1      	bne.n	8006850 <f_unlink+0x16>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800686c:	f99d 306f 	ldrsb.w	r3, [sp, #111]	; 0x6f
 8006870:	2b00      	cmp	r3, #0
 8006872:	db36      	blt.n	80068e2 <f_unlink+0xa8>
				if (dj.obj.attr & AM_RDO) {
 8006874:	f89d 4046 	ldrb.w	r4, [sp, #70]	; 0x46
 8006878:	f014 0f01 	tst.w	r4, #1
 800687c:	d133      	bne.n	80068e6 <f_unlink+0xac>
					dclst = ld_clust(fs, dj.dir);
 800687e:	9e03      	ldr	r6, [sp, #12]
 8006880:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006882:	4630      	mov	r0, r6
 8006884:	f7ff fa88 	bl	8005d98 <ld_clust>
 8006888:	4605      	mov	r5, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800688a:	f014 0f10 	tst.w	r4, #16
 800688e:	d110      	bne.n	80068b2 <f_unlink+0x78>
	FATFS *fs = dp->obj.fs;
 8006890:	9c10      	ldr	r4, [sp, #64]	; 0x40
	res = move_window(fs, dp->sect);
 8006892:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006894:	4620      	mov	r0, r4
 8006896:	f7fe fcdd 	bl	8005254 <move_window>
	if (res == FR_OK) {
 800689a:	2800      	cmp	r0, #0
 800689c:	d1d8      	bne.n	8006850 <f_unlink+0x16>
		dp->dir[DIR_Name] = DDEM;
 800689e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80068a0:	22e5      	movs	r2, #229	; 0xe5
 80068a2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80068a4:	2301      	movs	r3, #1
 80068a6:	70e3      	strb	r3, [r4, #3]
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80068a8:	b99d      	cbnz	r5, 80068d2 <f_unlink+0x98>
				if (res == FR_OK) res = sync_fs(fs);
 80068aa:	9803      	ldr	r0, [sp, #12]
 80068ac:	f7fe fcec 	bl	8005288 <sync_fs>
 80068b0:	e7ce      	b.n	8006850 <f_unlink+0x16>
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80068b2:	9604      	str	r6, [sp, #16]
						sdj.obj.sclust = dclst;
 80068b4:	9006      	str	r0, [sp, #24]
						res = dir_sdi(&sdj, 0);
 80068b6:	2100      	movs	r1, #0
 80068b8:	a804      	add	r0, sp, #16
 80068ba:	f7fe fe53 	bl	8005564 <dir_sdi>
						if (res == FR_OK) {
 80068be:	2800      	cmp	r0, #0
 80068c0:	d1c6      	bne.n	8006850 <f_unlink+0x16>
							res = dir_read(&sdj, 0);			/* Read an item */
 80068c2:	2100      	movs	r1, #0
 80068c4:	a804      	add	r0, sp, #16
 80068c6:	f7ff f821 	bl	800590c <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80068ca:	b170      	cbz	r0, 80068ea <f_unlink+0xb0>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80068cc:	2804      	cmp	r0, #4
 80068ce:	d1bf      	bne.n	8006850 <f_unlink+0x16>
 80068d0:	e7de      	b.n	8006890 <f_unlink+0x56>
					res = remove_chain(&dj.obj, dclst, 0);
 80068d2:	2200      	movs	r2, #0
 80068d4:	4629      	mov	r1, r5
 80068d6:	a810      	add	r0, sp, #64	; 0x40
 80068d8:	f7fe ff09 	bl	80056ee <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 80068dc:	2800      	cmp	r0, #0
 80068de:	d1b7      	bne.n	8006850 <f_unlink+0x16>
 80068e0:	e7e3      	b.n	80068aa <f_unlink+0x70>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80068e2:	2006      	movs	r0, #6
 80068e4:	e7b4      	b.n	8006850 <f_unlink+0x16>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80068e6:	2007      	movs	r0, #7
 80068e8:	e7b2      	b.n	8006850 <f_unlink+0x16>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80068ea:	2007      	movs	r0, #7
	LEAVE_FF(fs, res);
 80068ec:	e7b0      	b.n	8006850 <f_unlink+0x16>

080068ee <f_gets>:
{
 80068ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	4680      	mov	r8, r0
 80068f6:	4617      	mov	r7, r2
	TCHAR c, *p = buff;
 80068f8:	4605      	mov	r5, r0
	int n = 0;
 80068fa:	2400      	movs	r4, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80068fc:	1e4e      	subs	r6, r1, #1
 80068fe:	42a6      	cmp	r6, r4
 8006900:	dd11      	ble.n	8006926 <f_gets+0x38>
		f_read(fp, s, 1, &rc);
 8006902:	466b      	mov	r3, sp
 8006904:	2201      	movs	r2, #1
 8006906:	a901      	add	r1, sp, #4
 8006908:	4638      	mov	r0, r7
 800690a:	f7ff fcab 	bl	8006264 <f_read>
		if (rc != 1) break;
 800690e:	9b00      	ldr	r3, [sp, #0]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d108      	bne.n	8006926 <f_gets+0x38>
		c = s[0];
 8006914:	f89d 3004 	ldrb.w	r3, [sp, #4]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006918:	2b0d      	cmp	r3, #13
 800691a:	d0f0      	beq.n	80068fe <f_gets+0x10>
		*p++ = c;
 800691c:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 8006920:	3401      	adds	r4, #1
		if (c == '\n') break;		/* Break on EOL */
 8006922:	2b0a      	cmp	r3, #10
 8006924:	d1eb      	bne.n	80068fe <f_gets+0x10>
	*p = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800692a:	429c      	cmp	r4, r3
}
 800692c:	bf14      	ite	ne
 800692e:	4640      	movne	r0, r8
 8006930:	4618      	moveq	r0, r3
 8006932:	b002      	add	sp, #8
 8006934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006938 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006938:	b510      	push	{r4, lr}
 800693a:	b094      	sub	sp, #80	; 0x50
 800693c:	4604      	mov	r4, r0
	pb->fp = fp;
 800693e:	9101      	str	r1, [sp, #4]
	pb->nchr = pb->idx = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	9302      	str	r3, [sp, #8]
 8006944:	9303      	str	r3, [sp, #12]
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006946:	7801      	ldrb	r1, [r0, #0]
 8006948:	b131      	cbz	r1, 8006958 <f_puts+0x20>
 800694a:	a801      	add	r0, sp, #4
 800694c:	f7ff fe64 	bl	8006618 <putc_bfd>
 8006950:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006954:	2900      	cmp	r1, #0
 8006956:	d1f8      	bne.n	800694a <f_puts+0x12>
	return putc_flush(&pb);
 8006958:	a801      	add	r0, sp, #4
 800695a:	f7ff fe82 	bl	8006662 <putc_flush>
}
 800695e:	b014      	add	sp, #80	; 0x50
 8006960:	bd10      	pop	{r4, pc}
	...

08006964 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006964:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <FATFS_LinkDriverEx+0x50>)
 8006966:	7a5b      	ldrb	r3, [r3, #9]
 8006968:	bb13      	cbnz	r3, 80069b0 <FATFS_LinkDriverEx+0x4c>
{
 800696a:	b510      	push	{r4, lr}
 800696c:	4604      	mov	r4, r0
 800696e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8006972:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <FATFS_LinkDriverEx+0x50>)
 8006974:	f893 c009 	ldrb.w	ip, [r3, #9]
 8006978:	fa5f fc8c 	uxtb.w	ip, ip
 800697c:	f04f 0e00 	mov.w	lr, #0
 8006980:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8006984:	f893 c009 	ldrb.w	ip, [r3, #9]
 8006988:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800698c:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8006990:	7a5c      	ldrb	r4, [r3, #9]
 8006992:	441c      	add	r4, r3
 8006994:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8006996:	7a5a      	ldrb	r2, [r3, #9]
 8006998:	1c54      	adds	r4, r2, #1
 800699a:	b2e4      	uxtb	r4, r4
 800699c:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800699e:	3230      	adds	r2, #48	; 0x30
 80069a0:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80069a2:	233a      	movs	r3, #58	; 0x3a
 80069a4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80069a6:	232f      	movs	r3, #47	; 0x2f
 80069a8:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80069aa:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 80069ae:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 80069b0:	2001      	movs	r0, #1
}
 80069b2:	4770      	bx	lr
 80069b4:	20002518 	.word	0x20002518

080069b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80069b8:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80069ba:	2200      	movs	r2, #0
 80069bc:	f7ff ffd2 	bl	8006964 <FATFS_LinkDriverEx>
}
 80069c0:	bd08      	pop	{r3, pc}
	...

080069c4 <__errno>:
 80069c4:	4b01      	ldr	r3, [pc, #4]	; (80069cc <__errno+0x8>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	20000024 	.word	0x20000024

080069d0 <__libc_init_array>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	4d0d      	ldr	r5, [pc, #52]	; (8006a08 <__libc_init_array+0x38>)
 80069d4:	4c0d      	ldr	r4, [pc, #52]	; (8006a0c <__libc_init_array+0x3c>)
 80069d6:	1b64      	subs	r4, r4, r5
 80069d8:	10a4      	asrs	r4, r4, #2
 80069da:	2600      	movs	r6, #0
 80069dc:	42a6      	cmp	r6, r4
 80069de:	d109      	bne.n	80069f4 <__libc_init_array+0x24>
 80069e0:	4d0b      	ldr	r5, [pc, #44]	; (8006a10 <__libc_init_array+0x40>)
 80069e2:	4c0c      	ldr	r4, [pc, #48]	; (8006a14 <__libc_init_array+0x44>)
 80069e4:	f002 ffac 	bl	8009940 <_init>
 80069e8:	1b64      	subs	r4, r4, r5
 80069ea:	10a4      	asrs	r4, r4, #2
 80069ec:	2600      	movs	r6, #0
 80069ee:	42a6      	cmp	r6, r4
 80069f0:	d105      	bne.n	80069fe <__libc_init_array+0x2e>
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f8:	4798      	blx	r3
 80069fa:	3601      	adds	r6, #1
 80069fc:	e7ee      	b.n	80069dc <__libc_init_array+0xc>
 80069fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a02:	4798      	blx	r3
 8006a04:	3601      	adds	r6, #1
 8006a06:	e7f2      	b.n	80069ee <__libc_init_array+0x1e>
 8006a08:	0800aaf4 	.word	0x0800aaf4
 8006a0c:	0800aaf4 	.word	0x0800aaf4
 8006a10:	0800aaf4 	.word	0x0800aaf4
 8006a14:	0800aaf8 	.word	0x0800aaf8

08006a18 <malloc>:
 8006a18:	4b02      	ldr	r3, [pc, #8]	; (8006a24 <malloc+0xc>)
 8006a1a:	4601      	mov	r1, r0
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	f000 b87f 	b.w	8006b20 <_malloc_r>
 8006a22:	bf00      	nop
 8006a24:	20000024 	.word	0x20000024

08006a28 <free>:
 8006a28:	4b02      	ldr	r3, [pc, #8]	; (8006a34 <free+0xc>)
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	f000 b80b 	b.w	8006a48 <_free_r>
 8006a32:	bf00      	nop
 8006a34:	20000024 	.word	0x20000024

08006a38 <memset>:
 8006a38:	4402      	add	r2, r0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d100      	bne.n	8006a42 <memset+0xa>
 8006a40:	4770      	bx	lr
 8006a42:	f803 1b01 	strb.w	r1, [r3], #1
 8006a46:	e7f9      	b.n	8006a3c <memset+0x4>

08006a48 <_free_r>:
 8006a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a4a:	2900      	cmp	r1, #0
 8006a4c:	d044      	beq.n	8006ad8 <_free_r+0x90>
 8006a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a52:	9001      	str	r0, [sp, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f1a1 0404 	sub.w	r4, r1, #4
 8006a5a:	bfb8      	it	lt
 8006a5c:	18e4      	addlt	r4, r4, r3
 8006a5e:	f001 ff7b 	bl	8008958 <__malloc_lock>
 8006a62:	4a1e      	ldr	r2, [pc, #120]	; (8006adc <_free_r+0x94>)
 8006a64:	9801      	ldr	r0, [sp, #4]
 8006a66:	6813      	ldr	r3, [r2, #0]
 8006a68:	b933      	cbnz	r3, 8006a78 <_free_r+0x30>
 8006a6a:	6063      	str	r3, [r4, #4]
 8006a6c:	6014      	str	r4, [r2, #0]
 8006a6e:	b003      	add	sp, #12
 8006a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a74:	f001 bf76 	b.w	8008964 <__malloc_unlock>
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	d908      	bls.n	8006a8e <_free_r+0x46>
 8006a7c:	6825      	ldr	r5, [r4, #0]
 8006a7e:	1961      	adds	r1, r4, r5
 8006a80:	428b      	cmp	r3, r1
 8006a82:	bf01      	itttt	eq
 8006a84:	6819      	ldreq	r1, [r3, #0]
 8006a86:	685b      	ldreq	r3, [r3, #4]
 8006a88:	1949      	addeq	r1, r1, r5
 8006a8a:	6021      	streq	r1, [r4, #0]
 8006a8c:	e7ed      	b.n	8006a6a <_free_r+0x22>
 8006a8e:	461a      	mov	r2, r3
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	b10b      	cbz	r3, 8006a98 <_free_r+0x50>
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	d9fa      	bls.n	8006a8e <_free_r+0x46>
 8006a98:	6811      	ldr	r1, [r2, #0]
 8006a9a:	1855      	adds	r5, r2, r1
 8006a9c:	42a5      	cmp	r5, r4
 8006a9e:	d10b      	bne.n	8006ab8 <_free_r+0x70>
 8006aa0:	6824      	ldr	r4, [r4, #0]
 8006aa2:	4421      	add	r1, r4
 8006aa4:	1854      	adds	r4, r2, r1
 8006aa6:	42a3      	cmp	r3, r4
 8006aa8:	6011      	str	r1, [r2, #0]
 8006aaa:	d1e0      	bne.n	8006a6e <_free_r+0x26>
 8006aac:	681c      	ldr	r4, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	6053      	str	r3, [r2, #4]
 8006ab2:	4421      	add	r1, r4
 8006ab4:	6011      	str	r1, [r2, #0]
 8006ab6:	e7da      	b.n	8006a6e <_free_r+0x26>
 8006ab8:	d902      	bls.n	8006ac0 <_free_r+0x78>
 8006aba:	230c      	movs	r3, #12
 8006abc:	6003      	str	r3, [r0, #0]
 8006abe:	e7d6      	b.n	8006a6e <_free_r+0x26>
 8006ac0:	6825      	ldr	r5, [r4, #0]
 8006ac2:	1961      	adds	r1, r4, r5
 8006ac4:	428b      	cmp	r3, r1
 8006ac6:	bf04      	itt	eq
 8006ac8:	6819      	ldreq	r1, [r3, #0]
 8006aca:	685b      	ldreq	r3, [r3, #4]
 8006acc:	6063      	str	r3, [r4, #4]
 8006ace:	bf04      	itt	eq
 8006ad0:	1949      	addeq	r1, r1, r5
 8006ad2:	6021      	streq	r1, [r4, #0]
 8006ad4:	6054      	str	r4, [r2, #4]
 8006ad6:	e7ca      	b.n	8006a6e <_free_r+0x26>
 8006ad8:	b003      	add	sp, #12
 8006ada:	bd30      	pop	{r4, r5, pc}
 8006adc:	20002524 	.word	0x20002524

08006ae0 <sbrk_aligned>:
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	4e0e      	ldr	r6, [pc, #56]	; (8006b1c <sbrk_aligned+0x3c>)
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	6831      	ldr	r1, [r6, #0]
 8006ae8:	4605      	mov	r5, r0
 8006aea:	b911      	cbnz	r1, 8006af2 <sbrk_aligned+0x12>
 8006aec:	f000 fd84 	bl	80075f8 <_sbrk_r>
 8006af0:	6030      	str	r0, [r6, #0]
 8006af2:	4621      	mov	r1, r4
 8006af4:	4628      	mov	r0, r5
 8006af6:	f000 fd7f 	bl	80075f8 <_sbrk_r>
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	d00a      	beq.n	8006b14 <sbrk_aligned+0x34>
 8006afe:	1cc4      	adds	r4, r0, #3
 8006b00:	f024 0403 	bic.w	r4, r4, #3
 8006b04:	42a0      	cmp	r0, r4
 8006b06:	d007      	beq.n	8006b18 <sbrk_aligned+0x38>
 8006b08:	1a21      	subs	r1, r4, r0
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 fd74 	bl	80075f8 <_sbrk_r>
 8006b10:	3001      	adds	r0, #1
 8006b12:	d101      	bne.n	8006b18 <sbrk_aligned+0x38>
 8006b14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006b18:	4620      	mov	r0, r4
 8006b1a:	bd70      	pop	{r4, r5, r6, pc}
 8006b1c:	20002528 	.word	0x20002528

08006b20 <_malloc_r>:
 8006b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b24:	1ccd      	adds	r5, r1, #3
 8006b26:	f025 0503 	bic.w	r5, r5, #3
 8006b2a:	3508      	adds	r5, #8
 8006b2c:	2d0c      	cmp	r5, #12
 8006b2e:	bf38      	it	cc
 8006b30:	250c      	movcc	r5, #12
 8006b32:	2d00      	cmp	r5, #0
 8006b34:	4607      	mov	r7, r0
 8006b36:	db01      	blt.n	8006b3c <_malloc_r+0x1c>
 8006b38:	42a9      	cmp	r1, r5
 8006b3a:	d905      	bls.n	8006b48 <_malloc_r+0x28>
 8006b3c:	230c      	movs	r3, #12
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	2600      	movs	r6, #0
 8006b42:	4630      	mov	r0, r6
 8006b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b48:	4e2e      	ldr	r6, [pc, #184]	; (8006c04 <_malloc_r+0xe4>)
 8006b4a:	f001 ff05 	bl	8008958 <__malloc_lock>
 8006b4e:	6833      	ldr	r3, [r6, #0]
 8006b50:	461c      	mov	r4, r3
 8006b52:	bb34      	cbnz	r4, 8006ba2 <_malloc_r+0x82>
 8006b54:	4629      	mov	r1, r5
 8006b56:	4638      	mov	r0, r7
 8006b58:	f7ff ffc2 	bl	8006ae0 <sbrk_aligned>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	4604      	mov	r4, r0
 8006b60:	d14d      	bne.n	8006bfe <_malloc_r+0xde>
 8006b62:	6834      	ldr	r4, [r6, #0]
 8006b64:	4626      	mov	r6, r4
 8006b66:	2e00      	cmp	r6, #0
 8006b68:	d140      	bne.n	8006bec <_malloc_r+0xcc>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	4638      	mov	r0, r7
 8006b70:	eb04 0803 	add.w	r8, r4, r3
 8006b74:	f000 fd40 	bl	80075f8 <_sbrk_r>
 8006b78:	4580      	cmp	r8, r0
 8006b7a:	d13a      	bne.n	8006bf2 <_malloc_r+0xd2>
 8006b7c:	6821      	ldr	r1, [r4, #0]
 8006b7e:	3503      	adds	r5, #3
 8006b80:	1a6d      	subs	r5, r5, r1
 8006b82:	f025 0503 	bic.w	r5, r5, #3
 8006b86:	3508      	adds	r5, #8
 8006b88:	2d0c      	cmp	r5, #12
 8006b8a:	bf38      	it	cc
 8006b8c:	250c      	movcc	r5, #12
 8006b8e:	4629      	mov	r1, r5
 8006b90:	4638      	mov	r0, r7
 8006b92:	f7ff ffa5 	bl	8006ae0 <sbrk_aligned>
 8006b96:	3001      	adds	r0, #1
 8006b98:	d02b      	beq.n	8006bf2 <_malloc_r+0xd2>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	442b      	add	r3, r5
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	e00e      	b.n	8006bc0 <_malloc_r+0xa0>
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	1b52      	subs	r2, r2, r5
 8006ba6:	d41e      	bmi.n	8006be6 <_malloc_r+0xc6>
 8006ba8:	2a0b      	cmp	r2, #11
 8006baa:	d916      	bls.n	8006bda <_malloc_r+0xba>
 8006bac:	1961      	adds	r1, r4, r5
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	6025      	str	r5, [r4, #0]
 8006bb2:	bf18      	it	ne
 8006bb4:	6059      	strne	r1, [r3, #4]
 8006bb6:	6863      	ldr	r3, [r4, #4]
 8006bb8:	bf08      	it	eq
 8006bba:	6031      	streq	r1, [r6, #0]
 8006bbc:	5162      	str	r2, [r4, r5]
 8006bbe:	604b      	str	r3, [r1, #4]
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f104 060b 	add.w	r6, r4, #11
 8006bc6:	f001 fecd 	bl	8008964 <__malloc_unlock>
 8006bca:	f026 0607 	bic.w	r6, r6, #7
 8006bce:	1d23      	adds	r3, r4, #4
 8006bd0:	1af2      	subs	r2, r6, r3
 8006bd2:	d0b6      	beq.n	8006b42 <_malloc_r+0x22>
 8006bd4:	1b9b      	subs	r3, r3, r6
 8006bd6:	50a3      	str	r3, [r4, r2]
 8006bd8:	e7b3      	b.n	8006b42 <_malloc_r+0x22>
 8006bda:	6862      	ldr	r2, [r4, #4]
 8006bdc:	42a3      	cmp	r3, r4
 8006bde:	bf0c      	ite	eq
 8006be0:	6032      	streq	r2, [r6, #0]
 8006be2:	605a      	strne	r2, [r3, #4]
 8006be4:	e7ec      	b.n	8006bc0 <_malloc_r+0xa0>
 8006be6:	4623      	mov	r3, r4
 8006be8:	6864      	ldr	r4, [r4, #4]
 8006bea:	e7b2      	b.n	8006b52 <_malloc_r+0x32>
 8006bec:	4634      	mov	r4, r6
 8006bee:	6876      	ldr	r6, [r6, #4]
 8006bf0:	e7b9      	b.n	8006b66 <_malloc_r+0x46>
 8006bf2:	230c      	movs	r3, #12
 8006bf4:	603b      	str	r3, [r7, #0]
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	f001 feb4 	bl	8008964 <__malloc_unlock>
 8006bfc:	e7a1      	b.n	8006b42 <_malloc_r+0x22>
 8006bfe:	6025      	str	r5, [r4, #0]
 8006c00:	e7de      	b.n	8006bc0 <_malloc_r+0xa0>
 8006c02:	bf00      	nop
 8006c04:	20002524 	.word	0x20002524

08006c08 <__cvt>:
 8006c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0c:	ec55 4b10 	vmov	r4, r5, d0
 8006c10:	2d00      	cmp	r5, #0
 8006c12:	460e      	mov	r6, r1
 8006c14:	4619      	mov	r1, r3
 8006c16:	462b      	mov	r3, r5
 8006c18:	bfbb      	ittet	lt
 8006c1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c1e:	461d      	movlt	r5, r3
 8006c20:	2300      	movge	r3, #0
 8006c22:	232d      	movlt	r3, #45	; 0x2d
 8006c24:	700b      	strb	r3, [r1, #0]
 8006c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c2c:	4691      	mov	r9, r2
 8006c2e:	f023 0820 	bic.w	r8, r3, #32
 8006c32:	bfbc      	itt	lt
 8006c34:	4622      	movlt	r2, r4
 8006c36:	4614      	movlt	r4, r2
 8006c38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c3c:	d005      	beq.n	8006c4a <__cvt+0x42>
 8006c3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c42:	d100      	bne.n	8006c46 <__cvt+0x3e>
 8006c44:	3601      	adds	r6, #1
 8006c46:	2102      	movs	r1, #2
 8006c48:	e000      	b.n	8006c4c <__cvt+0x44>
 8006c4a:	2103      	movs	r1, #3
 8006c4c:	ab03      	add	r3, sp, #12
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	ab02      	add	r3, sp, #8
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	ec45 4b10 	vmov	d0, r4, r5
 8006c58:	4653      	mov	r3, sl
 8006c5a:	4632      	mov	r2, r6
 8006c5c:	f000 fe5c 	bl	8007918 <_dtoa_r>
 8006c60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c64:	4607      	mov	r7, r0
 8006c66:	d102      	bne.n	8006c6e <__cvt+0x66>
 8006c68:	f019 0f01 	tst.w	r9, #1
 8006c6c:	d022      	beq.n	8006cb4 <__cvt+0xac>
 8006c6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c72:	eb07 0906 	add.w	r9, r7, r6
 8006c76:	d110      	bne.n	8006c9a <__cvt+0x92>
 8006c78:	783b      	ldrb	r3, [r7, #0]
 8006c7a:	2b30      	cmp	r3, #48	; 0x30
 8006c7c:	d10a      	bne.n	8006c94 <__cvt+0x8c>
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2300      	movs	r3, #0
 8006c82:	4620      	mov	r0, r4
 8006c84:	4629      	mov	r1, r5
 8006c86:	f7f9 ff37 	bl	8000af8 <__aeabi_dcmpeq>
 8006c8a:	b918      	cbnz	r0, 8006c94 <__cvt+0x8c>
 8006c8c:	f1c6 0601 	rsb	r6, r6, #1
 8006c90:	f8ca 6000 	str.w	r6, [sl]
 8006c94:	f8da 3000 	ldr.w	r3, [sl]
 8006c98:	4499      	add	r9, r3
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 ff29 	bl	8000af8 <__aeabi_dcmpeq>
 8006ca6:	b108      	cbz	r0, 8006cac <__cvt+0xa4>
 8006ca8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006cac:	2230      	movs	r2, #48	; 0x30
 8006cae:	9b03      	ldr	r3, [sp, #12]
 8006cb0:	454b      	cmp	r3, r9
 8006cb2:	d307      	bcc.n	8006cc4 <__cvt+0xbc>
 8006cb4:	9b03      	ldr	r3, [sp, #12]
 8006cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cb8:	1bdb      	subs	r3, r3, r7
 8006cba:	4638      	mov	r0, r7
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	b004      	add	sp, #16
 8006cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc4:	1c59      	adds	r1, r3, #1
 8006cc6:	9103      	str	r1, [sp, #12]
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	e7f0      	b.n	8006cae <__cvt+0xa6>

08006ccc <__exponent>:
 8006ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	bfb8      	it	lt
 8006cd4:	4249      	neglt	r1, r1
 8006cd6:	f803 2b02 	strb.w	r2, [r3], #2
 8006cda:	bfb4      	ite	lt
 8006cdc:	222d      	movlt	r2, #45	; 0x2d
 8006cde:	222b      	movge	r2, #43	; 0x2b
 8006ce0:	2909      	cmp	r1, #9
 8006ce2:	7042      	strb	r2, [r0, #1]
 8006ce4:	dd2a      	ble.n	8006d3c <__exponent+0x70>
 8006ce6:	f10d 0407 	add.w	r4, sp, #7
 8006cea:	46a4      	mov	ip, r4
 8006cec:	270a      	movs	r7, #10
 8006cee:	46a6      	mov	lr, r4
 8006cf0:	460a      	mov	r2, r1
 8006cf2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cf6:	fb07 1516 	mls	r5, r7, r6, r1
 8006cfa:	3530      	adds	r5, #48	; 0x30
 8006cfc:	2a63      	cmp	r2, #99	; 0x63
 8006cfe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006d02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d06:	4631      	mov	r1, r6
 8006d08:	dcf1      	bgt.n	8006cee <__exponent+0x22>
 8006d0a:	3130      	adds	r1, #48	; 0x30
 8006d0c:	f1ae 0502 	sub.w	r5, lr, #2
 8006d10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d14:	1c44      	adds	r4, r0, #1
 8006d16:	4629      	mov	r1, r5
 8006d18:	4561      	cmp	r1, ip
 8006d1a:	d30a      	bcc.n	8006d32 <__exponent+0x66>
 8006d1c:	f10d 0209 	add.w	r2, sp, #9
 8006d20:	eba2 020e 	sub.w	r2, r2, lr
 8006d24:	4565      	cmp	r5, ip
 8006d26:	bf88      	it	hi
 8006d28:	2200      	movhi	r2, #0
 8006d2a:	4413      	add	r3, r2
 8006d2c:	1a18      	subs	r0, r3, r0
 8006d2e:	b003      	add	sp, #12
 8006d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d3a:	e7ed      	b.n	8006d18 <__exponent+0x4c>
 8006d3c:	2330      	movs	r3, #48	; 0x30
 8006d3e:	3130      	adds	r1, #48	; 0x30
 8006d40:	7083      	strb	r3, [r0, #2]
 8006d42:	70c1      	strb	r1, [r0, #3]
 8006d44:	1d03      	adds	r3, r0, #4
 8006d46:	e7f1      	b.n	8006d2c <__exponent+0x60>

08006d48 <_printf_float>:
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	ed2d 8b02 	vpush	{d8}
 8006d50:	b08d      	sub	sp, #52	; 0x34
 8006d52:	460c      	mov	r4, r1
 8006d54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d58:	4616      	mov	r6, r2
 8006d5a:	461f      	mov	r7, r3
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	f001 fd81 	bl	8008864 <_localeconv_r>
 8006d62:	f8d0 a000 	ldr.w	sl, [r0]
 8006d66:	4650      	mov	r0, sl
 8006d68:	f7f9 fa44 	bl	80001f4 <strlen>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	9305      	str	r3, [sp, #20]
 8006d74:	f8d8 3000 	ldr.w	r3, [r8]
 8006d78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d7c:	3307      	adds	r3, #7
 8006d7e:	f023 0307 	bic.w	r3, r3, #7
 8006d82:	f103 0208 	add.w	r2, r3, #8
 8006d86:	f8c8 2000 	str.w	r2, [r8]
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d9a:	9307      	str	r3, [sp, #28]
 8006d9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006da0:	ee08 0a10 	vmov	s16, r0
 8006da4:	4b9f      	ldr	r3, [pc, #636]	; (8007024 <_printf_float+0x2dc>)
 8006da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006daa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dae:	f7f9 fed5 	bl	8000b5c <__aeabi_dcmpun>
 8006db2:	bb88      	cbnz	r0, 8006e18 <_printf_float+0xd0>
 8006db4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006db8:	4b9a      	ldr	r3, [pc, #616]	; (8007024 <_printf_float+0x2dc>)
 8006dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dbe:	f7f9 feaf 	bl	8000b20 <__aeabi_dcmple>
 8006dc2:	bb48      	cbnz	r0, 8006e18 <_printf_float+0xd0>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4640      	mov	r0, r8
 8006dca:	4649      	mov	r1, r9
 8006dcc:	f7f9 fe9e 	bl	8000b0c <__aeabi_dcmplt>
 8006dd0:	b110      	cbz	r0, 8006dd8 <_printf_float+0x90>
 8006dd2:	232d      	movs	r3, #45	; 0x2d
 8006dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dd8:	4b93      	ldr	r3, [pc, #588]	; (8007028 <_printf_float+0x2e0>)
 8006dda:	4894      	ldr	r0, [pc, #592]	; (800702c <_printf_float+0x2e4>)
 8006ddc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006de0:	bf94      	ite	ls
 8006de2:	4698      	movls	r8, r3
 8006de4:	4680      	movhi	r8, r0
 8006de6:	2303      	movs	r3, #3
 8006de8:	6123      	str	r3, [r4, #16]
 8006dea:	9b05      	ldr	r3, [sp, #20]
 8006dec:	f023 0204 	bic.w	r2, r3, #4
 8006df0:	6022      	str	r2, [r4, #0]
 8006df2:	f04f 0900 	mov.w	r9, #0
 8006df6:	9700      	str	r7, [sp, #0]
 8006df8:	4633      	mov	r3, r6
 8006dfa:	aa0b      	add	r2, sp, #44	; 0x2c
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 f9d8 	bl	80071b4 <_printf_common>
 8006e04:	3001      	adds	r0, #1
 8006e06:	f040 8090 	bne.w	8006f2a <_printf_float+0x1e2>
 8006e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e0e:	b00d      	add	sp, #52	; 0x34
 8006e10:	ecbd 8b02 	vpop	{d8}
 8006e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e18:	4642      	mov	r2, r8
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	4649      	mov	r1, r9
 8006e20:	f7f9 fe9c 	bl	8000b5c <__aeabi_dcmpun>
 8006e24:	b140      	cbz	r0, 8006e38 <_printf_float+0xf0>
 8006e26:	464b      	mov	r3, r9
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	bfbc      	itt	lt
 8006e2c:	232d      	movlt	r3, #45	; 0x2d
 8006e2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e32:	487f      	ldr	r0, [pc, #508]	; (8007030 <_printf_float+0x2e8>)
 8006e34:	4b7f      	ldr	r3, [pc, #508]	; (8007034 <_printf_float+0x2ec>)
 8006e36:	e7d1      	b.n	8006ddc <_printf_float+0x94>
 8006e38:	6863      	ldr	r3, [r4, #4]
 8006e3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e3e:	9206      	str	r2, [sp, #24]
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	d13f      	bne.n	8006ec4 <_printf_float+0x17c>
 8006e44:	2306      	movs	r3, #6
 8006e46:	6063      	str	r3, [r4, #4]
 8006e48:	9b05      	ldr	r3, [sp, #20]
 8006e4a:	6861      	ldr	r1, [r4, #4]
 8006e4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e50:	2300      	movs	r3, #0
 8006e52:	9303      	str	r3, [sp, #12]
 8006e54:	ab0a      	add	r3, sp, #40	; 0x28
 8006e56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e5a:	ab09      	add	r3, sp, #36	; 0x24
 8006e5c:	ec49 8b10 	vmov	d0, r8, r9
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	6022      	str	r2, [r4, #0]
 8006e64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f7ff fecd 	bl	8006c08 <__cvt>
 8006e6e:	9b06      	ldr	r3, [sp, #24]
 8006e70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e72:	2b47      	cmp	r3, #71	; 0x47
 8006e74:	4680      	mov	r8, r0
 8006e76:	d108      	bne.n	8006e8a <_printf_float+0x142>
 8006e78:	1cc8      	adds	r0, r1, #3
 8006e7a:	db02      	blt.n	8006e82 <_printf_float+0x13a>
 8006e7c:	6863      	ldr	r3, [r4, #4]
 8006e7e:	4299      	cmp	r1, r3
 8006e80:	dd41      	ble.n	8006f06 <_printf_float+0x1be>
 8006e82:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e86:	fa5f fb8b 	uxtb.w	fp, fp
 8006e8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e8e:	d820      	bhi.n	8006ed2 <_printf_float+0x18a>
 8006e90:	3901      	subs	r1, #1
 8006e92:	465a      	mov	r2, fp
 8006e94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e98:	9109      	str	r1, [sp, #36]	; 0x24
 8006e9a:	f7ff ff17 	bl	8006ccc <__exponent>
 8006e9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ea0:	1813      	adds	r3, r2, r0
 8006ea2:	2a01      	cmp	r2, #1
 8006ea4:	4681      	mov	r9, r0
 8006ea6:	6123      	str	r3, [r4, #16]
 8006ea8:	dc02      	bgt.n	8006eb0 <_printf_float+0x168>
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	07d2      	lsls	r2, r2, #31
 8006eae:	d501      	bpl.n	8006eb4 <_printf_float+0x16c>
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	6123      	str	r3, [r4, #16]
 8006eb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d09c      	beq.n	8006df6 <_printf_float+0xae>
 8006ebc:	232d      	movs	r3, #45	; 0x2d
 8006ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ec2:	e798      	b.n	8006df6 <_printf_float+0xae>
 8006ec4:	9a06      	ldr	r2, [sp, #24]
 8006ec6:	2a47      	cmp	r2, #71	; 0x47
 8006ec8:	d1be      	bne.n	8006e48 <_printf_float+0x100>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1bc      	bne.n	8006e48 <_printf_float+0x100>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e7b9      	b.n	8006e46 <_printf_float+0xfe>
 8006ed2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ed6:	d118      	bne.n	8006f0a <_printf_float+0x1c2>
 8006ed8:	2900      	cmp	r1, #0
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	dd0b      	ble.n	8006ef6 <_printf_float+0x1ae>
 8006ede:	6121      	str	r1, [r4, #16]
 8006ee0:	b913      	cbnz	r3, 8006ee8 <_printf_float+0x1a0>
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	07d0      	lsls	r0, r2, #31
 8006ee6:	d502      	bpl.n	8006eee <_printf_float+0x1a6>
 8006ee8:	3301      	adds	r3, #1
 8006eea:	440b      	add	r3, r1
 8006eec:	6123      	str	r3, [r4, #16]
 8006eee:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ef0:	f04f 0900 	mov.w	r9, #0
 8006ef4:	e7de      	b.n	8006eb4 <_printf_float+0x16c>
 8006ef6:	b913      	cbnz	r3, 8006efe <_printf_float+0x1b6>
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	07d2      	lsls	r2, r2, #31
 8006efc:	d501      	bpl.n	8006f02 <_printf_float+0x1ba>
 8006efe:	3302      	adds	r3, #2
 8006f00:	e7f4      	b.n	8006eec <_printf_float+0x1a4>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e7f2      	b.n	8006eec <_printf_float+0x1a4>
 8006f06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0c:	4299      	cmp	r1, r3
 8006f0e:	db05      	blt.n	8006f1c <_printf_float+0x1d4>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	6121      	str	r1, [r4, #16]
 8006f14:	07d8      	lsls	r0, r3, #31
 8006f16:	d5ea      	bpl.n	8006eee <_printf_float+0x1a6>
 8006f18:	1c4b      	adds	r3, r1, #1
 8006f1a:	e7e7      	b.n	8006eec <_printf_float+0x1a4>
 8006f1c:	2900      	cmp	r1, #0
 8006f1e:	bfd4      	ite	le
 8006f20:	f1c1 0202 	rsble	r2, r1, #2
 8006f24:	2201      	movgt	r2, #1
 8006f26:	4413      	add	r3, r2
 8006f28:	e7e0      	b.n	8006eec <_printf_float+0x1a4>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	055a      	lsls	r2, r3, #21
 8006f2e:	d407      	bmi.n	8006f40 <_printf_float+0x1f8>
 8006f30:	6923      	ldr	r3, [r4, #16]
 8006f32:	4642      	mov	r2, r8
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d12c      	bne.n	8006f98 <_printf_float+0x250>
 8006f3e:	e764      	b.n	8006e0a <_printf_float+0xc2>
 8006f40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f44:	f240 80e0 	bls.w	8007108 <_printf_float+0x3c0>
 8006f48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f7f9 fdd2 	bl	8000af8 <__aeabi_dcmpeq>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d034      	beq.n	8006fc2 <_printf_float+0x27a>
 8006f58:	4a37      	ldr	r2, [pc, #220]	; (8007038 <_printf_float+0x2f0>)
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4628      	mov	r0, r5
 8006f60:	47b8      	blx	r7
 8006f62:	3001      	adds	r0, #1
 8006f64:	f43f af51 	beq.w	8006e0a <_printf_float+0xc2>
 8006f68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	db02      	blt.n	8006f76 <_printf_float+0x22e>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	07d8      	lsls	r0, r3, #31
 8006f74:	d510      	bpl.n	8006f98 <_printf_float+0x250>
 8006f76:	ee18 3a10 	vmov	r3, s16
 8006f7a:	4652      	mov	r2, sl
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4628      	mov	r0, r5
 8006f80:	47b8      	blx	r7
 8006f82:	3001      	adds	r0, #1
 8006f84:	f43f af41 	beq.w	8006e0a <_printf_float+0xc2>
 8006f88:	f04f 0800 	mov.w	r8, #0
 8006f8c:	f104 091a 	add.w	r9, r4, #26
 8006f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f92:	3b01      	subs	r3, #1
 8006f94:	4543      	cmp	r3, r8
 8006f96:	dc09      	bgt.n	8006fac <_printf_float+0x264>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	079b      	lsls	r3, r3, #30
 8006f9c:	f100 8105 	bmi.w	80071aa <_printf_float+0x462>
 8006fa0:	68e0      	ldr	r0, [r4, #12]
 8006fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fa4:	4298      	cmp	r0, r3
 8006fa6:	bfb8      	it	lt
 8006fa8:	4618      	movlt	r0, r3
 8006faa:	e730      	b.n	8006e0e <_printf_float+0xc6>
 8006fac:	2301      	movs	r3, #1
 8006fae:	464a      	mov	r2, r9
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b8      	blx	r7
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	f43f af27 	beq.w	8006e0a <_printf_float+0xc2>
 8006fbc:	f108 0801 	add.w	r8, r8, #1
 8006fc0:	e7e6      	b.n	8006f90 <_printf_float+0x248>
 8006fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	dc39      	bgt.n	800703c <_printf_float+0x2f4>
 8006fc8:	4a1b      	ldr	r2, [pc, #108]	; (8007038 <_printf_float+0x2f0>)
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4628      	mov	r0, r5
 8006fd0:	47b8      	blx	r7
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	f43f af19 	beq.w	8006e0a <_printf_float+0xc2>
 8006fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	d102      	bne.n	8006fe6 <_printf_float+0x29e>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	07d9      	lsls	r1, r3, #31
 8006fe4:	d5d8      	bpl.n	8006f98 <_printf_float+0x250>
 8006fe6:	ee18 3a10 	vmov	r3, s16
 8006fea:	4652      	mov	r2, sl
 8006fec:	4631      	mov	r1, r6
 8006fee:	4628      	mov	r0, r5
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	f43f af09 	beq.w	8006e0a <_printf_float+0xc2>
 8006ff8:	f04f 0900 	mov.w	r9, #0
 8006ffc:	f104 0a1a 	add.w	sl, r4, #26
 8007000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007002:	425b      	negs	r3, r3
 8007004:	454b      	cmp	r3, r9
 8007006:	dc01      	bgt.n	800700c <_printf_float+0x2c4>
 8007008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800700a:	e792      	b.n	8006f32 <_printf_float+0x1ea>
 800700c:	2301      	movs	r3, #1
 800700e:	4652      	mov	r2, sl
 8007010:	4631      	mov	r1, r6
 8007012:	4628      	mov	r0, r5
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	f43f aef7 	beq.w	8006e0a <_printf_float+0xc2>
 800701c:	f109 0901 	add.w	r9, r9, #1
 8007020:	e7ee      	b.n	8007000 <_printf_float+0x2b8>
 8007022:	bf00      	nop
 8007024:	7fefffff 	.word	0x7fefffff
 8007028:	0800a714 	.word	0x0800a714
 800702c:	0800a718 	.word	0x0800a718
 8007030:	0800a720 	.word	0x0800a720
 8007034:	0800a71c 	.word	0x0800a71c
 8007038:	0800a724 	.word	0x0800a724
 800703c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800703e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007040:	429a      	cmp	r2, r3
 8007042:	bfa8      	it	ge
 8007044:	461a      	movge	r2, r3
 8007046:	2a00      	cmp	r2, #0
 8007048:	4691      	mov	r9, r2
 800704a:	dc37      	bgt.n	80070bc <_printf_float+0x374>
 800704c:	f04f 0b00 	mov.w	fp, #0
 8007050:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007054:	f104 021a 	add.w	r2, r4, #26
 8007058:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800705a:	9305      	str	r3, [sp, #20]
 800705c:	eba3 0309 	sub.w	r3, r3, r9
 8007060:	455b      	cmp	r3, fp
 8007062:	dc33      	bgt.n	80070cc <_printf_float+0x384>
 8007064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007068:	429a      	cmp	r2, r3
 800706a:	db3b      	blt.n	80070e4 <_printf_float+0x39c>
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	07da      	lsls	r2, r3, #31
 8007070:	d438      	bmi.n	80070e4 <_printf_float+0x39c>
 8007072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007074:	9a05      	ldr	r2, [sp, #20]
 8007076:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007078:	1a9a      	subs	r2, r3, r2
 800707a:	eba3 0901 	sub.w	r9, r3, r1
 800707e:	4591      	cmp	r9, r2
 8007080:	bfa8      	it	ge
 8007082:	4691      	movge	r9, r2
 8007084:	f1b9 0f00 	cmp.w	r9, #0
 8007088:	dc35      	bgt.n	80070f6 <_printf_float+0x3ae>
 800708a:	f04f 0800 	mov.w	r8, #0
 800708e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007092:	f104 0a1a 	add.w	sl, r4, #26
 8007096:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	eba3 0309 	sub.w	r3, r3, r9
 80070a0:	4543      	cmp	r3, r8
 80070a2:	f77f af79 	ble.w	8006f98 <_printf_float+0x250>
 80070a6:	2301      	movs	r3, #1
 80070a8:	4652      	mov	r2, sl
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f aeaa 	beq.w	8006e0a <_printf_float+0xc2>
 80070b6:	f108 0801 	add.w	r8, r8, #1
 80070ba:	e7ec      	b.n	8007096 <_printf_float+0x34e>
 80070bc:	4613      	mov	r3, r2
 80070be:	4631      	mov	r1, r6
 80070c0:	4642      	mov	r2, r8
 80070c2:	4628      	mov	r0, r5
 80070c4:	47b8      	blx	r7
 80070c6:	3001      	adds	r0, #1
 80070c8:	d1c0      	bne.n	800704c <_printf_float+0x304>
 80070ca:	e69e      	b.n	8006e0a <_printf_float+0xc2>
 80070cc:	2301      	movs	r3, #1
 80070ce:	4631      	mov	r1, r6
 80070d0:	4628      	mov	r0, r5
 80070d2:	9205      	str	r2, [sp, #20]
 80070d4:	47b8      	blx	r7
 80070d6:	3001      	adds	r0, #1
 80070d8:	f43f ae97 	beq.w	8006e0a <_printf_float+0xc2>
 80070dc:	9a05      	ldr	r2, [sp, #20]
 80070de:	f10b 0b01 	add.w	fp, fp, #1
 80070e2:	e7b9      	b.n	8007058 <_printf_float+0x310>
 80070e4:	ee18 3a10 	vmov	r3, s16
 80070e8:	4652      	mov	r2, sl
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	47b8      	blx	r7
 80070f0:	3001      	adds	r0, #1
 80070f2:	d1be      	bne.n	8007072 <_printf_float+0x32a>
 80070f4:	e689      	b.n	8006e0a <_printf_float+0xc2>
 80070f6:	9a05      	ldr	r2, [sp, #20]
 80070f8:	464b      	mov	r3, r9
 80070fa:	4442      	add	r2, r8
 80070fc:	4631      	mov	r1, r6
 80070fe:	4628      	mov	r0, r5
 8007100:	47b8      	blx	r7
 8007102:	3001      	adds	r0, #1
 8007104:	d1c1      	bne.n	800708a <_printf_float+0x342>
 8007106:	e680      	b.n	8006e0a <_printf_float+0xc2>
 8007108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800710a:	2a01      	cmp	r2, #1
 800710c:	dc01      	bgt.n	8007112 <_printf_float+0x3ca>
 800710e:	07db      	lsls	r3, r3, #31
 8007110:	d538      	bpl.n	8007184 <_printf_float+0x43c>
 8007112:	2301      	movs	r3, #1
 8007114:	4642      	mov	r2, r8
 8007116:	4631      	mov	r1, r6
 8007118:	4628      	mov	r0, r5
 800711a:	47b8      	blx	r7
 800711c:	3001      	adds	r0, #1
 800711e:	f43f ae74 	beq.w	8006e0a <_printf_float+0xc2>
 8007122:	ee18 3a10 	vmov	r3, s16
 8007126:	4652      	mov	r2, sl
 8007128:	4631      	mov	r1, r6
 800712a:	4628      	mov	r0, r5
 800712c:	47b8      	blx	r7
 800712e:	3001      	adds	r0, #1
 8007130:	f43f ae6b 	beq.w	8006e0a <_printf_float+0xc2>
 8007134:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007138:	2200      	movs	r2, #0
 800713a:	2300      	movs	r3, #0
 800713c:	f7f9 fcdc 	bl	8000af8 <__aeabi_dcmpeq>
 8007140:	b9d8      	cbnz	r0, 800717a <_printf_float+0x432>
 8007142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007144:	f108 0201 	add.w	r2, r8, #1
 8007148:	3b01      	subs	r3, #1
 800714a:	4631      	mov	r1, r6
 800714c:	4628      	mov	r0, r5
 800714e:	47b8      	blx	r7
 8007150:	3001      	adds	r0, #1
 8007152:	d10e      	bne.n	8007172 <_printf_float+0x42a>
 8007154:	e659      	b.n	8006e0a <_printf_float+0xc2>
 8007156:	2301      	movs	r3, #1
 8007158:	4652      	mov	r2, sl
 800715a:	4631      	mov	r1, r6
 800715c:	4628      	mov	r0, r5
 800715e:	47b8      	blx	r7
 8007160:	3001      	adds	r0, #1
 8007162:	f43f ae52 	beq.w	8006e0a <_printf_float+0xc2>
 8007166:	f108 0801 	add.w	r8, r8, #1
 800716a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800716c:	3b01      	subs	r3, #1
 800716e:	4543      	cmp	r3, r8
 8007170:	dcf1      	bgt.n	8007156 <_printf_float+0x40e>
 8007172:	464b      	mov	r3, r9
 8007174:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007178:	e6dc      	b.n	8006f34 <_printf_float+0x1ec>
 800717a:	f04f 0800 	mov.w	r8, #0
 800717e:	f104 0a1a 	add.w	sl, r4, #26
 8007182:	e7f2      	b.n	800716a <_printf_float+0x422>
 8007184:	2301      	movs	r3, #1
 8007186:	4642      	mov	r2, r8
 8007188:	e7df      	b.n	800714a <_printf_float+0x402>
 800718a:	2301      	movs	r3, #1
 800718c:	464a      	mov	r2, r9
 800718e:	4631      	mov	r1, r6
 8007190:	4628      	mov	r0, r5
 8007192:	47b8      	blx	r7
 8007194:	3001      	adds	r0, #1
 8007196:	f43f ae38 	beq.w	8006e0a <_printf_float+0xc2>
 800719a:	f108 0801 	add.w	r8, r8, #1
 800719e:	68e3      	ldr	r3, [r4, #12]
 80071a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071a2:	1a5b      	subs	r3, r3, r1
 80071a4:	4543      	cmp	r3, r8
 80071a6:	dcf0      	bgt.n	800718a <_printf_float+0x442>
 80071a8:	e6fa      	b.n	8006fa0 <_printf_float+0x258>
 80071aa:	f04f 0800 	mov.w	r8, #0
 80071ae:	f104 0919 	add.w	r9, r4, #25
 80071b2:	e7f4      	b.n	800719e <_printf_float+0x456>

080071b4 <_printf_common>:
 80071b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b8:	4616      	mov	r6, r2
 80071ba:	4699      	mov	r9, r3
 80071bc:	688a      	ldr	r2, [r1, #8]
 80071be:	690b      	ldr	r3, [r1, #16]
 80071c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	bfb8      	it	lt
 80071c8:	4613      	movlt	r3, r2
 80071ca:	6033      	str	r3, [r6, #0]
 80071cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071d0:	4607      	mov	r7, r0
 80071d2:	460c      	mov	r4, r1
 80071d4:	b10a      	cbz	r2, 80071da <_printf_common+0x26>
 80071d6:	3301      	adds	r3, #1
 80071d8:	6033      	str	r3, [r6, #0]
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	0699      	lsls	r1, r3, #26
 80071de:	bf42      	ittt	mi
 80071e0:	6833      	ldrmi	r3, [r6, #0]
 80071e2:	3302      	addmi	r3, #2
 80071e4:	6033      	strmi	r3, [r6, #0]
 80071e6:	6825      	ldr	r5, [r4, #0]
 80071e8:	f015 0506 	ands.w	r5, r5, #6
 80071ec:	d106      	bne.n	80071fc <_printf_common+0x48>
 80071ee:	f104 0a19 	add.w	sl, r4, #25
 80071f2:	68e3      	ldr	r3, [r4, #12]
 80071f4:	6832      	ldr	r2, [r6, #0]
 80071f6:	1a9b      	subs	r3, r3, r2
 80071f8:	42ab      	cmp	r3, r5
 80071fa:	dc26      	bgt.n	800724a <_printf_common+0x96>
 80071fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007200:	1e13      	subs	r3, r2, #0
 8007202:	6822      	ldr	r2, [r4, #0]
 8007204:	bf18      	it	ne
 8007206:	2301      	movne	r3, #1
 8007208:	0692      	lsls	r2, r2, #26
 800720a:	d42b      	bmi.n	8007264 <_printf_common+0xb0>
 800720c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007210:	4649      	mov	r1, r9
 8007212:	4638      	mov	r0, r7
 8007214:	47c0      	blx	r8
 8007216:	3001      	adds	r0, #1
 8007218:	d01e      	beq.n	8007258 <_printf_common+0xa4>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	68e5      	ldr	r5, [r4, #12]
 800721e:	6832      	ldr	r2, [r6, #0]
 8007220:	f003 0306 	and.w	r3, r3, #6
 8007224:	2b04      	cmp	r3, #4
 8007226:	bf08      	it	eq
 8007228:	1aad      	subeq	r5, r5, r2
 800722a:	68a3      	ldr	r3, [r4, #8]
 800722c:	6922      	ldr	r2, [r4, #16]
 800722e:	bf0c      	ite	eq
 8007230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007234:	2500      	movne	r5, #0
 8007236:	4293      	cmp	r3, r2
 8007238:	bfc4      	itt	gt
 800723a:	1a9b      	subgt	r3, r3, r2
 800723c:	18ed      	addgt	r5, r5, r3
 800723e:	2600      	movs	r6, #0
 8007240:	341a      	adds	r4, #26
 8007242:	42b5      	cmp	r5, r6
 8007244:	d11a      	bne.n	800727c <_printf_common+0xc8>
 8007246:	2000      	movs	r0, #0
 8007248:	e008      	b.n	800725c <_printf_common+0xa8>
 800724a:	2301      	movs	r3, #1
 800724c:	4652      	mov	r2, sl
 800724e:	4649      	mov	r1, r9
 8007250:	4638      	mov	r0, r7
 8007252:	47c0      	blx	r8
 8007254:	3001      	adds	r0, #1
 8007256:	d103      	bne.n	8007260 <_printf_common+0xac>
 8007258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007260:	3501      	adds	r5, #1
 8007262:	e7c6      	b.n	80071f2 <_printf_common+0x3e>
 8007264:	18e1      	adds	r1, r4, r3
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	2030      	movs	r0, #48	; 0x30
 800726a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800726e:	4422      	add	r2, r4
 8007270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007278:	3302      	adds	r3, #2
 800727a:	e7c7      	b.n	800720c <_printf_common+0x58>
 800727c:	2301      	movs	r3, #1
 800727e:	4622      	mov	r2, r4
 8007280:	4649      	mov	r1, r9
 8007282:	4638      	mov	r0, r7
 8007284:	47c0      	blx	r8
 8007286:	3001      	adds	r0, #1
 8007288:	d0e6      	beq.n	8007258 <_printf_common+0xa4>
 800728a:	3601      	adds	r6, #1
 800728c:	e7d9      	b.n	8007242 <_printf_common+0x8e>
	...

08007290 <_printf_i>:
 8007290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007294:	7e0f      	ldrb	r7, [r1, #24]
 8007296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007298:	2f78      	cmp	r7, #120	; 0x78
 800729a:	4691      	mov	r9, r2
 800729c:	4680      	mov	r8, r0
 800729e:	460c      	mov	r4, r1
 80072a0:	469a      	mov	sl, r3
 80072a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072a6:	d807      	bhi.n	80072b8 <_printf_i+0x28>
 80072a8:	2f62      	cmp	r7, #98	; 0x62
 80072aa:	d80a      	bhi.n	80072c2 <_printf_i+0x32>
 80072ac:	2f00      	cmp	r7, #0
 80072ae:	f000 80d8 	beq.w	8007462 <_printf_i+0x1d2>
 80072b2:	2f58      	cmp	r7, #88	; 0x58
 80072b4:	f000 80a3 	beq.w	80073fe <_printf_i+0x16e>
 80072b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072c0:	e03a      	b.n	8007338 <_printf_i+0xa8>
 80072c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072c6:	2b15      	cmp	r3, #21
 80072c8:	d8f6      	bhi.n	80072b8 <_printf_i+0x28>
 80072ca:	a101      	add	r1, pc, #4	; (adr r1, 80072d0 <_printf_i+0x40>)
 80072cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072d0:	08007329 	.word	0x08007329
 80072d4:	0800733d 	.word	0x0800733d
 80072d8:	080072b9 	.word	0x080072b9
 80072dc:	080072b9 	.word	0x080072b9
 80072e0:	080072b9 	.word	0x080072b9
 80072e4:	080072b9 	.word	0x080072b9
 80072e8:	0800733d 	.word	0x0800733d
 80072ec:	080072b9 	.word	0x080072b9
 80072f0:	080072b9 	.word	0x080072b9
 80072f4:	080072b9 	.word	0x080072b9
 80072f8:	080072b9 	.word	0x080072b9
 80072fc:	08007449 	.word	0x08007449
 8007300:	0800736d 	.word	0x0800736d
 8007304:	0800742b 	.word	0x0800742b
 8007308:	080072b9 	.word	0x080072b9
 800730c:	080072b9 	.word	0x080072b9
 8007310:	0800746b 	.word	0x0800746b
 8007314:	080072b9 	.word	0x080072b9
 8007318:	0800736d 	.word	0x0800736d
 800731c:	080072b9 	.word	0x080072b9
 8007320:	080072b9 	.word	0x080072b9
 8007324:	08007433 	.word	0x08007433
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	1d1a      	adds	r2, r3, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	602a      	str	r2, [r5, #0]
 8007330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007338:	2301      	movs	r3, #1
 800733a:	e0a3      	b.n	8007484 <_printf_i+0x1f4>
 800733c:	6820      	ldr	r0, [r4, #0]
 800733e:	6829      	ldr	r1, [r5, #0]
 8007340:	0606      	lsls	r6, r0, #24
 8007342:	f101 0304 	add.w	r3, r1, #4
 8007346:	d50a      	bpl.n	800735e <_printf_i+0xce>
 8007348:	680e      	ldr	r6, [r1, #0]
 800734a:	602b      	str	r3, [r5, #0]
 800734c:	2e00      	cmp	r6, #0
 800734e:	da03      	bge.n	8007358 <_printf_i+0xc8>
 8007350:	232d      	movs	r3, #45	; 0x2d
 8007352:	4276      	negs	r6, r6
 8007354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007358:	485e      	ldr	r0, [pc, #376]	; (80074d4 <_printf_i+0x244>)
 800735a:	230a      	movs	r3, #10
 800735c:	e019      	b.n	8007392 <_printf_i+0x102>
 800735e:	680e      	ldr	r6, [r1, #0]
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007366:	bf18      	it	ne
 8007368:	b236      	sxthne	r6, r6
 800736a:	e7ef      	b.n	800734c <_printf_i+0xbc>
 800736c:	682b      	ldr	r3, [r5, #0]
 800736e:	6820      	ldr	r0, [r4, #0]
 8007370:	1d19      	adds	r1, r3, #4
 8007372:	6029      	str	r1, [r5, #0]
 8007374:	0601      	lsls	r1, r0, #24
 8007376:	d501      	bpl.n	800737c <_printf_i+0xec>
 8007378:	681e      	ldr	r6, [r3, #0]
 800737a:	e002      	b.n	8007382 <_printf_i+0xf2>
 800737c:	0646      	lsls	r6, r0, #25
 800737e:	d5fb      	bpl.n	8007378 <_printf_i+0xe8>
 8007380:	881e      	ldrh	r6, [r3, #0]
 8007382:	4854      	ldr	r0, [pc, #336]	; (80074d4 <_printf_i+0x244>)
 8007384:	2f6f      	cmp	r7, #111	; 0x6f
 8007386:	bf0c      	ite	eq
 8007388:	2308      	moveq	r3, #8
 800738a:	230a      	movne	r3, #10
 800738c:	2100      	movs	r1, #0
 800738e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007392:	6865      	ldr	r5, [r4, #4]
 8007394:	60a5      	str	r5, [r4, #8]
 8007396:	2d00      	cmp	r5, #0
 8007398:	bfa2      	ittt	ge
 800739a:	6821      	ldrge	r1, [r4, #0]
 800739c:	f021 0104 	bicge.w	r1, r1, #4
 80073a0:	6021      	strge	r1, [r4, #0]
 80073a2:	b90e      	cbnz	r6, 80073a8 <_printf_i+0x118>
 80073a4:	2d00      	cmp	r5, #0
 80073a6:	d04d      	beq.n	8007444 <_printf_i+0x1b4>
 80073a8:	4615      	mov	r5, r2
 80073aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80073ae:	fb03 6711 	mls	r7, r3, r1, r6
 80073b2:	5dc7      	ldrb	r7, [r0, r7]
 80073b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073b8:	4637      	mov	r7, r6
 80073ba:	42bb      	cmp	r3, r7
 80073bc:	460e      	mov	r6, r1
 80073be:	d9f4      	bls.n	80073aa <_printf_i+0x11a>
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d10b      	bne.n	80073dc <_printf_i+0x14c>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	07de      	lsls	r6, r3, #31
 80073c8:	d508      	bpl.n	80073dc <_printf_i+0x14c>
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	6861      	ldr	r1, [r4, #4]
 80073ce:	4299      	cmp	r1, r3
 80073d0:	bfde      	ittt	le
 80073d2:	2330      	movle	r3, #48	; 0x30
 80073d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80073dc:	1b52      	subs	r2, r2, r5
 80073de:	6122      	str	r2, [r4, #16]
 80073e0:	f8cd a000 	str.w	sl, [sp]
 80073e4:	464b      	mov	r3, r9
 80073e6:	aa03      	add	r2, sp, #12
 80073e8:	4621      	mov	r1, r4
 80073ea:	4640      	mov	r0, r8
 80073ec:	f7ff fee2 	bl	80071b4 <_printf_common>
 80073f0:	3001      	adds	r0, #1
 80073f2:	d14c      	bne.n	800748e <_printf_i+0x1fe>
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073f8:	b004      	add	sp, #16
 80073fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fe:	4835      	ldr	r0, [pc, #212]	; (80074d4 <_printf_i+0x244>)
 8007400:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007404:	6829      	ldr	r1, [r5, #0]
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	f851 6b04 	ldr.w	r6, [r1], #4
 800740c:	6029      	str	r1, [r5, #0]
 800740e:	061d      	lsls	r5, r3, #24
 8007410:	d514      	bpl.n	800743c <_printf_i+0x1ac>
 8007412:	07df      	lsls	r7, r3, #31
 8007414:	bf44      	itt	mi
 8007416:	f043 0320 	orrmi.w	r3, r3, #32
 800741a:	6023      	strmi	r3, [r4, #0]
 800741c:	b91e      	cbnz	r6, 8007426 <_printf_i+0x196>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	f023 0320 	bic.w	r3, r3, #32
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	2310      	movs	r3, #16
 8007428:	e7b0      	b.n	800738c <_printf_i+0xfc>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	f043 0320 	orr.w	r3, r3, #32
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	2378      	movs	r3, #120	; 0x78
 8007434:	4828      	ldr	r0, [pc, #160]	; (80074d8 <_printf_i+0x248>)
 8007436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800743a:	e7e3      	b.n	8007404 <_printf_i+0x174>
 800743c:	0659      	lsls	r1, r3, #25
 800743e:	bf48      	it	mi
 8007440:	b2b6      	uxthmi	r6, r6
 8007442:	e7e6      	b.n	8007412 <_printf_i+0x182>
 8007444:	4615      	mov	r5, r2
 8007446:	e7bb      	b.n	80073c0 <_printf_i+0x130>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	6826      	ldr	r6, [r4, #0]
 800744c:	6961      	ldr	r1, [r4, #20]
 800744e:	1d18      	adds	r0, r3, #4
 8007450:	6028      	str	r0, [r5, #0]
 8007452:	0635      	lsls	r5, r6, #24
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	d501      	bpl.n	800745c <_printf_i+0x1cc>
 8007458:	6019      	str	r1, [r3, #0]
 800745a:	e002      	b.n	8007462 <_printf_i+0x1d2>
 800745c:	0670      	lsls	r0, r6, #25
 800745e:	d5fb      	bpl.n	8007458 <_printf_i+0x1c8>
 8007460:	8019      	strh	r1, [r3, #0]
 8007462:	2300      	movs	r3, #0
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	4615      	mov	r5, r2
 8007468:	e7ba      	b.n	80073e0 <_printf_i+0x150>
 800746a:	682b      	ldr	r3, [r5, #0]
 800746c:	1d1a      	adds	r2, r3, #4
 800746e:	602a      	str	r2, [r5, #0]
 8007470:	681d      	ldr	r5, [r3, #0]
 8007472:	6862      	ldr	r2, [r4, #4]
 8007474:	2100      	movs	r1, #0
 8007476:	4628      	mov	r0, r5
 8007478:	f7f8 feca 	bl	8000210 <memchr>
 800747c:	b108      	cbz	r0, 8007482 <_printf_i+0x1f2>
 800747e:	1b40      	subs	r0, r0, r5
 8007480:	6060      	str	r0, [r4, #4]
 8007482:	6863      	ldr	r3, [r4, #4]
 8007484:	6123      	str	r3, [r4, #16]
 8007486:	2300      	movs	r3, #0
 8007488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800748c:	e7a8      	b.n	80073e0 <_printf_i+0x150>
 800748e:	6923      	ldr	r3, [r4, #16]
 8007490:	462a      	mov	r2, r5
 8007492:	4649      	mov	r1, r9
 8007494:	4640      	mov	r0, r8
 8007496:	47d0      	blx	sl
 8007498:	3001      	adds	r0, #1
 800749a:	d0ab      	beq.n	80073f4 <_printf_i+0x164>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	079b      	lsls	r3, r3, #30
 80074a0:	d413      	bmi.n	80074ca <_printf_i+0x23a>
 80074a2:	68e0      	ldr	r0, [r4, #12]
 80074a4:	9b03      	ldr	r3, [sp, #12]
 80074a6:	4298      	cmp	r0, r3
 80074a8:	bfb8      	it	lt
 80074aa:	4618      	movlt	r0, r3
 80074ac:	e7a4      	b.n	80073f8 <_printf_i+0x168>
 80074ae:	2301      	movs	r3, #1
 80074b0:	4632      	mov	r2, r6
 80074b2:	4649      	mov	r1, r9
 80074b4:	4640      	mov	r0, r8
 80074b6:	47d0      	blx	sl
 80074b8:	3001      	adds	r0, #1
 80074ba:	d09b      	beq.n	80073f4 <_printf_i+0x164>
 80074bc:	3501      	adds	r5, #1
 80074be:	68e3      	ldr	r3, [r4, #12]
 80074c0:	9903      	ldr	r1, [sp, #12]
 80074c2:	1a5b      	subs	r3, r3, r1
 80074c4:	42ab      	cmp	r3, r5
 80074c6:	dcf2      	bgt.n	80074ae <_printf_i+0x21e>
 80074c8:	e7eb      	b.n	80074a2 <_printf_i+0x212>
 80074ca:	2500      	movs	r5, #0
 80074cc:	f104 0619 	add.w	r6, r4, #25
 80074d0:	e7f5      	b.n	80074be <_printf_i+0x22e>
 80074d2:	bf00      	nop
 80074d4:	0800a726 	.word	0x0800a726
 80074d8:	0800a737 	.word	0x0800a737

080074dc <iprintf>:
 80074dc:	b40f      	push	{r0, r1, r2, r3}
 80074de:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <iprintf+0x2c>)
 80074e0:	b513      	push	{r0, r1, r4, lr}
 80074e2:	681c      	ldr	r4, [r3, #0]
 80074e4:	b124      	cbz	r4, 80074f0 <iprintf+0x14>
 80074e6:	69a3      	ldr	r3, [r4, #24]
 80074e8:	b913      	cbnz	r3, 80074f0 <iprintf+0x14>
 80074ea:	4620      	mov	r0, r4
 80074ec:	f001 f91c 	bl	8008728 <__sinit>
 80074f0:	ab05      	add	r3, sp, #20
 80074f2:	9a04      	ldr	r2, [sp, #16]
 80074f4:	68a1      	ldr	r1, [r4, #8]
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	4620      	mov	r0, r4
 80074fa:	f001 ff59 	bl	80093b0 <_vfiprintf_r>
 80074fe:	b002      	add	sp, #8
 8007500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007504:	b004      	add	sp, #16
 8007506:	4770      	bx	lr
 8007508:	20000024 	.word	0x20000024

0800750c <_puts_r>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	460e      	mov	r6, r1
 8007510:	4605      	mov	r5, r0
 8007512:	b118      	cbz	r0, 800751c <_puts_r+0x10>
 8007514:	6983      	ldr	r3, [r0, #24]
 8007516:	b90b      	cbnz	r3, 800751c <_puts_r+0x10>
 8007518:	f001 f906 	bl	8008728 <__sinit>
 800751c:	69ab      	ldr	r3, [r5, #24]
 800751e:	68ac      	ldr	r4, [r5, #8]
 8007520:	b913      	cbnz	r3, 8007528 <_puts_r+0x1c>
 8007522:	4628      	mov	r0, r5
 8007524:	f001 f900 	bl	8008728 <__sinit>
 8007528:	4b2c      	ldr	r3, [pc, #176]	; (80075dc <_puts_r+0xd0>)
 800752a:	429c      	cmp	r4, r3
 800752c:	d120      	bne.n	8007570 <_puts_r+0x64>
 800752e:	686c      	ldr	r4, [r5, #4]
 8007530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007532:	07db      	lsls	r3, r3, #31
 8007534:	d405      	bmi.n	8007542 <_puts_r+0x36>
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	0598      	lsls	r0, r3, #22
 800753a:	d402      	bmi.n	8007542 <_puts_r+0x36>
 800753c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800753e:	f001 f996 	bl	800886e <__retarget_lock_acquire_recursive>
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	0719      	lsls	r1, r3, #28
 8007546:	d51d      	bpl.n	8007584 <_puts_r+0x78>
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	b1db      	cbz	r3, 8007584 <_puts_r+0x78>
 800754c:	3e01      	subs	r6, #1
 800754e:	68a3      	ldr	r3, [r4, #8]
 8007550:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007554:	3b01      	subs	r3, #1
 8007556:	60a3      	str	r3, [r4, #8]
 8007558:	bb39      	cbnz	r1, 80075aa <_puts_r+0x9e>
 800755a:	2b00      	cmp	r3, #0
 800755c:	da38      	bge.n	80075d0 <_puts_r+0xc4>
 800755e:	4622      	mov	r2, r4
 8007560:	210a      	movs	r1, #10
 8007562:	4628      	mov	r0, r5
 8007564:	f000 f88c 	bl	8007680 <__swbuf_r>
 8007568:	3001      	adds	r0, #1
 800756a:	d011      	beq.n	8007590 <_puts_r+0x84>
 800756c:	250a      	movs	r5, #10
 800756e:	e011      	b.n	8007594 <_puts_r+0x88>
 8007570:	4b1b      	ldr	r3, [pc, #108]	; (80075e0 <_puts_r+0xd4>)
 8007572:	429c      	cmp	r4, r3
 8007574:	d101      	bne.n	800757a <_puts_r+0x6e>
 8007576:	68ac      	ldr	r4, [r5, #8]
 8007578:	e7da      	b.n	8007530 <_puts_r+0x24>
 800757a:	4b1a      	ldr	r3, [pc, #104]	; (80075e4 <_puts_r+0xd8>)
 800757c:	429c      	cmp	r4, r3
 800757e:	bf08      	it	eq
 8007580:	68ec      	ldreq	r4, [r5, #12]
 8007582:	e7d5      	b.n	8007530 <_puts_r+0x24>
 8007584:	4621      	mov	r1, r4
 8007586:	4628      	mov	r0, r5
 8007588:	f000 f8cc 	bl	8007724 <__swsetup_r>
 800758c:	2800      	cmp	r0, #0
 800758e:	d0dd      	beq.n	800754c <_puts_r+0x40>
 8007590:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007594:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007596:	07da      	lsls	r2, r3, #31
 8007598:	d405      	bmi.n	80075a6 <_puts_r+0x9a>
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	059b      	lsls	r3, r3, #22
 800759e:	d402      	bmi.n	80075a6 <_puts_r+0x9a>
 80075a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075a2:	f001 f965 	bl	8008870 <__retarget_lock_release_recursive>
 80075a6:	4628      	mov	r0, r5
 80075a8:	bd70      	pop	{r4, r5, r6, pc}
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	da04      	bge.n	80075b8 <_puts_r+0xac>
 80075ae:	69a2      	ldr	r2, [r4, #24]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	dc06      	bgt.n	80075c2 <_puts_r+0xb6>
 80075b4:	290a      	cmp	r1, #10
 80075b6:	d004      	beq.n	80075c2 <_puts_r+0xb6>
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	6022      	str	r2, [r4, #0]
 80075be:	7019      	strb	r1, [r3, #0]
 80075c0:	e7c5      	b.n	800754e <_puts_r+0x42>
 80075c2:	4622      	mov	r2, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 f85b 	bl	8007680 <__swbuf_r>
 80075ca:	3001      	adds	r0, #1
 80075cc:	d1bf      	bne.n	800754e <_puts_r+0x42>
 80075ce:	e7df      	b.n	8007590 <_puts_r+0x84>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	250a      	movs	r5, #10
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	6022      	str	r2, [r4, #0]
 80075d8:	701d      	strb	r5, [r3, #0]
 80075da:	e7db      	b.n	8007594 <_puts_r+0x88>
 80075dc:	0800a7f8 	.word	0x0800a7f8
 80075e0:	0800a818 	.word	0x0800a818
 80075e4:	0800a7d8 	.word	0x0800a7d8

080075e8 <puts>:
 80075e8:	4b02      	ldr	r3, [pc, #8]	; (80075f4 <puts+0xc>)
 80075ea:	4601      	mov	r1, r0
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	f7ff bf8d 	b.w	800750c <_puts_r>
 80075f2:	bf00      	nop
 80075f4:	20000024 	.word	0x20000024

080075f8 <_sbrk_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4d06      	ldr	r5, [pc, #24]	; (8007614 <_sbrk_r+0x1c>)
 80075fc:	2300      	movs	r3, #0
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	602b      	str	r3, [r5, #0]
 8007604:	f7fb f856 	bl	80026b4 <_sbrk>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_sbrk_r+0x1a>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_sbrk_r+0x1a>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	20002530 	.word	0x20002530

08007618 <sniprintf>:
 8007618:	b40c      	push	{r2, r3}
 800761a:	b530      	push	{r4, r5, lr}
 800761c:	4b17      	ldr	r3, [pc, #92]	; (800767c <sniprintf+0x64>)
 800761e:	1e0c      	subs	r4, r1, #0
 8007620:	681d      	ldr	r5, [r3, #0]
 8007622:	b09d      	sub	sp, #116	; 0x74
 8007624:	da08      	bge.n	8007638 <sniprintf+0x20>
 8007626:	238b      	movs	r3, #139	; 0x8b
 8007628:	602b      	str	r3, [r5, #0]
 800762a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800762e:	b01d      	add	sp, #116	; 0x74
 8007630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007634:	b002      	add	sp, #8
 8007636:	4770      	bx	lr
 8007638:	f44f 7302 	mov.w	r3, #520	; 0x208
 800763c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007640:	bf14      	ite	ne
 8007642:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007646:	4623      	moveq	r3, r4
 8007648:	9304      	str	r3, [sp, #16]
 800764a:	9307      	str	r3, [sp, #28]
 800764c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007650:	9002      	str	r0, [sp, #8]
 8007652:	9006      	str	r0, [sp, #24]
 8007654:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007658:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800765a:	ab21      	add	r3, sp, #132	; 0x84
 800765c:	a902      	add	r1, sp, #8
 800765e:	4628      	mov	r0, r5
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	f001 fd7b 	bl	800915c <_svfiprintf_r>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	bfbc      	itt	lt
 800766a:	238b      	movlt	r3, #139	; 0x8b
 800766c:	602b      	strlt	r3, [r5, #0]
 800766e:	2c00      	cmp	r4, #0
 8007670:	d0dd      	beq.n	800762e <sniprintf+0x16>
 8007672:	9b02      	ldr	r3, [sp, #8]
 8007674:	2200      	movs	r2, #0
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	e7d9      	b.n	800762e <sniprintf+0x16>
 800767a:	bf00      	nop
 800767c:	20000024 	.word	0x20000024

08007680 <__swbuf_r>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	460e      	mov	r6, r1
 8007684:	4614      	mov	r4, r2
 8007686:	4605      	mov	r5, r0
 8007688:	b118      	cbz	r0, 8007692 <__swbuf_r+0x12>
 800768a:	6983      	ldr	r3, [r0, #24]
 800768c:	b90b      	cbnz	r3, 8007692 <__swbuf_r+0x12>
 800768e:	f001 f84b 	bl	8008728 <__sinit>
 8007692:	4b21      	ldr	r3, [pc, #132]	; (8007718 <__swbuf_r+0x98>)
 8007694:	429c      	cmp	r4, r3
 8007696:	d12b      	bne.n	80076f0 <__swbuf_r+0x70>
 8007698:	686c      	ldr	r4, [r5, #4]
 800769a:	69a3      	ldr	r3, [r4, #24]
 800769c:	60a3      	str	r3, [r4, #8]
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	071a      	lsls	r2, r3, #28
 80076a2:	d52f      	bpl.n	8007704 <__swbuf_r+0x84>
 80076a4:	6923      	ldr	r3, [r4, #16]
 80076a6:	b36b      	cbz	r3, 8007704 <__swbuf_r+0x84>
 80076a8:	6923      	ldr	r3, [r4, #16]
 80076aa:	6820      	ldr	r0, [r4, #0]
 80076ac:	1ac0      	subs	r0, r0, r3
 80076ae:	6963      	ldr	r3, [r4, #20]
 80076b0:	b2f6      	uxtb	r6, r6
 80076b2:	4283      	cmp	r3, r0
 80076b4:	4637      	mov	r7, r6
 80076b6:	dc04      	bgt.n	80076c2 <__swbuf_r+0x42>
 80076b8:	4621      	mov	r1, r4
 80076ba:	4628      	mov	r0, r5
 80076bc:	f000 ffa0 	bl	8008600 <_fflush_r>
 80076c0:	bb30      	cbnz	r0, 8007710 <__swbuf_r+0x90>
 80076c2:	68a3      	ldr	r3, [r4, #8]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	60a3      	str	r3, [r4, #8]
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	6022      	str	r2, [r4, #0]
 80076ce:	701e      	strb	r6, [r3, #0]
 80076d0:	6963      	ldr	r3, [r4, #20]
 80076d2:	3001      	adds	r0, #1
 80076d4:	4283      	cmp	r3, r0
 80076d6:	d004      	beq.n	80076e2 <__swbuf_r+0x62>
 80076d8:	89a3      	ldrh	r3, [r4, #12]
 80076da:	07db      	lsls	r3, r3, #31
 80076dc:	d506      	bpl.n	80076ec <__swbuf_r+0x6c>
 80076de:	2e0a      	cmp	r6, #10
 80076e0:	d104      	bne.n	80076ec <__swbuf_r+0x6c>
 80076e2:	4621      	mov	r1, r4
 80076e4:	4628      	mov	r0, r5
 80076e6:	f000 ff8b 	bl	8008600 <_fflush_r>
 80076ea:	b988      	cbnz	r0, 8007710 <__swbuf_r+0x90>
 80076ec:	4638      	mov	r0, r7
 80076ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <__swbuf_r+0x9c>)
 80076f2:	429c      	cmp	r4, r3
 80076f4:	d101      	bne.n	80076fa <__swbuf_r+0x7a>
 80076f6:	68ac      	ldr	r4, [r5, #8]
 80076f8:	e7cf      	b.n	800769a <__swbuf_r+0x1a>
 80076fa:	4b09      	ldr	r3, [pc, #36]	; (8007720 <__swbuf_r+0xa0>)
 80076fc:	429c      	cmp	r4, r3
 80076fe:	bf08      	it	eq
 8007700:	68ec      	ldreq	r4, [r5, #12]
 8007702:	e7ca      	b.n	800769a <__swbuf_r+0x1a>
 8007704:	4621      	mov	r1, r4
 8007706:	4628      	mov	r0, r5
 8007708:	f000 f80c 	bl	8007724 <__swsetup_r>
 800770c:	2800      	cmp	r0, #0
 800770e:	d0cb      	beq.n	80076a8 <__swbuf_r+0x28>
 8007710:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007714:	e7ea      	b.n	80076ec <__swbuf_r+0x6c>
 8007716:	bf00      	nop
 8007718:	0800a7f8 	.word	0x0800a7f8
 800771c:	0800a818 	.word	0x0800a818
 8007720:	0800a7d8 	.word	0x0800a7d8

08007724 <__swsetup_r>:
 8007724:	4b32      	ldr	r3, [pc, #200]	; (80077f0 <__swsetup_r+0xcc>)
 8007726:	b570      	push	{r4, r5, r6, lr}
 8007728:	681d      	ldr	r5, [r3, #0]
 800772a:	4606      	mov	r6, r0
 800772c:	460c      	mov	r4, r1
 800772e:	b125      	cbz	r5, 800773a <__swsetup_r+0x16>
 8007730:	69ab      	ldr	r3, [r5, #24]
 8007732:	b913      	cbnz	r3, 800773a <__swsetup_r+0x16>
 8007734:	4628      	mov	r0, r5
 8007736:	f000 fff7 	bl	8008728 <__sinit>
 800773a:	4b2e      	ldr	r3, [pc, #184]	; (80077f4 <__swsetup_r+0xd0>)
 800773c:	429c      	cmp	r4, r3
 800773e:	d10f      	bne.n	8007760 <__swsetup_r+0x3c>
 8007740:	686c      	ldr	r4, [r5, #4]
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007748:	0719      	lsls	r1, r3, #28
 800774a:	d42c      	bmi.n	80077a6 <__swsetup_r+0x82>
 800774c:	06dd      	lsls	r5, r3, #27
 800774e:	d411      	bmi.n	8007774 <__swsetup_r+0x50>
 8007750:	2309      	movs	r3, #9
 8007752:	6033      	str	r3, [r6, #0]
 8007754:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007758:	81a3      	strh	r3, [r4, #12]
 800775a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800775e:	e03e      	b.n	80077de <__swsetup_r+0xba>
 8007760:	4b25      	ldr	r3, [pc, #148]	; (80077f8 <__swsetup_r+0xd4>)
 8007762:	429c      	cmp	r4, r3
 8007764:	d101      	bne.n	800776a <__swsetup_r+0x46>
 8007766:	68ac      	ldr	r4, [r5, #8]
 8007768:	e7eb      	b.n	8007742 <__swsetup_r+0x1e>
 800776a:	4b24      	ldr	r3, [pc, #144]	; (80077fc <__swsetup_r+0xd8>)
 800776c:	429c      	cmp	r4, r3
 800776e:	bf08      	it	eq
 8007770:	68ec      	ldreq	r4, [r5, #12]
 8007772:	e7e6      	b.n	8007742 <__swsetup_r+0x1e>
 8007774:	0758      	lsls	r0, r3, #29
 8007776:	d512      	bpl.n	800779e <__swsetup_r+0x7a>
 8007778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800777a:	b141      	cbz	r1, 800778e <__swsetup_r+0x6a>
 800777c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007780:	4299      	cmp	r1, r3
 8007782:	d002      	beq.n	800778a <__swsetup_r+0x66>
 8007784:	4630      	mov	r0, r6
 8007786:	f7ff f95f 	bl	8006a48 <_free_r>
 800778a:	2300      	movs	r3, #0
 800778c:	6363      	str	r3, [r4, #52]	; 0x34
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007794:	81a3      	strh	r3, [r4, #12]
 8007796:	2300      	movs	r3, #0
 8007798:	6063      	str	r3, [r4, #4]
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	f043 0308 	orr.w	r3, r3, #8
 80077a4:	81a3      	strh	r3, [r4, #12]
 80077a6:	6923      	ldr	r3, [r4, #16]
 80077a8:	b94b      	cbnz	r3, 80077be <__swsetup_r+0x9a>
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077b4:	d003      	beq.n	80077be <__swsetup_r+0x9a>
 80077b6:	4621      	mov	r1, r4
 80077b8:	4630      	mov	r0, r6
 80077ba:	f001 f87f 	bl	80088bc <__smakebuf_r>
 80077be:	89a0      	ldrh	r0, [r4, #12]
 80077c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077c4:	f010 0301 	ands.w	r3, r0, #1
 80077c8:	d00a      	beq.n	80077e0 <__swsetup_r+0xbc>
 80077ca:	2300      	movs	r3, #0
 80077cc:	60a3      	str	r3, [r4, #8]
 80077ce:	6963      	ldr	r3, [r4, #20]
 80077d0:	425b      	negs	r3, r3
 80077d2:	61a3      	str	r3, [r4, #24]
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	b943      	cbnz	r3, 80077ea <__swsetup_r+0xc6>
 80077d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077dc:	d1ba      	bne.n	8007754 <__swsetup_r+0x30>
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	0781      	lsls	r1, r0, #30
 80077e2:	bf58      	it	pl
 80077e4:	6963      	ldrpl	r3, [r4, #20]
 80077e6:	60a3      	str	r3, [r4, #8]
 80077e8:	e7f4      	b.n	80077d4 <__swsetup_r+0xb0>
 80077ea:	2000      	movs	r0, #0
 80077ec:	e7f7      	b.n	80077de <__swsetup_r+0xba>
 80077ee:	bf00      	nop
 80077f0:	20000024 	.word	0x20000024
 80077f4:	0800a7f8 	.word	0x0800a7f8
 80077f8:	0800a818 	.word	0x0800a818
 80077fc:	0800a7d8 	.word	0x0800a7d8

08007800 <quorem>:
 8007800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	6903      	ldr	r3, [r0, #16]
 8007806:	690c      	ldr	r4, [r1, #16]
 8007808:	42a3      	cmp	r3, r4
 800780a:	4607      	mov	r7, r0
 800780c:	f2c0 8081 	blt.w	8007912 <quorem+0x112>
 8007810:	3c01      	subs	r4, #1
 8007812:	f101 0814 	add.w	r8, r1, #20
 8007816:	f100 0514 	add.w	r5, r0, #20
 800781a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007828:	3301      	adds	r3, #1
 800782a:	429a      	cmp	r2, r3
 800782c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007830:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007834:	fbb2 f6f3 	udiv	r6, r2, r3
 8007838:	d331      	bcc.n	800789e <quorem+0x9e>
 800783a:	f04f 0e00 	mov.w	lr, #0
 800783e:	4640      	mov	r0, r8
 8007840:	46ac      	mov	ip, r5
 8007842:	46f2      	mov	sl, lr
 8007844:	f850 2b04 	ldr.w	r2, [r0], #4
 8007848:	b293      	uxth	r3, r2
 800784a:	fb06 e303 	mla	r3, r6, r3, lr
 800784e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007852:	b29b      	uxth	r3, r3
 8007854:	ebaa 0303 	sub.w	r3, sl, r3
 8007858:	f8dc a000 	ldr.w	sl, [ip]
 800785c:	0c12      	lsrs	r2, r2, #16
 800785e:	fa13 f38a 	uxtah	r3, r3, sl
 8007862:	fb06 e202 	mla	r2, r6, r2, lr
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	9b00      	ldr	r3, [sp, #0]
 800786a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800786e:	b292      	uxth	r2, r2
 8007870:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007878:	f8bd 3000 	ldrh.w	r3, [sp]
 800787c:	4581      	cmp	r9, r0
 800787e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007882:	f84c 3b04 	str.w	r3, [ip], #4
 8007886:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800788a:	d2db      	bcs.n	8007844 <quorem+0x44>
 800788c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007890:	b92b      	cbnz	r3, 800789e <quorem+0x9e>
 8007892:	9b01      	ldr	r3, [sp, #4]
 8007894:	3b04      	subs	r3, #4
 8007896:	429d      	cmp	r5, r3
 8007898:	461a      	mov	r2, r3
 800789a:	d32e      	bcc.n	80078fa <quorem+0xfa>
 800789c:	613c      	str	r4, [r7, #16]
 800789e:	4638      	mov	r0, r7
 80078a0:	f001 fae8 	bl	8008e74 <__mcmp>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	db24      	blt.n	80078f2 <quorem+0xf2>
 80078a8:	3601      	adds	r6, #1
 80078aa:	4628      	mov	r0, r5
 80078ac:	f04f 0c00 	mov.w	ip, #0
 80078b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80078b4:	f8d0 e000 	ldr.w	lr, [r0]
 80078b8:	b293      	uxth	r3, r2
 80078ba:	ebac 0303 	sub.w	r3, ip, r3
 80078be:	0c12      	lsrs	r2, r2, #16
 80078c0:	fa13 f38e 	uxtah	r3, r3, lr
 80078c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80078c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078d2:	45c1      	cmp	r9, r8
 80078d4:	f840 3b04 	str.w	r3, [r0], #4
 80078d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80078dc:	d2e8      	bcs.n	80078b0 <quorem+0xb0>
 80078de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078e6:	b922      	cbnz	r2, 80078f2 <quorem+0xf2>
 80078e8:	3b04      	subs	r3, #4
 80078ea:	429d      	cmp	r5, r3
 80078ec:	461a      	mov	r2, r3
 80078ee:	d30a      	bcc.n	8007906 <quorem+0x106>
 80078f0:	613c      	str	r4, [r7, #16]
 80078f2:	4630      	mov	r0, r6
 80078f4:	b003      	add	sp, #12
 80078f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	3b04      	subs	r3, #4
 80078fe:	2a00      	cmp	r2, #0
 8007900:	d1cc      	bne.n	800789c <quorem+0x9c>
 8007902:	3c01      	subs	r4, #1
 8007904:	e7c7      	b.n	8007896 <quorem+0x96>
 8007906:	6812      	ldr	r2, [r2, #0]
 8007908:	3b04      	subs	r3, #4
 800790a:	2a00      	cmp	r2, #0
 800790c:	d1f0      	bne.n	80078f0 <quorem+0xf0>
 800790e:	3c01      	subs	r4, #1
 8007910:	e7eb      	b.n	80078ea <quorem+0xea>
 8007912:	2000      	movs	r0, #0
 8007914:	e7ee      	b.n	80078f4 <quorem+0xf4>
	...

08007918 <_dtoa_r>:
 8007918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791c:	ed2d 8b04 	vpush	{d8-d9}
 8007920:	ec57 6b10 	vmov	r6, r7, d0
 8007924:	b093      	sub	sp, #76	; 0x4c
 8007926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800792c:	9106      	str	r1, [sp, #24]
 800792e:	ee10 aa10 	vmov	sl, s0
 8007932:	4604      	mov	r4, r0
 8007934:	9209      	str	r2, [sp, #36]	; 0x24
 8007936:	930c      	str	r3, [sp, #48]	; 0x30
 8007938:	46bb      	mov	fp, r7
 800793a:	b975      	cbnz	r5, 800795a <_dtoa_r+0x42>
 800793c:	2010      	movs	r0, #16
 800793e:	f7ff f86b 	bl	8006a18 <malloc>
 8007942:	4602      	mov	r2, r0
 8007944:	6260      	str	r0, [r4, #36]	; 0x24
 8007946:	b920      	cbnz	r0, 8007952 <_dtoa_r+0x3a>
 8007948:	4ba7      	ldr	r3, [pc, #668]	; (8007be8 <_dtoa_r+0x2d0>)
 800794a:	21ea      	movs	r1, #234	; 0xea
 800794c:	48a7      	ldr	r0, [pc, #668]	; (8007bec <_dtoa_r+0x2d4>)
 800794e:	f001 feb5 	bl	80096bc <__assert_func>
 8007952:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007956:	6005      	str	r5, [r0, #0]
 8007958:	60c5      	str	r5, [r0, #12]
 800795a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800795c:	6819      	ldr	r1, [r3, #0]
 800795e:	b151      	cbz	r1, 8007976 <_dtoa_r+0x5e>
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	604a      	str	r2, [r1, #4]
 8007964:	2301      	movs	r3, #1
 8007966:	4093      	lsls	r3, r2
 8007968:	608b      	str	r3, [r1, #8]
 800796a:	4620      	mov	r0, r4
 800796c:	f001 f840 	bl	80089f0 <_Bfree>
 8007970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	1e3b      	subs	r3, r7, #0
 8007978:	bfaa      	itet	ge
 800797a:	2300      	movge	r3, #0
 800797c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007980:	f8c8 3000 	strge.w	r3, [r8]
 8007984:	4b9a      	ldr	r3, [pc, #616]	; (8007bf0 <_dtoa_r+0x2d8>)
 8007986:	bfbc      	itt	lt
 8007988:	2201      	movlt	r2, #1
 800798a:	f8c8 2000 	strlt.w	r2, [r8]
 800798e:	ea33 030b 	bics.w	r3, r3, fp
 8007992:	d11b      	bne.n	80079cc <_dtoa_r+0xb4>
 8007994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007996:	f242 730f 	movw	r3, #9999	; 0x270f
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079a0:	4333      	orrs	r3, r6
 80079a2:	f000 8592 	beq.w	80084ca <_dtoa_r+0xbb2>
 80079a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079a8:	b963      	cbnz	r3, 80079c4 <_dtoa_r+0xac>
 80079aa:	4b92      	ldr	r3, [pc, #584]	; (8007bf4 <_dtoa_r+0x2dc>)
 80079ac:	e022      	b.n	80079f4 <_dtoa_r+0xdc>
 80079ae:	4b92      	ldr	r3, [pc, #584]	; (8007bf8 <_dtoa_r+0x2e0>)
 80079b0:	9301      	str	r3, [sp, #4]
 80079b2:	3308      	adds	r3, #8
 80079b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	9801      	ldr	r0, [sp, #4]
 80079ba:	b013      	add	sp, #76	; 0x4c
 80079bc:	ecbd 8b04 	vpop	{d8-d9}
 80079c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c4:	4b8b      	ldr	r3, [pc, #556]	; (8007bf4 <_dtoa_r+0x2dc>)
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	3303      	adds	r3, #3
 80079ca:	e7f3      	b.n	80079b4 <_dtoa_r+0x9c>
 80079cc:	2200      	movs	r2, #0
 80079ce:	2300      	movs	r3, #0
 80079d0:	4650      	mov	r0, sl
 80079d2:	4659      	mov	r1, fp
 80079d4:	f7f9 f890 	bl	8000af8 <__aeabi_dcmpeq>
 80079d8:	ec4b ab19 	vmov	d9, sl, fp
 80079dc:	4680      	mov	r8, r0
 80079de:	b158      	cbz	r0, 80079f8 <_dtoa_r+0xe0>
 80079e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079e2:	2301      	movs	r3, #1
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 856b 	beq.w	80084c4 <_dtoa_r+0xbac>
 80079ee:	4883      	ldr	r0, [pc, #524]	; (8007bfc <_dtoa_r+0x2e4>)
 80079f0:	6018      	str	r0, [r3, #0]
 80079f2:	1e43      	subs	r3, r0, #1
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	e7df      	b.n	80079b8 <_dtoa_r+0xa0>
 80079f8:	ec4b ab10 	vmov	d0, sl, fp
 80079fc:	aa10      	add	r2, sp, #64	; 0x40
 80079fe:	a911      	add	r1, sp, #68	; 0x44
 8007a00:	4620      	mov	r0, r4
 8007a02:	f001 fadd 	bl	8008fc0 <__d2b>
 8007a06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007a0a:	ee08 0a10 	vmov	s16, r0
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	f000 8084 	beq.w	8007b1c <_dtoa_r+0x204>
 8007a14:	ee19 3a90 	vmov	r3, s19
 8007a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a20:	4656      	mov	r6, sl
 8007a22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007a2e:	4b74      	ldr	r3, [pc, #464]	; (8007c00 <_dtoa_r+0x2e8>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	4630      	mov	r0, r6
 8007a34:	4639      	mov	r1, r7
 8007a36:	f7f8 fc3f 	bl	80002b8 <__aeabi_dsub>
 8007a3a:	a365      	add	r3, pc, #404	; (adr r3, 8007bd0 <_dtoa_r+0x2b8>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f7f8 fdf2 	bl	8000628 <__aeabi_dmul>
 8007a44:	a364      	add	r3, pc, #400	; (adr r3, 8007bd8 <_dtoa_r+0x2c0>)
 8007a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4a:	f7f8 fc37 	bl	80002bc <__adddf3>
 8007a4e:	4606      	mov	r6, r0
 8007a50:	4628      	mov	r0, r5
 8007a52:	460f      	mov	r7, r1
 8007a54:	f7f8 fd7e 	bl	8000554 <__aeabi_i2d>
 8007a58:	a361      	add	r3, pc, #388	; (adr r3, 8007be0 <_dtoa_r+0x2c8>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	f7f8 fde3 	bl	8000628 <__aeabi_dmul>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4630      	mov	r0, r6
 8007a68:	4639      	mov	r1, r7
 8007a6a:	f7f8 fc27 	bl	80002bc <__adddf3>
 8007a6e:	4606      	mov	r6, r0
 8007a70:	460f      	mov	r7, r1
 8007a72:	f7f9 f889 	bl	8000b88 <__aeabi_d2iz>
 8007a76:	2200      	movs	r2, #0
 8007a78:	9000      	str	r0, [sp, #0]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	4639      	mov	r1, r7
 8007a80:	f7f9 f844 	bl	8000b0c <__aeabi_dcmplt>
 8007a84:	b150      	cbz	r0, 8007a9c <_dtoa_r+0x184>
 8007a86:	9800      	ldr	r0, [sp, #0]
 8007a88:	f7f8 fd64 	bl	8000554 <__aeabi_i2d>
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	463b      	mov	r3, r7
 8007a90:	f7f9 f832 	bl	8000af8 <__aeabi_dcmpeq>
 8007a94:	b910      	cbnz	r0, 8007a9c <_dtoa_r+0x184>
 8007a96:	9b00      	ldr	r3, [sp, #0]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	9b00      	ldr	r3, [sp, #0]
 8007a9e:	2b16      	cmp	r3, #22
 8007aa0:	d85a      	bhi.n	8007b58 <_dtoa_r+0x240>
 8007aa2:	9a00      	ldr	r2, [sp, #0]
 8007aa4:	4b57      	ldr	r3, [pc, #348]	; (8007c04 <_dtoa_r+0x2ec>)
 8007aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	ec51 0b19 	vmov	r0, r1, d9
 8007ab2:	f7f9 f82b 	bl	8000b0c <__aeabi_dcmplt>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d050      	beq.n	8007b5c <_dtoa_r+0x244>
 8007aba:	9b00      	ldr	r3, [sp, #0]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ac6:	1b5d      	subs	r5, r3, r5
 8007ac8:	1e6b      	subs	r3, r5, #1
 8007aca:	9305      	str	r3, [sp, #20]
 8007acc:	bf45      	ittet	mi
 8007ace:	f1c5 0301 	rsbmi	r3, r5, #1
 8007ad2:	9304      	strmi	r3, [sp, #16]
 8007ad4:	2300      	movpl	r3, #0
 8007ad6:	2300      	movmi	r3, #0
 8007ad8:	bf4c      	ite	mi
 8007ada:	9305      	strmi	r3, [sp, #20]
 8007adc:	9304      	strpl	r3, [sp, #16]
 8007ade:	9b00      	ldr	r3, [sp, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	db3d      	blt.n	8007b60 <_dtoa_r+0x248>
 8007ae4:	9b05      	ldr	r3, [sp, #20]
 8007ae6:	9a00      	ldr	r2, [sp, #0]
 8007ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8007aea:	4413      	add	r3, r2
 8007aec:	9305      	str	r3, [sp, #20]
 8007aee:	2300      	movs	r3, #0
 8007af0:	9307      	str	r3, [sp, #28]
 8007af2:	9b06      	ldr	r3, [sp, #24]
 8007af4:	2b09      	cmp	r3, #9
 8007af6:	f200 8089 	bhi.w	8007c0c <_dtoa_r+0x2f4>
 8007afa:	2b05      	cmp	r3, #5
 8007afc:	bfc4      	itt	gt
 8007afe:	3b04      	subgt	r3, #4
 8007b00:	9306      	strgt	r3, [sp, #24]
 8007b02:	9b06      	ldr	r3, [sp, #24]
 8007b04:	f1a3 0302 	sub.w	r3, r3, #2
 8007b08:	bfcc      	ite	gt
 8007b0a:	2500      	movgt	r5, #0
 8007b0c:	2501      	movle	r5, #1
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	f200 8087 	bhi.w	8007c22 <_dtoa_r+0x30a>
 8007b14:	e8df f003 	tbb	[pc, r3]
 8007b18:	59383a2d 	.word	0x59383a2d
 8007b1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007b20:	441d      	add	r5, r3
 8007b22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	bfc1      	itttt	gt
 8007b2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b32:	fa0b f303 	lslgt.w	r3, fp, r3
 8007b36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007b3a:	bfda      	itte	le
 8007b3c:	f1c3 0320 	rsble	r3, r3, #32
 8007b40:	fa06 f003 	lslle.w	r0, r6, r3
 8007b44:	4318      	orrgt	r0, r3
 8007b46:	f7f8 fcf5 	bl	8000534 <__aeabi_ui2d>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007b52:	3d01      	subs	r5, #1
 8007b54:	930e      	str	r3, [sp, #56]	; 0x38
 8007b56:	e76a      	b.n	8007a2e <_dtoa_r+0x116>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e7b2      	b.n	8007ac2 <_dtoa_r+0x1aa>
 8007b5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b5e:	e7b1      	b.n	8007ac4 <_dtoa_r+0x1ac>
 8007b60:	9b04      	ldr	r3, [sp, #16]
 8007b62:	9a00      	ldr	r2, [sp, #0]
 8007b64:	1a9b      	subs	r3, r3, r2
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	4253      	negs	r3, r2
 8007b6a:	9307      	str	r3, [sp, #28]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b70:	e7bf      	b.n	8007af2 <_dtoa_r+0x1da>
 8007b72:	2300      	movs	r3, #0
 8007b74:	9308      	str	r3, [sp, #32]
 8007b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	dc55      	bgt.n	8007c28 <_dtoa_r+0x310>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b82:	461a      	mov	r2, r3
 8007b84:	9209      	str	r2, [sp, #36]	; 0x24
 8007b86:	e00c      	b.n	8007ba2 <_dtoa_r+0x28a>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e7f3      	b.n	8007b74 <_dtoa_r+0x25c>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b90:	9308      	str	r3, [sp, #32]
 8007b92:	9b00      	ldr	r3, [sp, #0]
 8007b94:	4413      	add	r3, r2
 8007b96:	9302      	str	r3, [sp, #8]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	9303      	str	r3, [sp, #12]
 8007b9e:	bfb8      	it	lt
 8007ba0:	2301      	movlt	r3, #1
 8007ba2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	6042      	str	r2, [r0, #4]
 8007ba8:	2204      	movs	r2, #4
 8007baa:	f102 0614 	add.w	r6, r2, #20
 8007bae:	429e      	cmp	r6, r3
 8007bb0:	6841      	ldr	r1, [r0, #4]
 8007bb2:	d93d      	bls.n	8007c30 <_dtoa_r+0x318>
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f000 fedb 	bl	8008970 <_Balloc>
 8007bba:	9001      	str	r0, [sp, #4]
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d13b      	bne.n	8007c38 <_dtoa_r+0x320>
 8007bc0:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <_dtoa_r+0x2f0>)
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007bc8:	e6c0      	b.n	800794c <_dtoa_r+0x34>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e7df      	b.n	8007b8e <_dtoa_r+0x276>
 8007bce:	bf00      	nop
 8007bd0:	636f4361 	.word	0x636f4361
 8007bd4:	3fd287a7 	.word	0x3fd287a7
 8007bd8:	8b60c8b3 	.word	0x8b60c8b3
 8007bdc:	3fc68a28 	.word	0x3fc68a28
 8007be0:	509f79fb 	.word	0x509f79fb
 8007be4:	3fd34413 	.word	0x3fd34413
 8007be8:	0800a755 	.word	0x0800a755
 8007bec:	0800a76c 	.word	0x0800a76c
 8007bf0:	7ff00000 	.word	0x7ff00000
 8007bf4:	0800a751 	.word	0x0800a751
 8007bf8:	0800a748 	.word	0x0800a748
 8007bfc:	0800a725 	.word	0x0800a725
 8007c00:	3ff80000 	.word	0x3ff80000
 8007c04:	0800a8c0 	.word	0x0800a8c0
 8007c08:	0800a7c7 	.word	0x0800a7c7
 8007c0c:	2501      	movs	r5, #1
 8007c0e:	2300      	movs	r3, #0
 8007c10:	9306      	str	r3, [sp, #24]
 8007c12:	9508      	str	r5, [sp, #32]
 8007c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2312      	movs	r3, #18
 8007c20:	e7b0      	b.n	8007b84 <_dtoa_r+0x26c>
 8007c22:	2301      	movs	r3, #1
 8007c24:	9308      	str	r3, [sp, #32]
 8007c26:	e7f5      	b.n	8007c14 <_dtoa_r+0x2fc>
 8007c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c2e:	e7b8      	b.n	8007ba2 <_dtoa_r+0x28a>
 8007c30:	3101      	adds	r1, #1
 8007c32:	6041      	str	r1, [r0, #4]
 8007c34:	0052      	lsls	r2, r2, #1
 8007c36:	e7b8      	b.n	8007baa <_dtoa_r+0x292>
 8007c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c3a:	9a01      	ldr	r2, [sp, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	2b0e      	cmp	r3, #14
 8007c42:	f200 809d 	bhi.w	8007d80 <_dtoa_r+0x468>
 8007c46:	2d00      	cmp	r5, #0
 8007c48:	f000 809a 	beq.w	8007d80 <_dtoa_r+0x468>
 8007c4c:	9b00      	ldr	r3, [sp, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	dd32      	ble.n	8007cb8 <_dtoa_r+0x3a0>
 8007c52:	4ab7      	ldr	r2, [pc, #732]	; (8007f30 <_dtoa_r+0x618>)
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c60:	9b00      	ldr	r3, [sp, #0]
 8007c62:	05d8      	lsls	r0, r3, #23
 8007c64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007c68:	d516      	bpl.n	8007c98 <_dtoa_r+0x380>
 8007c6a:	4bb2      	ldr	r3, [pc, #712]	; (8007f34 <_dtoa_r+0x61c>)
 8007c6c:	ec51 0b19 	vmov	r0, r1, d9
 8007c70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c74:	f7f8 fe02 	bl	800087c <__aeabi_ddiv>
 8007c78:	f007 070f 	and.w	r7, r7, #15
 8007c7c:	4682      	mov	sl, r0
 8007c7e:	468b      	mov	fp, r1
 8007c80:	2503      	movs	r5, #3
 8007c82:	4eac      	ldr	r6, [pc, #688]	; (8007f34 <_dtoa_r+0x61c>)
 8007c84:	b957      	cbnz	r7, 8007c9c <_dtoa_r+0x384>
 8007c86:	4642      	mov	r2, r8
 8007c88:	464b      	mov	r3, r9
 8007c8a:	4650      	mov	r0, sl
 8007c8c:	4659      	mov	r1, fp
 8007c8e:	f7f8 fdf5 	bl	800087c <__aeabi_ddiv>
 8007c92:	4682      	mov	sl, r0
 8007c94:	468b      	mov	fp, r1
 8007c96:	e028      	b.n	8007cea <_dtoa_r+0x3d2>
 8007c98:	2502      	movs	r5, #2
 8007c9a:	e7f2      	b.n	8007c82 <_dtoa_r+0x36a>
 8007c9c:	07f9      	lsls	r1, r7, #31
 8007c9e:	d508      	bpl.n	8007cb2 <_dtoa_r+0x39a>
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ca8:	f7f8 fcbe 	bl	8000628 <__aeabi_dmul>
 8007cac:	3501      	adds	r5, #1
 8007cae:	4680      	mov	r8, r0
 8007cb0:	4689      	mov	r9, r1
 8007cb2:	107f      	asrs	r7, r7, #1
 8007cb4:	3608      	adds	r6, #8
 8007cb6:	e7e5      	b.n	8007c84 <_dtoa_r+0x36c>
 8007cb8:	f000 809b 	beq.w	8007df2 <_dtoa_r+0x4da>
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	4f9d      	ldr	r7, [pc, #628]	; (8007f34 <_dtoa_r+0x61c>)
 8007cc0:	425e      	negs	r6, r3
 8007cc2:	4b9b      	ldr	r3, [pc, #620]	; (8007f30 <_dtoa_r+0x618>)
 8007cc4:	f006 020f 	and.w	r2, r6, #15
 8007cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	ec51 0b19 	vmov	r0, r1, d9
 8007cd4:	f7f8 fca8 	bl	8000628 <__aeabi_dmul>
 8007cd8:	1136      	asrs	r6, r6, #4
 8007cda:	4682      	mov	sl, r0
 8007cdc:	468b      	mov	fp, r1
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2502      	movs	r5, #2
 8007ce2:	2e00      	cmp	r6, #0
 8007ce4:	d17a      	bne.n	8007ddc <_dtoa_r+0x4c4>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1d3      	bne.n	8007c92 <_dtoa_r+0x37a>
 8007cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 8082 	beq.w	8007df6 <_dtoa_r+0x4de>
 8007cf2:	4b91      	ldr	r3, [pc, #580]	; (8007f38 <_dtoa_r+0x620>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4650      	mov	r0, sl
 8007cf8:	4659      	mov	r1, fp
 8007cfa:	f7f8 ff07 	bl	8000b0c <__aeabi_dcmplt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d079      	beq.n	8007df6 <_dtoa_r+0x4de>
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d076      	beq.n	8007df6 <_dtoa_r+0x4de>
 8007d08:	9b02      	ldr	r3, [sp, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	dd36      	ble.n	8007d7c <_dtoa_r+0x464>
 8007d0e:	9b00      	ldr	r3, [sp, #0]
 8007d10:	4650      	mov	r0, sl
 8007d12:	4659      	mov	r1, fp
 8007d14:	1e5f      	subs	r7, r3, #1
 8007d16:	2200      	movs	r2, #0
 8007d18:	4b88      	ldr	r3, [pc, #544]	; (8007f3c <_dtoa_r+0x624>)
 8007d1a:	f7f8 fc85 	bl	8000628 <__aeabi_dmul>
 8007d1e:	9e02      	ldr	r6, [sp, #8]
 8007d20:	4682      	mov	sl, r0
 8007d22:	468b      	mov	fp, r1
 8007d24:	3501      	adds	r5, #1
 8007d26:	4628      	mov	r0, r5
 8007d28:	f7f8 fc14 	bl	8000554 <__aeabi_i2d>
 8007d2c:	4652      	mov	r2, sl
 8007d2e:	465b      	mov	r3, fp
 8007d30:	f7f8 fc7a 	bl	8000628 <__aeabi_dmul>
 8007d34:	4b82      	ldr	r3, [pc, #520]	; (8007f40 <_dtoa_r+0x628>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	f7f8 fac0 	bl	80002bc <__adddf3>
 8007d3c:	46d0      	mov	r8, sl
 8007d3e:	46d9      	mov	r9, fp
 8007d40:	4682      	mov	sl, r0
 8007d42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007d46:	2e00      	cmp	r6, #0
 8007d48:	d158      	bne.n	8007dfc <_dtoa_r+0x4e4>
 8007d4a:	4b7e      	ldr	r3, [pc, #504]	; (8007f44 <_dtoa_r+0x62c>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4640      	mov	r0, r8
 8007d50:	4649      	mov	r1, r9
 8007d52:	f7f8 fab1 	bl	80002b8 <__aeabi_dsub>
 8007d56:	4652      	mov	r2, sl
 8007d58:	465b      	mov	r3, fp
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	4689      	mov	r9, r1
 8007d5e:	f7f8 fef3 	bl	8000b48 <__aeabi_dcmpgt>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	f040 8295 	bne.w	8008292 <_dtoa_r+0x97a>
 8007d68:	4652      	mov	r2, sl
 8007d6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d6e:	4640      	mov	r0, r8
 8007d70:	4649      	mov	r1, r9
 8007d72:	f7f8 fecb 	bl	8000b0c <__aeabi_dcmplt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f040 8289 	bne.w	800828e <_dtoa_r+0x976>
 8007d7c:	ec5b ab19 	vmov	sl, fp, d9
 8007d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f2c0 8148 	blt.w	8008018 <_dtoa_r+0x700>
 8007d88:	9a00      	ldr	r2, [sp, #0]
 8007d8a:	2a0e      	cmp	r2, #14
 8007d8c:	f300 8144 	bgt.w	8008018 <_dtoa_r+0x700>
 8007d90:	4b67      	ldr	r3, [pc, #412]	; (8007f30 <_dtoa_r+0x618>)
 8007d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f280 80d5 	bge.w	8007f4c <_dtoa_r+0x634>
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f300 80d1 	bgt.w	8007f4c <_dtoa_r+0x634>
 8007daa:	f040 826f 	bne.w	800828c <_dtoa_r+0x974>
 8007dae:	4b65      	ldr	r3, [pc, #404]	; (8007f44 <_dtoa_r+0x62c>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	4640      	mov	r0, r8
 8007db4:	4649      	mov	r1, r9
 8007db6:	f7f8 fc37 	bl	8000628 <__aeabi_dmul>
 8007dba:	4652      	mov	r2, sl
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	f7f8 feb9 	bl	8000b34 <__aeabi_dcmpge>
 8007dc2:	9e03      	ldr	r6, [sp, #12]
 8007dc4:	4637      	mov	r7, r6
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	f040 8245 	bne.w	8008256 <_dtoa_r+0x93e>
 8007dcc:	9d01      	ldr	r5, [sp, #4]
 8007dce:	2331      	movs	r3, #49	; 0x31
 8007dd0:	f805 3b01 	strb.w	r3, [r5], #1
 8007dd4:	9b00      	ldr	r3, [sp, #0]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	e240      	b.n	800825e <_dtoa_r+0x946>
 8007ddc:	07f2      	lsls	r2, r6, #31
 8007dde:	d505      	bpl.n	8007dec <_dtoa_r+0x4d4>
 8007de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de4:	f7f8 fc20 	bl	8000628 <__aeabi_dmul>
 8007de8:	3501      	adds	r5, #1
 8007dea:	2301      	movs	r3, #1
 8007dec:	1076      	asrs	r6, r6, #1
 8007dee:	3708      	adds	r7, #8
 8007df0:	e777      	b.n	8007ce2 <_dtoa_r+0x3ca>
 8007df2:	2502      	movs	r5, #2
 8007df4:	e779      	b.n	8007cea <_dtoa_r+0x3d2>
 8007df6:	9f00      	ldr	r7, [sp, #0]
 8007df8:	9e03      	ldr	r6, [sp, #12]
 8007dfa:	e794      	b.n	8007d26 <_dtoa_r+0x40e>
 8007dfc:	9901      	ldr	r1, [sp, #4]
 8007dfe:	4b4c      	ldr	r3, [pc, #304]	; (8007f30 <_dtoa_r+0x618>)
 8007e00:	4431      	add	r1, r6
 8007e02:	910d      	str	r1, [sp, #52]	; 0x34
 8007e04:	9908      	ldr	r1, [sp, #32]
 8007e06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e0e:	2900      	cmp	r1, #0
 8007e10:	d043      	beq.n	8007e9a <_dtoa_r+0x582>
 8007e12:	494d      	ldr	r1, [pc, #308]	; (8007f48 <_dtoa_r+0x630>)
 8007e14:	2000      	movs	r0, #0
 8007e16:	f7f8 fd31 	bl	800087c <__aeabi_ddiv>
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	465b      	mov	r3, fp
 8007e1e:	f7f8 fa4b 	bl	80002b8 <__aeabi_dsub>
 8007e22:	9d01      	ldr	r5, [sp, #4]
 8007e24:	4682      	mov	sl, r0
 8007e26:	468b      	mov	fp, r1
 8007e28:	4649      	mov	r1, r9
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	f7f8 feac 	bl	8000b88 <__aeabi_d2iz>
 8007e30:	4606      	mov	r6, r0
 8007e32:	f7f8 fb8f 	bl	8000554 <__aeabi_i2d>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	f7f8 fa3b 	bl	80002b8 <__aeabi_dsub>
 8007e42:	3630      	adds	r6, #48	; 0x30
 8007e44:	f805 6b01 	strb.w	r6, [r5], #1
 8007e48:	4652      	mov	r2, sl
 8007e4a:	465b      	mov	r3, fp
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	4689      	mov	r9, r1
 8007e50:	f7f8 fe5c 	bl	8000b0c <__aeabi_dcmplt>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d163      	bne.n	8007f20 <_dtoa_r+0x608>
 8007e58:	4642      	mov	r2, r8
 8007e5a:	464b      	mov	r3, r9
 8007e5c:	4936      	ldr	r1, [pc, #216]	; (8007f38 <_dtoa_r+0x620>)
 8007e5e:	2000      	movs	r0, #0
 8007e60:	f7f8 fa2a 	bl	80002b8 <__aeabi_dsub>
 8007e64:	4652      	mov	r2, sl
 8007e66:	465b      	mov	r3, fp
 8007e68:	f7f8 fe50 	bl	8000b0c <__aeabi_dcmplt>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f040 80b5 	bne.w	8007fdc <_dtoa_r+0x6c4>
 8007e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e74:	429d      	cmp	r5, r3
 8007e76:	d081      	beq.n	8007d7c <_dtoa_r+0x464>
 8007e78:	4b30      	ldr	r3, [pc, #192]	; (8007f3c <_dtoa_r+0x624>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	4659      	mov	r1, fp
 8007e80:	f7f8 fbd2 	bl	8000628 <__aeabi_dmul>
 8007e84:	4b2d      	ldr	r3, [pc, #180]	; (8007f3c <_dtoa_r+0x624>)
 8007e86:	4682      	mov	sl, r0
 8007e88:	468b      	mov	fp, r1
 8007e8a:	4640      	mov	r0, r8
 8007e8c:	4649      	mov	r1, r9
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f7f8 fbca 	bl	8000628 <__aeabi_dmul>
 8007e94:	4680      	mov	r8, r0
 8007e96:	4689      	mov	r9, r1
 8007e98:	e7c6      	b.n	8007e28 <_dtoa_r+0x510>
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	f7f8 fbc3 	bl	8000628 <__aeabi_dmul>
 8007ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ea4:	9d01      	ldr	r5, [sp, #4]
 8007ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	468b      	mov	fp, r1
 8007eac:	4649      	mov	r1, r9
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f7f8 fe6a 	bl	8000b88 <__aeabi_d2iz>
 8007eb4:	4606      	mov	r6, r0
 8007eb6:	f7f8 fb4d 	bl	8000554 <__aeabi_i2d>
 8007eba:	3630      	adds	r6, #48	; 0x30
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	f7f8 f9f8 	bl	80002b8 <__aeabi_dsub>
 8007ec8:	f805 6b01 	strb.w	r6, [r5], #1
 8007ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ece:	429d      	cmp	r5, r3
 8007ed0:	4680      	mov	r8, r0
 8007ed2:	4689      	mov	r9, r1
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	d124      	bne.n	8007f24 <_dtoa_r+0x60c>
 8007eda:	4b1b      	ldr	r3, [pc, #108]	; (8007f48 <_dtoa_r+0x630>)
 8007edc:	4650      	mov	r0, sl
 8007ede:	4659      	mov	r1, fp
 8007ee0:	f7f8 f9ec 	bl	80002bc <__adddf3>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4640      	mov	r0, r8
 8007eea:	4649      	mov	r1, r9
 8007eec:	f7f8 fe2c 	bl	8000b48 <__aeabi_dcmpgt>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d173      	bne.n	8007fdc <_dtoa_r+0x6c4>
 8007ef4:	4652      	mov	r2, sl
 8007ef6:	465b      	mov	r3, fp
 8007ef8:	4913      	ldr	r1, [pc, #76]	; (8007f48 <_dtoa_r+0x630>)
 8007efa:	2000      	movs	r0, #0
 8007efc:	f7f8 f9dc 	bl	80002b8 <__aeabi_dsub>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4640      	mov	r0, r8
 8007f06:	4649      	mov	r1, r9
 8007f08:	f7f8 fe00 	bl	8000b0c <__aeabi_dcmplt>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f43f af35 	beq.w	8007d7c <_dtoa_r+0x464>
 8007f12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007f14:	1e6b      	subs	r3, r5, #1
 8007f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f1c:	2b30      	cmp	r3, #48	; 0x30
 8007f1e:	d0f8      	beq.n	8007f12 <_dtoa_r+0x5fa>
 8007f20:	9700      	str	r7, [sp, #0]
 8007f22:	e049      	b.n	8007fb8 <_dtoa_r+0x6a0>
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <_dtoa_r+0x624>)
 8007f26:	f7f8 fb7f 	bl	8000628 <__aeabi_dmul>
 8007f2a:	4680      	mov	r8, r0
 8007f2c:	4689      	mov	r9, r1
 8007f2e:	e7bd      	b.n	8007eac <_dtoa_r+0x594>
 8007f30:	0800a8c0 	.word	0x0800a8c0
 8007f34:	0800a898 	.word	0x0800a898
 8007f38:	3ff00000 	.word	0x3ff00000
 8007f3c:	40240000 	.word	0x40240000
 8007f40:	401c0000 	.word	0x401c0000
 8007f44:	40140000 	.word	0x40140000
 8007f48:	3fe00000 	.word	0x3fe00000
 8007f4c:	9d01      	ldr	r5, [sp, #4]
 8007f4e:	4656      	mov	r6, sl
 8007f50:	465f      	mov	r7, fp
 8007f52:	4642      	mov	r2, r8
 8007f54:	464b      	mov	r3, r9
 8007f56:	4630      	mov	r0, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	f7f8 fc8f 	bl	800087c <__aeabi_ddiv>
 8007f5e:	f7f8 fe13 	bl	8000b88 <__aeabi_d2iz>
 8007f62:	4682      	mov	sl, r0
 8007f64:	f7f8 faf6 	bl	8000554 <__aeabi_i2d>
 8007f68:	4642      	mov	r2, r8
 8007f6a:	464b      	mov	r3, r9
 8007f6c:	f7f8 fb5c 	bl	8000628 <__aeabi_dmul>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007f7c:	f7f8 f99c 	bl	80002b8 <__aeabi_dsub>
 8007f80:	f805 6b01 	strb.w	r6, [r5], #1
 8007f84:	9e01      	ldr	r6, [sp, #4]
 8007f86:	9f03      	ldr	r7, [sp, #12]
 8007f88:	1bae      	subs	r6, r5, r6
 8007f8a:	42b7      	cmp	r7, r6
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	d135      	bne.n	8007ffe <_dtoa_r+0x6e6>
 8007f92:	f7f8 f993 	bl	80002bc <__adddf3>
 8007f96:	4642      	mov	r2, r8
 8007f98:	464b      	mov	r3, r9
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	460f      	mov	r7, r1
 8007f9e:	f7f8 fdd3 	bl	8000b48 <__aeabi_dcmpgt>
 8007fa2:	b9d0      	cbnz	r0, 8007fda <_dtoa_r+0x6c2>
 8007fa4:	4642      	mov	r2, r8
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 fda4 	bl	8000af8 <__aeabi_dcmpeq>
 8007fb0:	b110      	cbz	r0, 8007fb8 <_dtoa_r+0x6a0>
 8007fb2:	f01a 0f01 	tst.w	sl, #1
 8007fb6:	d110      	bne.n	8007fda <_dtoa_r+0x6c2>
 8007fb8:	4620      	mov	r0, r4
 8007fba:	ee18 1a10 	vmov	r1, s16
 8007fbe:	f000 fd17 	bl	80089f0 <_Bfree>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9800      	ldr	r0, [sp, #0]
 8007fc6:	702b      	strb	r3, [r5, #0]
 8007fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fca:	3001      	adds	r0, #1
 8007fcc:	6018      	str	r0, [r3, #0]
 8007fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f43f acf1 	beq.w	80079b8 <_dtoa_r+0xa0>
 8007fd6:	601d      	str	r5, [r3, #0]
 8007fd8:	e4ee      	b.n	80079b8 <_dtoa_r+0xa0>
 8007fda:	9f00      	ldr	r7, [sp, #0]
 8007fdc:	462b      	mov	r3, r5
 8007fde:	461d      	mov	r5, r3
 8007fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fe4:	2a39      	cmp	r2, #57	; 0x39
 8007fe6:	d106      	bne.n	8007ff6 <_dtoa_r+0x6de>
 8007fe8:	9a01      	ldr	r2, [sp, #4]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d1f7      	bne.n	8007fde <_dtoa_r+0x6c6>
 8007fee:	9901      	ldr	r1, [sp, #4]
 8007ff0:	2230      	movs	r2, #48	; 0x30
 8007ff2:	3701      	adds	r7, #1
 8007ff4:	700a      	strb	r2, [r1, #0]
 8007ff6:	781a      	ldrb	r2, [r3, #0]
 8007ff8:	3201      	adds	r2, #1
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	e790      	b.n	8007f20 <_dtoa_r+0x608>
 8007ffe:	4ba6      	ldr	r3, [pc, #664]	; (8008298 <_dtoa_r+0x980>)
 8008000:	2200      	movs	r2, #0
 8008002:	f7f8 fb11 	bl	8000628 <__aeabi_dmul>
 8008006:	2200      	movs	r2, #0
 8008008:	2300      	movs	r3, #0
 800800a:	4606      	mov	r6, r0
 800800c:	460f      	mov	r7, r1
 800800e:	f7f8 fd73 	bl	8000af8 <__aeabi_dcmpeq>
 8008012:	2800      	cmp	r0, #0
 8008014:	d09d      	beq.n	8007f52 <_dtoa_r+0x63a>
 8008016:	e7cf      	b.n	8007fb8 <_dtoa_r+0x6a0>
 8008018:	9a08      	ldr	r2, [sp, #32]
 800801a:	2a00      	cmp	r2, #0
 800801c:	f000 80d7 	beq.w	80081ce <_dtoa_r+0x8b6>
 8008020:	9a06      	ldr	r2, [sp, #24]
 8008022:	2a01      	cmp	r2, #1
 8008024:	f300 80ba 	bgt.w	800819c <_dtoa_r+0x884>
 8008028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800802a:	2a00      	cmp	r2, #0
 800802c:	f000 80b2 	beq.w	8008194 <_dtoa_r+0x87c>
 8008030:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008034:	9e07      	ldr	r6, [sp, #28]
 8008036:	9d04      	ldr	r5, [sp, #16]
 8008038:	9a04      	ldr	r2, [sp, #16]
 800803a:	441a      	add	r2, r3
 800803c:	9204      	str	r2, [sp, #16]
 800803e:	9a05      	ldr	r2, [sp, #20]
 8008040:	2101      	movs	r1, #1
 8008042:	441a      	add	r2, r3
 8008044:	4620      	mov	r0, r4
 8008046:	9205      	str	r2, [sp, #20]
 8008048:	f000 fd8a 	bl	8008b60 <__i2b>
 800804c:	4607      	mov	r7, r0
 800804e:	2d00      	cmp	r5, #0
 8008050:	dd0c      	ble.n	800806c <_dtoa_r+0x754>
 8008052:	9b05      	ldr	r3, [sp, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	dd09      	ble.n	800806c <_dtoa_r+0x754>
 8008058:	42ab      	cmp	r3, r5
 800805a:	9a04      	ldr	r2, [sp, #16]
 800805c:	bfa8      	it	ge
 800805e:	462b      	movge	r3, r5
 8008060:	1ad2      	subs	r2, r2, r3
 8008062:	9204      	str	r2, [sp, #16]
 8008064:	9a05      	ldr	r2, [sp, #20]
 8008066:	1aed      	subs	r5, r5, r3
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	9305      	str	r3, [sp, #20]
 800806c:	9b07      	ldr	r3, [sp, #28]
 800806e:	b31b      	cbz	r3, 80080b8 <_dtoa_r+0x7a0>
 8008070:	9b08      	ldr	r3, [sp, #32]
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 80af 	beq.w	80081d6 <_dtoa_r+0x8be>
 8008078:	2e00      	cmp	r6, #0
 800807a:	dd13      	ble.n	80080a4 <_dtoa_r+0x78c>
 800807c:	4639      	mov	r1, r7
 800807e:	4632      	mov	r2, r6
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fe2d 	bl	8008ce0 <__pow5mult>
 8008086:	ee18 2a10 	vmov	r2, s16
 800808a:	4601      	mov	r1, r0
 800808c:	4607      	mov	r7, r0
 800808e:	4620      	mov	r0, r4
 8008090:	f000 fd7c 	bl	8008b8c <__multiply>
 8008094:	ee18 1a10 	vmov	r1, s16
 8008098:	4680      	mov	r8, r0
 800809a:	4620      	mov	r0, r4
 800809c:	f000 fca8 	bl	80089f0 <_Bfree>
 80080a0:	ee08 8a10 	vmov	s16, r8
 80080a4:	9b07      	ldr	r3, [sp, #28]
 80080a6:	1b9a      	subs	r2, r3, r6
 80080a8:	d006      	beq.n	80080b8 <_dtoa_r+0x7a0>
 80080aa:	ee18 1a10 	vmov	r1, s16
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 fe16 	bl	8008ce0 <__pow5mult>
 80080b4:	ee08 0a10 	vmov	s16, r0
 80080b8:	2101      	movs	r1, #1
 80080ba:	4620      	mov	r0, r4
 80080bc:	f000 fd50 	bl	8008b60 <__i2b>
 80080c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	4606      	mov	r6, r0
 80080c6:	f340 8088 	ble.w	80081da <_dtoa_r+0x8c2>
 80080ca:	461a      	mov	r2, r3
 80080cc:	4601      	mov	r1, r0
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 fe06 	bl	8008ce0 <__pow5mult>
 80080d4:	9b06      	ldr	r3, [sp, #24]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	4606      	mov	r6, r0
 80080da:	f340 8081 	ble.w	80081e0 <_dtoa_r+0x8c8>
 80080de:	f04f 0800 	mov.w	r8, #0
 80080e2:	6933      	ldr	r3, [r6, #16]
 80080e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80080e8:	6918      	ldr	r0, [r3, #16]
 80080ea:	f000 fce9 	bl	8008ac0 <__hi0bits>
 80080ee:	f1c0 0020 	rsb	r0, r0, #32
 80080f2:	9b05      	ldr	r3, [sp, #20]
 80080f4:	4418      	add	r0, r3
 80080f6:	f010 001f 	ands.w	r0, r0, #31
 80080fa:	f000 8092 	beq.w	8008222 <_dtoa_r+0x90a>
 80080fe:	f1c0 0320 	rsb	r3, r0, #32
 8008102:	2b04      	cmp	r3, #4
 8008104:	f340 808a 	ble.w	800821c <_dtoa_r+0x904>
 8008108:	f1c0 001c 	rsb	r0, r0, #28
 800810c:	9b04      	ldr	r3, [sp, #16]
 800810e:	4403      	add	r3, r0
 8008110:	9304      	str	r3, [sp, #16]
 8008112:	9b05      	ldr	r3, [sp, #20]
 8008114:	4403      	add	r3, r0
 8008116:	4405      	add	r5, r0
 8008118:	9305      	str	r3, [sp, #20]
 800811a:	9b04      	ldr	r3, [sp, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dd07      	ble.n	8008130 <_dtoa_r+0x818>
 8008120:	ee18 1a10 	vmov	r1, s16
 8008124:	461a      	mov	r2, r3
 8008126:	4620      	mov	r0, r4
 8008128:	f000 fe34 	bl	8008d94 <__lshift>
 800812c:	ee08 0a10 	vmov	s16, r0
 8008130:	9b05      	ldr	r3, [sp, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	dd05      	ble.n	8008142 <_dtoa_r+0x82a>
 8008136:	4631      	mov	r1, r6
 8008138:	461a      	mov	r2, r3
 800813a:	4620      	mov	r0, r4
 800813c:	f000 fe2a 	bl	8008d94 <__lshift>
 8008140:	4606      	mov	r6, r0
 8008142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d06e      	beq.n	8008226 <_dtoa_r+0x90e>
 8008148:	ee18 0a10 	vmov	r0, s16
 800814c:	4631      	mov	r1, r6
 800814e:	f000 fe91 	bl	8008e74 <__mcmp>
 8008152:	2800      	cmp	r0, #0
 8008154:	da67      	bge.n	8008226 <_dtoa_r+0x90e>
 8008156:	9b00      	ldr	r3, [sp, #0]
 8008158:	3b01      	subs	r3, #1
 800815a:	ee18 1a10 	vmov	r1, s16
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	220a      	movs	r2, #10
 8008162:	2300      	movs	r3, #0
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fc65 	bl	8008a34 <__multadd>
 800816a:	9b08      	ldr	r3, [sp, #32]
 800816c:	ee08 0a10 	vmov	s16, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 81b1 	beq.w	80084d8 <_dtoa_r+0xbc0>
 8008176:	2300      	movs	r3, #0
 8008178:	4639      	mov	r1, r7
 800817a:	220a      	movs	r2, #10
 800817c:	4620      	mov	r0, r4
 800817e:	f000 fc59 	bl	8008a34 <__multadd>
 8008182:	9b02      	ldr	r3, [sp, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	4607      	mov	r7, r0
 8008188:	f300 808e 	bgt.w	80082a8 <_dtoa_r+0x990>
 800818c:	9b06      	ldr	r3, [sp, #24]
 800818e:	2b02      	cmp	r3, #2
 8008190:	dc51      	bgt.n	8008236 <_dtoa_r+0x91e>
 8008192:	e089      	b.n	80082a8 <_dtoa_r+0x990>
 8008194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800819a:	e74b      	b.n	8008034 <_dtoa_r+0x71c>
 800819c:	9b03      	ldr	r3, [sp, #12]
 800819e:	1e5e      	subs	r6, r3, #1
 80081a0:	9b07      	ldr	r3, [sp, #28]
 80081a2:	42b3      	cmp	r3, r6
 80081a4:	bfbf      	itttt	lt
 80081a6:	9b07      	ldrlt	r3, [sp, #28]
 80081a8:	9607      	strlt	r6, [sp, #28]
 80081aa:	1af2      	sublt	r2, r6, r3
 80081ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80081ae:	bfb6      	itet	lt
 80081b0:	189b      	addlt	r3, r3, r2
 80081b2:	1b9e      	subge	r6, r3, r6
 80081b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80081b6:	9b03      	ldr	r3, [sp, #12]
 80081b8:	bfb8      	it	lt
 80081ba:	2600      	movlt	r6, #0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	bfb7      	itett	lt
 80081c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80081c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80081c8:	1a9d      	sublt	r5, r3, r2
 80081ca:	2300      	movlt	r3, #0
 80081cc:	e734      	b.n	8008038 <_dtoa_r+0x720>
 80081ce:	9e07      	ldr	r6, [sp, #28]
 80081d0:	9d04      	ldr	r5, [sp, #16]
 80081d2:	9f08      	ldr	r7, [sp, #32]
 80081d4:	e73b      	b.n	800804e <_dtoa_r+0x736>
 80081d6:	9a07      	ldr	r2, [sp, #28]
 80081d8:	e767      	b.n	80080aa <_dtoa_r+0x792>
 80081da:	9b06      	ldr	r3, [sp, #24]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	dc18      	bgt.n	8008212 <_dtoa_r+0x8fa>
 80081e0:	f1ba 0f00 	cmp.w	sl, #0
 80081e4:	d115      	bne.n	8008212 <_dtoa_r+0x8fa>
 80081e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081ea:	b993      	cbnz	r3, 8008212 <_dtoa_r+0x8fa>
 80081ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081f0:	0d1b      	lsrs	r3, r3, #20
 80081f2:	051b      	lsls	r3, r3, #20
 80081f4:	b183      	cbz	r3, 8008218 <_dtoa_r+0x900>
 80081f6:	9b04      	ldr	r3, [sp, #16]
 80081f8:	3301      	adds	r3, #1
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	9b05      	ldr	r3, [sp, #20]
 80081fe:	3301      	adds	r3, #1
 8008200:	9305      	str	r3, [sp, #20]
 8008202:	f04f 0801 	mov.w	r8, #1
 8008206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008208:	2b00      	cmp	r3, #0
 800820a:	f47f af6a 	bne.w	80080e2 <_dtoa_r+0x7ca>
 800820e:	2001      	movs	r0, #1
 8008210:	e76f      	b.n	80080f2 <_dtoa_r+0x7da>
 8008212:	f04f 0800 	mov.w	r8, #0
 8008216:	e7f6      	b.n	8008206 <_dtoa_r+0x8ee>
 8008218:	4698      	mov	r8, r3
 800821a:	e7f4      	b.n	8008206 <_dtoa_r+0x8ee>
 800821c:	f43f af7d 	beq.w	800811a <_dtoa_r+0x802>
 8008220:	4618      	mov	r0, r3
 8008222:	301c      	adds	r0, #28
 8008224:	e772      	b.n	800810c <_dtoa_r+0x7f4>
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	dc37      	bgt.n	800829c <_dtoa_r+0x984>
 800822c:	9b06      	ldr	r3, [sp, #24]
 800822e:	2b02      	cmp	r3, #2
 8008230:	dd34      	ble.n	800829c <_dtoa_r+0x984>
 8008232:	9b03      	ldr	r3, [sp, #12]
 8008234:	9302      	str	r3, [sp, #8]
 8008236:	9b02      	ldr	r3, [sp, #8]
 8008238:	b96b      	cbnz	r3, 8008256 <_dtoa_r+0x93e>
 800823a:	4631      	mov	r1, r6
 800823c:	2205      	movs	r2, #5
 800823e:	4620      	mov	r0, r4
 8008240:	f000 fbf8 	bl	8008a34 <__multadd>
 8008244:	4601      	mov	r1, r0
 8008246:	4606      	mov	r6, r0
 8008248:	ee18 0a10 	vmov	r0, s16
 800824c:	f000 fe12 	bl	8008e74 <__mcmp>
 8008250:	2800      	cmp	r0, #0
 8008252:	f73f adbb 	bgt.w	8007dcc <_dtoa_r+0x4b4>
 8008256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008258:	9d01      	ldr	r5, [sp, #4]
 800825a:	43db      	mvns	r3, r3
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	f04f 0800 	mov.w	r8, #0
 8008262:	4631      	mov	r1, r6
 8008264:	4620      	mov	r0, r4
 8008266:	f000 fbc3 	bl	80089f0 <_Bfree>
 800826a:	2f00      	cmp	r7, #0
 800826c:	f43f aea4 	beq.w	8007fb8 <_dtoa_r+0x6a0>
 8008270:	f1b8 0f00 	cmp.w	r8, #0
 8008274:	d005      	beq.n	8008282 <_dtoa_r+0x96a>
 8008276:	45b8      	cmp	r8, r7
 8008278:	d003      	beq.n	8008282 <_dtoa_r+0x96a>
 800827a:	4641      	mov	r1, r8
 800827c:	4620      	mov	r0, r4
 800827e:	f000 fbb7 	bl	80089f0 <_Bfree>
 8008282:	4639      	mov	r1, r7
 8008284:	4620      	mov	r0, r4
 8008286:	f000 fbb3 	bl	80089f0 <_Bfree>
 800828a:	e695      	b.n	8007fb8 <_dtoa_r+0x6a0>
 800828c:	2600      	movs	r6, #0
 800828e:	4637      	mov	r7, r6
 8008290:	e7e1      	b.n	8008256 <_dtoa_r+0x93e>
 8008292:	9700      	str	r7, [sp, #0]
 8008294:	4637      	mov	r7, r6
 8008296:	e599      	b.n	8007dcc <_dtoa_r+0x4b4>
 8008298:	40240000 	.word	0x40240000
 800829c:	9b08      	ldr	r3, [sp, #32]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 80ca 	beq.w	8008438 <_dtoa_r+0xb20>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	9302      	str	r3, [sp, #8]
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	dd05      	ble.n	80082b8 <_dtoa_r+0x9a0>
 80082ac:	4639      	mov	r1, r7
 80082ae:	462a      	mov	r2, r5
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 fd6f 	bl	8008d94 <__lshift>
 80082b6:	4607      	mov	r7, r0
 80082b8:	f1b8 0f00 	cmp.w	r8, #0
 80082bc:	d05b      	beq.n	8008376 <_dtoa_r+0xa5e>
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	4620      	mov	r0, r4
 80082c2:	f000 fb55 	bl	8008970 <_Balloc>
 80082c6:	4605      	mov	r5, r0
 80082c8:	b928      	cbnz	r0, 80082d6 <_dtoa_r+0x9be>
 80082ca:	4b87      	ldr	r3, [pc, #540]	; (80084e8 <_dtoa_r+0xbd0>)
 80082cc:	4602      	mov	r2, r0
 80082ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80082d2:	f7ff bb3b 	b.w	800794c <_dtoa_r+0x34>
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	3202      	adds	r2, #2
 80082da:	0092      	lsls	r2, r2, #2
 80082dc:	f107 010c 	add.w	r1, r7, #12
 80082e0:	300c      	adds	r0, #12
 80082e2:	f000 fb2b 	bl	800893c <memcpy>
 80082e6:	2201      	movs	r2, #1
 80082e8:	4629      	mov	r1, r5
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 fd52 	bl	8008d94 <__lshift>
 80082f0:	9b01      	ldr	r3, [sp, #4]
 80082f2:	f103 0901 	add.w	r9, r3, #1
 80082f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80082fa:	4413      	add	r3, r2
 80082fc:	9305      	str	r3, [sp, #20]
 80082fe:	f00a 0301 	and.w	r3, sl, #1
 8008302:	46b8      	mov	r8, r7
 8008304:	9304      	str	r3, [sp, #16]
 8008306:	4607      	mov	r7, r0
 8008308:	4631      	mov	r1, r6
 800830a:	ee18 0a10 	vmov	r0, s16
 800830e:	f7ff fa77 	bl	8007800 <quorem>
 8008312:	4641      	mov	r1, r8
 8008314:	9002      	str	r0, [sp, #8]
 8008316:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800831a:	ee18 0a10 	vmov	r0, s16
 800831e:	f000 fda9 	bl	8008e74 <__mcmp>
 8008322:	463a      	mov	r2, r7
 8008324:	9003      	str	r0, [sp, #12]
 8008326:	4631      	mov	r1, r6
 8008328:	4620      	mov	r0, r4
 800832a:	f000 fdbf 	bl	8008eac <__mdiff>
 800832e:	68c2      	ldr	r2, [r0, #12]
 8008330:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008334:	4605      	mov	r5, r0
 8008336:	bb02      	cbnz	r2, 800837a <_dtoa_r+0xa62>
 8008338:	4601      	mov	r1, r0
 800833a:	ee18 0a10 	vmov	r0, s16
 800833e:	f000 fd99 	bl	8008e74 <__mcmp>
 8008342:	4602      	mov	r2, r0
 8008344:	4629      	mov	r1, r5
 8008346:	4620      	mov	r0, r4
 8008348:	9207      	str	r2, [sp, #28]
 800834a:	f000 fb51 	bl	80089f0 <_Bfree>
 800834e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008352:	ea43 0102 	orr.w	r1, r3, r2
 8008356:	9b04      	ldr	r3, [sp, #16]
 8008358:	430b      	orrs	r3, r1
 800835a:	464d      	mov	r5, r9
 800835c:	d10f      	bne.n	800837e <_dtoa_r+0xa66>
 800835e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008362:	d02a      	beq.n	80083ba <_dtoa_r+0xaa2>
 8008364:	9b03      	ldr	r3, [sp, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	dd02      	ble.n	8008370 <_dtoa_r+0xa58>
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008370:	f88b a000 	strb.w	sl, [fp]
 8008374:	e775      	b.n	8008262 <_dtoa_r+0x94a>
 8008376:	4638      	mov	r0, r7
 8008378:	e7ba      	b.n	80082f0 <_dtoa_r+0x9d8>
 800837a:	2201      	movs	r2, #1
 800837c:	e7e2      	b.n	8008344 <_dtoa_r+0xa2c>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	db04      	blt.n	800838e <_dtoa_r+0xa76>
 8008384:	9906      	ldr	r1, [sp, #24]
 8008386:	430b      	orrs	r3, r1
 8008388:	9904      	ldr	r1, [sp, #16]
 800838a:	430b      	orrs	r3, r1
 800838c:	d122      	bne.n	80083d4 <_dtoa_r+0xabc>
 800838e:	2a00      	cmp	r2, #0
 8008390:	ddee      	ble.n	8008370 <_dtoa_r+0xa58>
 8008392:	ee18 1a10 	vmov	r1, s16
 8008396:	2201      	movs	r2, #1
 8008398:	4620      	mov	r0, r4
 800839a:	f000 fcfb 	bl	8008d94 <__lshift>
 800839e:	4631      	mov	r1, r6
 80083a0:	ee08 0a10 	vmov	s16, r0
 80083a4:	f000 fd66 	bl	8008e74 <__mcmp>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	dc03      	bgt.n	80083b4 <_dtoa_r+0xa9c>
 80083ac:	d1e0      	bne.n	8008370 <_dtoa_r+0xa58>
 80083ae:	f01a 0f01 	tst.w	sl, #1
 80083b2:	d0dd      	beq.n	8008370 <_dtoa_r+0xa58>
 80083b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083b8:	d1d7      	bne.n	800836a <_dtoa_r+0xa52>
 80083ba:	2339      	movs	r3, #57	; 0x39
 80083bc:	f88b 3000 	strb.w	r3, [fp]
 80083c0:	462b      	mov	r3, r5
 80083c2:	461d      	mov	r5, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80083ca:	2a39      	cmp	r2, #57	; 0x39
 80083cc:	d071      	beq.n	80084b2 <_dtoa_r+0xb9a>
 80083ce:	3201      	adds	r2, #1
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	e746      	b.n	8008262 <_dtoa_r+0x94a>
 80083d4:	2a00      	cmp	r2, #0
 80083d6:	dd07      	ble.n	80083e8 <_dtoa_r+0xad0>
 80083d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083dc:	d0ed      	beq.n	80083ba <_dtoa_r+0xaa2>
 80083de:	f10a 0301 	add.w	r3, sl, #1
 80083e2:	f88b 3000 	strb.w	r3, [fp]
 80083e6:	e73c      	b.n	8008262 <_dtoa_r+0x94a>
 80083e8:	9b05      	ldr	r3, [sp, #20]
 80083ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80083ee:	4599      	cmp	r9, r3
 80083f0:	d047      	beq.n	8008482 <_dtoa_r+0xb6a>
 80083f2:	ee18 1a10 	vmov	r1, s16
 80083f6:	2300      	movs	r3, #0
 80083f8:	220a      	movs	r2, #10
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 fb1a 	bl	8008a34 <__multadd>
 8008400:	45b8      	cmp	r8, r7
 8008402:	ee08 0a10 	vmov	s16, r0
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	f04f 020a 	mov.w	r2, #10
 800840e:	4641      	mov	r1, r8
 8008410:	4620      	mov	r0, r4
 8008412:	d106      	bne.n	8008422 <_dtoa_r+0xb0a>
 8008414:	f000 fb0e 	bl	8008a34 <__multadd>
 8008418:	4680      	mov	r8, r0
 800841a:	4607      	mov	r7, r0
 800841c:	f109 0901 	add.w	r9, r9, #1
 8008420:	e772      	b.n	8008308 <_dtoa_r+0x9f0>
 8008422:	f000 fb07 	bl	8008a34 <__multadd>
 8008426:	4639      	mov	r1, r7
 8008428:	4680      	mov	r8, r0
 800842a:	2300      	movs	r3, #0
 800842c:	220a      	movs	r2, #10
 800842e:	4620      	mov	r0, r4
 8008430:	f000 fb00 	bl	8008a34 <__multadd>
 8008434:	4607      	mov	r7, r0
 8008436:	e7f1      	b.n	800841c <_dtoa_r+0xb04>
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	9302      	str	r3, [sp, #8]
 800843c:	9d01      	ldr	r5, [sp, #4]
 800843e:	ee18 0a10 	vmov	r0, s16
 8008442:	4631      	mov	r1, r6
 8008444:	f7ff f9dc 	bl	8007800 <quorem>
 8008448:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800844c:	9b01      	ldr	r3, [sp, #4]
 800844e:	f805 ab01 	strb.w	sl, [r5], #1
 8008452:	1aea      	subs	r2, r5, r3
 8008454:	9b02      	ldr	r3, [sp, #8]
 8008456:	4293      	cmp	r3, r2
 8008458:	dd09      	ble.n	800846e <_dtoa_r+0xb56>
 800845a:	ee18 1a10 	vmov	r1, s16
 800845e:	2300      	movs	r3, #0
 8008460:	220a      	movs	r2, #10
 8008462:	4620      	mov	r0, r4
 8008464:	f000 fae6 	bl	8008a34 <__multadd>
 8008468:	ee08 0a10 	vmov	s16, r0
 800846c:	e7e7      	b.n	800843e <_dtoa_r+0xb26>
 800846e:	9b02      	ldr	r3, [sp, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	bfc8      	it	gt
 8008474:	461d      	movgt	r5, r3
 8008476:	9b01      	ldr	r3, [sp, #4]
 8008478:	bfd8      	it	le
 800847a:	2501      	movle	r5, #1
 800847c:	441d      	add	r5, r3
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	ee18 1a10 	vmov	r1, s16
 8008486:	2201      	movs	r2, #1
 8008488:	4620      	mov	r0, r4
 800848a:	f000 fc83 	bl	8008d94 <__lshift>
 800848e:	4631      	mov	r1, r6
 8008490:	ee08 0a10 	vmov	s16, r0
 8008494:	f000 fcee 	bl	8008e74 <__mcmp>
 8008498:	2800      	cmp	r0, #0
 800849a:	dc91      	bgt.n	80083c0 <_dtoa_r+0xaa8>
 800849c:	d102      	bne.n	80084a4 <_dtoa_r+0xb8c>
 800849e:	f01a 0f01 	tst.w	sl, #1
 80084a2:	d18d      	bne.n	80083c0 <_dtoa_r+0xaa8>
 80084a4:	462b      	mov	r3, r5
 80084a6:	461d      	mov	r5, r3
 80084a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084ac:	2a30      	cmp	r2, #48	; 0x30
 80084ae:	d0fa      	beq.n	80084a6 <_dtoa_r+0xb8e>
 80084b0:	e6d7      	b.n	8008262 <_dtoa_r+0x94a>
 80084b2:	9a01      	ldr	r2, [sp, #4]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d184      	bne.n	80083c2 <_dtoa_r+0xaaa>
 80084b8:	9b00      	ldr	r3, [sp, #0]
 80084ba:	3301      	adds	r3, #1
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	2331      	movs	r3, #49	; 0x31
 80084c0:	7013      	strb	r3, [r2, #0]
 80084c2:	e6ce      	b.n	8008262 <_dtoa_r+0x94a>
 80084c4:	4b09      	ldr	r3, [pc, #36]	; (80084ec <_dtoa_r+0xbd4>)
 80084c6:	f7ff ba95 	b.w	80079f4 <_dtoa_r+0xdc>
 80084ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f47f aa6e 	bne.w	80079ae <_dtoa_r+0x96>
 80084d2:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <_dtoa_r+0xbd8>)
 80084d4:	f7ff ba8e 	b.w	80079f4 <_dtoa_r+0xdc>
 80084d8:	9b02      	ldr	r3, [sp, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	dcae      	bgt.n	800843c <_dtoa_r+0xb24>
 80084de:	9b06      	ldr	r3, [sp, #24]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	f73f aea8 	bgt.w	8008236 <_dtoa_r+0x91e>
 80084e6:	e7a9      	b.n	800843c <_dtoa_r+0xb24>
 80084e8:	0800a7c7 	.word	0x0800a7c7
 80084ec:	0800a724 	.word	0x0800a724
 80084f0:	0800a748 	.word	0x0800a748

080084f4 <__sflush_r>:
 80084f4:	898a      	ldrh	r2, [r1, #12]
 80084f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084fa:	4605      	mov	r5, r0
 80084fc:	0710      	lsls	r0, r2, #28
 80084fe:	460c      	mov	r4, r1
 8008500:	d458      	bmi.n	80085b4 <__sflush_r+0xc0>
 8008502:	684b      	ldr	r3, [r1, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	dc05      	bgt.n	8008514 <__sflush_r+0x20>
 8008508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800850a:	2b00      	cmp	r3, #0
 800850c:	dc02      	bgt.n	8008514 <__sflush_r+0x20>
 800850e:	2000      	movs	r0, #0
 8008510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008516:	2e00      	cmp	r6, #0
 8008518:	d0f9      	beq.n	800850e <__sflush_r+0x1a>
 800851a:	2300      	movs	r3, #0
 800851c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008520:	682f      	ldr	r7, [r5, #0]
 8008522:	602b      	str	r3, [r5, #0]
 8008524:	d032      	beq.n	800858c <__sflush_r+0x98>
 8008526:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	075a      	lsls	r2, r3, #29
 800852c:	d505      	bpl.n	800853a <__sflush_r+0x46>
 800852e:	6863      	ldr	r3, [r4, #4]
 8008530:	1ac0      	subs	r0, r0, r3
 8008532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008534:	b10b      	cbz	r3, 800853a <__sflush_r+0x46>
 8008536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008538:	1ac0      	subs	r0, r0, r3
 800853a:	2300      	movs	r3, #0
 800853c:	4602      	mov	r2, r0
 800853e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008540:	6a21      	ldr	r1, [r4, #32]
 8008542:	4628      	mov	r0, r5
 8008544:	47b0      	blx	r6
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	d106      	bne.n	800855a <__sflush_r+0x66>
 800854c:	6829      	ldr	r1, [r5, #0]
 800854e:	291d      	cmp	r1, #29
 8008550:	d82c      	bhi.n	80085ac <__sflush_r+0xb8>
 8008552:	4a2a      	ldr	r2, [pc, #168]	; (80085fc <__sflush_r+0x108>)
 8008554:	40ca      	lsrs	r2, r1
 8008556:	07d6      	lsls	r6, r2, #31
 8008558:	d528      	bpl.n	80085ac <__sflush_r+0xb8>
 800855a:	2200      	movs	r2, #0
 800855c:	6062      	str	r2, [r4, #4]
 800855e:	04d9      	lsls	r1, r3, #19
 8008560:	6922      	ldr	r2, [r4, #16]
 8008562:	6022      	str	r2, [r4, #0]
 8008564:	d504      	bpl.n	8008570 <__sflush_r+0x7c>
 8008566:	1c42      	adds	r2, r0, #1
 8008568:	d101      	bne.n	800856e <__sflush_r+0x7a>
 800856a:	682b      	ldr	r3, [r5, #0]
 800856c:	b903      	cbnz	r3, 8008570 <__sflush_r+0x7c>
 800856e:	6560      	str	r0, [r4, #84]	; 0x54
 8008570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008572:	602f      	str	r7, [r5, #0]
 8008574:	2900      	cmp	r1, #0
 8008576:	d0ca      	beq.n	800850e <__sflush_r+0x1a>
 8008578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800857c:	4299      	cmp	r1, r3
 800857e:	d002      	beq.n	8008586 <__sflush_r+0x92>
 8008580:	4628      	mov	r0, r5
 8008582:	f7fe fa61 	bl	8006a48 <_free_r>
 8008586:	2000      	movs	r0, #0
 8008588:	6360      	str	r0, [r4, #52]	; 0x34
 800858a:	e7c1      	b.n	8008510 <__sflush_r+0x1c>
 800858c:	6a21      	ldr	r1, [r4, #32]
 800858e:	2301      	movs	r3, #1
 8008590:	4628      	mov	r0, r5
 8008592:	47b0      	blx	r6
 8008594:	1c41      	adds	r1, r0, #1
 8008596:	d1c7      	bne.n	8008528 <__sflush_r+0x34>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0c4      	beq.n	8008528 <__sflush_r+0x34>
 800859e:	2b1d      	cmp	r3, #29
 80085a0:	d001      	beq.n	80085a6 <__sflush_r+0xb2>
 80085a2:	2b16      	cmp	r3, #22
 80085a4:	d101      	bne.n	80085aa <__sflush_r+0xb6>
 80085a6:	602f      	str	r7, [r5, #0]
 80085a8:	e7b1      	b.n	800850e <__sflush_r+0x1a>
 80085aa:	89a3      	ldrh	r3, [r4, #12]
 80085ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085b0:	81a3      	strh	r3, [r4, #12]
 80085b2:	e7ad      	b.n	8008510 <__sflush_r+0x1c>
 80085b4:	690f      	ldr	r7, [r1, #16]
 80085b6:	2f00      	cmp	r7, #0
 80085b8:	d0a9      	beq.n	800850e <__sflush_r+0x1a>
 80085ba:	0793      	lsls	r3, r2, #30
 80085bc:	680e      	ldr	r6, [r1, #0]
 80085be:	bf08      	it	eq
 80085c0:	694b      	ldreq	r3, [r1, #20]
 80085c2:	600f      	str	r7, [r1, #0]
 80085c4:	bf18      	it	ne
 80085c6:	2300      	movne	r3, #0
 80085c8:	eba6 0807 	sub.w	r8, r6, r7
 80085cc:	608b      	str	r3, [r1, #8]
 80085ce:	f1b8 0f00 	cmp.w	r8, #0
 80085d2:	dd9c      	ble.n	800850e <__sflush_r+0x1a>
 80085d4:	6a21      	ldr	r1, [r4, #32]
 80085d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085d8:	4643      	mov	r3, r8
 80085da:	463a      	mov	r2, r7
 80085dc:	4628      	mov	r0, r5
 80085de:	47b0      	blx	r6
 80085e0:	2800      	cmp	r0, #0
 80085e2:	dc06      	bgt.n	80085f2 <__sflush_r+0xfe>
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ea:	81a3      	strh	r3, [r4, #12]
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085f0:	e78e      	b.n	8008510 <__sflush_r+0x1c>
 80085f2:	4407      	add	r7, r0
 80085f4:	eba8 0800 	sub.w	r8, r8, r0
 80085f8:	e7e9      	b.n	80085ce <__sflush_r+0xda>
 80085fa:	bf00      	nop
 80085fc:	20400001 	.word	0x20400001

08008600 <_fflush_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	690b      	ldr	r3, [r1, #16]
 8008604:	4605      	mov	r5, r0
 8008606:	460c      	mov	r4, r1
 8008608:	b913      	cbnz	r3, 8008610 <_fflush_r+0x10>
 800860a:	2500      	movs	r5, #0
 800860c:	4628      	mov	r0, r5
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	b118      	cbz	r0, 800861a <_fflush_r+0x1a>
 8008612:	6983      	ldr	r3, [r0, #24]
 8008614:	b90b      	cbnz	r3, 800861a <_fflush_r+0x1a>
 8008616:	f000 f887 	bl	8008728 <__sinit>
 800861a:	4b14      	ldr	r3, [pc, #80]	; (800866c <_fflush_r+0x6c>)
 800861c:	429c      	cmp	r4, r3
 800861e:	d11b      	bne.n	8008658 <_fflush_r+0x58>
 8008620:	686c      	ldr	r4, [r5, #4]
 8008622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0ef      	beq.n	800860a <_fflush_r+0xa>
 800862a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800862c:	07d0      	lsls	r0, r2, #31
 800862e:	d404      	bmi.n	800863a <_fflush_r+0x3a>
 8008630:	0599      	lsls	r1, r3, #22
 8008632:	d402      	bmi.n	800863a <_fflush_r+0x3a>
 8008634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008636:	f000 f91a 	bl	800886e <__retarget_lock_acquire_recursive>
 800863a:	4628      	mov	r0, r5
 800863c:	4621      	mov	r1, r4
 800863e:	f7ff ff59 	bl	80084f4 <__sflush_r>
 8008642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008644:	07da      	lsls	r2, r3, #31
 8008646:	4605      	mov	r5, r0
 8008648:	d4e0      	bmi.n	800860c <_fflush_r+0xc>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	059b      	lsls	r3, r3, #22
 800864e:	d4dd      	bmi.n	800860c <_fflush_r+0xc>
 8008650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008652:	f000 f90d 	bl	8008870 <__retarget_lock_release_recursive>
 8008656:	e7d9      	b.n	800860c <_fflush_r+0xc>
 8008658:	4b05      	ldr	r3, [pc, #20]	; (8008670 <_fflush_r+0x70>)
 800865a:	429c      	cmp	r4, r3
 800865c:	d101      	bne.n	8008662 <_fflush_r+0x62>
 800865e:	68ac      	ldr	r4, [r5, #8]
 8008660:	e7df      	b.n	8008622 <_fflush_r+0x22>
 8008662:	4b04      	ldr	r3, [pc, #16]	; (8008674 <_fflush_r+0x74>)
 8008664:	429c      	cmp	r4, r3
 8008666:	bf08      	it	eq
 8008668:	68ec      	ldreq	r4, [r5, #12]
 800866a:	e7da      	b.n	8008622 <_fflush_r+0x22>
 800866c:	0800a7f8 	.word	0x0800a7f8
 8008670:	0800a818 	.word	0x0800a818
 8008674:	0800a7d8 	.word	0x0800a7d8

08008678 <std>:
 8008678:	2300      	movs	r3, #0
 800867a:	b510      	push	{r4, lr}
 800867c:	4604      	mov	r4, r0
 800867e:	e9c0 3300 	strd	r3, r3, [r0]
 8008682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008686:	6083      	str	r3, [r0, #8]
 8008688:	8181      	strh	r1, [r0, #12]
 800868a:	6643      	str	r3, [r0, #100]	; 0x64
 800868c:	81c2      	strh	r2, [r0, #14]
 800868e:	6183      	str	r3, [r0, #24]
 8008690:	4619      	mov	r1, r3
 8008692:	2208      	movs	r2, #8
 8008694:	305c      	adds	r0, #92	; 0x5c
 8008696:	f7fe f9cf 	bl	8006a38 <memset>
 800869a:	4b05      	ldr	r3, [pc, #20]	; (80086b0 <std+0x38>)
 800869c:	6263      	str	r3, [r4, #36]	; 0x24
 800869e:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <std+0x3c>)
 80086a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80086a2:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <std+0x40>)
 80086a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086a6:	4b05      	ldr	r3, [pc, #20]	; (80086bc <std+0x44>)
 80086a8:	6224      	str	r4, [r4, #32]
 80086aa:	6323      	str	r3, [r4, #48]	; 0x30
 80086ac:	bd10      	pop	{r4, pc}
 80086ae:	bf00      	nop
 80086b0:	08009611 	.word	0x08009611
 80086b4:	08009633 	.word	0x08009633
 80086b8:	0800966b 	.word	0x0800966b
 80086bc:	0800968f 	.word	0x0800968f

080086c0 <_cleanup_r>:
 80086c0:	4901      	ldr	r1, [pc, #4]	; (80086c8 <_cleanup_r+0x8>)
 80086c2:	f000 b8af 	b.w	8008824 <_fwalk_reent>
 80086c6:	bf00      	nop
 80086c8:	08008601 	.word	0x08008601

080086cc <__sfmoreglue>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	2268      	movs	r2, #104	; 0x68
 80086d0:	1e4d      	subs	r5, r1, #1
 80086d2:	4355      	muls	r5, r2
 80086d4:	460e      	mov	r6, r1
 80086d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086da:	f7fe fa21 	bl	8006b20 <_malloc_r>
 80086de:	4604      	mov	r4, r0
 80086e0:	b140      	cbz	r0, 80086f4 <__sfmoreglue+0x28>
 80086e2:	2100      	movs	r1, #0
 80086e4:	e9c0 1600 	strd	r1, r6, [r0]
 80086e8:	300c      	adds	r0, #12
 80086ea:	60a0      	str	r0, [r4, #8]
 80086ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086f0:	f7fe f9a2 	bl	8006a38 <memset>
 80086f4:	4620      	mov	r0, r4
 80086f6:	bd70      	pop	{r4, r5, r6, pc}

080086f8 <__sfp_lock_acquire>:
 80086f8:	4801      	ldr	r0, [pc, #4]	; (8008700 <__sfp_lock_acquire+0x8>)
 80086fa:	f000 b8b8 	b.w	800886e <__retarget_lock_acquire_recursive>
 80086fe:	bf00      	nop
 8008700:	2000252d 	.word	0x2000252d

08008704 <__sfp_lock_release>:
 8008704:	4801      	ldr	r0, [pc, #4]	; (800870c <__sfp_lock_release+0x8>)
 8008706:	f000 b8b3 	b.w	8008870 <__retarget_lock_release_recursive>
 800870a:	bf00      	nop
 800870c:	2000252d 	.word	0x2000252d

08008710 <__sinit_lock_acquire>:
 8008710:	4801      	ldr	r0, [pc, #4]	; (8008718 <__sinit_lock_acquire+0x8>)
 8008712:	f000 b8ac 	b.w	800886e <__retarget_lock_acquire_recursive>
 8008716:	bf00      	nop
 8008718:	2000252e 	.word	0x2000252e

0800871c <__sinit_lock_release>:
 800871c:	4801      	ldr	r0, [pc, #4]	; (8008724 <__sinit_lock_release+0x8>)
 800871e:	f000 b8a7 	b.w	8008870 <__retarget_lock_release_recursive>
 8008722:	bf00      	nop
 8008724:	2000252e 	.word	0x2000252e

08008728 <__sinit>:
 8008728:	b510      	push	{r4, lr}
 800872a:	4604      	mov	r4, r0
 800872c:	f7ff fff0 	bl	8008710 <__sinit_lock_acquire>
 8008730:	69a3      	ldr	r3, [r4, #24]
 8008732:	b11b      	cbz	r3, 800873c <__sinit+0x14>
 8008734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008738:	f7ff bff0 	b.w	800871c <__sinit_lock_release>
 800873c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008740:	6523      	str	r3, [r4, #80]	; 0x50
 8008742:	4b13      	ldr	r3, [pc, #76]	; (8008790 <__sinit+0x68>)
 8008744:	4a13      	ldr	r2, [pc, #76]	; (8008794 <__sinit+0x6c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	62a2      	str	r2, [r4, #40]	; 0x28
 800874a:	42a3      	cmp	r3, r4
 800874c:	bf04      	itt	eq
 800874e:	2301      	moveq	r3, #1
 8008750:	61a3      	streq	r3, [r4, #24]
 8008752:	4620      	mov	r0, r4
 8008754:	f000 f820 	bl	8008798 <__sfp>
 8008758:	6060      	str	r0, [r4, #4]
 800875a:	4620      	mov	r0, r4
 800875c:	f000 f81c 	bl	8008798 <__sfp>
 8008760:	60a0      	str	r0, [r4, #8]
 8008762:	4620      	mov	r0, r4
 8008764:	f000 f818 	bl	8008798 <__sfp>
 8008768:	2200      	movs	r2, #0
 800876a:	60e0      	str	r0, [r4, #12]
 800876c:	2104      	movs	r1, #4
 800876e:	6860      	ldr	r0, [r4, #4]
 8008770:	f7ff ff82 	bl	8008678 <std>
 8008774:	68a0      	ldr	r0, [r4, #8]
 8008776:	2201      	movs	r2, #1
 8008778:	2109      	movs	r1, #9
 800877a:	f7ff ff7d 	bl	8008678 <std>
 800877e:	68e0      	ldr	r0, [r4, #12]
 8008780:	2202      	movs	r2, #2
 8008782:	2112      	movs	r1, #18
 8008784:	f7ff ff78 	bl	8008678 <std>
 8008788:	2301      	movs	r3, #1
 800878a:	61a3      	str	r3, [r4, #24]
 800878c:	e7d2      	b.n	8008734 <__sinit+0xc>
 800878e:	bf00      	nop
 8008790:	0800a710 	.word	0x0800a710
 8008794:	080086c1 	.word	0x080086c1

08008798 <__sfp>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	4607      	mov	r7, r0
 800879c:	f7ff ffac 	bl	80086f8 <__sfp_lock_acquire>
 80087a0:	4b1e      	ldr	r3, [pc, #120]	; (800881c <__sfp+0x84>)
 80087a2:	681e      	ldr	r6, [r3, #0]
 80087a4:	69b3      	ldr	r3, [r6, #24]
 80087a6:	b913      	cbnz	r3, 80087ae <__sfp+0x16>
 80087a8:	4630      	mov	r0, r6
 80087aa:	f7ff ffbd 	bl	8008728 <__sinit>
 80087ae:	3648      	adds	r6, #72	; 0x48
 80087b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	d503      	bpl.n	80087c0 <__sfp+0x28>
 80087b8:	6833      	ldr	r3, [r6, #0]
 80087ba:	b30b      	cbz	r3, 8008800 <__sfp+0x68>
 80087bc:	6836      	ldr	r6, [r6, #0]
 80087be:	e7f7      	b.n	80087b0 <__sfp+0x18>
 80087c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087c4:	b9d5      	cbnz	r5, 80087fc <__sfp+0x64>
 80087c6:	4b16      	ldr	r3, [pc, #88]	; (8008820 <__sfp+0x88>)
 80087c8:	60e3      	str	r3, [r4, #12]
 80087ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087ce:	6665      	str	r5, [r4, #100]	; 0x64
 80087d0:	f000 f84c 	bl	800886c <__retarget_lock_init_recursive>
 80087d4:	f7ff ff96 	bl	8008704 <__sfp_lock_release>
 80087d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087e0:	6025      	str	r5, [r4, #0]
 80087e2:	61a5      	str	r5, [r4, #24]
 80087e4:	2208      	movs	r2, #8
 80087e6:	4629      	mov	r1, r5
 80087e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087ec:	f7fe f924 	bl	8006a38 <memset>
 80087f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087f8:	4620      	mov	r0, r4
 80087fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087fc:	3468      	adds	r4, #104	; 0x68
 80087fe:	e7d9      	b.n	80087b4 <__sfp+0x1c>
 8008800:	2104      	movs	r1, #4
 8008802:	4638      	mov	r0, r7
 8008804:	f7ff ff62 	bl	80086cc <__sfmoreglue>
 8008808:	4604      	mov	r4, r0
 800880a:	6030      	str	r0, [r6, #0]
 800880c:	2800      	cmp	r0, #0
 800880e:	d1d5      	bne.n	80087bc <__sfp+0x24>
 8008810:	f7ff ff78 	bl	8008704 <__sfp_lock_release>
 8008814:	230c      	movs	r3, #12
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	e7ee      	b.n	80087f8 <__sfp+0x60>
 800881a:	bf00      	nop
 800881c:	0800a710 	.word	0x0800a710
 8008820:	ffff0001 	.word	0xffff0001

08008824 <_fwalk_reent>:
 8008824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008828:	4606      	mov	r6, r0
 800882a:	4688      	mov	r8, r1
 800882c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008830:	2700      	movs	r7, #0
 8008832:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008836:	f1b9 0901 	subs.w	r9, r9, #1
 800883a:	d505      	bpl.n	8008848 <_fwalk_reent+0x24>
 800883c:	6824      	ldr	r4, [r4, #0]
 800883e:	2c00      	cmp	r4, #0
 8008840:	d1f7      	bne.n	8008832 <_fwalk_reent+0xe>
 8008842:	4638      	mov	r0, r7
 8008844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008848:	89ab      	ldrh	r3, [r5, #12]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d907      	bls.n	800885e <_fwalk_reent+0x3a>
 800884e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008852:	3301      	adds	r3, #1
 8008854:	d003      	beq.n	800885e <_fwalk_reent+0x3a>
 8008856:	4629      	mov	r1, r5
 8008858:	4630      	mov	r0, r6
 800885a:	47c0      	blx	r8
 800885c:	4307      	orrs	r7, r0
 800885e:	3568      	adds	r5, #104	; 0x68
 8008860:	e7e9      	b.n	8008836 <_fwalk_reent+0x12>
	...

08008864 <_localeconv_r>:
 8008864:	4800      	ldr	r0, [pc, #0]	; (8008868 <_localeconv_r+0x4>)
 8008866:	4770      	bx	lr
 8008868:	20000178 	.word	0x20000178

0800886c <__retarget_lock_init_recursive>:
 800886c:	4770      	bx	lr

0800886e <__retarget_lock_acquire_recursive>:
 800886e:	4770      	bx	lr

08008870 <__retarget_lock_release_recursive>:
 8008870:	4770      	bx	lr

08008872 <__swhatbuf_r>:
 8008872:	b570      	push	{r4, r5, r6, lr}
 8008874:	460e      	mov	r6, r1
 8008876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887a:	2900      	cmp	r1, #0
 800887c:	b096      	sub	sp, #88	; 0x58
 800887e:	4614      	mov	r4, r2
 8008880:	461d      	mov	r5, r3
 8008882:	da08      	bge.n	8008896 <__swhatbuf_r+0x24>
 8008884:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	602a      	str	r2, [r5, #0]
 800888c:	061a      	lsls	r2, r3, #24
 800888e:	d410      	bmi.n	80088b2 <__swhatbuf_r+0x40>
 8008890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008894:	e00e      	b.n	80088b4 <__swhatbuf_r+0x42>
 8008896:	466a      	mov	r2, sp
 8008898:	f000 ff50 	bl	800973c <_fstat_r>
 800889c:	2800      	cmp	r0, #0
 800889e:	dbf1      	blt.n	8008884 <__swhatbuf_r+0x12>
 80088a0:	9a01      	ldr	r2, [sp, #4]
 80088a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088aa:	425a      	negs	r2, r3
 80088ac:	415a      	adcs	r2, r3
 80088ae:	602a      	str	r2, [r5, #0]
 80088b0:	e7ee      	b.n	8008890 <__swhatbuf_r+0x1e>
 80088b2:	2340      	movs	r3, #64	; 0x40
 80088b4:	2000      	movs	r0, #0
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	b016      	add	sp, #88	; 0x58
 80088ba:	bd70      	pop	{r4, r5, r6, pc}

080088bc <__smakebuf_r>:
 80088bc:	898b      	ldrh	r3, [r1, #12]
 80088be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088c0:	079d      	lsls	r5, r3, #30
 80088c2:	4606      	mov	r6, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	d507      	bpl.n	80088d8 <__smakebuf_r+0x1c>
 80088c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	2301      	movs	r3, #1
 80088d2:	6163      	str	r3, [r4, #20]
 80088d4:	b002      	add	sp, #8
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	ab01      	add	r3, sp, #4
 80088da:	466a      	mov	r2, sp
 80088dc:	f7ff ffc9 	bl	8008872 <__swhatbuf_r>
 80088e0:	9900      	ldr	r1, [sp, #0]
 80088e2:	4605      	mov	r5, r0
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7fe f91b 	bl	8006b20 <_malloc_r>
 80088ea:	b948      	cbnz	r0, 8008900 <__smakebuf_r+0x44>
 80088ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f0:	059a      	lsls	r2, r3, #22
 80088f2:	d4ef      	bmi.n	80088d4 <__smakebuf_r+0x18>
 80088f4:	f023 0303 	bic.w	r3, r3, #3
 80088f8:	f043 0302 	orr.w	r3, r3, #2
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	e7e3      	b.n	80088c8 <__smakebuf_r+0xc>
 8008900:	4b0d      	ldr	r3, [pc, #52]	; (8008938 <__smakebuf_r+0x7c>)
 8008902:	62b3      	str	r3, [r6, #40]	; 0x28
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	6020      	str	r0, [r4, #0]
 8008908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	9b00      	ldr	r3, [sp, #0]
 8008910:	6163      	str	r3, [r4, #20]
 8008912:	9b01      	ldr	r3, [sp, #4]
 8008914:	6120      	str	r0, [r4, #16]
 8008916:	b15b      	cbz	r3, 8008930 <__smakebuf_r+0x74>
 8008918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800891c:	4630      	mov	r0, r6
 800891e:	f000 ff1f 	bl	8009760 <_isatty_r>
 8008922:	b128      	cbz	r0, 8008930 <__smakebuf_r+0x74>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f023 0303 	bic.w	r3, r3, #3
 800892a:	f043 0301 	orr.w	r3, r3, #1
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	89a0      	ldrh	r0, [r4, #12]
 8008932:	4305      	orrs	r5, r0
 8008934:	81a5      	strh	r5, [r4, #12]
 8008936:	e7cd      	b.n	80088d4 <__smakebuf_r+0x18>
 8008938:	080086c1 	.word	0x080086c1

0800893c <memcpy>:
 800893c:	440a      	add	r2, r1
 800893e:	4291      	cmp	r1, r2
 8008940:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008944:	d100      	bne.n	8008948 <memcpy+0xc>
 8008946:	4770      	bx	lr
 8008948:	b510      	push	{r4, lr}
 800894a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800894e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008952:	4291      	cmp	r1, r2
 8008954:	d1f9      	bne.n	800894a <memcpy+0xe>
 8008956:	bd10      	pop	{r4, pc}

08008958 <__malloc_lock>:
 8008958:	4801      	ldr	r0, [pc, #4]	; (8008960 <__malloc_lock+0x8>)
 800895a:	f7ff bf88 	b.w	800886e <__retarget_lock_acquire_recursive>
 800895e:	bf00      	nop
 8008960:	2000252c 	.word	0x2000252c

08008964 <__malloc_unlock>:
 8008964:	4801      	ldr	r0, [pc, #4]	; (800896c <__malloc_unlock+0x8>)
 8008966:	f7ff bf83 	b.w	8008870 <__retarget_lock_release_recursive>
 800896a:	bf00      	nop
 800896c:	2000252c 	.word	0x2000252c

08008970 <_Balloc>:
 8008970:	b570      	push	{r4, r5, r6, lr}
 8008972:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008974:	4604      	mov	r4, r0
 8008976:	460d      	mov	r5, r1
 8008978:	b976      	cbnz	r6, 8008998 <_Balloc+0x28>
 800897a:	2010      	movs	r0, #16
 800897c:	f7fe f84c 	bl	8006a18 <malloc>
 8008980:	4602      	mov	r2, r0
 8008982:	6260      	str	r0, [r4, #36]	; 0x24
 8008984:	b920      	cbnz	r0, 8008990 <_Balloc+0x20>
 8008986:	4b18      	ldr	r3, [pc, #96]	; (80089e8 <_Balloc+0x78>)
 8008988:	4818      	ldr	r0, [pc, #96]	; (80089ec <_Balloc+0x7c>)
 800898a:	2166      	movs	r1, #102	; 0x66
 800898c:	f000 fe96 	bl	80096bc <__assert_func>
 8008990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008994:	6006      	str	r6, [r0, #0]
 8008996:	60c6      	str	r6, [r0, #12]
 8008998:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800899a:	68f3      	ldr	r3, [r6, #12]
 800899c:	b183      	cbz	r3, 80089c0 <_Balloc+0x50>
 800899e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089a6:	b9b8      	cbnz	r0, 80089d8 <_Balloc+0x68>
 80089a8:	2101      	movs	r1, #1
 80089aa:	fa01 f605 	lsl.w	r6, r1, r5
 80089ae:	1d72      	adds	r2, r6, #5
 80089b0:	0092      	lsls	r2, r2, #2
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 fb60 	bl	8009078 <_calloc_r>
 80089b8:	b160      	cbz	r0, 80089d4 <_Balloc+0x64>
 80089ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089be:	e00e      	b.n	80089de <_Balloc+0x6e>
 80089c0:	2221      	movs	r2, #33	; 0x21
 80089c2:	2104      	movs	r1, #4
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 fb57 	bl	8009078 <_calloc_r>
 80089ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089cc:	60f0      	str	r0, [r6, #12]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e4      	bne.n	800899e <_Balloc+0x2e>
 80089d4:	2000      	movs	r0, #0
 80089d6:	bd70      	pop	{r4, r5, r6, pc}
 80089d8:	6802      	ldr	r2, [r0, #0]
 80089da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089de:	2300      	movs	r3, #0
 80089e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089e4:	e7f7      	b.n	80089d6 <_Balloc+0x66>
 80089e6:	bf00      	nop
 80089e8:	0800a755 	.word	0x0800a755
 80089ec:	0800a838 	.word	0x0800a838

080089f0 <_Bfree>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089f4:	4605      	mov	r5, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	b976      	cbnz	r6, 8008a18 <_Bfree+0x28>
 80089fa:	2010      	movs	r0, #16
 80089fc:	f7fe f80c 	bl	8006a18 <malloc>
 8008a00:	4602      	mov	r2, r0
 8008a02:	6268      	str	r0, [r5, #36]	; 0x24
 8008a04:	b920      	cbnz	r0, 8008a10 <_Bfree+0x20>
 8008a06:	4b09      	ldr	r3, [pc, #36]	; (8008a2c <_Bfree+0x3c>)
 8008a08:	4809      	ldr	r0, [pc, #36]	; (8008a30 <_Bfree+0x40>)
 8008a0a:	218a      	movs	r1, #138	; 0x8a
 8008a0c:	f000 fe56 	bl	80096bc <__assert_func>
 8008a10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a14:	6006      	str	r6, [r0, #0]
 8008a16:	60c6      	str	r6, [r0, #12]
 8008a18:	b13c      	cbz	r4, 8008a2a <_Bfree+0x3a>
 8008a1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a1c:	6862      	ldr	r2, [r4, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a24:	6021      	str	r1, [r4, #0]
 8008a26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a2a:	bd70      	pop	{r4, r5, r6, pc}
 8008a2c:	0800a755 	.word	0x0800a755
 8008a30:	0800a838 	.word	0x0800a838

08008a34 <__multadd>:
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	690d      	ldr	r5, [r1, #16]
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	461e      	mov	r6, r3
 8008a40:	f101 0c14 	add.w	ip, r1, #20
 8008a44:	2000      	movs	r0, #0
 8008a46:	f8dc 3000 	ldr.w	r3, [ip]
 8008a4a:	b299      	uxth	r1, r3
 8008a4c:	fb02 6101 	mla	r1, r2, r1, r6
 8008a50:	0c1e      	lsrs	r6, r3, #16
 8008a52:	0c0b      	lsrs	r3, r1, #16
 8008a54:	fb02 3306 	mla	r3, r2, r6, r3
 8008a58:	b289      	uxth	r1, r1
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a60:	4285      	cmp	r5, r0
 8008a62:	f84c 1b04 	str.w	r1, [ip], #4
 8008a66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a6a:	dcec      	bgt.n	8008a46 <__multadd+0x12>
 8008a6c:	b30e      	cbz	r6, 8008ab2 <__multadd+0x7e>
 8008a6e:	68a3      	ldr	r3, [r4, #8]
 8008a70:	42ab      	cmp	r3, r5
 8008a72:	dc19      	bgt.n	8008aa8 <__multadd+0x74>
 8008a74:	6861      	ldr	r1, [r4, #4]
 8008a76:	4638      	mov	r0, r7
 8008a78:	3101      	adds	r1, #1
 8008a7a:	f7ff ff79 	bl	8008970 <_Balloc>
 8008a7e:	4680      	mov	r8, r0
 8008a80:	b928      	cbnz	r0, 8008a8e <__multadd+0x5a>
 8008a82:	4602      	mov	r2, r0
 8008a84:	4b0c      	ldr	r3, [pc, #48]	; (8008ab8 <__multadd+0x84>)
 8008a86:	480d      	ldr	r0, [pc, #52]	; (8008abc <__multadd+0x88>)
 8008a88:	21b5      	movs	r1, #181	; 0xb5
 8008a8a:	f000 fe17 	bl	80096bc <__assert_func>
 8008a8e:	6922      	ldr	r2, [r4, #16]
 8008a90:	3202      	adds	r2, #2
 8008a92:	f104 010c 	add.w	r1, r4, #12
 8008a96:	0092      	lsls	r2, r2, #2
 8008a98:	300c      	adds	r0, #12
 8008a9a:	f7ff ff4f 	bl	800893c <memcpy>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f7ff ffa5 	bl	80089f0 <_Bfree>
 8008aa6:	4644      	mov	r4, r8
 8008aa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008aac:	3501      	adds	r5, #1
 8008aae:	615e      	str	r6, [r3, #20]
 8008ab0:	6125      	str	r5, [r4, #16]
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab8:	0800a7c7 	.word	0x0800a7c7
 8008abc:	0800a838 	.word	0x0800a838

08008ac0 <__hi0bits>:
 8008ac0:	0c03      	lsrs	r3, r0, #16
 8008ac2:	041b      	lsls	r3, r3, #16
 8008ac4:	b9d3      	cbnz	r3, 8008afc <__hi0bits+0x3c>
 8008ac6:	0400      	lsls	r0, r0, #16
 8008ac8:	2310      	movs	r3, #16
 8008aca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ace:	bf04      	itt	eq
 8008ad0:	0200      	lsleq	r0, r0, #8
 8008ad2:	3308      	addeq	r3, #8
 8008ad4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ad8:	bf04      	itt	eq
 8008ada:	0100      	lsleq	r0, r0, #4
 8008adc:	3304      	addeq	r3, #4
 8008ade:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ae2:	bf04      	itt	eq
 8008ae4:	0080      	lsleq	r0, r0, #2
 8008ae6:	3302      	addeq	r3, #2
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	db05      	blt.n	8008af8 <__hi0bits+0x38>
 8008aec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008af0:	f103 0301 	add.w	r3, r3, #1
 8008af4:	bf08      	it	eq
 8008af6:	2320      	moveq	r3, #32
 8008af8:	4618      	mov	r0, r3
 8008afa:	4770      	bx	lr
 8008afc:	2300      	movs	r3, #0
 8008afe:	e7e4      	b.n	8008aca <__hi0bits+0xa>

08008b00 <__lo0bits>:
 8008b00:	6803      	ldr	r3, [r0, #0]
 8008b02:	f013 0207 	ands.w	r2, r3, #7
 8008b06:	4601      	mov	r1, r0
 8008b08:	d00b      	beq.n	8008b22 <__lo0bits+0x22>
 8008b0a:	07da      	lsls	r2, r3, #31
 8008b0c:	d423      	bmi.n	8008b56 <__lo0bits+0x56>
 8008b0e:	0798      	lsls	r0, r3, #30
 8008b10:	bf49      	itett	mi
 8008b12:	085b      	lsrmi	r3, r3, #1
 8008b14:	089b      	lsrpl	r3, r3, #2
 8008b16:	2001      	movmi	r0, #1
 8008b18:	600b      	strmi	r3, [r1, #0]
 8008b1a:	bf5c      	itt	pl
 8008b1c:	600b      	strpl	r3, [r1, #0]
 8008b1e:	2002      	movpl	r0, #2
 8008b20:	4770      	bx	lr
 8008b22:	b298      	uxth	r0, r3
 8008b24:	b9a8      	cbnz	r0, 8008b52 <__lo0bits+0x52>
 8008b26:	0c1b      	lsrs	r3, r3, #16
 8008b28:	2010      	movs	r0, #16
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	b90a      	cbnz	r2, 8008b32 <__lo0bits+0x32>
 8008b2e:	3008      	adds	r0, #8
 8008b30:	0a1b      	lsrs	r3, r3, #8
 8008b32:	071a      	lsls	r2, r3, #28
 8008b34:	bf04      	itt	eq
 8008b36:	091b      	lsreq	r3, r3, #4
 8008b38:	3004      	addeq	r0, #4
 8008b3a:	079a      	lsls	r2, r3, #30
 8008b3c:	bf04      	itt	eq
 8008b3e:	089b      	lsreq	r3, r3, #2
 8008b40:	3002      	addeq	r0, #2
 8008b42:	07da      	lsls	r2, r3, #31
 8008b44:	d403      	bmi.n	8008b4e <__lo0bits+0x4e>
 8008b46:	085b      	lsrs	r3, r3, #1
 8008b48:	f100 0001 	add.w	r0, r0, #1
 8008b4c:	d005      	beq.n	8008b5a <__lo0bits+0x5a>
 8008b4e:	600b      	str	r3, [r1, #0]
 8008b50:	4770      	bx	lr
 8008b52:	4610      	mov	r0, r2
 8008b54:	e7e9      	b.n	8008b2a <__lo0bits+0x2a>
 8008b56:	2000      	movs	r0, #0
 8008b58:	4770      	bx	lr
 8008b5a:	2020      	movs	r0, #32
 8008b5c:	4770      	bx	lr
	...

08008b60 <__i2b>:
 8008b60:	b510      	push	{r4, lr}
 8008b62:	460c      	mov	r4, r1
 8008b64:	2101      	movs	r1, #1
 8008b66:	f7ff ff03 	bl	8008970 <_Balloc>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	b928      	cbnz	r0, 8008b7a <__i2b+0x1a>
 8008b6e:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <__i2b+0x24>)
 8008b70:	4805      	ldr	r0, [pc, #20]	; (8008b88 <__i2b+0x28>)
 8008b72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b76:	f000 fda1 	bl	80096bc <__assert_func>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	6144      	str	r4, [r0, #20]
 8008b7e:	6103      	str	r3, [r0, #16]
 8008b80:	bd10      	pop	{r4, pc}
 8008b82:	bf00      	nop
 8008b84:	0800a7c7 	.word	0x0800a7c7
 8008b88:	0800a838 	.word	0x0800a838

08008b8c <__multiply>:
 8008b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b90:	4691      	mov	r9, r2
 8008b92:	690a      	ldr	r2, [r1, #16]
 8008b94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	bfb8      	it	lt
 8008b9c:	460b      	movlt	r3, r1
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	bfbc      	itt	lt
 8008ba2:	464c      	movlt	r4, r9
 8008ba4:	4699      	movlt	r9, r3
 8008ba6:	6927      	ldr	r7, [r4, #16]
 8008ba8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bac:	68a3      	ldr	r3, [r4, #8]
 8008bae:	6861      	ldr	r1, [r4, #4]
 8008bb0:	eb07 060a 	add.w	r6, r7, sl
 8008bb4:	42b3      	cmp	r3, r6
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	bfb8      	it	lt
 8008bba:	3101      	addlt	r1, #1
 8008bbc:	f7ff fed8 	bl	8008970 <_Balloc>
 8008bc0:	b930      	cbnz	r0, 8008bd0 <__multiply+0x44>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	4b44      	ldr	r3, [pc, #272]	; (8008cd8 <__multiply+0x14c>)
 8008bc6:	4845      	ldr	r0, [pc, #276]	; (8008cdc <__multiply+0x150>)
 8008bc8:	f240 115d 	movw	r1, #349	; 0x15d
 8008bcc:	f000 fd76 	bl	80096bc <__assert_func>
 8008bd0:	f100 0514 	add.w	r5, r0, #20
 8008bd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008bd8:	462b      	mov	r3, r5
 8008bda:	2200      	movs	r2, #0
 8008bdc:	4543      	cmp	r3, r8
 8008bde:	d321      	bcc.n	8008c24 <__multiply+0x98>
 8008be0:	f104 0314 	add.w	r3, r4, #20
 8008be4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008be8:	f109 0314 	add.w	r3, r9, #20
 8008bec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008bf0:	9202      	str	r2, [sp, #8]
 8008bf2:	1b3a      	subs	r2, r7, r4
 8008bf4:	3a15      	subs	r2, #21
 8008bf6:	f022 0203 	bic.w	r2, r2, #3
 8008bfa:	3204      	adds	r2, #4
 8008bfc:	f104 0115 	add.w	r1, r4, #21
 8008c00:	428f      	cmp	r7, r1
 8008c02:	bf38      	it	cc
 8008c04:	2204      	movcc	r2, #4
 8008c06:	9201      	str	r2, [sp, #4]
 8008c08:	9a02      	ldr	r2, [sp, #8]
 8008c0a:	9303      	str	r3, [sp, #12]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d80c      	bhi.n	8008c2a <__multiply+0x9e>
 8008c10:	2e00      	cmp	r6, #0
 8008c12:	dd03      	ble.n	8008c1c <__multiply+0x90>
 8008c14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d05a      	beq.n	8008cd2 <__multiply+0x146>
 8008c1c:	6106      	str	r6, [r0, #16]
 8008c1e:	b005      	add	sp, #20
 8008c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c24:	f843 2b04 	str.w	r2, [r3], #4
 8008c28:	e7d8      	b.n	8008bdc <__multiply+0x50>
 8008c2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c2e:	f1ba 0f00 	cmp.w	sl, #0
 8008c32:	d024      	beq.n	8008c7e <__multiply+0xf2>
 8008c34:	f104 0e14 	add.w	lr, r4, #20
 8008c38:	46a9      	mov	r9, r5
 8008c3a:	f04f 0c00 	mov.w	ip, #0
 8008c3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c42:	f8d9 1000 	ldr.w	r1, [r9]
 8008c46:	fa1f fb82 	uxth.w	fp, r2
 8008c4a:	b289      	uxth	r1, r1
 8008c4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c54:	f8d9 2000 	ldr.w	r2, [r9]
 8008c58:	4461      	add	r1, ip
 8008c5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c66:	b289      	uxth	r1, r1
 8008c68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c6c:	4577      	cmp	r7, lr
 8008c6e:	f849 1b04 	str.w	r1, [r9], #4
 8008c72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c76:	d8e2      	bhi.n	8008c3e <__multiply+0xb2>
 8008c78:	9a01      	ldr	r2, [sp, #4]
 8008c7a:	f845 c002 	str.w	ip, [r5, r2]
 8008c7e:	9a03      	ldr	r2, [sp, #12]
 8008c80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c84:	3304      	adds	r3, #4
 8008c86:	f1b9 0f00 	cmp.w	r9, #0
 8008c8a:	d020      	beq.n	8008cce <__multiply+0x142>
 8008c8c:	6829      	ldr	r1, [r5, #0]
 8008c8e:	f104 0c14 	add.w	ip, r4, #20
 8008c92:	46ae      	mov	lr, r5
 8008c94:	f04f 0a00 	mov.w	sl, #0
 8008c98:	f8bc b000 	ldrh.w	fp, [ip]
 8008c9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ca0:	fb09 220b 	mla	r2, r9, fp, r2
 8008ca4:	4492      	add	sl, r2
 8008ca6:	b289      	uxth	r1, r1
 8008ca8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008cac:	f84e 1b04 	str.w	r1, [lr], #4
 8008cb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008cb4:	f8be 1000 	ldrh.w	r1, [lr]
 8008cb8:	0c12      	lsrs	r2, r2, #16
 8008cba:	fb09 1102 	mla	r1, r9, r2, r1
 8008cbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008cc2:	4567      	cmp	r7, ip
 8008cc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cc8:	d8e6      	bhi.n	8008c98 <__multiply+0x10c>
 8008cca:	9a01      	ldr	r2, [sp, #4]
 8008ccc:	50a9      	str	r1, [r5, r2]
 8008cce:	3504      	adds	r5, #4
 8008cd0:	e79a      	b.n	8008c08 <__multiply+0x7c>
 8008cd2:	3e01      	subs	r6, #1
 8008cd4:	e79c      	b.n	8008c10 <__multiply+0x84>
 8008cd6:	bf00      	nop
 8008cd8:	0800a7c7 	.word	0x0800a7c7
 8008cdc:	0800a838 	.word	0x0800a838

08008ce0 <__pow5mult>:
 8008ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce4:	4615      	mov	r5, r2
 8008ce6:	f012 0203 	ands.w	r2, r2, #3
 8008cea:	4606      	mov	r6, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	d007      	beq.n	8008d00 <__pow5mult+0x20>
 8008cf0:	4c25      	ldr	r4, [pc, #148]	; (8008d88 <__pow5mult+0xa8>)
 8008cf2:	3a01      	subs	r2, #1
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cfa:	f7ff fe9b 	bl	8008a34 <__multadd>
 8008cfe:	4607      	mov	r7, r0
 8008d00:	10ad      	asrs	r5, r5, #2
 8008d02:	d03d      	beq.n	8008d80 <__pow5mult+0xa0>
 8008d04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d06:	b97c      	cbnz	r4, 8008d28 <__pow5mult+0x48>
 8008d08:	2010      	movs	r0, #16
 8008d0a:	f7fd fe85 	bl	8006a18 <malloc>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	6270      	str	r0, [r6, #36]	; 0x24
 8008d12:	b928      	cbnz	r0, 8008d20 <__pow5mult+0x40>
 8008d14:	4b1d      	ldr	r3, [pc, #116]	; (8008d8c <__pow5mult+0xac>)
 8008d16:	481e      	ldr	r0, [pc, #120]	; (8008d90 <__pow5mult+0xb0>)
 8008d18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d1c:	f000 fcce 	bl	80096bc <__assert_func>
 8008d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d24:	6004      	str	r4, [r0, #0]
 8008d26:	60c4      	str	r4, [r0, #12]
 8008d28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d30:	b94c      	cbnz	r4, 8008d46 <__pow5mult+0x66>
 8008d32:	f240 2171 	movw	r1, #625	; 0x271
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7ff ff12 	bl	8008b60 <__i2b>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d42:	4604      	mov	r4, r0
 8008d44:	6003      	str	r3, [r0, #0]
 8008d46:	f04f 0900 	mov.w	r9, #0
 8008d4a:	07eb      	lsls	r3, r5, #31
 8008d4c:	d50a      	bpl.n	8008d64 <__pow5mult+0x84>
 8008d4e:	4639      	mov	r1, r7
 8008d50:	4622      	mov	r2, r4
 8008d52:	4630      	mov	r0, r6
 8008d54:	f7ff ff1a 	bl	8008b8c <__multiply>
 8008d58:	4639      	mov	r1, r7
 8008d5a:	4680      	mov	r8, r0
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7ff fe47 	bl	80089f0 <_Bfree>
 8008d62:	4647      	mov	r7, r8
 8008d64:	106d      	asrs	r5, r5, #1
 8008d66:	d00b      	beq.n	8008d80 <__pow5mult+0xa0>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	b938      	cbnz	r0, 8008d7c <__pow5mult+0x9c>
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7ff ff0b 	bl	8008b8c <__multiply>
 8008d76:	6020      	str	r0, [r4, #0]
 8008d78:	f8c0 9000 	str.w	r9, [r0]
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	e7e4      	b.n	8008d4a <__pow5mult+0x6a>
 8008d80:	4638      	mov	r0, r7
 8008d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d86:	bf00      	nop
 8008d88:	0800a988 	.word	0x0800a988
 8008d8c:	0800a755 	.word	0x0800a755
 8008d90:	0800a838 	.word	0x0800a838

08008d94 <__lshift>:
 8008d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d98:	460c      	mov	r4, r1
 8008d9a:	6849      	ldr	r1, [r1, #4]
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008da2:	68a3      	ldr	r3, [r4, #8]
 8008da4:	4607      	mov	r7, r0
 8008da6:	4691      	mov	r9, r2
 8008da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008dac:	f108 0601 	add.w	r6, r8, #1
 8008db0:	42b3      	cmp	r3, r6
 8008db2:	db0b      	blt.n	8008dcc <__lshift+0x38>
 8008db4:	4638      	mov	r0, r7
 8008db6:	f7ff fddb 	bl	8008970 <_Balloc>
 8008dba:	4605      	mov	r5, r0
 8008dbc:	b948      	cbnz	r0, 8008dd2 <__lshift+0x3e>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	4b2a      	ldr	r3, [pc, #168]	; (8008e6c <__lshift+0xd8>)
 8008dc2:	482b      	ldr	r0, [pc, #172]	; (8008e70 <__lshift+0xdc>)
 8008dc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008dc8:	f000 fc78 	bl	80096bc <__assert_func>
 8008dcc:	3101      	adds	r1, #1
 8008dce:	005b      	lsls	r3, r3, #1
 8008dd0:	e7ee      	b.n	8008db0 <__lshift+0x1c>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f100 0114 	add.w	r1, r0, #20
 8008dd8:	f100 0210 	add.w	r2, r0, #16
 8008ddc:	4618      	mov	r0, r3
 8008dde:	4553      	cmp	r3, sl
 8008de0:	db37      	blt.n	8008e52 <__lshift+0xbe>
 8008de2:	6920      	ldr	r0, [r4, #16]
 8008de4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008de8:	f104 0314 	add.w	r3, r4, #20
 8008dec:	f019 091f 	ands.w	r9, r9, #31
 8008df0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008df4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008df8:	d02f      	beq.n	8008e5a <__lshift+0xc6>
 8008dfa:	f1c9 0e20 	rsb	lr, r9, #32
 8008dfe:	468a      	mov	sl, r1
 8008e00:	f04f 0c00 	mov.w	ip, #0
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	fa02 f209 	lsl.w	r2, r2, r9
 8008e0a:	ea42 020c 	orr.w	r2, r2, ip
 8008e0e:	f84a 2b04 	str.w	r2, [sl], #4
 8008e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e16:	4298      	cmp	r0, r3
 8008e18:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008e1c:	d8f2      	bhi.n	8008e04 <__lshift+0x70>
 8008e1e:	1b03      	subs	r3, r0, r4
 8008e20:	3b15      	subs	r3, #21
 8008e22:	f023 0303 	bic.w	r3, r3, #3
 8008e26:	3304      	adds	r3, #4
 8008e28:	f104 0215 	add.w	r2, r4, #21
 8008e2c:	4290      	cmp	r0, r2
 8008e2e:	bf38      	it	cc
 8008e30:	2304      	movcc	r3, #4
 8008e32:	f841 c003 	str.w	ip, [r1, r3]
 8008e36:	f1bc 0f00 	cmp.w	ip, #0
 8008e3a:	d001      	beq.n	8008e40 <__lshift+0xac>
 8008e3c:	f108 0602 	add.w	r6, r8, #2
 8008e40:	3e01      	subs	r6, #1
 8008e42:	4638      	mov	r0, r7
 8008e44:	612e      	str	r6, [r5, #16]
 8008e46:	4621      	mov	r1, r4
 8008e48:	f7ff fdd2 	bl	80089f0 <_Bfree>
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e52:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e56:	3301      	adds	r3, #1
 8008e58:	e7c1      	b.n	8008dde <__lshift+0x4a>
 8008e5a:	3904      	subs	r1, #4
 8008e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e60:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e64:	4298      	cmp	r0, r3
 8008e66:	d8f9      	bhi.n	8008e5c <__lshift+0xc8>
 8008e68:	e7ea      	b.n	8008e40 <__lshift+0xac>
 8008e6a:	bf00      	nop
 8008e6c:	0800a7c7 	.word	0x0800a7c7
 8008e70:	0800a838 	.word	0x0800a838

08008e74 <__mcmp>:
 8008e74:	b530      	push	{r4, r5, lr}
 8008e76:	6902      	ldr	r2, [r0, #16]
 8008e78:	690c      	ldr	r4, [r1, #16]
 8008e7a:	1b12      	subs	r2, r2, r4
 8008e7c:	d10e      	bne.n	8008e9c <__mcmp+0x28>
 8008e7e:	f100 0314 	add.w	r3, r0, #20
 8008e82:	3114      	adds	r1, #20
 8008e84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e94:	42a5      	cmp	r5, r4
 8008e96:	d003      	beq.n	8008ea0 <__mcmp+0x2c>
 8008e98:	d305      	bcc.n	8008ea6 <__mcmp+0x32>
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	bd30      	pop	{r4, r5, pc}
 8008ea0:	4283      	cmp	r3, r0
 8008ea2:	d3f3      	bcc.n	8008e8c <__mcmp+0x18>
 8008ea4:	e7fa      	b.n	8008e9c <__mcmp+0x28>
 8008ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eaa:	e7f7      	b.n	8008e9c <__mcmp+0x28>

08008eac <__mdiff>:
 8008eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	4606      	mov	r6, r0
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	4690      	mov	r8, r2
 8008eba:	f7ff ffdb 	bl	8008e74 <__mcmp>
 8008ebe:	1e05      	subs	r5, r0, #0
 8008ec0:	d110      	bne.n	8008ee4 <__mdiff+0x38>
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f7ff fd53 	bl	8008970 <_Balloc>
 8008eca:	b930      	cbnz	r0, 8008eda <__mdiff+0x2e>
 8008ecc:	4b3a      	ldr	r3, [pc, #232]	; (8008fb8 <__mdiff+0x10c>)
 8008ece:	4602      	mov	r2, r0
 8008ed0:	f240 2132 	movw	r1, #562	; 0x232
 8008ed4:	4839      	ldr	r0, [pc, #228]	; (8008fbc <__mdiff+0x110>)
 8008ed6:	f000 fbf1 	bl	80096bc <__assert_func>
 8008eda:	2301      	movs	r3, #1
 8008edc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee4:	bfa4      	itt	ge
 8008ee6:	4643      	movge	r3, r8
 8008ee8:	46a0      	movge	r8, r4
 8008eea:	4630      	mov	r0, r6
 8008eec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ef0:	bfa6      	itte	ge
 8008ef2:	461c      	movge	r4, r3
 8008ef4:	2500      	movge	r5, #0
 8008ef6:	2501      	movlt	r5, #1
 8008ef8:	f7ff fd3a 	bl	8008970 <_Balloc>
 8008efc:	b920      	cbnz	r0, 8008f08 <__mdiff+0x5c>
 8008efe:	4b2e      	ldr	r3, [pc, #184]	; (8008fb8 <__mdiff+0x10c>)
 8008f00:	4602      	mov	r2, r0
 8008f02:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f06:	e7e5      	b.n	8008ed4 <__mdiff+0x28>
 8008f08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f0c:	6926      	ldr	r6, [r4, #16]
 8008f0e:	60c5      	str	r5, [r0, #12]
 8008f10:	f104 0914 	add.w	r9, r4, #20
 8008f14:	f108 0514 	add.w	r5, r8, #20
 8008f18:	f100 0e14 	add.w	lr, r0, #20
 8008f1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f24:	f108 0210 	add.w	r2, r8, #16
 8008f28:	46f2      	mov	sl, lr
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f34:	fa1f f883 	uxth.w	r8, r3
 8008f38:	fa11 f18b 	uxtah	r1, r1, fp
 8008f3c:	0c1b      	lsrs	r3, r3, #16
 8008f3e:	eba1 0808 	sub.w	r8, r1, r8
 8008f42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f4a:	fa1f f888 	uxth.w	r8, r8
 8008f4e:	1419      	asrs	r1, r3, #16
 8008f50:	454e      	cmp	r6, r9
 8008f52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f56:	f84a 3b04 	str.w	r3, [sl], #4
 8008f5a:	d8e7      	bhi.n	8008f2c <__mdiff+0x80>
 8008f5c:	1b33      	subs	r3, r6, r4
 8008f5e:	3b15      	subs	r3, #21
 8008f60:	f023 0303 	bic.w	r3, r3, #3
 8008f64:	3304      	adds	r3, #4
 8008f66:	3415      	adds	r4, #21
 8008f68:	42a6      	cmp	r6, r4
 8008f6a:	bf38      	it	cc
 8008f6c:	2304      	movcc	r3, #4
 8008f6e:	441d      	add	r5, r3
 8008f70:	4473      	add	r3, lr
 8008f72:	469e      	mov	lr, r3
 8008f74:	462e      	mov	r6, r5
 8008f76:	4566      	cmp	r6, ip
 8008f78:	d30e      	bcc.n	8008f98 <__mdiff+0xec>
 8008f7a:	f10c 0203 	add.w	r2, ip, #3
 8008f7e:	1b52      	subs	r2, r2, r5
 8008f80:	f022 0203 	bic.w	r2, r2, #3
 8008f84:	3d03      	subs	r5, #3
 8008f86:	45ac      	cmp	ip, r5
 8008f88:	bf38      	it	cc
 8008f8a:	2200      	movcc	r2, #0
 8008f8c:	441a      	add	r2, r3
 8008f8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f92:	b17b      	cbz	r3, 8008fb4 <__mdiff+0x108>
 8008f94:	6107      	str	r7, [r0, #16]
 8008f96:	e7a3      	b.n	8008ee0 <__mdiff+0x34>
 8008f98:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f9c:	fa11 f288 	uxtah	r2, r1, r8
 8008fa0:	1414      	asrs	r4, r2, #16
 8008fa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fa6:	b292      	uxth	r2, r2
 8008fa8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008fac:	f84e 2b04 	str.w	r2, [lr], #4
 8008fb0:	1421      	asrs	r1, r4, #16
 8008fb2:	e7e0      	b.n	8008f76 <__mdiff+0xca>
 8008fb4:	3f01      	subs	r7, #1
 8008fb6:	e7ea      	b.n	8008f8e <__mdiff+0xe2>
 8008fb8:	0800a7c7 	.word	0x0800a7c7
 8008fbc:	0800a838 	.word	0x0800a838

08008fc0 <__d2b>:
 8008fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fc4:	4689      	mov	r9, r1
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	ec57 6b10 	vmov	r6, r7, d0
 8008fcc:	4690      	mov	r8, r2
 8008fce:	f7ff fccf 	bl	8008970 <_Balloc>
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	b930      	cbnz	r0, 8008fe4 <__d2b+0x24>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	4b25      	ldr	r3, [pc, #148]	; (8009070 <__d2b+0xb0>)
 8008fda:	4826      	ldr	r0, [pc, #152]	; (8009074 <__d2b+0xb4>)
 8008fdc:	f240 310a 	movw	r1, #778	; 0x30a
 8008fe0:	f000 fb6c 	bl	80096bc <__assert_func>
 8008fe4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fec:	bb35      	cbnz	r5, 800903c <__d2b+0x7c>
 8008fee:	2e00      	cmp	r6, #0
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	d028      	beq.n	8009046 <__d2b+0x86>
 8008ff4:	4668      	mov	r0, sp
 8008ff6:	9600      	str	r6, [sp, #0]
 8008ff8:	f7ff fd82 	bl	8008b00 <__lo0bits>
 8008ffc:	9900      	ldr	r1, [sp, #0]
 8008ffe:	b300      	cbz	r0, 8009042 <__d2b+0x82>
 8009000:	9a01      	ldr	r2, [sp, #4]
 8009002:	f1c0 0320 	rsb	r3, r0, #32
 8009006:	fa02 f303 	lsl.w	r3, r2, r3
 800900a:	430b      	orrs	r3, r1
 800900c:	40c2      	lsrs	r2, r0
 800900e:	6163      	str	r3, [r4, #20]
 8009010:	9201      	str	r2, [sp, #4]
 8009012:	9b01      	ldr	r3, [sp, #4]
 8009014:	61a3      	str	r3, [r4, #24]
 8009016:	2b00      	cmp	r3, #0
 8009018:	bf14      	ite	ne
 800901a:	2202      	movne	r2, #2
 800901c:	2201      	moveq	r2, #1
 800901e:	6122      	str	r2, [r4, #16]
 8009020:	b1d5      	cbz	r5, 8009058 <__d2b+0x98>
 8009022:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009026:	4405      	add	r5, r0
 8009028:	f8c9 5000 	str.w	r5, [r9]
 800902c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009030:	f8c8 0000 	str.w	r0, [r8]
 8009034:	4620      	mov	r0, r4
 8009036:	b003      	add	sp, #12
 8009038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800903c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009040:	e7d5      	b.n	8008fee <__d2b+0x2e>
 8009042:	6161      	str	r1, [r4, #20]
 8009044:	e7e5      	b.n	8009012 <__d2b+0x52>
 8009046:	a801      	add	r0, sp, #4
 8009048:	f7ff fd5a 	bl	8008b00 <__lo0bits>
 800904c:	9b01      	ldr	r3, [sp, #4]
 800904e:	6163      	str	r3, [r4, #20]
 8009050:	2201      	movs	r2, #1
 8009052:	6122      	str	r2, [r4, #16]
 8009054:	3020      	adds	r0, #32
 8009056:	e7e3      	b.n	8009020 <__d2b+0x60>
 8009058:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800905c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009060:	f8c9 0000 	str.w	r0, [r9]
 8009064:	6918      	ldr	r0, [r3, #16]
 8009066:	f7ff fd2b 	bl	8008ac0 <__hi0bits>
 800906a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800906e:	e7df      	b.n	8009030 <__d2b+0x70>
 8009070:	0800a7c7 	.word	0x0800a7c7
 8009074:	0800a838 	.word	0x0800a838

08009078 <_calloc_r>:
 8009078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800907a:	fba1 2402 	umull	r2, r4, r1, r2
 800907e:	b94c      	cbnz	r4, 8009094 <_calloc_r+0x1c>
 8009080:	4611      	mov	r1, r2
 8009082:	9201      	str	r2, [sp, #4]
 8009084:	f7fd fd4c 	bl	8006b20 <_malloc_r>
 8009088:	9a01      	ldr	r2, [sp, #4]
 800908a:	4605      	mov	r5, r0
 800908c:	b930      	cbnz	r0, 800909c <_calloc_r+0x24>
 800908e:	4628      	mov	r0, r5
 8009090:	b003      	add	sp, #12
 8009092:	bd30      	pop	{r4, r5, pc}
 8009094:	220c      	movs	r2, #12
 8009096:	6002      	str	r2, [r0, #0]
 8009098:	2500      	movs	r5, #0
 800909a:	e7f8      	b.n	800908e <_calloc_r+0x16>
 800909c:	4621      	mov	r1, r4
 800909e:	f7fd fccb 	bl	8006a38 <memset>
 80090a2:	e7f4      	b.n	800908e <_calloc_r+0x16>

080090a4 <__ssputs_r>:
 80090a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a8:	688e      	ldr	r6, [r1, #8]
 80090aa:	429e      	cmp	r6, r3
 80090ac:	4682      	mov	sl, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	4690      	mov	r8, r2
 80090b2:	461f      	mov	r7, r3
 80090b4:	d838      	bhi.n	8009128 <__ssputs_r+0x84>
 80090b6:	898a      	ldrh	r2, [r1, #12]
 80090b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090bc:	d032      	beq.n	8009124 <__ssputs_r+0x80>
 80090be:	6825      	ldr	r5, [r4, #0]
 80090c0:	6909      	ldr	r1, [r1, #16]
 80090c2:	eba5 0901 	sub.w	r9, r5, r1
 80090c6:	6965      	ldr	r5, [r4, #20]
 80090c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090d0:	3301      	adds	r3, #1
 80090d2:	444b      	add	r3, r9
 80090d4:	106d      	asrs	r5, r5, #1
 80090d6:	429d      	cmp	r5, r3
 80090d8:	bf38      	it	cc
 80090da:	461d      	movcc	r5, r3
 80090dc:	0553      	lsls	r3, r2, #21
 80090de:	d531      	bpl.n	8009144 <__ssputs_r+0xa0>
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7fd fd1d 	bl	8006b20 <_malloc_r>
 80090e6:	4606      	mov	r6, r0
 80090e8:	b950      	cbnz	r0, 8009100 <__ssputs_r+0x5c>
 80090ea:	230c      	movs	r3, #12
 80090ec:	f8ca 3000 	str.w	r3, [sl]
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009100:	6921      	ldr	r1, [r4, #16]
 8009102:	464a      	mov	r2, r9
 8009104:	f7ff fc1a 	bl	800893c <memcpy>
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800910e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009112:	81a3      	strh	r3, [r4, #12]
 8009114:	6126      	str	r6, [r4, #16]
 8009116:	6165      	str	r5, [r4, #20]
 8009118:	444e      	add	r6, r9
 800911a:	eba5 0509 	sub.w	r5, r5, r9
 800911e:	6026      	str	r6, [r4, #0]
 8009120:	60a5      	str	r5, [r4, #8]
 8009122:	463e      	mov	r6, r7
 8009124:	42be      	cmp	r6, r7
 8009126:	d900      	bls.n	800912a <__ssputs_r+0x86>
 8009128:	463e      	mov	r6, r7
 800912a:	6820      	ldr	r0, [r4, #0]
 800912c:	4632      	mov	r2, r6
 800912e:	4641      	mov	r1, r8
 8009130:	f000 fb4a 	bl	80097c8 <memmove>
 8009134:	68a3      	ldr	r3, [r4, #8]
 8009136:	1b9b      	subs	r3, r3, r6
 8009138:	60a3      	str	r3, [r4, #8]
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	4433      	add	r3, r6
 800913e:	6023      	str	r3, [r4, #0]
 8009140:	2000      	movs	r0, #0
 8009142:	e7db      	b.n	80090fc <__ssputs_r+0x58>
 8009144:	462a      	mov	r2, r5
 8009146:	f000 fb59 	bl	80097fc <_realloc_r>
 800914a:	4606      	mov	r6, r0
 800914c:	2800      	cmp	r0, #0
 800914e:	d1e1      	bne.n	8009114 <__ssputs_r+0x70>
 8009150:	6921      	ldr	r1, [r4, #16]
 8009152:	4650      	mov	r0, sl
 8009154:	f7fd fc78 	bl	8006a48 <_free_r>
 8009158:	e7c7      	b.n	80090ea <__ssputs_r+0x46>
	...

0800915c <_svfiprintf_r>:
 800915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009160:	4698      	mov	r8, r3
 8009162:	898b      	ldrh	r3, [r1, #12]
 8009164:	061b      	lsls	r3, r3, #24
 8009166:	b09d      	sub	sp, #116	; 0x74
 8009168:	4607      	mov	r7, r0
 800916a:	460d      	mov	r5, r1
 800916c:	4614      	mov	r4, r2
 800916e:	d50e      	bpl.n	800918e <_svfiprintf_r+0x32>
 8009170:	690b      	ldr	r3, [r1, #16]
 8009172:	b963      	cbnz	r3, 800918e <_svfiprintf_r+0x32>
 8009174:	2140      	movs	r1, #64	; 0x40
 8009176:	f7fd fcd3 	bl	8006b20 <_malloc_r>
 800917a:	6028      	str	r0, [r5, #0]
 800917c:	6128      	str	r0, [r5, #16]
 800917e:	b920      	cbnz	r0, 800918a <_svfiprintf_r+0x2e>
 8009180:	230c      	movs	r3, #12
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009188:	e0d1      	b.n	800932e <_svfiprintf_r+0x1d2>
 800918a:	2340      	movs	r3, #64	; 0x40
 800918c:	616b      	str	r3, [r5, #20]
 800918e:	2300      	movs	r3, #0
 8009190:	9309      	str	r3, [sp, #36]	; 0x24
 8009192:	2320      	movs	r3, #32
 8009194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009198:	f8cd 800c 	str.w	r8, [sp, #12]
 800919c:	2330      	movs	r3, #48	; 0x30
 800919e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009348 <_svfiprintf_r+0x1ec>
 80091a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091a6:	f04f 0901 	mov.w	r9, #1
 80091aa:	4623      	mov	r3, r4
 80091ac:	469a      	mov	sl, r3
 80091ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b2:	b10a      	cbz	r2, 80091b8 <_svfiprintf_r+0x5c>
 80091b4:	2a25      	cmp	r2, #37	; 0x25
 80091b6:	d1f9      	bne.n	80091ac <_svfiprintf_r+0x50>
 80091b8:	ebba 0b04 	subs.w	fp, sl, r4
 80091bc:	d00b      	beq.n	80091d6 <_svfiprintf_r+0x7a>
 80091be:	465b      	mov	r3, fp
 80091c0:	4622      	mov	r2, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	4638      	mov	r0, r7
 80091c6:	f7ff ff6d 	bl	80090a4 <__ssputs_r>
 80091ca:	3001      	adds	r0, #1
 80091cc:	f000 80aa 	beq.w	8009324 <_svfiprintf_r+0x1c8>
 80091d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d2:	445a      	add	r2, fp
 80091d4:	9209      	str	r2, [sp, #36]	; 0x24
 80091d6:	f89a 3000 	ldrb.w	r3, [sl]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 80a2 	beq.w	8009324 <_svfiprintf_r+0x1c8>
 80091e0:	2300      	movs	r3, #0
 80091e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ea:	f10a 0a01 	add.w	sl, sl, #1
 80091ee:	9304      	str	r3, [sp, #16]
 80091f0:	9307      	str	r3, [sp, #28]
 80091f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091f6:	931a      	str	r3, [sp, #104]	; 0x68
 80091f8:	4654      	mov	r4, sl
 80091fa:	2205      	movs	r2, #5
 80091fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009200:	4851      	ldr	r0, [pc, #324]	; (8009348 <_svfiprintf_r+0x1ec>)
 8009202:	f7f7 f805 	bl	8000210 <memchr>
 8009206:	9a04      	ldr	r2, [sp, #16]
 8009208:	b9d8      	cbnz	r0, 8009242 <_svfiprintf_r+0xe6>
 800920a:	06d0      	lsls	r0, r2, #27
 800920c:	bf44      	itt	mi
 800920e:	2320      	movmi	r3, #32
 8009210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009214:	0711      	lsls	r1, r2, #28
 8009216:	bf44      	itt	mi
 8009218:	232b      	movmi	r3, #43	; 0x2b
 800921a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800921e:	f89a 3000 	ldrb.w	r3, [sl]
 8009222:	2b2a      	cmp	r3, #42	; 0x2a
 8009224:	d015      	beq.n	8009252 <_svfiprintf_r+0xf6>
 8009226:	9a07      	ldr	r2, [sp, #28]
 8009228:	4654      	mov	r4, sl
 800922a:	2000      	movs	r0, #0
 800922c:	f04f 0c0a 	mov.w	ip, #10
 8009230:	4621      	mov	r1, r4
 8009232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009236:	3b30      	subs	r3, #48	; 0x30
 8009238:	2b09      	cmp	r3, #9
 800923a:	d94e      	bls.n	80092da <_svfiprintf_r+0x17e>
 800923c:	b1b0      	cbz	r0, 800926c <_svfiprintf_r+0x110>
 800923e:	9207      	str	r2, [sp, #28]
 8009240:	e014      	b.n	800926c <_svfiprintf_r+0x110>
 8009242:	eba0 0308 	sub.w	r3, r0, r8
 8009246:	fa09 f303 	lsl.w	r3, r9, r3
 800924a:	4313      	orrs	r3, r2
 800924c:	9304      	str	r3, [sp, #16]
 800924e:	46a2      	mov	sl, r4
 8009250:	e7d2      	b.n	80091f8 <_svfiprintf_r+0x9c>
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	1d19      	adds	r1, r3, #4
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	9103      	str	r1, [sp, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	bfbb      	ittet	lt
 800925e:	425b      	neglt	r3, r3
 8009260:	f042 0202 	orrlt.w	r2, r2, #2
 8009264:	9307      	strge	r3, [sp, #28]
 8009266:	9307      	strlt	r3, [sp, #28]
 8009268:	bfb8      	it	lt
 800926a:	9204      	strlt	r2, [sp, #16]
 800926c:	7823      	ldrb	r3, [r4, #0]
 800926e:	2b2e      	cmp	r3, #46	; 0x2e
 8009270:	d10c      	bne.n	800928c <_svfiprintf_r+0x130>
 8009272:	7863      	ldrb	r3, [r4, #1]
 8009274:	2b2a      	cmp	r3, #42	; 0x2a
 8009276:	d135      	bne.n	80092e4 <_svfiprintf_r+0x188>
 8009278:	9b03      	ldr	r3, [sp, #12]
 800927a:	1d1a      	adds	r2, r3, #4
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	9203      	str	r2, [sp, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	bfb8      	it	lt
 8009284:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009288:	3402      	adds	r4, #2
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009358 <_svfiprintf_r+0x1fc>
 8009290:	7821      	ldrb	r1, [r4, #0]
 8009292:	2203      	movs	r2, #3
 8009294:	4650      	mov	r0, sl
 8009296:	f7f6 ffbb 	bl	8000210 <memchr>
 800929a:	b140      	cbz	r0, 80092ae <_svfiprintf_r+0x152>
 800929c:	2340      	movs	r3, #64	; 0x40
 800929e:	eba0 000a 	sub.w	r0, r0, sl
 80092a2:	fa03 f000 	lsl.w	r0, r3, r0
 80092a6:	9b04      	ldr	r3, [sp, #16]
 80092a8:	4303      	orrs	r3, r0
 80092aa:	3401      	adds	r4, #1
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b2:	4826      	ldr	r0, [pc, #152]	; (800934c <_svfiprintf_r+0x1f0>)
 80092b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092b8:	2206      	movs	r2, #6
 80092ba:	f7f6 ffa9 	bl	8000210 <memchr>
 80092be:	2800      	cmp	r0, #0
 80092c0:	d038      	beq.n	8009334 <_svfiprintf_r+0x1d8>
 80092c2:	4b23      	ldr	r3, [pc, #140]	; (8009350 <_svfiprintf_r+0x1f4>)
 80092c4:	bb1b      	cbnz	r3, 800930e <_svfiprintf_r+0x1b2>
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	3307      	adds	r3, #7
 80092ca:	f023 0307 	bic.w	r3, r3, #7
 80092ce:	3308      	adds	r3, #8
 80092d0:	9303      	str	r3, [sp, #12]
 80092d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d4:	4433      	add	r3, r6
 80092d6:	9309      	str	r3, [sp, #36]	; 0x24
 80092d8:	e767      	b.n	80091aa <_svfiprintf_r+0x4e>
 80092da:	fb0c 3202 	mla	r2, ip, r2, r3
 80092de:	460c      	mov	r4, r1
 80092e0:	2001      	movs	r0, #1
 80092e2:	e7a5      	b.n	8009230 <_svfiprintf_r+0xd4>
 80092e4:	2300      	movs	r3, #0
 80092e6:	3401      	adds	r4, #1
 80092e8:	9305      	str	r3, [sp, #20]
 80092ea:	4619      	mov	r1, r3
 80092ec:	f04f 0c0a 	mov.w	ip, #10
 80092f0:	4620      	mov	r0, r4
 80092f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f6:	3a30      	subs	r2, #48	; 0x30
 80092f8:	2a09      	cmp	r2, #9
 80092fa:	d903      	bls.n	8009304 <_svfiprintf_r+0x1a8>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0c5      	beq.n	800928c <_svfiprintf_r+0x130>
 8009300:	9105      	str	r1, [sp, #20]
 8009302:	e7c3      	b.n	800928c <_svfiprintf_r+0x130>
 8009304:	fb0c 2101 	mla	r1, ip, r1, r2
 8009308:	4604      	mov	r4, r0
 800930a:	2301      	movs	r3, #1
 800930c:	e7f0      	b.n	80092f0 <_svfiprintf_r+0x194>
 800930e:	ab03      	add	r3, sp, #12
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	462a      	mov	r2, r5
 8009314:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <_svfiprintf_r+0x1f8>)
 8009316:	a904      	add	r1, sp, #16
 8009318:	4638      	mov	r0, r7
 800931a:	f7fd fd15 	bl	8006d48 <_printf_float>
 800931e:	1c42      	adds	r2, r0, #1
 8009320:	4606      	mov	r6, r0
 8009322:	d1d6      	bne.n	80092d2 <_svfiprintf_r+0x176>
 8009324:	89ab      	ldrh	r3, [r5, #12]
 8009326:	065b      	lsls	r3, r3, #25
 8009328:	f53f af2c 	bmi.w	8009184 <_svfiprintf_r+0x28>
 800932c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800932e:	b01d      	add	sp, #116	; 0x74
 8009330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009334:	ab03      	add	r3, sp, #12
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	462a      	mov	r2, r5
 800933a:	4b06      	ldr	r3, [pc, #24]	; (8009354 <_svfiprintf_r+0x1f8>)
 800933c:	a904      	add	r1, sp, #16
 800933e:	4638      	mov	r0, r7
 8009340:	f7fd ffa6 	bl	8007290 <_printf_i>
 8009344:	e7eb      	b.n	800931e <_svfiprintf_r+0x1c2>
 8009346:	bf00      	nop
 8009348:	0800a994 	.word	0x0800a994
 800934c:	0800a99e 	.word	0x0800a99e
 8009350:	08006d49 	.word	0x08006d49
 8009354:	080090a5 	.word	0x080090a5
 8009358:	0800a99a 	.word	0x0800a99a

0800935c <__sfputc_r>:
 800935c:	6893      	ldr	r3, [r2, #8]
 800935e:	3b01      	subs	r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	b410      	push	{r4}
 8009364:	6093      	str	r3, [r2, #8]
 8009366:	da08      	bge.n	800937a <__sfputc_r+0x1e>
 8009368:	6994      	ldr	r4, [r2, #24]
 800936a:	42a3      	cmp	r3, r4
 800936c:	db01      	blt.n	8009372 <__sfputc_r+0x16>
 800936e:	290a      	cmp	r1, #10
 8009370:	d103      	bne.n	800937a <__sfputc_r+0x1e>
 8009372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009376:	f7fe b983 	b.w	8007680 <__swbuf_r>
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	1c58      	adds	r0, r3, #1
 800937e:	6010      	str	r0, [r2, #0]
 8009380:	7019      	strb	r1, [r3, #0]
 8009382:	4608      	mov	r0, r1
 8009384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009388:	4770      	bx	lr

0800938a <__sfputs_r>:
 800938a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938c:	4606      	mov	r6, r0
 800938e:	460f      	mov	r7, r1
 8009390:	4614      	mov	r4, r2
 8009392:	18d5      	adds	r5, r2, r3
 8009394:	42ac      	cmp	r4, r5
 8009396:	d101      	bne.n	800939c <__sfputs_r+0x12>
 8009398:	2000      	movs	r0, #0
 800939a:	e007      	b.n	80093ac <__sfputs_r+0x22>
 800939c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a0:	463a      	mov	r2, r7
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7ff ffda 	bl	800935c <__sfputc_r>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d1f3      	bne.n	8009394 <__sfputs_r+0xa>
 80093ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093b0 <_vfiprintf_r>:
 80093b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	460d      	mov	r5, r1
 80093b6:	b09d      	sub	sp, #116	; 0x74
 80093b8:	4614      	mov	r4, r2
 80093ba:	4698      	mov	r8, r3
 80093bc:	4606      	mov	r6, r0
 80093be:	b118      	cbz	r0, 80093c8 <_vfiprintf_r+0x18>
 80093c0:	6983      	ldr	r3, [r0, #24]
 80093c2:	b90b      	cbnz	r3, 80093c8 <_vfiprintf_r+0x18>
 80093c4:	f7ff f9b0 	bl	8008728 <__sinit>
 80093c8:	4b89      	ldr	r3, [pc, #548]	; (80095f0 <_vfiprintf_r+0x240>)
 80093ca:	429d      	cmp	r5, r3
 80093cc:	d11b      	bne.n	8009406 <_vfiprintf_r+0x56>
 80093ce:	6875      	ldr	r5, [r6, #4]
 80093d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093d2:	07d9      	lsls	r1, r3, #31
 80093d4:	d405      	bmi.n	80093e2 <_vfiprintf_r+0x32>
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	059a      	lsls	r2, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_vfiprintf_r+0x32>
 80093dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093de:	f7ff fa46 	bl	800886e <__retarget_lock_acquire_recursive>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	071b      	lsls	r3, r3, #28
 80093e6:	d501      	bpl.n	80093ec <_vfiprintf_r+0x3c>
 80093e8:	692b      	ldr	r3, [r5, #16]
 80093ea:	b9eb      	cbnz	r3, 8009428 <_vfiprintf_r+0x78>
 80093ec:	4629      	mov	r1, r5
 80093ee:	4630      	mov	r0, r6
 80093f0:	f7fe f998 	bl	8007724 <__swsetup_r>
 80093f4:	b1c0      	cbz	r0, 8009428 <_vfiprintf_r+0x78>
 80093f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093f8:	07dc      	lsls	r4, r3, #31
 80093fa:	d50e      	bpl.n	800941a <_vfiprintf_r+0x6a>
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009400:	b01d      	add	sp, #116	; 0x74
 8009402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009406:	4b7b      	ldr	r3, [pc, #492]	; (80095f4 <_vfiprintf_r+0x244>)
 8009408:	429d      	cmp	r5, r3
 800940a:	d101      	bne.n	8009410 <_vfiprintf_r+0x60>
 800940c:	68b5      	ldr	r5, [r6, #8]
 800940e:	e7df      	b.n	80093d0 <_vfiprintf_r+0x20>
 8009410:	4b79      	ldr	r3, [pc, #484]	; (80095f8 <_vfiprintf_r+0x248>)
 8009412:	429d      	cmp	r5, r3
 8009414:	bf08      	it	eq
 8009416:	68f5      	ldreq	r5, [r6, #12]
 8009418:	e7da      	b.n	80093d0 <_vfiprintf_r+0x20>
 800941a:	89ab      	ldrh	r3, [r5, #12]
 800941c:	0598      	lsls	r0, r3, #22
 800941e:	d4ed      	bmi.n	80093fc <_vfiprintf_r+0x4c>
 8009420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009422:	f7ff fa25 	bl	8008870 <__retarget_lock_release_recursive>
 8009426:	e7e9      	b.n	80093fc <_vfiprintf_r+0x4c>
 8009428:	2300      	movs	r3, #0
 800942a:	9309      	str	r3, [sp, #36]	; 0x24
 800942c:	2320      	movs	r3, #32
 800942e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009432:	f8cd 800c 	str.w	r8, [sp, #12]
 8009436:	2330      	movs	r3, #48	; 0x30
 8009438:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095fc <_vfiprintf_r+0x24c>
 800943c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009440:	f04f 0901 	mov.w	r9, #1
 8009444:	4623      	mov	r3, r4
 8009446:	469a      	mov	sl, r3
 8009448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800944c:	b10a      	cbz	r2, 8009452 <_vfiprintf_r+0xa2>
 800944e:	2a25      	cmp	r2, #37	; 0x25
 8009450:	d1f9      	bne.n	8009446 <_vfiprintf_r+0x96>
 8009452:	ebba 0b04 	subs.w	fp, sl, r4
 8009456:	d00b      	beq.n	8009470 <_vfiprintf_r+0xc0>
 8009458:	465b      	mov	r3, fp
 800945a:	4622      	mov	r2, r4
 800945c:	4629      	mov	r1, r5
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff ff93 	bl	800938a <__sfputs_r>
 8009464:	3001      	adds	r0, #1
 8009466:	f000 80aa 	beq.w	80095be <_vfiprintf_r+0x20e>
 800946a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800946c:	445a      	add	r2, fp
 800946e:	9209      	str	r2, [sp, #36]	; 0x24
 8009470:	f89a 3000 	ldrb.w	r3, [sl]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 80a2 	beq.w	80095be <_vfiprintf_r+0x20e>
 800947a:	2300      	movs	r3, #0
 800947c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009484:	f10a 0a01 	add.w	sl, sl, #1
 8009488:	9304      	str	r3, [sp, #16]
 800948a:	9307      	str	r3, [sp, #28]
 800948c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009490:	931a      	str	r3, [sp, #104]	; 0x68
 8009492:	4654      	mov	r4, sl
 8009494:	2205      	movs	r2, #5
 8009496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800949a:	4858      	ldr	r0, [pc, #352]	; (80095fc <_vfiprintf_r+0x24c>)
 800949c:	f7f6 feb8 	bl	8000210 <memchr>
 80094a0:	9a04      	ldr	r2, [sp, #16]
 80094a2:	b9d8      	cbnz	r0, 80094dc <_vfiprintf_r+0x12c>
 80094a4:	06d1      	lsls	r1, r2, #27
 80094a6:	bf44      	itt	mi
 80094a8:	2320      	movmi	r3, #32
 80094aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ae:	0713      	lsls	r3, r2, #28
 80094b0:	bf44      	itt	mi
 80094b2:	232b      	movmi	r3, #43	; 0x2b
 80094b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094b8:	f89a 3000 	ldrb.w	r3, [sl]
 80094bc:	2b2a      	cmp	r3, #42	; 0x2a
 80094be:	d015      	beq.n	80094ec <_vfiprintf_r+0x13c>
 80094c0:	9a07      	ldr	r2, [sp, #28]
 80094c2:	4654      	mov	r4, sl
 80094c4:	2000      	movs	r0, #0
 80094c6:	f04f 0c0a 	mov.w	ip, #10
 80094ca:	4621      	mov	r1, r4
 80094cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094d0:	3b30      	subs	r3, #48	; 0x30
 80094d2:	2b09      	cmp	r3, #9
 80094d4:	d94e      	bls.n	8009574 <_vfiprintf_r+0x1c4>
 80094d6:	b1b0      	cbz	r0, 8009506 <_vfiprintf_r+0x156>
 80094d8:	9207      	str	r2, [sp, #28]
 80094da:	e014      	b.n	8009506 <_vfiprintf_r+0x156>
 80094dc:	eba0 0308 	sub.w	r3, r0, r8
 80094e0:	fa09 f303 	lsl.w	r3, r9, r3
 80094e4:	4313      	orrs	r3, r2
 80094e6:	9304      	str	r3, [sp, #16]
 80094e8:	46a2      	mov	sl, r4
 80094ea:	e7d2      	b.n	8009492 <_vfiprintf_r+0xe2>
 80094ec:	9b03      	ldr	r3, [sp, #12]
 80094ee:	1d19      	adds	r1, r3, #4
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	9103      	str	r1, [sp, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	bfbb      	ittet	lt
 80094f8:	425b      	neglt	r3, r3
 80094fa:	f042 0202 	orrlt.w	r2, r2, #2
 80094fe:	9307      	strge	r3, [sp, #28]
 8009500:	9307      	strlt	r3, [sp, #28]
 8009502:	bfb8      	it	lt
 8009504:	9204      	strlt	r2, [sp, #16]
 8009506:	7823      	ldrb	r3, [r4, #0]
 8009508:	2b2e      	cmp	r3, #46	; 0x2e
 800950a:	d10c      	bne.n	8009526 <_vfiprintf_r+0x176>
 800950c:	7863      	ldrb	r3, [r4, #1]
 800950e:	2b2a      	cmp	r3, #42	; 0x2a
 8009510:	d135      	bne.n	800957e <_vfiprintf_r+0x1ce>
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	1d1a      	adds	r2, r3, #4
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	9203      	str	r2, [sp, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	bfb8      	it	lt
 800951e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009522:	3402      	adds	r4, #2
 8009524:	9305      	str	r3, [sp, #20]
 8009526:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800960c <_vfiprintf_r+0x25c>
 800952a:	7821      	ldrb	r1, [r4, #0]
 800952c:	2203      	movs	r2, #3
 800952e:	4650      	mov	r0, sl
 8009530:	f7f6 fe6e 	bl	8000210 <memchr>
 8009534:	b140      	cbz	r0, 8009548 <_vfiprintf_r+0x198>
 8009536:	2340      	movs	r3, #64	; 0x40
 8009538:	eba0 000a 	sub.w	r0, r0, sl
 800953c:	fa03 f000 	lsl.w	r0, r3, r0
 8009540:	9b04      	ldr	r3, [sp, #16]
 8009542:	4303      	orrs	r3, r0
 8009544:	3401      	adds	r4, #1
 8009546:	9304      	str	r3, [sp, #16]
 8009548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954c:	482c      	ldr	r0, [pc, #176]	; (8009600 <_vfiprintf_r+0x250>)
 800954e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009552:	2206      	movs	r2, #6
 8009554:	f7f6 fe5c 	bl	8000210 <memchr>
 8009558:	2800      	cmp	r0, #0
 800955a:	d03f      	beq.n	80095dc <_vfiprintf_r+0x22c>
 800955c:	4b29      	ldr	r3, [pc, #164]	; (8009604 <_vfiprintf_r+0x254>)
 800955e:	bb1b      	cbnz	r3, 80095a8 <_vfiprintf_r+0x1f8>
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	3307      	adds	r3, #7
 8009564:	f023 0307 	bic.w	r3, r3, #7
 8009568:	3308      	adds	r3, #8
 800956a:	9303      	str	r3, [sp, #12]
 800956c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800956e:	443b      	add	r3, r7
 8009570:	9309      	str	r3, [sp, #36]	; 0x24
 8009572:	e767      	b.n	8009444 <_vfiprintf_r+0x94>
 8009574:	fb0c 3202 	mla	r2, ip, r2, r3
 8009578:	460c      	mov	r4, r1
 800957a:	2001      	movs	r0, #1
 800957c:	e7a5      	b.n	80094ca <_vfiprintf_r+0x11a>
 800957e:	2300      	movs	r3, #0
 8009580:	3401      	adds	r4, #1
 8009582:	9305      	str	r3, [sp, #20]
 8009584:	4619      	mov	r1, r3
 8009586:	f04f 0c0a 	mov.w	ip, #10
 800958a:	4620      	mov	r0, r4
 800958c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009590:	3a30      	subs	r2, #48	; 0x30
 8009592:	2a09      	cmp	r2, #9
 8009594:	d903      	bls.n	800959e <_vfiprintf_r+0x1ee>
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0c5      	beq.n	8009526 <_vfiprintf_r+0x176>
 800959a:	9105      	str	r1, [sp, #20]
 800959c:	e7c3      	b.n	8009526 <_vfiprintf_r+0x176>
 800959e:	fb0c 2101 	mla	r1, ip, r1, r2
 80095a2:	4604      	mov	r4, r0
 80095a4:	2301      	movs	r3, #1
 80095a6:	e7f0      	b.n	800958a <_vfiprintf_r+0x1da>
 80095a8:	ab03      	add	r3, sp, #12
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	462a      	mov	r2, r5
 80095ae:	4b16      	ldr	r3, [pc, #88]	; (8009608 <_vfiprintf_r+0x258>)
 80095b0:	a904      	add	r1, sp, #16
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7fd fbc8 	bl	8006d48 <_printf_float>
 80095b8:	4607      	mov	r7, r0
 80095ba:	1c78      	adds	r0, r7, #1
 80095bc:	d1d6      	bne.n	800956c <_vfiprintf_r+0x1bc>
 80095be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095c0:	07d9      	lsls	r1, r3, #31
 80095c2:	d405      	bmi.n	80095d0 <_vfiprintf_r+0x220>
 80095c4:	89ab      	ldrh	r3, [r5, #12]
 80095c6:	059a      	lsls	r2, r3, #22
 80095c8:	d402      	bmi.n	80095d0 <_vfiprintf_r+0x220>
 80095ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095cc:	f7ff f950 	bl	8008870 <__retarget_lock_release_recursive>
 80095d0:	89ab      	ldrh	r3, [r5, #12]
 80095d2:	065b      	lsls	r3, r3, #25
 80095d4:	f53f af12 	bmi.w	80093fc <_vfiprintf_r+0x4c>
 80095d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095da:	e711      	b.n	8009400 <_vfiprintf_r+0x50>
 80095dc:	ab03      	add	r3, sp, #12
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	462a      	mov	r2, r5
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <_vfiprintf_r+0x258>)
 80095e4:	a904      	add	r1, sp, #16
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7fd fe52 	bl	8007290 <_printf_i>
 80095ec:	e7e4      	b.n	80095b8 <_vfiprintf_r+0x208>
 80095ee:	bf00      	nop
 80095f0:	0800a7f8 	.word	0x0800a7f8
 80095f4:	0800a818 	.word	0x0800a818
 80095f8:	0800a7d8 	.word	0x0800a7d8
 80095fc:	0800a994 	.word	0x0800a994
 8009600:	0800a99e 	.word	0x0800a99e
 8009604:	08006d49 	.word	0x08006d49
 8009608:	0800938b 	.word	0x0800938b
 800960c:	0800a99a 	.word	0x0800a99a

08009610 <__sread>:
 8009610:	b510      	push	{r4, lr}
 8009612:	460c      	mov	r4, r1
 8009614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009618:	f000 f920 	bl	800985c <_read_r>
 800961c:	2800      	cmp	r0, #0
 800961e:	bfab      	itete	ge
 8009620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009622:	89a3      	ldrhlt	r3, [r4, #12]
 8009624:	181b      	addge	r3, r3, r0
 8009626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800962a:	bfac      	ite	ge
 800962c:	6563      	strge	r3, [r4, #84]	; 0x54
 800962e:	81a3      	strhlt	r3, [r4, #12]
 8009630:	bd10      	pop	{r4, pc}

08009632 <__swrite>:
 8009632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009636:	461f      	mov	r7, r3
 8009638:	898b      	ldrh	r3, [r1, #12]
 800963a:	05db      	lsls	r3, r3, #23
 800963c:	4605      	mov	r5, r0
 800963e:	460c      	mov	r4, r1
 8009640:	4616      	mov	r6, r2
 8009642:	d505      	bpl.n	8009650 <__swrite+0x1e>
 8009644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009648:	2302      	movs	r3, #2
 800964a:	2200      	movs	r2, #0
 800964c:	f000 f898 	bl	8009780 <_lseek_r>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800965a:	81a3      	strh	r3, [r4, #12]
 800965c:	4632      	mov	r2, r6
 800965e:	463b      	mov	r3, r7
 8009660:	4628      	mov	r0, r5
 8009662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009666:	f000 b817 	b.w	8009698 <_write_r>

0800966a <__sseek>:
 800966a:	b510      	push	{r4, lr}
 800966c:	460c      	mov	r4, r1
 800966e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009672:	f000 f885 	bl	8009780 <_lseek_r>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	bf15      	itete	ne
 800967c:	6560      	strne	r0, [r4, #84]	; 0x54
 800967e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009686:	81a3      	strheq	r3, [r4, #12]
 8009688:	bf18      	it	ne
 800968a:	81a3      	strhne	r3, [r4, #12]
 800968c:	bd10      	pop	{r4, pc}

0800968e <__sclose>:
 800968e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009692:	f000 b831 	b.w	80096f8 <_close_r>
	...

08009698 <_write_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d07      	ldr	r5, [pc, #28]	; (80096b8 <_write_r+0x20>)
 800969c:	4604      	mov	r4, r0
 800969e:	4608      	mov	r0, r1
 80096a0:	4611      	mov	r1, r2
 80096a2:	2200      	movs	r2, #0
 80096a4:	602a      	str	r2, [r5, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f7f8 ffea 	bl	8002680 <_write>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_write_r+0x1e>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_write_r+0x1e>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	20002530 	.word	0x20002530

080096bc <__assert_func>:
 80096bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096be:	4614      	mov	r4, r2
 80096c0:	461a      	mov	r2, r3
 80096c2:	4b09      	ldr	r3, [pc, #36]	; (80096e8 <__assert_func+0x2c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4605      	mov	r5, r0
 80096c8:	68d8      	ldr	r0, [r3, #12]
 80096ca:	b14c      	cbz	r4, 80096e0 <__assert_func+0x24>
 80096cc:	4b07      	ldr	r3, [pc, #28]	; (80096ec <__assert_func+0x30>)
 80096ce:	9100      	str	r1, [sp, #0]
 80096d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096d4:	4906      	ldr	r1, [pc, #24]	; (80096f0 <__assert_func+0x34>)
 80096d6:	462b      	mov	r3, r5
 80096d8:	f000 f81e 	bl	8009718 <fiprintf>
 80096dc:	f000 f8dd 	bl	800989a <abort>
 80096e0:	4b04      	ldr	r3, [pc, #16]	; (80096f4 <__assert_func+0x38>)
 80096e2:	461c      	mov	r4, r3
 80096e4:	e7f3      	b.n	80096ce <__assert_func+0x12>
 80096e6:	bf00      	nop
 80096e8:	20000024 	.word	0x20000024
 80096ec:	0800a9a5 	.word	0x0800a9a5
 80096f0:	0800a9b2 	.word	0x0800a9b2
 80096f4:	0800a9e0 	.word	0x0800a9e0

080096f8 <_close_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d06      	ldr	r5, [pc, #24]	; (8009714 <_close_r+0x1c>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	f7f8 ffc9 	bl	800269a <_close>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_close_r+0x1a>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_close_r+0x1a>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20002530 	.word	0x20002530

08009718 <fiprintf>:
 8009718:	b40e      	push	{r1, r2, r3}
 800971a:	b503      	push	{r0, r1, lr}
 800971c:	4601      	mov	r1, r0
 800971e:	ab03      	add	r3, sp, #12
 8009720:	4805      	ldr	r0, [pc, #20]	; (8009738 <fiprintf+0x20>)
 8009722:	f853 2b04 	ldr.w	r2, [r3], #4
 8009726:	6800      	ldr	r0, [r0, #0]
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	f7ff fe41 	bl	80093b0 <_vfiprintf_r>
 800972e:	b002      	add	sp, #8
 8009730:	f85d eb04 	ldr.w	lr, [sp], #4
 8009734:	b003      	add	sp, #12
 8009736:	4770      	bx	lr
 8009738:	20000024 	.word	0x20000024

0800973c <_fstat_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d07      	ldr	r5, [pc, #28]	; (800975c <_fstat_r+0x20>)
 8009740:	2300      	movs	r3, #0
 8009742:	4604      	mov	r4, r0
 8009744:	4608      	mov	r0, r1
 8009746:	4611      	mov	r1, r2
 8009748:	602b      	str	r3, [r5, #0]
 800974a:	f7f8 ffa9 	bl	80026a0 <_fstat>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d102      	bne.n	8009758 <_fstat_r+0x1c>
 8009752:	682b      	ldr	r3, [r5, #0]
 8009754:	b103      	cbz	r3, 8009758 <_fstat_r+0x1c>
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	bd38      	pop	{r3, r4, r5, pc}
 800975a:	bf00      	nop
 800975c:	20002530 	.word	0x20002530

08009760 <_isatty_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d06      	ldr	r5, [pc, #24]	; (800977c <_isatty_r+0x1c>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f8 ff9d 	bl	80026aa <_isatty>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_isatty_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_isatty_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	20002530 	.word	0x20002530

08009780 <_lseek_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4d07      	ldr	r5, [pc, #28]	; (80097a0 <_lseek_r+0x20>)
 8009784:	4604      	mov	r4, r0
 8009786:	4608      	mov	r0, r1
 8009788:	4611      	mov	r1, r2
 800978a:	2200      	movs	r2, #0
 800978c:	602a      	str	r2, [r5, #0]
 800978e:	461a      	mov	r2, r3
 8009790:	f7f8 ff8d 	bl	80026ae <_lseek>
 8009794:	1c43      	adds	r3, r0, #1
 8009796:	d102      	bne.n	800979e <_lseek_r+0x1e>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	b103      	cbz	r3, 800979e <_lseek_r+0x1e>
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	20002530 	.word	0x20002530

080097a4 <__ascii_mbtowc>:
 80097a4:	b082      	sub	sp, #8
 80097a6:	b901      	cbnz	r1, 80097aa <__ascii_mbtowc+0x6>
 80097a8:	a901      	add	r1, sp, #4
 80097aa:	b142      	cbz	r2, 80097be <__ascii_mbtowc+0x1a>
 80097ac:	b14b      	cbz	r3, 80097c2 <__ascii_mbtowc+0x1e>
 80097ae:	7813      	ldrb	r3, [r2, #0]
 80097b0:	600b      	str	r3, [r1, #0]
 80097b2:	7812      	ldrb	r2, [r2, #0]
 80097b4:	1e10      	subs	r0, r2, #0
 80097b6:	bf18      	it	ne
 80097b8:	2001      	movne	r0, #1
 80097ba:	b002      	add	sp, #8
 80097bc:	4770      	bx	lr
 80097be:	4610      	mov	r0, r2
 80097c0:	e7fb      	b.n	80097ba <__ascii_mbtowc+0x16>
 80097c2:	f06f 0001 	mvn.w	r0, #1
 80097c6:	e7f8      	b.n	80097ba <__ascii_mbtowc+0x16>

080097c8 <memmove>:
 80097c8:	4288      	cmp	r0, r1
 80097ca:	b510      	push	{r4, lr}
 80097cc:	eb01 0402 	add.w	r4, r1, r2
 80097d0:	d902      	bls.n	80097d8 <memmove+0x10>
 80097d2:	4284      	cmp	r4, r0
 80097d4:	4623      	mov	r3, r4
 80097d6:	d807      	bhi.n	80097e8 <memmove+0x20>
 80097d8:	1e43      	subs	r3, r0, #1
 80097da:	42a1      	cmp	r1, r4
 80097dc:	d008      	beq.n	80097f0 <memmove+0x28>
 80097de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097e6:	e7f8      	b.n	80097da <memmove+0x12>
 80097e8:	4402      	add	r2, r0
 80097ea:	4601      	mov	r1, r0
 80097ec:	428a      	cmp	r2, r1
 80097ee:	d100      	bne.n	80097f2 <memmove+0x2a>
 80097f0:	bd10      	pop	{r4, pc}
 80097f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097fa:	e7f7      	b.n	80097ec <memmove+0x24>

080097fc <_realloc_r>:
 80097fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009800:	4680      	mov	r8, r0
 8009802:	4614      	mov	r4, r2
 8009804:	460e      	mov	r6, r1
 8009806:	b921      	cbnz	r1, 8009812 <_realloc_r+0x16>
 8009808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800980c:	4611      	mov	r1, r2
 800980e:	f7fd b987 	b.w	8006b20 <_malloc_r>
 8009812:	b92a      	cbnz	r2, 8009820 <_realloc_r+0x24>
 8009814:	f7fd f918 	bl	8006a48 <_free_r>
 8009818:	4625      	mov	r5, r4
 800981a:	4628      	mov	r0, r5
 800981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009820:	f000 f842 	bl	80098a8 <_malloc_usable_size_r>
 8009824:	4284      	cmp	r4, r0
 8009826:	4607      	mov	r7, r0
 8009828:	d802      	bhi.n	8009830 <_realloc_r+0x34>
 800982a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800982e:	d812      	bhi.n	8009856 <_realloc_r+0x5a>
 8009830:	4621      	mov	r1, r4
 8009832:	4640      	mov	r0, r8
 8009834:	f7fd f974 	bl	8006b20 <_malloc_r>
 8009838:	4605      	mov	r5, r0
 800983a:	2800      	cmp	r0, #0
 800983c:	d0ed      	beq.n	800981a <_realloc_r+0x1e>
 800983e:	42bc      	cmp	r4, r7
 8009840:	4622      	mov	r2, r4
 8009842:	4631      	mov	r1, r6
 8009844:	bf28      	it	cs
 8009846:	463a      	movcs	r2, r7
 8009848:	f7ff f878 	bl	800893c <memcpy>
 800984c:	4631      	mov	r1, r6
 800984e:	4640      	mov	r0, r8
 8009850:	f7fd f8fa 	bl	8006a48 <_free_r>
 8009854:	e7e1      	b.n	800981a <_realloc_r+0x1e>
 8009856:	4635      	mov	r5, r6
 8009858:	e7df      	b.n	800981a <_realloc_r+0x1e>
	...

0800985c <_read_r>:
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	4d07      	ldr	r5, [pc, #28]	; (800987c <_read_r+0x20>)
 8009860:	4604      	mov	r4, r0
 8009862:	4608      	mov	r0, r1
 8009864:	4611      	mov	r1, r2
 8009866:	2200      	movs	r2, #0
 8009868:	602a      	str	r2, [r5, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	f7f8 fefb 	bl	8002666 <_read>
 8009870:	1c43      	adds	r3, r0, #1
 8009872:	d102      	bne.n	800987a <_read_r+0x1e>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	b103      	cbz	r3, 800987a <_read_r+0x1e>
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	bd38      	pop	{r3, r4, r5, pc}
 800987c:	20002530 	.word	0x20002530

08009880 <__ascii_wctomb>:
 8009880:	b149      	cbz	r1, 8009896 <__ascii_wctomb+0x16>
 8009882:	2aff      	cmp	r2, #255	; 0xff
 8009884:	bf85      	ittet	hi
 8009886:	238a      	movhi	r3, #138	; 0x8a
 8009888:	6003      	strhi	r3, [r0, #0]
 800988a:	700a      	strbls	r2, [r1, #0]
 800988c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009890:	bf98      	it	ls
 8009892:	2001      	movls	r0, #1
 8009894:	4770      	bx	lr
 8009896:	4608      	mov	r0, r1
 8009898:	4770      	bx	lr

0800989a <abort>:
 800989a:	b508      	push	{r3, lr}
 800989c:	2006      	movs	r0, #6
 800989e:	f000 f833 	bl	8009908 <raise>
 80098a2:	2001      	movs	r0, #1
 80098a4:	f7f8 fed9 	bl	800265a <_exit>

080098a8 <_malloc_usable_size_r>:
 80098a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ac:	1f18      	subs	r0, r3, #4
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	bfbc      	itt	lt
 80098b2:	580b      	ldrlt	r3, [r1, r0]
 80098b4:	18c0      	addlt	r0, r0, r3
 80098b6:	4770      	bx	lr

080098b8 <_raise_r>:
 80098b8:	291f      	cmp	r1, #31
 80098ba:	b538      	push	{r3, r4, r5, lr}
 80098bc:	4604      	mov	r4, r0
 80098be:	460d      	mov	r5, r1
 80098c0:	d904      	bls.n	80098cc <_raise_r+0x14>
 80098c2:	2316      	movs	r3, #22
 80098c4:	6003      	str	r3, [r0, #0]
 80098c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098ca:	bd38      	pop	{r3, r4, r5, pc}
 80098cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098ce:	b112      	cbz	r2, 80098d6 <_raise_r+0x1e>
 80098d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098d4:	b94b      	cbnz	r3, 80098ea <_raise_r+0x32>
 80098d6:	4620      	mov	r0, r4
 80098d8:	f000 f830 	bl	800993c <_getpid_r>
 80098dc:	462a      	mov	r2, r5
 80098de:	4601      	mov	r1, r0
 80098e0:	4620      	mov	r0, r4
 80098e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098e6:	f000 b817 	b.w	8009918 <_kill_r>
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d00a      	beq.n	8009904 <_raise_r+0x4c>
 80098ee:	1c59      	adds	r1, r3, #1
 80098f0:	d103      	bne.n	80098fa <_raise_r+0x42>
 80098f2:	2316      	movs	r3, #22
 80098f4:	6003      	str	r3, [r0, #0]
 80098f6:	2001      	movs	r0, #1
 80098f8:	e7e7      	b.n	80098ca <_raise_r+0x12>
 80098fa:	2400      	movs	r4, #0
 80098fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009900:	4628      	mov	r0, r5
 8009902:	4798      	blx	r3
 8009904:	2000      	movs	r0, #0
 8009906:	e7e0      	b.n	80098ca <_raise_r+0x12>

08009908 <raise>:
 8009908:	4b02      	ldr	r3, [pc, #8]	; (8009914 <raise+0xc>)
 800990a:	4601      	mov	r1, r0
 800990c:	6818      	ldr	r0, [r3, #0]
 800990e:	f7ff bfd3 	b.w	80098b8 <_raise_r>
 8009912:	bf00      	nop
 8009914:	20000024 	.word	0x20000024

08009918 <_kill_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d07      	ldr	r5, [pc, #28]	; (8009938 <_kill_r+0x20>)
 800991c:	2300      	movs	r3, #0
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	4611      	mov	r1, r2
 8009924:	602b      	str	r3, [r5, #0]
 8009926:	f7f8 fe90 	bl	800264a <_kill>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	d102      	bne.n	8009934 <_kill_r+0x1c>
 800992e:	682b      	ldr	r3, [r5, #0]
 8009930:	b103      	cbz	r3, 8009934 <_kill_r+0x1c>
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	bd38      	pop	{r3, r4, r5, pc}
 8009936:	bf00      	nop
 8009938:	20002530 	.word	0x20002530

0800993c <_getpid_r>:
 800993c:	f7f8 be83 	b.w	8002646 <_getpid>

08009940 <_init>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr

0800994c <_fini>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr
