
EnhancedHelmet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d090  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011fc  0800d250  0800d250  0001d250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e44c  0800e44c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e44c  0800e44c  0001e44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e454  0800e454  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e454  0800e454  0001e454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e458  0800e458  0001e458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e45c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  200001f4  0800e650  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  0800e650  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001859a  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031dd  00000000  00000000  000387be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003cd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cdc7  00000000  00000000  0003df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae03  00000000  00000000  0006ad4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001059f9  00000000  00000000  00085b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b54b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063b4  00000000  00000000  0018b59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d238 	.word	0x0800d238

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	0800d238 	.word	0x0800d238

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b974 	b.w	8000f38 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468e      	mov	lr, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4694      	mov	ip, r2
 8000c7a:	d969      	bls.n	8000d50 <__udivmoddi4+0xe8>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b152      	cbz	r2, 8000c98 <__udivmoddi4+0x30>
 8000c82:	fa01 f302 	lsl.w	r3, r1, r2
 8000c86:	f1c2 0120 	rsb	r1, r2, #32
 8000c8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c92:	ea41 0e03 	orr.w	lr, r1, r3
 8000c96:	4094      	lsls	r4, r2
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	0c21      	lsrs	r1, r4, #16
 8000c9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca2:	fa1f f78c 	uxth.w	r7, ip
 8000ca6:	fb08 e316 	mls	r3, r8, r6, lr
 8000caa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cae:	fb06 f107 	mul.w	r1, r6, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cbe:	f080 811f 	bcs.w	8000f00 <__udivmoddi4+0x298>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 811c 	bls.w	8000f00 <__udivmoddi4+0x298>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 f707 	mul.w	r7, r0, r7
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x92>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	f080 810a 	bcs.w	8000f04 <__udivmoddi4+0x29c>
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	f240 8107 	bls.w	8000f04 <__udivmoddi4+0x29c>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	1be4      	subs	r4, r4, r7
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa4>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xc2>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80ef 	beq.w	8000efa <__udivmoddi4+0x292>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x160>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd4>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80f9 	bhi.w	8000f2e <__udivmoddi4+0x2c6>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	469e      	mov	lr, r3
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa4>
 8000d4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xec>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 8092 	bne.w	8000e82 <__udivmoddi4+0x21a>
 8000d5e:	eba1 010c 	sub.w	r1, r1, ip
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0c20      	lsrs	r0, r4, #16
 8000d6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d72:	fb07 1113 	mls	r1, r7, r3, r1
 8000d76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7a:	fb0e f003 	mul.w	r0, lr, r3
 8000d7e:	4288      	cmp	r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x12c>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x12a>
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	f200 80cb 	bhi.w	8000f28 <__udivmoddi4+0x2c0>
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000da0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da4:	fb0e fe00 	mul.w	lr, lr, r0
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x156>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x154>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f200 80bb 	bhi.w	8000f32 <__udivmoddi4+0x2ca>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dc6:	e79c      	b.n	8000d02 <__udivmoddi4+0x9a>
 8000dc8:	f1c6 0720 	rsb	r7, r6, #32
 8000dcc:	40b3      	lsls	r3, r6
 8000dce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	431c      	orrs	r4, r3
 8000de0:	40f9      	lsrs	r1, r7
 8000de2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fb09 1118 	mls	r1, r9, r8, r1
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	fb08 f00e 	mul.w	r0, r8, lr
 8000e00:	4288      	cmp	r0, r1
 8000e02:	fa02 f206 	lsl.w	r2, r2, r6
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b8>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2bc>
 8000e14:	4288      	cmp	r0, r1
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2bc>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e28:	fb09 1110 	mls	r1, r9, r0, r1
 8000e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	458e      	cmp	lr, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1e2>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e40:	d26c      	bcs.n	8000f1c <__udivmoddi4+0x2b4>
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d96a      	bls.n	8000f1c <__udivmoddi4+0x2b4>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e52:	eba1 010e 	sub.w	r1, r1, lr
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	46c8      	mov	r8, r9
 8000e5a:	46a6      	mov	lr, r4
 8000e5c:	d356      	bcc.n	8000f0c <__udivmoddi4+0x2a4>
 8000e5e:	d053      	beq.n	8000f08 <__udivmoddi4+0x2a0>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x212>
 8000e62:	ebb3 0208 	subs.w	r2, r3, r8
 8000e66:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e72:	40f1      	lsrs	r1, r6
 8000e74:	431f      	orrs	r7, r3
 8000e76:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e90:	4091      	lsls	r1, r2
 8000e92:	4301      	orrs	r1, r0
 8000e94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e98:	fa1f fe8c 	uxth.w	lr, ip
 8000e9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea4:	0c0b      	lsrs	r3, r1, #16
 8000ea6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x260>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebe:	d22f      	bcs.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d92d      	bls.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	b289      	uxth	r1, r1
 8000ecc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb06 f30e 	mul.w	r3, r6, lr
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x28a>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee8:	d216      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d914      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000eee:	3e02      	subs	r6, #2
 8000ef0:	4461      	add	r1, ip
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef8:	e738      	b.n	8000d6c <__udivmoddi4+0x104>
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e705      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e3      	b.n	8000ccc <__udivmoddi4+0x64>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6f8      	b.n	8000cfa <__udivmoddi4+0x92>
 8000f08:	454b      	cmp	r3, r9
 8000f0a:	d2a9      	bcs.n	8000e60 <__udivmoddi4+0x1f8>
 8000f0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7a3      	b.n	8000e60 <__udivmoddi4+0x1f8>
 8000f18:	4646      	mov	r6, r8
 8000f1a:	e7ea      	b.n	8000ef2 <__udivmoddi4+0x28a>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	e794      	b.n	8000e4a <__udivmoddi4+0x1e2>
 8000f20:	4640      	mov	r0, r8
 8000f22:	e7d1      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f24:	46d0      	mov	r8, sl
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b8>
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e732      	b.n	8000d94 <__udivmoddi4+0x12c>
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e709      	b.n	8000d46 <__udivmoddi4+0xde>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e742      	b.n	8000dbe <__udivmoddi4+0x156>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <OV5462_write_i2c_reg>:
#include "OV5462.h"

uint8_t OV5462_write_i2c_reg(OV5462_t* ov5462, int addr, int data) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	uint8_t buf[4];
	buf[0] = (uint8_t)(addr >> 8); // upper addr byte
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	121b      	asrs	r3, r3, #8
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	743b      	strb	r3, [r7, #16]
	buf[1] = (uint8_t)(addr & 0xFF); // lower addr byte
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	747b      	strb	r3, [r7, #17]
	buf[2] = data;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	74bb      	strb	r3, [r7, #18]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_W, buf, 3, HAL_MAX_DELAY);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	f107 0210 	add.w	r2, r7, #16
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	2178      	movs	r1, #120	; 0x78
 8000f6e:	f002 fc27 	bl	80037c0 <HAL_I2C_Master_Transmit>
 8000f72:	4603      	mov	r3, r0
 8000f74:	75fb      	strb	r3, [r7, #23]

	if ( ret != HAL_OK ) {
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <OV5462_write_i2c_reg+0x44>
		return 1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <OV5462_write_i2c_reg+0x46>
	}

	return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <OV5462_write_i2c_regs>:

uint8_t OV5462_write_i2c_regs(OV5462_t* ov5462, const reg_value_pair regs[]) {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
	const reg_value_pair* curr = regs;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef ret;

	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000f98:	e015      	b.n	8000fc6 <OV5462_write_i2c_regs+0x3c>
		ret = OV5462_write_i2c_reg(ov5462, curr->addr, curr->value);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	789b      	ldrb	r3, [r3, #2]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffc8 	bl	8000f3c <OV5462_write_i2c_reg>
 8000fac:	4603      	mov	r3, r0
 8000fae:	72fb      	strb	r3, [r7, #11]
		// do we need a delay here?
		HAL_Delay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f002 f8c1 	bl	8003138 <HAL_Delay>
		++curr;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]

		if ( ret != HAL_OK ) {
 8000fbc:	7afb      	ldrb	r3, [r7, #11]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <OV5462_write_i2c_regs+0x3c>
			return 1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00a      	b.n	8000fdc <OV5462_write_i2c_regs+0x52>
	while (!(curr->addr == 0xFFFF && curr->value == 0xFF)) {
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d1e3      	bne.n	8000f9a <OV5462_write_i2c_regs+0x10>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	789b      	ldrb	r3, [r3, #2]
 8000fd6:	2bff      	cmp	r3, #255	; 0xff
 8000fd8:	d1df      	bne.n	8000f9a <OV5462_write_i2c_regs+0x10>
		}
	}

	return 0;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <OV5462_read_i2c_reg>:

uint8_t OV5462_read_i2c_reg(OV5462_t* ov5462, int addr) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	uint8_t buf[2];
	buf[0] = (uint8_t)(addr >> 8);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	121b      	asrs	r3, r3, #8
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t)(addr & 0xFF);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 2, HAL_MAX_DELAY);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	f107 020c 	add.w	r2, r7, #12
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2302      	movs	r3, #2
 800100c:	2179      	movs	r1, #121	; 0x79
 800100e:	f002 fbd7 	bl	80037c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ov5462->hi2c, OV5462_I2C_ADDR_R, buf, 1, HAL_MAX_DELAY);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	f107 020c 	add.w	r2, r7, #12
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2179      	movs	r1, #121	; 0x79
 8001024:	f002 fcc0 	bl	80039a8 <HAL_I2C_Master_Receive>

	return buf[0];
 8001028:	7b3b      	ldrb	r3, [r7, #12]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <OV5462_write_spi_reg>:

void OV5462_write_spi_reg(OV5462_t* ov5462, uint8_t addr, uint8_t data) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
 8001040:	4613      	mov	r3, r2
 8001042:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104a:	4812      	ldr	r0, [pc, #72]	; (8001094 <OV5462_write_spi_reg+0x60>)
 800104c:	f002 fb10 	bl	8003670 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr | 0x80 };
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001056:	b2db      	uxtb	r3, r3
 8001058:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6858      	ldr	r0, [r3, #4]
 800105e:	f107 010c 	add.w	r1, r7, #12
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	2201      	movs	r2, #1
 8001066:	f004 fe0c 	bl	8005c82 <HAL_SPI_Transmit>
	buf[0] = data;
 800106a:	78bb      	ldrb	r3, [r7, #2]
 800106c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6858      	ldr	r0, [r3, #4]
 8001072:	f107 010c 	add.w	r1, r7, #12
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	2201      	movs	r2, #1
 800107a:	f004 fe02 	bl	8005c82 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <OV5462_write_spi_reg+0x60>)
 8001086:	f002 faf3 	bl	8003670 <HAL_GPIO_WritePin>

//	HAL_Delay(100);
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	48001400 	.word	0x48001400

08001098 <OV5462_read_spi_reg>:

uint8_t OV5462_read_spi_reg(OV5462_t* ov5462, uint8_t addr) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <OV5462_read_spi_reg+0x54>)
 80010ac:	f002 fae0 	bl	8003670 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	uint8_t buf[1] = { addr };
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(ov5462->hspi, buf, 1, 100);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6858      	ldr	r0, [r3, #4]
 80010b8:	f107 010c 	add.w	r1, r7, #12
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	2201      	movs	r2, #1
 80010c0:	f004 fddf 	bl	8005c82 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ov5462->hspi, buf, 1, 100);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6858      	ldr	r0, [r3, #4]
 80010c8:	f107 010c 	add.w	r1, r7, #12
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	2201      	movs	r2, #1
 80010d0:	f004 ff45 	bl	8005f5e <HAL_SPI_Receive>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select HIGH
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010da:	4804      	ldr	r0, [pc, #16]	; (80010ec <OV5462_read_spi_reg+0x54>)
 80010dc:	f002 fac8 	bl	8003670 <HAL_GPIO_WritePin>

//	HAL_Delay(100);

	return buf[0];
 80010e0:	7b3b      	ldrb	r3, [r7, #12]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	48001400 	.word	0x48001400

080010f0 <OV5462_init>:


uint8_t OV5462_init(OV5462_t* ov5462) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET); // chip select is default HIGH
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fe:	482b      	ldr	r0, [pc, #172]	; (80011ac <OV5462_init+0xbc>)
 8001100:	f002 fab6 	bl	8003670 <HAL_GPIO_WritePin>

	OV5462_write_i2c_reg(ov5462, 0x3008, 0x80);
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	f243 0108 	movw	r1, #12296	; 0x3008
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff16 	bl	8000f3c <OV5462_write_i2c_reg>
	OV5462_write_i2c_regs(ov5462, SET_QVGA_MODE); // determine if we need to do this for our application
 8001110:	4927      	ldr	r1, [pc, #156]	; (80011b0 <OV5462_init+0xc0>)
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff39 	bl	8000f8a <OV5462_write_i2c_regs>

	uint8_t err = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
	// configure camera for JPEG capture
	err |= OV5462_write_i2c_regs(ov5462, CONFIGURE_JPEG_CAPTURE); // use JPEG capture mode
 800111c:	4925      	ldr	r1, [pc, #148]	; (80011b4 <OV5462_init+0xc4>)
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff33 	bl	8000f8a <OV5462_write_i2c_regs>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	4313      	orrs	r3, r2
 800112c:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_regs(ov5462, SET_RESOLUTION_320X240); // set sensor to low resolution
 800112e:	4922      	ldr	r1, [pc, #136]	; (80011b8 <OV5462_init+0xc8>)
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff2a 	bl	8000f8a <OV5462_write_i2c_regs>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	4313      	orrs	r3, r2
 800113e:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3818, 0xa8);
 8001140:	22a8      	movs	r2, #168	; 0xa8
 8001142:	f643 0118 	movw	r1, #14360	; 0x3818
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fef8 	bl	8000f3c <OV5462_write_i2c_reg>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	4313      	orrs	r3, r2
 8001154:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3621, 0x10);
 8001156:	2210      	movs	r2, #16
 8001158:	f243 6121 	movw	r1, #13857	; 0x3621
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff feed 	bl	8000f3c <OV5462_write_i2c_reg>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	4313      	orrs	r3, r2
 800116a:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x3801, 0xb0);
 800116c:	22b0      	movs	r2, #176	; 0xb0
 800116e:	f643 0101 	movw	r1, #14337	; 0x3801
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fee2 	bl	8000f3c <OV5462_write_i2c_reg>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	4313      	orrs	r3, r2
 8001180:	73fb      	strb	r3, [r7, #15]
	err |=OV5462_write_i2c_reg(ov5462, 0x4407, 0x04); // 04?
 8001182:	2204      	movs	r2, #4
 8001184:	f244 4107 	movw	r1, #17415	; 0x4407
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fed7 	bl	8000f3c <OV5462_write_i2c_reg>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	4313      	orrs	r3, r2
 8001196:	73fb      	strb	r3, [r7, #15]

	OV5462_write_spi_reg(ov5462, OV5462_ARDUCHIP_TIM, OV5462_VSYNC_LEVEL_MASK);
 8001198:	2202      	movs	r2, #2
 800119a:	2103      	movs	r1, #3
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff49 	bl	8001034 <OV5462_write_spi_reg>

	return err;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	48001400 	.word	0x48001400
 80011b0:	0800d544 	.word	0x0800d544
 80011b4:	0800de64 	.word	0x0800de64
 80011b8:	0800d4d8 	.word	0x0800d4d8

080011bc <OV5462_read_fifo_length>:

uint32_t OV5462_read_fifo_length(OV5462_t* ov5462) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	uint32_t lower, middle, upper;
	lower = OV5462_read_spi_reg(ov5462, FIFO_SIZE_LOWER);
 80011c4:	2142      	movs	r1, #66	; 0x42
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff66 	bl	8001098 <OV5462_read_spi_reg>
 80011cc:	4603      	mov	r3, r0
 80011ce:	617b      	str	r3, [r7, #20]
	middle = OV5462_read_spi_reg(ov5462, FIFO_SIZE_MIDDLE);
 80011d0:	2143      	movs	r1, #67	; 0x43
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff60 	bl	8001098 <OV5462_read_spi_reg>
 80011d8:	4603      	mov	r3, r0
 80011da:	613b      	str	r3, [r7, #16]
	upper = OV5462_read_spi_reg(ov5462, FIFO_SIZE_UPPER);
 80011dc:	2144      	movs	r1, #68	; 0x44
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff5a 	bl	8001098 <OV5462_read_spi_reg>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]

	return ((upper << 16) | (middle << 8) | lower) & 0x07fffff;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	431a      	orrs	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120e:	4804      	ldr	r0, [pc, #16]	; (8001220 <SELECT+0x1c>)
 8001210:	f002 fa2e 	bl	8003670 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f001 ff8f 	bl	8003138 <HAL_Delay>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	48001400 	.word	0x48001400

08001224 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <DESELECT+0x1c>)
 8001230:	f002 fa1e 	bl	8003670 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f001 ff7f 	bl	8003138 <HAL_Delay>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	48001400 	.word	0x48001400

08001244 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800124e:	bf00      	nop
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <SPI_TxByte+0x30>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b02      	cmp	r3, #2
 800125c:	d1f8      	bne.n	8001250 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800125e:	1df9      	adds	r1, r7, #7
 8001260:	2364      	movs	r3, #100	; 0x64
 8001262:	2201      	movs	r2, #1
 8001264:	4803      	ldr	r0, [pc, #12]	; (8001274 <SPI_TxByte+0x30>)
 8001266:	f004 fd0c 	bl	8005c82 <HAL_SPI_Transmit>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000360 	.word	0x20000360

08001278 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001284:	bf00      	nop
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <SPI_TxBuffer+0x30>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b02      	cmp	r3, #2
 8001292:	d1f8      	bne.n	8001286 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001294:	887a      	ldrh	r2, [r7, #2]
 8001296:	2364      	movs	r3, #100	; 0x64
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <SPI_TxBuffer+0x30>)
 800129c:	f004 fcf1 	bl	8005c82 <HAL_SPI_Transmit>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000360 	.word	0x20000360

080012ac <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80012b2:	23ff      	movs	r3, #255	; 0xff
 80012b4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012b6:	bf00      	nop
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <SPI_RxByte+0x34>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d1f8      	bne.n	80012b8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80012c6:	1dba      	adds	r2, r7, #6
 80012c8:	1df9      	adds	r1, r7, #7
 80012ca:	2364      	movs	r3, #100	; 0x64
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <SPI_RxByte+0x34>)
 80012d2:	f004 ff74 	bl	80061be <HAL_SPI_TransmitReceive>

	return data;
 80012d6:	79bb      	ldrb	r3, [r7, #6]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000360 	.word	0x20000360

080012e4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80012ec:	f7ff ffde 	bl	80012ac <SPI_RxByte>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	701a      	strb	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <SD_ReadyWait+0x30>)
 8001308:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800130c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800130e:	f7ff ffcd 	bl	80012ac <SPI_RxByte>
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2bff      	cmp	r3, #255	; 0xff
 800131a:	d003      	beq.n	8001324 <SD_ReadyWait+0x24>
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SD_ReadyWait+0x30>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f4      	bne.n	800130e <SD_ReadyWait+0xe>

	return res;
 8001324:	79fb      	ldrb	r3, [r7, #7]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000212 	.word	0x20000212

08001334 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800133a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800133e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001340:	f7ff ff70 	bl	8001224 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	e005      	b.n	8001356 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800134a:	20ff      	movs	r0, #255	; 0xff
 800134c:	f7ff ff7a 	bl	8001244 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	3301      	adds	r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	2b09      	cmp	r3, #9
 800135a:	ddf6      	ble.n	800134a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800135c:	f7ff ff52 	bl	8001204 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001360:	2340      	movs	r3, #64	; 0x40
 8001362:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001374:	2395      	movs	r3, #149	; 0x95
 8001376:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001378:	463b      	mov	r3, r7
 800137a:	2106      	movs	r1, #6
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff7b 	bl	8001278 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001382:	e002      	b.n	800138a <SD_PowerOn+0x56>
	{
		cnt--;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3b01      	subs	r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800138a:	f7ff ff8f 	bl	80012ac <SPI_RxByte>
 800138e:	4603      	mov	r3, r0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d002      	beq.n	800139a <SD_PowerOn+0x66>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f4      	bne.n	8001384 <SD_PowerOn+0x50>
	}

	DESELECT();
 800139a:	f7ff ff43 	bl	8001224 <DESELECT>
	SPI_TxByte(0XFF);
 800139e:	20ff      	movs	r0, #255	; 0xff
 80013a0:	f7ff ff50 	bl	8001244 <SPI_TxByte>

	PowerFlag = 1;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <SD_PowerOn+0x80>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000215 	.word	0x20000215

080013b8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <SD_PowerOff+0x14>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	20000215 	.word	0x20000215

080013d0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <SD_CheckPower+0x14>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000215 	.word	0x20000215

080013e8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <SD_RxDataBlock+0x58>)
 80013f4:	22c8      	movs	r2, #200	; 0xc8
 80013f6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80013f8:	f7ff ff58 	bl	80012ac <SPI_RxByte>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2bff      	cmp	r3, #255	; 0xff
 8001404:	d103      	bne.n	800140e <SD_RxDataBlock+0x26>
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <SD_RxDataBlock+0x58>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f4      	bne.n	80013f8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	2bfe      	cmp	r3, #254	; 0xfe
 8001412:	d001      	beq.n	8001418 <SD_RxDataBlock+0x30>
 8001414:	2300      	movs	r3, #0
 8001416:	e00f      	b.n	8001438 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff60 	bl	80012e4 <SPI_RxBytePtr>
	} while(len--);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	1e5a      	subs	r2, r3, #1
 8001428:	603a      	str	r2, [r7, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f4      	bne.n	8001418 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800142e:	f7ff ff3d 	bl	80012ac <SPI_RxByte>
	SPI_RxByte();
 8001432:	f7ff ff3b 	bl	80012ac <SPI_RxByte>

	return TRUE;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000210 	.word	0x20000210

08001444 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001454:	f7ff ff54 	bl	8001300 <SD_ReadyWait>
 8001458:	4603      	mov	r3, r0
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d001      	beq.n	8001462 <SD_TxDataBlock+0x1e>
 800145e:	2300      	movs	r3, #0
 8001460:	e02f      	b.n	80014c2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff feed 	bl	8001244 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	2bfd      	cmp	r3, #253	; 0xfd
 800146e:	d020      	beq.n	80014b2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001470:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff feff 	bl	8001278 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800147a:	f7ff ff17 	bl	80012ac <SPI_RxByte>
		SPI_RxByte();
 800147e:	f7ff ff15 	bl	80012ac <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001482:	e00b      	b.n	800149c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001484:	f7ff ff12 	bl	80012ac <SPI_RxByte>
 8001488:	4603      	mov	r3, r0
 800148a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	f003 031f 	and.w	r3, r3, #31
 8001492:	2b05      	cmp	r3, #5
 8001494:	d006      	beq.n	80014a4 <SD_TxDataBlock+0x60>
			i++;
 8001496:	7bbb      	ldrb	r3, [r7, #14]
 8001498:	3301      	adds	r3, #1
 800149a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	2b40      	cmp	r3, #64	; 0x40
 80014a0:	d9f0      	bls.n	8001484 <SD_TxDataBlock+0x40>
 80014a2:	e000      	b.n	80014a6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80014a4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80014a6:	bf00      	nop
 80014a8:	f7ff ff00 	bl	80012ac <SPI_RxByte>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0fa      	beq.n	80014a8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d101      	bne.n	80014c0 <SD_TxDataBlock+0x7c>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	6039      	str	r1, [r7, #0]
 80014d4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80014d6:	f7ff ff13 	bl	8001300 <SD_ReadyWait>
 80014da:	4603      	mov	r3, r0
 80014dc:	2bff      	cmp	r3, #255	; 0xff
 80014de:	d001      	beq.n	80014e4 <SD_SendCmd+0x1a>
 80014e0:	23ff      	movs	r3, #255	; 0xff
 80014e2:	e042      	b.n	800156a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff feac 	bl	8001244 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	0e1b      	lsrs	r3, r3, #24
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fea6 	bl	8001244 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fea0 	bl	8001244 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fe9a 	bl	8001244 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fe95 	bl	8001244 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b40      	cmp	r3, #64	; 0x40
 800151e:	d102      	bne.n	8001526 <SD_SendCmd+0x5c>
 8001520:	2395      	movs	r3, #149	; 0x95
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e007      	b.n	8001536 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b48      	cmp	r3, #72	; 0x48
 800152a:	d102      	bne.n	8001532 <SD_SendCmd+0x68>
 800152c:	2387      	movs	r3, #135	; 0x87
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e001      	b.n	8001536 <SD_SendCmd+0x6c>
	else crc = 1;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fe83 	bl	8001244 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b4c      	cmp	r3, #76	; 0x4c
 8001542:	d101      	bne.n	8001548 <SD_SendCmd+0x7e>
 8001544:	f7ff feb2 	bl	80012ac <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001548:	230a      	movs	r3, #10
 800154a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800154c:	f7ff feae 	bl	80012ac <SPI_RxByte>
 8001550:	4603      	mov	r3, r0
 8001552:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001554:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001558:	2b00      	cmp	r3, #0
 800155a:	da05      	bge.n	8001568 <SD_SendCmd+0x9e>
 800155c:	7bbb      	ldrb	r3, [r7, #14]
 800155e:	3b01      	subs	r3, #1
 8001560:	73bb      	strb	r3, [r7, #14]
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f1      	bne.n	800154c <SD_SendCmd+0x82>

	return res;
 8001568:	7b7b      	ldrb	r3, [r7, #13]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SD_disk_initialize+0x14>
 8001584:	2301      	movs	r3, #1
 8001586:	e0d1      	b.n	800172c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001588:	4b6a      	ldr	r3, [pc, #424]	; (8001734 <SD_disk_initialize+0x1c0>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <SD_disk_initialize+0x2a>
 8001596:	4b67      	ldr	r3, [pc, #412]	; (8001734 <SD_disk_initialize+0x1c0>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	e0c6      	b.n	800172c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800159e:	f7ff fec9 	bl	8001334 <SD_PowerOn>

	/* slave select */
	SELECT();
 80015a2:	f7ff fe2f 	bl	8001204 <SELECT>

	/* check disk type */
	type = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80015aa:	2100      	movs	r1, #0
 80015ac:	2040      	movs	r0, #64	; 0x40
 80015ae:	f7ff ff8c 	bl	80014ca <SD_SendCmd>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	f040 80a1 	bne.w	80016fc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <SD_disk_initialize+0x1c4>)
 80015bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80015c2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80015c6:	2048      	movs	r0, #72	; 0x48
 80015c8:	f7ff ff7f 	bl	80014ca <SD_SendCmd>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d155      	bne.n	800167e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	e00c      	b.n	80015f2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80015d8:	7bfc      	ldrb	r4, [r7, #15]
 80015da:	f7ff fe67 	bl	80012ac <SPI_RxByte>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	f104 0310 	add.w	r3, r4, #16
 80015e6:	443b      	add	r3, r7
 80015e8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	3301      	adds	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d9ef      	bls.n	80015d8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80015f8:	7abb      	ldrb	r3, [r7, #10]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d17e      	bne.n	80016fc <SD_disk_initialize+0x188>
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	2baa      	cmp	r3, #170	; 0xaa
 8001602:	d17b      	bne.n	80016fc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001604:	2100      	movs	r1, #0
 8001606:	2077      	movs	r0, #119	; 0x77
 8001608:	f7ff ff5f 	bl	80014ca <SD_SendCmd>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d807      	bhi.n	8001622 <SD_disk_initialize+0xae>
 8001612:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001616:	2069      	movs	r0, #105	; 0x69
 8001618:	f7ff ff57 	bl	80014ca <SD_SendCmd>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <SD_disk_initialize+0x1c4>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ec      	bne.n	8001604 <SD_disk_initialize+0x90>
 800162a:	e000      	b.n	800162e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800162c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800162e:	4b42      	ldr	r3, [pc, #264]	; (8001738 <SD_disk_initialize+0x1c4>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d062      	beq.n	80016fc <SD_disk_initialize+0x188>
 8001636:	2100      	movs	r1, #0
 8001638:	207a      	movs	r0, #122	; 0x7a
 800163a:	f7ff ff46 	bl	80014ca <SD_SendCmd>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d15b      	bne.n	80016fc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e00c      	b.n	8001664 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800164a:	7bfc      	ldrb	r4, [r7, #15]
 800164c:	f7ff fe2e 	bl	80012ac <SPI_RxByte>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	f104 0310 	add.w	r3, r4, #16
 8001658:	443b      	add	r3, r7
 800165a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	3301      	adds	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d9ef      	bls.n	800164a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800166a:	7a3b      	ldrb	r3, [r7, #8]
 800166c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SD_disk_initialize+0x104>
 8001674:	230c      	movs	r3, #12
 8001676:	e000      	b.n	800167a <SD_disk_initialize+0x106>
 8001678:	2304      	movs	r3, #4
 800167a:	73bb      	strb	r3, [r7, #14]
 800167c:	e03e      	b.n	80016fc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800167e:	2100      	movs	r1, #0
 8001680:	2077      	movs	r0, #119	; 0x77
 8001682:	f7ff ff22 	bl	80014ca <SD_SendCmd>
 8001686:	4603      	mov	r3, r0
 8001688:	2b01      	cmp	r3, #1
 800168a:	d808      	bhi.n	800169e <SD_disk_initialize+0x12a>
 800168c:	2100      	movs	r1, #0
 800168e:	2069      	movs	r0, #105	; 0x69
 8001690:	f7ff ff1b 	bl	80014ca <SD_SendCmd>
 8001694:	4603      	mov	r3, r0
 8001696:	2b01      	cmp	r3, #1
 8001698:	d801      	bhi.n	800169e <SD_disk_initialize+0x12a>
 800169a:	2302      	movs	r3, #2
 800169c:	e000      	b.n	80016a0 <SD_disk_initialize+0x12c>
 800169e:	2301      	movs	r3, #1
 80016a0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80016a2:	7bbb      	ldrb	r3, [r7, #14]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d10e      	bne.n	80016c6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80016a8:	2100      	movs	r1, #0
 80016aa:	2077      	movs	r0, #119	; 0x77
 80016ac:	f7ff ff0d 	bl	80014ca <SD_SendCmd>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d80e      	bhi.n	80016d4 <SD_disk_initialize+0x160>
 80016b6:	2100      	movs	r1, #0
 80016b8:	2069      	movs	r0, #105	; 0x69
 80016ba:	f7ff ff06 	bl	80014ca <SD_SendCmd>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d107      	bne.n	80016d4 <SD_disk_initialize+0x160>
 80016c4:	e00c      	b.n	80016e0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016c6:	2100      	movs	r1, #0
 80016c8:	2041      	movs	r0, #65	; 0x41
 80016ca:	f7ff fefe 	bl	80014ca <SD_SendCmd>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d004      	beq.n	80016de <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <SD_disk_initialize+0x1c4>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1e2      	bne.n	80016a2 <SD_disk_initialize+0x12e>
 80016dc:	e000      	b.n	80016e0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016de:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <SD_disk_initialize+0x1c4>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <SD_disk_initialize+0x184>
 80016e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ec:	2050      	movs	r0, #80	; 0x50
 80016ee:	f7ff feec 	bl	80014ca <SD_SendCmd>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SD_disk_initialize+0x188>
 80016f8:	2300      	movs	r3, #0
 80016fa:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80016fc:	4a0f      	ldr	r2, [pc, #60]	; (800173c <SD_disk_initialize+0x1c8>)
 80016fe:	7bbb      	ldrb	r3, [r7, #14]
 8001700:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001702:	f7ff fd8f 	bl	8001224 <DESELECT>
	SPI_RxByte();
 8001706:	f7ff fdd1 	bl	80012ac <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <SD_disk_initialize+0x1c0>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <SD_disk_initialize+0x1c0>)
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e001      	b.n	8001726 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001722:	f7ff fe49 	bl	80013b8 <SD_PowerOff>
	}

	return Stat;
 8001726:	4b03      	ldr	r3, [pc, #12]	; (8001734 <SD_disk_initialize+0x1c0>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b2db      	uxtb	r3, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	20000000 	.word	0x20000000
 8001738:	20000210 	.word	0x20000210
 800173c:	20000214 	.word	0x20000214

08001740 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SD_disk_status+0x14>
 8001750:	2301      	movs	r3, #1
 8001752:	e002      	b.n	800175a <SD_disk_status+0x1a>
	return Stat;
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SD_disk_status+0x28>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000000 	.word	0x20000000

0800176c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <SD_disk_read+0x1c>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <SD_disk_read+0x20>
 8001788:	2304      	movs	r3, #4
 800178a:	e051      	b.n	8001830 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <SD_disk_read+0xcc>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SD_disk_read+0x32>
 800179a:	2303      	movs	r3, #3
 800179c:	e048      	b.n	8001830 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800179e:	4b27      	ldr	r3, [pc, #156]	; (800183c <SD_disk_read+0xd0>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <SD_disk_read+0x44>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	607b      	str	r3, [r7, #4]

	SELECT();
 80017b0:	f7ff fd28 	bl	8001204 <SELECT>

	if (count == 1)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d111      	bne.n	80017de <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	2051      	movs	r0, #81	; 0x51
 80017be:	f7ff fe84 	bl	80014ca <SD_SendCmd>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d129      	bne.n	800181c <SD_disk_read+0xb0>
 80017c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017cc:	68b8      	ldr	r0, [r7, #8]
 80017ce:	f7ff fe0b 	bl	80013e8 <SD_RxDataBlock>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d021      	beq.n	800181c <SD_disk_read+0xb0>
 80017d8:	2300      	movs	r3, #0
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	e01e      	b.n	800181c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	2052      	movs	r0, #82	; 0x52
 80017e2:	f7ff fe72 	bl	80014ca <SD_SendCmd>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d117      	bne.n	800181c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80017ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f0:	68b8      	ldr	r0, [r7, #8]
 80017f2:	f7ff fdf9 	bl	80013e8 <SD_RxDataBlock>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00a      	beq.n	8001812 <SD_disk_read+0xa6>
				buff += 512;
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001802:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	3b01      	subs	r3, #1
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ed      	bne.n	80017ec <SD_disk_read+0x80>
 8001810:	e000      	b.n	8001814 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001812:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001814:	2100      	movs	r1, #0
 8001816:	204c      	movs	r0, #76	; 0x4c
 8001818:	f7ff fe57 	bl	80014ca <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800181c:	f7ff fd02 	bl	8001224 <DESELECT>
	SPI_RxByte();
 8001820:	f7ff fd44 	bl	80012ac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf14      	ite	ne
 800182a:	2301      	movne	r3, #1
 800182c:	2300      	moveq	r3, #0
 800182e:	b2db      	uxtb	r3, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000000 	.word	0x20000000
 800183c:	20000214 	.word	0x20000214

08001840 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <SD_disk_write+0x1c>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <SD_disk_write+0x20>
 800185c:	2304      	movs	r3, #4
 800185e:	e06b      	b.n	8001938 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <SD_disk_write+0x100>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SD_disk_write+0x32>
 800186e:	2303      	movs	r3, #3
 8001870:	e062      	b.n	8001938 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <SD_disk_write+0x100>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <SD_disk_write+0x44>
 8001880:	2302      	movs	r3, #2
 8001882:	e059      	b.n	8001938 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001884:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <SD_disk_write+0x104>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <SD_disk_write+0x56>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	025b      	lsls	r3, r3, #9
 8001894:	607b      	str	r3, [r7, #4]

	SELECT();
 8001896:	f7ff fcb5 	bl	8001204 <SELECT>

	if (count == 1)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d110      	bne.n	80018c2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	2058      	movs	r0, #88	; 0x58
 80018a4:	f7ff fe11 	bl	80014ca <SD_SendCmd>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d13a      	bne.n	8001924 <SD_disk_write+0xe4>
 80018ae:	21fe      	movs	r1, #254	; 0xfe
 80018b0:	68b8      	ldr	r0, [r7, #8]
 80018b2:	f7ff fdc7 	bl	8001444 <SD_TxDataBlock>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d033      	beq.n	8001924 <SD_disk_write+0xe4>
			count = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	e030      	b.n	8001924 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <SD_disk_write+0x104>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80018ce:	2100      	movs	r1, #0
 80018d0:	2077      	movs	r0, #119	; 0x77
 80018d2:	f7ff fdfa 	bl	80014ca <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	2057      	movs	r0, #87	; 0x57
 80018da:	f7ff fdf6 	bl	80014ca <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	2059      	movs	r0, #89	; 0x59
 80018e2:	f7ff fdf2 	bl	80014ca <SD_SendCmd>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d11b      	bne.n	8001924 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018ec:	21fc      	movs	r1, #252	; 0xfc
 80018ee:	68b8      	ldr	r0, [r7, #8]
 80018f0:	f7ff fda8 	bl	8001444 <SD_TxDataBlock>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00a      	beq.n	8001910 <SD_disk_write+0xd0>
				buff += 512;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001900:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ee      	bne.n	80018ec <SD_disk_write+0xac>
 800190e:	e000      	b.n	8001912 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001910:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001912:	21fd      	movs	r1, #253	; 0xfd
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff fd95 	bl	8001444 <SD_TxDataBlock>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <SD_disk_write+0xe4>
			{
				count = 1;
 8001920:	2301      	movs	r3, #1
 8001922:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001924:	f7ff fc7e 	bl	8001224 <DESELECT>
	SPI_RxByte();
 8001928:	f7ff fcc0 	bl	80012ac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf14      	ite	ne
 8001932:	2301      	movne	r3, #1
 8001934:	2300      	moveq	r3, #0
 8001936:	b2db      	uxtb	r3, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000000 	.word	0x20000000
 8001944:	20000214 	.word	0x20000214

08001948 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b08b      	sub	sp, #44	; 0x2c
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	603a      	str	r2, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
 8001954:	460b      	mov	r3, r1
 8001956:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <SD_disk_ioctl+0x1e>
 8001962:	2304      	movs	r3, #4
 8001964:	e115      	b.n	8001b92 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800196c:	79bb      	ldrb	r3, [r7, #6]
 800196e:	2b05      	cmp	r3, #5
 8001970:	d124      	bne.n	80019bc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d012      	beq.n	80019a0 <SD_disk_ioctl+0x58>
 800197a:	2b02      	cmp	r3, #2
 800197c:	dc1a      	bgt.n	80019b4 <SD_disk_ioctl+0x6c>
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <SD_disk_ioctl+0x40>
 8001982:	2b01      	cmp	r3, #1
 8001984:	d006      	beq.n	8001994 <SD_disk_ioctl+0x4c>
 8001986:	e015      	b.n	80019b4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001988:	f7ff fd16 	bl	80013b8 <SD_PowerOff>
			res = RES_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001992:	e0fc      	b.n	8001b8e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001994:	f7ff fcce 	bl	8001334 <SD_PowerOn>
			res = RES_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800199e:	e0f6      	b.n	8001b8e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	1c5c      	adds	r4, r3, #1
 80019a4:	f7ff fd14 	bl	80013d0 <SD_CheckPower>
 80019a8:	4603      	mov	r3, r0
 80019aa:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019b2:	e0ec      	b.n	8001b8e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80019b4:	2304      	movs	r3, #4
 80019b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019ba:	e0e8      	b.n	8001b8e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80019bc:	4b77      	ldr	r3, [pc, #476]	; (8001b9c <SD_disk_ioctl+0x254>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SD_disk_ioctl+0x86>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0e1      	b.n	8001b92 <SD_disk_ioctl+0x24a>

		SELECT();
 80019ce:	f7ff fc19 	bl	8001204 <SELECT>

		switch (ctrl)
 80019d2:	79bb      	ldrb	r3, [r7, #6]
 80019d4:	2b0d      	cmp	r3, #13
 80019d6:	f200 80cb 	bhi.w	8001b70 <SD_disk_ioctl+0x228>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <SD_disk_ioctl+0x98>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	08001adb 	.word	0x08001adb
 80019e4:	08001a19 	.word	0x08001a19
 80019e8:	08001acb 	.word	0x08001acb
 80019ec:	08001b71 	.word	0x08001b71
 80019f0:	08001b71 	.word	0x08001b71
 80019f4:	08001b71 	.word	0x08001b71
 80019f8:	08001b71 	.word	0x08001b71
 80019fc:	08001b71 	.word	0x08001b71
 8001a00:	08001b71 	.word	0x08001b71
 8001a04:	08001b71 	.word	0x08001b71
 8001a08:	08001b71 	.word	0x08001b71
 8001a0c:	08001aed 	.word	0x08001aed
 8001a10:	08001b11 	.word	0x08001b11
 8001a14:	08001b35 	.word	0x08001b35
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2049      	movs	r0, #73	; 0x49
 8001a1c:	f7ff fd55 	bl	80014ca <SD_SendCmd>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 80a8 	bne.w	8001b78 <SD_disk_ioctl+0x230>
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2110      	movs	r1, #16
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fcda 	bl	80013e8 <SD_RxDataBlock>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 809e 	beq.w	8001b78 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001a3c:	7b3b      	ldrb	r3, [r7, #12]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10e      	bne.n	8001a64 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a46:	7d7b      	ldrb	r3, [r7, #21]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	7d3b      	ldrb	r3, [r7, #20]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001a5a:	8bfb      	ldrh	r3, [r7, #30]
 8001a5c:	029a      	lsls	r2, r3, #10
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	e02e      	b.n	8001ac2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a64:	7c7b      	ldrb	r3, [r7, #17]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	7dbb      	ldrb	r3, [r7, #22]
 8001a6e:	09db      	lsrs	r3, r3, #7
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	7d7b      	ldrb	r3, [r7, #21]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f003 0306 	and.w	r3, r3, #6
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	3302      	adds	r3, #2
 8001a88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a8c:	7d3b      	ldrb	r3, [r7, #20]
 8001a8e:	099b      	lsrs	r3, r3, #6
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	7cfb      	ldrb	r3, [r7, #19]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	7cbb      	ldrb	r3, [r7, #18]
 8001aa2:	029b      	lsls	r3, r3, #10
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ab4:	8bfa      	ldrh	r2, [r7, #30]
 8001ab6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001aba:	3b09      	subs	r3, #9
 8001abc:	409a      	lsls	r2, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001ac8:	e056      	b.n	8001b78 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ad8:	e055      	b.n	8001b86 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001ada:	f7ff fc11 	bl	8001300 <SD_ReadyWait>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2bff      	cmp	r3, #255	; 0xff
 8001ae2:	d14b      	bne.n	8001b7c <SD_disk_ioctl+0x234>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001aea:	e047      	b.n	8001b7c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001aec:	2100      	movs	r1, #0
 8001aee:	2049      	movs	r0, #73	; 0x49
 8001af0:	f7ff fceb 	bl	80014ca <SD_SendCmd>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d142      	bne.n	8001b80 <SD_disk_ioctl+0x238>
 8001afa:	2110      	movs	r1, #16
 8001afc:	6a38      	ldr	r0, [r7, #32]
 8001afe:	f7ff fc73 	bl	80013e8 <SD_RxDataBlock>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d03b      	beq.n	8001b80 <SD_disk_ioctl+0x238>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b0e:	e037      	b.n	8001b80 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b10:	2100      	movs	r1, #0
 8001b12:	204a      	movs	r0, #74	; 0x4a
 8001b14:	f7ff fcd9 	bl	80014ca <SD_SendCmd>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d132      	bne.n	8001b84 <SD_disk_ioctl+0x23c>
 8001b1e:	2110      	movs	r1, #16
 8001b20:	6a38      	ldr	r0, [r7, #32]
 8001b22:	f7ff fc61 	bl	80013e8 <SD_RxDataBlock>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d02b      	beq.n	8001b84 <SD_disk_ioctl+0x23c>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b32:	e027      	b.n	8001b84 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001b34:	2100      	movs	r1, #0
 8001b36:	207a      	movs	r0, #122	; 0x7a
 8001b38:	f7ff fcc7 	bl	80014ca <SD_SendCmd>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b48:	e00b      	b.n	8001b62 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001b4a:	6a3c      	ldr	r4, [r7, #32]
 8001b4c:	1c63      	adds	r3, r4, #1
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	f7ff fbac 	bl	80012ac <SPI_RxByte>
 8001b54:	4603      	mov	r3, r0
 8001b56:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001b58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d9ef      	bls.n	8001b4a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001b70:	2304      	movs	r3, #4
 8001b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b76:	e006      	b.n	8001b86 <SD_disk_ioctl+0x23e>
			break;
 8001b78:	bf00      	nop
 8001b7a:	e004      	b.n	8001b86 <SD_disk_ioctl+0x23e>
			break;
 8001b7c:	bf00      	nop
 8001b7e:	e002      	b.n	8001b86 <SD_disk_ioctl+0x23e>
			break;
 8001b80:	bf00      	nop
 8001b82:	e000      	b.n	8001b86 <SD_disk_ioctl+0x23e>
			break;
 8001b84:	bf00      	nop
		}

		DESELECT();
 8001b86:	f7ff fb4d 	bl	8001224 <DESELECT>
		SPI_RxByte();
 8001b8a:	f7ff fb8f 	bl	80012ac <SPI_RxByte>
	}

	return res;
 8001b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	372c      	adds	r7, #44	; 0x2c
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000000 	.word	0x20000000

08001ba0 <testSD>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int testSD() {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
/* Mount SD Card */
	int ret = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
	if(f_mount(&fs, "", 0) != FR_OK) {
 8001baa:	2200      	movs	r2, #0
 8001bac:	495a      	ldr	r1, [pc, #360]	; (8001d18 <testSD+0x178>)
 8001bae:	485b      	ldr	r0, [pc, #364]	; (8001d1c <testSD+0x17c>)
 8001bb0:	f007 fb98 	bl	80092e4 <f_mount>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <testSD+0x26>
		printf("Failed to mount SD Card\r\n");
 8001bba:	4859      	ldr	r0, [pc, #356]	; (8001d20 <testSD+0x180>)
 8001bbc:	f009 f990 	bl	800aee0 <puts>
		return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	e0a3      	b.n	8001d0e <testSD+0x16e>
	}

	/* Open file to write */
	ret = f_open(&fil, "test.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001bc6:	2213      	movs	r2, #19
 8001bc8:	4956      	ldr	r1, [pc, #344]	; (8001d24 <testSD+0x184>)
 8001bca:	4857      	ldr	r0, [pc, #348]	; (8001d28 <testSD+0x188>)
 8001bcc:	f007 fbd0 	bl	8009370 <f_open>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60fb      	str	r3, [r7, #12]
	if(ret != FR_OK) {
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <testSD+0x48>
		printf("Failed to open file (%i) \r\n", ret);
 8001bda:	68f9      	ldr	r1, [r7, #12]
 8001bdc:	4853      	ldr	r0, [pc, #332]	; (8001d2c <testSD+0x18c>)
 8001bde:	f009 f8f9 	bl	800add4 <iprintf>
		return -1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e092      	b.n	8001d0e <testSD+0x16e>
	}

	if(f_getfree("", &fre_clust, &pfs) != FR_OK) {
 8001be8:	4a51      	ldr	r2, [pc, #324]	; (8001d30 <testSD+0x190>)
 8001bea:	4952      	ldr	r1, [pc, #328]	; (8001d34 <testSD+0x194>)
 8001bec:	484a      	ldr	r0, [pc, #296]	; (8001d18 <testSD+0x178>)
 8001bee:	f008 f8d9 	bl	8009da4 <f_getfree>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <testSD+0x64>
		printf("Free space check failed\r\n");
 8001bf8:	484f      	ldr	r0, [pc, #316]	; (8001d38 <testSD+0x198>)
 8001bfa:	f009 f971 	bl	800aee0 <puts>
		return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e084      	b.n	8001d0e <testSD+0x16e>
	}

	total_space = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001c04:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <testSD+0x190>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	3b02      	subs	r3, #2
 8001c0c:	4a48      	ldr	r2, [pc, #288]	; (8001d30 <testSD+0x190>)
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	8952      	ldrh	r2, [r2, #10]
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc9c 	bl	8000554 <__aeabi_ui2d>
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <testSD+0x19c>)
 8001c22:	f7fe fd11 	bl	8000648 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ffe3 	bl	8000bf8 <__aeabi_d2uiz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4a42      	ldr	r2, [pc, #264]	; (8001d40 <testSD+0x1a0>)
 8001c36:	6013      	str	r3, [r2, #0]
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001c38:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <testSD+0x190>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	895b      	ldrh	r3, [r3, #10]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <testSD+0x194>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	fb02 f303 	mul.w	r3, r2, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc83 	bl	8000554 <__aeabi_ui2d>
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <testSD+0x19c>)
 8001c54:	f7fe fcf8 	bl	8000648 <__aeabi_dmul>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f7fe ffca 	bl	8000bf8 <__aeabi_d2uiz>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4a37      	ldr	r2, [pc, #220]	; (8001d44 <testSD+0x1a4>)
 8001c68:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if(free_space < 1) {
 8001c6a:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <testSD+0x1a4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d105      	bne.n	8001c7e <testSD+0xde>
		printf("Drive is full\r\n");
 8001c72:	4835      	ldr	r0, [pc, #212]	; (8001d48 <testSD+0x1a8>)
 8001c74:	f009 f934 	bl	800aee0 <puts>
		return -1;
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7c:	e047      	b.n	8001d0e <testSD+0x16e>
	}

//	printf("SD CARD MOUNTED! TESTING R/W...\r\n");

	f_puts("TEST", &fil);
 8001c7e:	492a      	ldr	r1, [pc, #168]	; (8001d28 <testSD+0x188>)
 8001c80:	4832      	ldr	r0, [pc, #200]	; (8001d4c <testSD+0x1ac>)
 8001c82:	f008 faa3 	bl	800a1cc <f_puts>

	/* Close file */
	if(f_close(&fil) != FR_OK) {
 8001c86:	4828      	ldr	r0, [pc, #160]	; (8001d28 <testSD+0x188>)
 8001c88:	f008 f862 	bl	8009d50 <f_close>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <testSD+0xfe>
		printf("Drive is full\r\n");
 8001c92:	482d      	ldr	r0, [pc, #180]	; (8001d48 <testSD+0x1a8>)
 8001c94:	f009 f924 	bl	800aee0 <puts>
		return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	e037      	b.n	8001d0e <testSD+0x16e>
	}

	/* Open file to read */
	if(f_open(&fil, "test.txt", FA_READ) != FR_OK) {
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4920      	ldr	r1, [pc, #128]	; (8001d24 <testSD+0x184>)
 8001ca2:	4821      	ldr	r0, [pc, #132]	; (8001d28 <testSD+0x188>)
 8001ca4:	f007 fb64 	bl	8009370 <f_open>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <testSD+0x11a>
		printf("Failed to open in read mode\r\n");
 8001cae:	4828      	ldr	r0, [pc, #160]	; (8001d50 <testSD+0x1b0>)
 8001cb0:	f009 f916 	bl	800aee0 <puts>
		return -1;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb8:	e029      	b.n	8001d0e <testSD+0x16e>
	}

	char buffer[5];
	f_gets(buffer, sizeof(buffer), &fil);
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <testSD+0x188>)
 8001cbe:	2105      	movs	r1, #5
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f008 f9cf 	bl	800a064 <f_gets>

	if (strcmp(buffer, "TEST")) {
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4920      	ldr	r1, [pc, #128]	; (8001d4c <testSD+0x1ac>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fa98 	bl	8000200 <strcmp>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <testSD+0x142>
		printf("File contents MISMATCH. FAIL R/W test\r\n");
 8001cd6:	481f      	ldr	r0, [pc, #124]	; (8001d54 <testSD+0x1b4>)
 8001cd8:	f009 f902 	bl	800aee0 <puts>
		return -1;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce0:	e015      	b.n	8001d0e <testSD+0x16e>
	}

//	printf("PASSED: read file contents\r\n");

	/* Close file */
	if(f_close(&fil) != FR_OK) {
 8001ce2:	4811      	ldr	r0, [pc, #68]	; (8001d28 <testSD+0x188>)
 8001ce4:	f008 f834 	bl	8009d50 <f_close>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <testSD+0x15a>
		printf("Failed to close\r\n");
 8001cee:	481a      	ldr	r0, [pc, #104]	; (8001d58 <testSD+0x1b8>)
 8001cf0:	f009 f8f6 	bl	800aee0 <puts>
		return -1;
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	e009      	b.n	8001d0e <testSD+0x16e>
	}

	if(f_unlink("test.txt") != FR_OK) {
 8001cfa:	480a      	ldr	r0, [pc, #40]	; (8001d24 <testSD+0x184>)
 8001cfc:	f008 f907 	bl	8009f0e <f_unlink>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <testSD+0x16c>
		printf("Failed to delete test file \r\n");
 8001d06:	4815      	ldr	r0, [pc, #84]	; (8001d5c <testSD+0x1bc>)
 8001d08:	f009 f8ea 	bl	800aee0 <puts>
	}

	return 0;
 8001d0c:	2300      	movs	r3, #0

}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	0800d250 	.word	0x0800d250
 8001d1c:	200003c4 	.word	0x200003c4
 8001d20:	0800d254 	.word	0x0800d254
 8001d24:	0800d270 	.word	0x0800d270
 8001d28:	200005f8 	.word	0x200005f8
 8001d2c:	0800d27c 	.word	0x0800d27c
 8001d30:	200005f4 	.word	0x200005f4
 8001d34:	20000828 	.word	0x20000828
 8001d38:	0800d298 	.word	0x0800d298
 8001d3c:	3fe00000 	.word	0x3fe00000
 8001d40:	2000082c 	.word	0x2000082c
 8001d44:	20000830 	.word	0x20000830
 8001d48:	0800d2b4 	.word	0x0800d2b4
 8001d4c:	0800d2c4 	.word	0x0800d2c4
 8001d50:	0800d2cc 	.word	0x0800d2cc
 8001d54:	0800d2ec 	.word	0x0800d2ec
 8001d58:	0800d314 	.word	0x0800d314
 8001d5c:	0800d328 	.word	0x0800d328

08001d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d68:	f001 f971 	bl	800304e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6c:	f000 fb4c 	bl	8002408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d70:	f000 fc96 	bl	80026a0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001d74:	f000 fbcc 	bl	8002510 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8001d78:	f000 fc16 	bl	80025a8 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001d7c:	f000 fb8a 	bl	8002494 <MX_I2C2_Init>
  MX_SPI3_Init();
 8001d80:	f000 fc50 	bl	8002624 <MX_SPI3_Init>
  MX_FATFS_Init();
 8001d84:	f005 fc86 	bl	8007694 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d8e:	48d4      	ldr	r0, [pc, #848]	; (80020e0 <main+0x380>)
 8001d90:	f001 fc6e 	bl	8003670 <HAL_GPIO_WritePin>
	uint8_t buf[1] = { 0x00 }; // dummy write
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8001d9a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001d9e:	2364      	movs	r3, #100	; 0x64
 8001da0:	2201      	movs	r2, #1
 8001da2:	48d0      	ldr	r0, [pc, #832]	; (80020e4 <main+0x384>)
 8001da4:	f003 ff6d 	bl	8005c82 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dae:	48cc      	ldr	r0, [pc, #816]	; (80020e0 <main+0x380>)
 8001db0:	f001 fc5e 	bl	8003670 <HAL_GPIO_WritePin>
	buf[0] =  0x00 ; // dummy write
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
	HAL_SPI_Transmit(&hspi3, buf, 1, 100);
 8001dba:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	48c9      	ldr	r0, [pc, #804]	; (80020e8 <main+0x388>)
 8001dc4:	f003 ff5d 	bl	8005c82 <HAL_SPI_Transmit>

	OV5462_t ov5462 = { &hi2c2, &hspi1 };
 8001dc8:	4ac8      	ldr	r2, [pc, #800]	; (80020ec <main+0x38c>)
 8001dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dd2:	e883 0003 	stmia.w	r3, {r0, r1}

	HAL_Delay(1000);
 8001dd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dda:	f001 f9ad 	bl	8003138 <HAL_Delay>

	if(testSD()) {
 8001dde:	f7ff fedf 	bl	8001ba0 <testSD>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <main+0x92>
		printf("SD test FAIL! Aborting...\r\n");
 8001de8:	48c1      	ldr	r0, [pc, #772]	; (80020f0 <main+0x390>)
 8001dea:	f009 f879 	bl	800aee0 <puts>
		return 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e2f1      	b.n	80023d6 <main+0x676>
	} else {
		printf("SD test PASS!\r\n");
 8001df2:	48c0      	ldr	r0, [pc, #768]	; (80020f4 <main+0x394>)
 8001df4:	f009 f874 	bl	800aee0 <puts>
	}

	while (1) {
		OV5462_write_spi_reg(&ov5462, 0x00, 0x25);
 8001df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfc:	2225      	movs	r2, #37	; 0x25
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f917 	bl	8001034 <OV5462_write_spi_reg>
		uint8_t tmp = OV5462_read_spi_reg(&ov5462, 0x00);
 8001e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff f943 	bl	8001098 <OV5462_read_spi_reg>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (tmp == 0x25) {
 8001e18:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001e1c:	2b25      	cmp	r3, #37	; 0x25
 8001e1e:	d103      	bne.n	8001e28 <main+0xc8>
		printf("SPI Test PASS!\r\n");
 8001e20:	48b5      	ldr	r0, [pc, #724]	; (80020f8 <main+0x398>)
 8001e22:	f009 f85d 	bl	800aee0 <puts>
		break; // continue to program
 8001e26:	e007      	b.n	8001e38 <main+0xd8>
		} else {
		printf("SPI Test FAIL!\r\n");
 8001e28:	48b4      	ldr	r0, [pc, #720]	; (80020fc <main+0x39c>)
 8001e2a:	f009 f859 	bl	800aee0 <puts>
		HAL_Delay(1000);
 8001e2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e32:	f001 f981 	bl	8003138 <HAL_Delay>
	while (1) {
 8001e36:	e7df      	b.n	8001df8 <main+0x98>
		}
	}

	while (1) {
		uint8_t upper = OV5462_read_i2c_reg(&ov5462, CHIPID_UPPER);
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f243 010a 	movw	r1, #12298	; 0x300a
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f8cf 	bl	8000fe4 <OV5462_read_i2c_reg>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
		uint8_t lower = OV5462_read_i2c_reg(&ov5462, CHIPID_LOWER);
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f243 010b 	movw	r1, #12299	; 0x300b
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f8c5 	bl	8000fe4 <OV5462_read_i2c_reg>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f887 321d 	strb.w	r3, [r7, #541]	; 0x21d

		if (upper == 0x56 && lower == 0x42) {
 8001e60:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8001e64:	2b56      	cmp	r3, #86	; 0x56
 8001e66:	d110      	bne.n	8001e8a <main+0x12a>
 8001e68:	f897 321d 	ldrb.w	r3, [r7, #541]	; 0x21d
 8001e6c:	2b42      	cmp	r3, #66	; 0x42
 8001e6e:	d10c      	bne.n	8001e8a <main+0x12a>
			printf("I2C Test PASS!\r\n");
 8001e70:	48a3      	ldr	r0, [pc, #652]	; (8002100 <main+0x3a0>)
 8001e72:	f009 f835 	bl	800aee0 <puts>
			break; // continue to program
 8001e76:	bf00      	nop
			printf("I2C Test FAIL!\r\n");
			HAL_Delay(1000);
		}
	}

	if (OV5462_init(&ov5462)) {
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff f937 	bl	80010f0 <OV5462_init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00b      	beq.n	8001ea0 <main+0x140>
 8001e88:	e007      	b.n	8001e9a <main+0x13a>
			printf("I2C Test FAIL!\r\n");
 8001e8a:	489e      	ldr	r0, [pc, #632]	; (8002104 <main+0x3a4>)
 8001e8c:	f009 f828 	bl	800aee0 <puts>
			HAL_Delay(1000);
 8001e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e94:	f001 f950 	bl	8003138 <HAL_Delay>
	while (1) {
 8001e98:	e7ce      	b.n	8001e38 <main+0xd8>
		printf("Init fail!");
 8001e9a:	489b      	ldr	r0, [pc, #620]	; (8002108 <main+0x3a8>)
 8001e9c:	f008 ff9a 	bl	800add4 <iprintf>
	}
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff f8c3 	bl	8001034 <OV5462_write_spi_reg>
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FRAMES, 0x07);
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f8bc 	bl	8001034 <OV5462_write_spi_reg>



	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_START_MASK); // start capture
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f8b5 	bl	8001034 <OV5462_write_spi_reg>
	uint8_t status;

	uint bw;
	FRESULT fr;

	int image_num = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
//		if (status & CAPTURE_DONE_MASK) {
//			break;
//		}
//	}

	printf("filling the buffer...\r\n");
 8001ed0:	488e      	ldr	r0, [pc, #568]	; (800210c <main+0x3ac>)
 8001ed2:	f009 f805 	bl	800aee0 <puts>
	HAL_Delay(10000);
 8001ed6:	f242 7010 	movw	r0, #10000	; 0x2710
 8001eda:	f001 f92d 	bl	8003138 <HAL_Delay>
	printf("done!\r\n");
 8001ede:	488c      	ldr	r0, [pc, #560]	; (8002110 <main+0x3b0>)
 8001ee0:	f008 fffe 	bl	800aee0 <puts>


	int length = (int) OV5462_read_fifo_length(&ov5462);
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f967 	bl	80011bc <OV5462_read_fifo_length>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	if (length >= MAX_FIFO_LENGTH || length == 0) {
 8001ef4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001ef8:	4a86      	ldr	r2, [pc, #536]	; (8002114 <main+0x3b4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	dc03      	bgt.n	8001f06 <main+0x1a6>
 8001efe:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d105      	bne.n	8001f12 <main+0x1b2>
		printf("FIFO length ERROR\n");
 8001f06:	4884      	ldr	r0, [pc, #528]	; (8002118 <main+0x3b8>)
 8001f08:	f008 ffea 	bl	800aee0 <puts>
		return -1;
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f10:	e261      	b.n	80023d6 <main+0x676>
	}

	printf("%d bytes\r\n", length);
 8001f12:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8001f16:	4881      	ldr	r0, [pc, #516]	; (800211c <main+0x3bc>)
 8001f18:	f008 ff5c 	bl	800add4 <iprintf>

	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET); // chip select LOW
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f22:	486f      	ldr	r0, [pc, #444]	; (80020e0 <main+0x380>)
 8001f24:	f001 fba4 	bl	8003670 <HAL_GPIO_WritePin>
	buf[0] = BURST_FIFO_READ;
 8001f28:	233c      	movs	r3, #60	; 0x3c
 8001f2a:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
	HAL_SPI_Transmit(ov5462.hspi, buf, 1, 100); // send FIFO burst command
 8001f2e:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001f32:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001f36:	2364      	movs	r3, #100	; 0x64
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f003 fea2 	bl	8005c82 <HAL_SPI_Transmit>

	uint8_t curr_byte = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	uint8_t last_byte = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e

	uint8_t header_received = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
	int i = 0; // buffer index
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

	while (length > 0) { // the FIFO buffer will contain multiple images
 8001f56:	e22a      	b.n	80023ae <main+0x64e>
		int len = snprintf(NULL, 0, "%d.jpg", image_num);
 8001f58:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001f5c:	4a70      	ldr	r2, [pc, #448]	; (8002120 <main+0x3c0>)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2000      	movs	r0, #0
 8001f62:	f008 ffd5 	bl	800af10 <sniprintf>
 8001f66:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		char* filename = malloc(len+1);
 8001f6a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4618      	mov	r0, r3
 8001f72:	f008 f9d5 	bl	800a320 <malloc>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		snprintf(filename, len+1, "%d.jpg", image_num);
 8001f7c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001f80:	3301      	adds	r3, #1
 8001f82:	4619      	mov	r1, r3
 8001f84:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001f88:	4a65      	ldr	r2, [pc, #404]	; (8002120 <main+0x3c0>)
 8001f8a:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001f8e:	f008 ffbf 	bl	800af10 <sniprintf>
		printf("%s\r\n", filename);
 8001f92:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8001f96:	4863      	ldr	r0, [pc, #396]	; (8002124 <main+0x3c4>)
 8001f98:	f008 ff1c 	bl	800add4 <iprintf>

		f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001f9c:	2213      	movs	r2, #19
 8001f9e:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8001fa2:	4861      	ldr	r0, [pc, #388]	; (8002128 <main+0x3c8>)
 8001fa4:	f007 f9e4 	bl	8009370 <f_open>
		int image_start_idx = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
		if (i > 0) { // leftover from last chunk of prev image
 8001fae:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f340 808d 	ble.w	80020d2 <main+0x372>
			if (i % 2 != 0) i--;
 8001fb8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <main+0x26e>
 8001fc4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
			for (int j = i; j < CHUNK_SIZE; j += 2) {
 8001fce:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001fd2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001fd6:	e046      	b.n	8002066 <main+0x306>
				if (image_buf[j] == 0xD8) {
 8001fd8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001fdc:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 8001fe0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001fe4:	4413      	add	r3, r2
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2bd8      	cmp	r3, #216	; 0xd8
 8001fea:	d116      	bne.n	800201a <main+0x2ba>
					if (j > 0 && image_buf[j-1] == 0xFF) {
 8001fec:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	dd33      	ble.n	800205c <main+0x2fc>
 8001ff4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8001ffe:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	2bff      	cmp	r3, #255	; 0xff
 8002006:	d129      	bne.n	800205c <main+0x2fc>
						image_start_idx = j-1;
 8002008:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800200c:	3b01      	subs	r3, #1
 800200e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
						header_received = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
						break;
 8002018:	e02a      	b.n	8002070 <main+0x310>
					}
				} else if (image_buf[j] == 0xFF) {
 800201a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800201e:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 8002022:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002026:	4413      	add	r3, r2
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2bff      	cmp	r3, #255	; 0xff
 800202c:	d116      	bne.n	800205c <main+0x2fc>
					if (j < CHUNK_SIZE-1 && image_buf[j+1] == 0xD8) {
 800202e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002032:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8002036:	dc11      	bgt.n	800205c <main+0x2fc>
 8002038:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800203c:	3301      	adds	r3, #1
 800203e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8002042:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	2bd8      	cmp	r3, #216	; 0xd8
 800204a:	d107      	bne.n	800205c <main+0x2fc>
						image_start_idx = j;
 800204c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002050:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
						header_received = 1;
 8002054:	2301      	movs	r3, #1
 8002056:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
						break;
 800205a:	e009      	b.n	8002070 <main+0x310>
			for (int j = i; j < CHUNK_SIZE; j += 2) {
 800205c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002060:	3302      	adds	r3, #2
 8002062:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8002066:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800206a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206e:	dbb3      	blt.n	8001fd8 <main+0x278>
					}
				}
			}
			last_byte = image_buf[CHUNK_SIZE-1];
 8002070:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8002074:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8002078:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800207c:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
			length -= CHUNK_SIZE - i;
 8002080:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002084:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002088:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

			if (header_received) {
 8002092:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01e      	beq.n	80020d8 <main+0x378>
				fr = f_write(&fil, &image_buf[image_start_idx], sizeof(uint8_t)*(CHUNK_SIZE - image_start_idx), &bw);
 800209a:	f107 0208 	add.w	r2, r7, #8
 800209e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80020a2:	18d1      	adds	r1, r2, r3
 80020a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80020a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80020ac:	461a      	mov	r2, r3
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	481d      	ldr	r0, [pc, #116]	; (8002128 <main+0x3c8>)
 80020b2:	f007 fc5a 	bl	800996a <f_write>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
				if (fr) printf("ERROR (%i)", fr);
 80020bc:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d009      	beq.n	80020d8 <main+0x378>
 80020c4:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 80020c8:	4619      	mov	r1, r3
 80020ca:	4818      	ldr	r0, [pc, #96]	; (800212c <main+0x3cc>)
 80020cc:	f008 fe82 	bl	800add4 <iprintf>
 80020d0:	e002      	b.n	80020d8 <main+0x378>
			}
		} else {
			last_byte = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
		}

		i = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
//		}
//
//		fr = f_write(&fil, &image_buf[image_start_idx], sizeof(uint8_t)*(CHUNK_SIZE - image_start_idx), &bw);
//		if (fr) printf("ERROR (%i)", fr);

		while(!header_received && length > 0) {
 80020de:	e065      	b.n	80021ac <main+0x44c>
 80020e0:	48001400 	.word	0x48001400
 80020e4:	200002fc 	.word	0x200002fc
 80020e8:	20000360 	.word	0x20000360
 80020ec:	0800d48c 	.word	0x0800d48c
 80020f0:	0800d348 	.word	0x0800d348
 80020f4:	0800d364 	.word	0x0800d364
 80020f8:	0800d374 	.word	0x0800d374
 80020fc:	0800d384 	.word	0x0800d384
 8002100:	0800d394 	.word	0x0800d394
 8002104:	0800d3a4 	.word	0x0800d3a4
 8002108:	0800d3b4 	.word	0x0800d3b4
 800210c:	0800d3c0 	.word	0x0800d3c0
 8002110:	0800d3d8 	.word	0x0800d3d8
 8002114:	0005fffe 	.word	0x0005fffe
 8002118:	0800d3e0 	.word	0x0800d3e0
 800211c:	0800d3f4 	.word	0x0800d3f4
 8002120:	0800d400 	.word	0x0800d400
 8002124:	0800d408 	.word	0x0800d408
 8002128:	200005f8 	.word	0x200005f8
 800212c:	0800d410 	.word	0x0800d410
				last_byte = curr_byte;
 8002130:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8002134:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
				buf[0] = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
				HAL_SPI_Receive(ov5462.hspi, buf, 1, 100);
 800213e:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8002142:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8002146:	2364      	movs	r3, #100	; 0x64
 8002148:	2201      	movs	r2, #1
 800214a:	f003 ff08 	bl	8005f5e <HAL_SPI_Receive>
				curr_byte = buf[0];
 800214e:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8002152:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f

				if (curr_byte == 0xD8 && last_byte == 0xFF) {
 8002156:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800215a:	2bd8      	cmp	r3, #216	; 0xd8
 800215c:	d126      	bne.n	80021ac <main+0x44c>
 800215e:	f897 323e 	ldrb.w	r3, [r7, #574]	; 0x23e
 8002162:	2bff      	cmp	r3, #255	; 0xff
 8002164:	d122      	bne.n	80021ac <main+0x44c>
					header_received = 1;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
					image_buf[i++] = last_byte;
 800216c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 8002176:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800217a:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 800217e:	f897 123e 	ldrb.w	r1, [r7, #574]	; 0x23e
 8002182:	54d1      	strb	r1, [r2, r3]
					image_buf[i++] = curr_byte;
 8002184:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 800218e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8002192:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 8002196:	f897 123f 	ldrb.w	r1, [r7, #575]	; 0x23f
 800219a:	54d1      	strb	r1, [r2, r3]
					i = 2;
 800219c:	2302      	movs	r3, #2
 800219e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
					length -= 2;
 80021a2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80021a6:	3b02      	subs	r3, #2
 80021a8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		while(!header_received && length > 0) {
 80021ac:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <main+0x45c>
 80021b4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dcb9      	bgt.n	8002130 <main+0x3d0>
				}
		}



		printf("Header received\r\n");
 80021bc:	4888      	ldr	r0, [pc, #544]	; (80023e0 <main+0x680>)
 80021be:	f008 fe8f 	bl	800aee0 <puts>

		int eof_received = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		last_byte = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e

		while (!eof_received && length > 0) {
 80021ce:	e0c9      	b.n	8002364 <main+0x604>
			int next_chunk_size = CHUNK_SIZE - i;
 80021d0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80021d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80021d8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
			if (length < CHUNK_SIZE) {
 80021dc:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e4:	da03      	bge.n	80021ee <main+0x48e>
				next_chunk_size = length;
 80021e6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80021ea:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
			}

			HAL_SPI_Receive(ov5462.hspi, &image_buf[i], next_chunk_size, 100);
 80021ee:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80021f2:	f107 0208 	add.w	r2, r7, #8
 80021f6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80021fa:	18d1      	adds	r1, r2, r3
 80021fc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002200:	b29a      	uxth	r2, r3
 8002202:	2364      	movs	r3, #100	; 0x64
 8002204:	f003 feab 	bl	8005f5e <HAL_SPI_Receive>
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800220e:	4875      	ldr	r0, [pc, #468]	; (80023e4 <main+0x684>)
 8002210:	f001 fa2e 	bl	8003670 <HAL_GPIO_WritePin>

			int valid_data_size = CHUNK_SIZE;
 8002214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002218:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

			if (last_byte == 0xFF && image_buf[0] == 0xD9) { // handle edge case where the EOF breaks between chunks
 800221c:	f897 323e 	ldrb.w	r3, [r7, #574]	; 0x23e
 8002220:	2bff      	cmp	r3, #255	; 0xff
 8002222:	d10d      	bne.n	8002240 <main+0x4e0>
 8002224:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8002228:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2bd9      	cmp	r3, #217	; 0xd9
 8002230:	d106      	bne.n	8002240 <main+0x4e0>
				valid_data_size = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
				eof_received = 1;
 8002238:	2301      	movs	r3, #1
 800223a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800223e:	e050      	b.n	80022e2 <main+0x582>
			} else {
				for (int j = 0; j < CHUNK_SIZE; j += 2) {
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8002246:	e047      	b.n	80022d8 <main+0x578>
					if (image_buf[j] == 0xD9) {
 8002248:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800224c:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 8002250:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002254:	4413      	add	r3, r2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2bd9      	cmp	r3, #217	; 0xd9
 800225a:	d116      	bne.n	800228a <main+0x52a>
						if (j > 0 && image_buf[j-1] == 0xFF) {
 800225c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002260:	2b00      	cmp	r3, #0
 8002262:	dd34      	ble.n	80022ce <main+0x56e>
 8002264:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002268:	3b01      	subs	r3, #1
 800226a:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800226e:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	2bff      	cmp	r3, #255	; 0xff
 8002276:	d12a      	bne.n	80022ce <main+0x56e>
							valid_data_size = j+1; // offset 1 for 0 index
 8002278:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800227c:	3301      	adds	r3, #1
 800227e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
							eof_received = 1;
 8002282:	2301      	movs	r3, #1
 8002284:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
							break;
 8002288:	e02b      	b.n	80022e2 <main+0x582>
						}
					} else if (image_buf[j] == 0xFF) {
 800228a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800228e:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 8002292:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002296:	4413      	add	r3, r2
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2bff      	cmp	r3, #255	; 0xff
 800229c:	d117      	bne.n	80022ce <main+0x56e>
						if (j < CHUNK_SIZE-1 && image_buf[j+1] == 0xD9) {
 800229e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80022a2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80022a6:	dc12      	bgt.n	80022ce <main+0x56e>
 80022a8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80022ac:	3301      	adds	r3, #1
 80022ae:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80022b2:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 80022b6:	5cd3      	ldrb	r3, [r2, r3]
 80022b8:	2bd9      	cmp	r3, #217	; 0xd9
 80022ba:	d108      	bne.n	80022ce <main+0x56e>
							valid_data_size = j+2; // offset 1 for 0 index, another for the next byte
 80022bc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80022c0:	3302      	adds	r3, #2
 80022c2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
							eof_received = 1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
							break;
 80022cc:	e009      	b.n	80022e2 <main+0x582>
				for (int j = 0; j < CHUNK_SIZE; j += 2) {
 80022ce:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80022d2:	3302      	adds	r3, #2
 80022d4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80022d8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80022dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e0:	dbb2      	blt.n	8002248 <main+0x4e8>
						}
					}
				}
			}

			fr = f_write(&fil, image_buf, sizeof(uint8_t)*valid_data_size, &bw);
 80022e2:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	f107 0108 	add.w	r1, r7, #8
 80022ec:	483e      	ldr	r0, [pc, #248]	; (80023e8 <main+0x688>)
 80022ee:	f007 fb3c 	bl	800996a <f_write>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
			if (fr) printf("ERROR (%i)", fr);
 80022f8:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <main+0x5ac>
 8002300:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 8002304:	4619      	mov	r1, r3
 8002306:	4839      	ldr	r0, [pc, #228]	; (80023ec <main+0x68c>)
 8002308:	f008 fd64 	bl	800add4 <iprintf>

			last_byte = image_buf[CHUNK_SIZE-1];
 800230c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8002310:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8002314:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8002318:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e

			if (eof_received) {
 800231c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d004      	beq.n	800232e <main+0x5ce>
				i = valid_data_size; // we still need to process the rest of this chunk in case it includes the next image
 8002324:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002328:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800232c:	e002      	b.n	8002334 <main+0x5d4>
			} else {
				i = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
			}
			HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800233a:	482a      	ldr	r0, [pc, #168]	; (80023e4 <main+0x684>)
 800233c:	f001 f998 	bl	8003670 <HAL_GPIO_WritePin>
			buf[0] = BURST_FIFO_READ;
 8002340:	233c      	movs	r3, #60	; 0x3c
 8002342:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
			HAL_SPI_Transmit(ov5462.hspi, buf, 1, 100); // send FIFO burst command
 8002346:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800234a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800234e:	2364      	movs	r3, #100	; 0x64
 8002350:	2201      	movs	r2, #1
 8002352:	f003 fc96 	bl	8005c82 <HAL_SPI_Transmit>
			length -= valid_data_size;
 8002356:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800235a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		while (!eof_received && length > 0) {
 8002364:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d104      	bne.n	8002376 <main+0x616>
 800236c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002370:	2b00      	cmp	r3, #0
 8002372:	f73f af2d 	bgt.w	80021d0 <main+0x470>
		}

		if (eof_received) {
 8002376:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <main+0x626>
			printf("EOF\r\n");
 800237e:	481c      	ldr	r0, [pc, #112]	; (80023f0 <main+0x690>)
 8002380:	f008 fdae 	bl	800aee0 <puts>
 8002384:	e002      	b.n	800238c <main+0x62c>
		} else {
			printf("error\r\n");
 8002386:	481b      	ldr	r0, [pc, #108]	; (80023f4 <main+0x694>)
 8002388:	f008 fdaa 	bl	800aee0 <puts>
		}

		eof_received = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		header_received = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d

		f_close(&fil);
 8002398:	4813      	ldr	r0, [pc, #76]	; (80023e8 <main+0x688>)
 800239a:	f007 fcd9 	bl	8009d50 <f_close>
		printf("Saved image successfully\r\n");
 800239e:	4816      	ldr	r0, [pc, #88]	; (80023f8 <main+0x698>)
 80023a0:	f008 fd9e 	bl	800aee0 <puts>
		++image_num;
 80023a4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80023a8:	3301      	adds	r3, #1
 80023aa:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	while (length > 0) { // the FIFO buffer will contain multiple images
 80023ae:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f73f add0 	bgt.w	8001f58 <main+0x1f8>
	}

	printf("finished reading buffer!\r\n");
 80023b8:	4810      	ldr	r0, [pc, #64]	; (80023fc <main+0x69c>)
 80023ba:	f008 fd91 	bl	800aee0 <puts>

//			for (int j = 0; j < i; ++j) {
//				printf("%02X", image_buf[j]);
//			}

	if(f_mount(NULL, "", 1) != FR_OK)
 80023be:	2201      	movs	r2, #1
 80023c0:	490f      	ldr	r1, [pc, #60]	; (8002400 <main+0x6a0>)
 80023c2:	2000      	movs	r0, #0
 80023c4:	f006 ff8e 	bl	80092e4 <f_mount>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <main+0x674>
		printf("Failed to unmount\r\n");
 80023ce:	480d      	ldr	r0, [pc, #52]	; (8002404 <main+0x6a4>)
 80023d0:	f008 fd86 	bl	800aee0 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80023d4:	e7fe      	b.n	80023d4 <main+0x674>
    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(OV5462_CS_GPIO, OV5462_CS_PIN, GPIO_PIN_SET);
	OV5462_write_spi_reg(&ov5462, ARDUCHIP_FIFO, FIFO_CLEAR_MASK);

  /* USER CODE END 3 */
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	f507 7712 	add.w	r7, r7, #584	; 0x248
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	0800d41c 	.word	0x0800d41c
 80023e4:	48001400 	.word	0x48001400
 80023e8:	200005f8 	.word	0x200005f8
 80023ec:	0800d410 	.word	0x0800d410
 80023f0:	0800d430 	.word	0x0800d430
 80023f4:	0800d438 	.word	0x0800d438
 80023f8:	0800d440 	.word	0x0800d440
 80023fc:	0800d45c 	.word	0x0800d45c
 8002400:	0800d250 	.word	0x0800d250
 8002404:	0800d478 	.word	0x0800d478

08002408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b096      	sub	sp, #88	; 0x58
 800240c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	2244      	movs	r2, #68	; 0x44
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f007 ff8a 	bl	800a330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800241c:	463b      	mov	r3, r7
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800242a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800242e:	f001 fee1 	bl	80041f4 <HAL_PWREx_ControlVoltageScaling>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002438:	f000 fb6a 	bl	8002b10 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800243c:	2310      	movs	r3, #16
 800243e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002440:	2301      	movs	r3, #1
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002448:	2360      	movs	r3, #96	; 0x60
 800244a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800244c:	2300      	movs	r3, #0
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4618      	mov	r0, r3
 8002456:	f001 ff81 	bl	800435c <HAL_RCC_OscConfig>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002460:	f000 fb56 	bl	8002b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002464:	230f      	movs	r3, #15
 8002466:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002468:	2300      	movs	r3, #0
 800246a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002478:	463b      	mov	r3, r7
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f002 fb87 	bl	8004b90 <HAL_RCC_ClockConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002488:	f000 fb42 	bl	8002b10 <Error_Handler>
  }
}
 800248c:	bf00      	nop
 800248e:	3758      	adds	r7, #88	; 0x58
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <MX_I2C2_Init+0x74>)
 800249a:	4a1c      	ldr	r2, [pc, #112]	; (800250c <MX_I2C2_Init+0x78>)
 800249c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <MX_I2C2_Init+0x74>)
 80024a0:	f640 6214 	movw	r2, #3604	; 0xe14
 80024a4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <MX_I2C2_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ac:	4b16      	ldr	r3, [pc, #88]	; (8002508 <MX_I2C2_Init+0x74>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <MX_I2C2_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <MX_I2C2_Init+0x74>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <MX_I2C2_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024c4:	4b10      	ldr	r3, [pc, #64]	; (8002508 <MX_I2C2_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <MX_I2C2_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024d0:	480d      	ldr	r0, [pc, #52]	; (8002508 <MX_I2C2_Init+0x74>)
 80024d2:	f001 f8e5 	bl	80036a0 <HAL_I2C_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80024dc:	f000 fb18 	bl	8002b10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024e0:	2100      	movs	r1, #0
 80024e2:	4809      	ldr	r0, [pc, #36]	; (8002508 <MX_I2C2_Init+0x74>)
 80024e4:	f001 fdce 	bl	8004084 <HAL_I2CEx_ConfigAnalogFilter>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80024ee:	f000 fb0f 	bl	8002b10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024f2:	2100      	movs	r1, #0
 80024f4:	4804      	ldr	r0, [pc, #16]	; (8002508 <MX_I2C2_Init+0x74>)
 80024f6:	f001 fe10 	bl	800411a <HAL_I2CEx_ConfigDigitalFilter>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002500:	f000 fb06 	bl	8002b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000218 	.word	0x20000218
 800250c:	40005800 	.word	0x40005800

08002510 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002514:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 8002516:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <MX_LPUART1_UART_Init+0x94>)
 8002518:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 800254e:	2200      	movs	r2, #0
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 8002554:	2200      	movs	r2, #0
 8002556:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002558:	4811      	ldr	r0, [pc, #68]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 800255a:	f004 f9ff 	bl	800695c <HAL_UART_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002564:	f000 fad4 	bl	8002b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002568:	2100      	movs	r1, #0
 800256a:	480d      	ldr	r0, [pc, #52]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 800256c:	f004 ffc8 	bl	8007500 <HAL_UARTEx_SetTxFifoThreshold>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002576:	f000 facb 	bl	8002b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800257a:	2100      	movs	r1, #0
 800257c:	4808      	ldr	r0, [pc, #32]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 800257e:	f004 fffd 	bl	800757c <HAL_UARTEx_SetRxFifoThreshold>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002588:	f000 fac2 	bl	8002b10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800258c:	4804      	ldr	r0, [pc, #16]	; (80025a0 <MX_LPUART1_UART_Init+0x90>)
 800258e:	f004 ff7e 	bl	800748e <HAL_UARTEx_DisableFifoMode>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002598:	f000 faba 	bl	8002b10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000026c 	.word	0x2000026c
 80025a4:	40008000 	.word	0x40008000

080025a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <MX_SPI1_Init+0x74>)
 80025ae:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <MX_SPI1_Init+0x78>)
 80025b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	; (800261c <MX_SPI1_Init+0x74>)
 80025b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <MX_SPI1_Init+0x74>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c0:	4b16      	ldr	r3, [pc, #88]	; (800261c <MX_SPI1_Init+0x74>)
 80025c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <MX_SPI1_Init+0x74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <MX_SPI1_Init+0x74>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <MX_SPI1_Init+0x74>)
 80025d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MX_SPI1_Init+0x74>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <MX_SPI1_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <MX_SPI1_Init+0x74>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <MX_SPI1_Init+0x74>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <MX_SPI1_Init+0x74>)
 80025f6:	2207      	movs	r2, #7
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <MX_SPI1_Init+0x74>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_SPI1_Init+0x74>)
 8002602:	2200      	movs	r2, #0
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <MX_SPI1_Init+0x74>)
 8002608:	f003 fa98 	bl	8005b3c <HAL_SPI_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002612:	f000 fa7d 	bl	8002b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200002fc 	.word	0x200002fc
 8002620:	40013000 	.word	0x40013000

08002624 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <MX_SPI3_Init+0x74>)
 800262a:	4a1c      	ldr	r2, [pc, #112]	; (800269c <MX_SPI3_Init+0x78>)
 800262c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800262e:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <MX_SPI3_Init+0x74>)
 8002630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002634:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <MX_SPI3_Init+0x74>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <MX_SPI3_Init+0x74>)
 800263e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002642:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <MX_SPI3_Init+0x74>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <MX_SPI3_Init+0x74>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_SPI3_Init+0x74>)
 8002652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002656:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <MX_SPI3_Init+0x74>)
 800265a:	2210      	movs	r2, #16
 800265c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_SPI3_Init+0x74>)
 8002660:	2200      	movs	r2, #0
 8002662:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_SPI3_Init+0x74>)
 8002666:	2200      	movs	r2, #0
 8002668:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <MX_SPI3_Init+0x74>)
 800266c:	2200      	movs	r2, #0
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_SPI3_Init+0x74>)
 8002672:	2207      	movs	r2, #7
 8002674:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <MX_SPI3_Init+0x74>)
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_SPI3_Init+0x74>)
 800267e:	2208      	movs	r2, #8
 8002680:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <MX_SPI3_Init+0x74>)
 8002684:	f003 fa5a 	bl	8005b3c <HAL_SPI_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800268e:	f000 fa3f 	bl	8002b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000360 	.word	0x20000360
 800269c:	40003c00 	.word	0x40003c00

080026a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08e      	sub	sp, #56	; 0x38
 80026a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b6:	4bb2      	ldr	r3, [pc, #712]	; (8002980 <MX_GPIO_Init+0x2e0>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	4ab1      	ldr	r2, [pc, #708]	; (8002980 <MX_GPIO_Init+0x2e0>)
 80026bc:	f043 0310 	orr.w	r3, r3, #16
 80026c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c2:	4baf      	ldr	r3, [pc, #700]	; (8002980 <MX_GPIO_Init+0x2e0>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	623b      	str	r3, [r7, #32]
 80026cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ce:	4bac      	ldr	r3, [pc, #688]	; (8002980 <MX_GPIO_Init+0x2e0>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	4aab      	ldr	r2, [pc, #684]	; (8002980 <MX_GPIO_Init+0x2e0>)
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026da:	4ba9      	ldr	r3, [pc, #676]	; (8002980 <MX_GPIO_Init+0x2e0>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026e6:	4ba6      	ldr	r3, [pc, #664]	; (8002980 <MX_GPIO_Init+0x2e0>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	4aa5      	ldr	r2, [pc, #660]	; (8002980 <MX_GPIO_Init+0x2e0>)
 80026ec:	f043 0320 	orr.w	r3, r3, #32
 80026f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f2:	4ba3      	ldr	r3, [pc, #652]	; (8002980 <MX_GPIO_Init+0x2e0>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	61bb      	str	r3, [r7, #24]
 80026fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026fe:	4ba0      	ldr	r3, [pc, #640]	; (8002980 <MX_GPIO_Init+0x2e0>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	4a9f      	ldr	r2, [pc, #636]	; (8002980 <MX_GPIO_Init+0x2e0>)
 8002704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270a:	4b9d      	ldr	r3, [pc, #628]	; (8002980 <MX_GPIO_Init+0x2e0>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	4b9a      	ldr	r3, [pc, #616]	; (8002980 <MX_GPIO_Init+0x2e0>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	4a99      	ldr	r2, [pc, #612]	; (8002980 <MX_GPIO_Init+0x2e0>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002722:	4b97      	ldr	r3, [pc, #604]	; (8002980 <MX_GPIO_Init+0x2e0>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	4b94      	ldr	r3, [pc, #592]	; (8002980 <MX_GPIO_Init+0x2e0>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	4a93      	ldr	r2, [pc, #588]	; (8002980 <MX_GPIO_Init+0x2e0>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273a:	4b91      	ldr	r3, [pc, #580]	; (8002980 <MX_GPIO_Init+0x2e0>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002746:	4b8e      	ldr	r3, [pc, #568]	; (8002980 <MX_GPIO_Init+0x2e0>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	4a8d      	ldr	r2, [pc, #564]	; (8002980 <MX_GPIO_Init+0x2e0>)
 800274c:	f043 0308 	orr.w	r3, r3, #8
 8002750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002752:	4b8b      	ldr	r3, [pc, #556]	; (8002980 <MX_GPIO_Init+0x2e0>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800275e:	4b88      	ldr	r3, [pc, #544]	; (8002980 <MX_GPIO_Init+0x2e0>)
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	4a87      	ldr	r2, [pc, #540]	; (8002980 <MX_GPIO_Init+0x2e0>)
 8002764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276a:	4b85      	ldr	r3, [pc, #532]	; (8002980 <MX_GPIO_Init+0x2e0>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002776:	f001 fde1 	bl	800433c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800277a:	2200      	movs	r2, #0
 800277c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002780:	4880      	ldr	r0, [pc, #512]	; (8002984 <MX_GPIO_Init+0x2e4>)
 8002782:	f000 ff75 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002786:	230c      	movs	r3, #12
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002796:	230d      	movs	r3, #13
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800279a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279e:	4619      	mov	r1, r3
 80027a0:	4879      	ldr	r0, [pc, #484]	; (8002988 <MX_GPIO_Init+0x2e8>)
 80027a2:	f000 fdd3 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80027b6:	230d      	movs	r3, #13
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027be:	4619      	mov	r1, r3
 80027c0:	4870      	ldr	r0, [pc, #448]	; (8002984 <MX_GPIO_Init+0x2e4>)
 80027c2:	f000 fdc3 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027dc:	4619      	mov	r1, r3
 80027de:	4869      	ldr	r0, [pc, #420]	; (8002984 <MX_GPIO_Init+0x2e4>)
 80027e0:	f000 fdb4 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80027e4:	233f      	movs	r3, #63	; 0x3f
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80027e8:	230b      	movs	r3, #11
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f4:	4619      	mov	r1, r3
 80027f6:	4865      	ldr	r0, [pc, #404]	; (800298c <MX_GPIO_Init+0x2ec>)
 80027f8:	f000 fda8 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027fc:	2301      	movs	r3, #1
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800280c:	2301      	movs	r3, #1
 800280e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002814:	4619      	mov	r1, r3
 8002816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800281a:	f000 fd97 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800281e:	230a      	movs	r3, #10
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002822:	230b      	movs	r3, #11
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282e:	4619      	mov	r1, r3
 8002830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002834:	f000 fd8a 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002838:	2301      	movs	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002848:	2302      	movs	r3, #2
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002850:	4619      	mov	r1, r3
 8002852:	484f      	ldr	r0, [pc, #316]	; (8002990 <MX_GPIO_Init+0x2f0>)
 8002854:	f000 fd7a 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002858:	2302      	movs	r3, #2
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800285c:	230b      	movs	r3, #11
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002868:	4619      	mov	r1, r3
 800286a:	4849      	ldr	r0, [pc, #292]	; (8002990 <MX_GPIO_Init+0x2f0>)
 800286c:	f000 fd6e 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002870:	2304      	movs	r3, #4
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002874:	2303      	movs	r3, #3
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002880:	4619      	mov	r1, r3
 8002882:	4843      	ldr	r0, [pc, #268]	; (8002990 <MX_GPIO_Init+0x2f0>)
 8002884:	f000 fd62 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002888:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800289a:	2301      	movs	r3, #1
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a2:	4619      	mov	r1, r3
 80028a4:	4838      	ldr	r0, [pc, #224]	; (8002988 <MX_GPIO_Init+0x2e8>)
 80028a6:	f000 fd51 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80028aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80028bc:	2303      	movs	r3, #3
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	4619      	mov	r1, r3
 80028c6:	4830      	ldr	r0, [pc, #192]	; (8002988 <MX_GPIO_Init+0x2e8>)
 80028c8:	f000 fd40 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2300      	movs	r3, #0
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028de:	2301      	movs	r3, #1
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e6:	4619      	mov	r1, r3
 80028e8:	4829      	ldr	r0, [pc, #164]	; (8002990 <MX_GPIO_Init+0x2f0>)
 80028ea:	f000 fd2f 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80028ee:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002900:	230d      	movs	r3, #13
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002908:	4619      	mov	r1, r3
 800290a:	4821      	ldr	r0, [pc, #132]	; (8002990 <MX_GPIO_Init+0x2f0>)
 800290c:	f000 fd1e 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002910:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	2300      	movs	r3, #0
 8002920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002922:	230e      	movs	r3, #14
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292a:	4619      	mov	r1, r3
 800292c:	4818      	ldr	r0, [pc, #96]	; (8002990 <MX_GPIO_Init+0x2f0>)
 800292e:	f000 fd0d 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002932:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002944:	2307      	movs	r3, #7
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294c:	4619      	mov	r1, r3
 800294e:	4811      	ldr	r0, [pc, #68]	; (8002994 <MX_GPIO_Init+0x2f4>)
 8002950:	f000 fcfc 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002954:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002966:	2302      	movs	r3, #2
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800296a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800296e:	4619      	mov	r1, r3
 8002970:	4808      	ldr	r0, [pc, #32]	; (8002994 <MX_GPIO_Init+0x2f4>)
 8002972:	f000 fceb 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002976:	2340      	movs	r3, #64	; 0x40
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
 800297e:	e00b      	b.n	8002998 <MX_GPIO_Init+0x2f8>
 8002980:	40021000 	.word	0x40021000
 8002984:	48001400 	.word	0x48001400
 8002988:	48001000 	.word	0x48001000
 800298c:	48000800 	.word	0x48000800
 8002990:	48000400 	.word	0x48000400
 8002994:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80029a0:	230d      	movs	r3, #13
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a8:	4619      	mov	r1, r3
 80029aa:	484c      	ldr	r0, [pc, #304]	; (8002adc <MX_GPIO_Init+0x43c>)
 80029ac:	f000 fcce 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029c0:	2302      	movs	r3, #2
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c8:	4619      	mov	r1, r3
 80029ca:	4844      	ldr	r0, [pc, #272]	; (8002adc <MX_GPIO_Init+0x43c>)
 80029cc:	f000 fcbe 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80029d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80029e2:	230c      	movs	r3, #12
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ea:	4619      	mov	r1, r3
 80029ec:	483b      	ldr	r0, [pc, #236]	; (8002adc <MX_GPIO_Init+0x43c>)
 80029ee:	f000 fcad 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80029f2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a04:	230a      	movs	r3, #10
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a12:	f000 fc9b 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2e:	f000 fc8d 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a32:	2301      	movs	r3, #1
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a42:	2309      	movs	r3, #9
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4824      	ldr	r0, [pc, #144]	; (8002ae0 <MX_GPIO_Init+0x440>)
 8002a4e:	f000 fc7d 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a52:	2304      	movs	r3, #4
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002a62:	230c      	movs	r3, #12
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	481c      	ldr	r0, [pc, #112]	; (8002ae0 <MX_GPIO_Init+0x440>)
 8002a6e:	f000 fc6d 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002a72:	2378      	movs	r3, #120	; 0x78
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a82:	2307      	movs	r3, #7
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4814      	ldr	r0, [pc, #80]	; (8002ae0 <MX_GPIO_Init+0x440>)
 8002a8e:	f000 fc5d 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a98:	2312      	movs	r3, #18
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aac:	4619      	mov	r1, r3
 8002aae:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <MX_GPIO_Init+0x444>)
 8002ab0:	f000 fc4c 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002acc:	4619      	mov	r1, r3
 8002ace:	4806      	ldr	r0, [pc, #24]	; (8002ae8 <MX_GPIO_Init+0x448>)
 8002ad0:	f000 fc3c 	bl	800334c <HAL_GPIO_Init>

}
 8002ad4:	bf00      	nop
 8002ad6:	3738      	adds	r7, #56	; 0x38
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	48000800 	.word	0x48000800
 8002ae0:	48000c00 	.word	0x48000c00
 8002ae4:	48000400 	.word	0x48000400
 8002ae8:	48001000 	.word	0x48001000

08002aec <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002af4:	1d39      	adds	r1, r7, #4
 8002af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002afa:	2201      	movs	r2, #1
 8002afc:	4803      	ldr	r0, [pc, #12]	; (8002b0c <__io_putchar+0x20>)
 8002afe:	f003 ff7d 	bl	80069fc <HAL_UART_Transmit>
  return ch;
 8002b02:	687b      	ldr	r3, [r7, #4]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2000026c 	.word	0x2000026c

08002b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b14:	b672      	cpsid	i
}
 8002b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <Error_Handler+0x8>
	...

08002b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <HAL_MspInit+0x44>)
 8002b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b26:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <HAL_MspInit+0x44>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <HAL_MspInit+0x44>)
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_MspInit+0x44>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <HAL_MspInit+0x44>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6593      	str	r3, [r2, #88]	; 0x58
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_MspInit+0x44>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b0ae      	sub	sp, #184	; 0xb8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	2294      	movs	r2, #148	; 0x94
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f007 fbd3 	bl	800a330 <memset>
  if(hi2c->Instance==I2C2)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <HAL_I2C_MspInit+0xb0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d13a      	bne.n	8002c0a <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b9c:	f107 0310 	add.w	r3, r7, #16
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fab3 	bl	800510c <HAL_RCCEx_PeriphCLKConfig>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002bac:	f7ff ffb0 	bl	8002b10 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bb0:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_I2C_MspInit+0xb4>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <HAL_I2C_MspInit+0xb4>)
 8002bb6:	f043 0320 	orr.w	r3, r3, #32
 8002bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bbc:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_I2C_MspInit+0xb4>)
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002bc8:	2307      	movs	r3, #7
 8002bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bce:	2312      	movs	r3, #18
 8002bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002be0:	2304      	movs	r3, #4
 8002be2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002be6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002bea:	4619      	mov	r1, r3
 8002bec:	480b      	ldr	r0, [pc, #44]	; (8002c1c <HAL_I2C_MspInit+0xb8>)
 8002bee:	f000 fbad 	bl	800334c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_I2C_MspInit+0xb4>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <HAL_I2C_MspInit+0xb4>)
 8002bf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_I2C_MspInit+0xb4>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c0a:	bf00      	nop
 8002c0c:	37b8      	adds	r7, #184	; 0xb8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40005800 	.word	0x40005800
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	48001400 	.word	0x48001400

08002c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b0ae      	sub	sp, #184	; 0xb8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	2294      	movs	r2, #148	; 0x94
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f007 fb75 	bl	800a330 <memset>
  if(huart->Instance==LPUART1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_UART_MspInit+0xb4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d13d      	bne.n	8002ccc <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002c50:	2320      	movs	r3, #32
 8002c52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002c54:	2300      	movs	r3, #0
 8002c56:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f002 fa55 	bl	800510c <HAL_RCCEx_PeriphCLKConfig>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c68:	f7ff ff52 	bl	8002b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_UART_MspInit+0xb8>)
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_UART_MspInit+0xb8>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_UART_MspInit+0xb8>)
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_UART_MspInit+0xb8>)
 8002c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c88:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <HAL_UART_MspInit+0xb8>)
 8002c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_UART_MspInit+0xb8>)
 8002c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002c9c:	f001 fb4e 	bl	800433c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ca0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002cba:	2308      	movs	r3, #8
 8002cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4805      	ldr	r0, [pc, #20]	; (8002cdc <HAL_UART_MspInit+0xbc>)
 8002cc8:	f000 fb40 	bl	800334c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002ccc:	bf00      	nop
 8002cce:	37b8      	adds	r7, #184	; 0xb8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40008000 	.word	0x40008000
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	48001800 	.word	0x48001800

08002ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	; 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 031c 	add.w	r3, r7, #28
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a2e      	ldr	r2, [pc, #184]	; (8002db8 <HAL_SPI_MspInit+0xd8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d129      	bne.n	8002d56 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d06:	4a2d      	ldr	r2, [pc, #180]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d26:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d32:	23f0      	movs	r3, #240	; 0xf0
 8002d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d42:	2305      	movs	r3, #5
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d50:	f000 fafc 	bl	800334c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002d54:	e02c      	b.n	8002db0 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <HAL_SPI_MspInit+0xe0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d127      	bne.n	8002db0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	4a15      	ldr	r2, [pc, #84]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_SPI_MspInit+0xdc>)
 8002d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002d90:	2338      	movs	r3, #56	; 0x38
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002da0:	2306      	movs	r3, #6
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	4619      	mov	r1, r3
 8002daa:	4806      	ldr	r0, [pc, #24]	; (8002dc4 <HAL_SPI_MspInit+0xe4>)
 8002dac:	f000 face 	bl	800334c <HAL_GPIO_Init>
}
 8002db0:	bf00      	nop
 8002db2:	3730      	adds	r7, #48	; 0x30
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40013000 	.word	0x40013000
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40003c00 	.word	0x40003c00
 8002dc4:	48000400 	.word	0x48000400

08002dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <NMI_Handler+0x4>

08002dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <HardFault_Handler+0x4>

08002dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <MemManage_Handler+0x4>

08002dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <BusFault_Handler+0x4>

08002de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <UsageFault_Handler+0x4>

08002de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <SysTick_Handler+0x34>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <SysTick_Handler+0x18>
			Timer1--;
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <SysTick_Handler+0x34>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <SysTick_Handler+0x34>)
 8002e26:	801a      	strh	r2, [r3, #0]

		if(Timer2 > 0)
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <SysTick_Handler+0x38>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <SysTick_Handler+0x2c>
			Timer2--;
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <SysTick_Handler+0x38>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <SysTick_Handler+0x38>)
 8002e3a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e3c:	f000 f95c 	bl	80030f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000210 	.word	0x20000210
 8002e48:	20000212 	.word	0x20000212

08002e4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
	return 1;
 8002e50:	2301      	movs	r3, #1
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <_kill>:

int _kill(int pid, int sig)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e66:	f007 fa31 	bl	800a2cc <__errno>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2216      	movs	r2, #22
 8002e6e:	601a      	str	r2, [r3, #0]
	return -1;
 8002e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_exit>:

void _exit (int status)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e84:	f04f 31ff 	mov.w	r1, #4294967295
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ffe7 	bl	8002e5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e8e:	e7fe      	b.n	8002e8e <_exit+0x12>

08002e90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	e00a      	b.n	8002eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ea2:	f3af 8000 	nop.w
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	60ba      	str	r2, [r7, #8]
 8002eae:	b2ca      	uxtb	r2, r1
 8002eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	dbf0      	blt.n	8002ea2 <_read+0x12>
	}

return len;
 8002ec0:	687b      	ldr	r3, [r7, #4]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e009      	b.n	8002ef0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	60ba      	str	r2, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fe01 	bl	8002aec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	3301      	adds	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	dbf1      	blt.n	8002edc <_write+0x12>
	}
	return len;
 8002ef8:	687b      	ldr	r3, [r7, #4]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_close>:

int _close(int file)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
	return -1;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f2a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <_isatty>:

int _isatty(int file)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
	return 1;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <_sbrk+0x5c>)
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <_sbrk+0x60>)
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f80:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <_sbrk+0x64>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <_sbrk+0x64>)
 8002f8a:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <_sbrk+0x68>)
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <_sbrk+0x64>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d207      	bcs.n	8002fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f9c:	f007 f996 	bl	800a2cc <__errno>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	e009      	b.n	8002fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <_sbrk+0x64>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <_sbrk+0x64>)
 8002fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200a0000 	.word	0x200a0000
 8002fcc:	00000400 	.word	0x00000400
 8002fd0:	20000834 	.word	0x20000834
 8002fd4:	20000888 	.word	0x20000888

08002fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <SystemInit+0x20>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <SystemInit+0x20>)
 8002fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003034 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003000:	f7ff ffea 	bl	8002fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003004:	480c      	ldr	r0, [pc, #48]	; (8003038 <LoopForever+0x6>)
  ldr r1, =_edata
 8003006:	490d      	ldr	r1, [pc, #52]	; (800303c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003008:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <LoopForever+0xe>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800300c:	e002      	b.n	8003014 <LoopCopyDataInit>

0800300e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003012:	3304      	adds	r3, #4

08003014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003018:	d3f9      	bcc.n	800300e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800301c:	4c0a      	ldr	r4, [pc, #40]	; (8003048 <LoopForever+0x16>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003020:	e001      	b.n	8003026 <LoopFillZerobss>

08003022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003024:	3204      	adds	r2, #4

08003026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003028:	d3fb      	bcc.n	8003022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800302a:	f007 f955 	bl	800a2d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800302e:	f7fe fe97 	bl	8001d60 <main>

08003032 <LoopForever>:

LoopForever:
    b LoopForever
 8003032:	e7fe      	b.n	8003032 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003034:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800303c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003040:	0800e45c 	.word	0x0800e45c
  ldr r2, =_sbss
 8003044:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003048:	20000888 	.word	0x20000888

0800304c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800304c:	e7fe      	b.n	800304c <ADC1_IRQHandler>

0800304e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003058:	2003      	movs	r0, #3
 800305a:	f000 f943 	bl	80032e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800305e:	2000      	movs	r0, #0
 8003060:	f000 f80e 	bl	8003080 <HAL_InitTick>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	71fb      	strb	r3, [r7, #7]
 800306e:	e001      	b.n	8003074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003070:	f7ff fd54 	bl	8002b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003074:	79fb      	ldrb	r3, [r7, #7]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800308c:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_InitTick+0x6c>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d023      	beq.n	80030dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003094:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_InitTick+0x70>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_InitTick+0x6c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	4619      	mov	r1, r3
 800309e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f941 	bl	8003332 <HAL_SYSTICK_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b0f      	cmp	r3, #15
 80030ba:	d809      	bhi.n	80030d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030bc:	2200      	movs	r2, #0
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	f000 f919 	bl	80032fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <HAL_InitTick+0x74>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e007      	b.n	80030e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	e004      	b.n	80030e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
 80030da:	e001      	b.n	80030e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2000000c 	.word	0x2000000c
 80030f0:	20000004 	.word	0x20000004
 80030f4:	20000008 	.word	0x20000008

080030f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_IncTick+0x20>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_IncTick+0x24>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4413      	add	r3, r2
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <HAL_IncTick+0x24>)
 800310a:	6013      	str	r3, [r2, #0]
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	2000000c 	.word	0x2000000c
 800311c:	20000838 	.word	0x20000838

08003120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return uwTick;
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <HAL_GetTick+0x14>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000838 	.word	0x20000838

08003138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff ffee 	bl	8003120 <HAL_GetTick>
 8003144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d005      	beq.n	800315e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <HAL_Delay+0x44>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800315e:	bf00      	nop
 8003160:	f7ff ffde 	bl	8003120 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	429a      	cmp	r2, r3
 800316e:	d8f7      	bhi.n	8003160 <HAL_Delay+0x28>
  {
  }
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	2000000c 	.word	0x2000000c

08003180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800319c:	4013      	ands	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b2:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	60d3      	str	r3, [r2, #12]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <__NVIC_GetPriorityGrouping+0x18>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 0307 	and.w	r3, r3, #7
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	; (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
         );
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b0:	d301      	bcc.n	80032b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00f      	b.n	80032d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <SysTick_Config+0x40>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032be:	210f      	movs	r1, #15
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	f7ff ff8e 	bl	80031e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <SysTick_Config+0x40>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <SysTick_Config+0x40>)
 80032d0:	2207      	movs	r2, #7
 80032d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000e010 	.word	0xe000e010

080032e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff47 	bl	8003180 <__NVIC_SetPriorityGrouping>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800330c:	f7ff ff5c 	bl	80031c8 <__NVIC_GetPriorityGrouping>
 8003310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff ff8e 	bl	8003238 <NVIC_EncodePriority>
 800331c:	4602      	mov	r2, r0
 800331e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff5d 	bl	80031e4 <__NVIC_SetPriority>
}
 800332a:	bf00      	nop
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ffb0 	bl	80032a0 <SysTick_Config>
 8003340:	4603      	mov	r3, r0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800335a:	e166      	b.n	800362a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	2101      	movs	r1, #1
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	4013      	ands	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8158 	beq.w	8003624 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d005      	beq.n	800338c <HAL_GPIO_Init+0x40>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d130      	bne.n	80033ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4013      	ands	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033c2:	2201      	movs	r2, #1
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	f003 0201 	and.w	r2, r3, #1
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d017      	beq.n	800342a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	2203      	movs	r2, #3
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4013      	ands	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d123      	bne.n	800347e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	08da      	lsrs	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3208      	adds	r2, #8
 800343e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	220f      	movs	r2, #15
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	08da      	lsrs	r2, r3, #3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3208      	adds	r2, #8
 8003478:	6939      	ldr	r1, [r7, #16]
 800347a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	2203      	movs	r2, #3
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0203 	and.w	r2, r3, #3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80b2 	beq.w	8003624 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c0:	4b61      	ldr	r3, [pc, #388]	; (8003648 <HAL_GPIO_Init+0x2fc>)
 80034c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c4:	4a60      	ldr	r2, [pc, #384]	; (8003648 <HAL_GPIO_Init+0x2fc>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6613      	str	r3, [r2, #96]	; 0x60
 80034cc:	4b5e      	ldr	r3, [pc, #376]	; (8003648 <HAL_GPIO_Init+0x2fc>)
 80034ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034d8:	4a5c      	ldr	r2, [pc, #368]	; (800364c <HAL_GPIO_Init+0x300>)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	089b      	lsrs	r3, r3, #2
 80034de:	3302      	adds	r3, #2
 80034e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	220f      	movs	r2, #15
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003502:	d02b      	beq.n	800355c <HAL_GPIO_Init+0x210>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a52      	ldr	r2, [pc, #328]	; (8003650 <HAL_GPIO_Init+0x304>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d025      	beq.n	8003558 <HAL_GPIO_Init+0x20c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a51      	ldr	r2, [pc, #324]	; (8003654 <HAL_GPIO_Init+0x308>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d01f      	beq.n	8003554 <HAL_GPIO_Init+0x208>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a50      	ldr	r2, [pc, #320]	; (8003658 <HAL_GPIO_Init+0x30c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d019      	beq.n	8003550 <HAL_GPIO_Init+0x204>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a4f      	ldr	r2, [pc, #316]	; (800365c <HAL_GPIO_Init+0x310>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <HAL_GPIO_Init+0x200>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a4e      	ldr	r2, [pc, #312]	; (8003660 <HAL_GPIO_Init+0x314>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00d      	beq.n	8003548 <HAL_GPIO_Init+0x1fc>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a4d      	ldr	r2, [pc, #308]	; (8003664 <HAL_GPIO_Init+0x318>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d007      	beq.n	8003544 <HAL_GPIO_Init+0x1f8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a4c      	ldr	r2, [pc, #304]	; (8003668 <HAL_GPIO_Init+0x31c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d101      	bne.n	8003540 <HAL_GPIO_Init+0x1f4>
 800353c:	2307      	movs	r3, #7
 800353e:	e00e      	b.n	800355e <HAL_GPIO_Init+0x212>
 8003540:	2308      	movs	r3, #8
 8003542:	e00c      	b.n	800355e <HAL_GPIO_Init+0x212>
 8003544:	2306      	movs	r3, #6
 8003546:	e00a      	b.n	800355e <HAL_GPIO_Init+0x212>
 8003548:	2305      	movs	r3, #5
 800354a:	e008      	b.n	800355e <HAL_GPIO_Init+0x212>
 800354c:	2304      	movs	r3, #4
 800354e:	e006      	b.n	800355e <HAL_GPIO_Init+0x212>
 8003550:	2303      	movs	r3, #3
 8003552:	e004      	b.n	800355e <HAL_GPIO_Init+0x212>
 8003554:	2302      	movs	r3, #2
 8003556:	e002      	b.n	800355e <HAL_GPIO_Init+0x212>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_GPIO_Init+0x212>
 800355c:	2300      	movs	r3, #0
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	f002 0203 	and.w	r2, r2, #3
 8003564:	0092      	lsls	r2, r2, #2
 8003566:	4093      	lsls	r3, r2
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800356e:	4937      	ldr	r1, [pc, #220]	; (800364c <HAL_GPIO_Init+0x300>)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800357c:	4b3b      	ldr	r3, [pc, #236]	; (800366c <HAL_GPIO_Init+0x320>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	43db      	mvns	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035a0:	4a32      	ldr	r2, [pc, #200]	; (800366c <HAL_GPIO_Init+0x320>)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035a6:	4b31      	ldr	r3, [pc, #196]	; (800366c <HAL_GPIO_Init+0x320>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ca:	4a28      	ldr	r2, [pc, #160]	; (800366c <HAL_GPIO_Init+0x320>)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035d0:	4b26      	ldr	r3, [pc, #152]	; (800366c <HAL_GPIO_Init+0x320>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	43db      	mvns	r3, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035f4:	4a1d      	ldr	r2, [pc, #116]	; (800366c <HAL_GPIO_Init+0x320>)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035fa:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_GPIO_Init+0x320>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	43db      	mvns	r3, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4013      	ands	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800361e:	4a13      	ldr	r2, [pc, #76]	; (800366c <HAL_GPIO_Init+0x320>)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3301      	adds	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	f47f ae91 	bne.w	800335c <HAL_GPIO_Init+0x10>
  }
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	40021000 	.word	0x40021000
 800364c:	40010000 	.word	0x40010000
 8003650:	48000400 	.word	0x48000400
 8003654:	48000800 	.word	0x48000800
 8003658:	48000c00 	.word	0x48000c00
 800365c:	48001000 	.word	0x48001000
 8003660:	48001400 	.word	0x48001400
 8003664:	48001800 	.word	0x48001800
 8003668:	48001c00 	.word	0x48001c00
 800366c:	40010400 	.word	0x40010400

08003670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	807b      	strh	r3, [r7, #2]
 800367c:	4613      	mov	r3, r2
 800367e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003680:	787b      	ldrb	r3, [r7, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800368c:	e002      	b.n	8003694 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e081      	b.n	80037b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fa4c 	bl	8002b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003700:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	e006      	b.n	8003728 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003726:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d104      	bne.n	800373a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003738:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800374c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69d9      	ldr	r1, [r3, #28]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1a      	ldr	r2, [r3, #32]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	461a      	mov	r2, r3
 80037cc:	460b      	mov	r3, r1
 80037ce:	817b      	strh	r3, [r7, #10]
 80037d0:	4613      	mov	r3, r2
 80037d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b20      	cmp	r3, #32
 80037de:	f040 80da 	bne.w	8003996 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_I2C_Master_Transmit+0x30>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0d3      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037f8:	f7ff fc92 	bl	8003120 <HAL_GetTick>
 80037fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2319      	movs	r3, #25
 8003804:	2201      	movs	r2, #1
 8003806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f9e6 	bl	8003bdc <I2C_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0be      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2221      	movs	r2, #33	; 0x21
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2210      	movs	r2, #16
 8003826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	893a      	ldrh	r2, [r7, #8]
 800383a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2bff      	cmp	r3, #255	; 0xff
 800384a:	d90e      	bls.n	800386a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	22ff      	movs	r2, #255	; 0xff
 8003850:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	b2da      	uxtb	r2, r3
 8003858:	8979      	ldrh	r1, [r7, #10]
 800385a:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fbdc 	bl	8004020 <I2C_TransferConfig>
 8003868:	e06c      	b.n	8003944 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	b2da      	uxtb	r2, r3
 800387a:	8979      	ldrh	r1, [r7, #10]
 800387c:	4b48      	ldr	r3, [pc, #288]	; (80039a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fbcb 	bl	8004020 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800388a:	e05b      	b.n	8003944 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	6a39      	ldr	r1, [r7, #32]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f9e3 	bl	8003c5c <I2C_WaitOnTXISFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e07b      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d034      	beq.n	8003944 <HAL_I2C_Master_Transmit+0x184>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d130      	bne.n	8003944 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f975 	bl	8003bdc <I2C_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04d      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2bff      	cmp	r3, #255	; 0xff
 8003904:	d90e      	bls.n	8003924 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	22ff      	movs	r2, #255	; 0xff
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	b2da      	uxtb	r2, r3
 8003912:	8979      	ldrh	r1, [r7, #10]
 8003914:	2300      	movs	r3, #0
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fb7f 	bl	8004020 <I2C_TransferConfig>
 8003922:	e00f      	b.n	8003944 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	b2da      	uxtb	r2, r3
 8003934:	8979      	ldrh	r1, [r7, #10]
 8003936:	2300      	movs	r3, #0
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fb6e 	bl	8004020 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d19e      	bne.n	800388c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	6a39      	ldr	r1, [r7, #32]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f9c2 	bl	8003cdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e01a      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2220      	movs	r2, #32
 8003968:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003976:	400b      	ands	r3, r1
 8003978:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	80002000 	.word	0x80002000
 80039a4:	fe00e800 	.word	0xfe00e800

080039a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	460b      	mov	r3, r1
 80039b6:	817b      	strh	r3, [r7, #10]
 80039b8:	4613      	mov	r3, r2
 80039ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	f040 80db 	bne.w	8003b80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_I2C_Master_Receive+0x30>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e0d4      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039e0:	f7ff fb9e 	bl	8003120 <HAL_GetTick>
 80039e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2319      	movs	r3, #25
 80039ec:	2201      	movs	r2, #1
 80039ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f8f2 	bl	8003bdc <I2C_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0bf      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2222      	movs	r2, #34	; 0x22
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2210      	movs	r2, #16
 8003a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	893a      	ldrh	r2, [r7, #8]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2bff      	cmp	r3, #255	; 0xff
 8003a32:	d90e      	bls.n	8003a52 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	22ff      	movs	r2, #255	; 0xff
 8003a38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	8979      	ldrh	r1, [r7, #10]
 8003a42:	4b52      	ldr	r3, [pc, #328]	; (8003b8c <HAL_I2C_Master_Receive+0x1e4>)
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fae8 	bl	8004020 <I2C_TransferConfig>
 8003a50:	e06d      	b.n	8003b2e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	8979      	ldrh	r1, [r7, #10]
 8003a64:	4b49      	ldr	r3, [pc, #292]	; (8003b8c <HAL_I2C_Master_Receive+0x1e4>)
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fad7 	bl	8004020 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003a72:	e05c      	b.n	8003b2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	6a39      	ldr	r1, [r7, #32]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f96b 	bl	8003d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e07c      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d034      	beq.n	8003b2e <HAL_I2C_Master_Receive+0x186>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d130      	bne.n	8003b2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2180      	movs	r1, #128	; 0x80
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f880 	bl	8003bdc <I2C_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e04d      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2bff      	cmp	r3, #255	; 0xff
 8003aee:	d90e      	bls.n	8003b0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	22ff      	movs	r2, #255	; 0xff
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	8979      	ldrh	r1, [r7, #10]
 8003afe:	2300      	movs	r3, #0
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fa8a 	bl	8004020 <I2C_TransferConfig>
 8003b0c:	e00f      	b.n	8003b2e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	8979      	ldrh	r1, [r7, #10]
 8003b20:	2300      	movs	r3, #0
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fa79 	bl	8004020 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d19d      	bne.n	8003a74 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	6a39      	ldr	r1, [r7, #32]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f8cd 	bl	8003cdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e01a      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2220      	movs	r2, #32
 8003b52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <HAL_I2C_Master_Receive+0x1e8>)
 8003b60:	400b      	ands	r3, r1
 8003b62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	80002400 	.word	0x80002400
 8003b90:	fe00e800 	.word	0xfe00e800

08003b94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d103      	bne.n	8003bb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d007      	beq.n	8003bd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	619a      	str	r2, [r3, #24]
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bec:	e022      	b.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf4:	d01e      	beq.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7ff fa93 	bl	8003120 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d113      	bne.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e00f      	b.n	8003c54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d0cd      	beq.n	8003bee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c68:	e02c      	b.n	8003cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f8ea 	bl	8003e48 <I2C_IsErrorOccurred>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e02a      	b.n	8003cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d01e      	beq.n	8003cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7ff fa4b 	bl	8003120 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d113      	bne.n	8003cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e007      	b.n	8003cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d1cb      	bne.n	8003c6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ce8:	e028      	b.n	8003d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f8aa 	bl	8003e48 <I2C_IsErrorOccurred>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e026      	b.n	8003d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfe:	f7ff fa0f 	bl	8003120 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d302      	bcc.n	8003d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d113      	bne.n	8003d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	f043 0220 	orr.w	r2, r3, #32
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e007      	b.n	8003d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d1cf      	bne.n	8003cea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d60:	e064      	b.n	8003e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f86e 	bl	8003e48 <I2C_IsErrorOccurred>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e062      	b.n	8003e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d138      	bne.n	8003df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d105      	bne.n	8003d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e04e      	b.n	8003e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	d107      	bne.n	8003dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2210      	movs	r2, #16
 8003db2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2204      	movs	r2, #4
 8003db8:	645a      	str	r2, [r3, #68]	; 0x44
 8003dba:	e002      	b.n	8003dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003dd6:	400b      	ands	r3, r1
 8003dd8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e022      	b.n	8003e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df6:	f7ff f993 	bl	8003120 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d302      	bcc.n	8003e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10f      	bne.n	8003e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d193      	bne.n	8003d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	fe00e800 	.word	0xfe00e800

08003e48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	; 0x28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d075      	beq.n	8003f60 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2210      	movs	r2, #16
 8003e7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e7c:	e056      	b.n	8003f2c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d052      	beq.n	8003f2c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7ff f94b 	bl	8003120 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <I2C_IsErrorOccurred+0x54>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d147      	bne.n	8003f2c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebe:	d12e      	bne.n	8003f1e <I2C_IsErrorOccurred+0xd6>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec6:	d02a      	beq.n	8003f1e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d027      	beq.n	8003f1e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003edc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ede:	f7ff f91f 	bl	8003120 <HAL_GetTick>
 8003ee2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ee4:	e01b      	b.n	8003f1e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ee6:	f7ff f91b 	bl	8003120 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b19      	cmp	r3, #25
 8003ef2:	d914      	bls.n	8003f1e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d1dc      	bne.n	8003ee6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d003      	beq.n	8003f42 <I2C_IsErrorOccurred+0xfa>
 8003f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d09d      	beq.n	8003e7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f043 0304 	orr.w	r3, r3, #4
 8003f58:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	f043 0308 	orr.w	r3, r3, #8
 8003f9a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	f043 0302 	orr.w	r3, r3, #2
 8003fbc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01c      	beq.n	8004010 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7ff fddc 	bl	8003b94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	; (800401c <I2C_IsErrorOccurred+0x1d4>)
 8003fe8:	400b      	ands	r3, r1
 8003fea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004014:	4618      	mov	r0, r3
 8004016:	3728      	adds	r7, #40	; 0x28
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	fe00e800 	.word	0xfe00e800

08004020 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	607b      	str	r3, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	817b      	strh	r3, [r7, #10]
 800402e:	4613      	mov	r3, r2
 8004030:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004032:	897b      	ldrh	r3, [r7, #10]
 8004034:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004038:	7a7b      	ldrb	r3, [r7, #9]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004040:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	4313      	orrs	r3, r2
 800404a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800404e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	0d5b      	lsrs	r3, r3, #21
 800405a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <I2C_TransferConfig+0x60>)
 8004060:	430b      	orrs	r3, r1
 8004062:	43db      	mvns	r3, r3
 8004064:	ea02 0103 	and.w	r1, r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	03ff63ff 	.word	0x03ff63ff

08004084 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b20      	cmp	r3, #32
 8004098:	d138      	bne.n	800410c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e032      	b.n	800410e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2224      	movs	r2, #36	; 0x24
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0201 	bic.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6819      	ldr	r1, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800411a:	b480      	push	{r7}
 800411c:	b085      	sub	sp, #20
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b20      	cmp	r3, #32
 800412e:	d139      	bne.n	80041a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800413a:	2302      	movs	r3, #2
 800413c:	e033      	b.n	80041a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2224      	movs	r2, #36	; 0x24
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800416c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	e000      	b.n	80041a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c4:	d102      	bne.n	80041cc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80041c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ca:	e00b      	b.n	80041e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80041ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041da:	d102      	bne.n	80041e2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80041dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041e0:	e000      	b.n	80041e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80041e2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40007000 	.word	0x40007000

080041f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d141      	bne.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004202:	4b4b      	ldr	r3, [pc, #300]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800420a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420e:	d131      	bne.n	8004274 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004210:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004216:	4a46      	ldr	r2, [pc, #280]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800421c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004220:	4b43      	ldr	r3, [pc, #268]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004228:	4a41      	ldr	r2, [pc, #260]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004230:	4b40      	ldr	r3, [pc, #256]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2232      	movs	r2, #50	; 0x32
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	4a3f      	ldr	r2, [pc, #252]	; (8004338 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	0c9b      	lsrs	r3, r3, #18
 8004242:	3301      	adds	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004246:	e002      	b.n	800424e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3b01      	subs	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800424e:	4b38      	ldr	r3, [pc, #224]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d102      	bne.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f2      	bne.n	8004248 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004262:	4b33      	ldr	r3, [pc, #204]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426e:	d158      	bne.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e057      	b.n	8004324 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004274:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427a:	4a2d      	ldr	r2, [pc, #180]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004280:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004284:	e04d      	b.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428c:	d141      	bne.n	8004312 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800428e:	4b28      	ldr	r3, [pc, #160]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429a:	d131      	bne.n	8004300 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a2:	4a23      	ldr	r2, [pc, #140]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042ac:	4b20      	ldr	r3, [pc, #128]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042b4:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042bc:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2232      	movs	r2, #50	; 0x32
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	4a1c      	ldr	r2, [pc, #112]	; (8004338 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	0c9b      	lsrs	r3, r3, #18
 80042ce:	3301      	adds	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d2:	e002      	b.n	80042da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042da:	4b15      	ldr	r3, [pc, #84]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e6:	d102      	bne.n	80042ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f2      	bne.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fa:	d112      	bne.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e011      	b.n	8004324 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004306:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004310:	e007      	b.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800431a:	4a05      	ldr	r2, [pc, #20]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004320:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40007000 	.word	0x40007000
 8004334:	20000004 	.word	0x20000004
 8004338:	431bde83 	.word	0x431bde83

0800433c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	4a04      	ldr	r2, [pc, #16]	; (8004358 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800434a:	6053      	str	r3, [r2, #4]
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40007000 	.word	0x40007000

0800435c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f000 bc08 	b.w	8004b80 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004370:	4b96      	ldr	r3, [pc, #600]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800437a:	4b94      	ldr	r3, [pc, #592]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80e4 	beq.w	800455a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <HAL_RCC_OscConfig+0x4c>
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b0c      	cmp	r3, #12
 800439c:	f040 808b 	bne.w	80044b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	f040 8087 	bne.w	80044b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043a8:	4b88      	ldr	r3, [pc, #544]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_OscConfig+0x64>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e3df      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1a      	ldr	r2, [r3, #32]
 80043c4:	4b81      	ldr	r3, [pc, #516]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d004      	beq.n	80043da <HAL_RCC_OscConfig+0x7e>
 80043d0:	4b7e      	ldr	r3, [pc, #504]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d8:	e005      	b.n	80043e6 <HAL_RCC_OscConfig+0x8a>
 80043da:	4b7c      	ldr	r3, [pc, #496]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80043dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d223      	bcs.n	8004432 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fdcc 	bl	8004f8c <RCC_SetFlashLatencyFromMSIRange>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e3c0      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043fe:	4b73      	ldr	r3, [pc, #460]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a72      	ldr	r2, [pc, #456]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004404:	f043 0308 	orr.w	r3, r3, #8
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	4b70      	ldr	r3, [pc, #448]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	496d      	ldr	r1, [pc, #436]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004418:	4313      	orrs	r3, r2
 800441a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800441c:	4b6b      	ldr	r3, [pc, #428]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	4968      	ldr	r1, [pc, #416]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 800442c:	4313      	orrs	r3, r2
 800442e:	604b      	str	r3, [r1, #4]
 8004430:	e025      	b.n	800447e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004432:	4b66      	ldr	r3, [pc, #408]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a65      	ldr	r2, [pc, #404]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004438:	f043 0308 	orr.w	r3, r3, #8
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4b63      	ldr	r3, [pc, #396]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	4960      	ldr	r1, [pc, #384]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 800444c:	4313      	orrs	r3, r2
 800444e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004450:	4b5e      	ldr	r3, [pc, #376]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	495b      	ldr	r1, [pc, #364]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fd8c 	bl	8004f8c <RCC_SetFlashLatencyFromMSIRange>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e380      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800447e:	f000 fcc1 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8004482:	4602      	mov	r2, r0
 8004484:	4b51      	ldr	r3, [pc, #324]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	4950      	ldr	r1, [pc, #320]	; (80045d0 <HAL_RCC_OscConfig+0x274>)
 8004490:	5ccb      	ldrb	r3, [r1, r3]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a4e      	ldr	r2, [pc, #312]	; (80045d4 <HAL_RCC_OscConfig+0x278>)
 800449c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800449e:	4b4e      	ldr	r3, [pc, #312]	; (80045d8 <HAL_RCC_OscConfig+0x27c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe fdec 	bl	8003080 <HAL_InitTick>
 80044a8:	4603      	mov	r3, r0
 80044aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d052      	beq.n	8004558 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	e364      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d032      	beq.n	8004524 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044be:	4b43      	ldr	r3, [pc, #268]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a42      	ldr	r2, [pc, #264]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044ca:	f7fe fe29 	bl	8003120 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044d2:	f7fe fe25 	bl	8003120 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e34d      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044e4:	4b39      	ldr	r3, [pc, #228]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044f0:	4b36      	ldr	r3, [pc, #216]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a35      	ldr	r2, [pc, #212]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80044f6:	f043 0308 	orr.w	r3, r3, #8
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	4b33      	ldr	r3, [pc, #204]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4930      	ldr	r1, [pc, #192]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800450e:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	492b      	ldr	r1, [pc, #172]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 800451e:	4313      	orrs	r3, r2
 8004520:	604b      	str	r3, [r1, #4]
 8004522:	e01a      	b.n	800455a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004524:	4b29      	ldr	r3, [pc, #164]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a28      	ldr	r2, [pc, #160]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004530:	f7fe fdf6 	bl	8003120 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004538:	f7fe fdf2 	bl	8003120 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e31a      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x1dc>
 8004556:	e000      	b.n	800455a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004558:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d073      	beq.n	800464e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d005      	beq.n	8004578 <HAL_RCC_OscConfig+0x21c>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	d10e      	bne.n	8004590 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d10b      	bne.n	8004590 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004578:	4b14      	ldr	r3, [pc, #80]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d063      	beq.n	800464c <HAL_RCC_OscConfig+0x2f0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d15f      	bne.n	800464c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e2f7      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d106      	bne.n	80045a8 <HAL_RCC_OscConfig+0x24c>
 800459a:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a0b      	ldr	r2, [pc, #44]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e025      	b.n	80045f4 <HAL_RCC_OscConfig+0x298>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045b0:	d114      	bne.n	80045dc <HAL_RCC_OscConfig+0x280>
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a05      	ldr	r2, [pc, #20]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80045b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	4b03      	ldr	r3, [pc, #12]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a02      	ldr	r2, [pc, #8]	; (80045cc <HAL_RCC_OscConfig+0x270>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e013      	b.n	80045f4 <HAL_RCC_OscConfig+0x298>
 80045cc:	40021000 	.word	0x40021000
 80045d0:	0800df84 	.word	0x0800df84
 80045d4:	20000004 	.word	0x20000004
 80045d8:	20000008 	.word	0x20000008
 80045dc:	4ba0      	ldr	r3, [pc, #640]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a9f      	ldr	r2, [pc, #636]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80045e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4b9d      	ldr	r3, [pc, #628]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a9c      	ldr	r2, [pc, #624]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80045ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d013      	beq.n	8004624 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fe fd90 	bl	8003120 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004604:	f7fe fd8c 	bl	8003120 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e2b4      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004616:	4b92      	ldr	r3, [pc, #584]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x2a8>
 8004622:	e014      	b.n	800464e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fe fd7c 	bl	8003120 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800462c:	f7fe fd78 	bl	8003120 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	; 0x64
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e2a0      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800463e:	4b88      	ldr	r3, [pc, #544]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x2d0>
 800464a:	e000      	b.n	800464e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d060      	beq.n	800471c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b04      	cmp	r3, #4
 800465e:	d005      	beq.n	800466c <HAL_RCC_OscConfig+0x310>
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b0c      	cmp	r3, #12
 8004664:	d119      	bne.n	800469a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d116      	bne.n	800469a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800466c:	4b7c      	ldr	r3, [pc, #496]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_OscConfig+0x328>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e27d      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004684:	4b76      	ldr	r3, [pc, #472]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	4973      	ldr	r1, [pc, #460]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004698:	e040      	b.n	800471c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d023      	beq.n	80046ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a2:	4b6f      	ldr	r3, [pc, #444]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a6e      	ldr	r2, [pc, #440]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80046a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ae:	f7fe fd37 	bl	8003120 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b6:	f7fe fd33 	bl	8003120 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e25b      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c8:	4b65      	ldr	r3, [pc, #404]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d4:	4b62      	ldr	r3, [pc, #392]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	061b      	lsls	r3, r3, #24
 80046e2:	495f      	ldr	r1, [pc, #380]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
 80046e8:	e018      	b.n	800471c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ea:	4b5d      	ldr	r3, [pc, #372]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a5c      	ldr	r2, [pc, #368]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80046f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fe fd13 	bl	8003120 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fe:	f7fe fd0f 	bl	8003120 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e237      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004710:	4b53      	ldr	r3, [pc, #332]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d03c      	beq.n	80047a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01c      	beq.n	800476a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004730:	4b4b      	ldr	r3, [pc, #300]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	4a4a      	ldr	r2, [pc, #296]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fe fcee 	bl	8003120 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004748:	f7fe fcea 	bl	8003120 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e212      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800475a:	4b41      	ldr	r3, [pc, #260]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 800475c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ef      	beq.n	8004748 <HAL_RCC_OscConfig+0x3ec>
 8004768:	e01b      	b.n	80047a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800476a:	4b3d      	ldr	r3, [pc, #244]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 800476c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004770:	4a3b      	ldr	r2, [pc, #236]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477a:	f7fe fcd1 	bl	8003120 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004782:	f7fe fccd 	bl	8003120 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e1f5      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004794:	4b32      	ldr	r3, [pc, #200]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1ef      	bne.n	8004782 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80a6 	beq.w	80048fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b0:	2300      	movs	r3, #0
 80047b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047b4:	4b2a      	ldr	r3, [pc, #168]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	4a26      	ldr	r2, [pc, #152]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80047c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ca:	6593      	str	r3, [r2, #88]	; 0x58
 80047cc:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d8:	2301      	movs	r3, #1
 80047da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047dc:	4b21      	ldr	r3, [pc, #132]	; (8004864 <HAL_RCC_OscConfig+0x508>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d118      	bne.n	800481a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e8:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <HAL_RCC_OscConfig+0x508>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <HAL_RCC_OscConfig+0x508>)
 80047ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f4:	f7fe fc94 	bl	8003120 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fc:	f7fe fc90 	bl	8003120 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e1b8      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480e:	4b15      	ldr	r3, [pc, #84]	; (8004864 <HAL_RCC_OscConfig+0x508>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d108      	bne.n	8004834 <HAL_RCC_OscConfig+0x4d8>
 8004822:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004828:	4a0d      	ldr	r2, [pc, #52]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004832:	e029      	b.n	8004888 <HAL_RCC_OscConfig+0x52c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b05      	cmp	r3, #5
 800483a:	d115      	bne.n	8004868 <HAL_RCC_OscConfig+0x50c>
 800483c:	4b08      	ldr	r3, [pc, #32]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	4a07      	ldr	r2, [pc, #28]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004844:	f043 0304 	orr.w	r3, r3, #4
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	4a03      	ldr	r2, [pc, #12]	; (8004860 <HAL_RCC_OscConfig+0x504>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800485c:	e014      	b.n	8004888 <HAL_RCC_OscConfig+0x52c>
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000
 8004864:	40007000 	.word	0x40007000
 8004868:	4b9d      	ldr	r3, [pc, #628]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	4a9c      	ldr	r2, [pc, #624]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004878:	4b99      	ldr	r3, [pc, #612]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	4a98      	ldr	r2, [pc, #608]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d016      	beq.n	80048be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fe fc46 	bl	8003120 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fe fc42 	bl	8003120 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e168      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ae:	4b8c      	ldr	r3, [pc, #560]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ed      	beq.n	8004898 <HAL_RCC_OscConfig+0x53c>
 80048bc:	e015      	b.n	80048ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048be:	f7fe fc2f 	bl	8003120 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c4:	e00a      	b.n	80048dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f7fe fc2b 	bl	8003120 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e151      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048dc:	4b80      	ldr	r3, [pc, #512]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1ed      	bne.n	80048c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ea:	7ffb      	ldrb	r3, [r7, #31]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d105      	bne.n	80048fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f0:	4b7b      	ldr	r3, [pc, #492]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	4a7a      	ldr	r2, [pc, #488]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 80048f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d03c      	beq.n	8004982 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01c      	beq.n	800494a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004910:	4b73      	ldr	r3, [pc, #460]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004916:	4a72      	ldr	r2, [pc, #456]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fe fbfe 	bl	8003120 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004928:	f7fe fbfa 	bl	8003120 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e122      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800493a:	4b69      	ldr	r3, [pc, #420]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 800493c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0ef      	beq.n	8004928 <HAL_RCC_OscConfig+0x5cc>
 8004948:	e01b      	b.n	8004982 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800494a:	4b65      	ldr	r3, [pc, #404]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 800494c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004950:	4a63      	ldr	r2, [pc, #396]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495a:	f7fe fbe1 	bl	8003120 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004962:	f7fe fbdd 	bl	8003120 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e105      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004974:	4b5a      	ldr	r3, [pc, #360]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1ef      	bne.n	8004962 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80f9 	beq.w	8004b7e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	2b02      	cmp	r3, #2
 8004992:	f040 80cf 	bne.w	8004b34 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004996:	4b52      	ldr	r3, [pc, #328]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f003 0203 	and.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d12c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	3b01      	subs	r3, #1
 80049b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d123      	bne.n	8004a04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d11b      	bne.n	8004a04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d113      	bne.n	8004a04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	3b01      	subs	r3, #1
 80049ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d109      	bne.n	8004a04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	3b01      	subs	r3, #1
 80049fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d071      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d068      	beq.n	8004adc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a0a:	4b35      	ldr	r3, [pc, #212]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d105      	bne.n	8004a22 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a16:	4b32      	ldr	r3, [pc, #200]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e0ac      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a26:	4b2e      	ldr	r3, [pc, #184]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2d      	ldr	r2, [pc, #180]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a32:	f7fe fb75 	bl	8003120 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fe fb71 	bl	8003120 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e099      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4c:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <HAL_RCC_OscConfig+0x788>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	0112      	lsls	r2, r2, #4
 8004a6c:	4311      	orrs	r1, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a72:	0212      	lsls	r2, r2, #8
 8004a74:	4311      	orrs	r1, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a7a:	0852      	lsrs	r2, r2, #1
 8004a7c:	3a01      	subs	r2, #1
 8004a7e:	0552      	lsls	r2, r2, #21
 8004a80:	4311      	orrs	r1, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a86:	0852      	lsrs	r2, r2, #1
 8004a88:	3a01      	subs	r2, #1
 8004a8a:	0652      	lsls	r2, r2, #25
 8004a8c:	4311      	orrs	r1, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a92:	06d2      	lsls	r2, r2, #27
 8004a94:	430a      	orrs	r2, r1
 8004a96:	4912      	ldr	r1, [pc, #72]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a0f      	ldr	r2, [pc, #60]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa8:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a0c      	ldr	r2, [pc, #48]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ab4:	f7fe fb34 	bl	8003120 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fe fb30 	bl	8003120 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e058      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ace:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <HAL_RCC_OscConfig+0x784>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ada:	e050      	b.n	8004b7e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e04f      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae8:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <HAL_RCC_OscConfig+0x82c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d144      	bne.n	8004b7e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004af4:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <HAL_RCC_OscConfig+0x82c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a23      	ldr	r2, [pc, #140]	; (8004b88 <HAL_RCC_OscConfig+0x82c>)
 8004afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004afe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b00:	4b21      	ldr	r3, [pc, #132]	; (8004b88 <HAL_RCC_OscConfig+0x82c>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4a20      	ldr	r2, [pc, #128]	; (8004b88 <HAL_RCC_OscConfig+0x82c>)
 8004b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b0c:	f7fe fb08 	bl	8003120 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b14:	f7fe fb04 	bl	8003120 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e02c      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <HAL_RCC_OscConfig+0x82c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCC_OscConfig+0x7b8>
 8004b32:	e024      	b.n	8004b7e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b0c      	cmp	r3, #12
 8004b38:	d01f      	beq.n	8004b7a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3a:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <HAL_RCC_OscConfig+0x82c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a12      	ldr	r2, [pc, #72]	; (8004b88 <HAL_RCC_OscConfig+0x82c>)
 8004b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fe faeb 	bl	8003120 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4e:	f7fe fae7 	bl	8003120 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e00f      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCC_OscConfig+0x82c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f0      	bne.n	8004b4e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <HAL_RCC_OscConfig+0x82c>)
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	4905      	ldr	r1, [pc, #20]	; (8004b88 <HAL_RCC_OscConfig+0x82c>)
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_RCC_OscConfig+0x830>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	60cb      	str	r3, [r1, #12]
 8004b78:	e001      	b.n	8004b7e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	feeefffc 	.word	0xfeeefffc

08004b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e11d      	b.n	8004de4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b90      	ldr	r3, [pc, #576]	; (8004dec <HAL_RCC_ClockConfig+0x25c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d910      	bls.n	8004bd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b8d      	ldr	r3, [pc, #564]	; (8004dec <HAL_RCC_ClockConfig+0x25c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 020f 	bic.w	r2, r3, #15
 8004bbe:	498b      	ldr	r1, [pc, #556]	; (8004dec <HAL_RCC_ClockConfig+0x25c>)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc6:	4b89      	ldr	r3, [pc, #548]	; (8004dec <HAL_RCC_ClockConfig+0x25c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e105      	b.n	8004de4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d010      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	4b81      	ldr	r3, [pc, #516]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d908      	bls.n	8004c06 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf4:	4b7e      	ldr	r3, [pc, #504]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	497b      	ldr	r1, [pc, #492]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d079      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d11e      	bne.n	8004c58 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1a:	4b75      	ldr	r3, [pc, #468]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e0dc      	b.n	8004de4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004c2a:	f000 fa09 	bl	8005040 <RCC_GetSysClockFreqFromPLLSource>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4a70      	ldr	r2, [pc, #448]	; (8004df4 <HAL_RCC_ClockConfig+0x264>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d946      	bls.n	8004cc4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c36:	4b6e      	ldr	r3, [pc, #440]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d140      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c42:	4b6b      	ldr	r3, [pc, #428]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c4a:	4a69      	ldr	r2, [pc, #420]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	e035      	b.n	8004cc4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c60:	4b63      	ldr	r3, [pc, #396]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d115      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0b9      	b.n	8004de4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c78:	4b5d      	ldr	r3, [pc, #372]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0ad      	b.n	8004de4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c88:	4b59      	ldr	r3, [pc, #356]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0a5      	b.n	8004de4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004c98:	f000 f8b4 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4a55      	ldr	r2, [pc, #340]	; (8004df4 <HAL_RCC_ClockConfig+0x264>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d90f      	bls.n	8004cc4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ca4:	4b52      	ldr	r3, [pc, #328]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cb0:	4b4f      	ldr	r3, [pc, #316]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cb8:	4a4d      	ldr	r2, [pc, #308]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cc4:	4b4a      	ldr	r3, [pc, #296]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f023 0203 	bic.w	r2, r3, #3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4947      	ldr	r1, [pc, #284]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd6:	f7fe fa23 	bl	8003120 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cde:	f7fe fa1f 	bl	8003120 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e077      	b.n	8004de4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf4:	4b3e      	ldr	r3, [pc, #248]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 020c 	and.w	r2, r3, #12
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d1eb      	bne.n	8004cde <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d0c:	4b38      	ldr	r3, [pc, #224]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	4a37      	ldr	r2, [pc, #220]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d16:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d010      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d208      	bcs.n	8004d46 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d34:	4b2e      	ldr	r3, [pc, #184]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	492b      	ldr	r1, [pc, #172]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d46:	4b29      	ldr	r3, [pc, #164]	; (8004dec <HAL_RCC_ClockConfig+0x25c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d210      	bcs.n	8004d76 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d54:	4b25      	ldr	r3, [pc, #148]	; (8004dec <HAL_RCC_ClockConfig+0x25c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f023 020f 	bic.w	r2, r3, #15
 8004d5c:	4923      	ldr	r1, [pc, #140]	; (8004dec <HAL_RCC_ClockConfig+0x25c>)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_RCC_ClockConfig+0x25c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d001      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e036      	b.n	8004de4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d82:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	4918      	ldr	r1, [pc, #96]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004da0:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4910      	ldr	r1, [pc, #64]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004db4:	f000 f826 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <HAL_RCC_ClockConfig+0x260>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	091b      	lsrs	r3, r3, #4
 8004dc0:	f003 030f 	and.w	r3, r3, #15
 8004dc4:	490c      	ldr	r1, [pc, #48]	; (8004df8 <HAL_RCC_ClockConfig+0x268>)
 8004dc6:	5ccb      	ldrb	r3, [r1, r3]
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd0:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <HAL_RCC_ClockConfig+0x26c>)
 8004dd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <HAL_RCC_ClockConfig+0x270>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fe f951 	bl	8003080 <HAL_InitTick>
 8004dde:	4603      	mov	r3, r0
 8004de0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40022000 	.word	0x40022000
 8004df0:	40021000 	.word	0x40021000
 8004df4:	04c4b400 	.word	0x04c4b400
 8004df8:	0800df84 	.word	0x0800df84
 8004dfc:	20000004 	.word	0x20000004
 8004e00:	20000008 	.word	0x20000008

08004e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b089      	sub	sp, #36	; 0x24
 8004e08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e12:	4b3e      	ldr	r3, [pc, #248]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e1c:	4b3b      	ldr	r3, [pc, #236]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x34>
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	d121      	bne.n	8004e76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d11e      	bne.n	8004e76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e38:	4b34      	ldr	r3, [pc, #208]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d107      	bne.n	8004e54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e44:	4b31      	ldr	r3, [pc, #196]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	e005      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e54:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	091b      	lsrs	r3, r3, #4
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e60:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10d      	bne.n	8004e8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e74:	e00a      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d102      	bne.n	8004e82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e7c:	4b25      	ldr	r3, [pc, #148]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	e004      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e88:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b0c      	cmp	r3, #12
 8004e90:	d134      	bne.n	8004efc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e92:	4b1e      	ldr	r3, [pc, #120]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCC_GetSysClockFreq+0xa6>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d003      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0xac>
 8004ea8:	e005      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004eaa:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eac:	617b      	str	r3, [r7, #20]
      break;
 8004eae:	e005      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x114>)
 8004eb2:	617b      	str	r3, [r7, #20]
      break;
 8004eb4:	e002      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	617b      	str	r3, [r7, #20]
      break;
 8004eba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ebc:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004eca:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	fb03 f202 	mul.w	r2, r3, r2
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	0e5b      	lsrs	r3, r3, #25
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	3301      	adds	r3, #1
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004efc:	69bb      	ldr	r3, [r7, #24]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3724      	adds	r7, #36	; 0x24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	0800df9c 	.word	0x0800df9c
 8004f14:	00f42400 	.word	0x00f42400
 8004f18:	007a1200 	.word	0x007a1200

08004f1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f20:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f22:	681b      	ldr	r3, [r3, #0]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	20000004 	.word	0x20000004

08004f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f38:	f7ff fff0 	bl	8004f1c <HAL_RCC_GetHCLKFreq>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	0a1b      	lsrs	r3, r3, #8
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	4904      	ldr	r1, [pc, #16]	; (8004f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f4a:	5ccb      	ldrb	r3, [r1, r3]
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	0800df94 	.word	0x0800df94

08004f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f64:	f7ff ffda 	bl	8004f1c <HAL_RCC_GetHCLKFreq>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	0adb      	lsrs	r3, r3, #11
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	4904      	ldr	r1, [pc, #16]	; (8004f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f76:	5ccb      	ldrb	r3, [r1, r3]
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40021000 	.word	0x40021000
 8004f88:	0800df94 	.word	0x0800df94

08004f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f94:	2300      	movs	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f98:	4b27      	ldr	r3, [pc, #156]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fa4:	f7ff f906 	bl	80041b4 <HAL_PWREx_GetVoltageRange>
 8004fa8:	6178      	str	r0, [r7, #20]
 8004faa:	e014      	b.n	8004fd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fac:	4b22      	ldr	r3, [pc, #136]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	4a21      	ldr	r2, [pc, #132]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fb8:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fc4:	f7ff f8f6 	bl	80041b4 <HAL_PWREx_GetVoltageRange>
 8004fc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fca:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	4a1a      	ldr	r2, [pc, #104]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fdc:	d10b      	bne.n	8004ff6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b80      	cmp	r3, #128	; 0x80
 8004fe2:	d913      	bls.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2ba0      	cmp	r3, #160	; 0xa0
 8004fe8:	d902      	bls.n	8004ff0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fea:	2302      	movs	r3, #2
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	e00d      	b.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	e00a      	b.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8004ffa:	d902      	bls.n	8005002 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	e004      	b.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b70      	cmp	r3, #112	; 0x70
 8005006:	d101      	bne.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005008:	2301      	movs	r3, #1
 800500a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f023 020f 	bic.w	r2, r3, #15
 8005014:	4909      	ldr	r1, [pc, #36]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d001      	beq.n	800502e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	40022000 	.word	0x40022000

08005040 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d00b      	beq.n	800506e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d825      	bhi.n	80050a8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d008      	beq.n	8005074 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d11f      	bne.n	80050a8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005068:	4b25      	ldr	r3, [pc, #148]	; (8005100 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800506a:	613b      	str	r3, [r7, #16]
    break;
 800506c:	e01f      	b.n	80050ae <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800506e:	4b25      	ldr	r3, [pc, #148]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005070:	613b      	str	r3, [r7, #16]
    break;
 8005072:	e01c      	b.n	80050ae <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005074:	4b21      	ldr	r3, [pc, #132]	; (80050fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d107      	bne.n	8005090 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005080:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e005      	b.n	800509c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005090:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800509c:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a4:	613b      	str	r3, [r7, #16]
    break;
 80050a6:	e002      	b.n	80050ae <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]
    break;
 80050ac:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	3301      	adds	r3, #1
 80050ba:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050bc:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	0a1b      	lsrs	r3, r3, #8
 80050c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	fb03 f202 	mul.w	r2, r3, r2
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050d4:	4b09      	ldr	r3, [pc, #36]	; (80050fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	0e5b      	lsrs	r3, r3, #25
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	3301      	adds	r3, #1
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80050ee:	683b      	ldr	r3, [r7, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40021000 	.word	0x40021000
 8005100:	00f42400 	.word	0x00f42400
 8005104:	007a1200 	.word	0x007a1200
 8005108:	0800df9c 	.word	0x0800df9c

0800510c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005114:	2300      	movs	r3, #0
 8005116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005118:	2300      	movs	r3, #0
 800511a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005124:	2b00      	cmp	r3, #0
 8005126:	d040      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512c:	2b80      	cmp	r3, #128	; 0x80
 800512e:	d02a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005130:	2b80      	cmp	r3, #128	; 0x80
 8005132:	d825      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005134:	2b60      	cmp	r3, #96	; 0x60
 8005136:	d026      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005138:	2b60      	cmp	r3, #96	; 0x60
 800513a:	d821      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d006      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d81d      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d009      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005148:	2b20      	cmp	r3, #32
 800514a:	d010      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800514c:	e018      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800514e:	4b89      	ldr	r3, [pc, #548]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	4a88      	ldr	r2, [pc, #544]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005158:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800515a:	e015      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fb02 	bl	800576c <RCCEx_PLLSAI1_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800516c:	e00c      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3320      	adds	r3, #32
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fbed 	bl	8005954 <RCCEx_PLLSAI2_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800517e:	e003      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	74fb      	strb	r3, [r7, #19]
      break;
 8005184:	e000      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005188:	7cfb      	ldrb	r3, [r7, #19]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10b      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800518e:	4b79      	ldr	r3, [pc, #484]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005190:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005194:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800519c:	4975      	ldr	r1, [pc, #468]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80051a4:	e001      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d047      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051be:	d030      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c4:	d82a      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ca:	d02a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d0:	d824      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d6:	d008      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xde>
 80051d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051dc:	d81e      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80051e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e6:	d010      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80051e8:	e018      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051ea:	4b62      	ldr	r3, [pc, #392]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	4a61      	ldr	r2, [pc, #388]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051f6:	e015      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fab4 	bl	800576c <RCCEx_PLLSAI1_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005208:	e00c      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3320      	adds	r3, #32
 800520e:	2100      	movs	r1, #0
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fb9f 	bl	8005954 <RCCEx_PLLSAI2_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800521a:	e003      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	74fb      	strb	r3, [r7, #19]
      break;
 8005220:	e000      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005224:	7cfb      	ldrb	r3, [r7, #19]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800522a:	4b52      	ldr	r3, [pc, #328]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800522c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	494e      	ldr	r1, [pc, #312]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005240:	e001      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005242:	7cfb      	ldrb	r3, [r7, #19]
 8005244:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 809f 	beq.w	8005392 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005254:	2300      	movs	r3, #0
 8005256:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005258:	4b46      	ldr	r3, [pc, #280]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005268:	2300      	movs	r3, #0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	4b41      	ldr	r3, [pc, #260]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	4a40      	ldr	r2, [pc, #256]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	6593      	str	r3, [r2, #88]	; 0x58
 800527a:	4b3e      	ldr	r3, [pc, #248]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800527c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005286:	2301      	movs	r3, #1
 8005288:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800528a:	4b3b      	ldr	r3, [pc, #236]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a3a      	ldr	r2, [pc, #232]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005294:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005296:	f7fd ff43 	bl	8003120 <HAL_GetTick>
 800529a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800529c:	e009      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800529e:	f7fd ff3f 	bl	8003120 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d902      	bls.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	74fb      	strb	r3, [r7, #19]
        break;
 80052b0:	e005      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052b2:	4b31      	ldr	r3, [pc, #196]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0ef      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80052be:	7cfb      	ldrb	r3, [r7, #19]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d15b      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ce:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01f      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d019      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052e2:	4b24      	ldr	r3, [pc, #144]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052ee:	4b21      	ldr	r3, [pc, #132]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f4:	4a1f      	ldr	r2, [pc, #124]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052fe:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005304:	4a1b      	ldr	r2, [pc, #108]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800530e:	4a19      	ldr	r2, [pc, #100]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d016      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fd fefe 	bl	8003120 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005326:	e00b      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005328:	f7fd fefa 	bl	8003120 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	; 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d902      	bls.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	74fb      	strb	r3, [r7, #19]
            break;
 800533e:	e006      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005340:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0ec      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800534e:	7cfb      	ldrb	r3, [r7, #19]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10c      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005354:	4b07      	ldr	r3, [pc, #28]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005364:	4903      	ldr	r1, [pc, #12]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800536c:	e008      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800536e:	7cfb      	ldrb	r3, [r7, #19]
 8005370:	74bb      	strb	r3, [r7, #18]
 8005372:	e005      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005374:	40021000 	.word	0x40021000
 8005378:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005380:	7c7b      	ldrb	r3, [r7, #17]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d105      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005386:	4ba0      	ldr	r3, [pc, #640]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	4a9f      	ldr	r2, [pc, #636]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005390:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800539e:	4b9a      	ldr	r3, [pc, #616]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f023 0203 	bic.w	r2, r3, #3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ac:	4996      	ldr	r1, [pc, #600]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053c0:	4b91      	ldr	r3, [pc, #580]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	f023 020c 	bic.w	r2, r3, #12
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	498e      	ldr	r1, [pc, #568]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053e2:	4b89      	ldr	r3, [pc, #548]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	4985      	ldr	r1, [pc, #532]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005404:	4b80      	ldr	r3, [pc, #512]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005412:	497d      	ldr	r1, [pc, #500]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0310 	and.w	r3, r3, #16
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005426:	4b78      	ldr	r3, [pc, #480]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005434:	4974      	ldr	r1, [pc, #464]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005448:	4b6f      	ldr	r3, [pc, #444]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800544a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005456:	496c      	ldr	r1, [pc, #432]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800546a:	4b67      	ldr	r3, [pc, #412]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005478:	4963      	ldr	r1, [pc, #396]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800548c:	4b5e      	ldr	r3, [pc, #376]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005492:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800549a:	495b      	ldr	r1, [pc, #364]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054ae:	4b56      	ldr	r3, [pc, #344]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	4952      	ldr	r1, [pc, #328]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054d0:	4b4d      	ldr	r3, [pc, #308]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	494a      	ldr	r1, [pc, #296]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054f2:	4b45      	ldr	r3, [pc, #276]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	4941      	ldr	r1, [pc, #260]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005514:	4b3c      	ldr	r3, [pc, #240]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800551a:	f023 0203 	bic.w	r2, r3, #3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005522:	4939      	ldr	r1, [pc, #228]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d028      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005536:	4b34      	ldr	r3, [pc, #208]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005544:	4930      	ldr	r1, [pc, #192]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005554:	d106      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005556:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	4a2b      	ldr	r2, [pc, #172]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800555c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005560:	60d3      	str	r3, [r2, #12]
 8005562:	e011      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005568:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800556c:	d10c      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	2101      	movs	r1, #1
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f8f9 	bl	800576c <RCCEx_PLLSAI1_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800557e:	7cfb      	ldrb	r3, [r7, #19]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d04d      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800559c:	d108      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800559e:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055a4:	4a18      	ldr	r2, [pc, #96]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055ae:	e012      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80055b0:	4b15      	ldr	r3, [pc, #84]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055b6:	4a14      	ldr	r2, [pc, #80]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055bc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80055c0:	4b11      	ldr	r3, [pc, #68]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ce:	490e      	ldr	r1, [pc, #56]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055de:	d106      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e0:	4b09      	ldr	r3, [pc, #36]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a08      	ldr	r2, [pc, #32]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ea:	60d3      	str	r3, [r2, #12]
 80055ec:	e020      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f6:	d109      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4a02      	ldr	r2, [pc, #8]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005602:	60d3      	str	r3, [r2, #12]
 8005604:	e014      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005614:	d10c      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3304      	adds	r3, #4
 800561a:	2101      	movs	r1, #1
 800561c:	4618      	mov	r0, r3
 800561e:	f000 f8a5 	bl	800576c <RCCEx_PLLSAI1_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005626:	7cfb      	ldrb	r3, [r7, #19]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800562c:	7cfb      	ldrb	r3, [r7, #19]
 800562e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d028      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800563c:	4b4a      	ldr	r3, [pc, #296]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800564a:	4947      	ldr	r1, [pc, #284]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565a:	d106      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800565c:	4b42      	ldr	r3, [pc, #264]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4a41      	ldr	r2, [pc, #260]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005666:	60d3      	str	r3, [r2, #12]
 8005668:	e011      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800566e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005672:	d10c      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	2101      	movs	r1, #1
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f876 	bl	800576c <RCCEx_PLLSAI1_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005684:	7cfb      	ldrb	r3, [r7, #19]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800568a:	7cfb      	ldrb	r3, [r7, #19]
 800568c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01e      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800569a:	4b33      	ldr	r3, [pc, #204]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056aa:	492f      	ldr	r1, [pc, #188]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3304      	adds	r3, #4
 80056c2:	2102      	movs	r1, #2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 f851 	bl	800576c <RCCEx_PLLSAI1_Config>
 80056ca:	4603      	mov	r3, r0
 80056cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056ce:	7cfb      	ldrb	r3, [r7, #19]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80056d4:	7cfb      	ldrb	r3, [r7, #19]
 80056d6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00b      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056e4:	4b20      	ldr	r3, [pc, #128]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056ea:	f023 0204 	bic.w	r2, r3, #4
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f4:	491c      	ldr	r1, [pc, #112]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00b      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005708:	4b17      	ldr	r3, [pc, #92]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800570a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800570e:	f023 0218 	bic.w	r2, r3, #24
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	4913      	ldr	r1, [pc, #76]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d017      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800572c:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800572e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005732:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800573c:	490a      	ldr	r1, [pc, #40]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800574a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800574e:	d105      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005750:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a04      	ldr	r2, [pc, #16]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800575a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800575c:	7cbb      	ldrb	r3, [r7, #18]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40021000 	.word	0x40021000

0800576c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800577a:	4b72      	ldr	r3, [pc, #456]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005786:	4b6f      	ldr	r3, [pc, #444]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f003 0203 	and.w	r2, r3, #3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d103      	bne.n	800579e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
       ||
 800579a:	2b00      	cmp	r3, #0
 800579c:	d142      	bne.n	8005824 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
 80057a2:	e03f      	b.n	8005824 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d018      	beq.n	80057de <RCCEx_PLLSAI1_Config+0x72>
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d825      	bhi.n	80057fc <RCCEx_PLLSAI1_Config+0x90>
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d002      	beq.n	80057ba <RCCEx_PLLSAI1_Config+0x4e>
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d009      	beq.n	80057cc <RCCEx_PLLSAI1_Config+0x60>
 80057b8:	e020      	b.n	80057fc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057ba:	4b62      	ldr	r3, [pc, #392]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d11d      	bne.n	8005802 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ca:	e01a      	b.n	8005802 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057cc:	4b5d      	ldr	r3, [pc, #372]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d116      	bne.n	8005806 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057dc:	e013      	b.n	8005806 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057de:	4b59      	ldr	r3, [pc, #356]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10f      	bne.n	800580a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057ea:	4b56      	ldr	r3, [pc, #344]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057fa:	e006      	b.n	800580a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005800:	e004      	b.n	800580c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005802:	bf00      	nop
 8005804:	e002      	b.n	800580c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800580a:	bf00      	nop
    }

    if(status == HAL_OK)
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d108      	bne.n	8005824 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005812:	4b4c      	ldr	r3, [pc, #304]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f023 0203 	bic.w	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4949      	ldr	r1, [pc, #292]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005820:	4313      	orrs	r3, r2
 8005822:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f040 8086 	bne.w	8005938 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800582c:	4b45      	ldr	r3, [pc, #276]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a44      	ldr	r2, [pc, #272]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005832:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005838:	f7fd fc72 	bl	8003120 <HAL_GetTick>
 800583c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800583e:	e009      	b.n	8005854 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005840:	f7fd fc6e 	bl	8003120 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d902      	bls.n	8005854 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	73fb      	strb	r3, [r7, #15]
        break;
 8005852:	e005      	b.n	8005860 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005854:	4b3b      	ldr	r3, [pc, #236]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ef      	bne.n	8005840 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d168      	bne.n	8005938 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d113      	bne.n	8005894 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800586c:	4b35      	ldr	r3, [pc, #212]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	4b35      	ldr	r3, [pc, #212]	; (8005948 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005872:	4013      	ands	r3, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6892      	ldr	r2, [r2, #8]
 8005878:	0211      	lsls	r1, r2, #8
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	68d2      	ldr	r2, [r2, #12]
 800587e:	06d2      	lsls	r2, r2, #27
 8005880:	4311      	orrs	r1, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6852      	ldr	r2, [r2, #4]
 8005886:	3a01      	subs	r2, #1
 8005888:	0112      	lsls	r2, r2, #4
 800588a:	430a      	orrs	r2, r1
 800588c:	492d      	ldr	r1, [pc, #180]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 800588e:	4313      	orrs	r3, r2
 8005890:	610b      	str	r3, [r1, #16]
 8005892:	e02d      	b.n	80058f0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d115      	bne.n	80058c6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800589a:	4b2a      	ldr	r3, [pc, #168]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	4b2b      	ldr	r3, [pc, #172]	; (800594c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6892      	ldr	r2, [r2, #8]
 80058a6:	0211      	lsls	r1, r2, #8
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6912      	ldr	r2, [r2, #16]
 80058ac:	0852      	lsrs	r2, r2, #1
 80058ae:	3a01      	subs	r2, #1
 80058b0:	0552      	lsls	r2, r2, #21
 80058b2:	4311      	orrs	r1, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6852      	ldr	r2, [r2, #4]
 80058b8:	3a01      	subs	r2, #1
 80058ba:	0112      	lsls	r2, r2, #4
 80058bc:	430a      	orrs	r2, r1
 80058be:	4921      	ldr	r1, [pc, #132]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	610b      	str	r3, [r1, #16]
 80058c4:	e014      	b.n	80058f0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058c6:	4b1f      	ldr	r3, [pc, #124]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	4b21      	ldr	r3, [pc, #132]	; (8005950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6892      	ldr	r2, [r2, #8]
 80058d2:	0211      	lsls	r1, r2, #8
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6952      	ldr	r2, [r2, #20]
 80058d8:	0852      	lsrs	r2, r2, #1
 80058da:	3a01      	subs	r2, #1
 80058dc:	0652      	lsls	r2, r2, #25
 80058de:	4311      	orrs	r1, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6852      	ldr	r2, [r2, #4]
 80058e4:	3a01      	subs	r2, #1
 80058e6:	0112      	lsls	r2, r2, #4
 80058e8:	430a      	orrs	r2, r1
 80058ea:	4916      	ldr	r1, [pc, #88]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058f0:	4b14      	ldr	r3, [pc, #80]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fd fc10 	bl	8003120 <HAL_GetTick>
 8005900:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005902:	e009      	b.n	8005918 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005904:	f7fd fc0c 	bl	8003120 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d902      	bls.n	8005918 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	73fb      	strb	r3, [r7, #15]
          break;
 8005916:	e005      	b.n	8005924 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005918:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0ef      	beq.n	8005904 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800592a:	4b06      	ldr	r3, [pc, #24]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	4904      	ldr	r1, [pc, #16]	; (8005944 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005934:	4313      	orrs	r3, r2
 8005936:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	40021000 	.word	0x40021000
 8005948:	07ff800f 	.word	0x07ff800f
 800594c:	ff9f800f 	.word	0xff9f800f
 8005950:	f9ff800f 	.word	0xf9ff800f

08005954 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005962:	4b72      	ldr	r3, [pc, #456]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00e      	beq.n	800598c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800596e:	4b6f      	ldr	r3, [pc, #444]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0203 	and.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d103      	bne.n	8005986 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
       ||
 8005982:	2b00      	cmp	r3, #0
 8005984:	d142      	bne.n	8005a0c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	e03f      	b.n	8005a0c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b03      	cmp	r3, #3
 8005992:	d018      	beq.n	80059c6 <RCCEx_PLLSAI2_Config+0x72>
 8005994:	2b03      	cmp	r3, #3
 8005996:	d825      	bhi.n	80059e4 <RCCEx_PLLSAI2_Config+0x90>
 8005998:	2b01      	cmp	r3, #1
 800599a:	d002      	beq.n	80059a2 <RCCEx_PLLSAI2_Config+0x4e>
 800599c:	2b02      	cmp	r3, #2
 800599e:	d009      	beq.n	80059b4 <RCCEx_PLLSAI2_Config+0x60>
 80059a0:	e020      	b.n	80059e4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059a2:	4b62      	ldr	r3, [pc, #392]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d11d      	bne.n	80059ea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b2:	e01a      	b.n	80059ea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059b4:	4b5d      	ldr	r3, [pc, #372]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d116      	bne.n	80059ee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c4:	e013      	b.n	80059ee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059c6:	4b59      	ldr	r3, [pc, #356]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10f      	bne.n	80059f2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059d2:	4b56      	ldr	r3, [pc, #344]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059e2:	e006      	b.n	80059f2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
      break;
 80059e8:	e004      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059ea:	bf00      	nop
 80059ec:	e002      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059ee:	bf00      	nop
 80059f0:	e000      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d108      	bne.n	8005a0c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80059fa:	4b4c      	ldr	r3, [pc, #304]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f023 0203 	bic.w	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4949      	ldr	r1, [pc, #292]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f040 8086 	bne.w	8005b20 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a14:	4b45      	ldr	r3, [pc, #276]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a44      	ldr	r2, [pc, #272]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a20:	f7fd fb7e 	bl	8003120 <HAL_GetTick>
 8005a24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a26:	e009      	b.n	8005a3c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a28:	f7fd fb7a 	bl	8003120 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d902      	bls.n	8005a3c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	73fb      	strb	r3, [r7, #15]
        break;
 8005a3a:	e005      	b.n	8005a48 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a3c:	4b3b      	ldr	r3, [pc, #236]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1ef      	bne.n	8005a28 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d168      	bne.n	8005b20 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d113      	bne.n	8005a7c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a54:	4b35      	ldr	r3, [pc, #212]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a56:	695a      	ldr	r2, [r3, #20]
 8005a58:	4b35      	ldr	r3, [pc, #212]	; (8005b30 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6892      	ldr	r2, [r2, #8]
 8005a60:	0211      	lsls	r1, r2, #8
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	68d2      	ldr	r2, [r2, #12]
 8005a66:	06d2      	lsls	r2, r2, #27
 8005a68:	4311      	orrs	r1, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6852      	ldr	r2, [r2, #4]
 8005a6e:	3a01      	subs	r2, #1
 8005a70:	0112      	lsls	r2, r2, #4
 8005a72:	430a      	orrs	r2, r1
 8005a74:	492d      	ldr	r1, [pc, #180]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	614b      	str	r3, [r1, #20]
 8005a7a:	e02d      	b.n	8005ad8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d115      	bne.n	8005aae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a82:	4b2a      	ldr	r3, [pc, #168]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	4b2b      	ldr	r3, [pc, #172]	; (8005b34 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6892      	ldr	r2, [r2, #8]
 8005a8e:	0211      	lsls	r1, r2, #8
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6912      	ldr	r2, [r2, #16]
 8005a94:	0852      	lsrs	r2, r2, #1
 8005a96:	3a01      	subs	r2, #1
 8005a98:	0552      	lsls	r2, r2, #21
 8005a9a:	4311      	orrs	r1, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6852      	ldr	r2, [r2, #4]
 8005aa0:	3a01      	subs	r2, #1
 8005aa2:	0112      	lsls	r2, r2, #4
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	4921      	ldr	r1, [pc, #132]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	614b      	str	r3, [r1, #20]
 8005aac:	e014      	b.n	8005ad8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aae:	4b1f      	ldr	r3, [pc, #124]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	4b21      	ldr	r3, [pc, #132]	; (8005b38 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6892      	ldr	r2, [r2, #8]
 8005aba:	0211      	lsls	r1, r2, #8
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6952      	ldr	r2, [r2, #20]
 8005ac0:	0852      	lsrs	r2, r2, #1
 8005ac2:	3a01      	subs	r2, #1
 8005ac4:	0652      	lsls	r2, r2, #25
 8005ac6:	4311      	orrs	r1, r2
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6852      	ldr	r2, [r2, #4]
 8005acc:	3a01      	subs	r2, #1
 8005ace:	0112      	lsls	r2, r2, #4
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	4916      	ldr	r1, [pc, #88]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ad8:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae4:	f7fd fb1c 	bl	8003120 <HAL_GetTick>
 8005ae8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aea:	e009      	b.n	8005b00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005aec:	f7fd fb18 	bl	8003120 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d902      	bls.n	8005b00 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	73fb      	strb	r3, [r7, #15]
          break;
 8005afe:	e005      	b.n	8005b0c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b00:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0ef      	beq.n	8005aec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b14:	695a      	ldr	r2, [r3, #20]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	4904      	ldr	r1, [pc, #16]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	07ff800f 	.word	0x07ff800f
 8005b34:	ff9f800f 	.word	0xff9f800f
 8005b38:	f9ff800f 	.word	0xf9ff800f

08005b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e095      	b.n	8005c7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b5e:	d009      	beq.n	8005b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	61da      	str	r2, [r3, #28]
 8005b66:	e005      	b.n	8005b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fd f8a6 	bl	8002ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005baa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bb4:	d902      	bls.n	8005bbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e002      	b.n	8005bc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bca:	d007      	beq.n	8005bdc <HAL_SPI_Init+0xa0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bd4:	d002      	beq.n	8005bdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	ea42 0103 	orr.w	r1, r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	f003 0204 	and.w	r2, r3, #4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	431a      	orrs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c58:	ea42 0103 	orr.w	r1, r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b088      	sub	sp, #32
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_SPI_Transmit+0x22>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e158      	b.n	8005f56 <HAL_SPI_Transmit+0x2d4>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cac:	f7fd fa38 	bl	8003120 <HAL_GetTick>
 8005cb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d002      	beq.n	8005cc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cc6:	e13d      	b.n	8005f44 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <HAL_SPI_Transmit+0x52>
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cd8:	e134      	b.n	8005f44 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2203      	movs	r2, #3
 8005cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d24:	d10f      	bne.n	8005d46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d007      	beq.n	8005d64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d6c:	d94b      	bls.n	8005e06 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_SPI_Transmit+0xfa>
 8005d76:	8afb      	ldrh	r3, [r7, #22]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d13e      	bne.n	8005dfa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	881a      	ldrh	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	1c9a      	adds	r2, r3, #2
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005da0:	e02b      	b.n	8005dfa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d112      	bne.n	8005dd6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	881a      	ldrh	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	1c9a      	adds	r2, r3, #2
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dd4:	e011      	b.n	8005dfa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dd6:	f7fd f9a3 	bl	8003120 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d803      	bhi.n	8005dee <HAL_SPI_Transmit+0x16c>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d102      	bne.n	8005df4 <HAL_SPI_Transmit+0x172>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005df8:	e0a4      	b.n	8005f44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1ce      	bne.n	8005da2 <HAL_SPI_Transmit+0x120>
 8005e04:	e07c      	b.n	8005f00 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_Transmit+0x192>
 8005e0e:	8afb      	ldrh	r3, [r7, #22]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d170      	bne.n	8005ef6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d912      	bls.n	8005e44 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	881a      	ldrh	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	1c9a      	adds	r2, r3, #2
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b02      	subs	r3, #2
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e42:	e058      	b.n	8005ef6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e6a:	e044      	b.n	8005ef6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d12b      	bne.n	8005ed2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d912      	bls.n	8005eaa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	881a      	ldrh	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	1c9a      	adds	r2, r3, #2
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b02      	subs	r3, #2
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ea8:	e025      	b.n	8005ef6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	330c      	adds	r3, #12
 8005eb4:	7812      	ldrb	r2, [r2, #0]
 8005eb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ed0:	e011      	b.n	8005ef6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed2:	f7fd f925 	bl	8003120 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d803      	bhi.n	8005eea <HAL_SPI_Transmit+0x268>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee8:	d102      	bne.n	8005ef0 <HAL_SPI_Transmit+0x26e>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d102      	bne.n	8005ef6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ef4:	e026      	b.n	8005f44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1b5      	bne.n	8005e6c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	6839      	ldr	r1, [r7, #0]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 fce3 	bl	80068d0 <SPI_EndRxTxTransaction>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e000      	b.n	8005f44 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b088      	sub	sp, #32
 8005f62:	af02      	add	r7, sp, #8
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	603b      	str	r3, [r7, #0]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f7a:	d112      	bne.n	8005fa2 <HAL_SPI_Receive+0x44>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10e      	bne.n	8005fa2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2204      	movs	r2, #4
 8005f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f8c:	88fa      	ldrh	r2, [r7, #6]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	4613      	mov	r3, r2
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f910 	bl	80061be <HAL_SPI_TransmitReceive>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	e109      	b.n	80061b6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_SPI_Receive+0x52>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e102      	b.n	80061b6 <HAL_SPI_Receive+0x258>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fb8:	f7fd f8b2 	bl	8003120 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d002      	beq.n	8005fd0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005fca:	2302      	movs	r3, #2
 8005fcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fce:	e0e9      	b.n	80061a4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_SPI_Receive+0x7e>
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fe0:	e0e0      	b.n	80061a4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	88fa      	ldrh	r2, [r7, #6]
 8005ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800602c:	d908      	bls.n	8006040 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	e007      	b.n	8006050 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800604e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006058:	d10f      	bne.n	800607a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006068:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006078:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d007      	beq.n	8006098 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006096:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060a0:	d867      	bhi.n	8006172 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80060a2:	e030      	b.n	8006106 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d117      	bne.n	80060e2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f103 020c 	add.w	r2, r3, #12
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	7812      	ldrb	r2, [r2, #0]
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80060e0:	e011      	b.n	8006106 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e2:	f7fd f81d 	bl	8003120 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d803      	bhi.n	80060fa <HAL_SPI_Receive+0x19c>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d102      	bne.n	8006100 <HAL_SPI_Receive+0x1a2>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006104:	e04e      	b.n	80061a4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1c8      	bne.n	80060a4 <HAL_SPI_Receive+0x146>
 8006112:	e034      	b.n	800617e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b01      	cmp	r3, #1
 8006120:	d115      	bne.n	800614e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	b292      	uxth	r2, r2
 800612e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	1c9a      	adds	r2, r3, #2
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800614c:	e011      	b.n	8006172 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800614e:	f7fc ffe7 	bl	8003120 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d803      	bhi.n	8006166 <HAL_SPI_Receive+0x208>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d102      	bne.n	800616c <HAL_SPI_Receive+0x20e>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006170:	e018      	b.n	80061a4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006178:	b29b      	uxth	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1ca      	bne.n	8006114 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 fb4c 	bl	8006820 <SPI_EndRxTransaction>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2220      	movs	r2, #32
 8006192:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	75fb      	strb	r3, [r7, #23]
 80061a0:	e000      	b.n	80061a4 <HAL_SPI_Receive+0x246>
  }

error :
 80061a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b08a      	sub	sp, #40	; 0x28
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	607a      	str	r2, [r7, #4]
 80061ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061cc:	2301      	movs	r3, #1
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_SPI_TransmitReceive+0x26>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e1fb      	b.n	80065dc <HAL_SPI_TransmitReceive+0x41e>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ec:	f7fc ff98 	bl	8003120 <HAL_GetTick>
 80061f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006200:	887b      	ldrh	r3, [r7, #2]
 8006202:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006204:	887b      	ldrh	r3, [r7, #2]
 8006206:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006208:	7efb      	ldrb	r3, [r7, #27]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d00e      	beq.n	800622c <HAL_SPI_TransmitReceive+0x6e>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006214:	d106      	bne.n	8006224 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <HAL_SPI_TransmitReceive+0x66>
 800621e:	7efb      	ldrb	r3, [r7, #27]
 8006220:	2b04      	cmp	r3, #4
 8006222:	d003      	beq.n	800622c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006224:	2302      	movs	r3, #2
 8006226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800622a:	e1cd      	b.n	80065c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <HAL_SPI_TransmitReceive+0x80>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_SPI_TransmitReceive+0x80>
 8006238:	887b      	ldrh	r3, [r7, #2]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d103      	bne.n	8006246 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006244:	e1c0      	b.n	80065c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b04      	cmp	r3, #4
 8006250:	d003      	beq.n	800625a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2205      	movs	r2, #5
 8006256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	887a      	ldrh	r2, [r7, #2]
 800626a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	887a      	ldrh	r2, [r7, #2]
 8006272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	887a      	ldrh	r2, [r7, #2]
 8006280:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	887a      	ldrh	r2, [r7, #2]
 8006286:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800629c:	d802      	bhi.n	80062a4 <HAL_SPI_TransmitReceive+0xe6>
 800629e:	8a3b      	ldrh	r3, [r7, #16]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d908      	bls.n	80062b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062b2:	605a      	str	r2, [r3, #4]
 80062b4:	e007      	b.n	80062c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d007      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062ec:	d97c      	bls.n	80063e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <HAL_SPI_TransmitReceive+0x13e>
 80062f6:	8a7b      	ldrh	r3, [r7, #18]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d169      	bne.n	80063d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	881a      	ldrh	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	1c9a      	adds	r2, r3, #2
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006320:	e056      	b.n	80063d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b02      	cmp	r3, #2
 800632e:	d11b      	bne.n	8006368 <HAL_SPI_TransmitReceive+0x1aa>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d016      	beq.n	8006368 <HAL_SPI_TransmitReceive+0x1aa>
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	2b01      	cmp	r3, #1
 800633e:	d113      	bne.n	8006368 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	881a      	ldrh	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	1c9a      	adds	r2, r3, #2
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	d11c      	bne.n	80063b0 <HAL_SPI_TransmitReceive+0x1f2>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	b292      	uxth	r2, r2
 800638e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	1c9a      	adds	r2, r3, #2
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063ac:	2301      	movs	r3, #1
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063b0:	f7fc feb6 	bl	8003120 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063bc:	429a      	cmp	r2, r3
 80063be:	d807      	bhi.n	80063d0 <HAL_SPI_TransmitReceive+0x212>
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c6:	d003      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80063ce:	e0fb      	b.n	80065c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1a3      	bne.n	8006322 <HAL_SPI_TransmitReceive+0x164>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d19d      	bne.n	8006322 <HAL_SPI_TransmitReceive+0x164>
 80063e6:	e0df      	b.n	80065a8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_SPI_TransmitReceive+0x23a>
 80063f0:	8a7b      	ldrh	r3, [r7, #18]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	f040 80cb 	bne.w	800658e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d912      	bls.n	8006428 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	881a      	ldrh	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	1c9a      	adds	r2, r3, #2
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b02      	subs	r3, #2
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006426:	e0b2      	b.n	800658e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	7812      	ldrb	r2, [r2, #0]
 8006434:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800644e:	e09e      	b.n	800658e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b02      	cmp	r3, #2
 800645c:	d134      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x30a>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d02f      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0x30a>
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	2b01      	cmp	r3, #1
 800646c:	d12c      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b01      	cmp	r3, #1
 8006476:	d912      	bls.n	800649e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	881a      	ldrh	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	1c9a      	adds	r2, r3, #2
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006492:	b29b      	uxth	r3, r3
 8006494:	3b02      	subs	r3, #2
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800649c:	e012      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	330c      	adds	r3, #12
 80064a8:	7812      	ldrb	r2, [r2, #0]
 80064aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d148      	bne.n	8006568 <HAL_SPI_TransmitReceive+0x3aa>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d042      	beq.n	8006568 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d923      	bls.n	8006536 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	b292      	uxth	r2, r2
 80064fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	1c9a      	adds	r2, r3, #2
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b02      	subs	r3, #2
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	d81f      	bhi.n	8006564 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006532:	605a      	str	r2, [r3, #4]
 8006534:	e016      	b.n	8006564 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f103 020c 	add.w	r2, r3, #12
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	7812      	ldrb	r2, [r2, #0]
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006564:	2301      	movs	r3, #1
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006568:	f7fc fdda 	bl	8003120 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006574:	429a      	cmp	r2, r3
 8006576:	d803      	bhi.n	8006580 <HAL_SPI_TransmitReceive+0x3c2>
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d102      	bne.n	8006586 <HAL_SPI_TransmitReceive+0x3c8>
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	2b00      	cmp	r3, #0
 8006584:	d103      	bne.n	800658e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800658c:	e01c      	b.n	80065c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006592:	b29b      	uxth	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	f47f af5b 	bne.w	8006450 <HAL_SPI_TransmitReceive+0x292>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f47f af54 	bne.w	8006450 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065a8:	69fa      	ldr	r2, [r7, #28]
 80065aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f98f 	bl	80068d0 <SPI_EndRxTxTransaction>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d006      	beq.n	80065c6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	661a      	str	r2, [r3, #96]	; 0x60
 80065c4:	e000      	b.n	80065c8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80065c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3728      	adds	r7, #40	; 0x28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065f4:	f7fc fd94 	bl	8003120 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	4413      	add	r3, r2
 8006602:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006604:	f7fc fd8c 	bl	8003120 <HAL_GetTick>
 8006608:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800660a:	4b39      	ldr	r3, [pc, #228]	; (80066f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	015b      	lsls	r3, r3, #5
 8006610:	0d1b      	lsrs	r3, r3, #20
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	fb02 f303 	mul.w	r3, r2, r3
 8006618:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800661a:	e054      	b.n	80066c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006622:	d050      	beq.n	80066c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006624:	f7fc fd7c 	bl	8003120 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	429a      	cmp	r2, r3
 8006632:	d902      	bls.n	800663a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d13d      	bne.n	80066b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006652:	d111      	bne.n	8006678 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665c:	d004      	beq.n	8006668 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006666:	d107      	bne.n	8006678 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006676:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006680:	d10f      	bne.n	80066a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e017      	b.n	80066e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4013      	ands	r3, r2
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	bf0c      	ite	eq
 80066d6:	2301      	moveq	r3, #1
 80066d8:	2300      	movne	r3, #0
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d19b      	bne.n	800661c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3720      	adds	r7, #32
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000004 	.word	0x20000004

080066f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	; 0x28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006706:	f7fc fd0b 	bl	8003120 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	1a9b      	subs	r3, r3, r2
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	4413      	add	r3, r2
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006716:	f7fc fd03 	bl	8003120 <HAL_GetTick>
 800671a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	330c      	adds	r3, #12
 8006722:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006724:	4b3d      	ldr	r3, [pc, #244]	; (800681c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	00da      	lsls	r2, r3, #3
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	0d1b      	lsrs	r3, r3, #20
 8006734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006736:	fb02 f303 	mul.w	r3, r2, r3
 800673a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800673c:	e060      	b.n	8006800 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006744:	d107      	bne.n	8006756 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006754:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d050      	beq.n	8006800 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800675e:	f7fc fcdf 	bl	8003120 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676a:	429a      	cmp	r2, r3
 800676c:	d902      	bls.n	8006774 <SPI_WaitFifoStateUntilTimeout+0x80>
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	2b00      	cmp	r3, #0
 8006772:	d13d      	bne.n	80067f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006782:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800678c:	d111      	bne.n	80067b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006796:	d004      	beq.n	80067a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a0:	d107      	bne.n	80067b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ba:	d10f      	bne.n	80067dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e010      	b.n	8006812 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	4013      	ands	r3, r2
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d196      	bne.n	800673e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3728      	adds	r7, #40	; 0x28
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000004 	.word	0x20000004

08006820 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006834:	d111      	bne.n	800685a <SPI_EndRxTransaction+0x3a>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683e:	d004      	beq.n	800684a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006848:	d107      	bne.n	800685a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006858:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2200      	movs	r2, #0
 8006862:	2180      	movs	r1, #128	; 0x80
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff febd 	bl	80065e4 <SPI_WaitFlagStateUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d007      	beq.n	8006880 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006874:	f043 0220 	orr.w	r2, r3, #32
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e023      	b.n	80068c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006888:	d11d      	bne.n	80068c6 <SPI_EndRxTransaction+0xa6>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006892:	d004      	beq.n	800689e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800689c:	d113      	bne.n	80068c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f7ff ff22 	bl	80066f4 <SPI_WaitFifoStateUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ba:	f043 0220 	orr.w	r2, r3, #32
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e000      	b.n	80068c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f7ff ff03 	bl	80066f4 <SPI_WaitFifoStateUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e027      	b.n	8006954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2200      	movs	r2, #0
 800690c:	2180      	movs	r1, #128	; 0x80
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f7ff fe68 	bl	80065e4 <SPI_WaitFlagStateUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d007      	beq.n	800692a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691e:	f043 0220 	orr.w	r2, r3, #32
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e014      	b.n	8006954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2200      	movs	r2, #0
 8006932:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff fedc 	bl	80066f4 <SPI_WaitFifoStateUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006946:	f043 0220 	orr.w	r2, r3, #32
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e000      	b.n	8006954 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e042      	b.n	80069f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006974:	2b00      	cmp	r3, #0
 8006976:	d106      	bne.n	8006986 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7fc f94d 	bl	8002c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2224      	movs	r2, #36	; 0x24
 800698a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f8c4 	bl	8006b2c <UART_SetConfig>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e022      	b.n	80069f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fbb4 	bl	8007124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fc3b 	bl	8007268 <UART_CheckIdleState>
 80069f2:	4603      	mov	r3, r0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	; 0x28
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	f040 8084 	bne.w	8006b20 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <HAL_UART_Transmit+0x28>
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e07c      	b.n	8006b22 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <HAL_UART_Transmit+0x3a>
 8006a32:	2302      	movs	r3, #2
 8006a34:	e075      	b.n	8006b22 <HAL_UART_Transmit+0x126>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2221      	movs	r2, #33	; 0x21
 8006a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a4e:	f7fc fb67 	bl	8003120 <HAL_GetTick>
 8006a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	88fa      	ldrh	r2, [r7, #6]
 8006a58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	88fa      	ldrh	r2, [r7, #6]
 8006a60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6c:	d108      	bne.n	8006a80 <HAL_UART_Transmit+0x84>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d104      	bne.n	8006a80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	e003      	b.n	8006a88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006a90:	e02d      	b.n	8006aee <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2180      	movs	r1, #128	; 0x80
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fc2e 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e03a      	b.n	8006b22 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10b      	bne.n	8006aca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	881a      	ldrh	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006abe:	b292      	uxth	r2, r2
 8006ac0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	3302      	adds	r3, #2
 8006ac6:	61bb      	str	r3, [r7, #24]
 8006ac8:	e008      	b.n	8006adc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	b292      	uxth	r2, r2
 8006ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1cb      	bne.n	8006a92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2200      	movs	r2, #0
 8006b02:	2140      	movs	r1, #64	; 0x40
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fbfa 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e006      	b.n	8006b22 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e000      	b.n	8006b22 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006b20:	2302      	movs	r3, #2
  }
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3720      	adds	r7, #32
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b30:	b08c      	sub	sp, #48	; 0x30
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4baa      	ldr	r3, [pc, #680]	; (8006e04 <UART_SetConfig+0x2d8>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a9f      	ldr	r2, [pc, #636]	; (8006e08 <UART_SetConfig+0x2dc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b94:	4313      	orrs	r3, r2
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006ba2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	f023 010f 	bic.w	r1, r3, #15
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a90      	ldr	r2, [pc, #576]	; (8006e0c <UART_SetConfig+0x2e0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d125      	bne.n	8006c1c <UART_SetConfig+0xf0>
 8006bd0:	4b8f      	ldr	r3, [pc, #572]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d81a      	bhi.n	8006c14 <UART_SetConfig+0xe8>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <UART_SetConfig+0xb8>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c05 	.word	0x08006c05
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006c0d 	.word	0x08006c0d
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfa:	e116      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c02:	e112      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c04:	2304      	movs	r3, #4
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0a:	e10e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c12:	e10a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c14:	2310      	movs	r3, #16
 8006c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c1a:	e106      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a7c      	ldr	r2, [pc, #496]	; (8006e14 <UART_SetConfig+0x2e8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d138      	bne.n	8006c98 <UART_SetConfig+0x16c>
 8006c26:	4b7a      	ldr	r3, [pc, #488]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2c:	f003 030c 	and.w	r3, r3, #12
 8006c30:	2b0c      	cmp	r3, #12
 8006c32:	d82d      	bhi.n	8006c90 <UART_SetConfig+0x164>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0x110>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c71 	.word	0x08006c71
 8006c40:	08006c91 	.word	0x08006c91
 8006c44:	08006c91 	.word	0x08006c91
 8006c48:	08006c91 	.word	0x08006c91
 8006c4c:	08006c81 	.word	0x08006c81
 8006c50:	08006c91 	.word	0x08006c91
 8006c54:	08006c91 	.word	0x08006c91
 8006c58:	08006c91 	.word	0x08006c91
 8006c5c:	08006c79 	.word	0x08006c79
 8006c60:	08006c91 	.word	0x08006c91
 8006c64:	08006c91 	.word	0x08006c91
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c89 	.word	0x08006c89
 8006c70:	2300      	movs	r3, #0
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c76:	e0d8      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7e:	e0d4      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c86:	e0d0      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8e:	e0cc      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c96:	e0c8      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a5e      	ldr	r2, [pc, #376]	; (8006e18 <UART_SetConfig+0x2ec>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d125      	bne.n	8006cee <UART_SetConfig+0x1c2>
 8006ca2:	4b5b      	ldr	r3, [pc, #364]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cac:	2b30      	cmp	r3, #48	; 0x30
 8006cae:	d016      	beq.n	8006cde <UART_SetConfig+0x1b2>
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d818      	bhi.n	8006ce6 <UART_SetConfig+0x1ba>
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d00a      	beq.n	8006cce <UART_SetConfig+0x1a2>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d814      	bhi.n	8006ce6 <UART_SetConfig+0x1ba>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <UART_SetConfig+0x19a>
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d008      	beq.n	8006cd6 <UART_SetConfig+0x1aa>
 8006cc4:	e00f      	b.n	8006ce6 <UART_SetConfig+0x1ba>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ccc:	e0ad      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd4:	e0a9      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cd6:	2304      	movs	r3, #4
 8006cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cdc:	e0a5      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cde:	2308      	movs	r3, #8
 8006ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce4:	e0a1      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006ce6:	2310      	movs	r3, #16
 8006ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cec:	e09d      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a4a      	ldr	r2, [pc, #296]	; (8006e1c <UART_SetConfig+0x2f0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d125      	bne.n	8006d44 <UART_SetConfig+0x218>
 8006cf8:	4b45      	ldr	r3, [pc, #276]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d02:	2bc0      	cmp	r3, #192	; 0xc0
 8006d04:	d016      	beq.n	8006d34 <UART_SetConfig+0x208>
 8006d06:	2bc0      	cmp	r3, #192	; 0xc0
 8006d08:	d818      	bhi.n	8006d3c <UART_SetConfig+0x210>
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d00a      	beq.n	8006d24 <UART_SetConfig+0x1f8>
 8006d0e:	2b80      	cmp	r3, #128	; 0x80
 8006d10:	d814      	bhi.n	8006d3c <UART_SetConfig+0x210>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <UART_SetConfig+0x1f0>
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d008      	beq.n	8006d2c <UART_SetConfig+0x200>
 8006d1a:	e00f      	b.n	8006d3c <UART_SetConfig+0x210>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d22:	e082      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d2a:	e07e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d32:	e07a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3a:	e076      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d42:	e072      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a35      	ldr	r2, [pc, #212]	; (8006e20 <UART_SetConfig+0x2f4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d12a      	bne.n	8006da4 <UART_SetConfig+0x278>
 8006d4e:	4b30      	ldr	r3, [pc, #192]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d5c:	d01a      	beq.n	8006d94 <UART_SetConfig+0x268>
 8006d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d62:	d81b      	bhi.n	8006d9c <UART_SetConfig+0x270>
 8006d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d68:	d00c      	beq.n	8006d84 <UART_SetConfig+0x258>
 8006d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6e:	d815      	bhi.n	8006d9c <UART_SetConfig+0x270>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <UART_SetConfig+0x250>
 8006d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d78:	d008      	beq.n	8006d8c <UART_SetConfig+0x260>
 8006d7a:	e00f      	b.n	8006d9c <UART_SetConfig+0x270>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d82:	e052      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d84:	2302      	movs	r3, #2
 8006d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d8a:	e04e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d92:	e04a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d9a:	e046      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da2:	e042      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <UART_SetConfig+0x2dc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d13a      	bne.n	8006e24 <UART_SetConfig+0x2f8>
 8006dae:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dbc:	d01a      	beq.n	8006df4 <UART_SetConfig+0x2c8>
 8006dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc2:	d81b      	bhi.n	8006dfc <UART_SetConfig+0x2d0>
 8006dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc8:	d00c      	beq.n	8006de4 <UART_SetConfig+0x2b8>
 8006dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dce:	d815      	bhi.n	8006dfc <UART_SetConfig+0x2d0>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <UART_SetConfig+0x2b0>
 8006dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd8:	d008      	beq.n	8006dec <UART_SetConfig+0x2c0>
 8006dda:	e00f      	b.n	8006dfc <UART_SetConfig+0x2d0>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de2:	e022      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006de4:	2302      	movs	r3, #2
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dea:	e01e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006dec:	2304      	movs	r3, #4
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df2:	e01a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006df4:	2308      	movs	r3, #8
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfa:	e016      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006dfc:	2310      	movs	r3, #16
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e02:	e012      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006e04:	cfff69f3 	.word	0xcfff69f3
 8006e08:	40008000 	.word	0x40008000
 8006e0c:	40013800 	.word	0x40013800
 8006e10:	40021000 	.word	0x40021000
 8006e14:	40004400 	.word	0x40004400
 8006e18:	40004800 	.word	0x40004800
 8006e1c:	40004c00 	.word	0x40004c00
 8006e20:	40005000 	.word	0x40005000
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4aae      	ldr	r2, [pc, #696]	; (80070e8 <UART_SetConfig+0x5bc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	f040 8097 	bne.w	8006f64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d823      	bhi.n	8006e86 <UART_SetConfig+0x35a>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <UART_SetConfig+0x318>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006e87 	.word	0x08006e87
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e87 	.word	0x08006e87
 8006e54:	08006e77 	.word	0x08006e77
 8006e58:	08006e87 	.word	0x08006e87
 8006e5c:	08006e87 	.word	0x08006e87
 8006e60:	08006e87 	.word	0x08006e87
 8006e64:	08006e7f 	.word	0x08006e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e68:	f7fe f864 	bl	8004f34 <HAL_RCC_GetPCLK1Freq>
 8006e6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e6e:	e010      	b.n	8006e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e70:	4b9e      	ldr	r3, [pc, #632]	; (80070ec <UART_SetConfig+0x5c0>)
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e74:	e00d      	b.n	8006e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e76:	f7fd ffc5 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8006e7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e7c:	e009      	b.n	8006e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e84:	e005      	b.n	8006e92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8130 	beq.w	80070fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	4a94      	ldr	r2, [pc, #592]	; (80070f0 <UART_SetConfig+0x5c4>)
 8006ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	4413      	add	r3, r2
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d305      	bcc.n	8006eca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d903      	bls.n	8006ed2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ed0:	e113      	b.n	80070fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	60bb      	str	r3, [r7, #8]
 8006ed8:	60fa      	str	r2, [r7, #12]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	4a84      	ldr	r2, [pc, #528]	; (80070f0 <UART_SetConfig+0x5c4>)
 8006ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	603b      	str	r3, [r7, #0]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ef4:	f7f9 fea0 	bl	8000c38 <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4610      	mov	r0, r2
 8006efe:	4619      	mov	r1, r3
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	020b      	lsls	r3, r1, #8
 8006f0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f0e:	0202      	lsls	r2, r0, #8
 8006f10:	6979      	ldr	r1, [r7, #20]
 8006f12:	6849      	ldr	r1, [r1, #4]
 8006f14:	0849      	lsrs	r1, r1, #1
 8006f16:	2000      	movs	r0, #0
 8006f18:	460c      	mov	r4, r1
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	eb12 0804 	adds.w	r8, r2, r4
 8006f20:	eb43 0905 	adc.w	r9, r3, r5
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	469a      	mov	sl, r3
 8006f2c:	4693      	mov	fp, r2
 8006f2e:	4652      	mov	r2, sl
 8006f30:	465b      	mov	r3, fp
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 fe7f 	bl	8000c38 <__aeabi_uldivmod>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4613      	mov	r3, r2
 8006f40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f48:	d308      	bcc.n	8006f5c <UART_SetConfig+0x430>
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f50:	d204      	bcs.n	8006f5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6a3a      	ldr	r2, [r7, #32]
 8006f58:	60da      	str	r2, [r3, #12]
 8006f5a:	e0ce      	b.n	80070fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f62:	e0ca      	b.n	80070fa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6c:	d166      	bne.n	800703c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006f6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d827      	bhi.n	8006fc6 <UART_SetConfig+0x49a>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <UART_SetConfig+0x450>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fa1 	.word	0x08006fa1
 8006f80:	08006fa9 	.word	0x08006fa9
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	08006fc7 	.word	0x08006fc7
 8006f8c:	08006fb7 	.word	0x08006fb7
 8006f90:	08006fc7 	.word	0x08006fc7
 8006f94:	08006fc7 	.word	0x08006fc7
 8006f98:	08006fc7 	.word	0x08006fc7
 8006f9c:	08006fbf 	.word	0x08006fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa0:	f7fd ffc8 	bl	8004f34 <HAL_RCC_GetPCLK1Freq>
 8006fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fa6:	e014      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fa8:	f7fd ffda 	bl	8004f60 <HAL_RCC_GetPCLK2Freq>
 8006fac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fae:	e010      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb0:	4b4e      	ldr	r3, [pc, #312]	; (80070ec <UART_SetConfig+0x5c0>)
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fb4:	e00d      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb6:	f7fd ff25 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8006fba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fbc:	e009      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fc4:	e005      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8090 	beq.w	80070fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	4a44      	ldr	r2, [pc, #272]	; (80070f0 <UART_SetConfig+0x5c4>)
 8006fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fec:	005a      	lsls	r2, r3, #1
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	441a      	add	r2, r3
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	2b0f      	cmp	r3, #15
 8007004:	d916      	bls.n	8007034 <UART_SetConfig+0x508>
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700c:	d212      	bcs.n	8007034 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	b29b      	uxth	r3, r3
 8007012:	f023 030f 	bic.w	r3, r3, #15
 8007016:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	085b      	lsrs	r3, r3, #1
 800701c:	b29b      	uxth	r3, r3
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	b29a      	uxth	r2, r3
 8007024:	8bfb      	ldrh	r3, [r7, #30]
 8007026:	4313      	orrs	r3, r2
 8007028:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	8bfa      	ldrh	r2, [r7, #30]
 8007030:	60da      	str	r2, [r3, #12]
 8007032:	e062      	b.n	80070fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800703a:	e05e      	b.n	80070fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800703c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007040:	2b08      	cmp	r3, #8
 8007042:	d828      	bhi.n	8007096 <UART_SetConfig+0x56a>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x520>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	08007071 	.word	0x08007071
 8007050:	08007079 	.word	0x08007079
 8007054:	08007081 	.word	0x08007081
 8007058:	08007097 	.word	0x08007097
 800705c:	08007087 	.word	0x08007087
 8007060:	08007097 	.word	0x08007097
 8007064:	08007097 	.word	0x08007097
 8007068:	08007097 	.word	0x08007097
 800706c:	0800708f 	.word	0x0800708f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007070:	f7fd ff60 	bl	8004f34 <HAL_RCC_GetPCLK1Freq>
 8007074:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007076:	e014      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007078:	f7fd ff72 	bl	8004f60 <HAL_RCC_GetPCLK2Freq>
 800707c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800707e:	e010      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007080:	4b1a      	ldr	r3, [pc, #104]	; (80070ec <UART_SetConfig+0x5c0>)
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007084:	e00d      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007086:	f7fd febd 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 800708a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800708c:	e009      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007094:	e005      	b.n	80070a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070a0:	bf00      	nop
    }

    if (pclk != 0U)
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d028      	beq.n	80070fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <UART_SetConfig+0x5c4>)
 80070ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	441a      	add	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	2b0f      	cmp	r3, #15
 80070d0:	d910      	bls.n	80070f4 <UART_SetConfig+0x5c8>
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d8:	d20c      	bcs.n	80070f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	b29a      	uxth	r2, r3
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60da      	str	r2, [r3, #12]
 80070e4:	e009      	b.n	80070fa <UART_SetConfig+0x5ce>
 80070e6:	bf00      	nop
 80070e8:	40008000 	.word	0x40008000
 80070ec:	00f42400 	.word	0x00f42400
 80070f0:	0800dfcc 	.word	0x0800dfcc
      }
      else
      {
        ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2201      	movs	r2, #1
 8007106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2200      	movs	r2, #0
 800710e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2200      	movs	r2, #0
 8007114:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007116:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800711a:	4618      	mov	r0, r3
 800711c:	3730      	adds	r7, #48	; 0x30
 800711e:	46bd      	mov	sp, r7
 8007120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01a      	beq.n	800723a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007222:	d10a      	bne.n	800723a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	605a      	str	r2, [r3, #4]
  }
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af02      	add	r7, sp, #8
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007278:	f7fb ff52 	bl	8003120 <HAL_GetTick>
 800727c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b08      	cmp	r3, #8
 800728a:	d10e      	bne.n	80072aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f82f 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e025      	b.n	80072f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d10e      	bne.n	80072d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f819 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e00f      	b.n	80072f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b09c      	sub	sp, #112	; 0x70
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	e0a9      	b.n	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007316:	f000 80a5 	beq.w	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731a:	f7fb ff01 	bl	8003120 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007326:	429a      	cmp	r2, r3
 8007328:	d302      	bcc.n	8007330 <UART_WaitOnFlagUntilTimeout+0x32>
 800732a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800732c:	2b00      	cmp	r3, #0
 800732e:	d140      	bne.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800733e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007344:	667b      	str	r3, [r7, #100]	; 0x64
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800734e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007350:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800735c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e6      	bne.n	8007330 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	663b      	str	r3, [r7, #96]	; 0x60
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3308      	adds	r3, #8
 8007380:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007382:	64ba      	str	r2, [r7, #72]	; 0x48
 8007384:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e5      	bne.n	8007362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e069      	b.n	8007486 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d051      	beq.n	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ce:	d149      	bne.n	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f8:	637b      	str	r3, [r7, #52]	; 0x34
 80073fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e6      	bne.n	80073da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3308      	adds	r3, #8
 8007412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	613b      	str	r3, [r7, #16]
   return(result);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	66bb      	str	r3, [r7, #104]	; 0x68
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800742c:	623a      	str	r2, [r7, #32]
 800742e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	69f9      	ldr	r1, [r7, #28]
 8007432:	6a3a      	ldr	r2, [r7, #32]
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	61bb      	str	r3, [r7, #24]
   return(result);
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e5      	bne.n	800740c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e010      	b.n	8007486 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	69da      	ldr	r2, [r3, #28]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	4013      	ands	r3, r2
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	429a      	cmp	r2, r3
 8007472:	bf0c      	ite	eq
 8007474:	2301      	moveq	r3, #1
 8007476:	2300      	movne	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	461a      	mov	r2, r3
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	429a      	cmp	r2, r3
 8007480:	f43f af46 	beq.w	8007310 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3770      	adds	r7, #112	; 0x70
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800748e:	b480      	push	{r7}
 8007490:	b085      	sub	sp, #20
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e027      	b.n	80074f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2224      	movs	r2, #36	; 0x24
 80074b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0201 	bic.w	r2, r2, #1
 80074ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007514:	2302      	movs	r3, #2
 8007516:	e02d      	b.n	8007574 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2224      	movs	r2, #36	; 0x24
 8007524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 0201 	bic.w	r2, r2, #1
 800753e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f84f 	bl	80075f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800758c:	2b01      	cmp	r3, #1
 800758e:	d101      	bne.n	8007594 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007590:	2302      	movs	r3, #2
 8007592:	e02d      	b.n	80075f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2224      	movs	r2, #36	; 0x24
 80075a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0201 	bic.w	r2, r2, #1
 80075ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f811 	bl	80075f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007604:	2b00      	cmp	r3, #0
 8007606:	d108      	bne.n	800761a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007618:	e031      	b.n	800767e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800761a:	2308      	movs	r3, #8
 800761c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800761e:	2308      	movs	r3, #8
 8007620:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	0e5b      	lsrs	r3, r3, #25
 800762a:	b2db      	uxtb	r3, r3
 800762c:	f003 0307 	and.w	r3, r3, #7
 8007630:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	0f5b      	lsrs	r3, r3, #29
 800763a:	b2db      	uxtb	r3, r3
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	7b3a      	ldrb	r2, [r7, #12]
 8007646:	4911      	ldr	r1, [pc, #68]	; (800768c <UARTEx_SetNbDataToProcess+0x94>)
 8007648:	5c8a      	ldrb	r2, [r1, r2]
 800764a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800764e:	7b3a      	ldrb	r2, [r7, #12]
 8007650:	490f      	ldr	r1, [pc, #60]	; (8007690 <UARTEx_SetNbDataToProcess+0x98>)
 8007652:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007654:	fb93 f3f2 	sdiv	r3, r3, r2
 8007658:	b29a      	uxth	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	7b7a      	ldrb	r2, [r7, #13]
 8007664:	4909      	ldr	r1, [pc, #36]	; (800768c <UARTEx_SetNbDataToProcess+0x94>)
 8007666:	5c8a      	ldrb	r2, [r1, r2]
 8007668:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800766c:	7b7a      	ldrb	r2, [r7, #13]
 800766e:	4908      	ldr	r1, [pc, #32]	; (8007690 <UARTEx_SetNbDataToProcess+0x98>)
 8007670:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007672:	fb93 f3f2 	sdiv	r3, r3, r2
 8007676:	b29a      	uxth	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800767e:	bf00      	nop
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	0800dfe4 	.word	0x0800dfe4
 8007690:	0800dfec 	.word	0x0800dfec

08007694 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007698:	4904      	ldr	r1, [pc, #16]	; (80076ac <MX_FATFS_Init+0x18>)
 800769a:	4805      	ldr	r0, [pc, #20]	; (80076b0 <MX_FATFS_Init+0x1c>)
 800769c:	f002 fe06 	bl	800a2ac <FATFS_LinkDriver>
 80076a0:	4603      	mov	r3, r0
 80076a2:	461a      	mov	r2, r3
 80076a4:	4b03      	ldr	r3, [pc, #12]	; (80076b4 <MX_FATFS_Init+0x20>)
 80076a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80076a8:	bf00      	nop
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20000840 	.word	0x20000840
 80076b0:	20000010 	.word	0x20000010
 80076b4:	2000083c 	.word	0x2000083c

080076b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80076bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80076be:	4618      	mov	r0, r3
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80076d2:	79fb      	ldrb	r3, [r7, #7]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7f9 ff4d 	bl	8001574 <SD_disk_initialize>
 80076da:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80076ee:	79fb      	ldrb	r3, [r7, #7]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fa f825 	bl	8001740 <SD_disk_status>
 80076f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007710:	7bf8      	ldrb	r0, [r7, #15]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	68b9      	ldr	r1, [r7, #8]
 8007718:	f7fa f828 	bl	800176c <SD_disk_read>
 800771c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
 8007732:	4603      	mov	r3, r0
 8007734:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007736:	7bf8      	ldrb	r0, [r7, #15]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	f7fa f87f 	bl	8001840 <SD_disk_write>
 8007742:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	603a      	str	r2, [r7, #0]
 8007756:	71fb      	strb	r3, [r7, #7]
 8007758:	460b      	mov	r3, r1
 800775a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800775c:	79b9      	ldrb	r1, [r7, #6]
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7fa f8f0 	bl	8001948 <SD_disk_ioctl>
 8007768:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <disk_status+0x30>)
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	79fa      	ldrb	r2, [r7, #7]
 800778c:	4905      	ldr	r1, [pc, #20]	; (80077a4 <disk_status+0x30>)
 800778e:	440a      	add	r2, r1
 8007790:	7a12      	ldrb	r2, [r2, #8]
 8007792:	4610      	mov	r0, r2
 8007794:	4798      	blx	r3
 8007796:	4603      	mov	r3, r0
 8007798:	73fb      	strb	r3, [r7, #15]
  return stat;
 800779a:	7bfb      	ldrb	r3, [r7, #15]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	2000086c 	.word	0x2000086c

080077a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80077b6:	79fb      	ldrb	r3, [r7, #7]
 80077b8:	4a0d      	ldr	r2, [pc, #52]	; (80077f0 <disk_initialize+0x48>)
 80077ba:	5cd3      	ldrb	r3, [r2, r3]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d111      	bne.n	80077e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	4a0b      	ldr	r2, [pc, #44]	; (80077f0 <disk_initialize+0x48>)
 80077c4:	2101      	movs	r1, #1
 80077c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <disk_initialize+0x48>)
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	79fa      	ldrb	r2, [r7, #7]
 80077d6:	4906      	ldr	r1, [pc, #24]	; (80077f0 <disk_initialize+0x48>)
 80077d8:	440a      	add	r2, r1
 80077da:	7a12      	ldrb	r2, [r2, #8]
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	2000086c 	.word	0x2000086c

080077f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80077f4:	b590      	push	{r4, r7, lr}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	607a      	str	r2, [r7, #4]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	4a0a      	ldr	r2, [pc, #40]	; (8007830 <disk_read+0x3c>)
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	689c      	ldr	r4, [r3, #8]
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	4a07      	ldr	r2, [pc, #28]	; (8007830 <disk_read+0x3c>)
 8007814:	4413      	add	r3, r2
 8007816:	7a18      	ldrb	r0, [r3, #8]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	47a0      	blx	r4
 8007820:	4603      	mov	r3, r0
 8007822:	75fb      	strb	r3, [r7, #23]
  return res;
 8007824:	7dfb      	ldrb	r3, [r7, #23]
}
 8007826:	4618      	mov	r0, r3
 8007828:	371c      	adds	r7, #28
 800782a:	46bd      	mov	sp, r7
 800782c:	bd90      	pop	{r4, r7, pc}
 800782e:	bf00      	nop
 8007830:	2000086c 	.word	0x2000086c

08007834 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007834:	b590      	push	{r4, r7, lr}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	4a0a      	ldr	r2, [pc, #40]	; (8007870 <disk_write+0x3c>)
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	68dc      	ldr	r4, [r3, #12]
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	4a07      	ldr	r2, [pc, #28]	; (8007870 <disk_write+0x3c>)
 8007854:	4413      	add	r3, r2
 8007856:	7a18      	ldrb	r0, [r3, #8]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	68b9      	ldr	r1, [r7, #8]
 800785e:	47a0      	blx	r4
 8007860:	4603      	mov	r3, r0
 8007862:	75fb      	strb	r3, [r7, #23]
  return res;
 8007864:	7dfb      	ldrb	r3, [r7, #23]
}
 8007866:	4618      	mov	r0, r3
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	bd90      	pop	{r4, r7, pc}
 800786e:	bf00      	nop
 8007870:	2000086c 	.word	0x2000086c

08007874 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	603a      	str	r2, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
 8007880:	460b      	mov	r3, r1
 8007882:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	4a09      	ldr	r2, [pc, #36]	; (80078ac <disk_ioctl+0x38>)
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	79fa      	ldrb	r2, [r7, #7]
 8007892:	4906      	ldr	r1, [pc, #24]	; (80078ac <disk_ioctl+0x38>)
 8007894:	440a      	add	r2, r1
 8007896:	7a10      	ldrb	r0, [r2, #8]
 8007898:	79b9      	ldrb	r1, [r7, #6]
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	4798      	blx	r3
 800789e:	4603      	mov	r3, r0
 80078a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	2000086c 	.word	0x2000086c

080078b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3301      	adds	r3, #1
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80078c0:	89fb      	ldrh	r3, [r7, #14]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	b21a      	sxth	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	b21b      	sxth	r3, r3
 80078cc:	4313      	orrs	r3, r2
 80078ce:	b21b      	sxth	r3, r3
 80078d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80078d2:	89fb      	ldrh	r3, [r7, #14]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3303      	adds	r3, #3
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	3202      	adds	r2, #2
 80078f8:	7812      	ldrb	r2, [r2, #0]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	021b      	lsls	r3, r3, #8
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	3201      	adds	r2, #1
 8007906:	7812      	ldrb	r2, [r2, #0]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	7812      	ldrb	r2, [r2, #0]
 8007914:	4313      	orrs	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]
	return rv;
 8007918:	68fb      	ldr	r3, [r7, #12]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	887a      	ldrh	r2, [r7, #2]
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	887b      	ldrh	r3, [r7, #2]
 8007940:	0a1b      	lsrs	r3, r3, #8
 8007942:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	607a      	str	r2, [r7, #4]
 800794a:	887a      	ldrh	r2, [r7, #2]
 800794c:	b2d2      	uxtb	r2, r2
 800794e:	701a      	strb	r2, [r3, #0]
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	0a1b      	lsrs	r3, r3, #8
 8007976:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	607a      	str	r2, [r7, #4]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	0a1b      	lsrs	r3, r3, #8
 8007988:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	701a      	strb	r2, [r3, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	0a1b      	lsrs	r3, r3, #8
 800799a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	607a      	str	r2, [r7, #4]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	701a      	strb	r2, [r3, #0]
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00d      	beq.n	80079ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	1c53      	adds	r3, r2, #1
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	1c59      	adds	r1, r3, #1
 80079d8:	6179      	str	r1, [r7, #20]
 80079da:	7812      	ldrb	r2, [r2, #0]
 80079dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	607b      	str	r3, [r7, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f1      	bne.n	80079ce <mem_cpy+0x1a>
	}
}
 80079ea:	bf00      	nop
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80079f6:	b480      	push	{r7}
 80079f8:	b087      	sub	sp, #28
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	617a      	str	r2, [r7, #20]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	b2d2      	uxtb	r2, r2
 8007a10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	607b      	str	r3, [r7, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1f3      	bne.n	8007a06 <mem_set+0x10>
}
 8007a1e:	bf00      	nop
 8007a20:	bf00      	nop
 8007a22:	371c      	adds	r7, #28
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007a2c:	b480      	push	{r7}
 8007a2e:	b089      	sub	sp, #36	; 0x24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	61fa      	str	r2, [r7, #28]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	61ba      	str	r2, [r7, #24]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	1acb      	subs	r3, r1, r3
 8007a58:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	607b      	str	r3, [r7, #4]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <mem_cmp+0x40>
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0eb      	beq.n	8007a44 <mem_cmp+0x18>

	return r;
 8007a6c:	697b      	ldr	r3, [r7, #20]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3724      	adds	r7, #36	; 0x24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007a84:	e002      	b.n	8007a8c <chk_chr+0x12>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	607b      	str	r3, [r7, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <chk_chr+0x26>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d1f2      	bne.n	8007a86 <chk_chr+0xc>
	return *str;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007aba:	2300      	movs	r3, #0
 8007abc:	60bb      	str	r3, [r7, #8]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e029      	b.n	8007b18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007ac4:	4a27      	ldr	r2, [pc, #156]	; (8007b64 <chk_lock+0xb4>)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	011b      	lsls	r3, r3, #4
 8007aca:	4413      	add	r3, r2
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01d      	beq.n	8007b0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007ad2:	4a24      	ldr	r2, [pc, #144]	; (8007b64 <chk_lock+0xb4>)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	4413      	add	r3, r2
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d116      	bne.n	8007b12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007ae4:	4a1f      	ldr	r2, [pc, #124]	; (8007b64 <chk_lock+0xb4>)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	4413      	add	r3, r2
 8007aec:	3304      	adds	r3, #4
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d10c      	bne.n	8007b12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007af8:	4a1a      	ldr	r2, [pc, #104]	; (8007b64 <chk_lock+0xb4>)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	4413      	add	r3, r2
 8007b00:	3308      	adds	r3, #8
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d102      	bne.n	8007b12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b0c:	e007      	b.n	8007b1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d9d2      	bls.n	8007ac4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d109      	bne.n	8007b38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d102      	bne.n	8007b30 <chk_lock+0x80>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d101      	bne.n	8007b34 <chk_lock+0x84>
 8007b30:	2300      	movs	r3, #0
 8007b32:	e010      	b.n	8007b56 <chk_lock+0xa6>
 8007b34:	2312      	movs	r3, #18
 8007b36:	e00e      	b.n	8007b56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d108      	bne.n	8007b50 <chk_lock+0xa0>
 8007b3e:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <chk_lock+0xb4>)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	4413      	add	r3, r2
 8007b46:	330c      	adds	r3, #12
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b4e:	d101      	bne.n	8007b54 <chk_lock+0xa4>
 8007b50:	2310      	movs	r3, #16
 8007b52:	e000      	b.n	8007b56 <chk_lock+0xa6>
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	2000084c 	.word	0x2000084c

08007b68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	607b      	str	r3, [r7, #4]
 8007b72:	e002      	b.n	8007b7a <enq_lock+0x12>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3301      	adds	r3, #1
 8007b78:	607b      	str	r3, [r7, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d806      	bhi.n	8007b8e <enq_lock+0x26>
 8007b80:	4a09      	ldr	r2, [pc, #36]	; (8007ba8 <enq_lock+0x40>)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	4413      	add	r3, r2
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f2      	bne.n	8007b74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	bf14      	ite	ne
 8007b94:	2301      	movne	r3, #1
 8007b96:	2300      	moveq	r3, #0
 8007b98:	b2db      	uxtb	r3, r3
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	2000084c 	.word	0x2000084c

08007bac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	e01f      	b.n	8007bfc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007bbc:	4a41      	ldr	r2, [pc, #260]	; (8007cc4 <inc_lock+0x118>)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	4413      	add	r3, r2
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d113      	bne.n	8007bf6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007bce:	4a3d      	ldr	r2, [pc, #244]	; (8007cc4 <inc_lock+0x118>)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	4413      	add	r3, r2
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d109      	bne.n	8007bf6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007be2:	4a38      	ldr	r2, [pc, #224]	; (8007cc4 <inc_lock+0x118>)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	4413      	add	r3, r2
 8007bea:	3308      	adds	r3, #8
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d006      	beq.n	8007c04 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d9dc      	bls.n	8007bbc <inc_lock+0x10>
 8007c02:	e000      	b.n	8007c06 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007c04:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d132      	bne.n	8007c72 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	e002      	b.n	8007c18 <inc_lock+0x6c>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3301      	adds	r3, #1
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d806      	bhi.n	8007c2c <inc_lock+0x80>
 8007c1e:	4a29      	ldr	r2, [pc, #164]	; (8007cc4 <inc_lock+0x118>)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	4413      	add	r3, r2
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1f2      	bne.n	8007c12 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d101      	bne.n	8007c36 <inc_lock+0x8a>
 8007c32:	2300      	movs	r3, #0
 8007c34:	e040      	b.n	8007cb8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4922      	ldr	r1, [pc, #136]	; (8007cc4 <inc_lock+0x118>)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	440b      	add	r3, r1
 8007c42:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	491e      	ldr	r1, [pc, #120]	; (8007cc4 <inc_lock+0x118>)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	440b      	add	r3, r1
 8007c50:	3304      	adds	r3, #4
 8007c52:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	695a      	ldr	r2, [r3, #20]
 8007c58:	491a      	ldr	r1, [pc, #104]	; (8007cc4 <inc_lock+0x118>)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	011b      	lsls	r3, r3, #4
 8007c5e:	440b      	add	r3, r1
 8007c60:	3308      	adds	r3, #8
 8007c62:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007c64:	4a17      	ldr	r2, [pc, #92]	; (8007cc4 <inc_lock+0x118>)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	011b      	lsls	r3, r3, #4
 8007c6a:	4413      	add	r3, r2
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	2200      	movs	r2, #0
 8007c70:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d009      	beq.n	8007c8c <inc_lock+0xe0>
 8007c78:	4a12      	ldr	r2, [pc, #72]	; (8007cc4 <inc_lock+0x118>)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	4413      	add	r3, r2
 8007c80:	330c      	adds	r3, #12
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <inc_lock+0xe0>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	e015      	b.n	8007cb8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d108      	bne.n	8007ca4 <inc_lock+0xf8>
 8007c92:	4a0c      	ldr	r2, [pc, #48]	; (8007cc4 <inc_lock+0x118>)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	4413      	add	r3, r2
 8007c9a:	330c      	adds	r3, #12
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	e001      	b.n	8007ca8 <inc_lock+0xfc>
 8007ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ca8:	4906      	ldr	r1, [pc, #24]	; (8007cc4 <inc_lock+0x118>)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	011b      	lsls	r3, r3, #4
 8007cae:	440b      	add	r3, r1
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3301      	adds	r3, #1
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	2000084c 	.word	0x2000084c

08007cc8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	607b      	str	r3, [r7, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d825      	bhi.n	8007d28 <dec_lock+0x60>
		n = Files[i].ctr;
 8007cdc:	4a17      	ldr	r2, [pc, #92]	; (8007d3c <dec_lock+0x74>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	4413      	add	r3, r2
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007cea:	89fb      	ldrh	r3, [r7, #14]
 8007cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf0:	d101      	bne.n	8007cf6 <dec_lock+0x2e>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007cf6:	89fb      	ldrh	r3, [r7, #14]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <dec_lock+0x3a>
 8007cfc:	89fb      	ldrh	r3, [r7, #14]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007d02:	4a0e      	ldr	r2, [pc, #56]	; (8007d3c <dec_lock+0x74>)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	4413      	add	r3, r2
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	89fa      	ldrh	r2, [r7, #14]
 8007d0e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007d10:	89fb      	ldrh	r3, [r7, #14]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d105      	bne.n	8007d22 <dec_lock+0x5a>
 8007d16:	4a09      	ldr	r2, [pc, #36]	; (8007d3c <dec_lock+0x74>)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	4413      	add	r3, r2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	737b      	strb	r3, [r7, #13]
 8007d26:	e001      	b.n	8007d2c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007d28:	2302      	movs	r3, #2
 8007d2a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007d2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	2000084c 	.word	0x2000084c

08007d40 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	e010      	b.n	8007d70 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007d4e:	4a0d      	ldr	r2, [pc, #52]	; (8007d84 <clear_lock+0x44>)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	4413      	add	r3, r2
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d105      	bne.n	8007d6a <clear_lock+0x2a>
 8007d5e:	4a09      	ldr	r2, [pc, #36]	; (8007d84 <clear_lock+0x44>)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	4413      	add	r3, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d9eb      	bls.n	8007d4e <clear_lock+0xe>
	}
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	2000084c 	.word	0x2000084c

08007d88 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	78db      	ldrb	r3, [r3, #3]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d034      	beq.n	8007e06 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	7858      	ldrb	r0, [r3, #1]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007dac:	2301      	movs	r3, #1
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	f7ff fd40 	bl	8007834 <disk_write>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	73fb      	strb	r3, [r7, #15]
 8007dbe:	e022      	b.n	8007e06 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	1ad2      	subs	r2, r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d217      	bcs.n	8007e06 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	789b      	ldrb	r3, [r3, #2]
 8007dda:	613b      	str	r3, [r7, #16]
 8007ddc:	e010      	b.n	8007e00 <sync_window+0x78>
					wsect += fs->fsize;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	4413      	add	r3, r2
 8007de6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	7858      	ldrb	r0, [r3, #1]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007df2:	2301      	movs	r3, #1
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	f7ff fd1d 	bl	8007834 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	613b      	str	r3, [r7, #16]
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d8eb      	bhi.n	8007dde <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d01b      	beq.n	8007e60 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff ffad 	bl	8007d88 <sync_window>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d113      	bne.n	8007e60 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7858      	ldrb	r0, [r3, #1]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e42:	2301      	movs	r3, #1
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	f7ff fcd5 	bl	80077f4 <disk_read>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d004      	beq.n	8007e5a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007e50:	f04f 33ff 	mov.w	r3, #4294967295
 8007e54:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff ff87 	bl	8007d88 <sync_window>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d158      	bne.n	8007f36 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d148      	bne.n	8007f1e <sync_fs+0xb2>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	791b      	ldrb	r3, [r3, #4]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d144      	bne.n	8007f1e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3330      	adds	r3, #48	; 0x30
 8007e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff fda9 	bl	80079f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3330      	adds	r3, #48	; 0x30
 8007ea8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007eac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7ff fd38 	bl	8007926 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3330      	adds	r3, #48	; 0x30
 8007eba:	4921      	ldr	r1, [pc, #132]	; (8007f40 <sync_fs+0xd4>)
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff fd4d 	bl	800795c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3330      	adds	r3, #48	; 0x30
 8007ec6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007eca:	491e      	ldr	r1, [pc, #120]	; (8007f44 <sync_fs+0xd8>)
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff fd45 	bl	800795c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3330      	adds	r3, #48	; 0x30
 8007ed6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f7ff fd3b 	bl	800795c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3330      	adds	r3, #48	; 0x30
 8007eea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	f7ff fd31 	bl	800795c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	7858      	ldrb	r0, [r3, #1]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f12:	2301      	movs	r3, #1
 8007f14:	f7ff fc8e 	bl	8007834 <disk_write>
			fs->fsi_flag = 0;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	785b      	ldrb	r3, [r3, #1]
 8007f22:	2200      	movs	r2, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7ff fca4 	bl	8007874 <disk_ioctl>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <sync_fs+0xca>
 8007f32:	2301      	movs	r3, #1
 8007f34:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	41615252 	.word	0x41615252
 8007f44:	61417272 	.word	0x61417272

08007f48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	3b02      	subs	r3, #2
 8007f56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	3b02      	subs	r3, #2
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d301      	bcc.n	8007f68 <clust2sect+0x20>
 8007f64:	2300      	movs	r3, #0
 8007f66:	e008      	b.n	8007f7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	895b      	ldrh	r3, [r3, #10]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	fb03 f202 	mul.w	r2, r3, r2
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f78:	4413      	add	r3, r2
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b086      	sub	sp, #24
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d904      	bls.n	8007fa6 <get_fat+0x20>
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d302      	bcc.n	8007fac <get_fat+0x26>
		val = 1;	/* Internal error */
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	e08f      	b.n	80080cc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007fac:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d062      	beq.n	8008080 <get_fat+0xfa>
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	dc7c      	bgt.n	80080b8 <get_fat+0x132>
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d002      	beq.n	8007fc8 <get_fat+0x42>
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d042      	beq.n	800804c <get_fat+0xc6>
 8007fc6:	e077      	b.n	80080b8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	085b      	lsrs	r3, r3, #1
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6a1a      	ldr	r2, [r3, #32]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	0a5b      	lsrs	r3, r3, #9
 8007fde:	4413      	add	r3, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6938      	ldr	r0, [r7, #16]
 8007fe4:	f7ff ff14 	bl	8007e10 <move_window>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d167      	bne.n	80080be <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	60fa      	str	r2, [r7, #12]
 8007ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008000:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	6a1a      	ldr	r2, [r3, #32]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	0a5b      	lsrs	r3, r3, #9
 800800a:	4413      	add	r3, r2
 800800c:	4619      	mov	r1, r3
 800800e:	6938      	ldr	r0, [r7, #16]
 8008010:	f7ff fefe 	bl	8007e10 <move_window>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d153      	bne.n	80080c2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4413      	add	r3, r2
 8008024:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008028:	021b      	lsls	r3, r3, #8
 800802a:	461a      	mov	r2, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4313      	orrs	r3, r2
 8008030:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <get_fat+0xbc>
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	091b      	lsrs	r3, r3, #4
 8008040:	e002      	b.n	8008048 <get_fat+0xc2>
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008048:	617b      	str	r3, [r7, #20]
			break;
 800804a:	e03f      	b.n	80080cc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	6a1a      	ldr	r2, [r3, #32]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	0a1b      	lsrs	r3, r3, #8
 8008054:	4413      	add	r3, r2
 8008056:	4619      	mov	r1, r3
 8008058:	6938      	ldr	r0, [r7, #16]
 800805a:	f7ff fed9 	bl	8007e10 <move_window>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d130      	bne.n	80080c6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008072:	4413      	add	r3, r2
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff fc1b 	bl	80078b0 <ld_word>
 800807a:	4603      	mov	r3, r0
 800807c:	617b      	str	r3, [r7, #20]
			break;
 800807e:	e025      	b.n	80080cc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6a1a      	ldr	r2, [r3, #32]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	09db      	lsrs	r3, r3, #7
 8008088:	4413      	add	r3, r2
 800808a:	4619      	mov	r1, r3
 800808c:	6938      	ldr	r0, [r7, #16]
 800808e:	f7ff febf 	bl	8007e10 <move_window>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d118      	bne.n	80080ca <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80080a6:	4413      	add	r3, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fc19 	bl	80078e0 <ld_dword>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80080b4:	617b      	str	r3, [r7, #20]
			break;
 80080b6:	e009      	b.n	80080cc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80080b8:	2301      	movs	r3, #1
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	e006      	b.n	80080cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080be:	bf00      	nop
 80080c0:	e004      	b.n	80080cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080c2:	bf00      	nop
 80080c4:	e002      	b.n	80080cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80080c6:	bf00      	nop
 80080c8:	e000      	b.n	80080cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80080ca:	bf00      	nop
		}
	}

	return val;
 80080cc:	697b      	ldr	r3, [r7, #20]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80080d6:	b590      	push	{r4, r7, lr}
 80080d8:	b089      	sub	sp, #36	; 0x24
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80080e2:	2302      	movs	r3, #2
 80080e4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	f240 80d2 	bls.w	8008292 <put_fat+0x1bc>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	f080 80cc 	bcs.w	8008292 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b03      	cmp	r3, #3
 8008100:	f000 8096 	beq.w	8008230 <put_fat+0x15a>
 8008104:	2b03      	cmp	r3, #3
 8008106:	f300 80cd 	bgt.w	80082a4 <put_fat+0x1ce>
 800810a:	2b01      	cmp	r3, #1
 800810c:	d002      	beq.n	8008114 <put_fat+0x3e>
 800810e:	2b02      	cmp	r3, #2
 8008110:	d06e      	beq.n	80081f0 <put_fat+0x11a>
 8008112:	e0c7      	b.n	80082a4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	61bb      	str	r3, [r7, #24]
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	085b      	lsrs	r3, r3, #1
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	4413      	add	r3, r2
 8008120:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a1a      	ldr	r2, [r3, #32]
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	0a5b      	lsrs	r3, r3, #9
 800812a:	4413      	add	r3, r2
 800812c:	4619      	mov	r1, r3
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f7ff fe6e 	bl	8007e10 <move_window>
 8008134:	4603      	mov	r3, r0
 8008136:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008138:	7ffb      	ldrb	r3, [r7, #31]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f040 80ab 	bne.w	8008296 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	1c59      	adds	r1, r3, #1
 800814a:	61b9      	str	r1, [r7, #24]
 800814c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008150:	4413      	add	r3, r2
 8008152:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00d      	beq.n	800817a <put_fat+0xa4>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	b25b      	sxtb	r3, r3
 8008164:	f003 030f 	and.w	r3, r3, #15
 8008168:	b25a      	sxtb	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	b25b      	sxtb	r3, r3
 8008172:	4313      	orrs	r3, r2
 8008174:	b25b      	sxtb	r3, r3
 8008176:	b2db      	uxtb	r3, r3
 8008178:	e001      	b.n	800817e <put_fat+0xa8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2201      	movs	r2, #1
 8008186:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a1a      	ldr	r2, [r3, #32]
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	0a5b      	lsrs	r3, r3, #9
 8008190:	4413      	add	r3, r2
 8008192:	4619      	mov	r1, r3
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff fe3b 	bl	8007e10 <move_window>
 800819a:	4603      	mov	r3, r0
 800819c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800819e:	7ffb      	ldrb	r3, [r7, #31]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d17a      	bne.n	800829a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b0:	4413      	add	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <put_fat+0xf0>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	091b      	lsrs	r3, r3, #4
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	e00e      	b.n	80081e4 <put_fat+0x10e>
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	b25b      	sxtb	r3, r3
 80081cc:	f023 030f 	bic.w	r3, r3, #15
 80081d0:	b25a      	sxtb	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	0a1b      	lsrs	r3, r3, #8
 80081d6:	b25b      	sxtb	r3, r3
 80081d8:	f003 030f 	and.w	r3, r3, #15
 80081dc:	b25b      	sxtb	r3, r3
 80081de:	4313      	orrs	r3, r2
 80081e0:	b25b      	sxtb	r3, r3
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	70da      	strb	r2, [r3, #3]
			break;
 80081ee:	e059      	b.n	80082a4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1a      	ldr	r2, [r3, #32]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	0a1b      	lsrs	r3, r3, #8
 80081f8:	4413      	add	r3, r2
 80081fa:	4619      	mov	r1, r3
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f7ff fe07 	bl	8007e10 <move_window>
 8008202:	4603      	mov	r3, r0
 8008204:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008206:	7ffb      	ldrb	r3, [r7, #31]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d148      	bne.n	800829e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800821a:	4413      	add	r3, r2
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	b292      	uxth	r2, r2
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff fb7f 	bl	8007926 <st_word>
			fs->wflag = 1;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2201      	movs	r2, #1
 800822c:	70da      	strb	r2, [r3, #3]
			break;
 800822e:	e039      	b.n	80082a4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6a1a      	ldr	r2, [r3, #32]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	09db      	lsrs	r3, r3, #7
 8008238:	4413      	add	r3, r2
 800823a:	4619      	mov	r1, r3
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff fde7 	bl	8007e10 <move_window>
 8008242:	4603      	mov	r3, r0
 8008244:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008246:	7ffb      	ldrb	r3, [r7, #31]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d12a      	bne.n	80082a2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008260:	4413      	add	r3, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff fb3c 	bl	80078e0 <ld_dword>
 8008268:	4603      	mov	r3, r0
 800826a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800826e:	4323      	orrs	r3, r4
 8008270:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008280:	4413      	add	r3, r2
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fb69 	bl	800795c <st_dword>
			fs->wflag = 1;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	70da      	strb	r2, [r3, #3]
			break;
 8008290:	e008      	b.n	80082a4 <put_fat+0x1ce>
		}
	}
 8008292:	bf00      	nop
 8008294:	e006      	b.n	80082a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008296:	bf00      	nop
 8008298:	e004      	b.n	80082a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800829a:	bf00      	nop
 800829c:	e002      	b.n	80082a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800829e:	bf00      	nop
 80082a0:	e000      	b.n	80082a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80082a2:	bf00      	nop
	return res;
 80082a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3724      	adds	r7, #36	; 0x24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd90      	pop	{r4, r7, pc}

080082ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b088      	sub	sp, #32
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d904      	bls.n	80082d4 <remove_chain+0x26>
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d301      	bcc.n	80082d8 <remove_chain+0x2a>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e04b      	b.n	8008370 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00c      	beq.n	80082f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80082de:	f04f 32ff 	mov.w	r2, #4294967295
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	69b8      	ldr	r0, [r7, #24]
 80082e6:	f7ff fef6 	bl	80080d6 <put_fat>
 80082ea:	4603      	mov	r3, r0
 80082ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80082ee:	7ffb      	ldrb	r3, [r7, #31]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <remove_chain+0x4a>
 80082f4:	7ffb      	ldrb	r3, [r7, #31]
 80082f6:	e03b      	b.n	8008370 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80082f8:	68b9      	ldr	r1, [r7, #8]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff fe43 	bl	8007f86 <get_fat>
 8008300:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d031      	beq.n	800836c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d101      	bne.n	8008312 <remove_chain+0x64>
 800830e:	2302      	movs	r3, #2
 8008310:	e02e      	b.n	8008370 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008318:	d101      	bne.n	800831e <remove_chain+0x70>
 800831a:	2301      	movs	r3, #1
 800831c:	e028      	b.n	8008370 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800831e:	2200      	movs	r2, #0
 8008320:	68b9      	ldr	r1, [r7, #8]
 8008322:	69b8      	ldr	r0, [r7, #24]
 8008324:	f7ff fed7 	bl	80080d6 <put_fat>
 8008328:	4603      	mov	r3, r0
 800832a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800832c:	7ffb      	ldrb	r3, [r7, #31]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <remove_chain+0x88>
 8008332:	7ffb      	ldrb	r3, [r7, #31]
 8008334:	e01c      	b.n	8008370 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	691a      	ldr	r2, [r3, #16]
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	3b02      	subs	r3, #2
 8008340:	429a      	cmp	r2, r3
 8008342:	d20b      	bcs.n	800835c <remove_chain+0xae>
			fs->free_clst++;
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	791b      	ldrb	r3, [r3, #4]
 8008352:	f043 0301 	orr.w	r3, r3, #1
 8008356:	b2da      	uxtb	r2, r3
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	429a      	cmp	r2, r3
 8008368:	d3c6      	bcc.n	80082f8 <remove_chain+0x4a>
 800836a:	e000      	b.n	800836e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800836c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3720      	adds	r7, #32
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10d      	bne.n	80083aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d004      	beq.n	80083a4 <create_chain+0x2c>
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d31b      	bcc.n	80083dc <create_chain+0x64>
 80083a4:	2301      	movs	r3, #1
 80083a6:	61bb      	str	r3, [r7, #24]
 80083a8:	e018      	b.n	80083dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff fdea 	bl	8007f86 <get_fat>
 80083b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d801      	bhi.n	80083be <create_chain+0x46>
 80083ba:	2301      	movs	r3, #1
 80083bc:	e070      	b.n	80084a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c4:	d101      	bne.n	80083ca <create_chain+0x52>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	e06a      	b.n	80084a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d201      	bcs.n	80083d8 <create_chain+0x60>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	e063      	b.n	80084a0 <create_chain+0x128>
		scl = clst;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	3301      	adds	r3, #1
 80083e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	69fa      	ldr	r2, [r7, #28]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d307      	bcc.n	8008400 <create_chain+0x88>
				ncl = 2;
 80083f0:	2302      	movs	r3, #2
 80083f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80083f4:	69fa      	ldr	r2, [r7, #28]
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d901      	bls.n	8008400 <create_chain+0x88>
 80083fc:	2300      	movs	r3, #0
 80083fe:	e04f      	b.n	80084a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008400:	69f9      	ldr	r1, [r7, #28]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff fdbf 	bl	8007f86 <get_fat>
 8008408:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d003      	beq.n	800841e <create_chain+0xa6>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841c:	d101      	bne.n	8008422 <create_chain+0xaa>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	e03e      	b.n	80084a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008422:	69fa      	ldr	r2, [r7, #28]
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	429a      	cmp	r2, r3
 8008428:	d1da      	bne.n	80083e0 <create_chain+0x68>
 800842a:	2300      	movs	r3, #0
 800842c:	e038      	b.n	80084a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800842e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008430:	f04f 32ff 	mov.w	r2, #4294967295
 8008434:	69f9      	ldr	r1, [r7, #28]
 8008436:	6938      	ldr	r0, [r7, #16]
 8008438:	f7ff fe4d 	bl	80080d6 <put_fat>
 800843c:	4603      	mov	r3, r0
 800843e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008440:	7dfb      	ldrb	r3, [r7, #23]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d109      	bne.n	800845a <create_chain+0xe2>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d006      	beq.n	800845a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6938      	ldr	r0, [r7, #16]
 8008452:	f7ff fe40 	bl	80080d6 <put_fat>
 8008456:	4603      	mov	r3, r0
 8008458:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d116      	bne.n	800848e <create_chain+0x116>
		fs->last_clst = ncl;
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	691a      	ldr	r2, [r3, #16]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	3b02      	subs	r3, #2
 8008470:	429a      	cmp	r2, r3
 8008472:	d804      	bhi.n	800847e <create_chain+0x106>
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	1e5a      	subs	r2, r3, #1
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	791b      	ldrb	r3, [r3, #4]
 8008482:	f043 0301 	orr.w	r3, r3, #1
 8008486:	b2da      	uxtb	r2, r3
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	711a      	strb	r2, [r3, #4]
 800848c:	e007      	b.n	800849e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800848e:	7dfb      	ldrb	r3, [r7, #23]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d102      	bne.n	800849a <create_chain+0x122>
 8008494:	f04f 33ff 	mov.w	r3, #4294967295
 8008498:	e000      	b.n	800849c <create_chain+0x124>
 800849a:	2301      	movs	r3, #1
 800849c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800849e:	69fb      	ldr	r3, [r7, #28]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3720      	adds	r7, #32
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	3304      	adds	r3, #4
 80084be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	0a5b      	lsrs	r3, r3, #9
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	8952      	ldrh	r2, [r2, #10]
 80084c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	1d1a      	adds	r2, r3, #4
 80084d2:	613a      	str	r2, [r7, #16]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <clmt_clust+0x3a>
 80084de:	2300      	movs	r3, #0
 80084e0:	e010      	b.n	8008504 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d307      	bcc.n	80084fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	617b      	str	r3, [r7, #20]
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	3304      	adds	r3, #4
 80084f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80084f8:	e7e9      	b.n	80084ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80084fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	4413      	add	r3, r2
}
 8008504:	4618      	mov	r0, r3
 8008506:	371c      	adds	r7, #28
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008526:	d204      	bcs.n	8008532 <dir_sdi+0x22>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	f003 031f 	and.w	r3, r3, #31
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008532:	2302      	movs	r3, #2
 8008534:	e063      	b.n	80085fe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d106      	bne.n	8008556 <dir_sdi+0x46>
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b02      	cmp	r3, #2
 800854e:	d902      	bls.n	8008556 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10c      	bne.n	8008576 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	095b      	lsrs	r3, r3, #5
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	8912      	ldrh	r2, [r2, #8]
 8008564:	4293      	cmp	r3, r2
 8008566:	d301      	bcc.n	800856c <dir_sdi+0x5c>
 8008568:	2302      	movs	r3, #2
 800856a:	e048      	b.n	80085fe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	61da      	str	r2, [r3, #28]
 8008574:	e029      	b.n	80085ca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	895b      	ldrh	r3, [r3, #10]
 800857a:	025b      	lsls	r3, r3, #9
 800857c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800857e:	e019      	b.n	80085b4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6979      	ldr	r1, [r7, #20]
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff fcfe 	bl	8007f86 <get_fat>
 800858a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008592:	d101      	bne.n	8008598 <dir_sdi+0x88>
 8008594:	2301      	movs	r3, #1
 8008596:	e032      	b.n	80085fe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d904      	bls.n	80085a8 <dir_sdi+0x98>
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d301      	bcc.n	80085ac <dir_sdi+0x9c>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e028      	b.n	80085fe <dir_sdi+0xee>
			ofs -= csz;
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d2e1      	bcs.n	8008580 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80085bc:	6979      	ldr	r1, [r7, #20]
 80085be:	6938      	ldr	r0, [r7, #16]
 80085c0:	f7ff fcc2 	bl	8007f48 <clust2sect>
 80085c4:	4602      	mov	r2, r0
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <dir_sdi+0xcc>
 80085d8:	2302      	movs	r3, #2
 80085da:	e010      	b.n	80085fe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	69da      	ldr	r2, [r3, #28]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	0a5b      	lsrs	r3, r3, #9
 80085e4:	441a      	add	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f6:	441a      	add	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	3320      	adds	r3, #32
 800861c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <dir_next+0x28>
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800862c:	d301      	bcc.n	8008632 <dir_next+0x2c>
 800862e:	2304      	movs	r3, #4
 8008630:	e0aa      	b.n	8008788 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008638:	2b00      	cmp	r3, #0
 800863a:	f040 8098 	bne.w	800876e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10b      	bne.n	8008668 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	095b      	lsrs	r3, r3, #5
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	8912      	ldrh	r2, [r2, #8]
 8008658:	4293      	cmp	r3, r2
 800865a:	f0c0 8088 	bcc.w	800876e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	61da      	str	r2, [r3, #28]
 8008664:	2304      	movs	r3, #4
 8008666:	e08f      	b.n	8008788 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	0a5b      	lsrs	r3, r3, #9
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	8952      	ldrh	r2, [r2, #10]
 8008670:	3a01      	subs	r2, #1
 8008672:	4013      	ands	r3, r2
 8008674:	2b00      	cmp	r3, #0
 8008676:	d17a      	bne.n	800876e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	4619      	mov	r1, r3
 8008680:	4610      	mov	r0, r2
 8008682:	f7ff fc80 	bl	8007f86 <get_fat>
 8008686:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d801      	bhi.n	8008692 <dir_next+0x8c>
 800868e:	2302      	movs	r3, #2
 8008690:	e07a      	b.n	8008788 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008698:	d101      	bne.n	800869e <dir_next+0x98>
 800869a:	2301      	movs	r3, #1
 800869c:	e074      	b.n	8008788 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d358      	bcc.n	800875a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d104      	bne.n	80086b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	61da      	str	r2, [r3, #28]
 80086b4:	2304      	movs	r3, #4
 80086b6:	e067      	b.n	8008788 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7ff fe59 	bl	8008378 <create_chain>
 80086c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <dir_next+0xcc>
 80086ce:	2307      	movs	r3, #7
 80086d0:	e05a      	b.n	8008788 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <dir_next+0xd6>
 80086d8:	2302      	movs	r3, #2
 80086da:	e055      	b.n	8008788 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e2:	d101      	bne.n	80086e8 <dir_next+0xe2>
 80086e4:	2301      	movs	r3, #1
 80086e6:	e04f      	b.n	8008788 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f7ff fb4d 	bl	8007d88 <sync_window>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <dir_next+0xf2>
 80086f4:	2301      	movs	r3, #1
 80086f6:	e047      	b.n	8008788 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3330      	adds	r3, #48	; 0x30
 80086fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008700:	2100      	movs	r1, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff f977 	bl	80079f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008708:	2300      	movs	r3, #0
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	6979      	ldr	r1, [r7, #20]
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff fc1a 	bl	8007f48 <clust2sect>
 8008714:	4602      	mov	r2, r0
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	62da      	str	r2, [r3, #44]	; 0x2c
 800871a:	e012      	b.n	8008742 <dir_next+0x13c>
						fs->wflag = 1;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2201      	movs	r2, #1
 8008720:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7ff fb30 	bl	8007d88 <sync_window>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <dir_next+0x12c>
 800872e:	2301      	movs	r3, #1
 8008730:	e02a      	b.n	8008788 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	3301      	adds	r3, #1
 8008736:	613b      	str	r3, [r7, #16]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	1c5a      	adds	r2, r3, #1
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	62da      	str	r2, [r3, #44]	; 0x2c
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	895b      	ldrh	r3, [r3, #10]
 8008746:	461a      	mov	r2, r3
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	4293      	cmp	r3, r2
 800874c:	d3e6      	bcc.n	800871c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad2      	subs	r2, r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008760:	6979      	ldr	r1, [r7, #20]
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff fbf0 	bl	8007f48 <clust2sect>
 8008768:	4602      	mov	r2, r0
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008780:	441a      	add	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80087a0:	2100      	movs	r1, #0
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff feb4 	bl	8008510 <dir_sdi>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d12b      	bne.n	800880a <dir_alloc+0x7a>
		n = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	4619      	mov	r1, r3
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7ff fb27 	bl	8007e10 <move_window>
 80087c2:	4603      	mov	r3, r0
 80087c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d11d      	bne.n	8008808 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2be5      	cmp	r3, #229	; 0xe5
 80087d4:	d004      	beq.n	80087e0 <dir_alloc+0x50>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d107      	bne.n	80087f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	3301      	adds	r3, #1
 80087e4:	613b      	str	r3, [r7, #16]
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d102      	bne.n	80087f4 <dir_alloc+0x64>
 80087ee:	e00c      	b.n	800880a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80087f0:	2300      	movs	r3, #0
 80087f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80087f4:	2101      	movs	r1, #1
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff ff05 	bl	8008606 <dir_next>
 80087fc:	4603      	mov	r3, r0
 80087fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0d7      	beq.n	80087b6 <dir_alloc+0x26>
 8008806:	e000      	b.n	800880a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008808:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	2b04      	cmp	r3, #4
 800880e:	d101      	bne.n	8008814 <dir_alloc+0x84>
 8008810:	2307      	movs	r3, #7
 8008812:	75fb      	strb	r3, [r7, #23]
	return res;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	331a      	adds	r3, #26
 800882c:	4618      	mov	r0, r3
 800882e:	f7ff f83f 	bl	80078b0 <ld_word>
 8008832:	4603      	mov	r3, r0
 8008834:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	2b03      	cmp	r3, #3
 800883c:	d109      	bne.n	8008852 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	3314      	adds	r3, #20
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff f834 	bl	80078b0 <ld_word>
 8008848:	4603      	mov	r3, r0
 800884a:	041b      	lsls	r3, r3, #16
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008852:	68fb      	ldr	r3, [r7, #12]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	331a      	adds	r3, #26
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	b292      	uxth	r2, r2
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff f857 	bl	8007926 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b03      	cmp	r3, #3
 800887e:	d109      	bne.n	8008894 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f103 0214 	add.w	r2, r3, #20
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	0c1b      	lsrs	r3, r3, #16
 800888a:	b29b      	uxth	r3, r3
 800888c:	4619      	mov	r1, r3
 800888e:	4610      	mov	r0, r2
 8008890:	f7ff f849 	bl	8007926 <st_word>
	}
}
 8008894:	bf00      	nop
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80088a6:	2304      	movs	r3, #4
 80088a8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80088b0:	e03c      	b.n	800892c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6938      	ldr	r0, [r7, #16]
 80088ba:	f7ff faa9 	bl	8007e10 <move_window>
 80088be:	4603      	mov	r3, r0
 80088c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d136      	bne.n	8008936 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d102      	bne.n	80088dc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80088d6:	2304      	movs	r3, #4
 80088d8:	75fb      	strb	r3, [r7, #23]
 80088da:	e031      	b.n	8008940 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a1b      	ldr	r3, [r3, #32]
 80088e0:	330b      	adds	r3, #11
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088e8:	73bb      	strb	r3, [r7, #14]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	7bba      	ldrb	r2, [r7, #14]
 80088ee:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	2be5      	cmp	r3, #229	; 0xe5
 80088f4:	d011      	beq.n	800891a <dir_read+0x7e>
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	2b2e      	cmp	r3, #46	; 0x2e
 80088fa:	d00e      	beq.n	800891a <dir_read+0x7e>
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	2b0f      	cmp	r3, #15
 8008900:	d00b      	beq.n	800891a <dir_read+0x7e>
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	f023 0320 	bic.w	r3, r3, #32
 8008908:	2b08      	cmp	r3, #8
 800890a:	bf0c      	ite	eq
 800890c:	2301      	moveq	r3, #1
 800890e:	2300      	movne	r3, #0
 8008910:	b2db      	uxtb	r3, r3
 8008912:	461a      	mov	r2, r3
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	4293      	cmp	r3, r2
 8008918:	d00f      	beq.n	800893a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800891a:	2100      	movs	r1, #0
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff fe72 	bl	8008606 <dir_next>
 8008922:	4603      	mov	r3, r0
 8008924:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d108      	bne.n	800893e <dir_read+0xa2>
	while (dp->sect) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1be      	bne.n	80088b2 <dir_read+0x16>
 8008934:	e004      	b.n	8008940 <dir_read+0xa4>
		if (res != FR_OK) break;
 8008936:	bf00      	nop
 8008938:	e002      	b.n	8008940 <dir_read+0xa4>
				break;
 800893a:	bf00      	nop
 800893c:	e000      	b.n	8008940 <dir_read+0xa4>
		if (res != FR_OK) break;
 800893e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <dir_read+0xb0>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	61da      	str	r2, [r3, #28]
	return res;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b086      	sub	sp, #24
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008964:	2100      	movs	r1, #0
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff fdd2 	bl	8008510 <dir_sdi>
 800896c:	4603      	mov	r3, r0
 800896e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <dir_find+0x24>
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	e03e      	b.n	80089f8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	4619      	mov	r1, r3
 8008980:	6938      	ldr	r0, [r7, #16]
 8008982:	f7ff fa45 	bl	8007e10 <move_window>
 8008986:	4603      	mov	r3, r0
 8008988:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d12f      	bne.n	80089f0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <dir_find+0x4e>
 800899e:	2304      	movs	r3, #4
 80089a0:	75fb      	strb	r3, [r7, #23]
 80089a2:	e028      	b.n	80089f6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	330b      	adds	r3, #11
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	330b      	adds	r3, #11
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	f003 0308 	and.w	r3, r3, #8
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10a      	bne.n	80089dc <dir_find+0x86>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a18      	ldr	r0, [r3, #32]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3324      	adds	r3, #36	; 0x24
 80089ce:	220b      	movs	r2, #11
 80089d0:	4619      	mov	r1, r3
 80089d2:	f7ff f82b 	bl	8007a2c <mem_cmp>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80089dc:	2100      	movs	r1, #0
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7ff fe11 	bl	8008606 <dir_next>
 80089e4:	4603      	mov	r3, r0
 80089e6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0c5      	beq.n	800897a <dir_find+0x24>
 80089ee:	e002      	b.n	80089f6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80089f0:	bf00      	nop
 80089f2:	e000      	b.n	80089f6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80089f4:	bf00      	nop

	return res;
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008a0e:	2101      	movs	r1, #1
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff febd 	bl	8008790 <dir_alloc>
 8008a16:	4603      	mov	r3, r0
 8008a18:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d11c      	bne.n	8008a5a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	4619      	mov	r1, r3
 8008a26:	68b8      	ldr	r0, [r7, #8]
 8008a28:	f7ff f9f2 	bl	8007e10 <move_window>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d111      	bne.n	8008a5a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fe ffd9 	bl	80079f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a18      	ldr	r0, [r3, #32]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3324      	adds	r3, #36	; 0x24
 8008a4c:	220b      	movs	r2, #11
 8008a4e:	4619      	mov	r1, r3
 8008a50:	f7fe ffb0 	bl	80079b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2201      	movs	r2, #1
 8008a58:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	4619      	mov	r1, r3
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f7ff f9c9 	bl	8007e10 <move_window>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8008a82:	7afb      	ldrb	r3, [r7, #11]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d106      	bne.n	8008a96 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	22e5      	movs	r2, #229	; 0xe5
 8008a8e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2201      	movs	r2, #1
 8008a94:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8008a96:	7afb      	ldrb	r3, [r7, #11]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3324      	adds	r3, #36	; 0x24
 8008ab4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008ab6:	220b      	movs	r2, #11
 8008ab8:	2120      	movs	r1, #32
 8008aba:	68b8      	ldr	r0, [r7, #8]
 8008abc:	f7fe ff9b 	bl	80079f6 <mem_set>
	si = i = 0; ni = 8;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	613b      	str	r3, [r7, #16]
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	61fb      	str	r3, [r7, #28]
 8008ac8:	2308      	movs	r3, #8
 8008aca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	61fa      	str	r2, [r7, #28]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008ada:	7efb      	ldrb	r3, [r7, #27]
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d94e      	bls.n	8008b7e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008ae0:	7efb      	ldrb	r3, [r7, #27]
 8008ae2:	2b2f      	cmp	r3, #47	; 0x2f
 8008ae4:	d006      	beq.n	8008af4 <create_name+0x54>
 8008ae6:	7efb      	ldrb	r3, [r7, #27]
 8008ae8:	2b5c      	cmp	r3, #92	; 0x5c
 8008aea:	d110      	bne.n	8008b0e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008aec:	e002      	b.n	8008af4 <create_name+0x54>
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	3301      	adds	r3, #1
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	4413      	add	r3, r2
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b2f      	cmp	r3, #47	; 0x2f
 8008afe:	d0f6      	beq.n	8008aee <create_name+0x4e>
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	4413      	add	r3, r2
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b5c      	cmp	r3, #92	; 0x5c
 8008b0a:	d0f0      	beq.n	8008aee <create_name+0x4e>
			break;
 8008b0c:	e038      	b.n	8008b80 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008b0e:	7efb      	ldrb	r3, [r7, #27]
 8008b10:	2b2e      	cmp	r3, #46	; 0x2e
 8008b12:	d003      	beq.n	8008b1c <create_name+0x7c>
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d30c      	bcc.n	8008b36 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2b0b      	cmp	r3, #11
 8008b20:	d002      	beq.n	8008b28 <create_name+0x88>
 8008b22:	7efb      	ldrb	r3, [r7, #27]
 8008b24:	2b2e      	cmp	r3, #46	; 0x2e
 8008b26:	d001      	beq.n	8008b2c <create_name+0x8c>
 8008b28:	2306      	movs	r3, #6
 8008b2a:	e044      	b.n	8008bb6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	613b      	str	r3, [r7, #16]
 8008b30:	230b      	movs	r3, #11
 8008b32:	617b      	str	r3, [r7, #20]
			continue;
 8008b34:	e022      	b.n	8008b7c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008b36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	da04      	bge.n	8008b48 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008b3e:	7efb      	ldrb	r3, [r7, #27]
 8008b40:	3b80      	subs	r3, #128	; 0x80
 8008b42:	4a1f      	ldr	r2, [pc, #124]	; (8008bc0 <create_name+0x120>)
 8008b44:	5cd3      	ldrb	r3, [r2, r3]
 8008b46:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008b48:	7efb      	ldrb	r3, [r7, #27]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	481d      	ldr	r0, [pc, #116]	; (8008bc4 <create_name+0x124>)
 8008b4e:	f7fe ff94 	bl	8007a7a <chk_chr>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <create_name+0xbc>
 8008b58:	2306      	movs	r3, #6
 8008b5a:	e02c      	b.n	8008bb6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008b5c:	7efb      	ldrb	r3, [r7, #27]
 8008b5e:	2b60      	cmp	r3, #96	; 0x60
 8008b60:	d905      	bls.n	8008b6e <create_name+0xce>
 8008b62:	7efb      	ldrb	r3, [r7, #27]
 8008b64:	2b7a      	cmp	r3, #122	; 0x7a
 8008b66:	d802      	bhi.n	8008b6e <create_name+0xce>
 8008b68:	7efb      	ldrb	r3, [r7, #27]
 8008b6a:	3b20      	subs	r3, #32
 8008b6c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1c5a      	adds	r2, r3, #1
 8008b72:	613a      	str	r2, [r7, #16]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	4413      	add	r3, r2
 8008b78:	7efa      	ldrb	r2, [r7, #27]
 8008b7a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008b7c:	e7a6      	b.n	8008acc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008b7e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	441a      	add	r2, r3
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <create_name+0xf4>
 8008b90:	2306      	movs	r3, #6
 8008b92:	e010      	b.n	8008bb6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2be5      	cmp	r3, #229	; 0xe5
 8008b9a:	d102      	bne.n	8008ba2 <create_name+0x102>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2205      	movs	r2, #5
 8008ba0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008ba2:	7efb      	ldrb	r3, [r7, #27]
 8008ba4:	2b20      	cmp	r3, #32
 8008ba6:	d801      	bhi.n	8008bac <create_name+0x10c>
 8008ba8:	2204      	movs	r2, #4
 8008baa:	e000      	b.n	8008bae <create_name+0x10e>
 8008bac:	2200      	movs	r2, #0
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	330b      	adds	r3, #11
 8008bb2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008bb4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	0800dff4 	.word	0x0800dff4
 8008bc4:	0800d494 	.word	0x0800d494

08008bc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008bdc:	e002      	b.n	8008be4 <follow_path+0x1c>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	3301      	adds	r3, #1
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b2f      	cmp	r3, #47	; 0x2f
 8008bea:	d0f8      	beq.n	8008bde <follow_path+0x16>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b5c      	cmp	r3, #92	; 0x5c
 8008bf2:	d0f4      	beq.n	8008bde <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b1f      	cmp	r3, #31
 8008c00:	d80a      	bhi.n	8008c18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2280      	movs	r2, #128	; 0x80
 8008c06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff fc7f 	bl	8008510 <dir_sdi>
 8008c12:	4603      	mov	r3, r0
 8008c14:	75fb      	strb	r3, [r7, #23]
 8008c16:	e043      	b.n	8008ca0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c18:	463b      	mov	r3, r7
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7ff ff3f 	bl	8008aa0 <create_name>
 8008c22:	4603      	mov	r3, r0
 8008c24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d134      	bne.n	8008c96 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff fe92 	bl	8008956 <dir_find>
 8008c32:	4603      	mov	r3, r0
 8008c34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008c3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00a      	beq.n	8008c5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d127      	bne.n	8008c9a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008c4a:	7afb      	ldrb	r3, [r7, #11]
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d122      	bne.n	8008c9a <follow_path+0xd2>
 8008c54:	2305      	movs	r3, #5
 8008c56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008c58:	e01f      	b.n	8008c9a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c5a:	7afb      	ldrb	r3, [r7, #11]
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d11c      	bne.n	8008c9e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	799b      	ldrb	r3, [r3, #6]
 8008c68:	f003 0310 	and.w	r3, r3, #16
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d102      	bne.n	8008c76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008c70:	2305      	movs	r3, #5
 8008c72:	75fb      	strb	r3, [r7, #23]
 8008c74:	e014      	b.n	8008ca0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	695b      	ldr	r3, [r3, #20]
 8008c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c84:	4413      	add	r3, r2
 8008c86:	4619      	mov	r1, r3
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f7ff fdc8 	bl	800881e <ld_clust>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c94:	e7c0      	b.n	8008c18 <follow_path+0x50>
			if (res != FR_OK) break;
 8008c96:	bf00      	nop
 8008c98:	e002      	b.n	8008ca0 <follow_path+0xd8>
				break;
 8008c9a:	bf00      	nop
 8008c9c:	e000      	b.n	8008ca0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c9e:	bf00      	nop
			}
		}
	}

	return res;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b087      	sub	sp, #28
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d031      	beq.n	8008d24 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	617b      	str	r3, [r7, #20]
 8008cc6:	e002      	b.n	8008cce <get_ldnumber+0x24>
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	617b      	str	r3, [r7, #20]
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	2b20      	cmp	r3, #32
 8008cd4:	d903      	bls.n	8008cde <get_ldnumber+0x34>
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2b3a      	cmp	r3, #58	; 0x3a
 8008cdc:	d1f4      	bne.n	8008cc8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	2b3a      	cmp	r3, #58	; 0x3a
 8008ce4:	d11c      	bne.n	8008d20 <get_ldnumber+0x76>
			tp = *path;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	60fa      	str	r2, [r7, #12]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	3b30      	subs	r3, #48	; 0x30
 8008cf6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	2b09      	cmp	r3, #9
 8008cfc:	d80e      	bhi.n	8008d1c <get_ldnumber+0x72>
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d10a      	bne.n	8008d1c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d107      	bne.n	8008d1c <get_ldnumber+0x72>
					vol = (int)i;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	3301      	adds	r3, #1
 8008d14:	617b      	str	r3, [r7, #20]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	e002      	b.n	8008d26 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008d20:	2300      	movs	r3, #0
 8008d22:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008d24:	693b      	ldr	r3, [r7, #16]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	70da      	strb	r2, [r3, #3]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff f85e 	bl	8007e10 <move_window>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <check_fs+0x2a>
 8008d5a:	2304      	movs	r3, #4
 8008d5c:	e038      	b.n	8008dd0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	3330      	adds	r3, #48	; 0x30
 8008d62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe fda2 	bl	80078b0 <ld_word>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	461a      	mov	r2, r3
 8008d70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d001      	beq.n	8008d7c <check_fs+0x48>
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e029      	b.n	8008dd0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d82:	2be9      	cmp	r3, #233	; 0xe9
 8008d84:	d009      	beq.n	8008d9a <check_fs+0x66>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d8c:	2beb      	cmp	r3, #235	; 0xeb
 8008d8e:	d11e      	bne.n	8008dce <check_fs+0x9a>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008d96:	2b90      	cmp	r3, #144	; 0x90
 8008d98:	d119      	bne.n	8008dce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3330      	adds	r3, #48	; 0x30
 8008d9e:	3336      	adds	r3, #54	; 0x36
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe fd9d 	bl	80078e0 <ld_dword>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008dac:	4a0a      	ldr	r2, [pc, #40]	; (8008dd8 <check_fs+0xa4>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d101      	bne.n	8008db6 <check_fs+0x82>
 8008db2:	2300      	movs	r3, #0
 8008db4:	e00c      	b.n	8008dd0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3330      	adds	r3, #48	; 0x30
 8008dba:	3352      	adds	r3, #82	; 0x52
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fe fd8f 	bl	80078e0 <ld_dword>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	4a05      	ldr	r2, [pc, #20]	; (8008ddc <check_fs+0xa8>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d101      	bne.n	8008dce <check_fs+0x9a>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e000      	b.n	8008dd0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008dce:	2302      	movs	r3, #2
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	00544146 	.word	0x00544146
 8008ddc:	33544146 	.word	0x33544146

08008de0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b096      	sub	sp, #88	; 0x58
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f7ff ff58 	bl	8008caa <get_ldnumber>
 8008dfa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	da01      	bge.n	8008e06 <find_volume+0x26>
 8008e02:	230b      	movs	r3, #11
 8008e04:	e22d      	b.n	8009262 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008e06:	4aa1      	ldr	r2, [pc, #644]	; (800908c <find_volume+0x2ac>)
 8008e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <find_volume+0x3a>
 8008e16:	230c      	movs	r3, #12
 8008e18:	e223      	b.n	8009262 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e1e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	f023 0301 	bic.w	r3, r3, #1
 8008e26:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01a      	beq.n	8008e66 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	785b      	ldrb	r3, [r3, #1]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe fc9d 	bl	8007774 <disk_status>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008e40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10c      	bne.n	8008e66 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d007      	beq.n	8008e62 <find_volume+0x82>
 8008e52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008e5e:	230a      	movs	r3, #10
 8008e60:	e1ff      	b.n	8009262 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008e62:	2300      	movs	r3, #0
 8008e64:	e1fd      	b.n	8009262 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	2200      	movs	r2, #0
 8008e6a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6e:	b2da      	uxtb	r2, r3
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	785b      	ldrb	r3, [r3, #1]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe fc95 	bl	80077a8 <disk_initialize>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008e84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008e90:	2303      	movs	r3, #3
 8008e92:	e1e6      	b.n	8009262 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d007      	beq.n	8008eaa <find_volume+0xca>
 8008e9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008ea6:	230a      	movs	r3, #10
 8008ea8:	e1db      	b.n	8009262 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008eae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008eb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008eb2:	f7ff ff3f 	bl	8008d34 <check_fs>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008ebc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d149      	bne.n	8008f58 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ec8:	e01e      	b.n	8008f08 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed2:	011b      	lsls	r3, r3, #4
 8008ed4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008ed8:	4413      	add	r3, r2
 8008eda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	3304      	adds	r3, #4
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d006      	beq.n	8008ef4 <find_volume+0x114>
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	3308      	adds	r3, #8
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fcf8 	bl	80078e0 <ld_dword>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	e000      	b.n	8008ef6 <find_volume+0x116>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	3358      	adds	r3, #88	; 0x58
 8008efc:	443b      	add	r3, r7
 8008efe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f04:	3301      	adds	r3, #1
 8008f06:	643b      	str	r3, [r7, #64]	; 0x40
 8008f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d9dd      	bls.n	8008eca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008f0e:	2300      	movs	r3, #0
 8008f10:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <find_volume+0x13e>
 8008f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	3358      	adds	r3, #88	; 0x58
 8008f24:	443b      	add	r3, r7
 8008f26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f2a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d005      	beq.n	8008f3e <find_volume+0x15e>
 8008f32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f36:	f7ff fefd 	bl	8008d34 <check_fs>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	e000      	b.n	8008f40 <find_volume+0x160>
 8008f3e:	2303      	movs	r3, #3
 8008f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008f44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d905      	bls.n	8008f58 <find_volume+0x178>
 8008f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f4e:	3301      	adds	r3, #1
 8008f50:	643b      	str	r3, [r7, #64]	; 0x40
 8008f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d9e2      	bls.n	8008f1e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008f58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	d101      	bne.n	8008f64 <find_volume+0x184>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e17e      	b.n	8009262 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008f64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d901      	bls.n	8008f70 <find_volume+0x190>
 8008f6c:	230d      	movs	r3, #13
 8008f6e:	e178      	b.n	8009262 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	3330      	adds	r3, #48	; 0x30
 8008f74:	330b      	adds	r3, #11
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe fc9a 	bl	80078b0 <ld_word>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f82:	d001      	beq.n	8008f88 <find_volume+0x1a8>
 8008f84:	230d      	movs	r3, #13
 8008f86:	e16c      	b.n	8009262 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	3330      	adds	r3, #48	; 0x30
 8008f8c:	3316      	adds	r3, #22
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe fc8e 	bl	80078b0 <ld_word>
 8008f94:	4603      	mov	r3, r0
 8008f96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <find_volume+0x1cc>
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa0:	3330      	adds	r3, #48	; 0x30
 8008fa2:	3324      	adds	r3, #36	; 0x24
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe fc9b 	bl	80078e0 <ld_dword>
 8008faa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fb0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	789b      	ldrb	r3, [r3, #2]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d005      	beq.n	8008fd0 <find_volume+0x1f0>
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	789b      	ldrb	r3, [r3, #2]
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d001      	beq.n	8008fd0 <find_volume+0x1f0>
 8008fcc:	230d      	movs	r3, #13
 8008fce:	e148      	b.n	8009262 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	789b      	ldrb	r3, [r3, #2]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fd8:	fb02 f303 	mul.w	r3, r2, r3
 8008fdc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	895b      	ldrh	r3, [r3, #10]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d008      	beq.n	8009004 <find_volume+0x224>
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	895b      	ldrh	r3, [r3, #10]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffa:	895b      	ldrh	r3, [r3, #10]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	4013      	ands	r3, r2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <find_volume+0x228>
 8009004:	230d      	movs	r3, #13
 8009006:	e12c      	b.n	8009262 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	3330      	adds	r3, #48	; 0x30
 800900c:	3311      	adds	r3, #17
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe fc4e 	bl	80078b0 <ld_word>
 8009014:	4603      	mov	r3, r0
 8009016:	461a      	mov	r2, r3
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901e:	891b      	ldrh	r3, [r3, #8]
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	b29b      	uxth	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <find_volume+0x24e>
 800902a:	230d      	movs	r3, #13
 800902c:	e119      	b.n	8009262 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	3330      	adds	r3, #48	; 0x30
 8009032:	3313      	adds	r3, #19
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fc3b 	bl	80078b0 <ld_word>
 800903a:	4603      	mov	r3, r0
 800903c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800903e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009040:	2b00      	cmp	r3, #0
 8009042:	d106      	bne.n	8009052 <find_volume+0x272>
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	3330      	adds	r3, #48	; 0x30
 8009048:	3320      	adds	r3, #32
 800904a:	4618      	mov	r0, r3
 800904c:	f7fe fc48 	bl	80078e0 <ld_dword>
 8009050:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	3330      	adds	r3, #48	; 0x30
 8009056:	330e      	adds	r3, #14
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fc29 	bl	80078b0 <ld_word>
 800905e:	4603      	mov	r3, r0
 8009060:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <find_volume+0x28c>
 8009068:	230d      	movs	r3, #13
 800906a:	e0fa      	b.n	8009262 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800906c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800906e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009070:	4413      	add	r3, r2
 8009072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009074:	8912      	ldrh	r2, [r2, #8]
 8009076:	0912      	lsrs	r2, r2, #4
 8009078:	b292      	uxth	r2, r2
 800907a:	4413      	add	r3, r2
 800907c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800907e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	429a      	cmp	r2, r3
 8009084:	d204      	bcs.n	8009090 <find_volume+0x2b0>
 8009086:	230d      	movs	r3, #13
 8009088:	e0eb      	b.n	8009262 <find_volume+0x482>
 800908a:	bf00      	nop
 800908c:	20000844 	.word	0x20000844
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009098:	8952      	ldrh	r2, [r2, #10]
 800909a:	fbb3 f3f2 	udiv	r3, r3, r2
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <find_volume+0x2ca>
 80090a6:	230d      	movs	r3, #13
 80090a8:	e0db      	b.n	8009262 <find_volume+0x482>
		fmt = FS_FAT32;
 80090aa:	2303      	movs	r3, #3
 80090ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d802      	bhi.n	80090c0 <find_volume+0x2e0>
 80090ba:	2302      	movs	r3, #2
 80090bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d802      	bhi.n	80090d0 <find_volume+0x2f0>
 80090ca:	2301      	movs	r3, #1
 80090cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	1c9a      	adds	r2, r3, #2
 80090d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090dc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80090de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090e2:	441a      	add	r2, r3
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80090e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	441a      	add	r2, r3
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80090f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d11e      	bne.n	8009138 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	3330      	adds	r3, #48	; 0x30
 80090fe:	332a      	adds	r3, #42	; 0x2a
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe fbd5 	bl	80078b0 <ld_word>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <find_volume+0x330>
 800910c:	230d      	movs	r3, #13
 800910e:	e0a8      	b.n	8009262 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009112:	891b      	ldrh	r3, [r3, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <find_volume+0x33c>
 8009118:	230d      	movs	r3, #13
 800911a:	e0a2      	b.n	8009262 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	3330      	adds	r3, #48	; 0x30
 8009120:	332c      	adds	r3, #44	; 0x2c
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fbdc 	bl	80078e0 <ld_dword>
 8009128:	4602      	mov	r2, r0
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	647b      	str	r3, [r7, #68]	; 0x44
 8009136:	e01f      	b.n	8009178 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	891b      	ldrh	r3, [r3, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <find_volume+0x364>
 8009140:	230d      	movs	r3, #13
 8009142:	e08e      	b.n	8009262 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009146:	6a1a      	ldr	r2, [r3, #32]
 8009148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914a:	441a      	add	r2, r3
 800914c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009150:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009154:	2b02      	cmp	r3, #2
 8009156:	d103      	bne.n	8009160 <find_volume+0x380>
 8009158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	e00a      	b.n	8009176 <find_volume+0x396>
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	695a      	ldr	r2, [r3, #20]
 8009164:	4613      	mov	r3, r2
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	4413      	add	r3, r2
 800916a:	085a      	lsrs	r2, r3, #1
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009176:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	699a      	ldr	r2, [r3, #24]
 800917c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800917e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009182:	0a5b      	lsrs	r3, r3, #9
 8009184:	429a      	cmp	r2, r3
 8009186:	d201      	bcs.n	800918c <find_volume+0x3ac>
 8009188:	230d      	movs	r3, #13
 800918a:	e06a      	b.n	8009262 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	f04f 32ff 	mov.w	r2, #4294967295
 8009192:	611a      	str	r2, [r3, #16]
 8009194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009196:	691a      	ldr	r2, [r3, #16]
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	2280      	movs	r2, #128	; 0x80
 80091a0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80091a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d149      	bne.n	800923e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	3330      	adds	r3, #48	; 0x30
 80091ae:	3330      	adds	r3, #48	; 0x30
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fe fb7d 	bl	80078b0 <ld_word>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d140      	bne.n	800923e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80091bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091be:	3301      	adds	r3, #1
 80091c0:	4619      	mov	r1, r3
 80091c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091c4:	f7fe fe24 	bl	8007e10 <move_window>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d137      	bne.n	800923e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80091ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d0:	2200      	movs	r2, #0
 80091d2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	3330      	adds	r3, #48	; 0x30
 80091d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe fb67 	bl	80078b0 <ld_word>
 80091e2:	4603      	mov	r3, r0
 80091e4:	461a      	mov	r2, r3
 80091e6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d127      	bne.n	800923e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80091ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f0:	3330      	adds	r3, #48	; 0x30
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fe fb74 	bl	80078e0 <ld_dword>
 80091f8:	4603      	mov	r3, r0
 80091fa:	4a1c      	ldr	r2, [pc, #112]	; (800926c <find_volume+0x48c>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d11e      	bne.n	800923e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009202:	3330      	adds	r3, #48	; 0x30
 8009204:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe fb69 	bl	80078e0 <ld_dword>
 800920e:	4603      	mov	r3, r0
 8009210:	4a17      	ldr	r2, [pc, #92]	; (8009270 <find_volume+0x490>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d113      	bne.n	800923e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009218:	3330      	adds	r3, #48	; 0x30
 800921a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800921e:	4618      	mov	r0, r3
 8009220:	f7fe fb5e 	bl	80078e0 <ld_dword>
 8009224:	4602      	mov	r2, r0
 8009226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009228:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922c:	3330      	adds	r3, #48	; 0x30
 800922e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fb54 	bl	80078e0 <ld_dword>
 8009238:	4602      	mov	r2, r0
 800923a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009244:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009246:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <find_volume+0x494>)
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	3301      	adds	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <find_volume+0x494>)
 8009250:	801a      	strh	r2, [r3, #0]
 8009252:	4b08      	ldr	r3, [pc, #32]	; (8009274 <find_volume+0x494>)
 8009254:	881a      	ldrh	r2, [r3, #0]
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800925a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800925c:	f7fe fd70 	bl	8007d40 <clear_lock>
#endif
	return FR_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3758      	adds	r7, #88	; 0x58
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	41615252 	.word	0x41615252
 8009270:	61417272 	.word	0x61417272
 8009274:	20000848 	.word	0x20000848

08009278 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009282:	2309      	movs	r3, #9
 8009284:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d01c      	beq.n	80092c6 <validate+0x4e>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d018      	beq.n	80092c6 <validate+0x4e>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d013      	beq.n	80092c6 <validate+0x4e>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	889a      	ldrh	r2, [r3, #4]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	88db      	ldrh	r3, [r3, #6]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d10c      	bne.n	80092c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	785b      	ldrb	r3, [r3, #1]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe fa5e 	bl	8007774 <disk_status>
 80092b8:	4603      	mov	r3, r0
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <validate+0x4e>
			res = FR_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d102      	bne.n	80092d2 <validate+0x5a>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	e000      	b.n	80092d4 <validate+0x5c>
 80092d2:	2300      	movs	r3, #0
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	6013      	str	r3, [r2, #0]
	return res;
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	4613      	mov	r3, r2
 80092f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80092f6:	f107 0310 	add.w	r3, r7, #16
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff fcd5 	bl	8008caa <get_ldnumber>
 8009300:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	2b00      	cmp	r3, #0
 8009306:	da01      	bge.n	800930c <f_mount+0x28>
 8009308:	230b      	movs	r3, #11
 800930a:	e02b      	b.n	8009364 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800930c:	4a17      	ldr	r2, [pc, #92]	; (800936c <f_mount+0x88>)
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009314:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800931c:	69b8      	ldr	r0, [r7, #24]
 800931e:	f7fe fd0f 	bl	8007d40 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	2200      	movs	r2, #0
 8009326:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	490d      	ldr	r1, [pc, #52]	; (800936c <f_mount+0x88>)
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <f_mount+0x66>
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d001      	beq.n	800934e <f_mount+0x6a>
 800934a:	2300      	movs	r3, #0
 800934c:	e00a      	b.n	8009364 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800934e:	f107 010c 	add.w	r1, r7, #12
 8009352:	f107 0308 	add.w	r3, r7, #8
 8009356:	2200      	movs	r2, #0
 8009358:	4618      	mov	r0, r3
 800935a:	f7ff fd41 	bl	8008de0 <find_volume>
 800935e:	4603      	mov	r3, r0
 8009360:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009362:	7dfb      	ldrb	r3, [r7, #23]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3720      	adds	r7, #32
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20000844 	.word	0x20000844

08009370 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b098      	sub	sp, #96	; 0x60
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <f_open+0x18>
 8009384:	2309      	movs	r3, #9
 8009386:	e1ad      	b.n	80096e4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800938e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009390:	79fa      	ldrb	r2, [r7, #7]
 8009392:	f107 0110 	add.w	r1, r7, #16
 8009396:	f107 0308 	add.w	r3, r7, #8
 800939a:	4618      	mov	r0, r3
 800939c:	f7ff fd20 	bl	8008de0 <find_volume>
 80093a0:	4603      	mov	r3, r0
 80093a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80093a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f040 8191 	bne.w	80096d2 <f_open+0x362>
		dj.obj.fs = fs;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	f107 0314 	add.w	r3, r7, #20
 80093ba:	4611      	mov	r1, r2
 80093bc:	4618      	mov	r0, r3
 80093be:	f7ff fc03 	bl	8008bc8 <follow_path>
 80093c2:	4603      	mov	r3, r0
 80093c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80093c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d11a      	bne.n	8009406 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80093d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093d4:	b25b      	sxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	da03      	bge.n	80093e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80093da:	2306      	movs	r3, #6
 80093dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80093e0:	e011      	b.n	8009406 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80093e2:	79fb      	ldrb	r3, [r7, #7]
 80093e4:	f023 0301 	bic.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bf14      	ite	ne
 80093ec:	2301      	movne	r3, #1
 80093ee:	2300      	moveq	r3, #0
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	461a      	mov	r2, r3
 80093f4:	f107 0314 	add.w	r3, r7, #20
 80093f8:	4611      	mov	r1, r2
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fe fb58 	bl	8007ab0 <chk_lock>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009406:	79fb      	ldrb	r3, [r7, #7]
 8009408:	f003 031c 	and.w	r3, r3, #28
 800940c:	2b00      	cmp	r3, #0
 800940e:	d07f      	beq.n	8009510 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009410:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009414:	2b00      	cmp	r3, #0
 8009416:	d017      	beq.n	8009448 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800941c:	2b04      	cmp	r3, #4
 800941e:	d10e      	bne.n	800943e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009420:	f7fe fba2 	bl	8007b68 <enq_lock>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d006      	beq.n	8009438 <f_open+0xc8>
 800942a:	f107 0314 	add.w	r3, r7, #20
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff fae6 	bl	8008a00 <dir_register>
 8009434:	4603      	mov	r3, r0
 8009436:	e000      	b.n	800943a <f_open+0xca>
 8009438:	2312      	movs	r3, #18
 800943a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	f043 0308 	orr.w	r3, r3, #8
 8009444:	71fb      	strb	r3, [r7, #7]
 8009446:	e010      	b.n	800946a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009448:	7ebb      	ldrb	r3, [r7, #26]
 800944a:	f003 0311 	and.w	r3, r3, #17
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <f_open+0xea>
					res = FR_DENIED;
 8009452:	2307      	movs	r3, #7
 8009454:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009458:	e007      	b.n	800946a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <f_open+0xfa>
 8009464:	2308      	movs	r3, #8
 8009466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800946a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800946e:	2b00      	cmp	r3, #0
 8009470:	d168      	bne.n	8009544 <f_open+0x1d4>
 8009472:	79fb      	ldrb	r3, [r7, #7]
 8009474:	f003 0308 	and.w	r3, r3, #8
 8009478:	2b00      	cmp	r3, #0
 800947a:	d063      	beq.n	8009544 <f_open+0x1d4>
				dw = GET_FATTIME();
 800947c:	f7fe f91c 	bl	80076b8 <get_fattime>
 8009480:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009484:	330e      	adds	r3, #14
 8009486:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe fa67 	bl	800795c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800948e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009490:	3316      	adds	r3, #22
 8009492:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009494:	4618      	mov	r0, r3
 8009496:	f7fe fa61 	bl	800795c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	330b      	adds	r3, #11
 800949e:	2220      	movs	r2, #32
 80094a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094a6:	4611      	mov	r1, r2
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7ff f9b8 	bl	800881e <ld_clust>
 80094ae:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094b4:	2200      	movs	r2, #0
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff f9d0 	bl	800885c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80094bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094be:	331c      	adds	r3, #28
 80094c0:	2100      	movs	r1, #0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fe fa4a 	bl	800795c <st_dword>
					fs->wflag = 1;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	2201      	movs	r2, #1
 80094cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80094ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d037      	beq.n	8009544 <f_open+0x1d4>
						dw = fs->winsect;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80094da:	f107 0314 	add.w	r3, r7, #20
 80094de:	2200      	movs	r2, #0
 80094e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe fee3 	bl	80082ae <remove_chain>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80094ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d126      	bne.n	8009544 <f_open+0x1d4>
							res = move_window(fs, dw);
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fe fc88 	bl	8007e10 <move_window>
 8009500:	4603      	mov	r3, r0
 8009502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800950a:	3a01      	subs	r2, #1
 800950c:	60da      	str	r2, [r3, #12]
 800950e:	e019      	b.n	8009544 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009514:	2b00      	cmp	r3, #0
 8009516:	d115      	bne.n	8009544 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009518:	7ebb      	ldrb	r3, [r7, #26]
 800951a:	f003 0310 	and.w	r3, r3, #16
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009522:	2304      	movs	r3, #4
 8009524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009528:	e00c      	b.n	8009544 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800952a:	79fb      	ldrb	r3, [r7, #7]
 800952c:	f003 0302 	and.w	r3, r3, #2
 8009530:	2b00      	cmp	r3, #0
 8009532:	d007      	beq.n	8009544 <f_open+0x1d4>
 8009534:	7ebb      	ldrb	r3, [r7, #26]
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <f_open+0x1d4>
						res = FR_DENIED;
 800953e:	2307      	movs	r3, #7
 8009540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009548:	2b00      	cmp	r3, #0
 800954a:	d128      	bne.n	800959e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	f003 0308 	and.w	r3, r3, #8
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800955c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800956c:	79fb      	ldrb	r3, [r7, #7]
 800956e:	f023 0301 	bic.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	bf14      	ite	ne
 8009576:	2301      	movne	r3, #1
 8009578:	2300      	moveq	r3, #0
 800957a:	b2db      	uxtb	r3, r3
 800957c:	461a      	mov	r2, r3
 800957e:	f107 0314 	add.w	r3, r7, #20
 8009582:	4611      	mov	r1, r2
 8009584:	4618      	mov	r0, r3
 8009586:	f7fe fb11 	bl	8007bac <inc_lock>
 800958a:	4602      	mov	r2, r0
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d102      	bne.n	800959e <f_open+0x22e>
 8009598:	2302      	movs	r3, #2
 800959a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800959e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 8095 	bne.w	80096d2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095ac:	4611      	mov	r1, r2
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7ff f935 	bl	800881e <ld_clust>
 80095b4:	4602      	mov	r2, r0
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80095ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095bc:	331c      	adds	r3, #28
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe f98e 	bl	80078e0 <ld_dword>
 80095c4:	4602      	mov	r2, r0
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	88da      	ldrh	r2, [r3, #6]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	79fa      	ldrb	r2, [r7, #7]
 80095e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	3330      	adds	r3, #48	; 0x30
 80095fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095fe:	2100      	movs	r1, #0
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe f9f8 	bl	80079f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	f003 0320 	and.w	r3, r3, #32
 800960c:	2b00      	cmp	r3, #0
 800960e:	d060      	beq.n	80096d2 <f_open+0x362>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d05c      	beq.n	80096d2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	895b      	ldrh	r3, [r3, #10]
 8009624:	025b      	lsls	r3, r3, #9
 8009626:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	657b      	str	r3, [r7, #84]	; 0x54
 8009634:	e016      	b.n	8009664 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe fca3 	bl	8007f86 <get_fat>
 8009640:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009644:	2b01      	cmp	r3, #1
 8009646:	d802      	bhi.n	800964e <f_open+0x2de>
 8009648:	2302      	movs	r3, #2
 800964a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800964e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009654:	d102      	bne.n	800965c <f_open+0x2ec>
 8009656:	2301      	movs	r3, #1
 8009658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800965c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800965e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	657b      	str	r3, [r7, #84]	; 0x54
 8009664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009668:	2b00      	cmp	r3, #0
 800966a:	d103      	bne.n	8009674 <f_open+0x304>
 800966c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800966e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009670:	429a      	cmp	r2, r3
 8009672:	d8e0      	bhi.n	8009636 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009678:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800967a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800967e:	2b00      	cmp	r3, #0
 8009680:	d127      	bne.n	80096d2 <f_open+0x362>
 8009682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009688:	2b00      	cmp	r3, #0
 800968a:	d022      	beq.n	80096d2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009690:	4618      	mov	r0, r3
 8009692:	f7fe fc59 	bl	8007f48 <clust2sect>
 8009696:	6478      	str	r0, [r7, #68]	; 0x44
 8009698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800969a:	2b00      	cmp	r3, #0
 800969c:	d103      	bne.n	80096a6 <f_open+0x336>
						res = FR_INT_ERR;
 800969e:	2302      	movs	r3, #2
 80096a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80096a4:	e015      	b.n	80096d2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80096a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096a8:	0a5a      	lsrs	r2, r3, #9
 80096aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ac:	441a      	add	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	7858      	ldrb	r0, [r3, #1]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a1a      	ldr	r2, [r3, #32]
 80096c0:	2301      	movs	r3, #1
 80096c2:	f7fe f897 	bl	80077f4 <disk_read>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <f_open+0x362>
 80096cc:	2301      	movs	r3, #1
 80096ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80096d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <f_open+0x370>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80096e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3760      	adds	r7, #96	; 0x60
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08e      	sub	sp, #56	; 0x38
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f107 0214 	add.w	r2, r7, #20
 800970a:	4611      	mov	r1, r2
 800970c:	4618      	mov	r0, r3
 800970e:	f7ff fdb3 	bl	8009278 <validate>
 8009712:	4603      	mov	r3, r0
 8009714:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009718:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800971c:	2b00      	cmp	r3, #0
 800971e:	d107      	bne.n	8009730 <f_read+0x44>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	7d5b      	ldrb	r3, [r3, #21]
 8009724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <f_read+0x4a>
 8009730:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009734:	e115      	b.n	8009962 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	7d1b      	ldrb	r3, [r3, #20]
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <f_read+0x5a>
 8009742:	2307      	movs	r3, #7
 8009744:	e10d      	b.n	8009962 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	429a      	cmp	r2, r3
 8009758:	f240 80fe 	bls.w	8009958 <f_read+0x26c>
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009760:	e0fa      	b.n	8009958 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800976a:	2b00      	cmp	r3, #0
 800976c:	f040 80c6 	bne.w	80098fc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	0a5b      	lsrs	r3, r3, #9
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	8952      	ldrh	r2, [r2, #10]
 800977a:	3a01      	subs	r2, #1
 800977c:	4013      	ands	r3, r2
 800977e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d12f      	bne.n	80097e6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d103      	bne.n	8009796 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	633b      	str	r3, [r7, #48]	; 0x30
 8009794:	e013      	b.n	80097be <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979a:	2b00      	cmp	r3, #0
 800979c:	d007      	beq.n	80097ae <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	4619      	mov	r1, r3
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f7fe fe7f 	bl	80084a8 <clmt_clust>
 80097aa:	6338      	str	r0, [r7, #48]	; 0x30
 80097ac:	e007      	b.n	80097be <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	4619      	mov	r1, r3
 80097b6:	4610      	mov	r0, r2
 80097b8:	f7fe fbe5 	bl	8007f86 <get_fat>
 80097bc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d804      	bhi.n	80097ce <f_read+0xe2>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2202      	movs	r2, #2
 80097c8:	755a      	strb	r2, [r3, #21]
 80097ca:	2302      	movs	r3, #2
 80097cc:	e0c9      	b.n	8009962 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d104      	bne.n	80097e0 <f_read+0xf4>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2201      	movs	r2, #1
 80097da:	755a      	strb	r2, [r3, #21]
 80097dc:	2301      	movs	r3, #1
 80097de:	e0c0      	b.n	8009962 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097e4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	4619      	mov	r1, r3
 80097ee:	4610      	mov	r0, r2
 80097f0:	f7fe fbaa 	bl	8007f48 <clust2sect>
 80097f4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <f_read+0x11a>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2202      	movs	r2, #2
 8009800:	755a      	strb	r2, [r3, #21]
 8009802:	2302      	movs	r3, #2
 8009804:	e0ad      	b.n	8009962 <f_read+0x276>
			sect += csect;
 8009806:	69ba      	ldr	r2, [r7, #24]
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	4413      	add	r3, r2
 800980c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	0a5b      	lsrs	r3, r3, #9
 8009812:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	2b00      	cmp	r3, #0
 8009818:	d039      	beq.n	800988e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800981a:	69fa      	ldr	r2, [r7, #28]
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	4413      	add	r3, r2
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	8952      	ldrh	r2, [r2, #10]
 8009824:	4293      	cmp	r3, r2
 8009826:	d905      	bls.n	8009834 <f_read+0x148>
					cc = fs->csize - csect;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	895b      	ldrh	r3, [r3, #10]
 800982c:	461a      	mov	r2, r3
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	7858      	ldrb	r0, [r3, #1]
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800983e:	f7fd ffd9 	bl	80077f4 <disk_read>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d004      	beq.n	8009852 <f_read+0x166>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	755a      	strb	r2, [r3, #21]
 800984e:	2301      	movs	r3, #1
 8009850:	e087      	b.n	8009962 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	7d1b      	ldrb	r3, [r3, #20]
 8009856:	b25b      	sxtb	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	da14      	bge.n	8009886 <f_read+0x19a>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a1a      	ldr	r2, [r3, #32]
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009866:	429a      	cmp	r2, r3
 8009868:	d90d      	bls.n	8009886 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6a1a      	ldr	r2, [r3, #32]
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	025b      	lsls	r3, r3, #9
 8009874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009876:	18d0      	adds	r0, r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3330      	adds	r3, #48	; 0x30
 800987c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009880:	4619      	mov	r1, r3
 8009882:	f7fe f897 	bl	80079b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	025b      	lsls	r3, r3, #9
 800988a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800988c:	e050      	b.n	8009930 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	429a      	cmp	r2, r3
 8009896:	d02e      	beq.n	80098f6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	7d1b      	ldrb	r3, [r3, #20]
 800989c:	b25b      	sxtb	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	da18      	bge.n	80098d4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	7858      	ldrb	r0, [r3, #1]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6a1a      	ldr	r2, [r3, #32]
 80098b0:	2301      	movs	r3, #1
 80098b2:	f7fd ffbf 	bl	8007834 <disk_write>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d004      	beq.n	80098c6 <f_read+0x1da>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2201      	movs	r2, #1
 80098c0:	755a      	strb	r2, [r3, #21]
 80098c2:	2301      	movs	r3, #1
 80098c4:	e04d      	b.n	8009962 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	7d1b      	ldrb	r3, [r3, #20]
 80098ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	7858      	ldrb	r0, [r3, #1]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098de:	2301      	movs	r3, #1
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	f7fd ff87 	bl	80077f4 <disk_read>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <f_read+0x20a>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2201      	movs	r2, #1
 80098f0:	755a      	strb	r2, [r3, #21]
 80098f2:	2301      	movs	r3, #1
 80098f4:	e035      	b.n	8009962 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009904:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009908:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800990a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	429a      	cmp	r2, r3
 8009910:	d901      	bls.n	8009916 <f_read+0x22a>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009924:	4413      	add	r3, r2
 8009926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009928:	4619      	mov	r1, r3
 800992a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800992c:	f7fe f842 	bl	80079b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009934:	4413      	add	r3, r2
 8009936:	627b      	str	r3, [r7, #36]	; 0x24
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	699a      	ldr	r2, [r3, #24]
 800993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993e:	441a      	add	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	619a      	str	r2, [r3, #24]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	441a      	add	r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	601a      	str	r2, [r3, #0]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	f47f af01 	bne.w	8009762 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3738      	adds	r7, #56	; 0x38
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b08c      	sub	sp, #48	; 0x30
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	607a      	str	r2, [r7, #4]
 8009976:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2200      	movs	r2, #0
 8009980:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f107 0210 	add.w	r2, r7, #16
 8009988:	4611      	mov	r1, r2
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff fc74 	bl	8009278 <validate>
 8009990:	4603      	mov	r3, r0
 8009992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800999a:	2b00      	cmp	r3, #0
 800999c:	d107      	bne.n	80099ae <f_write+0x44>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	7d5b      	ldrb	r3, [r3, #21]
 80099a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80099a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <f_write+0x4a>
 80099ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099b2:	e14b      	b.n	8009c4c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	7d1b      	ldrb	r3, [r3, #20]
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <f_write+0x5a>
 80099c0:	2307      	movs	r3, #7
 80099c2:	e143      	b.n	8009c4c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	699a      	ldr	r2, [r3, #24]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	441a      	add	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	f080 812d 	bcs.w	8009c30 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	43db      	mvns	r3, r3
 80099dc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80099de:	e127      	b.n	8009c30 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f040 80e3 	bne.w	8009bb4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	0a5b      	lsrs	r3, r3, #9
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	8952      	ldrh	r2, [r2, #10]
 80099f8:	3a01      	subs	r2, #1
 80099fa:	4013      	ands	r3, r2
 80099fc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d143      	bne.n	8009a8c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10c      	bne.n	8009a26 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d11a      	bne.n	8009a4e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe fcab 	bl	8008378 <create_chain>
 8009a22:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a24:	e013      	b.n	8009a4e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d007      	beq.n	8009a3e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	4619      	mov	r1, r3
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f7fe fd37 	bl	80084a8 <clmt_clust>
 8009a3a:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a3c:	e007      	b.n	8009a4e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	69db      	ldr	r3, [r3, #28]
 8009a44:	4619      	mov	r1, r3
 8009a46:	4610      	mov	r0, r2
 8009a48:	f7fe fc96 	bl	8008378 <create_chain>
 8009a4c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 80f2 	beq.w	8009c3a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d104      	bne.n	8009a66 <f_write+0xfc>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	755a      	strb	r2, [r3, #21]
 8009a62:	2302      	movs	r3, #2
 8009a64:	e0f2      	b.n	8009c4c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6c:	d104      	bne.n	8009a78 <f_write+0x10e>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2201      	movs	r2, #1
 8009a72:	755a      	strb	r2, [r3, #21]
 8009a74:	2301      	movs	r3, #1
 8009a76:	e0e9      	b.n	8009c4c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a7c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <f_write+0x122>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a8a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	7d1b      	ldrb	r3, [r3, #20]
 8009a90:	b25b      	sxtb	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	da18      	bge.n	8009ac8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	7858      	ldrb	r0, [r3, #1]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6a1a      	ldr	r2, [r3, #32]
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f7fd fec5 	bl	8007834 <disk_write>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d004      	beq.n	8009aba <f_write+0x150>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	755a      	strb	r2, [r3, #21]
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e0c8      	b.n	8009c4c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	7d1b      	ldrb	r3, [r3, #20]
 8009abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	f7fe fa39 	bl	8007f48 <clust2sect>
 8009ad6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d104      	bne.n	8009ae8 <f_write+0x17e>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	755a      	strb	r2, [r3, #21]
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e0b1      	b.n	8009c4c <f_write+0x2e2>
			sect += csect;
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	4413      	add	r3, r2
 8009aee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	0a5b      	lsrs	r3, r3, #9
 8009af4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d03c      	beq.n	8009b76 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009afc:	69ba      	ldr	r2, [r7, #24]
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	4413      	add	r3, r2
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	8952      	ldrh	r2, [r2, #10]
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d905      	bls.n	8009b16 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	895b      	ldrh	r3, [r3, #10]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	7858      	ldrb	r0, [r3, #1]
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	69f9      	ldr	r1, [r7, #28]
 8009b20:	f7fd fe88 	bl	8007834 <disk_write>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d004      	beq.n	8009b34 <f_write+0x1ca>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	755a      	strb	r2, [r3, #21]
 8009b30:	2301      	movs	r3, #1
 8009b32:	e08b      	b.n	8009c4c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a1a      	ldr	r2, [r3, #32]
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	6a3a      	ldr	r2, [r7, #32]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d915      	bls.n	8009b6e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6a1a      	ldr	r2, [r3, #32]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	025b      	lsls	r3, r3, #9
 8009b52:	69fa      	ldr	r2, [r7, #28]
 8009b54:	4413      	add	r3, r2
 8009b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	f7fd ff2a 	bl	80079b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	7d1b      	ldrb	r3, [r3, #20]
 8009b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	025b      	lsls	r3, r3, #9
 8009b72:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009b74:	e03f      	b.n	8009bf6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d016      	beq.n	8009bae <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	699a      	ldr	r2, [r3, #24]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d210      	bcs.n	8009bae <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	7858      	ldrb	r0, [r3, #1]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b96:	2301      	movs	r3, #1
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	f7fd fe2b 	bl	80077f4 <disk_read>
 8009b9e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d004      	beq.n	8009bae <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	755a      	strb	r2, [r3, #21]
 8009baa:	2301      	movs	r3, #1
 8009bac:	e04e      	b.n	8009c4c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bbc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d901      	bls.n	8009bce <f_write+0x264>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bdc:	4413      	add	r3, r2
 8009bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be0:	69f9      	ldr	r1, [r7, #28]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fd fee6 	bl	80079b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	7d1b      	ldrb	r3, [r3, #20]
 8009bec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009bf6:	69fa      	ldr	r2, [r7, #28]
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	4413      	add	r3, r2
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	699a      	ldr	r2, [r3, #24]
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	441a      	add	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	619a      	str	r2, [r3, #24]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	68da      	ldr	r2, [r3, #12]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	bf38      	it	cc
 8009c16:	461a      	movcc	r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	60da      	str	r2, [r3, #12]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	441a      	add	r2, r3
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f47f aed4 	bne.w	80099e0 <f_write+0x76>
 8009c38:	e000      	b.n	8009c3c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c3a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	7d1b      	ldrb	r3, [r3, #20]
 8009c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3730      	adds	r7, #48	; 0x30
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f107 0208 	add.w	r2, r7, #8
 8009c62:	4611      	mov	r1, r2
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7ff fb07 	bl	8009278 <validate>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d168      	bne.n	8009d46 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	7d1b      	ldrb	r3, [r3, #20]
 8009c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d062      	beq.n	8009d46 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	7d1b      	ldrb	r3, [r3, #20]
 8009c84:	b25b      	sxtb	r3, r3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	da15      	bge.n	8009cb6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	7858      	ldrb	r0, [r3, #1]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1a      	ldr	r2, [r3, #32]
 8009c98:	2301      	movs	r3, #1
 8009c9a:	f7fd fdcb 	bl	8007834 <disk_write>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <f_sync+0x54>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e04f      	b.n	8009d48 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	7d1b      	ldrb	r3, [r3, #20]
 8009cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009cb6:	f7fd fcff 	bl	80076b8 <get_fattime>
 8009cba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	f7fe f8a3 	bl	8007e10 <move_window>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d138      	bne.n	8009d46 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	330b      	adds	r3, #11
 8009cde:	781a      	ldrb	r2, [r3, #0]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	330b      	adds	r3, #11
 8009ce4:	f042 0220 	orr.w	r2, r2, #32
 8009ce8:	b2d2      	uxtb	r2, r2
 8009cea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	68f9      	ldr	r1, [r7, #12]
 8009cf8:	f7fe fdb0 	bl	800885c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f103 021c 	add.w	r2, r3, #28
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	4619      	mov	r1, r3
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f7fd fe27 	bl	800795c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3316      	adds	r3, #22
 8009d12:	6939      	ldr	r1, [r7, #16]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fd fe21 	bl	800795c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	3312      	adds	r3, #18
 8009d1e:	2100      	movs	r1, #0
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fd fe00 	bl	8007926 <st_word>
					fs->wflag = 1;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fe f89c 	bl	8007e6c <sync_fs>
 8009d34:	4603      	mov	r3, r0
 8009d36:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	7d1b      	ldrb	r3, [r3, #20]
 8009d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3718      	adds	r7, #24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff ff7b 	bl	8009c54 <f_sync>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d118      	bne.n	8009d9a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f107 0208 	add.w	r2, r7, #8
 8009d6e:	4611      	mov	r1, r2
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff fa81 	bl	8009278 <validate>
 8009d76:	4603      	mov	r3, r0
 8009d78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10c      	bne.n	8009d9a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fd ff9f 	bl	8007cc8 <dec_lock>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d102      	bne.n	8009d9a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b092      	sub	sp, #72	; 0x48
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009db0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009db4:	f107 030c 	add.w	r3, r7, #12
 8009db8:	2200      	movs	r2, #0
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7ff f810 	bl	8008de0 <find_volume>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009dc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f040 8099 	bne.w	8009f02 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	691a      	ldr	r2, [r3, #16]
 8009dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	3b02      	subs	r3, #2
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d804      	bhi.n	8009dee <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	601a      	str	r2, [r3, #0]
 8009dec:	e089      	b.n	8009f02 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d128      	bne.n	8009e4c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009e02:	f107 0314 	add.w	r3, r7, #20
 8009e06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe f8bc 	bl	8007f86 <get_fat>
 8009e0e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e16:	d103      	bne.n	8009e20 <f_getfree+0x7c>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009e1e:	e063      	b.n	8009ee8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d103      	bne.n	8009e2e <f_getfree+0x8a>
 8009e26:	2302      	movs	r3, #2
 8009e28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009e2c:	e05c      	b.n	8009ee8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <f_getfree+0x96>
 8009e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e36:	3301      	adds	r3, #1
 8009e38:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d3db      	bcc.n	8009e02 <f_getfree+0x5e>
 8009e4a:	e04d      	b.n	8009ee8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d113      	bne.n	8009e8e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	1c5a      	adds	r2, r3, #1
 8009e6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8009e6e:	4619      	mov	r1, r3
 8009e70:	f7fd ffce 	bl	8007e10 <move_window>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009e7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d131      	bne.n	8009ee6 <f_getfree+0x142>
							p = fs->win;
 8009e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e84:	3330      	adds	r3, #48	; 0x30
 8009e86:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e8c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d10f      	bne.n	8009eb6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e98:	f7fd fd0a 	bl	80078b0 <ld_word>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <f_getfree+0x104>
 8009ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eaa:	3302      	adds	r3, #2
 8009eac:	633b      	str	r3, [r7, #48]	; 0x30
 8009eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb0:	3b02      	subs	r3, #2
 8009eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8009eb4:	e010      	b.n	8009ed8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eb8:	f7fd fd12 	bl	80078e0 <ld_dword>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d102      	bne.n	8009ecc <f_getfree+0x128>
 8009ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec8:	3301      	adds	r3, #1
 8009eca:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	3304      	adds	r3, #4
 8009ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8009ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed4:	3b04      	subs	r3, #4
 8009ed6:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eda:	3b01      	subs	r3, #1
 8009edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1bd      	bne.n	8009e60 <f_getfree+0xbc>
 8009ee4:	e000      	b.n	8009ee8 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009ee6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009eec:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ef2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	791a      	ldrb	r2, [r3, #4]
 8009ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efa:	f042 0201 	orr.w	r2, r2, #1
 8009efe:	b2d2      	uxtb	r2, r2
 8009f00:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009f02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3748      	adds	r7, #72	; 0x48
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b09e      	sub	sp, #120	; 0x78
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009f1a:	f107 010c 	add.w	r1, r7, #12
 8009f1e:	1d3b      	adds	r3, r7, #4
 8009f20:	2202      	movs	r2, #2
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe ff5c 	bl	8008de0 <find_volume>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8009f32:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f040 808e 	bne.w	800a058 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009f42:	4611      	mov	r1, r2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fe fe3f 	bl	8008bc8 <follow_path>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8009f50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d108      	bne.n	8009f6a <f_unlink+0x5c>
 8009f58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009f5c:	2102      	movs	r1, #2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fd fda6 	bl	8007ab0 <chk_lock>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009f6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d172      	bne.n	800a058 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009f72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009f76:	b25b      	sxtb	r3, r3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	da03      	bge.n	8009f84 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009f7c:	2306      	movs	r3, #6
 8009f7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009f82:	e008      	b.n	8009f96 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8009f84:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009f88:	f003 0301 	and.w	r3, r3, #1
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009f90:	2307      	movs	r3, #7
 8009f92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8009f96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d134      	bne.n	800a008 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fe fc3a 	bl	800881e <ld_clust>
 8009faa:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009fac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009fb0:	f003 0310 	and.w	r3, r3, #16
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d027      	beq.n	800a008 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8009fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fbe:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009fc0:	f107 0310 	add.w	r3, r7, #16
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe faa2 	bl	8008510 <dir_sdi>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8009fd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d116      	bne.n	800a008 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009fda:	f107 0310 	add.w	r3, r7, #16
 8009fde:	2100      	movs	r1, #0
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe fc5b 	bl	800889c <dir_read>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009fec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d102      	bne.n	8009ffa <f_unlink+0xec>
 8009ff4:	2307      	movs	r3, #7
 8009ff6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009ffa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d102      	bne.n	800a008 <f_unlink+0xfa>
 800a002:	2300      	movs	r3, #0
 800a004:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800a008:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d123      	bne.n	800a058 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800a010:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe fd25 	bl	8008a64 <dir_remove>
 800a01a:	4603      	mov	r3, r0
 800a01c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800a020:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10c      	bne.n	800a042 <f_unlink+0x134>
 800a028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d009      	beq.n	800a042 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800a02e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a032:	2200      	movs	r2, #0
 800a034:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a036:	4618      	mov	r0, r3
 800a038:	f7fe f939 	bl	80082ae <remove_chain>
 800a03c:	4603      	mov	r3, r0
 800a03e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800a042:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a046:	2b00      	cmp	r3, #0
 800a048:	d106      	bne.n	800a058 <f_unlink+0x14a>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fd ff0d 	bl	8007e6c <sync_fs>
 800a052:	4603      	mov	r3, r0
 800a054:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a058:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3778      	adds	r7, #120	; 0x78
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b088      	sub	sp, #32
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a070:	2300      	movs	r3, #0
 800a072:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a078:	e01b      	b.n	800a0b2 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a07a:	f107 0310 	add.w	r3, r7, #16
 800a07e:	f107 0114 	add.w	r1, r7, #20
 800a082:	2201      	movs	r2, #1
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff fb31 	bl	80096ec <f_read>
		if (rc != 1) break;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d116      	bne.n	800a0be <f_gets+0x5a>
		c = s[0];
 800a090:	7d3b      	ldrb	r3, [r7, #20]
 800a092:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	2b0d      	cmp	r3, #13
 800a098:	d100      	bne.n	800a09c <f_gets+0x38>
 800a09a:	e00a      	b.n	800a0b2 <f_gets+0x4e>
		*p++ = c;
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	61ba      	str	r2, [r7, #24]
 800a0a2:	7dfa      	ldrb	r2, [r7, #23]
 800a0a4:	701a      	strb	r2, [r3, #0]
		n++;
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	2b0a      	cmp	r3, #10
 800a0b0:	d007      	beq.n	800a0c2 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	69fa      	ldr	r2, [r7, #28]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	dbde      	blt.n	800a07a <f_gets+0x16>
 800a0bc:	e002      	b.n	800a0c4 <f_gets+0x60>
		if (rc != 1) break;
 800a0be:	bf00      	nop
 800a0c0:	e000      	b.n	800a0c4 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a0c2:	bf00      	nop
	}
	*p = 0;
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <f_gets+0x70>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	e000      	b.n	800a0d6 <f_gets+0x72>
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3720      	adds	r7, #32
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	2b0a      	cmp	r3, #10
 800a0ee:	d103      	bne.n	800a0f8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a0f0:	210d      	movs	r1, #13
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7ff fff3 	bl	800a0de <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	db25      	blt.n	800a150 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	60fa      	str	r2, [r7, #12]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	4413      	add	r3, r2
 800a10e:	78fa      	ldrb	r2, [r7, #3]
 800a110:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b3c      	cmp	r3, #60	; 0x3c
 800a116:	dd12      	ble.n	800a13e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6818      	ldr	r0, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f103 010c 	add.w	r1, r3, #12
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	f107 0308 	add.w	r3, r7, #8
 800a128:	f7ff fc1f 	bl	800996a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	429a      	cmp	r2, r3
 800a132:	d101      	bne.n	800a138 <putc_bfd+0x5a>
 800a134:	2300      	movs	r3, #0
 800a136:	e001      	b.n	800a13c <putc_bfd+0x5e>
 800a138:	f04f 33ff 	mov.w	r3, #4294967295
 800a13c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	609a      	str	r2, [r3, #8]
 800a14e:	e000      	b.n	800a152 <putc_bfd+0x74>
	if (i < 0) return;
 800a150:	bf00      	nop
}
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	db16      	blt.n	800a196 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6818      	ldr	r0, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f103 010c 	add.w	r1, r3, #12
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	461a      	mov	r2, r3
 800a178:	f107 030c 	add.w	r3, r7, #12
 800a17c:	f7ff fbf5 	bl	800996a <f_write>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d107      	bne.n	800a196 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d102      	bne.n	800a196 <putc_flush+0x3e>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	e001      	b.n	800a19a <putc_flush+0x42>
	return EOF;
 800a196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b083      	sub	sp, #12
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	605a      	str	r2, [r3, #4]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	609a      	str	r2, [r3, #8]
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b096      	sub	sp, #88	; 0x58
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a1d6:	f107 030c 	add.w	r3, r7, #12
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff ffe0 	bl	800a1a2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a1e2:	e009      	b.n	800a1f8 <f_puts+0x2c>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	607a      	str	r2, [r7, #4]
 800a1ea:	781a      	ldrb	r2, [r3, #0]
 800a1ec:	f107 030c 	add.w	r3, r7, #12
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7ff ff73 	bl	800a0de <putc_bfd>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1f1      	bne.n	800a1e4 <f_puts+0x18>
	return putc_flush(&pb);
 800a200:	f107 030c 	add.w	r3, r7, #12
 800a204:	4618      	mov	r0, r3
 800a206:	f7ff ffa7 	bl	800a158 <putc_flush>
 800a20a:	4603      	mov	r3, r0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3758      	adds	r7, #88	; 0x58
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a214:	b480      	push	{r7}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	4613      	mov	r3, r2
 800a220:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a222:	2301      	movs	r3, #1
 800a224:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a226:	2300      	movs	r3, #0
 800a228:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a22a:	4b1f      	ldr	r3, [pc, #124]	; (800a2a8 <FATFS_LinkDriverEx+0x94>)
 800a22c:	7a5b      	ldrb	r3, [r3, #9]
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b00      	cmp	r3, #0
 800a232:	d131      	bne.n	800a298 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a234:	4b1c      	ldr	r3, [pc, #112]	; (800a2a8 <FATFS_LinkDriverEx+0x94>)
 800a236:	7a5b      	ldrb	r3, [r3, #9]
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	461a      	mov	r2, r3
 800a23c:	4b1a      	ldr	r3, [pc, #104]	; (800a2a8 <FATFS_LinkDriverEx+0x94>)
 800a23e:	2100      	movs	r1, #0
 800a240:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a242:	4b19      	ldr	r3, [pc, #100]	; (800a2a8 <FATFS_LinkDriverEx+0x94>)
 800a244:	7a5b      	ldrb	r3, [r3, #9]
 800a246:	b2db      	uxtb	r3, r3
 800a248:	4a17      	ldr	r2, [pc, #92]	; (800a2a8 <FATFS_LinkDriverEx+0x94>)
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a252:	4b15      	ldr	r3, [pc, #84]	; (800a2a8 <FATFS_LinkDriverEx+0x94>)
 800a254:	7a5b      	ldrb	r3, [r3, #9]
 800a256:	b2db      	uxtb	r3, r3
 800a258:	461a      	mov	r2, r3
 800a25a:	4b13      	ldr	r3, [pc, #76]	; (800a2a8 <FATFS_LinkDriverEx+0x94>)
 800a25c:	4413      	add	r3, r2
 800a25e:	79fa      	ldrb	r2, [r7, #7]
 800a260:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a262:	4b11      	ldr	r3, [pc, #68]	; (800a2a8 <FATFS_LinkDriverEx+0x94>)
 800a264:	7a5b      	ldrb	r3, [r3, #9]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	b2d1      	uxtb	r1, r2
 800a26c:	4a0e      	ldr	r2, [pc, #56]	; (800a2a8 <FATFS_LinkDriverEx+0x94>)
 800a26e:	7251      	strb	r1, [r2, #9]
 800a270:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a272:	7dbb      	ldrb	r3, [r7, #22]
 800a274:	3330      	adds	r3, #48	; 0x30
 800a276:	b2da      	uxtb	r2, r3
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	3301      	adds	r3, #1
 800a280:	223a      	movs	r2, #58	; 0x3a
 800a282:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	3302      	adds	r3, #2
 800a288:	222f      	movs	r2, #47	; 0x2f
 800a28a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	3303      	adds	r3, #3
 800a290:	2200      	movs	r2, #0
 800a292:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a298:	7dfb      	ldrb	r3, [r7, #23]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	371c      	adds	r7, #28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	2000086c 	.word	0x2000086c

0800a2ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7ff ffaa 	bl	800a214 <FATFS_LinkDriverEx>
 800a2c0:	4603      	mov	r3, r0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
	...

0800a2cc <__errno>:
 800a2cc:	4b01      	ldr	r3, [pc, #4]	; (800a2d4 <__errno+0x8>)
 800a2ce:	6818      	ldr	r0, [r3, #0]
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	20000024 	.word	0x20000024

0800a2d8 <__libc_init_array>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	4d0d      	ldr	r5, [pc, #52]	; (800a310 <__libc_init_array+0x38>)
 800a2dc:	4c0d      	ldr	r4, [pc, #52]	; (800a314 <__libc_init_array+0x3c>)
 800a2de:	1b64      	subs	r4, r4, r5
 800a2e0:	10a4      	asrs	r4, r4, #2
 800a2e2:	2600      	movs	r6, #0
 800a2e4:	42a6      	cmp	r6, r4
 800a2e6:	d109      	bne.n	800a2fc <__libc_init_array+0x24>
 800a2e8:	4d0b      	ldr	r5, [pc, #44]	; (800a318 <__libc_init_array+0x40>)
 800a2ea:	4c0c      	ldr	r4, [pc, #48]	; (800a31c <__libc_init_array+0x44>)
 800a2ec:	f002 ffa4 	bl	800d238 <_init>
 800a2f0:	1b64      	subs	r4, r4, r5
 800a2f2:	10a4      	asrs	r4, r4, #2
 800a2f4:	2600      	movs	r6, #0
 800a2f6:	42a6      	cmp	r6, r4
 800a2f8:	d105      	bne.n	800a306 <__libc_init_array+0x2e>
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}
 800a2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a300:	4798      	blx	r3
 800a302:	3601      	adds	r6, #1
 800a304:	e7ee      	b.n	800a2e4 <__libc_init_array+0xc>
 800a306:	f855 3b04 	ldr.w	r3, [r5], #4
 800a30a:	4798      	blx	r3
 800a30c:	3601      	adds	r6, #1
 800a30e:	e7f2      	b.n	800a2f6 <__libc_init_array+0x1e>
 800a310:	0800e454 	.word	0x0800e454
 800a314:	0800e454 	.word	0x0800e454
 800a318:	0800e454 	.word	0x0800e454
 800a31c:	0800e458 	.word	0x0800e458

0800a320 <malloc>:
 800a320:	4b02      	ldr	r3, [pc, #8]	; (800a32c <malloc+0xc>)
 800a322:	4601      	mov	r1, r0
 800a324:	6818      	ldr	r0, [r3, #0]
 800a326:	f000 b877 	b.w	800a418 <_malloc_r>
 800a32a:	bf00      	nop
 800a32c:	20000024 	.word	0x20000024

0800a330 <memset>:
 800a330:	4402      	add	r2, r0
 800a332:	4603      	mov	r3, r0
 800a334:	4293      	cmp	r3, r2
 800a336:	d100      	bne.n	800a33a <memset+0xa>
 800a338:	4770      	bx	lr
 800a33a:	f803 1b01 	strb.w	r1, [r3], #1
 800a33e:	e7f9      	b.n	800a334 <memset+0x4>

0800a340 <_free_r>:
 800a340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a342:	2900      	cmp	r1, #0
 800a344:	d044      	beq.n	800a3d0 <_free_r+0x90>
 800a346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a34a:	9001      	str	r0, [sp, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f1a1 0404 	sub.w	r4, r1, #4
 800a352:	bfb8      	it	lt
 800a354:	18e4      	addlt	r4, r4, r3
 800a356:	f001 ff7b 	bl	800c250 <__malloc_lock>
 800a35a:	4a1e      	ldr	r2, [pc, #120]	; (800a3d4 <_free_r+0x94>)
 800a35c:	9801      	ldr	r0, [sp, #4]
 800a35e:	6813      	ldr	r3, [r2, #0]
 800a360:	b933      	cbnz	r3, 800a370 <_free_r+0x30>
 800a362:	6063      	str	r3, [r4, #4]
 800a364:	6014      	str	r4, [r2, #0]
 800a366:	b003      	add	sp, #12
 800a368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a36c:	f001 bf76 	b.w	800c25c <__malloc_unlock>
 800a370:	42a3      	cmp	r3, r4
 800a372:	d908      	bls.n	800a386 <_free_r+0x46>
 800a374:	6825      	ldr	r5, [r4, #0]
 800a376:	1961      	adds	r1, r4, r5
 800a378:	428b      	cmp	r3, r1
 800a37a:	bf01      	itttt	eq
 800a37c:	6819      	ldreq	r1, [r3, #0]
 800a37e:	685b      	ldreq	r3, [r3, #4]
 800a380:	1949      	addeq	r1, r1, r5
 800a382:	6021      	streq	r1, [r4, #0]
 800a384:	e7ed      	b.n	800a362 <_free_r+0x22>
 800a386:	461a      	mov	r2, r3
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	b10b      	cbz	r3, 800a390 <_free_r+0x50>
 800a38c:	42a3      	cmp	r3, r4
 800a38e:	d9fa      	bls.n	800a386 <_free_r+0x46>
 800a390:	6811      	ldr	r1, [r2, #0]
 800a392:	1855      	adds	r5, r2, r1
 800a394:	42a5      	cmp	r5, r4
 800a396:	d10b      	bne.n	800a3b0 <_free_r+0x70>
 800a398:	6824      	ldr	r4, [r4, #0]
 800a39a:	4421      	add	r1, r4
 800a39c:	1854      	adds	r4, r2, r1
 800a39e:	42a3      	cmp	r3, r4
 800a3a0:	6011      	str	r1, [r2, #0]
 800a3a2:	d1e0      	bne.n	800a366 <_free_r+0x26>
 800a3a4:	681c      	ldr	r4, [r3, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	6053      	str	r3, [r2, #4]
 800a3aa:	4421      	add	r1, r4
 800a3ac:	6011      	str	r1, [r2, #0]
 800a3ae:	e7da      	b.n	800a366 <_free_r+0x26>
 800a3b0:	d902      	bls.n	800a3b8 <_free_r+0x78>
 800a3b2:	230c      	movs	r3, #12
 800a3b4:	6003      	str	r3, [r0, #0]
 800a3b6:	e7d6      	b.n	800a366 <_free_r+0x26>
 800a3b8:	6825      	ldr	r5, [r4, #0]
 800a3ba:	1961      	adds	r1, r4, r5
 800a3bc:	428b      	cmp	r3, r1
 800a3be:	bf04      	itt	eq
 800a3c0:	6819      	ldreq	r1, [r3, #0]
 800a3c2:	685b      	ldreq	r3, [r3, #4]
 800a3c4:	6063      	str	r3, [r4, #4]
 800a3c6:	bf04      	itt	eq
 800a3c8:	1949      	addeq	r1, r1, r5
 800a3ca:	6021      	streq	r1, [r4, #0]
 800a3cc:	6054      	str	r4, [r2, #4]
 800a3ce:	e7ca      	b.n	800a366 <_free_r+0x26>
 800a3d0:	b003      	add	sp, #12
 800a3d2:	bd30      	pop	{r4, r5, pc}
 800a3d4:	20000878 	.word	0x20000878

0800a3d8 <sbrk_aligned>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	4e0e      	ldr	r6, [pc, #56]	; (800a414 <sbrk_aligned+0x3c>)
 800a3dc:	460c      	mov	r4, r1
 800a3de:	6831      	ldr	r1, [r6, #0]
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	b911      	cbnz	r1, 800a3ea <sbrk_aligned+0x12>
 800a3e4:	f000 fd84 	bl	800aef0 <_sbrk_r>
 800a3e8:	6030      	str	r0, [r6, #0]
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f000 fd7f 	bl	800aef0 <_sbrk_r>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	d00a      	beq.n	800a40c <sbrk_aligned+0x34>
 800a3f6:	1cc4      	adds	r4, r0, #3
 800a3f8:	f024 0403 	bic.w	r4, r4, #3
 800a3fc:	42a0      	cmp	r0, r4
 800a3fe:	d007      	beq.n	800a410 <sbrk_aligned+0x38>
 800a400:	1a21      	subs	r1, r4, r0
 800a402:	4628      	mov	r0, r5
 800a404:	f000 fd74 	bl	800aef0 <_sbrk_r>
 800a408:	3001      	adds	r0, #1
 800a40a:	d101      	bne.n	800a410 <sbrk_aligned+0x38>
 800a40c:	f04f 34ff 	mov.w	r4, #4294967295
 800a410:	4620      	mov	r0, r4
 800a412:	bd70      	pop	{r4, r5, r6, pc}
 800a414:	2000087c 	.word	0x2000087c

0800a418 <_malloc_r>:
 800a418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a41c:	1ccd      	adds	r5, r1, #3
 800a41e:	f025 0503 	bic.w	r5, r5, #3
 800a422:	3508      	adds	r5, #8
 800a424:	2d0c      	cmp	r5, #12
 800a426:	bf38      	it	cc
 800a428:	250c      	movcc	r5, #12
 800a42a:	2d00      	cmp	r5, #0
 800a42c:	4607      	mov	r7, r0
 800a42e:	db01      	blt.n	800a434 <_malloc_r+0x1c>
 800a430:	42a9      	cmp	r1, r5
 800a432:	d905      	bls.n	800a440 <_malloc_r+0x28>
 800a434:	230c      	movs	r3, #12
 800a436:	603b      	str	r3, [r7, #0]
 800a438:	2600      	movs	r6, #0
 800a43a:	4630      	mov	r0, r6
 800a43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a440:	4e2e      	ldr	r6, [pc, #184]	; (800a4fc <_malloc_r+0xe4>)
 800a442:	f001 ff05 	bl	800c250 <__malloc_lock>
 800a446:	6833      	ldr	r3, [r6, #0]
 800a448:	461c      	mov	r4, r3
 800a44a:	bb34      	cbnz	r4, 800a49a <_malloc_r+0x82>
 800a44c:	4629      	mov	r1, r5
 800a44e:	4638      	mov	r0, r7
 800a450:	f7ff ffc2 	bl	800a3d8 <sbrk_aligned>
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	4604      	mov	r4, r0
 800a458:	d14d      	bne.n	800a4f6 <_malloc_r+0xde>
 800a45a:	6834      	ldr	r4, [r6, #0]
 800a45c:	4626      	mov	r6, r4
 800a45e:	2e00      	cmp	r6, #0
 800a460:	d140      	bne.n	800a4e4 <_malloc_r+0xcc>
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	4631      	mov	r1, r6
 800a466:	4638      	mov	r0, r7
 800a468:	eb04 0803 	add.w	r8, r4, r3
 800a46c:	f000 fd40 	bl	800aef0 <_sbrk_r>
 800a470:	4580      	cmp	r8, r0
 800a472:	d13a      	bne.n	800a4ea <_malloc_r+0xd2>
 800a474:	6821      	ldr	r1, [r4, #0]
 800a476:	3503      	adds	r5, #3
 800a478:	1a6d      	subs	r5, r5, r1
 800a47a:	f025 0503 	bic.w	r5, r5, #3
 800a47e:	3508      	adds	r5, #8
 800a480:	2d0c      	cmp	r5, #12
 800a482:	bf38      	it	cc
 800a484:	250c      	movcc	r5, #12
 800a486:	4629      	mov	r1, r5
 800a488:	4638      	mov	r0, r7
 800a48a:	f7ff ffa5 	bl	800a3d8 <sbrk_aligned>
 800a48e:	3001      	adds	r0, #1
 800a490:	d02b      	beq.n	800a4ea <_malloc_r+0xd2>
 800a492:	6823      	ldr	r3, [r4, #0]
 800a494:	442b      	add	r3, r5
 800a496:	6023      	str	r3, [r4, #0]
 800a498:	e00e      	b.n	800a4b8 <_malloc_r+0xa0>
 800a49a:	6822      	ldr	r2, [r4, #0]
 800a49c:	1b52      	subs	r2, r2, r5
 800a49e:	d41e      	bmi.n	800a4de <_malloc_r+0xc6>
 800a4a0:	2a0b      	cmp	r2, #11
 800a4a2:	d916      	bls.n	800a4d2 <_malloc_r+0xba>
 800a4a4:	1961      	adds	r1, r4, r5
 800a4a6:	42a3      	cmp	r3, r4
 800a4a8:	6025      	str	r5, [r4, #0]
 800a4aa:	bf18      	it	ne
 800a4ac:	6059      	strne	r1, [r3, #4]
 800a4ae:	6863      	ldr	r3, [r4, #4]
 800a4b0:	bf08      	it	eq
 800a4b2:	6031      	streq	r1, [r6, #0]
 800a4b4:	5162      	str	r2, [r4, r5]
 800a4b6:	604b      	str	r3, [r1, #4]
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	f104 060b 	add.w	r6, r4, #11
 800a4be:	f001 fecd 	bl	800c25c <__malloc_unlock>
 800a4c2:	f026 0607 	bic.w	r6, r6, #7
 800a4c6:	1d23      	adds	r3, r4, #4
 800a4c8:	1af2      	subs	r2, r6, r3
 800a4ca:	d0b6      	beq.n	800a43a <_malloc_r+0x22>
 800a4cc:	1b9b      	subs	r3, r3, r6
 800a4ce:	50a3      	str	r3, [r4, r2]
 800a4d0:	e7b3      	b.n	800a43a <_malloc_r+0x22>
 800a4d2:	6862      	ldr	r2, [r4, #4]
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	bf0c      	ite	eq
 800a4d8:	6032      	streq	r2, [r6, #0]
 800a4da:	605a      	strne	r2, [r3, #4]
 800a4dc:	e7ec      	b.n	800a4b8 <_malloc_r+0xa0>
 800a4de:	4623      	mov	r3, r4
 800a4e0:	6864      	ldr	r4, [r4, #4]
 800a4e2:	e7b2      	b.n	800a44a <_malloc_r+0x32>
 800a4e4:	4634      	mov	r4, r6
 800a4e6:	6876      	ldr	r6, [r6, #4]
 800a4e8:	e7b9      	b.n	800a45e <_malloc_r+0x46>
 800a4ea:	230c      	movs	r3, #12
 800a4ec:	603b      	str	r3, [r7, #0]
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	f001 feb4 	bl	800c25c <__malloc_unlock>
 800a4f4:	e7a1      	b.n	800a43a <_malloc_r+0x22>
 800a4f6:	6025      	str	r5, [r4, #0]
 800a4f8:	e7de      	b.n	800a4b8 <_malloc_r+0xa0>
 800a4fa:	bf00      	nop
 800a4fc:	20000878 	.word	0x20000878

0800a500 <__cvt>:
 800a500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a504:	ec55 4b10 	vmov	r4, r5, d0
 800a508:	2d00      	cmp	r5, #0
 800a50a:	460e      	mov	r6, r1
 800a50c:	4619      	mov	r1, r3
 800a50e:	462b      	mov	r3, r5
 800a510:	bfbb      	ittet	lt
 800a512:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a516:	461d      	movlt	r5, r3
 800a518:	2300      	movge	r3, #0
 800a51a:	232d      	movlt	r3, #45	; 0x2d
 800a51c:	700b      	strb	r3, [r1, #0]
 800a51e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a520:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a524:	4691      	mov	r9, r2
 800a526:	f023 0820 	bic.w	r8, r3, #32
 800a52a:	bfbc      	itt	lt
 800a52c:	4622      	movlt	r2, r4
 800a52e:	4614      	movlt	r4, r2
 800a530:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a534:	d005      	beq.n	800a542 <__cvt+0x42>
 800a536:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a53a:	d100      	bne.n	800a53e <__cvt+0x3e>
 800a53c:	3601      	adds	r6, #1
 800a53e:	2102      	movs	r1, #2
 800a540:	e000      	b.n	800a544 <__cvt+0x44>
 800a542:	2103      	movs	r1, #3
 800a544:	ab03      	add	r3, sp, #12
 800a546:	9301      	str	r3, [sp, #4]
 800a548:	ab02      	add	r3, sp, #8
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	ec45 4b10 	vmov	d0, r4, r5
 800a550:	4653      	mov	r3, sl
 800a552:	4632      	mov	r2, r6
 800a554:	f000 fe5c 	bl	800b210 <_dtoa_r>
 800a558:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a55c:	4607      	mov	r7, r0
 800a55e:	d102      	bne.n	800a566 <__cvt+0x66>
 800a560:	f019 0f01 	tst.w	r9, #1
 800a564:	d022      	beq.n	800a5ac <__cvt+0xac>
 800a566:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a56a:	eb07 0906 	add.w	r9, r7, r6
 800a56e:	d110      	bne.n	800a592 <__cvt+0x92>
 800a570:	783b      	ldrb	r3, [r7, #0]
 800a572:	2b30      	cmp	r3, #48	; 0x30
 800a574:	d10a      	bne.n	800a58c <__cvt+0x8c>
 800a576:	2200      	movs	r2, #0
 800a578:	2300      	movs	r3, #0
 800a57a:	4620      	mov	r0, r4
 800a57c:	4629      	mov	r1, r5
 800a57e:	f7f6 facb 	bl	8000b18 <__aeabi_dcmpeq>
 800a582:	b918      	cbnz	r0, 800a58c <__cvt+0x8c>
 800a584:	f1c6 0601 	rsb	r6, r6, #1
 800a588:	f8ca 6000 	str.w	r6, [sl]
 800a58c:	f8da 3000 	ldr.w	r3, [sl]
 800a590:	4499      	add	r9, r3
 800a592:	2200      	movs	r2, #0
 800a594:	2300      	movs	r3, #0
 800a596:	4620      	mov	r0, r4
 800a598:	4629      	mov	r1, r5
 800a59a:	f7f6 fabd 	bl	8000b18 <__aeabi_dcmpeq>
 800a59e:	b108      	cbz	r0, 800a5a4 <__cvt+0xa4>
 800a5a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5a4:	2230      	movs	r2, #48	; 0x30
 800a5a6:	9b03      	ldr	r3, [sp, #12]
 800a5a8:	454b      	cmp	r3, r9
 800a5aa:	d307      	bcc.n	800a5bc <__cvt+0xbc>
 800a5ac:	9b03      	ldr	r3, [sp, #12]
 800a5ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5b0:	1bdb      	subs	r3, r3, r7
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	6013      	str	r3, [r2, #0]
 800a5b6:	b004      	add	sp, #16
 800a5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5bc:	1c59      	adds	r1, r3, #1
 800a5be:	9103      	str	r1, [sp, #12]
 800a5c0:	701a      	strb	r2, [r3, #0]
 800a5c2:	e7f0      	b.n	800a5a6 <__cvt+0xa6>

0800a5c4 <__exponent>:
 800a5c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2900      	cmp	r1, #0
 800a5ca:	bfb8      	it	lt
 800a5cc:	4249      	neglt	r1, r1
 800a5ce:	f803 2b02 	strb.w	r2, [r3], #2
 800a5d2:	bfb4      	ite	lt
 800a5d4:	222d      	movlt	r2, #45	; 0x2d
 800a5d6:	222b      	movge	r2, #43	; 0x2b
 800a5d8:	2909      	cmp	r1, #9
 800a5da:	7042      	strb	r2, [r0, #1]
 800a5dc:	dd2a      	ble.n	800a634 <__exponent+0x70>
 800a5de:	f10d 0407 	add.w	r4, sp, #7
 800a5e2:	46a4      	mov	ip, r4
 800a5e4:	270a      	movs	r7, #10
 800a5e6:	46a6      	mov	lr, r4
 800a5e8:	460a      	mov	r2, r1
 800a5ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5ee:	fb07 1516 	mls	r5, r7, r6, r1
 800a5f2:	3530      	adds	r5, #48	; 0x30
 800a5f4:	2a63      	cmp	r2, #99	; 0x63
 800a5f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a5fe:	4631      	mov	r1, r6
 800a600:	dcf1      	bgt.n	800a5e6 <__exponent+0x22>
 800a602:	3130      	adds	r1, #48	; 0x30
 800a604:	f1ae 0502 	sub.w	r5, lr, #2
 800a608:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a60c:	1c44      	adds	r4, r0, #1
 800a60e:	4629      	mov	r1, r5
 800a610:	4561      	cmp	r1, ip
 800a612:	d30a      	bcc.n	800a62a <__exponent+0x66>
 800a614:	f10d 0209 	add.w	r2, sp, #9
 800a618:	eba2 020e 	sub.w	r2, r2, lr
 800a61c:	4565      	cmp	r5, ip
 800a61e:	bf88      	it	hi
 800a620:	2200      	movhi	r2, #0
 800a622:	4413      	add	r3, r2
 800a624:	1a18      	subs	r0, r3, r0
 800a626:	b003      	add	sp, #12
 800a628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a62a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a62e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a632:	e7ed      	b.n	800a610 <__exponent+0x4c>
 800a634:	2330      	movs	r3, #48	; 0x30
 800a636:	3130      	adds	r1, #48	; 0x30
 800a638:	7083      	strb	r3, [r0, #2]
 800a63a:	70c1      	strb	r1, [r0, #3]
 800a63c:	1d03      	adds	r3, r0, #4
 800a63e:	e7f1      	b.n	800a624 <__exponent+0x60>

0800a640 <_printf_float>:
 800a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a644:	ed2d 8b02 	vpush	{d8}
 800a648:	b08d      	sub	sp, #52	; 0x34
 800a64a:	460c      	mov	r4, r1
 800a64c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a650:	4616      	mov	r6, r2
 800a652:	461f      	mov	r7, r3
 800a654:	4605      	mov	r5, r0
 800a656:	f001 fd81 	bl	800c15c <_localeconv_r>
 800a65a:	f8d0 a000 	ldr.w	sl, [r0]
 800a65e:	4650      	mov	r0, sl
 800a660:	f7f5 fdd8 	bl	8000214 <strlen>
 800a664:	2300      	movs	r3, #0
 800a666:	930a      	str	r3, [sp, #40]	; 0x28
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	9305      	str	r3, [sp, #20]
 800a66c:	f8d8 3000 	ldr.w	r3, [r8]
 800a670:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a674:	3307      	adds	r3, #7
 800a676:	f023 0307 	bic.w	r3, r3, #7
 800a67a:	f103 0208 	add.w	r2, r3, #8
 800a67e:	f8c8 2000 	str.w	r2, [r8]
 800a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a686:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a68a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a68e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a692:	9307      	str	r3, [sp, #28]
 800a694:	f8cd 8018 	str.w	r8, [sp, #24]
 800a698:	ee08 0a10 	vmov	s16, r0
 800a69c:	4b9f      	ldr	r3, [pc, #636]	; (800a91c <_printf_float+0x2dc>)
 800a69e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a6:	f7f6 fa69 	bl	8000b7c <__aeabi_dcmpun>
 800a6aa:	bb88      	cbnz	r0, 800a710 <_printf_float+0xd0>
 800a6ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6b0:	4b9a      	ldr	r3, [pc, #616]	; (800a91c <_printf_float+0x2dc>)
 800a6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b6:	f7f6 fa43 	bl	8000b40 <__aeabi_dcmple>
 800a6ba:	bb48      	cbnz	r0, 800a710 <_printf_float+0xd0>
 800a6bc:	2200      	movs	r2, #0
 800a6be:	2300      	movs	r3, #0
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	f7f6 fa32 	bl	8000b2c <__aeabi_dcmplt>
 800a6c8:	b110      	cbz	r0, 800a6d0 <_printf_float+0x90>
 800a6ca:	232d      	movs	r3, #45	; 0x2d
 800a6cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6d0:	4b93      	ldr	r3, [pc, #588]	; (800a920 <_printf_float+0x2e0>)
 800a6d2:	4894      	ldr	r0, [pc, #592]	; (800a924 <_printf_float+0x2e4>)
 800a6d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a6d8:	bf94      	ite	ls
 800a6da:	4698      	movls	r8, r3
 800a6dc:	4680      	movhi	r8, r0
 800a6de:	2303      	movs	r3, #3
 800a6e0:	6123      	str	r3, [r4, #16]
 800a6e2:	9b05      	ldr	r3, [sp, #20]
 800a6e4:	f023 0204 	bic.w	r2, r3, #4
 800a6e8:	6022      	str	r2, [r4, #0]
 800a6ea:	f04f 0900 	mov.w	r9, #0
 800a6ee:	9700      	str	r7, [sp, #0]
 800a6f0:	4633      	mov	r3, r6
 800a6f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	f000 f9d8 	bl	800aaac <_printf_common>
 800a6fc:	3001      	adds	r0, #1
 800a6fe:	f040 8090 	bne.w	800a822 <_printf_float+0x1e2>
 800a702:	f04f 30ff 	mov.w	r0, #4294967295
 800a706:	b00d      	add	sp, #52	; 0x34
 800a708:	ecbd 8b02 	vpop	{d8}
 800a70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a710:	4642      	mov	r2, r8
 800a712:	464b      	mov	r3, r9
 800a714:	4640      	mov	r0, r8
 800a716:	4649      	mov	r1, r9
 800a718:	f7f6 fa30 	bl	8000b7c <__aeabi_dcmpun>
 800a71c:	b140      	cbz	r0, 800a730 <_printf_float+0xf0>
 800a71e:	464b      	mov	r3, r9
 800a720:	2b00      	cmp	r3, #0
 800a722:	bfbc      	itt	lt
 800a724:	232d      	movlt	r3, #45	; 0x2d
 800a726:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a72a:	487f      	ldr	r0, [pc, #508]	; (800a928 <_printf_float+0x2e8>)
 800a72c:	4b7f      	ldr	r3, [pc, #508]	; (800a92c <_printf_float+0x2ec>)
 800a72e:	e7d1      	b.n	800a6d4 <_printf_float+0x94>
 800a730:	6863      	ldr	r3, [r4, #4]
 800a732:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a736:	9206      	str	r2, [sp, #24]
 800a738:	1c5a      	adds	r2, r3, #1
 800a73a:	d13f      	bne.n	800a7bc <_printf_float+0x17c>
 800a73c:	2306      	movs	r3, #6
 800a73e:	6063      	str	r3, [r4, #4]
 800a740:	9b05      	ldr	r3, [sp, #20]
 800a742:	6861      	ldr	r1, [r4, #4]
 800a744:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a748:	2300      	movs	r3, #0
 800a74a:	9303      	str	r3, [sp, #12]
 800a74c:	ab0a      	add	r3, sp, #40	; 0x28
 800a74e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a752:	ab09      	add	r3, sp, #36	; 0x24
 800a754:	ec49 8b10 	vmov	d0, r8, r9
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	6022      	str	r2, [r4, #0]
 800a75c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a760:	4628      	mov	r0, r5
 800a762:	f7ff fecd 	bl	800a500 <__cvt>
 800a766:	9b06      	ldr	r3, [sp, #24]
 800a768:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a76a:	2b47      	cmp	r3, #71	; 0x47
 800a76c:	4680      	mov	r8, r0
 800a76e:	d108      	bne.n	800a782 <_printf_float+0x142>
 800a770:	1cc8      	adds	r0, r1, #3
 800a772:	db02      	blt.n	800a77a <_printf_float+0x13a>
 800a774:	6863      	ldr	r3, [r4, #4]
 800a776:	4299      	cmp	r1, r3
 800a778:	dd41      	ble.n	800a7fe <_printf_float+0x1be>
 800a77a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a77e:	fa5f fb8b 	uxtb.w	fp, fp
 800a782:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a786:	d820      	bhi.n	800a7ca <_printf_float+0x18a>
 800a788:	3901      	subs	r1, #1
 800a78a:	465a      	mov	r2, fp
 800a78c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a790:	9109      	str	r1, [sp, #36]	; 0x24
 800a792:	f7ff ff17 	bl	800a5c4 <__exponent>
 800a796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a798:	1813      	adds	r3, r2, r0
 800a79a:	2a01      	cmp	r2, #1
 800a79c:	4681      	mov	r9, r0
 800a79e:	6123      	str	r3, [r4, #16]
 800a7a0:	dc02      	bgt.n	800a7a8 <_printf_float+0x168>
 800a7a2:	6822      	ldr	r2, [r4, #0]
 800a7a4:	07d2      	lsls	r2, r2, #31
 800a7a6:	d501      	bpl.n	800a7ac <_printf_float+0x16c>
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	6123      	str	r3, [r4, #16]
 800a7ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d09c      	beq.n	800a6ee <_printf_float+0xae>
 800a7b4:	232d      	movs	r3, #45	; 0x2d
 800a7b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7ba:	e798      	b.n	800a6ee <_printf_float+0xae>
 800a7bc:	9a06      	ldr	r2, [sp, #24]
 800a7be:	2a47      	cmp	r2, #71	; 0x47
 800a7c0:	d1be      	bne.n	800a740 <_printf_float+0x100>
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1bc      	bne.n	800a740 <_printf_float+0x100>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e7b9      	b.n	800a73e <_printf_float+0xfe>
 800a7ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a7ce:	d118      	bne.n	800a802 <_printf_float+0x1c2>
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	6863      	ldr	r3, [r4, #4]
 800a7d4:	dd0b      	ble.n	800a7ee <_printf_float+0x1ae>
 800a7d6:	6121      	str	r1, [r4, #16]
 800a7d8:	b913      	cbnz	r3, 800a7e0 <_printf_float+0x1a0>
 800a7da:	6822      	ldr	r2, [r4, #0]
 800a7dc:	07d0      	lsls	r0, r2, #31
 800a7de:	d502      	bpl.n	800a7e6 <_printf_float+0x1a6>
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	440b      	add	r3, r1
 800a7e4:	6123      	str	r3, [r4, #16]
 800a7e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7e8:	f04f 0900 	mov.w	r9, #0
 800a7ec:	e7de      	b.n	800a7ac <_printf_float+0x16c>
 800a7ee:	b913      	cbnz	r3, 800a7f6 <_printf_float+0x1b6>
 800a7f0:	6822      	ldr	r2, [r4, #0]
 800a7f2:	07d2      	lsls	r2, r2, #31
 800a7f4:	d501      	bpl.n	800a7fa <_printf_float+0x1ba>
 800a7f6:	3302      	adds	r3, #2
 800a7f8:	e7f4      	b.n	800a7e4 <_printf_float+0x1a4>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e7f2      	b.n	800a7e4 <_printf_float+0x1a4>
 800a7fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a804:	4299      	cmp	r1, r3
 800a806:	db05      	blt.n	800a814 <_printf_float+0x1d4>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	6121      	str	r1, [r4, #16]
 800a80c:	07d8      	lsls	r0, r3, #31
 800a80e:	d5ea      	bpl.n	800a7e6 <_printf_float+0x1a6>
 800a810:	1c4b      	adds	r3, r1, #1
 800a812:	e7e7      	b.n	800a7e4 <_printf_float+0x1a4>
 800a814:	2900      	cmp	r1, #0
 800a816:	bfd4      	ite	le
 800a818:	f1c1 0202 	rsble	r2, r1, #2
 800a81c:	2201      	movgt	r2, #1
 800a81e:	4413      	add	r3, r2
 800a820:	e7e0      	b.n	800a7e4 <_printf_float+0x1a4>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	055a      	lsls	r2, r3, #21
 800a826:	d407      	bmi.n	800a838 <_printf_float+0x1f8>
 800a828:	6923      	ldr	r3, [r4, #16]
 800a82a:	4642      	mov	r2, r8
 800a82c:	4631      	mov	r1, r6
 800a82e:	4628      	mov	r0, r5
 800a830:	47b8      	blx	r7
 800a832:	3001      	adds	r0, #1
 800a834:	d12c      	bne.n	800a890 <_printf_float+0x250>
 800a836:	e764      	b.n	800a702 <_printf_float+0xc2>
 800a838:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a83c:	f240 80e0 	bls.w	800aa00 <_printf_float+0x3c0>
 800a840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a844:	2200      	movs	r2, #0
 800a846:	2300      	movs	r3, #0
 800a848:	f7f6 f966 	bl	8000b18 <__aeabi_dcmpeq>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d034      	beq.n	800a8ba <_printf_float+0x27a>
 800a850:	4a37      	ldr	r2, [pc, #220]	; (800a930 <_printf_float+0x2f0>)
 800a852:	2301      	movs	r3, #1
 800a854:	4631      	mov	r1, r6
 800a856:	4628      	mov	r0, r5
 800a858:	47b8      	blx	r7
 800a85a:	3001      	adds	r0, #1
 800a85c:	f43f af51 	beq.w	800a702 <_printf_float+0xc2>
 800a860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a864:	429a      	cmp	r2, r3
 800a866:	db02      	blt.n	800a86e <_printf_float+0x22e>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	07d8      	lsls	r0, r3, #31
 800a86c:	d510      	bpl.n	800a890 <_printf_float+0x250>
 800a86e:	ee18 3a10 	vmov	r3, s16
 800a872:	4652      	mov	r2, sl
 800a874:	4631      	mov	r1, r6
 800a876:	4628      	mov	r0, r5
 800a878:	47b8      	blx	r7
 800a87a:	3001      	adds	r0, #1
 800a87c:	f43f af41 	beq.w	800a702 <_printf_float+0xc2>
 800a880:	f04f 0800 	mov.w	r8, #0
 800a884:	f104 091a 	add.w	r9, r4, #26
 800a888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a88a:	3b01      	subs	r3, #1
 800a88c:	4543      	cmp	r3, r8
 800a88e:	dc09      	bgt.n	800a8a4 <_printf_float+0x264>
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	079b      	lsls	r3, r3, #30
 800a894:	f100 8105 	bmi.w	800aaa2 <_printf_float+0x462>
 800a898:	68e0      	ldr	r0, [r4, #12]
 800a89a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a89c:	4298      	cmp	r0, r3
 800a89e:	bfb8      	it	lt
 800a8a0:	4618      	movlt	r0, r3
 800a8a2:	e730      	b.n	800a706 <_printf_float+0xc6>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	464a      	mov	r2, r9
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	47b8      	blx	r7
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f43f af27 	beq.w	800a702 <_printf_float+0xc2>
 800a8b4:	f108 0801 	add.w	r8, r8, #1
 800a8b8:	e7e6      	b.n	800a888 <_printf_float+0x248>
 800a8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	dc39      	bgt.n	800a934 <_printf_float+0x2f4>
 800a8c0:	4a1b      	ldr	r2, [pc, #108]	; (800a930 <_printf_float+0x2f0>)
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	4631      	mov	r1, r6
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	47b8      	blx	r7
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	f43f af19 	beq.w	800a702 <_printf_float+0xc2>
 800a8d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	d102      	bne.n	800a8de <_printf_float+0x29e>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	07d9      	lsls	r1, r3, #31
 800a8dc:	d5d8      	bpl.n	800a890 <_printf_float+0x250>
 800a8de:	ee18 3a10 	vmov	r3, s16
 800a8e2:	4652      	mov	r2, sl
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	47b8      	blx	r7
 800a8ea:	3001      	adds	r0, #1
 800a8ec:	f43f af09 	beq.w	800a702 <_printf_float+0xc2>
 800a8f0:	f04f 0900 	mov.w	r9, #0
 800a8f4:	f104 0a1a 	add.w	sl, r4, #26
 800a8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8fa:	425b      	negs	r3, r3
 800a8fc:	454b      	cmp	r3, r9
 800a8fe:	dc01      	bgt.n	800a904 <_printf_float+0x2c4>
 800a900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a902:	e792      	b.n	800a82a <_printf_float+0x1ea>
 800a904:	2301      	movs	r3, #1
 800a906:	4652      	mov	r2, sl
 800a908:	4631      	mov	r1, r6
 800a90a:	4628      	mov	r0, r5
 800a90c:	47b8      	blx	r7
 800a90e:	3001      	adds	r0, #1
 800a910:	f43f aef7 	beq.w	800a702 <_printf_float+0xc2>
 800a914:	f109 0901 	add.w	r9, r9, #1
 800a918:	e7ee      	b.n	800a8f8 <_printf_float+0x2b8>
 800a91a:	bf00      	nop
 800a91c:	7fefffff 	.word	0x7fefffff
 800a920:	0800e078 	.word	0x0800e078
 800a924:	0800e07c 	.word	0x0800e07c
 800a928:	0800e084 	.word	0x0800e084
 800a92c:	0800e080 	.word	0x0800e080
 800a930:	0800e088 	.word	0x0800e088
 800a934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a936:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a938:	429a      	cmp	r2, r3
 800a93a:	bfa8      	it	ge
 800a93c:	461a      	movge	r2, r3
 800a93e:	2a00      	cmp	r2, #0
 800a940:	4691      	mov	r9, r2
 800a942:	dc37      	bgt.n	800a9b4 <_printf_float+0x374>
 800a944:	f04f 0b00 	mov.w	fp, #0
 800a948:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a94c:	f104 021a 	add.w	r2, r4, #26
 800a950:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a952:	9305      	str	r3, [sp, #20]
 800a954:	eba3 0309 	sub.w	r3, r3, r9
 800a958:	455b      	cmp	r3, fp
 800a95a:	dc33      	bgt.n	800a9c4 <_printf_float+0x384>
 800a95c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a960:	429a      	cmp	r2, r3
 800a962:	db3b      	blt.n	800a9dc <_printf_float+0x39c>
 800a964:	6823      	ldr	r3, [r4, #0]
 800a966:	07da      	lsls	r2, r3, #31
 800a968:	d438      	bmi.n	800a9dc <_printf_float+0x39c>
 800a96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a96c:	9a05      	ldr	r2, [sp, #20]
 800a96e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a970:	1a9a      	subs	r2, r3, r2
 800a972:	eba3 0901 	sub.w	r9, r3, r1
 800a976:	4591      	cmp	r9, r2
 800a978:	bfa8      	it	ge
 800a97a:	4691      	movge	r9, r2
 800a97c:	f1b9 0f00 	cmp.w	r9, #0
 800a980:	dc35      	bgt.n	800a9ee <_printf_float+0x3ae>
 800a982:	f04f 0800 	mov.w	r8, #0
 800a986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a98a:	f104 0a1a 	add.w	sl, r4, #26
 800a98e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a992:	1a9b      	subs	r3, r3, r2
 800a994:	eba3 0309 	sub.w	r3, r3, r9
 800a998:	4543      	cmp	r3, r8
 800a99a:	f77f af79 	ble.w	800a890 <_printf_float+0x250>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	4652      	mov	r2, sl
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	47b8      	blx	r7
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	f43f aeaa 	beq.w	800a702 <_printf_float+0xc2>
 800a9ae:	f108 0801 	add.w	r8, r8, #1
 800a9b2:	e7ec      	b.n	800a98e <_printf_float+0x34e>
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4642      	mov	r2, r8
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	47b8      	blx	r7
 800a9be:	3001      	adds	r0, #1
 800a9c0:	d1c0      	bne.n	800a944 <_printf_float+0x304>
 800a9c2:	e69e      	b.n	800a702 <_printf_float+0xc2>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	9205      	str	r2, [sp, #20]
 800a9cc:	47b8      	blx	r7
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	f43f ae97 	beq.w	800a702 <_printf_float+0xc2>
 800a9d4:	9a05      	ldr	r2, [sp, #20]
 800a9d6:	f10b 0b01 	add.w	fp, fp, #1
 800a9da:	e7b9      	b.n	800a950 <_printf_float+0x310>
 800a9dc:	ee18 3a10 	vmov	r3, s16
 800a9e0:	4652      	mov	r2, sl
 800a9e2:	4631      	mov	r1, r6
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	47b8      	blx	r7
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	d1be      	bne.n	800a96a <_printf_float+0x32a>
 800a9ec:	e689      	b.n	800a702 <_printf_float+0xc2>
 800a9ee:	9a05      	ldr	r2, [sp, #20]
 800a9f0:	464b      	mov	r3, r9
 800a9f2:	4442      	add	r2, r8
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	47b8      	blx	r7
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d1c1      	bne.n	800a982 <_printf_float+0x342>
 800a9fe:	e680      	b.n	800a702 <_printf_float+0xc2>
 800aa00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa02:	2a01      	cmp	r2, #1
 800aa04:	dc01      	bgt.n	800aa0a <_printf_float+0x3ca>
 800aa06:	07db      	lsls	r3, r3, #31
 800aa08:	d538      	bpl.n	800aa7c <_printf_float+0x43c>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	4642      	mov	r2, r8
 800aa0e:	4631      	mov	r1, r6
 800aa10:	4628      	mov	r0, r5
 800aa12:	47b8      	blx	r7
 800aa14:	3001      	adds	r0, #1
 800aa16:	f43f ae74 	beq.w	800a702 <_printf_float+0xc2>
 800aa1a:	ee18 3a10 	vmov	r3, s16
 800aa1e:	4652      	mov	r2, sl
 800aa20:	4631      	mov	r1, r6
 800aa22:	4628      	mov	r0, r5
 800aa24:	47b8      	blx	r7
 800aa26:	3001      	adds	r0, #1
 800aa28:	f43f ae6b 	beq.w	800a702 <_printf_float+0xc2>
 800aa2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa30:	2200      	movs	r2, #0
 800aa32:	2300      	movs	r3, #0
 800aa34:	f7f6 f870 	bl	8000b18 <__aeabi_dcmpeq>
 800aa38:	b9d8      	cbnz	r0, 800aa72 <_printf_float+0x432>
 800aa3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa3c:	f108 0201 	add.w	r2, r8, #1
 800aa40:	3b01      	subs	r3, #1
 800aa42:	4631      	mov	r1, r6
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b8      	blx	r7
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d10e      	bne.n	800aa6a <_printf_float+0x42a>
 800aa4c:	e659      	b.n	800a702 <_printf_float+0xc2>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	4652      	mov	r2, sl
 800aa52:	4631      	mov	r1, r6
 800aa54:	4628      	mov	r0, r5
 800aa56:	47b8      	blx	r7
 800aa58:	3001      	adds	r0, #1
 800aa5a:	f43f ae52 	beq.w	800a702 <_printf_float+0xc2>
 800aa5e:	f108 0801 	add.w	r8, r8, #1
 800aa62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa64:	3b01      	subs	r3, #1
 800aa66:	4543      	cmp	r3, r8
 800aa68:	dcf1      	bgt.n	800aa4e <_printf_float+0x40e>
 800aa6a:	464b      	mov	r3, r9
 800aa6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa70:	e6dc      	b.n	800a82c <_printf_float+0x1ec>
 800aa72:	f04f 0800 	mov.w	r8, #0
 800aa76:	f104 0a1a 	add.w	sl, r4, #26
 800aa7a:	e7f2      	b.n	800aa62 <_printf_float+0x422>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	4642      	mov	r2, r8
 800aa80:	e7df      	b.n	800aa42 <_printf_float+0x402>
 800aa82:	2301      	movs	r3, #1
 800aa84:	464a      	mov	r2, r9
 800aa86:	4631      	mov	r1, r6
 800aa88:	4628      	mov	r0, r5
 800aa8a:	47b8      	blx	r7
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	f43f ae38 	beq.w	800a702 <_printf_float+0xc2>
 800aa92:	f108 0801 	add.w	r8, r8, #1
 800aa96:	68e3      	ldr	r3, [r4, #12]
 800aa98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa9a:	1a5b      	subs	r3, r3, r1
 800aa9c:	4543      	cmp	r3, r8
 800aa9e:	dcf0      	bgt.n	800aa82 <_printf_float+0x442>
 800aaa0:	e6fa      	b.n	800a898 <_printf_float+0x258>
 800aaa2:	f04f 0800 	mov.w	r8, #0
 800aaa6:	f104 0919 	add.w	r9, r4, #25
 800aaaa:	e7f4      	b.n	800aa96 <_printf_float+0x456>

0800aaac <_printf_common>:
 800aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	4616      	mov	r6, r2
 800aab2:	4699      	mov	r9, r3
 800aab4:	688a      	ldr	r2, [r1, #8]
 800aab6:	690b      	ldr	r3, [r1, #16]
 800aab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aabc:	4293      	cmp	r3, r2
 800aabe:	bfb8      	it	lt
 800aac0:	4613      	movlt	r3, r2
 800aac2:	6033      	str	r3, [r6, #0]
 800aac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aac8:	4607      	mov	r7, r0
 800aaca:	460c      	mov	r4, r1
 800aacc:	b10a      	cbz	r2, 800aad2 <_printf_common+0x26>
 800aace:	3301      	adds	r3, #1
 800aad0:	6033      	str	r3, [r6, #0]
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	0699      	lsls	r1, r3, #26
 800aad6:	bf42      	ittt	mi
 800aad8:	6833      	ldrmi	r3, [r6, #0]
 800aada:	3302      	addmi	r3, #2
 800aadc:	6033      	strmi	r3, [r6, #0]
 800aade:	6825      	ldr	r5, [r4, #0]
 800aae0:	f015 0506 	ands.w	r5, r5, #6
 800aae4:	d106      	bne.n	800aaf4 <_printf_common+0x48>
 800aae6:	f104 0a19 	add.w	sl, r4, #25
 800aaea:	68e3      	ldr	r3, [r4, #12]
 800aaec:	6832      	ldr	r2, [r6, #0]
 800aaee:	1a9b      	subs	r3, r3, r2
 800aaf0:	42ab      	cmp	r3, r5
 800aaf2:	dc26      	bgt.n	800ab42 <_printf_common+0x96>
 800aaf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aaf8:	1e13      	subs	r3, r2, #0
 800aafa:	6822      	ldr	r2, [r4, #0]
 800aafc:	bf18      	it	ne
 800aafe:	2301      	movne	r3, #1
 800ab00:	0692      	lsls	r2, r2, #26
 800ab02:	d42b      	bmi.n	800ab5c <_printf_common+0xb0>
 800ab04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab08:	4649      	mov	r1, r9
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	47c0      	blx	r8
 800ab0e:	3001      	adds	r0, #1
 800ab10:	d01e      	beq.n	800ab50 <_printf_common+0xa4>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	68e5      	ldr	r5, [r4, #12]
 800ab16:	6832      	ldr	r2, [r6, #0]
 800ab18:	f003 0306 	and.w	r3, r3, #6
 800ab1c:	2b04      	cmp	r3, #4
 800ab1e:	bf08      	it	eq
 800ab20:	1aad      	subeq	r5, r5, r2
 800ab22:	68a3      	ldr	r3, [r4, #8]
 800ab24:	6922      	ldr	r2, [r4, #16]
 800ab26:	bf0c      	ite	eq
 800ab28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab2c:	2500      	movne	r5, #0
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	bfc4      	itt	gt
 800ab32:	1a9b      	subgt	r3, r3, r2
 800ab34:	18ed      	addgt	r5, r5, r3
 800ab36:	2600      	movs	r6, #0
 800ab38:	341a      	adds	r4, #26
 800ab3a:	42b5      	cmp	r5, r6
 800ab3c:	d11a      	bne.n	800ab74 <_printf_common+0xc8>
 800ab3e:	2000      	movs	r0, #0
 800ab40:	e008      	b.n	800ab54 <_printf_common+0xa8>
 800ab42:	2301      	movs	r3, #1
 800ab44:	4652      	mov	r2, sl
 800ab46:	4649      	mov	r1, r9
 800ab48:	4638      	mov	r0, r7
 800ab4a:	47c0      	blx	r8
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	d103      	bne.n	800ab58 <_printf_common+0xac>
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab58:	3501      	adds	r5, #1
 800ab5a:	e7c6      	b.n	800aaea <_printf_common+0x3e>
 800ab5c:	18e1      	adds	r1, r4, r3
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	2030      	movs	r0, #48	; 0x30
 800ab62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab66:	4422      	add	r2, r4
 800ab68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab70:	3302      	adds	r3, #2
 800ab72:	e7c7      	b.n	800ab04 <_printf_common+0x58>
 800ab74:	2301      	movs	r3, #1
 800ab76:	4622      	mov	r2, r4
 800ab78:	4649      	mov	r1, r9
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	47c0      	blx	r8
 800ab7e:	3001      	adds	r0, #1
 800ab80:	d0e6      	beq.n	800ab50 <_printf_common+0xa4>
 800ab82:	3601      	adds	r6, #1
 800ab84:	e7d9      	b.n	800ab3a <_printf_common+0x8e>
	...

0800ab88 <_printf_i>:
 800ab88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab8c:	7e0f      	ldrb	r7, [r1, #24]
 800ab8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab90:	2f78      	cmp	r7, #120	; 0x78
 800ab92:	4691      	mov	r9, r2
 800ab94:	4680      	mov	r8, r0
 800ab96:	460c      	mov	r4, r1
 800ab98:	469a      	mov	sl, r3
 800ab9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab9e:	d807      	bhi.n	800abb0 <_printf_i+0x28>
 800aba0:	2f62      	cmp	r7, #98	; 0x62
 800aba2:	d80a      	bhi.n	800abba <_printf_i+0x32>
 800aba4:	2f00      	cmp	r7, #0
 800aba6:	f000 80d8 	beq.w	800ad5a <_printf_i+0x1d2>
 800abaa:	2f58      	cmp	r7, #88	; 0x58
 800abac:	f000 80a3 	beq.w	800acf6 <_printf_i+0x16e>
 800abb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abb8:	e03a      	b.n	800ac30 <_printf_i+0xa8>
 800abba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abbe:	2b15      	cmp	r3, #21
 800abc0:	d8f6      	bhi.n	800abb0 <_printf_i+0x28>
 800abc2:	a101      	add	r1, pc, #4	; (adr r1, 800abc8 <_printf_i+0x40>)
 800abc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abc8:	0800ac21 	.word	0x0800ac21
 800abcc:	0800ac35 	.word	0x0800ac35
 800abd0:	0800abb1 	.word	0x0800abb1
 800abd4:	0800abb1 	.word	0x0800abb1
 800abd8:	0800abb1 	.word	0x0800abb1
 800abdc:	0800abb1 	.word	0x0800abb1
 800abe0:	0800ac35 	.word	0x0800ac35
 800abe4:	0800abb1 	.word	0x0800abb1
 800abe8:	0800abb1 	.word	0x0800abb1
 800abec:	0800abb1 	.word	0x0800abb1
 800abf0:	0800abb1 	.word	0x0800abb1
 800abf4:	0800ad41 	.word	0x0800ad41
 800abf8:	0800ac65 	.word	0x0800ac65
 800abfc:	0800ad23 	.word	0x0800ad23
 800ac00:	0800abb1 	.word	0x0800abb1
 800ac04:	0800abb1 	.word	0x0800abb1
 800ac08:	0800ad63 	.word	0x0800ad63
 800ac0c:	0800abb1 	.word	0x0800abb1
 800ac10:	0800ac65 	.word	0x0800ac65
 800ac14:	0800abb1 	.word	0x0800abb1
 800ac18:	0800abb1 	.word	0x0800abb1
 800ac1c:	0800ad2b 	.word	0x0800ad2b
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	1d1a      	adds	r2, r3, #4
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	602a      	str	r2, [r5, #0]
 800ac28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac30:	2301      	movs	r3, #1
 800ac32:	e0a3      	b.n	800ad7c <_printf_i+0x1f4>
 800ac34:	6820      	ldr	r0, [r4, #0]
 800ac36:	6829      	ldr	r1, [r5, #0]
 800ac38:	0606      	lsls	r6, r0, #24
 800ac3a:	f101 0304 	add.w	r3, r1, #4
 800ac3e:	d50a      	bpl.n	800ac56 <_printf_i+0xce>
 800ac40:	680e      	ldr	r6, [r1, #0]
 800ac42:	602b      	str	r3, [r5, #0]
 800ac44:	2e00      	cmp	r6, #0
 800ac46:	da03      	bge.n	800ac50 <_printf_i+0xc8>
 800ac48:	232d      	movs	r3, #45	; 0x2d
 800ac4a:	4276      	negs	r6, r6
 800ac4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac50:	485e      	ldr	r0, [pc, #376]	; (800adcc <_printf_i+0x244>)
 800ac52:	230a      	movs	r3, #10
 800ac54:	e019      	b.n	800ac8a <_printf_i+0x102>
 800ac56:	680e      	ldr	r6, [r1, #0]
 800ac58:	602b      	str	r3, [r5, #0]
 800ac5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac5e:	bf18      	it	ne
 800ac60:	b236      	sxthne	r6, r6
 800ac62:	e7ef      	b.n	800ac44 <_printf_i+0xbc>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	6820      	ldr	r0, [r4, #0]
 800ac68:	1d19      	adds	r1, r3, #4
 800ac6a:	6029      	str	r1, [r5, #0]
 800ac6c:	0601      	lsls	r1, r0, #24
 800ac6e:	d501      	bpl.n	800ac74 <_printf_i+0xec>
 800ac70:	681e      	ldr	r6, [r3, #0]
 800ac72:	e002      	b.n	800ac7a <_printf_i+0xf2>
 800ac74:	0646      	lsls	r6, r0, #25
 800ac76:	d5fb      	bpl.n	800ac70 <_printf_i+0xe8>
 800ac78:	881e      	ldrh	r6, [r3, #0]
 800ac7a:	4854      	ldr	r0, [pc, #336]	; (800adcc <_printf_i+0x244>)
 800ac7c:	2f6f      	cmp	r7, #111	; 0x6f
 800ac7e:	bf0c      	ite	eq
 800ac80:	2308      	moveq	r3, #8
 800ac82:	230a      	movne	r3, #10
 800ac84:	2100      	movs	r1, #0
 800ac86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac8a:	6865      	ldr	r5, [r4, #4]
 800ac8c:	60a5      	str	r5, [r4, #8]
 800ac8e:	2d00      	cmp	r5, #0
 800ac90:	bfa2      	ittt	ge
 800ac92:	6821      	ldrge	r1, [r4, #0]
 800ac94:	f021 0104 	bicge.w	r1, r1, #4
 800ac98:	6021      	strge	r1, [r4, #0]
 800ac9a:	b90e      	cbnz	r6, 800aca0 <_printf_i+0x118>
 800ac9c:	2d00      	cmp	r5, #0
 800ac9e:	d04d      	beq.n	800ad3c <_printf_i+0x1b4>
 800aca0:	4615      	mov	r5, r2
 800aca2:	fbb6 f1f3 	udiv	r1, r6, r3
 800aca6:	fb03 6711 	mls	r7, r3, r1, r6
 800acaa:	5dc7      	ldrb	r7, [r0, r7]
 800acac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acb0:	4637      	mov	r7, r6
 800acb2:	42bb      	cmp	r3, r7
 800acb4:	460e      	mov	r6, r1
 800acb6:	d9f4      	bls.n	800aca2 <_printf_i+0x11a>
 800acb8:	2b08      	cmp	r3, #8
 800acba:	d10b      	bne.n	800acd4 <_printf_i+0x14c>
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	07de      	lsls	r6, r3, #31
 800acc0:	d508      	bpl.n	800acd4 <_printf_i+0x14c>
 800acc2:	6923      	ldr	r3, [r4, #16]
 800acc4:	6861      	ldr	r1, [r4, #4]
 800acc6:	4299      	cmp	r1, r3
 800acc8:	bfde      	ittt	le
 800acca:	2330      	movle	r3, #48	; 0x30
 800accc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800acd4:	1b52      	subs	r2, r2, r5
 800acd6:	6122      	str	r2, [r4, #16]
 800acd8:	f8cd a000 	str.w	sl, [sp]
 800acdc:	464b      	mov	r3, r9
 800acde:	aa03      	add	r2, sp, #12
 800ace0:	4621      	mov	r1, r4
 800ace2:	4640      	mov	r0, r8
 800ace4:	f7ff fee2 	bl	800aaac <_printf_common>
 800ace8:	3001      	adds	r0, #1
 800acea:	d14c      	bne.n	800ad86 <_printf_i+0x1fe>
 800acec:	f04f 30ff 	mov.w	r0, #4294967295
 800acf0:	b004      	add	sp, #16
 800acf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf6:	4835      	ldr	r0, [pc, #212]	; (800adcc <_printf_i+0x244>)
 800acf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800acfc:	6829      	ldr	r1, [r5, #0]
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad04:	6029      	str	r1, [r5, #0]
 800ad06:	061d      	lsls	r5, r3, #24
 800ad08:	d514      	bpl.n	800ad34 <_printf_i+0x1ac>
 800ad0a:	07df      	lsls	r7, r3, #31
 800ad0c:	bf44      	itt	mi
 800ad0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ad12:	6023      	strmi	r3, [r4, #0]
 800ad14:	b91e      	cbnz	r6, 800ad1e <_printf_i+0x196>
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	f023 0320 	bic.w	r3, r3, #32
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	2310      	movs	r3, #16
 800ad20:	e7b0      	b.n	800ac84 <_printf_i+0xfc>
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	f043 0320 	orr.w	r3, r3, #32
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	2378      	movs	r3, #120	; 0x78
 800ad2c:	4828      	ldr	r0, [pc, #160]	; (800add0 <_printf_i+0x248>)
 800ad2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad32:	e7e3      	b.n	800acfc <_printf_i+0x174>
 800ad34:	0659      	lsls	r1, r3, #25
 800ad36:	bf48      	it	mi
 800ad38:	b2b6      	uxthmi	r6, r6
 800ad3a:	e7e6      	b.n	800ad0a <_printf_i+0x182>
 800ad3c:	4615      	mov	r5, r2
 800ad3e:	e7bb      	b.n	800acb8 <_printf_i+0x130>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	6826      	ldr	r6, [r4, #0]
 800ad44:	6961      	ldr	r1, [r4, #20]
 800ad46:	1d18      	adds	r0, r3, #4
 800ad48:	6028      	str	r0, [r5, #0]
 800ad4a:	0635      	lsls	r5, r6, #24
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	d501      	bpl.n	800ad54 <_printf_i+0x1cc>
 800ad50:	6019      	str	r1, [r3, #0]
 800ad52:	e002      	b.n	800ad5a <_printf_i+0x1d2>
 800ad54:	0670      	lsls	r0, r6, #25
 800ad56:	d5fb      	bpl.n	800ad50 <_printf_i+0x1c8>
 800ad58:	8019      	strh	r1, [r3, #0]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	6123      	str	r3, [r4, #16]
 800ad5e:	4615      	mov	r5, r2
 800ad60:	e7ba      	b.n	800acd8 <_printf_i+0x150>
 800ad62:	682b      	ldr	r3, [r5, #0]
 800ad64:	1d1a      	adds	r2, r3, #4
 800ad66:	602a      	str	r2, [r5, #0]
 800ad68:	681d      	ldr	r5, [r3, #0]
 800ad6a:	6862      	ldr	r2, [r4, #4]
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	4628      	mov	r0, r5
 800ad70:	f7f5 fa5e 	bl	8000230 <memchr>
 800ad74:	b108      	cbz	r0, 800ad7a <_printf_i+0x1f2>
 800ad76:	1b40      	subs	r0, r0, r5
 800ad78:	6060      	str	r0, [r4, #4]
 800ad7a:	6863      	ldr	r3, [r4, #4]
 800ad7c:	6123      	str	r3, [r4, #16]
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad84:	e7a8      	b.n	800acd8 <_printf_i+0x150>
 800ad86:	6923      	ldr	r3, [r4, #16]
 800ad88:	462a      	mov	r2, r5
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	47d0      	blx	sl
 800ad90:	3001      	adds	r0, #1
 800ad92:	d0ab      	beq.n	800acec <_printf_i+0x164>
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	079b      	lsls	r3, r3, #30
 800ad98:	d413      	bmi.n	800adc2 <_printf_i+0x23a>
 800ad9a:	68e0      	ldr	r0, [r4, #12]
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	4298      	cmp	r0, r3
 800ada0:	bfb8      	it	lt
 800ada2:	4618      	movlt	r0, r3
 800ada4:	e7a4      	b.n	800acf0 <_printf_i+0x168>
 800ada6:	2301      	movs	r3, #1
 800ada8:	4632      	mov	r2, r6
 800adaa:	4649      	mov	r1, r9
 800adac:	4640      	mov	r0, r8
 800adae:	47d0      	blx	sl
 800adb0:	3001      	adds	r0, #1
 800adb2:	d09b      	beq.n	800acec <_printf_i+0x164>
 800adb4:	3501      	adds	r5, #1
 800adb6:	68e3      	ldr	r3, [r4, #12]
 800adb8:	9903      	ldr	r1, [sp, #12]
 800adba:	1a5b      	subs	r3, r3, r1
 800adbc:	42ab      	cmp	r3, r5
 800adbe:	dcf2      	bgt.n	800ada6 <_printf_i+0x21e>
 800adc0:	e7eb      	b.n	800ad9a <_printf_i+0x212>
 800adc2:	2500      	movs	r5, #0
 800adc4:	f104 0619 	add.w	r6, r4, #25
 800adc8:	e7f5      	b.n	800adb6 <_printf_i+0x22e>
 800adca:	bf00      	nop
 800adcc:	0800e08a 	.word	0x0800e08a
 800add0:	0800e09b 	.word	0x0800e09b

0800add4 <iprintf>:
 800add4:	b40f      	push	{r0, r1, r2, r3}
 800add6:	4b0a      	ldr	r3, [pc, #40]	; (800ae00 <iprintf+0x2c>)
 800add8:	b513      	push	{r0, r1, r4, lr}
 800adda:	681c      	ldr	r4, [r3, #0]
 800addc:	b124      	cbz	r4, 800ade8 <iprintf+0x14>
 800adde:	69a3      	ldr	r3, [r4, #24]
 800ade0:	b913      	cbnz	r3, 800ade8 <iprintf+0x14>
 800ade2:	4620      	mov	r0, r4
 800ade4:	f001 f91c 	bl	800c020 <__sinit>
 800ade8:	ab05      	add	r3, sp, #20
 800adea:	9a04      	ldr	r2, [sp, #16]
 800adec:	68a1      	ldr	r1, [r4, #8]
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	4620      	mov	r0, r4
 800adf2:	f001 ff59 	bl	800cca8 <_vfiprintf_r>
 800adf6:	b002      	add	sp, #8
 800adf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adfc:	b004      	add	sp, #16
 800adfe:	4770      	bx	lr
 800ae00:	20000024 	.word	0x20000024

0800ae04 <_puts_r>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	460e      	mov	r6, r1
 800ae08:	4605      	mov	r5, r0
 800ae0a:	b118      	cbz	r0, 800ae14 <_puts_r+0x10>
 800ae0c:	6983      	ldr	r3, [r0, #24]
 800ae0e:	b90b      	cbnz	r3, 800ae14 <_puts_r+0x10>
 800ae10:	f001 f906 	bl	800c020 <__sinit>
 800ae14:	69ab      	ldr	r3, [r5, #24]
 800ae16:	68ac      	ldr	r4, [r5, #8]
 800ae18:	b913      	cbnz	r3, 800ae20 <_puts_r+0x1c>
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f001 f900 	bl	800c020 <__sinit>
 800ae20:	4b2c      	ldr	r3, [pc, #176]	; (800aed4 <_puts_r+0xd0>)
 800ae22:	429c      	cmp	r4, r3
 800ae24:	d120      	bne.n	800ae68 <_puts_r+0x64>
 800ae26:	686c      	ldr	r4, [r5, #4]
 800ae28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae2a:	07db      	lsls	r3, r3, #31
 800ae2c:	d405      	bmi.n	800ae3a <_puts_r+0x36>
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	0598      	lsls	r0, r3, #22
 800ae32:	d402      	bmi.n	800ae3a <_puts_r+0x36>
 800ae34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae36:	f001 f996 	bl	800c166 <__retarget_lock_acquire_recursive>
 800ae3a:	89a3      	ldrh	r3, [r4, #12]
 800ae3c:	0719      	lsls	r1, r3, #28
 800ae3e:	d51d      	bpl.n	800ae7c <_puts_r+0x78>
 800ae40:	6923      	ldr	r3, [r4, #16]
 800ae42:	b1db      	cbz	r3, 800ae7c <_puts_r+0x78>
 800ae44:	3e01      	subs	r6, #1
 800ae46:	68a3      	ldr	r3, [r4, #8]
 800ae48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	60a3      	str	r3, [r4, #8]
 800ae50:	bb39      	cbnz	r1, 800aea2 <_puts_r+0x9e>
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	da38      	bge.n	800aec8 <_puts_r+0xc4>
 800ae56:	4622      	mov	r2, r4
 800ae58:	210a      	movs	r1, #10
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f000 f88c 	bl	800af78 <__swbuf_r>
 800ae60:	3001      	adds	r0, #1
 800ae62:	d011      	beq.n	800ae88 <_puts_r+0x84>
 800ae64:	250a      	movs	r5, #10
 800ae66:	e011      	b.n	800ae8c <_puts_r+0x88>
 800ae68:	4b1b      	ldr	r3, [pc, #108]	; (800aed8 <_puts_r+0xd4>)
 800ae6a:	429c      	cmp	r4, r3
 800ae6c:	d101      	bne.n	800ae72 <_puts_r+0x6e>
 800ae6e:	68ac      	ldr	r4, [r5, #8]
 800ae70:	e7da      	b.n	800ae28 <_puts_r+0x24>
 800ae72:	4b1a      	ldr	r3, [pc, #104]	; (800aedc <_puts_r+0xd8>)
 800ae74:	429c      	cmp	r4, r3
 800ae76:	bf08      	it	eq
 800ae78:	68ec      	ldreq	r4, [r5, #12]
 800ae7a:	e7d5      	b.n	800ae28 <_puts_r+0x24>
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f000 f8cc 	bl	800b01c <__swsetup_r>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d0dd      	beq.n	800ae44 <_puts_r+0x40>
 800ae88:	f04f 35ff 	mov.w	r5, #4294967295
 800ae8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae8e:	07da      	lsls	r2, r3, #31
 800ae90:	d405      	bmi.n	800ae9e <_puts_r+0x9a>
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	059b      	lsls	r3, r3, #22
 800ae96:	d402      	bmi.n	800ae9e <_puts_r+0x9a>
 800ae98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae9a:	f001 f965 	bl	800c168 <__retarget_lock_release_recursive>
 800ae9e:	4628      	mov	r0, r5
 800aea0:	bd70      	pop	{r4, r5, r6, pc}
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	da04      	bge.n	800aeb0 <_puts_r+0xac>
 800aea6:	69a2      	ldr	r2, [r4, #24]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	dc06      	bgt.n	800aeba <_puts_r+0xb6>
 800aeac:	290a      	cmp	r1, #10
 800aeae:	d004      	beq.n	800aeba <_puts_r+0xb6>
 800aeb0:	6823      	ldr	r3, [r4, #0]
 800aeb2:	1c5a      	adds	r2, r3, #1
 800aeb4:	6022      	str	r2, [r4, #0]
 800aeb6:	7019      	strb	r1, [r3, #0]
 800aeb8:	e7c5      	b.n	800ae46 <_puts_r+0x42>
 800aeba:	4622      	mov	r2, r4
 800aebc:	4628      	mov	r0, r5
 800aebe:	f000 f85b 	bl	800af78 <__swbuf_r>
 800aec2:	3001      	adds	r0, #1
 800aec4:	d1bf      	bne.n	800ae46 <_puts_r+0x42>
 800aec6:	e7df      	b.n	800ae88 <_puts_r+0x84>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	250a      	movs	r5, #10
 800aecc:	1c5a      	adds	r2, r3, #1
 800aece:	6022      	str	r2, [r4, #0]
 800aed0:	701d      	strb	r5, [r3, #0]
 800aed2:	e7db      	b.n	800ae8c <_puts_r+0x88>
 800aed4:	0800e15c 	.word	0x0800e15c
 800aed8:	0800e17c 	.word	0x0800e17c
 800aedc:	0800e13c 	.word	0x0800e13c

0800aee0 <puts>:
 800aee0:	4b02      	ldr	r3, [pc, #8]	; (800aeec <puts+0xc>)
 800aee2:	4601      	mov	r1, r0
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	f7ff bf8d 	b.w	800ae04 <_puts_r>
 800aeea:	bf00      	nop
 800aeec:	20000024 	.word	0x20000024

0800aef0 <_sbrk_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d06      	ldr	r5, [pc, #24]	; (800af0c <_sbrk_r+0x1c>)
 800aef4:	2300      	movs	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	602b      	str	r3, [r5, #0]
 800aefc:	f7f8 f836 	bl	8002f6c <_sbrk>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d102      	bne.n	800af0a <_sbrk_r+0x1a>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	b103      	cbz	r3, 800af0a <_sbrk_r+0x1a>
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	20000884 	.word	0x20000884

0800af10 <sniprintf>:
 800af10:	b40c      	push	{r2, r3}
 800af12:	b530      	push	{r4, r5, lr}
 800af14:	4b17      	ldr	r3, [pc, #92]	; (800af74 <sniprintf+0x64>)
 800af16:	1e0c      	subs	r4, r1, #0
 800af18:	681d      	ldr	r5, [r3, #0]
 800af1a:	b09d      	sub	sp, #116	; 0x74
 800af1c:	da08      	bge.n	800af30 <sniprintf+0x20>
 800af1e:	238b      	movs	r3, #139	; 0x8b
 800af20:	602b      	str	r3, [r5, #0]
 800af22:	f04f 30ff 	mov.w	r0, #4294967295
 800af26:	b01d      	add	sp, #116	; 0x74
 800af28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af2c:	b002      	add	sp, #8
 800af2e:	4770      	bx	lr
 800af30:	f44f 7302 	mov.w	r3, #520	; 0x208
 800af34:	f8ad 3014 	strh.w	r3, [sp, #20]
 800af38:	bf14      	ite	ne
 800af3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800af3e:	4623      	moveq	r3, r4
 800af40:	9304      	str	r3, [sp, #16]
 800af42:	9307      	str	r3, [sp, #28]
 800af44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af48:	9002      	str	r0, [sp, #8]
 800af4a:	9006      	str	r0, [sp, #24]
 800af4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800af50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800af52:	ab21      	add	r3, sp, #132	; 0x84
 800af54:	a902      	add	r1, sp, #8
 800af56:	4628      	mov	r0, r5
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	f001 fd7b 	bl	800ca54 <_svfiprintf_r>
 800af5e:	1c43      	adds	r3, r0, #1
 800af60:	bfbc      	itt	lt
 800af62:	238b      	movlt	r3, #139	; 0x8b
 800af64:	602b      	strlt	r3, [r5, #0]
 800af66:	2c00      	cmp	r4, #0
 800af68:	d0dd      	beq.n	800af26 <sniprintf+0x16>
 800af6a:	9b02      	ldr	r3, [sp, #8]
 800af6c:	2200      	movs	r2, #0
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	e7d9      	b.n	800af26 <sniprintf+0x16>
 800af72:	bf00      	nop
 800af74:	20000024 	.word	0x20000024

0800af78 <__swbuf_r>:
 800af78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7a:	460e      	mov	r6, r1
 800af7c:	4614      	mov	r4, r2
 800af7e:	4605      	mov	r5, r0
 800af80:	b118      	cbz	r0, 800af8a <__swbuf_r+0x12>
 800af82:	6983      	ldr	r3, [r0, #24]
 800af84:	b90b      	cbnz	r3, 800af8a <__swbuf_r+0x12>
 800af86:	f001 f84b 	bl	800c020 <__sinit>
 800af8a:	4b21      	ldr	r3, [pc, #132]	; (800b010 <__swbuf_r+0x98>)
 800af8c:	429c      	cmp	r4, r3
 800af8e:	d12b      	bne.n	800afe8 <__swbuf_r+0x70>
 800af90:	686c      	ldr	r4, [r5, #4]
 800af92:	69a3      	ldr	r3, [r4, #24]
 800af94:	60a3      	str	r3, [r4, #8]
 800af96:	89a3      	ldrh	r3, [r4, #12]
 800af98:	071a      	lsls	r2, r3, #28
 800af9a:	d52f      	bpl.n	800affc <__swbuf_r+0x84>
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	b36b      	cbz	r3, 800affc <__swbuf_r+0x84>
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	6820      	ldr	r0, [r4, #0]
 800afa4:	1ac0      	subs	r0, r0, r3
 800afa6:	6963      	ldr	r3, [r4, #20]
 800afa8:	b2f6      	uxtb	r6, r6
 800afaa:	4283      	cmp	r3, r0
 800afac:	4637      	mov	r7, r6
 800afae:	dc04      	bgt.n	800afba <__swbuf_r+0x42>
 800afb0:	4621      	mov	r1, r4
 800afb2:	4628      	mov	r0, r5
 800afb4:	f000 ffa0 	bl	800bef8 <_fflush_r>
 800afb8:	bb30      	cbnz	r0, 800b008 <__swbuf_r+0x90>
 800afba:	68a3      	ldr	r3, [r4, #8]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	60a3      	str	r3, [r4, #8]
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	1c5a      	adds	r2, r3, #1
 800afc4:	6022      	str	r2, [r4, #0]
 800afc6:	701e      	strb	r6, [r3, #0]
 800afc8:	6963      	ldr	r3, [r4, #20]
 800afca:	3001      	adds	r0, #1
 800afcc:	4283      	cmp	r3, r0
 800afce:	d004      	beq.n	800afda <__swbuf_r+0x62>
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	07db      	lsls	r3, r3, #31
 800afd4:	d506      	bpl.n	800afe4 <__swbuf_r+0x6c>
 800afd6:	2e0a      	cmp	r6, #10
 800afd8:	d104      	bne.n	800afe4 <__swbuf_r+0x6c>
 800afda:	4621      	mov	r1, r4
 800afdc:	4628      	mov	r0, r5
 800afde:	f000 ff8b 	bl	800bef8 <_fflush_r>
 800afe2:	b988      	cbnz	r0, 800b008 <__swbuf_r+0x90>
 800afe4:	4638      	mov	r0, r7
 800afe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe8:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <__swbuf_r+0x9c>)
 800afea:	429c      	cmp	r4, r3
 800afec:	d101      	bne.n	800aff2 <__swbuf_r+0x7a>
 800afee:	68ac      	ldr	r4, [r5, #8]
 800aff0:	e7cf      	b.n	800af92 <__swbuf_r+0x1a>
 800aff2:	4b09      	ldr	r3, [pc, #36]	; (800b018 <__swbuf_r+0xa0>)
 800aff4:	429c      	cmp	r4, r3
 800aff6:	bf08      	it	eq
 800aff8:	68ec      	ldreq	r4, [r5, #12]
 800affa:	e7ca      	b.n	800af92 <__swbuf_r+0x1a>
 800affc:	4621      	mov	r1, r4
 800affe:	4628      	mov	r0, r5
 800b000:	f000 f80c 	bl	800b01c <__swsetup_r>
 800b004:	2800      	cmp	r0, #0
 800b006:	d0cb      	beq.n	800afa0 <__swbuf_r+0x28>
 800b008:	f04f 37ff 	mov.w	r7, #4294967295
 800b00c:	e7ea      	b.n	800afe4 <__swbuf_r+0x6c>
 800b00e:	bf00      	nop
 800b010:	0800e15c 	.word	0x0800e15c
 800b014:	0800e17c 	.word	0x0800e17c
 800b018:	0800e13c 	.word	0x0800e13c

0800b01c <__swsetup_r>:
 800b01c:	4b32      	ldr	r3, [pc, #200]	; (800b0e8 <__swsetup_r+0xcc>)
 800b01e:	b570      	push	{r4, r5, r6, lr}
 800b020:	681d      	ldr	r5, [r3, #0]
 800b022:	4606      	mov	r6, r0
 800b024:	460c      	mov	r4, r1
 800b026:	b125      	cbz	r5, 800b032 <__swsetup_r+0x16>
 800b028:	69ab      	ldr	r3, [r5, #24]
 800b02a:	b913      	cbnz	r3, 800b032 <__swsetup_r+0x16>
 800b02c:	4628      	mov	r0, r5
 800b02e:	f000 fff7 	bl	800c020 <__sinit>
 800b032:	4b2e      	ldr	r3, [pc, #184]	; (800b0ec <__swsetup_r+0xd0>)
 800b034:	429c      	cmp	r4, r3
 800b036:	d10f      	bne.n	800b058 <__swsetup_r+0x3c>
 800b038:	686c      	ldr	r4, [r5, #4]
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b040:	0719      	lsls	r1, r3, #28
 800b042:	d42c      	bmi.n	800b09e <__swsetup_r+0x82>
 800b044:	06dd      	lsls	r5, r3, #27
 800b046:	d411      	bmi.n	800b06c <__swsetup_r+0x50>
 800b048:	2309      	movs	r3, #9
 800b04a:	6033      	str	r3, [r6, #0]
 800b04c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b050:	81a3      	strh	r3, [r4, #12]
 800b052:	f04f 30ff 	mov.w	r0, #4294967295
 800b056:	e03e      	b.n	800b0d6 <__swsetup_r+0xba>
 800b058:	4b25      	ldr	r3, [pc, #148]	; (800b0f0 <__swsetup_r+0xd4>)
 800b05a:	429c      	cmp	r4, r3
 800b05c:	d101      	bne.n	800b062 <__swsetup_r+0x46>
 800b05e:	68ac      	ldr	r4, [r5, #8]
 800b060:	e7eb      	b.n	800b03a <__swsetup_r+0x1e>
 800b062:	4b24      	ldr	r3, [pc, #144]	; (800b0f4 <__swsetup_r+0xd8>)
 800b064:	429c      	cmp	r4, r3
 800b066:	bf08      	it	eq
 800b068:	68ec      	ldreq	r4, [r5, #12]
 800b06a:	e7e6      	b.n	800b03a <__swsetup_r+0x1e>
 800b06c:	0758      	lsls	r0, r3, #29
 800b06e:	d512      	bpl.n	800b096 <__swsetup_r+0x7a>
 800b070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b072:	b141      	cbz	r1, 800b086 <__swsetup_r+0x6a>
 800b074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b078:	4299      	cmp	r1, r3
 800b07a:	d002      	beq.n	800b082 <__swsetup_r+0x66>
 800b07c:	4630      	mov	r0, r6
 800b07e:	f7ff f95f 	bl	800a340 <_free_r>
 800b082:	2300      	movs	r3, #0
 800b084:	6363      	str	r3, [r4, #52]	; 0x34
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b08c:	81a3      	strh	r3, [r4, #12]
 800b08e:	2300      	movs	r3, #0
 800b090:	6063      	str	r3, [r4, #4]
 800b092:	6923      	ldr	r3, [r4, #16]
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f043 0308 	orr.w	r3, r3, #8
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	6923      	ldr	r3, [r4, #16]
 800b0a0:	b94b      	cbnz	r3, 800b0b6 <__swsetup_r+0x9a>
 800b0a2:	89a3      	ldrh	r3, [r4, #12]
 800b0a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0ac:	d003      	beq.n	800b0b6 <__swsetup_r+0x9a>
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	f001 f87f 	bl	800c1b4 <__smakebuf_r>
 800b0b6:	89a0      	ldrh	r0, [r4, #12]
 800b0b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0bc:	f010 0301 	ands.w	r3, r0, #1
 800b0c0:	d00a      	beq.n	800b0d8 <__swsetup_r+0xbc>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60a3      	str	r3, [r4, #8]
 800b0c6:	6963      	ldr	r3, [r4, #20]
 800b0c8:	425b      	negs	r3, r3
 800b0ca:	61a3      	str	r3, [r4, #24]
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	b943      	cbnz	r3, 800b0e2 <__swsetup_r+0xc6>
 800b0d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0d4:	d1ba      	bne.n	800b04c <__swsetup_r+0x30>
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	0781      	lsls	r1, r0, #30
 800b0da:	bf58      	it	pl
 800b0dc:	6963      	ldrpl	r3, [r4, #20]
 800b0de:	60a3      	str	r3, [r4, #8]
 800b0e0:	e7f4      	b.n	800b0cc <__swsetup_r+0xb0>
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	e7f7      	b.n	800b0d6 <__swsetup_r+0xba>
 800b0e6:	bf00      	nop
 800b0e8:	20000024 	.word	0x20000024
 800b0ec:	0800e15c 	.word	0x0800e15c
 800b0f0:	0800e17c 	.word	0x0800e17c
 800b0f4:	0800e13c 	.word	0x0800e13c

0800b0f8 <quorem>:
 800b0f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	6903      	ldr	r3, [r0, #16]
 800b0fe:	690c      	ldr	r4, [r1, #16]
 800b100:	42a3      	cmp	r3, r4
 800b102:	4607      	mov	r7, r0
 800b104:	f2c0 8081 	blt.w	800b20a <quorem+0x112>
 800b108:	3c01      	subs	r4, #1
 800b10a:	f101 0814 	add.w	r8, r1, #20
 800b10e:	f100 0514 	add.w	r5, r0, #20
 800b112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b11c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b120:	3301      	adds	r3, #1
 800b122:	429a      	cmp	r2, r3
 800b124:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b128:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b12c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b130:	d331      	bcc.n	800b196 <quorem+0x9e>
 800b132:	f04f 0e00 	mov.w	lr, #0
 800b136:	4640      	mov	r0, r8
 800b138:	46ac      	mov	ip, r5
 800b13a:	46f2      	mov	sl, lr
 800b13c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b140:	b293      	uxth	r3, r2
 800b142:	fb06 e303 	mla	r3, r6, r3, lr
 800b146:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	ebaa 0303 	sub.w	r3, sl, r3
 800b150:	f8dc a000 	ldr.w	sl, [ip]
 800b154:	0c12      	lsrs	r2, r2, #16
 800b156:	fa13 f38a 	uxtah	r3, r3, sl
 800b15a:	fb06 e202 	mla	r2, r6, r2, lr
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	9b00      	ldr	r3, [sp, #0]
 800b162:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b166:	b292      	uxth	r2, r2
 800b168:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b16c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b170:	f8bd 3000 	ldrh.w	r3, [sp]
 800b174:	4581      	cmp	r9, r0
 800b176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b17a:	f84c 3b04 	str.w	r3, [ip], #4
 800b17e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b182:	d2db      	bcs.n	800b13c <quorem+0x44>
 800b184:	f855 300b 	ldr.w	r3, [r5, fp]
 800b188:	b92b      	cbnz	r3, 800b196 <quorem+0x9e>
 800b18a:	9b01      	ldr	r3, [sp, #4]
 800b18c:	3b04      	subs	r3, #4
 800b18e:	429d      	cmp	r5, r3
 800b190:	461a      	mov	r2, r3
 800b192:	d32e      	bcc.n	800b1f2 <quorem+0xfa>
 800b194:	613c      	str	r4, [r7, #16]
 800b196:	4638      	mov	r0, r7
 800b198:	f001 fae8 	bl	800c76c <__mcmp>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	db24      	blt.n	800b1ea <quorem+0xf2>
 800b1a0:	3601      	adds	r6, #1
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f04f 0c00 	mov.w	ip, #0
 800b1a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1ac:	f8d0 e000 	ldr.w	lr, [r0]
 800b1b0:	b293      	uxth	r3, r2
 800b1b2:	ebac 0303 	sub.w	r3, ip, r3
 800b1b6:	0c12      	lsrs	r2, r2, #16
 800b1b8:	fa13 f38e 	uxtah	r3, r3, lr
 800b1bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b1c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1ca:	45c1      	cmp	r9, r8
 800b1cc:	f840 3b04 	str.w	r3, [r0], #4
 800b1d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1d4:	d2e8      	bcs.n	800b1a8 <quorem+0xb0>
 800b1d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1de:	b922      	cbnz	r2, 800b1ea <quorem+0xf2>
 800b1e0:	3b04      	subs	r3, #4
 800b1e2:	429d      	cmp	r5, r3
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	d30a      	bcc.n	800b1fe <quorem+0x106>
 800b1e8:	613c      	str	r4, [r7, #16]
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	b003      	add	sp, #12
 800b1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f2:	6812      	ldr	r2, [r2, #0]
 800b1f4:	3b04      	subs	r3, #4
 800b1f6:	2a00      	cmp	r2, #0
 800b1f8:	d1cc      	bne.n	800b194 <quorem+0x9c>
 800b1fa:	3c01      	subs	r4, #1
 800b1fc:	e7c7      	b.n	800b18e <quorem+0x96>
 800b1fe:	6812      	ldr	r2, [r2, #0]
 800b200:	3b04      	subs	r3, #4
 800b202:	2a00      	cmp	r2, #0
 800b204:	d1f0      	bne.n	800b1e8 <quorem+0xf0>
 800b206:	3c01      	subs	r4, #1
 800b208:	e7eb      	b.n	800b1e2 <quorem+0xea>
 800b20a:	2000      	movs	r0, #0
 800b20c:	e7ee      	b.n	800b1ec <quorem+0xf4>
	...

0800b210 <_dtoa_r>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	ed2d 8b04 	vpush	{d8-d9}
 800b218:	ec57 6b10 	vmov	r6, r7, d0
 800b21c:	b093      	sub	sp, #76	; 0x4c
 800b21e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b220:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b224:	9106      	str	r1, [sp, #24]
 800b226:	ee10 aa10 	vmov	sl, s0
 800b22a:	4604      	mov	r4, r0
 800b22c:	9209      	str	r2, [sp, #36]	; 0x24
 800b22e:	930c      	str	r3, [sp, #48]	; 0x30
 800b230:	46bb      	mov	fp, r7
 800b232:	b975      	cbnz	r5, 800b252 <_dtoa_r+0x42>
 800b234:	2010      	movs	r0, #16
 800b236:	f7ff f873 	bl	800a320 <malloc>
 800b23a:	4602      	mov	r2, r0
 800b23c:	6260      	str	r0, [r4, #36]	; 0x24
 800b23e:	b920      	cbnz	r0, 800b24a <_dtoa_r+0x3a>
 800b240:	4ba7      	ldr	r3, [pc, #668]	; (800b4e0 <_dtoa_r+0x2d0>)
 800b242:	21ea      	movs	r1, #234	; 0xea
 800b244:	48a7      	ldr	r0, [pc, #668]	; (800b4e4 <_dtoa_r+0x2d4>)
 800b246:	f001 feb5 	bl	800cfb4 <__assert_func>
 800b24a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b24e:	6005      	str	r5, [r0, #0]
 800b250:	60c5      	str	r5, [r0, #12]
 800b252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b254:	6819      	ldr	r1, [r3, #0]
 800b256:	b151      	cbz	r1, 800b26e <_dtoa_r+0x5e>
 800b258:	685a      	ldr	r2, [r3, #4]
 800b25a:	604a      	str	r2, [r1, #4]
 800b25c:	2301      	movs	r3, #1
 800b25e:	4093      	lsls	r3, r2
 800b260:	608b      	str	r3, [r1, #8]
 800b262:	4620      	mov	r0, r4
 800b264:	f001 f840 	bl	800c2e8 <_Bfree>
 800b268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b26a:	2200      	movs	r2, #0
 800b26c:	601a      	str	r2, [r3, #0]
 800b26e:	1e3b      	subs	r3, r7, #0
 800b270:	bfaa      	itet	ge
 800b272:	2300      	movge	r3, #0
 800b274:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b278:	f8c8 3000 	strge.w	r3, [r8]
 800b27c:	4b9a      	ldr	r3, [pc, #616]	; (800b4e8 <_dtoa_r+0x2d8>)
 800b27e:	bfbc      	itt	lt
 800b280:	2201      	movlt	r2, #1
 800b282:	f8c8 2000 	strlt.w	r2, [r8]
 800b286:	ea33 030b 	bics.w	r3, r3, fp
 800b28a:	d11b      	bne.n	800b2c4 <_dtoa_r+0xb4>
 800b28c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b28e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b292:	6013      	str	r3, [r2, #0]
 800b294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b298:	4333      	orrs	r3, r6
 800b29a:	f000 8592 	beq.w	800bdc2 <_dtoa_r+0xbb2>
 800b29e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2a0:	b963      	cbnz	r3, 800b2bc <_dtoa_r+0xac>
 800b2a2:	4b92      	ldr	r3, [pc, #584]	; (800b4ec <_dtoa_r+0x2dc>)
 800b2a4:	e022      	b.n	800b2ec <_dtoa_r+0xdc>
 800b2a6:	4b92      	ldr	r3, [pc, #584]	; (800b4f0 <_dtoa_r+0x2e0>)
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2ae:	6013      	str	r3, [r2, #0]
 800b2b0:	9801      	ldr	r0, [sp, #4]
 800b2b2:	b013      	add	sp, #76	; 0x4c
 800b2b4:	ecbd 8b04 	vpop	{d8-d9}
 800b2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2bc:	4b8b      	ldr	r3, [pc, #556]	; (800b4ec <_dtoa_r+0x2dc>)
 800b2be:	9301      	str	r3, [sp, #4]
 800b2c0:	3303      	adds	r3, #3
 800b2c2:	e7f3      	b.n	800b2ac <_dtoa_r+0x9c>
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	4650      	mov	r0, sl
 800b2ca:	4659      	mov	r1, fp
 800b2cc:	f7f5 fc24 	bl	8000b18 <__aeabi_dcmpeq>
 800b2d0:	ec4b ab19 	vmov	d9, sl, fp
 800b2d4:	4680      	mov	r8, r0
 800b2d6:	b158      	cbz	r0, 800b2f0 <_dtoa_r+0xe0>
 800b2d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2da:	2301      	movs	r3, #1
 800b2dc:	6013      	str	r3, [r2, #0]
 800b2de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f000 856b 	beq.w	800bdbc <_dtoa_r+0xbac>
 800b2e6:	4883      	ldr	r0, [pc, #524]	; (800b4f4 <_dtoa_r+0x2e4>)
 800b2e8:	6018      	str	r0, [r3, #0]
 800b2ea:	1e43      	subs	r3, r0, #1
 800b2ec:	9301      	str	r3, [sp, #4]
 800b2ee:	e7df      	b.n	800b2b0 <_dtoa_r+0xa0>
 800b2f0:	ec4b ab10 	vmov	d0, sl, fp
 800b2f4:	aa10      	add	r2, sp, #64	; 0x40
 800b2f6:	a911      	add	r1, sp, #68	; 0x44
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f001 fadd 	bl	800c8b8 <__d2b>
 800b2fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b302:	ee08 0a10 	vmov	s16, r0
 800b306:	2d00      	cmp	r5, #0
 800b308:	f000 8084 	beq.w	800b414 <_dtoa_r+0x204>
 800b30c:	ee19 3a90 	vmov	r3, s19
 800b310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b314:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b318:	4656      	mov	r6, sl
 800b31a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b31e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b322:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b326:	4b74      	ldr	r3, [pc, #464]	; (800b4f8 <_dtoa_r+0x2e8>)
 800b328:	2200      	movs	r2, #0
 800b32a:	4630      	mov	r0, r6
 800b32c:	4639      	mov	r1, r7
 800b32e:	f7f4 ffd3 	bl	80002d8 <__aeabi_dsub>
 800b332:	a365      	add	r3, pc, #404	; (adr r3, 800b4c8 <_dtoa_r+0x2b8>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f7f5 f986 	bl	8000648 <__aeabi_dmul>
 800b33c:	a364      	add	r3, pc, #400	; (adr r3, 800b4d0 <_dtoa_r+0x2c0>)
 800b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b342:	f7f4 ffcb 	bl	80002dc <__adddf3>
 800b346:	4606      	mov	r6, r0
 800b348:	4628      	mov	r0, r5
 800b34a:	460f      	mov	r7, r1
 800b34c:	f7f5 f912 	bl	8000574 <__aeabi_i2d>
 800b350:	a361      	add	r3, pc, #388	; (adr r3, 800b4d8 <_dtoa_r+0x2c8>)
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	f7f5 f977 	bl	8000648 <__aeabi_dmul>
 800b35a:	4602      	mov	r2, r0
 800b35c:	460b      	mov	r3, r1
 800b35e:	4630      	mov	r0, r6
 800b360:	4639      	mov	r1, r7
 800b362:	f7f4 ffbb 	bl	80002dc <__adddf3>
 800b366:	4606      	mov	r6, r0
 800b368:	460f      	mov	r7, r1
 800b36a:	f7f5 fc1d 	bl	8000ba8 <__aeabi_d2iz>
 800b36e:	2200      	movs	r2, #0
 800b370:	9000      	str	r0, [sp, #0]
 800b372:	2300      	movs	r3, #0
 800b374:	4630      	mov	r0, r6
 800b376:	4639      	mov	r1, r7
 800b378:	f7f5 fbd8 	bl	8000b2c <__aeabi_dcmplt>
 800b37c:	b150      	cbz	r0, 800b394 <_dtoa_r+0x184>
 800b37e:	9800      	ldr	r0, [sp, #0]
 800b380:	f7f5 f8f8 	bl	8000574 <__aeabi_i2d>
 800b384:	4632      	mov	r2, r6
 800b386:	463b      	mov	r3, r7
 800b388:	f7f5 fbc6 	bl	8000b18 <__aeabi_dcmpeq>
 800b38c:	b910      	cbnz	r0, 800b394 <_dtoa_r+0x184>
 800b38e:	9b00      	ldr	r3, [sp, #0]
 800b390:	3b01      	subs	r3, #1
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	9b00      	ldr	r3, [sp, #0]
 800b396:	2b16      	cmp	r3, #22
 800b398:	d85a      	bhi.n	800b450 <_dtoa_r+0x240>
 800b39a:	9a00      	ldr	r2, [sp, #0]
 800b39c:	4b57      	ldr	r3, [pc, #348]	; (800b4fc <_dtoa_r+0x2ec>)
 800b39e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a6:	ec51 0b19 	vmov	r0, r1, d9
 800b3aa:	f7f5 fbbf 	bl	8000b2c <__aeabi_dcmplt>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d050      	beq.n	800b454 <_dtoa_r+0x244>
 800b3b2:	9b00      	ldr	r3, [sp, #0]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3be:	1b5d      	subs	r5, r3, r5
 800b3c0:	1e6b      	subs	r3, r5, #1
 800b3c2:	9305      	str	r3, [sp, #20]
 800b3c4:	bf45      	ittet	mi
 800b3c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b3ca:	9304      	strmi	r3, [sp, #16]
 800b3cc:	2300      	movpl	r3, #0
 800b3ce:	2300      	movmi	r3, #0
 800b3d0:	bf4c      	ite	mi
 800b3d2:	9305      	strmi	r3, [sp, #20]
 800b3d4:	9304      	strpl	r3, [sp, #16]
 800b3d6:	9b00      	ldr	r3, [sp, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	db3d      	blt.n	800b458 <_dtoa_r+0x248>
 800b3dc:	9b05      	ldr	r3, [sp, #20]
 800b3de:	9a00      	ldr	r2, [sp, #0]
 800b3e0:	920a      	str	r2, [sp, #40]	; 0x28
 800b3e2:	4413      	add	r3, r2
 800b3e4:	9305      	str	r3, [sp, #20]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	9307      	str	r3, [sp, #28]
 800b3ea:	9b06      	ldr	r3, [sp, #24]
 800b3ec:	2b09      	cmp	r3, #9
 800b3ee:	f200 8089 	bhi.w	800b504 <_dtoa_r+0x2f4>
 800b3f2:	2b05      	cmp	r3, #5
 800b3f4:	bfc4      	itt	gt
 800b3f6:	3b04      	subgt	r3, #4
 800b3f8:	9306      	strgt	r3, [sp, #24]
 800b3fa:	9b06      	ldr	r3, [sp, #24]
 800b3fc:	f1a3 0302 	sub.w	r3, r3, #2
 800b400:	bfcc      	ite	gt
 800b402:	2500      	movgt	r5, #0
 800b404:	2501      	movle	r5, #1
 800b406:	2b03      	cmp	r3, #3
 800b408:	f200 8087 	bhi.w	800b51a <_dtoa_r+0x30a>
 800b40c:	e8df f003 	tbb	[pc, r3]
 800b410:	59383a2d 	.word	0x59383a2d
 800b414:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b418:	441d      	add	r5, r3
 800b41a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b41e:	2b20      	cmp	r3, #32
 800b420:	bfc1      	itttt	gt
 800b422:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b426:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b42a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b42e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b432:	bfda      	itte	le
 800b434:	f1c3 0320 	rsble	r3, r3, #32
 800b438:	fa06 f003 	lslle.w	r0, r6, r3
 800b43c:	4318      	orrgt	r0, r3
 800b43e:	f7f5 f889 	bl	8000554 <__aeabi_ui2d>
 800b442:	2301      	movs	r3, #1
 800b444:	4606      	mov	r6, r0
 800b446:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b44a:	3d01      	subs	r5, #1
 800b44c:	930e      	str	r3, [sp, #56]	; 0x38
 800b44e:	e76a      	b.n	800b326 <_dtoa_r+0x116>
 800b450:	2301      	movs	r3, #1
 800b452:	e7b2      	b.n	800b3ba <_dtoa_r+0x1aa>
 800b454:	900b      	str	r0, [sp, #44]	; 0x2c
 800b456:	e7b1      	b.n	800b3bc <_dtoa_r+0x1ac>
 800b458:	9b04      	ldr	r3, [sp, #16]
 800b45a:	9a00      	ldr	r2, [sp, #0]
 800b45c:	1a9b      	subs	r3, r3, r2
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	4253      	negs	r3, r2
 800b462:	9307      	str	r3, [sp, #28]
 800b464:	2300      	movs	r3, #0
 800b466:	930a      	str	r3, [sp, #40]	; 0x28
 800b468:	e7bf      	b.n	800b3ea <_dtoa_r+0x1da>
 800b46a:	2300      	movs	r3, #0
 800b46c:	9308      	str	r3, [sp, #32]
 800b46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b470:	2b00      	cmp	r3, #0
 800b472:	dc55      	bgt.n	800b520 <_dtoa_r+0x310>
 800b474:	2301      	movs	r3, #1
 800b476:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b47a:	461a      	mov	r2, r3
 800b47c:	9209      	str	r2, [sp, #36]	; 0x24
 800b47e:	e00c      	b.n	800b49a <_dtoa_r+0x28a>
 800b480:	2301      	movs	r3, #1
 800b482:	e7f3      	b.n	800b46c <_dtoa_r+0x25c>
 800b484:	2300      	movs	r3, #0
 800b486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b488:	9308      	str	r3, [sp, #32]
 800b48a:	9b00      	ldr	r3, [sp, #0]
 800b48c:	4413      	add	r3, r2
 800b48e:	9302      	str	r3, [sp, #8]
 800b490:	3301      	adds	r3, #1
 800b492:	2b01      	cmp	r3, #1
 800b494:	9303      	str	r3, [sp, #12]
 800b496:	bfb8      	it	lt
 800b498:	2301      	movlt	r3, #1
 800b49a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b49c:	2200      	movs	r2, #0
 800b49e:	6042      	str	r2, [r0, #4]
 800b4a0:	2204      	movs	r2, #4
 800b4a2:	f102 0614 	add.w	r6, r2, #20
 800b4a6:	429e      	cmp	r6, r3
 800b4a8:	6841      	ldr	r1, [r0, #4]
 800b4aa:	d93d      	bls.n	800b528 <_dtoa_r+0x318>
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 fedb 	bl	800c268 <_Balloc>
 800b4b2:	9001      	str	r0, [sp, #4]
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d13b      	bne.n	800b530 <_dtoa_r+0x320>
 800b4b8:	4b11      	ldr	r3, [pc, #68]	; (800b500 <_dtoa_r+0x2f0>)
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b4c0:	e6c0      	b.n	800b244 <_dtoa_r+0x34>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e7df      	b.n	800b486 <_dtoa_r+0x276>
 800b4c6:	bf00      	nop
 800b4c8:	636f4361 	.word	0x636f4361
 800b4cc:	3fd287a7 	.word	0x3fd287a7
 800b4d0:	8b60c8b3 	.word	0x8b60c8b3
 800b4d4:	3fc68a28 	.word	0x3fc68a28
 800b4d8:	509f79fb 	.word	0x509f79fb
 800b4dc:	3fd34413 	.word	0x3fd34413
 800b4e0:	0800e0b9 	.word	0x0800e0b9
 800b4e4:	0800e0d0 	.word	0x0800e0d0
 800b4e8:	7ff00000 	.word	0x7ff00000
 800b4ec:	0800e0b5 	.word	0x0800e0b5
 800b4f0:	0800e0ac 	.word	0x0800e0ac
 800b4f4:	0800e089 	.word	0x0800e089
 800b4f8:	3ff80000 	.word	0x3ff80000
 800b4fc:	0800e220 	.word	0x0800e220
 800b500:	0800e12b 	.word	0x0800e12b
 800b504:	2501      	movs	r5, #1
 800b506:	2300      	movs	r3, #0
 800b508:	9306      	str	r3, [sp, #24]
 800b50a:	9508      	str	r5, [sp, #32]
 800b50c:	f04f 33ff 	mov.w	r3, #4294967295
 800b510:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b514:	2200      	movs	r2, #0
 800b516:	2312      	movs	r3, #18
 800b518:	e7b0      	b.n	800b47c <_dtoa_r+0x26c>
 800b51a:	2301      	movs	r3, #1
 800b51c:	9308      	str	r3, [sp, #32]
 800b51e:	e7f5      	b.n	800b50c <_dtoa_r+0x2fc>
 800b520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b522:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b526:	e7b8      	b.n	800b49a <_dtoa_r+0x28a>
 800b528:	3101      	adds	r1, #1
 800b52a:	6041      	str	r1, [r0, #4]
 800b52c:	0052      	lsls	r2, r2, #1
 800b52e:	e7b8      	b.n	800b4a2 <_dtoa_r+0x292>
 800b530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b532:	9a01      	ldr	r2, [sp, #4]
 800b534:	601a      	str	r2, [r3, #0]
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	2b0e      	cmp	r3, #14
 800b53a:	f200 809d 	bhi.w	800b678 <_dtoa_r+0x468>
 800b53e:	2d00      	cmp	r5, #0
 800b540:	f000 809a 	beq.w	800b678 <_dtoa_r+0x468>
 800b544:	9b00      	ldr	r3, [sp, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	dd32      	ble.n	800b5b0 <_dtoa_r+0x3a0>
 800b54a:	4ab7      	ldr	r2, [pc, #732]	; (800b828 <_dtoa_r+0x618>)
 800b54c:	f003 030f 	and.w	r3, r3, #15
 800b550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b554:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b558:	9b00      	ldr	r3, [sp, #0]
 800b55a:	05d8      	lsls	r0, r3, #23
 800b55c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b560:	d516      	bpl.n	800b590 <_dtoa_r+0x380>
 800b562:	4bb2      	ldr	r3, [pc, #712]	; (800b82c <_dtoa_r+0x61c>)
 800b564:	ec51 0b19 	vmov	r0, r1, d9
 800b568:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b56c:	f7f5 f996 	bl	800089c <__aeabi_ddiv>
 800b570:	f007 070f 	and.w	r7, r7, #15
 800b574:	4682      	mov	sl, r0
 800b576:	468b      	mov	fp, r1
 800b578:	2503      	movs	r5, #3
 800b57a:	4eac      	ldr	r6, [pc, #688]	; (800b82c <_dtoa_r+0x61c>)
 800b57c:	b957      	cbnz	r7, 800b594 <_dtoa_r+0x384>
 800b57e:	4642      	mov	r2, r8
 800b580:	464b      	mov	r3, r9
 800b582:	4650      	mov	r0, sl
 800b584:	4659      	mov	r1, fp
 800b586:	f7f5 f989 	bl	800089c <__aeabi_ddiv>
 800b58a:	4682      	mov	sl, r0
 800b58c:	468b      	mov	fp, r1
 800b58e:	e028      	b.n	800b5e2 <_dtoa_r+0x3d2>
 800b590:	2502      	movs	r5, #2
 800b592:	e7f2      	b.n	800b57a <_dtoa_r+0x36a>
 800b594:	07f9      	lsls	r1, r7, #31
 800b596:	d508      	bpl.n	800b5aa <_dtoa_r+0x39a>
 800b598:	4640      	mov	r0, r8
 800b59a:	4649      	mov	r1, r9
 800b59c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5a0:	f7f5 f852 	bl	8000648 <__aeabi_dmul>
 800b5a4:	3501      	adds	r5, #1
 800b5a6:	4680      	mov	r8, r0
 800b5a8:	4689      	mov	r9, r1
 800b5aa:	107f      	asrs	r7, r7, #1
 800b5ac:	3608      	adds	r6, #8
 800b5ae:	e7e5      	b.n	800b57c <_dtoa_r+0x36c>
 800b5b0:	f000 809b 	beq.w	800b6ea <_dtoa_r+0x4da>
 800b5b4:	9b00      	ldr	r3, [sp, #0]
 800b5b6:	4f9d      	ldr	r7, [pc, #628]	; (800b82c <_dtoa_r+0x61c>)
 800b5b8:	425e      	negs	r6, r3
 800b5ba:	4b9b      	ldr	r3, [pc, #620]	; (800b828 <_dtoa_r+0x618>)
 800b5bc:	f006 020f 	and.w	r2, r6, #15
 800b5c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c8:	ec51 0b19 	vmov	r0, r1, d9
 800b5cc:	f7f5 f83c 	bl	8000648 <__aeabi_dmul>
 800b5d0:	1136      	asrs	r6, r6, #4
 800b5d2:	4682      	mov	sl, r0
 800b5d4:	468b      	mov	fp, r1
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	2502      	movs	r5, #2
 800b5da:	2e00      	cmp	r6, #0
 800b5dc:	d17a      	bne.n	800b6d4 <_dtoa_r+0x4c4>
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1d3      	bne.n	800b58a <_dtoa_r+0x37a>
 800b5e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f000 8082 	beq.w	800b6ee <_dtoa_r+0x4de>
 800b5ea:	4b91      	ldr	r3, [pc, #580]	; (800b830 <_dtoa_r+0x620>)
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	4650      	mov	r0, sl
 800b5f0:	4659      	mov	r1, fp
 800b5f2:	f7f5 fa9b 	bl	8000b2c <__aeabi_dcmplt>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d079      	beq.n	800b6ee <_dtoa_r+0x4de>
 800b5fa:	9b03      	ldr	r3, [sp, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d076      	beq.n	800b6ee <_dtoa_r+0x4de>
 800b600:	9b02      	ldr	r3, [sp, #8]
 800b602:	2b00      	cmp	r3, #0
 800b604:	dd36      	ble.n	800b674 <_dtoa_r+0x464>
 800b606:	9b00      	ldr	r3, [sp, #0]
 800b608:	4650      	mov	r0, sl
 800b60a:	4659      	mov	r1, fp
 800b60c:	1e5f      	subs	r7, r3, #1
 800b60e:	2200      	movs	r2, #0
 800b610:	4b88      	ldr	r3, [pc, #544]	; (800b834 <_dtoa_r+0x624>)
 800b612:	f7f5 f819 	bl	8000648 <__aeabi_dmul>
 800b616:	9e02      	ldr	r6, [sp, #8]
 800b618:	4682      	mov	sl, r0
 800b61a:	468b      	mov	fp, r1
 800b61c:	3501      	adds	r5, #1
 800b61e:	4628      	mov	r0, r5
 800b620:	f7f4 ffa8 	bl	8000574 <__aeabi_i2d>
 800b624:	4652      	mov	r2, sl
 800b626:	465b      	mov	r3, fp
 800b628:	f7f5 f80e 	bl	8000648 <__aeabi_dmul>
 800b62c:	4b82      	ldr	r3, [pc, #520]	; (800b838 <_dtoa_r+0x628>)
 800b62e:	2200      	movs	r2, #0
 800b630:	f7f4 fe54 	bl	80002dc <__adddf3>
 800b634:	46d0      	mov	r8, sl
 800b636:	46d9      	mov	r9, fp
 800b638:	4682      	mov	sl, r0
 800b63a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b63e:	2e00      	cmp	r6, #0
 800b640:	d158      	bne.n	800b6f4 <_dtoa_r+0x4e4>
 800b642:	4b7e      	ldr	r3, [pc, #504]	; (800b83c <_dtoa_r+0x62c>)
 800b644:	2200      	movs	r2, #0
 800b646:	4640      	mov	r0, r8
 800b648:	4649      	mov	r1, r9
 800b64a:	f7f4 fe45 	bl	80002d8 <__aeabi_dsub>
 800b64e:	4652      	mov	r2, sl
 800b650:	465b      	mov	r3, fp
 800b652:	4680      	mov	r8, r0
 800b654:	4689      	mov	r9, r1
 800b656:	f7f5 fa87 	bl	8000b68 <__aeabi_dcmpgt>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	f040 8295 	bne.w	800bb8a <_dtoa_r+0x97a>
 800b660:	4652      	mov	r2, sl
 800b662:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b666:	4640      	mov	r0, r8
 800b668:	4649      	mov	r1, r9
 800b66a:	f7f5 fa5f 	bl	8000b2c <__aeabi_dcmplt>
 800b66e:	2800      	cmp	r0, #0
 800b670:	f040 8289 	bne.w	800bb86 <_dtoa_r+0x976>
 800b674:	ec5b ab19 	vmov	sl, fp, d9
 800b678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f2c0 8148 	blt.w	800b910 <_dtoa_r+0x700>
 800b680:	9a00      	ldr	r2, [sp, #0]
 800b682:	2a0e      	cmp	r2, #14
 800b684:	f300 8144 	bgt.w	800b910 <_dtoa_r+0x700>
 800b688:	4b67      	ldr	r3, [pc, #412]	; (800b828 <_dtoa_r+0x618>)
 800b68a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b68e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b694:	2b00      	cmp	r3, #0
 800b696:	f280 80d5 	bge.w	800b844 <_dtoa_r+0x634>
 800b69a:	9b03      	ldr	r3, [sp, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f300 80d1 	bgt.w	800b844 <_dtoa_r+0x634>
 800b6a2:	f040 826f 	bne.w	800bb84 <_dtoa_r+0x974>
 800b6a6:	4b65      	ldr	r3, [pc, #404]	; (800b83c <_dtoa_r+0x62c>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	4640      	mov	r0, r8
 800b6ac:	4649      	mov	r1, r9
 800b6ae:	f7f4 ffcb 	bl	8000648 <__aeabi_dmul>
 800b6b2:	4652      	mov	r2, sl
 800b6b4:	465b      	mov	r3, fp
 800b6b6:	f7f5 fa4d 	bl	8000b54 <__aeabi_dcmpge>
 800b6ba:	9e03      	ldr	r6, [sp, #12]
 800b6bc:	4637      	mov	r7, r6
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	f040 8245 	bne.w	800bb4e <_dtoa_r+0x93e>
 800b6c4:	9d01      	ldr	r5, [sp, #4]
 800b6c6:	2331      	movs	r3, #49	; 0x31
 800b6c8:	f805 3b01 	strb.w	r3, [r5], #1
 800b6cc:	9b00      	ldr	r3, [sp, #0]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	e240      	b.n	800bb56 <_dtoa_r+0x946>
 800b6d4:	07f2      	lsls	r2, r6, #31
 800b6d6:	d505      	bpl.n	800b6e4 <_dtoa_r+0x4d4>
 800b6d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6dc:	f7f4 ffb4 	bl	8000648 <__aeabi_dmul>
 800b6e0:	3501      	adds	r5, #1
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	1076      	asrs	r6, r6, #1
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	e777      	b.n	800b5da <_dtoa_r+0x3ca>
 800b6ea:	2502      	movs	r5, #2
 800b6ec:	e779      	b.n	800b5e2 <_dtoa_r+0x3d2>
 800b6ee:	9f00      	ldr	r7, [sp, #0]
 800b6f0:	9e03      	ldr	r6, [sp, #12]
 800b6f2:	e794      	b.n	800b61e <_dtoa_r+0x40e>
 800b6f4:	9901      	ldr	r1, [sp, #4]
 800b6f6:	4b4c      	ldr	r3, [pc, #304]	; (800b828 <_dtoa_r+0x618>)
 800b6f8:	4431      	add	r1, r6
 800b6fa:	910d      	str	r1, [sp, #52]	; 0x34
 800b6fc:	9908      	ldr	r1, [sp, #32]
 800b6fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b702:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b706:	2900      	cmp	r1, #0
 800b708:	d043      	beq.n	800b792 <_dtoa_r+0x582>
 800b70a:	494d      	ldr	r1, [pc, #308]	; (800b840 <_dtoa_r+0x630>)
 800b70c:	2000      	movs	r0, #0
 800b70e:	f7f5 f8c5 	bl	800089c <__aeabi_ddiv>
 800b712:	4652      	mov	r2, sl
 800b714:	465b      	mov	r3, fp
 800b716:	f7f4 fddf 	bl	80002d8 <__aeabi_dsub>
 800b71a:	9d01      	ldr	r5, [sp, #4]
 800b71c:	4682      	mov	sl, r0
 800b71e:	468b      	mov	fp, r1
 800b720:	4649      	mov	r1, r9
 800b722:	4640      	mov	r0, r8
 800b724:	f7f5 fa40 	bl	8000ba8 <__aeabi_d2iz>
 800b728:	4606      	mov	r6, r0
 800b72a:	f7f4 ff23 	bl	8000574 <__aeabi_i2d>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	4640      	mov	r0, r8
 800b734:	4649      	mov	r1, r9
 800b736:	f7f4 fdcf 	bl	80002d8 <__aeabi_dsub>
 800b73a:	3630      	adds	r6, #48	; 0x30
 800b73c:	f805 6b01 	strb.w	r6, [r5], #1
 800b740:	4652      	mov	r2, sl
 800b742:	465b      	mov	r3, fp
 800b744:	4680      	mov	r8, r0
 800b746:	4689      	mov	r9, r1
 800b748:	f7f5 f9f0 	bl	8000b2c <__aeabi_dcmplt>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d163      	bne.n	800b818 <_dtoa_r+0x608>
 800b750:	4642      	mov	r2, r8
 800b752:	464b      	mov	r3, r9
 800b754:	4936      	ldr	r1, [pc, #216]	; (800b830 <_dtoa_r+0x620>)
 800b756:	2000      	movs	r0, #0
 800b758:	f7f4 fdbe 	bl	80002d8 <__aeabi_dsub>
 800b75c:	4652      	mov	r2, sl
 800b75e:	465b      	mov	r3, fp
 800b760:	f7f5 f9e4 	bl	8000b2c <__aeabi_dcmplt>
 800b764:	2800      	cmp	r0, #0
 800b766:	f040 80b5 	bne.w	800b8d4 <_dtoa_r+0x6c4>
 800b76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b76c:	429d      	cmp	r5, r3
 800b76e:	d081      	beq.n	800b674 <_dtoa_r+0x464>
 800b770:	4b30      	ldr	r3, [pc, #192]	; (800b834 <_dtoa_r+0x624>)
 800b772:	2200      	movs	r2, #0
 800b774:	4650      	mov	r0, sl
 800b776:	4659      	mov	r1, fp
 800b778:	f7f4 ff66 	bl	8000648 <__aeabi_dmul>
 800b77c:	4b2d      	ldr	r3, [pc, #180]	; (800b834 <_dtoa_r+0x624>)
 800b77e:	4682      	mov	sl, r0
 800b780:	468b      	mov	fp, r1
 800b782:	4640      	mov	r0, r8
 800b784:	4649      	mov	r1, r9
 800b786:	2200      	movs	r2, #0
 800b788:	f7f4 ff5e 	bl	8000648 <__aeabi_dmul>
 800b78c:	4680      	mov	r8, r0
 800b78e:	4689      	mov	r9, r1
 800b790:	e7c6      	b.n	800b720 <_dtoa_r+0x510>
 800b792:	4650      	mov	r0, sl
 800b794:	4659      	mov	r1, fp
 800b796:	f7f4 ff57 	bl	8000648 <__aeabi_dmul>
 800b79a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b79c:	9d01      	ldr	r5, [sp, #4]
 800b79e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7a0:	4682      	mov	sl, r0
 800b7a2:	468b      	mov	fp, r1
 800b7a4:	4649      	mov	r1, r9
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	f7f5 f9fe 	bl	8000ba8 <__aeabi_d2iz>
 800b7ac:	4606      	mov	r6, r0
 800b7ae:	f7f4 fee1 	bl	8000574 <__aeabi_i2d>
 800b7b2:	3630      	adds	r6, #48	; 0x30
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4640      	mov	r0, r8
 800b7ba:	4649      	mov	r1, r9
 800b7bc:	f7f4 fd8c 	bl	80002d8 <__aeabi_dsub>
 800b7c0:	f805 6b01 	strb.w	r6, [r5], #1
 800b7c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7c6:	429d      	cmp	r5, r3
 800b7c8:	4680      	mov	r8, r0
 800b7ca:	4689      	mov	r9, r1
 800b7cc:	f04f 0200 	mov.w	r2, #0
 800b7d0:	d124      	bne.n	800b81c <_dtoa_r+0x60c>
 800b7d2:	4b1b      	ldr	r3, [pc, #108]	; (800b840 <_dtoa_r+0x630>)
 800b7d4:	4650      	mov	r0, sl
 800b7d6:	4659      	mov	r1, fp
 800b7d8:	f7f4 fd80 	bl	80002dc <__adddf3>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	460b      	mov	r3, r1
 800b7e0:	4640      	mov	r0, r8
 800b7e2:	4649      	mov	r1, r9
 800b7e4:	f7f5 f9c0 	bl	8000b68 <__aeabi_dcmpgt>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d173      	bne.n	800b8d4 <_dtoa_r+0x6c4>
 800b7ec:	4652      	mov	r2, sl
 800b7ee:	465b      	mov	r3, fp
 800b7f0:	4913      	ldr	r1, [pc, #76]	; (800b840 <_dtoa_r+0x630>)
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	f7f4 fd70 	bl	80002d8 <__aeabi_dsub>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	4649      	mov	r1, r9
 800b800:	f7f5 f994 	bl	8000b2c <__aeabi_dcmplt>
 800b804:	2800      	cmp	r0, #0
 800b806:	f43f af35 	beq.w	800b674 <_dtoa_r+0x464>
 800b80a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b80c:	1e6b      	subs	r3, r5, #1
 800b80e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b810:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b814:	2b30      	cmp	r3, #48	; 0x30
 800b816:	d0f8      	beq.n	800b80a <_dtoa_r+0x5fa>
 800b818:	9700      	str	r7, [sp, #0]
 800b81a:	e049      	b.n	800b8b0 <_dtoa_r+0x6a0>
 800b81c:	4b05      	ldr	r3, [pc, #20]	; (800b834 <_dtoa_r+0x624>)
 800b81e:	f7f4 ff13 	bl	8000648 <__aeabi_dmul>
 800b822:	4680      	mov	r8, r0
 800b824:	4689      	mov	r9, r1
 800b826:	e7bd      	b.n	800b7a4 <_dtoa_r+0x594>
 800b828:	0800e220 	.word	0x0800e220
 800b82c:	0800e1f8 	.word	0x0800e1f8
 800b830:	3ff00000 	.word	0x3ff00000
 800b834:	40240000 	.word	0x40240000
 800b838:	401c0000 	.word	0x401c0000
 800b83c:	40140000 	.word	0x40140000
 800b840:	3fe00000 	.word	0x3fe00000
 800b844:	9d01      	ldr	r5, [sp, #4]
 800b846:	4656      	mov	r6, sl
 800b848:	465f      	mov	r7, fp
 800b84a:	4642      	mov	r2, r8
 800b84c:	464b      	mov	r3, r9
 800b84e:	4630      	mov	r0, r6
 800b850:	4639      	mov	r1, r7
 800b852:	f7f5 f823 	bl	800089c <__aeabi_ddiv>
 800b856:	f7f5 f9a7 	bl	8000ba8 <__aeabi_d2iz>
 800b85a:	4682      	mov	sl, r0
 800b85c:	f7f4 fe8a 	bl	8000574 <__aeabi_i2d>
 800b860:	4642      	mov	r2, r8
 800b862:	464b      	mov	r3, r9
 800b864:	f7f4 fef0 	bl	8000648 <__aeabi_dmul>
 800b868:	4602      	mov	r2, r0
 800b86a:	460b      	mov	r3, r1
 800b86c:	4630      	mov	r0, r6
 800b86e:	4639      	mov	r1, r7
 800b870:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b874:	f7f4 fd30 	bl	80002d8 <__aeabi_dsub>
 800b878:	f805 6b01 	strb.w	r6, [r5], #1
 800b87c:	9e01      	ldr	r6, [sp, #4]
 800b87e:	9f03      	ldr	r7, [sp, #12]
 800b880:	1bae      	subs	r6, r5, r6
 800b882:	42b7      	cmp	r7, r6
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	d135      	bne.n	800b8f6 <_dtoa_r+0x6e6>
 800b88a:	f7f4 fd27 	bl	80002dc <__adddf3>
 800b88e:	4642      	mov	r2, r8
 800b890:	464b      	mov	r3, r9
 800b892:	4606      	mov	r6, r0
 800b894:	460f      	mov	r7, r1
 800b896:	f7f5 f967 	bl	8000b68 <__aeabi_dcmpgt>
 800b89a:	b9d0      	cbnz	r0, 800b8d2 <_dtoa_r+0x6c2>
 800b89c:	4642      	mov	r2, r8
 800b89e:	464b      	mov	r3, r9
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	4639      	mov	r1, r7
 800b8a4:	f7f5 f938 	bl	8000b18 <__aeabi_dcmpeq>
 800b8a8:	b110      	cbz	r0, 800b8b0 <_dtoa_r+0x6a0>
 800b8aa:	f01a 0f01 	tst.w	sl, #1
 800b8ae:	d110      	bne.n	800b8d2 <_dtoa_r+0x6c2>
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	ee18 1a10 	vmov	r1, s16
 800b8b6:	f000 fd17 	bl	800c2e8 <_Bfree>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	9800      	ldr	r0, [sp, #0]
 800b8be:	702b      	strb	r3, [r5, #0]
 800b8c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8c2:	3001      	adds	r0, #1
 800b8c4:	6018      	str	r0, [r3, #0]
 800b8c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f43f acf1 	beq.w	800b2b0 <_dtoa_r+0xa0>
 800b8ce:	601d      	str	r5, [r3, #0]
 800b8d0:	e4ee      	b.n	800b2b0 <_dtoa_r+0xa0>
 800b8d2:	9f00      	ldr	r7, [sp, #0]
 800b8d4:	462b      	mov	r3, r5
 800b8d6:	461d      	mov	r5, r3
 800b8d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8dc:	2a39      	cmp	r2, #57	; 0x39
 800b8de:	d106      	bne.n	800b8ee <_dtoa_r+0x6de>
 800b8e0:	9a01      	ldr	r2, [sp, #4]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d1f7      	bne.n	800b8d6 <_dtoa_r+0x6c6>
 800b8e6:	9901      	ldr	r1, [sp, #4]
 800b8e8:	2230      	movs	r2, #48	; 0x30
 800b8ea:	3701      	adds	r7, #1
 800b8ec:	700a      	strb	r2, [r1, #0]
 800b8ee:	781a      	ldrb	r2, [r3, #0]
 800b8f0:	3201      	adds	r2, #1
 800b8f2:	701a      	strb	r2, [r3, #0]
 800b8f4:	e790      	b.n	800b818 <_dtoa_r+0x608>
 800b8f6:	4ba6      	ldr	r3, [pc, #664]	; (800bb90 <_dtoa_r+0x980>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f7f4 fea5 	bl	8000648 <__aeabi_dmul>
 800b8fe:	2200      	movs	r2, #0
 800b900:	2300      	movs	r3, #0
 800b902:	4606      	mov	r6, r0
 800b904:	460f      	mov	r7, r1
 800b906:	f7f5 f907 	bl	8000b18 <__aeabi_dcmpeq>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d09d      	beq.n	800b84a <_dtoa_r+0x63a>
 800b90e:	e7cf      	b.n	800b8b0 <_dtoa_r+0x6a0>
 800b910:	9a08      	ldr	r2, [sp, #32]
 800b912:	2a00      	cmp	r2, #0
 800b914:	f000 80d7 	beq.w	800bac6 <_dtoa_r+0x8b6>
 800b918:	9a06      	ldr	r2, [sp, #24]
 800b91a:	2a01      	cmp	r2, #1
 800b91c:	f300 80ba 	bgt.w	800ba94 <_dtoa_r+0x884>
 800b920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b922:	2a00      	cmp	r2, #0
 800b924:	f000 80b2 	beq.w	800ba8c <_dtoa_r+0x87c>
 800b928:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b92c:	9e07      	ldr	r6, [sp, #28]
 800b92e:	9d04      	ldr	r5, [sp, #16]
 800b930:	9a04      	ldr	r2, [sp, #16]
 800b932:	441a      	add	r2, r3
 800b934:	9204      	str	r2, [sp, #16]
 800b936:	9a05      	ldr	r2, [sp, #20]
 800b938:	2101      	movs	r1, #1
 800b93a:	441a      	add	r2, r3
 800b93c:	4620      	mov	r0, r4
 800b93e:	9205      	str	r2, [sp, #20]
 800b940:	f000 fd8a 	bl	800c458 <__i2b>
 800b944:	4607      	mov	r7, r0
 800b946:	2d00      	cmp	r5, #0
 800b948:	dd0c      	ble.n	800b964 <_dtoa_r+0x754>
 800b94a:	9b05      	ldr	r3, [sp, #20]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	dd09      	ble.n	800b964 <_dtoa_r+0x754>
 800b950:	42ab      	cmp	r3, r5
 800b952:	9a04      	ldr	r2, [sp, #16]
 800b954:	bfa8      	it	ge
 800b956:	462b      	movge	r3, r5
 800b958:	1ad2      	subs	r2, r2, r3
 800b95a:	9204      	str	r2, [sp, #16]
 800b95c:	9a05      	ldr	r2, [sp, #20]
 800b95e:	1aed      	subs	r5, r5, r3
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	9305      	str	r3, [sp, #20]
 800b964:	9b07      	ldr	r3, [sp, #28]
 800b966:	b31b      	cbz	r3, 800b9b0 <_dtoa_r+0x7a0>
 800b968:	9b08      	ldr	r3, [sp, #32]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 80af 	beq.w	800bace <_dtoa_r+0x8be>
 800b970:	2e00      	cmp	r6, #0
 800b972:	dd13      	ble.n	800b99c <_dtoa_r+0x78c>
 800b974:	4639      	mov	r1, r7
 800b976:	4632      	mov	r2, r6
 800b978:	4620      	mov	r0, r4
 800b97a:	f000 fe2d 	bl	800c5d8 <__pow5mult>
 800b97e:	ee18 2a10 	vmov	r2, s16
 800b982:	4601      	mov	r1, r0
 800b984:	4607      	mov	r7, r0
 800b986:	4620      	mov	r0, r4
 800b988:	f000 fd7c 	bl	800c484 <__multiply>
 800b98c:	ee18 1a10 	vmov	r1, s16
 800b990:	4680      	mov	r8, r0
 800b992:	4620      	mov	r0, r4
 800b994:	f000 fca8 	bl	800c2e8 <_Bfree>
 800b998:	ee08 8a10 	vmov	s16, r8
 800b99c:	9b07      	ldr	r3, [sp, #28]
 800b99e:	1b9a      	subs	r2, r3, r6
 800b9a0:	d006      	beq.n	800b9b0 <_dtoa_r+0x7a0>
 800b9a2:	ee18 1a10 	vmov	r1, s16
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f000 fe16 	bl	800c5d8 <__pow5mult>
 800b9ac:	ee08 0a10 	vmov	s16, r0
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f000 fd50 	bl	800c458 <__i2b>
 800b9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	4606      	mov	r6, r0
 800b9be:	f340 8088 	ble.w	800bad2 <_dtoa_r+0x8c2>
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	4601      	mov	r1, r0
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f000 fe06 	bl	800c5d8 <__pow5mult>
 800b9cc:	9b06      	ldr	r3, [sp, #24]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	4606      	mov	r6, r0
 800b9d2:	f340 8081 	ble.w	800bad8 <_dtoa_r+0x8c8>
 800b9d6:	f04f 0800 	mov.w	r8, #0
 800b9da:	6933      	ldr	r3, [r6, #16]
 800b9dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b9e0:	6918      	ldr	r0, [r3, #16]
 800b9e2:	f000 fce9 	bl	800c3b8 <__hi0bits>
 800b9e6:	f1c0 0020 	rsb	r0, r0, #32
 800b9ea:	9b05      	ldr	r3, [sp, #20]
 800b9ec:	4418      	add	r0, r3
 800b9ee:	f010 001f 	ands.w	r0, r0, #31
 800b9f2:	f000 8092 	beq.w	800bb1a <_dtoa_r+0x90a>
 800b9f6:	f1c0 0320 	rsb	r3, r0, #32
 800b9fa:	2b04      	cmp	r3, #4
 800b9fc:	f340 808a 	ble.w	800bb14 <_dtoa_r+0x904>
 800ba00:	f1c0 001c 	rsb	r0, r0, #28
 800ba04:	9b04      	ldr	r3, [sp, #16]
 800ba06:	4403      	add	r3, r0
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	9b05      	ldr	r3, [sp, #20]
 800ba0c:	4403      	add	r3, r0
 800ba0e:	4405      	add	r5, r0
 800ba10:	9305      	str	r3, [sp, #20]
 800ba12:	9b04      	ldr	r3, [sp, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	dd07      	ble.n	800ba28 <_dtoa_r+0x818>
 800ba18:	ee18 1a10 	vmov	r1, s16
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f000 fe34 	bl	800c68c <__lshift>
 800ba24:	ee08 0a10 	vmov	s16, r0
 800ba28:	9b05      	ldr	r3, [sp, #20]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	dd05      	ble.n	800ba3a <_dtoa_r+0x82a>
 800ba2e:	4631      	mov	r1, r6
 800ba30:	461a      	mov	r2, r3
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 fe2a 	bl	800c68c <__lshift>
 800ba38:	4606      	mov	r6, r0
 800ba3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d06e      	beq.n	800bb1e <_dtoa_r+0x90e>
 800ba40:	ee18 0a10 	vmov	r0, s16
 800ba44:	4631      	mov	r1, r6
 800ba46:	f000 fe91 	bl	800c76c <__mcmp>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	da67      	bge.n	800bb1e <_dtoa_r+0x90e>
 800ba4e:	9b00      	ldr	r3, [sp, #0]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	ee18 1a10 	vmov	r1, s16
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	220a      	movs	r2, #10
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f000 fc65 	bl	800c32c <__multadd>
 800ba62:	9b08      	ldr	r3, [sp, #32]
 800ba64:	ee08 0a10 	vmov	s16, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f000 81b1 	beq.w	800bdd0 <_dtoa_r+0xbc0>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	4639      	mov	r1, r7
 800ba72:	220a      	movs	r2, #10
 800ba74:	4620      	mov	r0, r4
 800ba76:	f000 fc59 	bl	800c32c <__multadd>
 800ba7a:	9b02      	ldr	r3, [sp, #8]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	4607      	mov	r7, r0
 800ba80:	f300 808e 	bgt.w	800bba0 <_dtoa_r+0x990>
 800ba84:	9b06      	ldr	r3, [sp, #24]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	dc51      	bgt.n	800bb2e <_dtoa_r+0x91e>
 800ba8a:	e089      	b.n	800bba0 <_dtoa_r+0x990>
 800ba8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba92:	e74b      	b.n	800b92c <_dtoa_r+0x71c>
 800ba94:	9b03      	ldr	r3, [sp, #12]
 800ba96:	1e5e      	subs	r6, r3, #1
 800ba98:	9b07      	ldr	r3, [sp, #28]
 800ba9a:	42b3      	cmp	r3, r6
 800ba9c:	bfbf      	itttt	lt
 800ba9e:	9b07      	ldrlt	r3, [sp, #28]
 800baa0:	9607      	strlt	r6, [sp, #28]
 800baa2:	1af2      	sublt	r2, r6, r3
 800baa4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800baa6:	bfb6      	itet	lt
 800baa8:	189b      	addlt	r3, r3, r2
 800baaa:	1b9e      	subge	r6, r3, r6
 800baac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800baae:	9b03      	ldr	r3, [sp, #12]
 800bab0:	bfb8      	it	lt
 800bab2:	2600      	movlt	r6, #0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	bfb7      	itett	lt
 800bab8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800babc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bac0:	1a9d      	sublt	r5, r3, r2
 800bac2:	2300      	movlt	r3, #0
 800bac4:	e734      	b.n	800b930 <_dtoa_r+0x720>
 800bac6:	9e07      	ldr	r6, [sp, #28]
 800bac8:	9d04      	ldr	r5, [sp, #16]
 800baca:	9f08      	ldr	r7, [sp, #32]
 800bacc:	e73b      	b.n	800b946 <_dtoa_r+0x736>
 800bace:	9a07      	ldr	r2, [sp, #28]
 800bad0:	e767      	b.n	800b9a2 <_dtoa_r+0x792>
 800bad2:	9b06      	ldr	r3, [sp, #24]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	dc18      	bgt.n	800bb0a <_dtoa_r+0x8fa>
 800bad8:	f1ba 0f00 	cmp.w	sl, #0
 800badc:	d115      	bne.n	800bb0a <_dtoa_r+0x8fa>
 800bade:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bae2:	b993      	cbnz	r3, 800bb0a <_dtoa_r+0x8fa>
 800bae4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bae8:	0d1b      	lsrs	r3, r3, #20
 800baea:	051b      	lsls	r3, r3, #20
 800baec:	b183      	cbz	r3, 800bb10 <_dtoa_r+0x900>
 800baee:	9b04      	ldr	r3, [sp, #16]
 800baf0:	3301      	adds	r3, #1
 800baf2:	9304      	str	r3, [sp, #16]
 800baf4:	9b05      	ldr	r3, [sp, #20]
 800baf6:	3301      	adds	r3, #1
 800baf8:	9305      	str	r3, [sp, #20]
 800bafa:	f04f 0801 	mov.w	r8, #1
 800bafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f47f af6a 	bne.w	800b9da <_dtoa_r+0x7ca>
 800bb06:	2001      	movs	r0, #1
 800bb08:	e76f      	b.n	800b9ea <_dtoa_r+0x7da>
 800bb0a:	f04f 0800 	mov.w	r8, #0
 800bb0e:	e7f6      	b.n	800bafe <_dtoa_r+0x8ee>
 800bb10:	4698      	mov	r8, r3
 800bb12:	e7f4      	b.n	800bafe <_dtoa_r+0x8ee>
 800bb14:	f43f af7d 	beq.w	800ba12 <_dtoa_r+0x802>
 800bb18:	4618      	mov	r0, r3
 800bb1a:	301c      	adds	r0, #28
 800bb1c:	e772      	b.n	800ba04 <_dtoa_r+0x7f4>
 800bb1e:	9b03      	ldr	r3, [sp, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	dc37      	bgt.n	800bb94 <_dtoa_r+0x984>
 800bb24:	9b06      	ldr	r3, [sp, #24]
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	dd34      	ble.n	800bb94 <_dtoa_r+0x984>
 800bb2a:	9b03      	ldr	r3, [sp, #12]
 800bb2c:	9302      	str	r3, [sp, #8]
 800bb2e:	9b02      	ldr	r3, [sp, #8]
 800bb30:	b96b      	cbnz	r3, 800bb4e <_dtoa_r+0x93e>
 800bb32:	4631      	mov	r1, r6
 800bb34:	2205      	movs	r2, #5
 800bb36:	4620      	mov	r0, r4
 800bb38:	f000 fbf8 	bl	800c32c <__multadd>
 800bb3c:	4601      	mov	r1, r0
 800bb3e:	4606      	mov	r6, r0
 800bb40:	ee18 0a10 	vmov	r0, s16
 800bb44:	f000 fe12 	bl	800c76c <__mcmp>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	f73f adbb 	bgt.w	800b6c4 <_dtoa_r+0x4b4>
 800bb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb50:	9d01      	ldr	r5, [sp, #4]
 800bb52:	43db      	mvns	r3, r3
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	f04f 0800 	mov.w	r8, #0
 800bb5a:	4631      	mov	r1, r6
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f000 fbc3 	bl	800c2e8 <_Bfree>
 800bb62:	2f00      	cmp	r7, #0
 800bb64:	f43f aea4 	beq.w	800b8b0 <_dtoa_r+0x6a0>
 800bb68:	f1b8 0f00 	cmp.w	r8, #0
 800bb6c:	d005      	beq.n	800bb7a <_dtoa_r+0x96a>
 800bb6e:	45b8      	cmp	r8, r7
 800bb70:	d003      	beq.n	800bb7a <_dtoa_r+0x96a>
 800bb72:	4641      	mov	r1, r8
 800bb74:	4620      	mov	r0, r4
 800bb76:	f000 fbb7 	bl	800c2e8 <_Bfree>
 800bb7a:	4639      	mov	r1, r7
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 fbb3 	bl	800c2e8 <_Bfree>
 800bb82:	e695      	b.n	800b8b0 <_dtoa_r+0x6a0>
 800bb84:	2600      	movs	r6, #0
 800bb86:	4637      	mov	r7, r6
 800bb88:	e7e1      	b.n	800bb4e <_dtoa_r+0x93e>
 800bb8a:	9700      	str	r7, [sp, #0]
 800bb8c:	4637      	mov	r7, r6
 800bb8e:	e599      	b.n	800b6c4 <_dtoa_r+0x4b4>
 800bb90:	40240000 	.word	0x40240000
 800bb94:	9b08      	ldr	r3, [sp, #32]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f000 80ca 	beq.w	800bd30 <_dtoa_r+0xb20>
 800bb9c:	9b03      	ldr	r3, [sp, #12]
 800bb9e:	9302      	str	r3, [sp, #8]
 800bba0:	2d00      	cmp	r5, #0
 800bba2:	dd05      	ble.n	800bbb0 <_dtoa_r+0x9a0>
 800bba4:	4639      	mov	r1, r7
 800bba6:	462a      	mov	r2, r5
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f000 fd6f 	bl	800c68c <__lshift>
 800bbae:	4607      	mov	r7, r0
 800bbb0:	f1b8 0f00 	cmp.w	r8, #0
 800bbb4:	d05b      	beq.n	800bc6e <_dtoa_r+0xa5e>
 800bbb6:	6879      	ldr	r1, [r7, #4]
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f000 fb55 	bl	800c268 <_Balloc>
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	b928      	cbnz	r0, 800bbce <_dtoa_r+0x9be>
 800bbc2:	4b87      	ldr	r3, [pc, #540]	; (800bde0 <_dtoa_r+0xbd0>)
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bbca:	f7ff bb3b 	b.w	800b244 <_dtoa_r+0x34>
 800bbce:	693a      	ldr	r2, [r7, #16]
 800bbd0:	3202      	adds	r2, #2
 800bbd2:	0092      	lsls	r2, r2, #2
 800bbd4:	f107 010c 	add.w	r1, r7, #12
 800bbd8:	300c      	adds	r0, #12
 800bbda:	f000 fb2b 	bl	800c234 <memcpy>
 800bbde:	2201      	movs	r2, #1
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f000 fd52 	bl	800c68c <__lshift>
 800bbe8:	9b01      	ldr	r3, [sp, #4]
 800bbea:	f103 0901 	add.w	r9, r3, #1
 800bbee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	9305      	str	r3, [sp, #20]
 800bbf6:	f00a 0301 	and.w	r3, sl, #1
 800bbfa:	46b8      	mov	r8, r7
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	4607      	mov	r7, r0
 800bc00:	4631      	mov	r1, r6
 800bc02:	ee18 0a10 	vmov	r0, s16
 800bc06:	f7ff fa77 	bl	800b0f8 <quorem>
 800bc0a:	4641      	mov	r1, r8
 800bc0c:	9002      	str	r0, [sp, #8]
 800bc0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc12:	ee18 0a10 	vmov	r0, s16
 800bc16:	f000 fda9 	bl	800c76c <__mcmp>
 800bc1a:	463a      	mov	r2, r7
 800bc1c:	9003      	str	r0, [sp, #12]
 800bc1e:	4631      	mov	r1, r6
 800bc20:	4620      	mov	r0, r4
 800bc22:	f000 fdbf 	bl	800c7a4 <__mdiff>
 800bc26:	68c2      	ldr	r2, [r0, #12]
 800bc28:	f109 3bff 	add.w	fp, r9, #4294967295
 800bc2c:	4605      	mov	r5, r0
 800bc2e:	bb02      	cbnz	r2, 800bc72 <_dtoa_r+0xa62>
 800bc30:	4601      	mov	r1, r0
 800bc32:	ee18 0a10 	vmov	r0, s16
 800bc36:	f000 fd99 	bl	800c76c <__mcmp>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	4620      	mov	r0, r4
 800bc40:	9207      	str	r2, [sp, #28]
 800bc42:	f000 fb51 	bl	800c2e8 <_Bfree>
 800bc46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bc4a:	ea43 0102 	orr.w	r1, r3, r2
 800bc4e:	9b04      	ldr	r3, [sp, #16]
 800bc50:	430b      	orrs	r3, r1
 800bc52:	464d      	mov	r5, r9
 800bc54:	d10f      	bne.n	800bc76 <_dtoa_r+0xa66>
 800bc56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc5a:	d02a      	beq.n	800bcb2 <_dtoa_r+0xaa2>
 800bc5c:	9b03      	ldr	r3, [sp, #12]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	dd02      	ble.n	800bc68 <_dtoa_r+0xa58>
 800bc62:	9b02      	ldr	r3, [sp, #8]
 800bc64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bc68:	f88b a000 	strb.w	sl, [fp]
 800bc6c:	e775      	b.n	800bb5a <_dtoa_r+0x94a>
 800bc6e:	4638      	mov	r0, r7
 800bc70:	e7ba      	b.n	800bbe8 <_dtoa_r+0x9d8>
 800bc72:	2201      	movs	r2, #1
 800bc74:	e7e2      	b.n	800bc3c <_dtoa_r+0xa2c>
 800bc76:	9b03      	ldr	r3, [sp, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	db04      	blt.n	800bc86 <_dtoa_r+0xa76>
 800bc7c:	9906      	ldr	r1, [sp, #24]
 800bc7e:	430b      	orrs	r3, r1
 800bc80:	9904      	ldr	r1, [sp, #16]
 800bc82:	430b      	orrs	r3, r1
 800bc84:	d122      	bne.n	800bccc <_dtoa_r+0xabc>
 800bc86:	2a00      	cmp	r2, #0
 800bc88:	ddee      	ble.n	800bc68 <_dtoa_r+0xa58>
 800bc8a:	ee18 1a10 	vmov	r1, s16
 800bc8e:	2201      	movs	r2, #1
 800bc90:	4620      	mov	r0, r4
 800bc92:	f000 fcfb 	bl	800c68c <__lshift>
 800bc96:	4631      	mov	r1, r6
 800bc98:	ee08 0a10 	vmov	s16, r0
 800bc9c:	f000 fd66 	bl	800c76c <__mcmp>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	dc03      	bgt.n	800bcac <_dtoa_r+0xa9c>
 800bca4:	d1e0      	bne.n	800bc68 <_dtoa_r+0xa58>
 800bca6:	f01a 0f01 	tst.w	sl, #1
 800bcaa:	d0dd      	beq.n	800bc68 <_dtoa_r+0xa58>
 800bcac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcb0:	d1d7      	bne.n	800bc62 <_dtoa_r+0xa52>
 800bcb2:	2339      	movs	r3, #57	; 0x39
 800bcb4:	f88b 3000 	strb.w	r3, [fp]
 800bcb8:	462b      	mov	r3, r5
 800bcba:	461d      	mov	r5, r3
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcc2:	2a39      	cmp	r2, #57	; 0x39
 800bcc4:	d071      	beq.n	800bdaa <_dtoa_r+0xb9a>
 800bcc6:	3201      	adds	r2, #1
 800bcc8:	701a      	strb	r2, [r3, #0]
 800bcca:	e746      	b.n	800bb5a <_dtoa_r+0x94a>
 800bccc:	2a00      	cmp	r2, #0
 800bcce:	dd07      	ble.n	800bce0 <_dtoa_r+0xad0>
 800bcd0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcd4:	d0ed      	beq.n	800bcb2 <_dtoa_r+0xaa2>
 800bcd6:	f10a 0301 	add.w	r3, sl, #1
 800bcda:	f88b 3000 	strb.w	r3, [fp]
 800bcde:	e73c      	b.n	800bb5a <_dtoa_r+0x94a>
 800bce0:	9b05      	ldr	r3, [sp, #20]
 800bce2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bce6:	4599      	cmp	r9, r3
 800bce8:	d047      	beq.n	800bd7a <_dtoa_r+0xb6a>
 800bcea:	ee18 1a10 	vmov	r1, s16
 800bcee:	2300      	movs	r3, #0
 800bcf0:	220a      	movs	r2, #10
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f000 fb1a 	bl	800c32c <__multadd>
 800bcf8:	45b8      	cmp	r8, r7
 800bcfa:	ee08 0a10 	vmov	s16, r0
 800bcfe:	f04f 0300 	mov.w	r3, #0
 800bd02:	f04f 020a 	mov.w	r2, #10
 800bd06:	4641      	mov	r1, r8
 800bd08:	4620      	mov	r0, r4
 800bd0a:	d106      	bne.n	800bd1a <_dtoa_r+0xb0a>
 800bd0c:	f000 fb0e 	bl	800c32c <__multadd>
 800bd10:	4680      	mov	r8, r0
 800bd12:	4607      	mov	r7, r0
 800bd14:	f109 0901 	add.w	r9, r9, #1
 800bd18:	e772      	b.n	800bc00 <_dtoa_r+0x9f0>
 800bd1a:	f000 fb07 	bl	800c32c <__multadd>
 800bd1e:	4639      	mov	r1, r7
 800bd20:	4680      	mov	r8, r0
 800bd22:	2300      	movs	r3, #0
 800bd24:	220a      	movs	r2, #10
 800bd26:	4620      	mov	r0, r4
 800bd28:	f000 fb00 	bl	800c32c <__multadd>
 800bd2c:	4607      	mov	r7, r0
 800bd2e:	e7f1      	b.n	800bd14 <_dtoa_r+0xb04>
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	9302      	str	r3, [sp, #8]
 800bd34:	9d01      	ldr	r5, [sp, #4]
 800bd36:	ee18 0a10 	vmov	r0, s16
 800bd3a:	4631      	mov	r1, r6
 800bd3c:	f7ff f9dc 	bl	800b0f8 <quorem>
 800bd40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd44:	9b01      	ldr	r3, [sp, #4]
 800bd46:	f805 ab01 	strb.w	sl, [r5], #1
 800bd4a:	1aea      	subs	r2, r5, r3
 800bd4c:	9b02      	ldr	r3, [sp, #8]
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	dd09      	ble.n	800bd66 <_dtoa_r+0xb56>
 800bd52:	ee18 1a10 	vmov	r1, s16
 800bd56:	2300      	movs	r3, #0
 800bd58:	220a      	movs	r2, #10
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f000 fae6 	bl	800c32c <__multadd>
 800bd60:	ee08 0a10 	vmov	s16, r0
 800bd64:	e7e7      	b.n	800bd36 <_dtoa_r+0xb26>
 800bd66:	9b02      	ldr	r3, [sp, #8]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	bfc8      	it	gt
 800bd6c:	461d      	movgt	r5, r3
 800bd6e:	9b01      	ldr	r3, [sp, #4]
 800bd70:	bfd8      	it	le
 800bd72:	2501      	movle	r5, #1
 800bd74:	441d      	add	r5, r3
 800bd76:	f04f 0800 	mov.w	r8, #0
 800bd7a:	ee18 1a10 	vmov	r1, s16
 800bd7e:	2201      	movs	r2, #1
 800bd80:	4620      	mov	r0, r4
 800bd82:	f000 fc83 	bl	800c68c <__lshift>
 800bd86:	4631      	mov	r1, r6
 800bd88:	ee08 0a10 	vmov	s16, r0
 800bd8c:	f000 fcee 	bl	800c76c <__mcmp>
 800bd90:	2800      	cmp	r0, #0
 800bd92:	dc91      	bgt.n	800bcb8 <_dtoa_r+0xaa8>
 800bd94:	d102      	bne.n	800bd9c <_dtoa_r+0xb8c>
 800bd96:	f01a 0f01 	tst.w	sl, #1
 800bd9a:	d18d      	bne.n	800bcb8 <_dtoa_r+0xaa8>
 800bd9c:	462b      	mov	r3, r5
 800bd9e:	461d      	mov	r5, r3
 800bda0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bda4:	2a30      	cmp	r2, #48	; 0x30
 800bda6:	d0fa      	beq.n	800bd9e <_dtoa_r+0xb8e>
 800bda8:	e6d7      	b.n	800bb5a <_dtoa_r+0x94a>
 800bdaa:	9a01      	ldr	r2, [sp, #4]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d184      	bne.n	800bcba <_dtoa_r+0xaaa>
 800bdb0:	9b00      	ldr	r3, [sp, #0]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	2331      	movs	r3, #49	; 0x31
 800bdb8:	7013      	strb	r3, [r2, #0]
 800bdba:	e6ce      	b.n	800bb5a <_dtoa_r+0x94a>
 800bdbc:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <_dtoa_r+0xbd4>)
 800bdbe:	f7ff ba95 	b.w	800b2ec <_dtoa_r+0xdc>
 800bdc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f47f aa6e 	bne.w	800b2a6 <_dtoa_r+0x96>
 800bdca:	4b07      	ldr	r3, [pc, #28]	; (800bde8 <_dtoa_r+0xbd8>)
 800bdcc:	f7ff ba8e 	b.w	800b2ec <_dtoa_r+0xdc>
 800bdd0:	9b02      	ldr	r3, [sp, #8]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	dcae      	bgt.n	800bd34 <_dtoa_r+0xb24>
 800bdd6:	9b06      	ldr	r3, [sp, #24]
 800bdd8:	2b02      	cmp	r3, #2
 800bdda:	f73f aea8 	bgt.w	800bb2e <_dtoa_r+0x91e>
 800bdde:	e7a9      	b.n	800bd34 <_dtoa_r+0xb24>
 800bde0:	0800e12b 	.word	0x0800e12b
 800bde4:	0800e088 	.word	0x0800e088
 800bde8:	0800e0ac 	.word	0x0800e0ac

0800bdec <__sflush_r>:
 800bdec:	898a      	ldrh	r2, [r1, #12]
 800bdee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	0710      	lsls	r0, r2, #28
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	d458      	bmi.n	800beac <__sflush_r+0xc0>
 800bdfa:	684b      	ldr	r3, [r1, #4]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	dc05      	bgt.n	800be0c <__sflush_r+0x20>
 800be00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be02:	2b00      	cmp	r3, #0
 800be04:	dc02      	bgt.n	800be0c <__sflush_r+0x20>
 800be06:	2000      	movs	r0, #0
 800be08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be0e:	2e00      	cmp	r6, #0
 800be10:	d0f9      	beq.n	800be06 <__sflush_r+0x1a>
 800be12:	2300      	movs	r3, #0
 800be14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be18:	682f      	ldr	r7, [r5, #0]
 800be1a:	602b      	str	r3, [r5, #0]
 800be1c:	d032      	beq.n	800be84 <__sflush_r+0x98>
 800be1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	075a      	lsls	r2, r3, #29
 800be24:	d505      	bpl.n	800be32 <__sflush_r+0x46>
 800be26:	6863      	ldr	r3, [r4, #4]
 800be28:	1ac0      	subs	r0, r0, r3
 800be2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be2c:	b10b      	cbz	r3, 800be32 <__sflush_r+0x46>
 800be2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be30:	1ac0      	subs	r0, r0, r3
 800be32:	2300      	movs	r3, #0
 800be34:	4602      	mov	r2, r0
 800be36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be38:	6a21      	ldr	r1, [r4, #32]
 800be3a:	4628      	mov	r0, r5
 800be3c:	47b0      	blx	r6
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	d106      	bne.n	800be52 <__sflush_r+0x66>
 800be44:	6829      	ldr	r1, [r5, #0]
 800be46:	291d      	cmp	r1, #29
 800be48:	d82c      	bhi.n	800bea4 <__sflush_r+0xb8>
 800be4a:	4a2a      	ldr	r2, [pc, #168]	; (800bef4 <__sflush_r+0x108>)
 800be4c:	40ca      	lsrs	r2, r1
 800be4e:	07d6      	lsls	r6, r2, #31
 800be50:	d528      	bpl.n	800bea4 <__sflush_r+0xb8>
 800be52:	2200      	movs	r2, #0
 800be54:	6062      	str	r2, [r4, #4]
 800be56:	04d9      	lsls	r1, r3, #19
 800be58:	6922      	ldr	r2, [r4, #16]
 800be5a:	6022      	str	r2, [r4, #0]
 800be5c:	d504      	bpl.n	800be68 <__sflush_r+0x7c>
 800be5e:	1c42      	adds	r2, r0, #1
 800be60:	d101      	bne.n	800be66 <__sflush_r+0x7a>
 800be62:	682b      	ldr	r3, [r5, #0]
 800be64:	b903      	cbnz	r3, 800be68 <__sflush_r+0x7c>
 800be66:	6560      	str	r0, [r4, #84]	; 0x54
 800be68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be6a:	602f      	str	r7, [r5, #0]
 800be6c:	2900      	cmp	r1, #0
 800be6e:	d0ca      	beq.n	800be06 <__sflush_r+0x1a>
 800be70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be74:	4299      	cmp	r1, r3
 800be76:	d002      	beq.n	800be7e <__sflush_r+0x92>
 800be78:	4628      	mov	r0, r5
 800be7a:	f7fe fa61 	bl	800a340 <_free_r>
 800be7e:	2000      	movs	r0, #0
 800be80:	6360      	str	r0, [r4, #52]	; 0x34
 800be82:	e7c1      	b.n	800be08 <__sflush_r+0x1c>
 800be84:	6a21      	ldr	r1, [r4, #32]
 800be86:	2301      	movs	r3, #1
 800be88:	4628      	mov	r0, r5
 800be8a:	47b0      	blx	r6
 800be8c:	1c41      	adds	r1, r0, #1
 800be8e:	d1c7      	bne.n	800be20 <__sflush_r+0x34>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0c4      	beq.n	800be20 <__sflush_r+0x34>
 800be96:	2b1d      	cmp	r3, #29
 800be98:	d001      	beq.n	800be9e <__sflush_r+0xb2>
 800be9a:	2b16      	cmp	r3, #22
 800be9c:	d101      	bne.n	800bea2 <__sflush_r+0xb6>
 800be9e:	602f      	str	r7, [r5, #0]
 800bea0:	e7b1      	b.n	800be06 <__sflush_r+0x1a>
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bea8:	81a3      	strh	r3, [r4, #12]
 800beaa:	e7ad      	b.n	800be08 <__sflush_r+0x1c>
 800beac:	690f      	ldr	r7, [r1, #16]
 800beae:	2f00      	cmp	r7, #0
 800beb0:	d0a9      	beq.n	800be06 <__sflush_r+0x1a>
 800beb2:	0793      	lsls	r3, r2, #30
 800beb4:	680e      	ldr	r6, [r1, #0]
 800beb6:	bf08      	it	eq
 800beb8:	694b      	ldreq	r3, [r1, #20]
 800beba:	600f      	str	r7, [r1, #0]
 800bebc:	bf18      	it	ne
 800bebe:	2300      	movne	r3, #0
 800bec0:	eba6 0807 	sub.w	r8, r6, r7
 800bec4:	608b      	str	r3, [r1, #8]
 800bec6:	f1b8 0f00 	cmp.w	r8, #0
 800beca:	dd9c      	ble.n	800be06 <__sflush_r+0x1a>
 800becc:	6a21      	ldr	r1, [r4, #32]
 800bece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bed0:	4643      	mov	r3, r8
 800bed2:	463a      	mov	r2, r7
 800bed4:	4628      	mov	r0, r5
 800bed6:	47b0      	blx	r6
 800bed8:	2800      	cmp	r0, #0
 800beda:	dc06      	bgt.n	800beea <__sflush_r+0xfe>
 800bedc:	89a3      	ldrh	r3, [r4, #12]
 800bede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bee2:	81a3      	strh	r3, [r4, #12]
 800bee4:	f04f 30ff 	mov.w	r0, #4294967295
 800bee8:	e78e      	b.n	800be08 <__sflush_r+0x1c>
 800beea:	4407      	add	r7, r0
 800beec:	eba8 0800 	sub.w	r8, r8, r0
 800bef0:	e7e9      	b.n	800bec6 <__sflush_r+0xda>
 800bef2:	bf00      	nop
 800bef4:	20400001 	.word	0x20400001

0800bef8 <_fflush_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	690b      	ldr	r3, [r1, #16]
 800befc:	4605      	mov	r5, r0
 800befe:	460c      	mov	r4, r1
 800bf00:	b913      	cbnz	r3, 800bf08 <_fflush_r+0x10>
 800bf02:	2500      	movs	r5, #0
 800bf04:	4628      	mov	r0, r5
 800bf06:	bd38      	pop	{r3, r4, r5, pc}
 800bf08:	b118      	cbz	r0, 800bf12 <_fflush_r+0x1a>
 800bf0a:	6983      	ldr	r3, [r0, #24]
 800bf0c:	b90b      	cbnz	r3, 800bf12 <_fflush_r+0x1a>
 800bf0e:	f000 f887 	bl	800c020 <__sinit>
 800bf12:	4b14      	ldr	r3, [pc, #80]	; (800bf64 <_fflush_r+0x6c>)
 800bf14:	429c      	cmp	r4, r3
 800bf16:	d11b      	bne.n	800bf50 <_fflush_r+0x58>
 800bf18:	686c      	ldr	r4, [r5, #4]
 800bf1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d0ef      	beq.n	800bf02 <_fflush_r+0xa>
 800bf22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf24:	07d0      	lsls	r0, r2, #31
 800bf26:	d404      	bmi.n	800bf32 <_fflush_r+0x3a>
 800bf28:	0599      	lsls	r1, r3, #22
 800bf2a:	d402      	bmi.n	800bf32 <_fflush_r+0x3a>
 800bf2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf2e:	f000 f91a 	bl	800c166 <__retarget_lock_acquire_recursive>
 800bf32:	4628      	mov	r0, r5
 800bf34:	4621      	mov	r1, r4
 800bf36:	f7ff ff59 	bl	800bdec <__sflush_r>
 800bf3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf3c:	07da      	lsls	r2, r3, #31
 800bf3e:	4605      	mov	r5, r0
 800bf40:	d4e0      	bmi.n	800bf04 <_fflush_r+0xc>
 800bf42:	89a3      	ldrh	r3, [r4, #12]
 800bf44:	059b      	lsls	r3, r3, #22
 800bf46:	d4dd      	bmi.n	800bf04 <_fflush_r+0xc>
 800bf48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf4a:	f000 f90d 	bl	800c168 <__retarget_lock_release_recursive>
 800bf4e:	e7d9      	b.n	800bf04 <_fflush_r+0xc>
 800bf50:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <_fflush_r+0x70>)
 800bf52:	429c      	cmp	r4, r3
 800bf54:	d101      	bne.n	800bf5a <_fflush_r+0x62>
 800bf56:	68ac      	ldr	r4, [r5, #8]
 800bf58:	e7df      	b.n	800bf1a <_fflush_r+0x22>
 800bf5a:	4b04      	ldr	r3, [pc, #16]	; (800bf6c <_fflush_r+0x74>)
 800bf5c:	429c      	cmp	r4, r3
 800bf5e:	bf08      	it	eq
 800bf60:	68ec      	ldreq	r4, [r5, #12]
 800bf62:	e7da      	b.n	800bf1a <_fflush_r+0x22>
 800bf64:	0800e15c 	.word	0x0800e15c
 800bf68:	0800e17c 	.word	0x0800e17c
 800bf6c:	0800e13c 	.word	0x0800e13c

0800bf70 <std>:
 800bf70:	2300      	movs	r3, #0
 800bf72:	b510      	push	{r4, lr}
 800bf74:	4604      	mov	r4, r0
 800bf76:	e9c0 3300 	strd	r3, r3, [r0]
 800bf7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf7e:	6083      	str	r3, [r0, #8]
 800bf80:	8181      	strh	r1, [r0, #12]
 800bf82:	6643      	str	r3, [r0, #100]	; 0x64
 800bf84:	81c2      	strh	r2, [r0, #14]
 800bf86:	6183      	str	r3, [r0, #24]
 800bf88:	4619      	mov	r1, r3
 800bf8a:	2208      	movs	r2, #8
 800bf8c:	305c      	adds	r0, #92	; 0x5c
 800bf8e:	f7fe f9cf 	bl	800a330 <memset>
 800bf92:	4b05      	ldr	r3, [pc, #20]	; (800bfa8 <std+0x38>)
 800bf94:	6263      	str	r3, [r4, #36]	; 0x24
 800bf96:	4b05      	ldr	r3, [pc, #20]	; (800bfac <std+0x3c>)
 800bf98:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf9a:	4b05      	ldr	r3, [pc, #20]	; (800bfb0 <std+0x40>)
 800bf9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf9e:	4b05      	ldr	r3, [pc, #20]	; (800bfb4 <std+0x44>)
 800bfa0:	6224      	str	r4, [r4, #32]
 800bfa2:	6323      	str	r3, [r4, #48]	; 0x30
 800bfa4:	bd10      	pop	{r4, pc}
 800bfa6:	bf00      	nop
 800bfa8:	0800cf09 	.word	0x0800cf09
 800bfac:	0800cf2b 	.word	0x0800cf2b
 800bfb0:	0800cf63 	.word	0x0800cf63
 800bfb4:	0800cf87 	.word	0x0800cf87

0800bfb8 <_cleanup_r>:
 800bfb8:	4901      	ldr	r1, [pc, #4]	; (800bfc0 <_cleanup_r+0x8>)
 800bfba:	f000 b8af 	b.w	800c11c <_fwalk_reent>
 800bfbe:	bf00      	nop
 800bfc0:	0800bef9 	.word	0x0800bef9

0800bfc4 <__sfmoreglue>:
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	2268      	movs	r2, #104	; 0x68
 800bfc8:	1e4d      	subs	r5, r1, #1
 800bfca:	4355      	muls	r5, r2
 800bfcc:	460e      	mov	r6, r1
 800bfce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfd2:	f7fe fa21 	bl	800a418 <_malloc_r>
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	b140      	cbz	r0, 800bfec <__sfmoreglue+0x28>
 800bfda:	2100      	movs	r1, #0
 800bfdc:	e9c0 1600 	strd	r1, r6, [r0]
 800bfe0:	300c      	adds	r0, #12
 800bfe2:	60a0      	str	r0, [r4, #8]
 800bfe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfe8:	f7fe f9a2 	bl	800a330 <memset>
 800bfec:	4620      	mov	r0, r4
 800bfee:	bd70      	pop	{r4, r5, r6, pc}

0800bff0 <__sfp_lock_acquire>:
 800bff0:	4801      	ldr	r0, [pc, #4]	; (800bff8 <__sfp_lock_acquire+0x8>)
 800bff2:	f000 b8b8 	b.w	800c166 <__retarget_lock_acquire_recursive>
 800bff6:	bf00      	nop
 800bff8:	20000881 	.word	0x20000881

0800bffc <__sfp_lock_release>:
 800bffc:	4801      	ldr	r0, [pc, #4]	; (800c004 <__sfp_lock_release+0x8>)
 800bffe:	f000 b8b3 	b.w	800c168 <__retarget_lock_release_recursive>
 800c002:	bf00      	nop
 800c004:	20000881 	.word	0x20000881

0800c008 <__sinit_lock_acquire>:
 800c008:	4801      	ldr	r0, [pc, #4]	; (800c010 <__sinit_lock_acquire+0x8>)
 800c00a:	f000 b8ac 	b.w	800c166 <__retarget_lock_acquire_recursive>
 800c00e:	bf00      	nop
 800c010:	20000882 	.word	0x20000882

0800c014 <__sinit_lock_release>:
 800c014:	4801      	ldr	r0, [pc, #4]	; (800c01c <__sinit_lock_release+0x8>)
 800c016:	f000 b8a7 	b.w	800c168 <__retarget_lock_release_recursive>
 800c01a:	bf00      	nop
 800c01c:	20000882 	.word	0x20000882

0800c020 <__sinit>:
 800c020:	b510      	push	{r4, lr}
 800c022:	4604      	mov	r4, r0
 800c024:	f7ff fff0 	bl	800c008 <__sinit_lock_acquire>
 800c028:	69a3      	ldr	r3, [r4, #24]
 800c02a:	b11b      	cbz	r3, 800c034 <__sinit+0x14>
 800c02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c030:	f7ff bff0 	b.w	800c014 <__sinit_lock_release>
 800c034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c038:	6523      	str	r3, [r4, #80]	; 0x50
 800c03a:	4b13      	ldr	r3, [pc, #76]	; (800c088 <__sinit+0x68>)
 800c03c:	4a13      	ldr	r2, [pc, #76]	; (800c08c <__sinit+0x6c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	62a2      	str	r2, [r4, #40]	; 0x28
 800c042:	42a3      	cmp	r3, r4
 800c044:	bf04      	itt	eq
 800c046:	2301      	moveq	r3, #1
 800c048:	61a3      	streq	r3, [r4, #24]
 800c04a:	4620      	mov	r0, r4
 800c04c:	f000 f820 	bl	800c090 <__sfp>
 800c050:	6060      	str	r0, [r4, #4]
 800c052:	4620      	mov	r0, r4
 800c054:	f000 f81c 	bl	800c090 <__sfp>
 800c058:	60a0      	str	r0, [r4, #8]
 800c05a:	4620      	mov	r0, r4
 800c05c:	f000 f818 	bl	800c090 <__sfp>
 800c060:	2200      	movs	r2, #0
 800c062:	60e0      	str	r0, [r4, #12]
 800c064:	2104      	movs	r1, #4
 800c066:	6860      	ldr	r0, [r4, #4]
 800c068:	f7ff ff82 	bl	800bf70 <std>
 800c06c:	68a0      	ldr	r0, [r4, #8]
 800c06e:	2201      	movs	r2, #1
 800c070:	2109      	movs	r1, #9
 800c072:	f7ff ff7d 	bl	800bf70 <std>
 800c076:	68e0      	ldr	r0, [r4, #12]
 800c078:	2202      	movs	r2, #2
 800c07a:	2112      	movs	r1, #18
 800c07c:	f7ff ff78 	bl	800bf70 <std>
 800c080:	2301      	movs	r3, #1
 800c082:	61a3      	str	r3, [r4, #24]
 800c084:	e7d2      	b.n	800c02c <__sinit+0xc>
 800c086:	bf00      	nop
 800c088:	0800e074 	.word	0x0800e074
 800c08c:	0800bfb9 	.word	0x0800bfb9

0800c090 <__sfp>:
 800c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c092:	4607      	mov	r7, r0
 800c094:	f7ff ffac 	bl	800bff0 <__sfp_lock_acquire>
 800c098:	4b1e      	ldr	r3, [pc, #120]	; (800c114 <__sfp+0x84>)
 800c09a:	681e      	ldr	r6, [r3, #0]
 800c09c:	69b3      	ldr	r3, [r6, #24]
 800c09e:	b913      	cbnz	r3, 800c0a6 <__sfp+0x16>
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f7ff ffbd 	bl	800c020 <__sinit>
 800c0a6:	3648      	adds	r6, #72	; 0x48
 800c0a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	d503      	bpl.n	800c0b8 <__sfp+0x28>
 800c0b0:	6833      	ldr	r3, [r6, #0]
 800c0b2:	b30b      	cbz	r3, 800c0f8 <__sfp+0x68>
 800c0b4:	6836      	ldr	r6, [r6, #0]
 800c0b6:	e7f7      	b.n	800c0a8 <__sfp+0x18>
 800c0b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0bc:	b9d5      	cbnz	r5, 800c0f4 <__sfp+0x64>
 800c0be:	4b16      	ldr	r3, [pc, #88]	; (800c118 <__sfp+0x88>)
 800c0c0:	60e3      	str	r3, [r4, #12]
 800c0c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0c6:	6665      	str	r5, [r4, #100]	; 0x64
 800c0c8:	f000 f84c 	bl	800c164 <__retarget_lock_init_recursive>
 800c0cc:	f7ff ff96 	bl	800bffc <__sfp_lock_release>
 800c0d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0d8:	6025      	str	r5, [r4, #0]
 800c0da:	61a5      	str	r5, [r4, #24]
 800c0dc:	2208      	movs	r2, #8
 800c0de:	4629      	mov	r1, r5
 800c0e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0e4:	f7fe f924 	bl	800a330 <memset>
 800c0e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0f4:	3468      	adds	r4, #104	; 0x68
 800c0f6:	e7d9      	b.n	800c0ac <__sfp+0x1c>
 800c0f8:	2104      	movs	r1, #4
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	f7ff ff62 	bl	800bfc4 <__sfmoreglue>
 800c100:	4604      	mov	r4, r0
 800c102:	6030      	str	r0, [r6, #0]
 800c104:	2800      	cmp	r0, #0
 800c106:	d1d5      	bne.n	800c0b4 <__sfp+0x24>
 800c108:	f7ff ff78 	bl	800bffc <__sfp_lock_release>
 800c10c:	230c      	movs	r3, #12
 800c10e:	603b      	str	r3, [r7, #0]
 800c110:	e7ee      	b.n	800c0f0 <__sfp+0x60>
 800c112:	bf00      	nop
 800c114:	0800e074 	.word	0x0800e074
 800c118:	ffff0001 	.word	0xffff0001

0800c11c <_fwalk_reent>:
 800c11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c120:	4606      	mov	r6, r0
 800c122:	4688      	mov	r8, r1
 800c124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c128:	2700      	movs	r7, #0
 800c12a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c12e:	f1b9 0901 	subs.w	r9, r9, #1
 800c132:	d505      	bpl.n	800c140 <_fwalk_reent+0x24>
 800c134:	6824      	ldr	r4, [r4, #0]
 800c136:	2c00      	cmp	r4, #0
 800c138:	d1f7      	bne.n	800c12a <_fwalk_reent+0xe>
 800c13a:	4638      	mov	r0, r7
 800c13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c140:	89ab      	ldrh	r3, [r5, #12]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d907      	bls.n	800c156 <_fwalk_reent+0x3a>
 800c146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c14a:	3301      	adds	r3, #1
 800c14c:	d003      	beq.n	800c156 <_fwalk_reent+0x3a>
 800c14e:	4629      	mov	r1, r5
 800c150:	4630      	mov	r0, r6
 800c152:	47c0      	blx	r8
 800c154:	4307      	orrs	r7, r0
 800c156:	3568      	adds	r5, #104	; 0x68
 800c158:	e7e9      	b.n	800c12e <_fwalk_reent+0x12>
	...

0800c15c <_localeconv_r>:
 800c15c:	4800      	ldr	r0, [pc, #0]	; (800c160 <_localeconv_r+0x4>)
 800c15e:	4770      	bx	lr
 800c160:	20000178 	.word	0x20000178

0800c164 <__retarget_lock_init_recursive>:
 800c164:	4770      	bx	lr

0800c166 <__retarget_lock_acquire_recursive>:
 800c166:	4770      	bx	lr

0800c168 <__retarget_lock_release_recursive>:
 800c168:	4770      	bx	lr

0800c16a <__swhatbuf_r>:
 800c16a:	b570      	push	{r4, r5, r6, lr}
 800c16c:	460e      	mov	r6, r1
 800c16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c172:	2900      	cmp	r1, #0
 800c174:	b096      	sub	sp, #88	; 0x58
 800c176:	4614      	mov	r4, r2
 800c178:	461d      	mov	r5, r3
 800c17a:	da08      	bge.n	800c18e <__swhatbuf_r+0x24>
 800c17c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c180:	2200      	movs	r2, #0
 800c182:	602a      	str	r2, [r5, #0]
 800c184:	061a      	lsls	r2, r3, #24
 800c186:	d410      	bmi.n	800c1aa <__swhatbuf_r+0x40>
 800c188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c18c:	e00e      	b.n	800c1ac <__swhatbuf_r+0x42>
 800c18e:	466a      	mov	r2, sp
 800c190:	f000 ff50 	bl	800d034 <_fstat_r>
 800c194:	2800      	cmp	r0, #0
 800c196:	dbf1      	blt.n	800c17c <__swhatbuf_r+0x12>
 800c198:	9a01      	ldr	r2, [sp, #4]
 800c19a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c19e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1a2:	425a      	negs	r2, r3
 800c1a4:	415a      	adcs	r2, r3
 800c1a6:	602a      	str	r2, [r5, #0]
 800c1a8:	e7ee      	b.n	800c188 <__swhatbuf_r+0x1e>
 800c1aa:	2340      	movs	r3, #64	; 0x40
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	6023      	str	r3, [r4, #0]
 800c1b0:	b016      	add	sp, #88	; 0x58
 800c1b2:	bd70      	pop	{r4, r5, r6, pc}

0800c1b4 <__smakebuf_r>:
 800c1b4:	898b      	ldrh	r3, [r1, #12]
 800c1b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1b8:	079d      	lsls	r5, r3, #30
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	460c      	mov	r4, r1
 800c1be:	d507      	bpl.n	800c1d0 <__smakebuf_r+0x1c>
 800c1c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	6123      	str	r3, [r4, #16]
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	6163      	str	r3, [r4, #20]
 800c1cc:	b002      	add	sp, #8
 800c1ce:	bd70      	pop	{r4, r5, r6, pc}
 800c1d0:	ab01      	add	r3, sp, #4
 800c1d2:	466a      	mov	r2, sp
 800c1d4:	f7ff ffc9 	bl	800c16a <__swhatbuf_r>
 800c1d8:	9900      	ldr	r1, [sp, #0]
 800c1da:	4605      	mov	r5, r0
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f7fe f91b 	bl	800a418 <_malloc_r>
 800c1e2:	b948      	cbnz	r0, 800c1f8 <__smakebuf_r+0x44>
 800c1e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1e8:	059a      	lsls	r2, r3, #22
 800c1ea:	d4ef      	bmi.n	800c1cc <__smakebuf_r+0x18>
 800c1ec:	f023 0303 	bic.w	r3, r3, #3
 800c1f0:	f043 0302 	orr.w	r3, r3, #2
 800c1f4:	81a3      	strh	r3, [r4, #12]
 800c1f6:	e7e3      	b.n	800c1c0 <__smakebuf_r+0xc>
 800c1f8:	4b0d      	ldr	r3, [pc, #52]	; (800c230 <__smakebuf_r+0x7c>)
 800c1fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	6020      	str	r0, [r4, #0]
 800c200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c204:	81a3      	strh	r3, [r4, #12]
 800c206:	9b00      	ldr	r3, [sp, #0]
 800c208:	6163      	str	r3, [r4, #20]
 800c20a:	9b01      	ldr	r3, [sp, #4]
 800c20c:	6120      	str	r0, [r4, #16]
 800c20e:	b15b      	cbz	r3, 800c228 <__smakebuf_r+0x74>
 800c210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c214:	4630      	mov	r0, r6
 800c216:	f000 ff1f 	bl	800d058 <_isatty_r>
 800c21a:	b128      	cbz	r0, 800c228 <__smakebuf_r+0x74>
 800c21c:	89a3      	ldrh	r3, [r4, #12]
 800c21e:	f023 0303 	bic.w	r3, r3, #3
 800c222:	f043 0301 	orr.w	r3, r3, #1
 800c226:	81a3      	strh	r3, [r4, #12]
 800c228:	89a0      	ldrh	r0, [r4, #12]
 800c22a:	4305      	orrs	r5, r0
 800c22c:	81a5      	strh	r5, [r4, #12]
 800c22e:	e7cd      	b.n	800c1cc <__smakebuf_r+0x18>
 800c230:	0800bfb9 	.word	0x0800bfb9

0800c234 <memcpy>:
 800c234:	440a      	add	r2, r1
 800c236:	4291      	cmp	r1, r2
 800c238:	f100 33ff 	add.w	r3, r0, #4294967295
 800c23c:	d100      	bne.n	800c240 <memcpy+0xc>
 800c23e:	4770      	bx	lr
 800c240:	b510      	push	{r4, lr}
 800c242:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c24a:	4291      	cmp	r1, r2
 800c24c:	d1f9      	bne.n	800c242 <memcpy+0xe>
 800c24e:	bd10      	pop	{r4, pc}

0800c250 <__malloc_lock>:
 800c250:	4801      	ldr	r0, [pc, #4]	; (800c258 <__malloc_lock+0x8>)
 800c252:	f7ff bf88 	b.w	800c166 <__retarget_lock_acquire_recursive>
 800c256:	bf00      	nop
 800c258:	20000880 	.word	0x20000880

0800c25c <__malloc_unlock>:
 800c25c:	4801      	ldr	r0, [pc, #4]	; (800c264 <__malloc_unlock+0x8>)
 800c25e:	f7ff bf83 	b.w	800c168 <__retarget_lock_release_recursive>
 800c262:	bf00      	nop
 800c264:	20000880 	.word	0x20000880

0800c268 <_Balloc>:
 800c268:	b570      	push	{r4, r5, r6, lr}
 800c26a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c26c:	4604      	mov	r4, r0
 800c26e:	460d      	mov	r5, r1
 800c270:	b976      	cbnz	r6, 800c290 <_Balloc+0x28>
 800c272:	2010      	movs	r0, #16
 800c274:	f7fe f854 	bl	800a320 <malloc>
 800c278:	4602      	mov	r2, r0
 800c27a:	6260      	str	r0, [r4, #36]	; 0x24
 800c27c:	b920      	cbnz	r0, 800c288 <_Balloc+0x20>
 800c27e:	4b18      	ldr	r3, [pc, #96]	; (800c2e0 <_Balloc+0x78>)
 800c280:	4818      	ldr	r0, [pc, #96]	; (800c2e4 <_Balloc+0x7c>)
 800c282:	2166      	movs	r1, #102	; 0x66
 800c284:	f000 fe96 	bl	800cfb4 <__assert_func>
 800c288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c28c:	6006      	str	r6, [r0, #0]
 800c28e:	60c6      	str	r6, [r0, #12]
 800c290:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c292:	68f3      	ldr	r3, [r6, #12]
 800c294:	b183      	cbz	r3, 800c2b8 <_Balloc+0x50>
 800c296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c29e:	b9b8      	cbnz	r0, 800c2d0 <_Balloc+0x68>
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	fa01 f605 	lsl.w	r6, r1, r5
 800c2a6:	1d72      	adds	r2, r6, #5
 800c2a8:	0092      	lsls	r2, r2, #2
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 fb60 	bl	800c970 <_calloc_r>
 800c2b0:	b160      	cbz	r0, 800c2cc <_Balloc+0x64>
 800c2b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2b6:	e00e      	b.n	800c2d6 <_Balloc+0x6e>
 800c2b8:	2221      	movs	r2, #33	; 0x21
 800c2ba:	2104      	movs	r1, #4
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f000 fb57 	bl	800c970 <_calloc_r>
 800c2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2c4:	60f0      	str	r0, [r6, #12]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1e4      	bne.n	800c296 <_Balloc+0x2e>
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}
 800c2d0:	6802      	ldr	r2, [r0, #0]
 800c2d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2dc:	e7f7      	b.n	800c2ce <_Balloc+0x66>
 800c2de:	bf00      	nop
 800c2e0:	0800e0b9 	.word	0x0800e0b9
 800c2e4:	0800e19c 	.word	0x0800e19c

0800c2e8 <_Bfree>:
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	b976      	cbnz	r6, 800c310 <_Bfree+0x28>
 800c2f2:	2010      	movs	r0, #16
 800c2f4:	f7fe f814 	bl	800a320 <malloc>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	6268      	str	r0, [r5, #36]	; 0x24
 800c2fc:	b920      	cbnz	r0, 800c308 <_Bfree+0x20>
 800c2fe:	4b09      	ldr	r3, [pc, #36]	; (800c324 <_Bfree+0x3c>)
 800c300:	4809      	ldr	r0, [pc, #36]	; (800c328 <_Bfree+0x40>)
 800c302:	218a      	movs	r1, #138	; 0x8a
 800c304:	f000 fe56 	bl	800cfb4 <__assert_func>
 800c308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c30c:	6006      	str	r6, [r0, #0]
 800c30e:	60c6      	str	r6, [r0, #12]
 800c310:	b13c      	cbz	r4, 800c322 <_Bfree+0x3a>
 800c312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c314:	6862      	ldr	r2, [r4, #4]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c31c:	6021      	str	r1, [r4, #0]
 800c31e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c322:	bd70      	pop	{r4, r5, r6, pc}
 800c324:	0800e0b9 	.word	0x0800e0b9
 800c328:	0800e19c 	.word	0x0800e19c

0800c32c <__multadd>:
 800c32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c330:	690d      	ldr	r5, [r1, #16]
 800c332:	4607      	mov	r7, r0
 800c334:	460c      	mov	r4, r1
 800c336:	461e      	mov	r6, r3
 800c338:	f101 0c14 	add.w	ip, r1, #20
 800c33c:	2000      	movs	r0, #0
 800c33e:	f8dc 3000 	ldr.w	r3, [ip]
 800c342:	b299      	uxth	r1, r3
 800c344:	fb02 6101 	mla	r1, r2, r1, r6
 800c348:	0c1e      	lsrs	r6, r3, #16
 800c34a:	0c0b      	lsrs	r3, r1, #16
 800c34c:	fb02 3306 	mla	r3, r2, r6, r3
 800c350:	b289      	uxth	r1, r1
 800c352:	3001      	adds	r0, #1
 800c354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c358:	4285      	cmp	r5, r0
 800c35a:	f84c 1b04 	str.w	r1, [ip], #4
 800c35e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c362:	dcec      	bgt.n	800c33e <__multadd+0x12>
 800c364:	b30e      	cbz	r6, 800c3aa <__multadd+0x7e>
 800c366:	68a3      	ldr	r3, [r4, #8]
 800c368:	42ab      	cmp	r3, r5
 800c36a:	dc19      	bgt.n	800c3a0 <__multadd+0x74>
 800c36c:	6861      	ldr	r1, [r4, #4]
 800c36e:	4638      	mov	r0, r7
 800c370:	3101      	adds	r1, #1
 800c372:	f7ff ff79 	bl	800c268 <_Balloc>
 800c376:	4680      	mov	r8, r0
 800c378:	b928      	cbnz	r0, 800c386 <__multadd+0x5a>
 800c37a:	4602      	mov	r2, r0
 800c37c:	4b0c      	ldr	r3, [pc, #48]	; (800c3b0 <__multadd+0x84>)
 800c37e:	480d      	ldr	r0, [pc, #52]	; (800c3b4 <__multadd+0x88>)
 800c380:	21b5      	movs	r1, #181	; 0xb5
 800c382:	f000 fe17 	bl	800cfb4 <__assert_func>
 800c386:	6922      	ldr	r2, [r4, #16]
 800c388:	3202      	adds	r2, #2
 800c38a:	f104 010c 	add.w	r1, r4, #12
 800c38e:	0092      	lsls	r2, r2, #2
 800c390:	300c      	adds	r0, #12
 800c392:	f7ff ff4f 	bl	800c234 <memcpy>
 800c396:	4621      	mov	r1, r4
 800c398:	4638      	mov	r0, r7
 800c39a:	f7ff ffa5 	bl	800c2e8 <_Bfree>
 800c39e:	4644      	mov	r4, r8
 800c3a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3a4:	3501      	adds	r5, #1
 800c3a6:	615e      	str	r6, [r3, #20]
 800c3a8:	6125      	str	r5, [r4, #16]
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b0:	0800e12b 	.word	0x0800e12b
 800c3b4:	0800e19c 	.word	0x0800e19c

0800c3b8 <__hi0bits>:
 800c3b8:	0c03      	lsrs	r3, r0, #16
 800c3ba:	041b      	lsls	r3, r3, #16
 800c3bc:	b9d3      	cbnz	r3, 800c3f4 <__hi0bits+0x3c>
 800c3be:	0400      	lsls	r0, r0, #16
 800c3c0:	2310      	movs	r3, #16
 800c3c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3c6:	bf04      	itt	eq
 800c3c8:	0200      	lsleq	r0, r0, #8
 800c3ca:	3308      	addeq	r3, #8
 800c3cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3d0:	bf04      	itt	eq
 800c3d2:	0100      	lsleq	r0, r0, #4
 800c3d4:	3304      	addeq	r3, #4
 800c3d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c3da:	bf04      	itt	eq
 800c3dc:	0080      	lsleq	r0, r0, #2
 800c3de:	3302      	addeq	r3, #2
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	db05      	blt.n	800c3f0 <__hi0bits+0x38>
 800c3e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c3e8:	f103 0301 	add.w	r3, r3, #1
 800c3ec:	bf08      	it	eq
 800c3ee:	2320      	moveq	r3, #32
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	4770      	bx	lr
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	e7e4      	b.n	800c3c2 <__hi0bits+0xa>

0800c3f8 <__lo0bits>:
 800c3f8:	6803      	ldr	r3, [r0, #0]
 800c3fa:	f013 0207 	ands.w	r2, r3, #7
 800c3fe:	4601      	mov	r1, r0
 800c400:	d00b      	beq.n	800c41a <__lo0bits+0x22>
 800c402:	07da      	lsls	r2, r3, #31
 800c404:	d423      	bmi.n	800c44e <__lo0bits+0x56>
 800c406:	0798      	lsls	r0, r3, #30
 800c408:	bf49      	itett	mi
 800c40a:	085b      	lsrmi	r3, r3, #1
 800c40c:	089b      	lsrpl	r3, r3, #2
 800c40e:	2001      	movmi	r0, #1
 800c410:	600b      	strmi	r3, [r1, #0]
 800c412:	bf5c      	itt	pl
 800c414:	600b      	strpl	r3, [r1, #0]
 800c416:	2002      	movpl	r0, #2
 800c418:	4770      	bx	lr
 800c41a:	b298      	uxth	r0, r3
 800c41c:	b9a8      	cbnz	r0, 800c44a <__lo0bits+0x52>
 800c41e:	0c1b      	lsrs	r3, r3, #16
 800c420:	2010      	movs	r0, #16
 800c422:	b2da      	uxtb	r2, r3
 800c424:	b90a      	cbnz	r2, 800c42a <__lo0bits+0x32>
 800c426:	3008      	adds	r0, #8
 800c428:	0a1b      	lsrs	r3, r3, #8
 800c42a:	071a      	lsls	r2, r3, #28
 800c42c:	bf04      	itt	eq
 800c42e:	091b      	lsreq	r3, r3, #4
 800c430:	3004      	addeq	r0, #4
 800c432:	079a      	lsls	r2, r3, #30
 800c434:	bf04      	itt	eq
 800c436:	089b      	lsreq	r3, r3, #2
 800c438:	3002      	addeq	r0, #2
 800c43a:	07da      	lsls	r2, r3, #31
 800c43c:	d403      	bmi.n	800c446 <__lo0bits+0x4e>
 800c43e:	085b      	lsrs	r3, r3, #1
 800c440:	f100 0001 	add.w	r0, r0, #1
 800c444:	d005      	beq.n	800c452 <__lo0bits+0x5a>
 800c446:	600b      	str	r3, [r1, #0]
 800c448:	4770      	bx	lr
 800c44a:	4610      	mov	r0, r2
 800c44c:	e7e9      	b.n	800c422 <__lo0bits+0x2a>
 800c44e:	2000      	movs	r0, #0
 800c450:	4770      	bx	lr
 800c452:	2020      	movs	r0, #32
 800c454:	4770      	bx	lr
	...

0800c458 <__i2b>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	460c      	mov	r4, r1
 800c45c:	2101      	movs	r1, #1
 800c45e:	f7ff ff03 	bl	800c268 <_Balloc>
 800c462:	4602      	mov	r2, r0
 800c464:	b928      	cbnz	r0, 800c472 <__i2b+0x1a>
 800c466:	4b05      	ldr	r3, [pc, #20]	; (800c47c <__i2b+0x24>)
 800c468:	4805      	ldr	r0, [pc, #20]	; (800c480 <__i2b+0x28>)
 800c46a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c46e:	f000 fda1 	bl	800cfb4 <__assert_func>
 800c472:	2301      	movs	r3, #1
 800c474:	6144      	str	r4, [r0, #20]
 800c476:	6103      	str	r3, [r0, #16]
 800c478:	bd10      	pop	{r4, pc}
 800c47a:	bf00      	nop
 800c47c:	0800e12b 	.word	0x0800e12b
 800c480:	0800e19c 	.word	0x0800e19c

0800c484 <__multiply>:
 800c484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c488:	4691      	mov	r9, r2
 800c48a:	690a      	ldr	r2, [r1, #16]
 800c48c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c490:	429a      	cmp	r2, r3
 800c492:	bfb8      	it	lt
 800c494:	460b      	movlt	r3, r1
 800c496:	460c      	mov	r4, r1
 800c498:	bfbc      	itt	lt
 800c49a:	464c      	movlt	r4, r9
 800c49c:	4699      	movlt	r9, r3
 800c49e:	6927      	ldr	r7, [r4, #16]
 800c4a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4a4:	68a3      	ldr	r3, [r4, #8]
 800c4a6:	6861      	ldr	r1, [r4, #4]
 800c4a8:	eb07 060a 	add.w	r6, r7, sl
 800c4ac:	42b3      	cmp	r3, r6
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	bfb8      	it	lt
 800c4b2:	3101      	addlt	r1, #1
 800c4b4:	f7ff fed8 	bl	800c268 <_Balloc>
 800c4b8:	b930      	cbnz	r0, 800c4c8 <__multiply+0x44>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	4b44      	ldr	r3, [pc, #272]	; (800c5d0 <__multiply+0x14c>)
 800c4be:	4845      	ldr	r0, [pc, #276]	; (800c5d4 <__multiply+0x150>)
 800c4c0:	f240 115d 	movw	r1, #349	; 0x15d
 800c4c4:	f000 fd76 	bl	800cfb4 <__assert_func>
 800c4c8:	f100 0514 	add.w	r5, r0, #20
 800c4cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4d0:	462b      	mov	r3, r5
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	4543      	cmp	r3, r8
 800c4d6:	d321      	bcc.n	800c51c <__multiply+0x98>
 800c4d8:	f104 0314 	add.w	r3, r4, #20
 800c4dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c4e0:	f109 0314 	add.w	r3, r9, #20
 800c4e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c4e8:	9202      	str	r2, [sp, #8]
 800c4ea:	1b3a      	subs	r2, r7, r4
 800c4ec:	3a15      	subs	r2, #21
 800c4ee:	f022 0203 	bic.w	r2, r2, #3
 800c4f2:	3204      	adds	r2, #4
 800c4f4:	f104 0115 	add.w	r1, r4, #21
 800c4f8:	428f      	cmp	r7, r1
 800c4fa:	bf38      	it	cc
 800c4fc:	2204      	movcc	r2, #4
 800c4fe:	9201      	str	r2, [sp, #4]
 800c500:	9a02      	ldr	r2, [sp, #8]
 800c502:	9303      	str	r3, [sp, #12]
 800c504:	429a      	cmp	r2, r3
 800c506:	d80c      	bhi.n	800c522 <__multiply+0x9e>
 800c508:	2e00      	cmp	r6, #0
 800c50a:	dd03      	ble.n	800c514 <__multiply+0x90>
 800c50c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c510:	2b00      	cmp	r3, #0
 800c512:	d05a      	beq.n	800c5ca <__multiply+0x146>
 800c514:	6106      	str	r6, [r0, #16]
 800c516:	b005      	add	sp, #20
 800c518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51c:	f843 2b04 	str.w	r2, [r3], #4
 800c520:	e7d8      	b.n	800c4d4 <__multiply+0x50>
 800c522:	f8b3 a000 	ldrh.w	sl, [r3]
 800c526:	f1ba 0f00 	cmp.w	sl, #0
 800c52a:	d024      	beq.n	800c576 <__multiply+0xf2>
 800c52c:	f104 0e14 	add.w	lr, r4, #20
 800c530:	46a9      	mov	r9, r5
 800c532:	f04f 0c00 	mov.w	ip, #0
 800c536:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c53a:	f8d9 1000 	ldr.w	r1, [r9]
 800c53e:	fa1f fb82 	uxth.w	fp, r2
 800c542:	b289      	uxth	r1, r1
 800c544:	fb0a 110b 	mla	r1, sl, fp, r1
 800c548:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c54c:	f8d9 2000 	ldr.w	r2, [r9]
 800c550:	4461      	add	r1, ip
 800c552:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c556:	fb0a c20b 	mla	r2, sl, fp, ip
 800c55a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c55e:	b289      	uxth	r1, r1
 800c560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c564:	4577      	cmp	r7, lr
 800c566:	f849 1b04 	str.w	r1, [r9], #4
 800c56a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c56e:	d8e2      	bhi.n	800c536 <__multiply+0xb2>
 800c570:	9a01      	ldr	r2, [sp, #4]
 800c572:	f845 c002 	str.w	ip, [r5, r2]
 800c576:	9a03      	ldr	r2, [sp, #12]
 800c578:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c57c:	3304      	adds	r3, #4
 800c57e:	f1b9 0f00 	cmp.w	r9, #0
 800c582:	d020      	beq.n	800c5c6 <__multiply+0x142>
 800c584:	6829      	ldr	r1, [r5, #0]
 800c586:	f104 0c14 	add.w	ip, r4, #20
 800c58a:	46ae      	mov	lr, r5
 800c58c:	f04f 0a00 	mov.w	sl, #0
 800c590:	f8bc b000 	ldrh.w	fp, [ip]
 800c594:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c598:	fb09 220b 	mla	r2, r9, fp, r2
 800c59c:	4492      	add	sl, r2
 800c59e:	b289      	uxth	r1, r1
 800c5a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c5a4:	f84e 1b04 	str.w	r1, [lr], #4
 800c5a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c5ac:	f8be 1000 	ldrh.w	r1, [lr]
 800c5b0:	0c12      	lsrs	r2, r2, #16
 800c5b2:	fb09 1102 	mla	r1, r9, r2, r1
 800c5b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c5ba:	4567      	cmp	r7, ip
 800c5bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5c0:	d8e6      	bhi.n	800c590 <__multiply+0x10c>
 800c5c2:	9a01      	ldr	r2, [sp, #4]
 800c5c4:	50a9      	str	r1, [r5, r2]
 800c5c6:	3504      	adds	r5, #4
 800c5c8:	e79a      	b.n	800c500 <__multiply+0x7c>
 800c5ca:	3e01      	subs	r6, #1
 800c5cc:	e79c      	b.n	800c508 <__multiply+0x84>
 800c5ce:	bf00      	nop
 800c5d0:	0800e12b 	.word	0x0800e12b
 800c5d4:	0800e19c 	.word	0x0800e19c

0800c5d8 <__pow5mult>:
 800c5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5dc:	4615      	mov	r5, r2
 800c5de:	f012 0203 	ands.w	r2, r2, #3
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	460f      	mov	r7, r1
 800c5e6:	d007      	beq.n	800c5f8 <__pow5mult+0x20>
 800c5e8:	4c25      	ldr	r4, [pc, #148]	; (800c680 <__pow5mult+0xa8>)
 800c5ea:	3a01      	subs	r2, #1
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5f2:	f7ff fe9b 	bl	800c32c <__multadd>
 800c5f6:	4607      	mov	r7, r0
 800c5f8:	10ad      	asrs	r5, r5, #2
 800c5fa:	d03d      	beq.n	800c678 <__pow5mult+0xa0>
 800c5fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c5fe:	b97c      	cbnz	r4, 800c620 <__pow5mult+0x48>
 800c600:	2010      	movs	r0, #16
 800c602:	f7fd fe8d 	bl	800a320 <malloc>
 800c606:	4602      	mov	r2, r0
 800c608:	6270      	str	r0, [r6, #36]	; 0x24
 800c60a:	b928      	cbnz	r0, 800c618 <__pow5mult+0x40>
 800c60c:	4b1d      	ldr	r3, [pc, #116]	; (800c684 <__pow5mult+0xac>)
 800c60e:	481e      	ldr	r0, [pc, #120]	; (800c688 <__pow5mult+0xb0>)
 800c610:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c614:	f000 fcce 	bl	800cfb4 <__assert_func>
 800c618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c61c:	6004      	str	r4, [r0, #0]
 800c61e:	60c4      	str	r4, [r0, #12]
 800c620:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c628:	b94c      	cbnz	r4, 800c63e <__pow5mult+0x66>
 800c62a:	f240 2171 	movw	r1, #625	; 0x271
 800c62e:	4630      	mov	r0, r6
 800c630:	f7ff ff12 	bl	800c458 <__i2b>
 800c634:	2300      	movs	r3, #0
 800c636:	f8c8 0008 	str.w	r0, [r8, #8]
 800c63a:	4604      	mov	r4, r0
 800c63c:	6003      	str	r3, [r0, #0]
 800c63e:	f04f 0900 	mov.w	r9, #0
 800c642:	07eb      	lsls	r3, r5, #31
 800c644:	d50a      	bpl.n	800c65c <__pow5mult+0x84>
 800c646:	4639      	mov	r1, r7
 800c648:	4622      	mov	r2, r4
 800c64a:	4630      	mov	r0, r6
 800c64c:	f7ff ff1a 	bl	800c484 <__multiply>
 800c650:	4639      	mov	r1, r7
 800c652:	4680      	mov	r8, r0
 800c654:	4630      	mov	r0, r6
 800c656:	f7ff fe47 	bl	800c2e8 <_Bfree>
 800c65a:	4647      	mov	r7, r8
 800c65c:	106d      	asrs	r5, r5, #1
 800c65e:	d00b      	beq.n	800c678 <__pow5mult+0xa0>
 800c660:	6820      	ldr	r0, [r4, #0]
 800c662:	b938      	cbnz	r0, 800c674 <__pow5mult+0x9c>
 800c664:	4622      	mov	r2, r4
 800c666:	4621      	mov	r1, r4
 800c668:	4630      	mov	r0, r6
 800c66a:	f7ff ff0b 	bl	800c484 <__multiply>
 800c66e:	6020      	str	r0, [r4, #0]
 800c670:	f8c0 9000 	str.w	r9, [r0]
 800c674:	4604      	mov	r4, r0
 800c676:	e7e4      	b.n	800c642 <__pow5mult+0x6a>
 800c678:	4638      	mov	r0, r7
 800c67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c67e:	bf00      	nop
 800c680:	0800e2e8 	.word	0x0800e2e8
 800c684:	0800e0b9 	.word	0x0800e0b9
 800c688:	0800e19c 	.word	0x0800e19c

0800c68c <__lshift>:
 800c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c690:	460c      	mov	r4, r1
 800c692:	6849      	ldr	r1, [r1, #4]
 800c694:	6923      	ldr	r3, [r4, #16]
 800c696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c69a:	68a3      	ldr	r3, [r4, #8]
 800c69c:	4607      	mov	r7, r0
 800c69e:	4691      	mov	r9, r2
 800c6a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6a4:	f108 0601 	add.w	r6, r8, #1
 800c6a8:	42b3      	cmp	r3, r6
 800c6aa:	db0b      	blt.n	800c6c4 <__lshift+0x38>
 800c6ac:	4638      	mov	r0, r7
 800c6ae:	f7ff fddb 	bl	800c268 <_Balloc>
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	b948      	cbnz	r0, 800c6ca <__lshift+0x3e>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	4b2a      	ldr	r3, [pc, #168]	; (800c764 <__lshift+0xd8>)
 800c6ba:	482b      	ldr	r0, [pc, #172]	; (800c768 <__lshift+0xdc>)
 800c6bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c6c0:	f000 fc78 	bl	800cfb4 <__assert_func>
 800c6c4:	3101      	adds	r1, #1
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	e7ee      	b.n	800c6a8 <__lshift+0x1c>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	f100 0114 	add.w	r1, r0, #20
 800c6d0:	f100 0210 	add.w	r2, r0, #16
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	4553      	cmp	r3, sl
 800c6d8:	db37      	blt.n	800c74a <__lshift+0xbe>
 800c6da:	6920      	ldr	r0, [r4, #16]
 800c6dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6e0:	f104 0314 	add.w	r3, r4, #20
 800c6e4:	f019 091f 	ands.w	r9, r9, #31
 800c6e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c6f0:	d02f      	beq.n	800c752 <__lshift+0xc6>
 800c6f2:	f1c9 0e20 	rsb	lr, r9, #32
 800c6f6:	468a      	mov	sl, r1
 800c6f8:	f04f 0c00 	mov.w	ip, #0
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	fa02 f209 	lsl.w	r2, r2, r9
 800c702:	ea42 020c 	orr.w	r2, r2, ip
 800c706:	f84a 2b04 	str.w	r2, [sl], #4
 800c70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c70e:	4298      	cmp	r0, r3
 800c710:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c714:	d8f2      	bhi.n	800c6fc <__lshift+0x70>
 800c716:	1b03      	subs	r3, r0, r4
 800c718:	3b15      	subs	r3, #21
 800c71a:	f023 0303 	bic.w	r3, r3, #3
 800c71e:	3304      	adds	r3, #4
 800c720:	f104 0215 	add.w	r2, r4, #21
 800c724:	4290      	cmp	r0, r2
 800c726:	bf38      	it	cc
 800c728:	2304      	movcc	r3, #4
 800c72a:	f841 c003 	str.w	ip, [r1, r3]
 800c72e:	f1bc 0f00 	cmp.w	ip, #0
 800c732:	d001      	beq.n	800c738 <__lshift+0xac>
 800c734:	f108 0602 	add.w	r6, r8, #2
 800c738:	3e01      	subs	r6, #1
 800c73a:	4638      	mov	r0, r7
 800c73c:	612e      	str	r6, [r5, #16]
 800c73e:	4621      	mov	r1, r4
 800c740:	f7ff fdd2 	bl	800c2e8 <_Bfree>
 800c744:	4628      	mov	r0, r5
 800c746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c74a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c74e:	3301      	adds	r3, #1
 800c750:	e7c1      	b.n	800c6d6 <__lshift+0x4a>
 800c752:	3904      	subs	r1, #4
 800c754:	f853 2b04 	ldr.w	r2, [r3], #4
 800c758:	f841 2f04 	str.w	r2, [r1, #4]!
 800c75c:	4298      	cmp	r0, r3
 800c75e:	d8f9      	bhi.n	800c754 <__lshift+0xc8>
 800c760:	e7ea      	b.n	800c738 <__lshift+0xac>
 800c762:	bf00      	nop
 800c764:	0800e12b 	.word	0x0800e12b
 800c768:	0800e19c 	.word	0x0800e19c

0800c76c <__mcmp>:
 800c76c:	b530      	push	{r4, r5, lr}
 800c76e:	6902      	ldr	r2, [r0, #16]
 800c770:	690c      	ldr	r4, [r1, #16]
 800c772:	1b12      	subs	r2, r2, r4
 800c774:	d10e      	bne.n	800c794 <__mcmp+0x28>
 800c776:	f100 0314 	add.w	r3, r0, #20
 800c77a:	3114      	adds	r1, #20
 800c77c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c780:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c784:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c788:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c78c:	42a5      	cmp	r5, r4
 800c78e:	d003      	beq.n	800c798 <__mcmp+0x2c>
 800c790:	d305      	bcc.n	800c79e <__mcmp+0x32>
 800c792:	2201      	movs	r2, #1
 800c794:	4610      	mov	r0, r2
 800c796:	bd30      	pop	{r4, r5, pc}
 800c798:	4283      	cmp	r3, r0
 800c79a:	d3f3      	bcc.n	800c784 <__mcmp+0x18>
 800c79c:	e7fa      	b.n	800c794 <__mcmp+0x28>
 800c79e:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a2:	e7f7      	b.n	800c794 <__mcmp+0x28>

0800c7a4 <__mdiff>:
 800c7a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	4690      	mov	r8, r2
 800c7b2:	f7ff ffdb 	bl	800c76c <__mcmp>
 800c7b6:	1e05      	subs	r5, r0, #0
 800c7b8:	d110      	bne.n	800c7dc <__mdiff+0x38>
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f7ff fd53 	bl	800c268 <_Balloc>
 800c7c2:	b930      	cbnz	r0, 800c7d2 <__mdiff+0x2e>
 800c7c4:	4b3a      	ldr	r3, [pc, #232]	; (800c8b0 <__mdiff+0x10c>)
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	f240 2132 	movw	r1, #562	; 0x232
 800c7cc:	4839      	ldr	r0, [pc, #228]	; (800c8b4 <__mdiff+0x110>)
 800c7ce:	f000 fbf1 	bl	800cfb4 <__assert_func>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7dc:	bfa4      	itt	ge
 800c7de:	4643      	movge	r3, r8
 800c7e0:	46a0      	movge	r8, r4
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c7e8:	bfa6      	itte	ge
 800c7ea:	461c      	movge	r4, r3
 800c7ec:	2500      	movge	r5, #0
 800c7ee:	2501      	movlt	r5, #1
 800c7f0:	f7ff fd3a 	bl	800c268 <_Balloc>
 800c7f4:	b920      	cbnz	r0, 800c800 <__mdiff+0x5c>
 800c7f6:	4b2e      	ldr	r3, [pc, #184]	; (800c8b0 <__mdiff+0x10c>)
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c7fe:	e7e5      	b.n	800c7cc <__mdiff+0x28>
 800c800:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c804:	6926      	ldr	r6, [r4, #16]
 800c806:	60c5      	str	r5, [r0, #12]
 800c808:	f104 0914 	add.w	r9, r4, #20
 800c80c:	f108 0514 	add.w	r5, r8, #20
 800c810:	f100 0e14 	add.w	lr, r0, #20
 800c814:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c818:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c81c:	f108 0210 	add.w	r2, r8, #16
 800c820:	46f2      	mov	sl, lr
 800c822:	2100      	movs	r1, #0
 800c824:	f859 3b04 	ldr.w	r3, [r9], #4
 800c828:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c82c:	fa1f f883 	uxth.w	r8, r3
 800c830:	fa11 f18b 	uxtah	r1, r1, fp
 800c834:	0c1b      	lsrs	r3, r3, #16
 800c836:	eba1 0808 	sub.w	r8, r1, r8
 800c83a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c83e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c842:	fa1f f888 	uxth.w	r8, r8
 800c846:	1419      	asrs	r1, r3, #16
 800c848:	454e      	cmp	r6, r9
 800c84a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c84e:	f84a 3b04 	str.w	r3, [sl], #4
 800c852:	d8e7      	bhi.n	800c824 <__mdiff+0x80>
 800c854:	1b33      	subs	r3, r6, r4
 800c856:	3b15      	subs	r3, #21
 800c858:	f023 0303 	bic.w	r3, r3, #3
 800c85c:	3304      	adds	r3, #4
 800c85e:	3415      	adds	r4, #21
 800c860:	42a6      	cmp	r6, r4
 800c862:	bf38      	it	cc
 800c864:	2304      	movcc	r3, #4
 800c866:	441d      	add	r5, r3
 800c868:	4473      	add	r3, lr
 800c86a:	469e      	mov	lr, r3
 800c86c:	462e      	mov	r6, r5
 800c86e:	4566      	cmp	r6, ip
 800c870:	d30e      	bcc.n	800c890 <__mdiff+0xec>
 800c872:	f10c 0203 	add.w	r2, ip, #3
 800c876:	1b52      	subs	r2, r2, r5
 800c878:	f022 0203 	bic.w	r2, r2, #3
 800c87c:	3d03      	subs	r5, #3
 800c87e:	45ac      	cmp	ip, r5
 800c880:	bf38      	it	cc
 800c882:	2200      	movcc	r2, #0
 800c884:	441a      	add	r2, r3
 800c886:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c88a:	b17b      	cbz	r3, 800c8ac <__mdiff+0x108>
 800c88c:	6107      	str	r7, [r0, #16]
 800c88e:	e7a3      	b.n	800c7d8 <__mdiff+0x34>
 800c890:	f856 8b04 	ldr.w	r8, [r6], #4
 800c894:	fa11 f288 	uxtah	r2, r1, r8
 800c898:	1414      	asrs	r4, r2, #16
 800c89a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c89e:	b292      	uxth	r2, r2
 800c8a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8a4:	f84e 2b04 	str.w	r2, [lr], #4
 800c8a8:	1421      	asrs	r1, r4, #16
 800c8aa:	e7e0      	b.n	800c86e <__mdiff+0xca>
 800c8ac:	3f01      	subs	r7, #1
 800c8ae:	e7ea      	b.n	800c886 <__mdiff+0xe2>
 800c8b0:	0800e12b 	.word	0x0800e12b
 800c8b4:	0800e19c 	.word	0x0800e19c

0800c8b8 <__d2b>:
 800c8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8bc:	4689      	mov	r9, r1
 800c8be:	2101      	movs	r1, #1
 800c8c0:	ec57 6b10 	vmov	r6, r7, d0
 800c8c4:	4690      	mov	r8, r2
 800c8c6:	f7ff fccf 	bl	800c268 <_Balloc>
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	b930      	cbnz	r0, 800c8dc <__d2b+0x24>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	4b25      	ldr	r3, [pc, #148]	; (800c968 <__d2b+0xb0>)
 800c8d2:	4826      	ldr	r0, [pc, #152]	; (800c96c <__d2b+0xb4>)
 800c8d4:	f240 310a 	movw	r1, #778	; 0x30a
 800c8d8:	f000 fb6c 	bl	800cfb4 <__assert_func>
 800c8dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c8e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c8e4:	bb35      	cbnz	r5, 800c934 <__d2b+0x7c>
 800c8e6:	2e00      	cmp	r6, #0
 800c8e8:	9301      	str	r3, [sp, #4]
 800c8ea:	d028      	beq.n	800c93e <__d2b+0x86>
 800c8ec:	4668      	mov	r0, sp
 800c8ee:	9600      	str	r6, [sp, #0]
 800c8f0:	f7ff fd82 	bl	800c3f8 <__lo0bits>
 800c8f4:	9900      	ldr	r1, [sp, #0]
 800c8f6:	b300      	cbz	r0, 800c93a <__d2b+0x82>
 800c8f8:	9a01      	ldr	r2, [sp, #4]
 800c8fa:	f1c0 0320 	rsb	r3, r0, #32
 800c8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c902:	430b      	orrs	r3, r1
 800c904:	40c2      	lsrs	r2, r0
 800c906:	6163      	str	r3, [r4, #20]
 800c908:	9201      	str	r2, [sp, #4]
 800c90a:	9b01      	ldr	r3, [sp, #4]
 800c90c:	61a3      	str	r3, [r4, #24]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	bf14      	ite	ne
 800c912:	2202      	movne	r2, #2
 800c914:	2201      	moveq	r2, #1
 800c916:	6122      	str	r2, [r4, #16]
 800c918:	b1d5      	cbz	r5, 800c950 <__d2b+0x98>
 800c91a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c91e:	4405      	add	r5, r0
 800c920:	f8c9 5000 	str.w	r5, [r9]
 800c924:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c928:	f8c8 0000 	str.w	r0, [r8]
 800c92c:	4620      	mov	r0, r4
 800c92e:	b003      	add	sp, #12
 800c930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c938:	e7d5      	b.n	800c8e6 <__d2b+0x2e>
 800c93a:	6161      	str	r1, [r4, #20]
 800c93c:	e7e5      	b.n	800c90a <__d2b+0x52>
 800c93e:	a801      	add	r0, sp, #4
 800c940:	f7ff fd5a 	bl	800c3f8 <__lo0bits>
 800c944:	9b01      	ldr	r3, [sp, #4]
 800c946:	6163      	str	r3, [r4, #20]
 800c948:	2201      	movs	r2, #1
 800c94a:	6122      	str	r2, [r4, #16]
 800c94c:	3020      	adds	r0, #32
 800c94e:	e7e3      	b.n	800c918 <__d2b+0x60>
 800c950:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c954:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c958:	f8c9 0000 	str.w	r0, [r9]
 800c95c:	6918      	ldr	r0, [r3, #16]
 800c95e:	f7ff fd2b 	bl	800c3b8 <__hi0bits>
 800c962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c966:	e7df      	b.n	800c928 <__d2b+0x70>
 800c968:	0800e12b 	.word	0x0800e12b
 800c96c:	0800e19c 	.word	0x0800e19c

0800c970 <_calloc_r>:
 800c970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c972:	fba1 2402 	umull	r2, r4, r1, r2
 800c976:	b94c      	cbnz	r4, 800c98c <_calloc_r+0x1c>
 800c978:	4611      	mov	r1, r2
 800c97a:	9201      	str	r2, [sp, #4]
 800c97c:	f7fd fd4c 	bl	800a418 <_malloc_r>
 800c980:	9a01      	ldr	r2, [sp, #4]
 800c982:	4605      	mov	r5, r0
 800c984:	b930      	cbnz	r0, 800c994 <_calloc_r+0x24>
 800c986:	4628      	mov	r0, r5
 800c988:	b003      	add	sp, #12
 800c98a:	bd30      	pop	{r4, r5, pc}
 800c98c:	220c      	movs	r2, #12
 800c98e:	6002      	str	r2, [r0, #0]
 800c990:	2500      	movs	r5, #0
 800c992:	e7f8      	b.n	800c986 <_calloc_r+0x16>
 800c994:	4621      	mov	r1, r4
 800c996:	f7fd fccb 	bl	800a330 <memset>
 800c99a:	e7f4      	b.n	800c986 <_calloc_r+0x16>

0800c99c <__ssputs_r>:
 800c99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a0:	688e      	ldr	r6, [r1, #8]
 800c9a2:	429e      	cmp	r6, r3
 800c9a4:	4682      	mov	sl, r0
 800c9a6:	460c      	mov	r4, r1
 800c9a8:	4690      	mov	r8, r2
 800c9aa:	461f      	mov	r7, r3
 800c9ac:	d838      	bhi.n	800ca20 <__ssputs_r+0x84>
 800c9ae:	898a      	ldrh	r2, [r1, #12]
 800c9b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9b4:	d032      	beq.n	800ca1c <__ssputs_r+0x80>
 800c9b6:	6825      	ldr	r5, [r4, #0]
 800c9b8:	6909      	ldr	r1, [r1, #16]
 800c9ba:	eba5 0901 	sub.w	r9, r5, r1
 800c9be:	6965      	ldr	r5, [r4, #20]
 800c9c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	444b      	add	r3, r9
 800c9cc:	106d      	asrs	r5, r5, #1
 800c9ce:	429d      	cmp	r5, r3
 800c9d0:	bf38      	it	cc
 800c9d2:	461d      	movcc	r5, r3
 800c9d4:	0553      	lsls	r3, r2, #21
 800c9d6:	d531      	bpl.n	800ca3c <__ssputs_r+0xa0>
 800c9d8:	4629      	mov	r1, r5
 800c9da:	f7fd fd1d 	bl	800a418 <_malloc_r>
 800c9de:	4606      	mov	r6, r0
 800c9e0:	b950      	cbnz	r0, 800c9f8 <__ssputs_r+0x5c>
 800c9e2:	230c      	movs	r3, #12
 800c9e4:	f8ca 3000 	str.w	r3, [sl]
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ee:	81a3      	strh	r3, [r4, #12]
 800c9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9f8:	6921      	ldr	r1, [r4, #16]
 800c9fa:	464a      	mov	r2, r9
 800c9fc:	f7ff fc1a 	bl	800c234 <memcpy>
 800ca00:	89a3      	ldrh	r3, [r4, #12]
 800ca02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca0a:	81a3      	strh	r3, [r4, #12]
 800ca0c:	6126      	str	r6, [r4, #16]
 800ca0e:	6165      	str	r5, [r4, #20]
 800ca10:	444e      	add	r6, r9
 800ca12:	eba5 0509 	sub.w	r5, r5, r9
 800ca16:	6026      	str	r6, [r4, #0]
 800ca18:	60a5      	str	r5, [r4, #8]
 800ca1a:	463e      	mov	r6, r7
 800ca1c:	42be      	cmp	r6, r7
 800ca1e:	d900      	bls.n	800ca22 <__ssputs_r+0x86>
 800ca20:	463e      	mov	r6, r7
 800ca22:	6820      	ldr	r0, [r4, #0]
 800ca24:	4632      	mov	r2, r6
 800ca26:	4641      	mov	r1, r8
 800ca28:	f000 fb4a 	bl	800d0c0 <memmove>
 800ca2c:	68a3      	ldr	r3, [r4, #8]
 800ca2e:	1b9b      	subs	r3, r3, r6
 800ca30:	60a3      	str	r3, [r4, #8]
 800ca32:	6823      	ldr	r3, [r4, #0]
 800ca34:	4433      	add	r3, r6
 800ca36:	6023      	str	r3, [r4, #0]
 800ca38:	2000      	movs	r0, #0
 800ca3a:	e7db      	b.n	800c9f4 <__ssputs_r+0x58>
 800ca3c:	462a      	mov	r2, r5
 800ca3e:	f000 fb59 	bl	800d0f4 <_realloc_r>
 800ca42:	4606      	mov	r6, r0
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d1e1      	bne.n	800ca0c <__ssputs_r+0x70>
 800ca48:	6921      	ldr	r1, [r4, #16]
 800ca4a:	4650      	mov	r0, sl
 800ca4c:	f7fd fc78 	bl	800a340 <_free_r>
 800ca50:	e7c7      	b.n	800c9e2 <__ssputs_r+0x46>
	...

0800ca54 <_svfiprintf_r>:
 800ca54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca58:	4698      	mov	r8, r3
 800ca5a:	898b      	ldrh	r3, [r1, #12]
 800ca5c:	061b      	lsls	r3, r3, #24
 800ca5e:	b09d      	sub	sp, #116	; 0x74
 800ca60:	4607      	mov	r7, r0
 800ca62:	460d      	mov	r5, r1
 800ca64:	4614      	mov	r4, r2
 800ca66:	d50e      	bpl.n	800ca86 <_svfiprintf_r+0x32>
 800ca68:	690b      	ldr	r3, [r1, #16]
 800ca6a:	b963      	cbnz	r3, 800ca86 <_svfiprintf_r+0x32>
 800ca6c:	2140      	movs	r1, #64	; 0x40
 800ca6e:	f7fd fcd3 	bl	800a418 <_malloc_r>
 800ca72:	6028      	str	r0, [r5, #0]
 800ca74:	6128      	str	r0, [r5, #16]
 800ca76:	b920      	cbnz	r0, 800ca82 <_svfiprintf_r+0x2e>
 800ca78:	230c      	movs	r3, #12
 800ca7a:	603b      	str	r3, [r7, #0]
 800ca7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca80:	e0d1      	b.n	800cc26 <_svfiprintf_r+0x1d2>
 800ca82:	2340      	movs	r3, #64	; 0x40
 800ca84:	616b      	str	r3, [r5, #20]
 800ca86:	2300      	movs	r3, #0
 800ca88:	9309      	str	r3, [sp, #36]	; 0x24
 800ca8a:	2320      	movs	r3, #32
 800ca8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca90:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca94:	2330      	movs	r3, #48	; 0x30
 800ca96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc40 <_svfiprintf_r+0x1ec>
 800ca9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca9e:	f04f 0901 	mov.w	r9, #1
 800caa2:	4623      	mov	r3, r4
 800caa4:	469a      	mov	sl, r3
 800caa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caaa:	b10a      	cbz	r2, 800cab0 <_svfiprintf_r+0x5c>
 800caac:	2a25      	cmp	r2, #37	; 0x25
 800caae:	d1f9      	bne.n	800caa4 <_svfiprintf_r+0x50>
 800cab0:	ebba 0b04 	subs.w	fp, sl, r4
 800cab4:	d00b      	beq.n	800cace <_svfiprintf_r+0x7a>
 800cab6:	465b      	mov	r3, fp
 800cab8:	4622      	mov	r2, r4
 800caba:	4629      	mov	r1, r5
 800cabc:	4638      	mov	r0, r7
 800cabe:	f7ff ff6d 	bl	800c99c <__ssputs_r>
 800cac2:	3001      	adds	r0, #1
 800cac4:	f000 80aa 	beq.w	800cc1c <_svfiprintf_r+0x1c8>
 800cac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caca:	445a      	add	r2, fp
 800cacc:	9209      	str	r2, [sp, #36]	; 0x24
 800cace:	f89a 3000 	ldrb.w	r3, [sl]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f000 80a2 	beq.w	800cc1c <_svfiprintf_r+0x1c8>
 800cad8:	2300      	movs	r3, #0
 800cada:	f04f 32ff 	mov.w	r2, #4294967295
 800cade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cae2:	f10a 0a01 	add.w	sl, sl, #1
 800cae6:	9304      	str	r3, [sp, #16]
 800cae8:	9307      	str	r3, [sp, #28]
 800caea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caee:	931a      	str	r3, [sp, #104]	; 0x68
 800caf0:	4654      	mov	r4, sl
 800caf2:	2205      	movs	r2, #5
 800caf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf8:	4851      	ldr	r0, [pc, #324]	; (800cc40 <_svfiprintf_r+0x1ec>)
 800cafa:	f7f3 fb99 	bl	8000230 <memchr>
 800cafe:	9a04      	ldr	r2, [sp, #16]
 800cb00:	b9d8      	cbnz	r0, 800cb3a <_svfiprintf_r+0xe6>
 800cb02:	06d0      	lsls	r0, r2, #27
 800cb04:	bf44      	itt	mi
 800cb06:	2320      	movmi	r3, #32
 800cb08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb0c:	0711      	lsls	r1, r2, #28
 800cb0e:	bf44      	itt	mi
 800cb10:	232b      	movmi	r3, #43	; 0x2b
 800cb12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb16:	f89a 3000 	ldrb.w	r3, [sl]
 800cb1a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb1c:	d015      	beq.n	800cb4a <_svfiprintf_r+0xf6>
 800cb1e:	9a07      	ldr	r2, [sp, #28]
 800cb20:	4654      	mov	r4, sl
 800cb22:	2000      	movs	r0, #0
 800cb24:	f04f 0c0a 	mov.w	ip, #10
 800cb28:	4621      	mov	r1, r4
 800cb2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb2e:	3b30      	subs	r3, #48	; 0x30
 800cb30:	2b09      	cmp	r3, #9
 800cb32:	d94e      	bls.n	800cbd2 <_svfiprintf_r+0x17e>
 800cb34:	b1b0      	cbz	r0, 800cb64 <_svfiprintf_r+0x110>
 800cb36:	9207      	str	r2, [sp, #28]
 800cb38:	e014      	b.n	800cb64 <_svfiprintf_r+0x110>
 800cb3a:	eba0 0308 	sub.w	r3, r0, r8
 800cb3e:	fa09 f303 	lsl.w	r3, r9, r3
 800cb42:	4313      	orrs	r3, r2
 800cb44:	9304      	str	r3, [sp, #16]
 800cb46:	46a2      	mov	sl, r4
 800cb48:	e7d2      	b.n	800caf0 <_svfiprintf_r+0x9c>
 800cb4a:	9b03      	ldr	r3, [sp, #12]
 800cb4c:	1d19      	adds	r1, r3, #4
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	9103      	str	r1, [sp, #12]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	bfbb      	ittet	lt
 800cb56:	425b      	neglt	r3, r3
 800cb58:	f042 0202 	orrlt.w	r2, r2, #2
 800cb5c:	9307      	strge	r3, [sp, #28]
 800cb5e:	9307      	strlt	r3, [sp, #28]
 800cb60:	bfb8      	it	lt
 800cb62:	9204      	strlt	r2, [sp, #16]
 800cb64:	7823      	ldrb	r3, [r4, #0]
 800cb66:	2b2e      	cmp	r3, #46	; 0x2e
 800cb68:	d10c      	bne.n	800cb84 <_svfiprintf_r+0x130>
 800cb6a:	7863      	ldrb	r3, [r4, #1]
 800cb6c:	2b2a      	cmp	r3, #42	; 0x2a
 800cb6e:	d135      	bne.n	800cbdc <_svfiprintf_r+0x188>
 800cb70:	9b03      	ldr	r3, [sp, #12]
 800cb72:	1d1a      	adds	r2, r3, #4
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	9203      	str	r2, [sp, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	bfb8      	it	lt
 800cb7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb80:	3402      	adds	r4, #2
 800cb82:	9305      	str	r3, [sp, #20]
 800cb84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc50 <_svfiprintf_r+0x1fc>
 800cb88:	7821      	ldrb	r1, [r4, #0]
 800cb8a:	2203      	movs	r2, #3
 800cb8c:	4650      	mov	r0, sl
 800cb8e:	f7f3 fb4f 	bl	8000230 <memchr>
 800cb92:	b140      	cbz	r0, 800cba6 <_svfiprintf_r+0x152>
 800cb94:	2340      	movs	r3, #64	; 0x40
 800cb96:	eba0 000a 	sub.w	r0, r0, sl
 800cb9a:	fa03 f000 	lsl.w	r0, r3, r0
 800cb9e:	9b04      	ldr	r3, [sp, #16]
 800cba0:	4303      	orrs	r3, r0
 800cba2:	3401      	adds	r4, #1
 800cba4:	9304      	str	r3, [sp, #16]
 800cba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbaa:	4826      	ldr	r0, [pc, #152]	; (800cc44 <_svfiprintf_r+0x1f0>)
 800cbac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbb0:	2206      	movs	r2, #6
 800cbb2:	f7f3 fb3d 	bl	8000230 <memchr>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d038      	beq.n	800cc2c <_svfiprintf_r+0x1d8>
 800cbba:	4b23      	ldr	r3, [pc, #140]	; (800cc48 <_svfiprintf_r+0x1f4>)
 800cbbc:	bb1b      	cbnz	r3, 800cc06 <_svfiprintf_r+0x1b2>
 800cbbe:	9b03      	ldr	r3, [sp, #12]
 800cbc0:	3307      	adds	r3, #7
 800cbc2:	f023 0307 	bic.w	r3, r3, #7
 800cbc6:	3308      	adds	r3, #8
 800cbc8:	9303      	str	r3, [sp, #12]
 800cbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbcc:	4433      	add	r3, r6
 800cbce:	9309      	str	r3, [sp, #36]	; 0x24
 800cbd0:	e767      	b.n	800caa2 <_svfiprintf_r+0x4e>
 800cbd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	2001      	movs	r0, #1
 800cbda:	e7a5      	b.n	800cb28 <_svfiprintf_r+0xd4>
 800cbdc:	2300      	movs	r3, #0
 800cbde:	3401      	adds	r4, #1
 800cbe0:	9305      	str	r3, [sp, #20]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	f04f 0c0a 	mov.w	ip, #10
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbee:	3a30      	subs	r2, #48	; 0x30
 800cbf0:	2a09      	cmp	r2, #9
 800cbf2:	d903      	bls.n	800cbfc <_svfiprintf_r+0x1a8>
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d0c5      	beq.n	800cb84 <_svfiprintf_r+0x130>
 800cbf8:	9105      	str	r1, [sp, #20]
 800cbfa:	e7c3      	b.n	800cb84 <_svfiprintf_r+0x130>
 800cbfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc00:	4604      	mov	r4, r0
 800cc02:	2301      	movs	r3, #1
 800cc04:	e7f0      	b.n	800cbe8 <_svfiprintf_r+0x194>
 800cc06:	ab03      	add	r3, sp, #12
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	462a      	mov	r2, r5
 800cc0c:	4b0f      	ldr	r3, [pc, #60]	; (800cc4c <_svfiprintf_r+0x1f8>)
 800cc0e:	a904      	add	r1, sp, #16
 800cc10:	4638      	mov	r0, r7
 800cc12:	f7fd fd15 	bl	800a640 <_printf_float>
 800cc16:	1c42      	adds	r2, r0, #1
 800cc18:	4606      	mov	r6, r0
 800cc1a:	d1d6      	bne.n	800cbca <_svfiprintf_r+0x176>
 800cc1c:	89ab      	ldrh	r3, [r5, #12]
 800cc1e:	065b      	lsls	r3, r3, #25
 800cc20:	f53f af2c 	bmi.w	800ca7c <_svfiprintf_r+0x28>
 800cc24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc26:	b01d      	add	sp, #116	; 0x74
 800cc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2c:	ab03      	add	r3, sp, #12
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	462a      	mov	r2, r5
 800cc32:	4b06      	ldr	r3, [pc, #24]	; (800cc4c <_svfiprintf_r+0x1f8>)
 800cc34:	a904      	add	r1, sp, #16
 800cc36:	4638      	mov	r0, r7
 800cc38:	f7fd ffa6 	bl	800ab88 <_printf_i>
 800cc3c:	e7eb      	b.n	800cc16 <_svfiprintf_r+0x1c2>
 800cc3e:	bf00      	nop
 800cc40:	0800e2f4 	.word	0x0800e2f4
 800cc44:	0800e2fe 	.word	0x0800e2fe
 800cc48:	0800a641 	.word	0x0800a641
 800cc4c:	0800c99d 	.word	0x0800c99d
 800cc50:	0800e2fa 	.word	0x0800e2fa

0800cc54 <__sfputc_r>:
 800cc54:	6893      	ldr	r3, [r2, #8]
 800cc56:	3b01      	subs	r3, #1
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	b410      	push	{r4}
 800cc5c:	6093      	str	r3, [r2, #8]
 800cc5e:	da08      	bge.n	800cc72 <__sfputc_r+0x1e>
 800cc60:	6994      	ldr	r4, [r2, #24]
 800cc62:	42a3      	cmp	r3, r4
 800cc64:	db01      	blt.n	800cc6a <__sfputc_r+0x16>
 800cc66:	290a      	cmp	r1, #10
 800cc68:	d103      	bne.n	800cc72 <__sfputc_r+0x1e>
 800cc6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc6e:	f7fe b983 	b.w	800af78 <__swbuf_r>
 800cc72:	6813      	ldr	r3, [r2, #0]
 800cc74:	1c58      	adds	r0, r3, #1
 800cc76:	6010      	str	r0, [r2, #0]
 800cc78:	7019      	strb	r1, [r3, #0]
 800cc7a:	4608      	mov	r0, r1
 800cc7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <__sfputs_r>:
 800cc82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc84:	4606      	mov	r6, r0
 800cc86:	460f      	mov	r7, r1
 800cc88:	4614      	mov	r4, r2
 800cc8a:	18d5      	adds	r5, r2, r3
 800cc8c:	42ac      	cmp	r4, r5
 800cc8e:	d101      	bne.n	800cc94 <__sfputs_r+0x12>
 800cc90:	2000      	movs	r0, #0
 800cc92:	e007      	b.n	800cca4 <__sfputs_r+0x22>
 800cc94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc98:	463a      	mov	r2, r7
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f7ff ffda 	bl	800cc54 <__sfputc_r>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d1f3      	bne.n	800cc8c <__sfputs_r+0xa>
 800cca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cca8 <_vfiprintf_r>:
 800cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccac:	460d      	mov	r5, r1
 800ccae:	b09d      	sub	sp, #116	; 0x74
 800ccb0:	4614      	mov	r4, r2
 800ccb2:	4698      	mov	r8, r3
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	b118      	cbz	r0, 800ccc0 <_vfiprintf_r+0x18>
 800ccb8:	6983      	ldr	r3, [r0, #24]
 800ccba:	b90b      	cbnz	r3, 800ccc0 <_vfiprintf_r+0x18>
 800ccbc:	f7ff f9b0 	bl	800c020 <__sinit>
 800ccc0:	4b89      	ldr	r3, [pc, #548]	; (800cee8 <_vfiprintf_r+0x240>)
 800ccc2:	429d      	cmp	r5, r3
 800ccc4:	d11b      	bne.n	800ccfe <_vfiprintf_r+0x56>
 800ccc6:	6875      	ldr	r5, [r6, #4]
 800ccc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccca:	07d9      	lsls	r1, r3, #31
 800cccc:	d405      	bmi.n	800ccda <_vfiprintf_r+0x32>
 800ccce:	89ab      	ldrh	r3, [r5, #12]
 800ccd0:	059a      	lsls	r2, r3, #22
 800ccd2:	d402      	bmi.n	800ccda <_vfiprintf_r+0x32>
 800ccd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccd6:	f7ff fa46 	bl	800c166 <__retarget_lock_acquire_recursive>
 800ccda:	89ab      	ldrh	r3, [r5, #12]
 800ccdc:	071b      	lsls	r3, r3, #28
 800ccde:	d501      	bpl.n	800cce4 <_vfiprintf_r+0x3c>
 800cce0:	692b      	ldr	r3, [r5, #16]
 800cce2:	b9eb      	cbnz	r3, 800cd20 <_vfiprintf_r+0x78>
 800cce4:	4629      	mov	r1, r5
 800cce6:	4630      	mov	r0, r6
 800cce8:	f7fe f998 	bl	800b01c <__swsetup_r>
 800ccec:	b1c0      	cbz	r0, 800cd20 <_vfiprintf_r+0x78>
 800ccee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccf0:	07dc      	lsls	r4, r3, #31
 800ccf2:	d50e      	bpl.n	800cd12 <_vfiprintf_r+0x6a>
 800ccf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf8:	b01d      	add	sp, #116	; 0x74
 800ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfe:	4b7b      	ldr	r3, [pc, #492]	; (800ceec <_vfiprintf_r+0x244>)
 800cd00:	429d      	cmp	r5, r3
 800cd02:	d101      	bne.n	800cd08 <_vfiprintf_r+0x60>
 800cd04:	68b5      	ldr	r5, [r6, #8]
 800cd06:	e7df      	b.n	800ccc8 <_vfiprintf_r+0x20>
 800cd08:	4b79      	ldr	r3, [pc, #484]	; (800cef0 <_vfiprintf_r+0x248>)
 800cd0a:	429d      	cmp	r5, r3
 800cd0c:	bf08      	it	eq
 800cd0e:	68f5      	ldreq	r5, [r6, #12]
 800cd10:	e7da      	b.n	800ccc8 <_vfiprintf_r+0x20>
 800cd12:	89ab      	ldrh	r3, [r5, #12]
 800cd14:	0598      	lsls	r0, r3, #22
 800cd16:	d4ed      	bmi.n	800ccf4 <_vfiprintf_r+0x4c>
 800cd18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd1a:	f7ff fa25 	bl	800c168 <__retarget_lock_release_recursive>
 800cd1e:	e7e9      	b.n	800ccf4 <_vfiprintf_r+0x4c>
 800cd20:	2300      	movs	r3, #0
 800cd22:	9309      	str	r3, [sp, #36]	; 0x24
 800cd24:	2320      	movs	r3, #32
 800cd26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd2e:	2330      	movs	r3, #48	; 0x30
 800cd30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cef4 <_vfiprintf_r+0x24c>
 800cd34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd38:	f04f 0901 	mov.w	r9, #1
 800cd3c:	4623      	mov	r3, r4
 800cd3e:	469a      	mov	sl, r3
 800cd40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd44:	b10a      	cbz	r2, 800cd4a <_vfiprintf_r+0xa2>
 800cd46:	2a25      	cmp	r2, #37	; 0x25
 800cd48:	d1f9      	bne.n	800cd3e <_vfiprintf_r+0x96>
 800cd4a:	ebba 0b04 	subs.w	fp, sl, r4
 800cd4e:	d00b      	beq.n	800cd68 <_vfiprintf_r+0xc0>
 800cd50:	465b      	mov	r3, fp
 800cd52:	4622      	mov	r2, r4
 800cd54:	4629      	mov	r1, r5
 800cd56:	4630      	mov	r0, r6
 800cd58:	f7ff ff93 	bl	800cc82 <__sfputs_r>
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	f000 80aa 	beq.w	800ceb6 <_vfiprintf_r+0x20e>
 800cd62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd64:	445a      	add	r2, fp
 800cd66:	9209      	str	r2, [sp, #36]	; 0x24
 800cd68:	f89a 3000 	ldrb.w	r3, [sl]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f000 80a2 	beq.w	800ceb6 <_vfiprintf_r+0x20e>
 800cd72:	2300      	movs	r3, #0
 800cd74:	f04f 32ff 	mov.w	r2, #4294967295
 800cd78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd7c:	f10a 0a01 	add.w	sl, sl, #1
 800cd80:	9304      	str	r3, [sp, #16]
 800cd82:	9307      	str	r3, [sp, #28]
 800cd84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd88:	931a      	str	r3, [sp, #104]	; 0x68
 800cd8a:	4654      	mov	r4, sl
 800cd8c:	2205      	movs	r2, #5
 800cd8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd92:	4858      	ldr	r0, [pc, #352]	; (800cef4 <_vfiprintf_r+0x24c>)
 800cd94:	f7f3 fa4c 	bl	8000230 <memchr>
 800cd98:	9a04      	ldr	r2, [sp, #16]
 800cd9a:	b9d8      	cbnz	r0, 800cdd4 <_vfiprintf_r+0x12c>
 800cd9c:	06d1      	lsls	r1, r2, #27
 800cd9e:	bf44      	itt	mi
 800cda0:	2320      	movmi	r3, #32
 800cda2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cda6:	0713      	lsls	r3, r2, #28
 800cda8:	bf44      	itt	mi
 800cdaa:	232b      	movmi	r3, #43	; 0x2b
 800cdac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdb0:	f89a 3000 	ldrb.w	r3, [sl]
 800cdb4:	2b2a      	cmp	r3, #42	; 0x2a
 800cdb6:	d015      	beq.n	800cde4 <_vfiprintf_r+0x13c>
 800cdb8:	9a07      	ldr	r2, [sp, #28]
 800cdba:	4654      	mov	r4, sl
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	f04f 0c0a 	mov.w	ip, #10
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdc8:	3b30      	subs	r3, #48	; 0x30
 800cdca:	2b09      	cmp	r3, #9
 800cdcc:	d94e      	bls.n	800ce6c <_vfiprintf_r+0x1c4>
 800cdce:	b1b0      	cbz	r0, 800cdfe <_vfiprintf_r+0x156>
 800cdd0:	9207      	str	r2, [sp, #28]
 800cdd2:	e014      	b.n	800cdfe <_vfiprintf_r+0x156>
 800cdd4:	eba0 0308 	sub.w	r3, r0, r8
 800cdd8:	fa09 f303 	lsl.w	r3, r9, r3
 800cddc:	4313      	orrs	r3, r2
 800cdde:	9304      	str	r3, [sp, #16]
 800cde0:	46a2      	mov	sl, r4
 800cde2:	e7d2      	b.n	800cd8a <_vfiprintf_r+0xe2>
 800cde4:	9b03      	ldr	r3, [sp, #12]
 800cde6:	1d19      	adds	r1, r3, #4
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	9103      	str	r1, [sp, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	bfbb      	ittet	lt
 800cdf0:	425b      	neglt	r3, r3
 800cdf2:	f042 0202 	orrlt.w	r2, r2, #2
 800cdf6:	9307      	strge	r3, [sp, #28]
 800cdf8:	9307      	strlt	r3, [sp, #28]
 800cdfa:	bfb8      	it	lt
 800cdfc:	9204      	strlt	r2, [sp, #16]
 800cdfe:	7823      	ldrb	r3, [r4, #0]
 800ce00:	2b2e      	cmp	r3, #46	; 0x2e
 800ce02:	d10c      	bne.n	800ce1e <_vfiprintf_r+0x176>
 800ce04:	7863      	ldrb	r3, [r4, #1]
 800ce06:	2b2a      	cmp	r3, #42	; 0x2a
 800ce08:	d135      	bne.n	800ce76 <_vfiprintf_r+0x1ce>
 800ce0a:	9b03      	ldr	r3, [sp, #12]
 800ce0c:	1d1a      	adds	r2, r3, #4
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	9203      	str	r2, [sp, #12]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	bfb8      	it	lt
 800ce16:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce1a:	3402      	adds	r4, #2
 800ce1c:	9305      	str	r3, [sp, #20]
 800ce1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cf04 <_vfiprintf_r+0x25c>
 800ce22:	7821      	ldrb	r1, [r4, #0]
 800ce24:	2203      	movs	r2, #3
 800ce26:	4650      	mov	r0, sl
 800ce28:	f7f3 fa02 	bl	8000230 <memchr>
 800ce2c:	b140      	cbz	r0, 800ce40 <_vfiprintf_r+0x198>
 800ce2e:	2340      	movs	r3, #64	; 0x40
 800ce30:	eba0 000a 	sub.w	r0, r0, sl
 800ce34:	fa03 f000 	lsl.w	r0, r3, r0
 800ce38:	9b04      	ldr	r3, [sp, #16]
 800ce3a:	4303      	orrs	r3, r0
 800ce3c:	3401      	adds	r4, #1
 800ce3e:	9304      	str	r3, [sp, #16]
 800ce40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce44:	482c      	ldr	r0, [pc, #176]	; (800cef8 <_vfiprintf_r+0x250>)
 800ce46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce4a:	2206      	movs	r2, #6
 800ce4c:	f7f3 f9f0 	bl	8000230 <memchr>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d03f      	beq.n	800ced4 <_vfiprintf_r+0x22c>
 800ce54:	4b29      	ldr	r3, [pc, #164]	; (800cefc <_vfiprintf_r+0x254>)
 800ce56:	bb1b      	cbnz	r3, 800cea0 <_vfiprintf_r+0x1f8>
 800ce58:	9b03      	ldr	r3, [sp, #12]
 800ce5a:	3307      	adds	r3, #7
 800ce5c:	f023 0307 	bic.w	r3, r3, #7
 800ce60:	3308      	adds	r3, #8
 800ce62:	9303      	str	r3, [sp, #12]
 800ce64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce66:	443b      	add	r3, r7
 800ce68:	9309      	str	r3, [sp, #36]	; 0x24
 800ce6a:	e767      	b.n	800cd3c <_vfiprintf_r+0x94>
 800ce6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce70:	460c      	mov	r4, r1
 800ce72:	2001      	movs	r0, #1
 800ce74:	e7a5      	b.n	800cdc2 <_vfiprintf_r+0x11a>
 800ce76:	2300      	movs	r3, #0
 800ce78:	3401      	adds	r4, #1
 800ce7a:	9305      	str	r3, [sp, #20]
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	f04f 0c0a 	mov.w	ip, #10
 800ce82:	4620      	mov	r0, r4
 800ce84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce88:	3a30      	subs	r2, #48	; 0x30
 800ce8a:	2a09      	cmp	r2, #9
 800ce8c:	d903      	bls.n	800ce96 <_vfiprintf_r+0x1ee>
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0c5      	beq.n	800ce1e <_vfiprintf_r+0x176>
 800ce92:	9105      	str	r1, [sp, #20]
 800ce94:	e7c3      	b.n	800ce1e <_vfiprintf_r+0x176>
 800ce96:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e7f0      	b.n	800ce82 <_vfiprintf_r+0x1da>
 800cea0:	ab03      	add	r3, sp, #12
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	462a      	mov	r2, r5
 800cea6:	4b16      	ldr	r3, [pc, #88]	; (800cf00 <_vfiprintf_r+0x258>)
 800cea8:	a904      	add	r1, sp, #16
 800ceaa:	4630      	mov	r0, r6
 800ceac:	f7fd fbc8 	bl	800a640 <_printf_float>
 800ceb0:	4607      	mov	r7, r0
 800ceb2:	1c78      	adds	r0, r7, #1
 800ceb4:	d1d6      	bne.n	800ce64 <_vfiprintf_r+0x1bc>
 800ceb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ceb8:	07d9      	lsls	r1, r3, #31
 800ceba:	d405      	bmi.n	800cec8 <_vfiprintf_r+0x220>
 800cebc:	89ab      	ldrh	r3, [r5, #12]
 800cebe:	059a      	lsls	r2, r3, #22
 800cec0:	d402      	bmi.n	800cec8 <_vfiprintf_r+0x220>
 800cec2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cec4:	f7ff f950 	bl	800c168 <__retarget_lock_release_recursive>
 800cec8:	89ab      	ldrh	r3, [r5, #12]
 800ceca:	065b      	lsls	r3, r3, #25
 800cecc:	f53f af12 	bmi.w	800ccf4 <_vfiprintf_r+0x4c>
 800ced0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ced2:	e711      	b.n	800ccf8 <_vfiprintf_r+0x50>
 800ced4:	ab03      	add	r3, sp, #12
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	462a      	mov	r2, r5
 800ceda:	4b09      	ldr	r3, [pc, #36]	; (800cf00 <_vfiprintf_r+0x258>)
 800cedc:	a904      	add	r1, sp, #16
 800cede:	4630      	mov	r0, r6
 800cee0:	f7fd fe52 	bl	800ab88 <_printf_i>
 800cee4:	e7e4      	b.n	800ceb0 <_vfiprintf_r+0x208>
 800cee6:	bf00      	nop
 800cee8:	0800e15c 	.word	0x0800e15c
 800ceec:	0800e17c 	.word	0x0800e17c
 800cef0:	0800e13c 	.word	0x0800e13c
 800cef4:	0800e2f4 	.word	0x0800e2f4
 800cef8:	0800e2fe 	.word	0x0800e2fe
 800cefc:	0800a641 	.word	0x0800a641
 800cf00:	0800cc83 	.word	0x0800cc83
 800cf04:	0800e2fa 	.word	0x0800e2fa

0800cf08 <__sread>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf10:	f000 f920 	bl	800d154 <_read_r>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	bfab      	itete	ge
 800cf18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf1a:	89a3      	ldrhlt	r3, [r4, #12]
 800cf1c:	181b      	addge	r3, r3, r0
 800cf1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf22:	bfac      	ite	ge
 800cf24:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf26:	81a3      	strhlt	r3, [r4, #12]
 800cf28:	bd10      	pop	{r4, pc}

0800cf2a <__swrite>:
 800cf2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf2e:	461f      	mov	r7, r3
 800cf30:	898b      	ldrh	r3, [r1, #12]
 800cf32:	05db      	lsls	r3, r3, #23
 800cf34:	4605      	mov	r5, r0
 800cf36:	460c      	mov	r4, r1
 800cf38:	4616      	mov	r6, r2
 800cf3a:	d505      	bpl.n	800cf48 <__swrite+0x1e>
 800cf3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf40:	2302      	movs	r3, #2
 800cf42:	2200      	movs	r2, #0
 800cf44:	f000 f898 	bl	800d078 <_lseek_r>
 800cf48:	89a3      	ldrh	r3, [r4, #12]
 800cf4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf52:	81a3      	strh	r3, [r4, #12]
 800cf54:	4632      	mov	r2, r6
 800cf56:	463b      	mov	r3, r7
 800cf58:	4628      	mov	r0, r5
 800cf5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5e:	f000 b817 	b.w	800cf90 <_write_r>

0800cf62 <__sseek>:
 800cf62:	b510      	push	{r4, lr}
 800cf64:	460c      	mov	r4, r1
 800cf66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf6a:	f000 f885 	bl	800d078 <_lseek_r>
 800cf6e:	1c43      	adds	r3, r0, #1
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	bf15      	itete	ne
 800cf74:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf7e:	81a3      	strheq	r3, [r4, #12]
 800cf80:	bf18      	it	ne
 800cf82:	81a3      	strhne	r3, [r4, #12]
 800cf84:	bd10      	pop	{r4, pc}

0800cf86 <__sclose>:
 800cf86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf8a:	f000 b831 	b.w	800cff0 <_close_r>
	...

0800cf90 <_write_r>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4d07      	ldr	r5, [pc, #28]	; (800cfb0 <_write_r+0x20>)
 800cf94:	4604      	mov	r4, r0
 800cf96:	4608      	mov	r0, r1
 800cf98:	4611      	mov	r1, r2
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	602a      	str	r2, [r5, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	f7f5 ff93 	bl	8002eca <_write>
 800cfa4:	1c43      	adds	r3, r0, #1
 800cfa6:	d102      	bne.n	800cfae <_write_r+0x1e>
 800cfa8:	682b      	ldr	r3, [r5, #0]
 800cfaa:	b103      	cbz	r3, 800cfae <_write_r+0x1e>
 800cfac:	6023      	str	r3, [r4, #0]
 800cfae:	bd38      	pop	{r3, r4, r5, pc}
 800cfb0:	20000884 	.word	0x20000884

0800cfb4 <__assert_func>:
 800cfb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfb6:	4614      	mov	r4, r2
 800cfb8:	461a      	mov	r2, r3
 800cfba:	4b09      	ldr	r3, [pc, #36]	; (800cfe0 <__assert_func+0x2c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	68d8      	ldr	r0, [r3, #12]
 800cfc2:	b14c      	cbz	r4, 800cfd8 <__assert_func+0x24>
 800cfc4:	4b07      	ldr	r3, [pc, #28]	; (800cfe4 <__assert_func+0x30>)
 800cfc6:	9100      	str	r1, [sp, #0]
 800cfc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfcc:	4906      	ldr	r1, [pc, #24]	; (800cfe8 <__assert_func+0x34>)
 800cfce:	462b      	mov	r3, r5
 800cfd0:	f000 f81e 	bl	800d010 <fiprintf>
 800cfd4:	f000 f8dd 	bl	800d192 <abort>
 800cfd8:	4b04      	ldr	r3, [pc, #16]	; (800cfec <__assert_func+0x38>)
 800cfda:	461c      	mov	r4, r3
 800cfdc:	e7f3      	b.n	800cfc6 <__assert_func+0x12>
 800cfde:	bf00      	nop
 800cfe0:	20000024 	.word	0x20000024
 800cfe4:	0800e305 	.word	0x0800e305
 800cfe8:	0800e312 	.word	0x0800e312
 800cfec:	0800e340 	.word	0x0800e340

0800cff0 <_close_r>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	4d06      	ldr	r5, [pc, #24]	; (800d00c <_close_r+0x1c>)
 800cff4:	2300      	movs	r3, #0
 800cff6:	4604      	mov	r4, r0
 800cff8:	4608      	mov	r0, r1
 800cffa:	602b      	str	r3, [r5, #0]
 800cffc:	f7f5 ff81 	bl	8002f02 <_close>
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	d102      	bne.n	800d00a <_close_r+0x1a>
 800d004:	682b      	ldr	r3, [r5, #0]
 800d006:	b103      	cbz	r3, 800d00a <_close_r+0x1a>
 800d008:	6023      	str	r3, [r4, #0]
 800d00a:	bd38      	pop	{r3, r4, r5, pc}
 800d00c:	20000884 	.word	0x20000884

0800d010 <fiprintf>:
 800d010:	b40e      	push	{r1, r2, r3}
 800d012:	b503      	push	{r0, r1, lr}
 800d014:	4601      	mov	r1, r0
 800d016:	ab03      	add	r3, sp, #12
 800d018:	4805      	ldr	r0, [pc, #20]	; (800d030 <fiprintf+0x20>)
 800d01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d01e:	6800      	ldr	r0, [r0, #0]
 800d020:	9301      	str	r3, [sp, #4]
 800d022:	f7ff fe41 	bl	800cca8 <_vfiprintf_r>
 800d026:	b002      	add	sp, #8
 800d028:	f85d eb04 	ldr.w	lr, [sp], #4
 800d02c:	b003      	add	sp, #12
 800d02e:	4770      	bx	lr
 800d030:	20000024 	.word	0x20000024

0800d034 <_fstat_r>:
 800d034:	b538      	push	{r3, r4, r5, lr}
 800d036:	4d07      	ldr	r5, [pc, #28]	; (800d054 <_fstat_r+0x20>)
 800d038:	2300      	movs	r3, #0
 800d03a:	4604      	mov	r4, r0
 800d03c:	4608      	mov	r0, r1
 800d03e:	4611      	mov	r1, r2
 800d040:	602b      	str	r3, [r5, #0]
 800d042:	f7f5 ff6a 	bl	8002f1a <_fstat>
 800d046:	1c43      	adds	r3, r0, #1
 800d048:	d102      	bne.n	800d050 <_fstat_r+0x1c>
 800d04a:	682b      	ldr	r3, [r5, #0]
 800d04c:	b103      	cbz	r3, 800d050 <_fstat_r+0x1c>
 800d04e:	6023      	str	r3, [r4, #0]
 800d050:	bd38      	pop	{r3, r4, r5, pc}
 800d052:	bf00      	nop
 800d054:	20000884 	.word	0x20000884

0800d058 <_isatty_r>:
 800d058:	b538      	push	{r3, r4, r5, lr}
 800d05a:	4d06      	ldr	r5, [pc, #24]	; (800d074 <_isatty_r+0x1c>)
 800d05c:	2300      	movs	r3, #0
 800d05e:	4604      	mov	r4, r0
 800d060:	4608      	mov	r0, r1
 800d062:	602b      	str	r3, [r5, #0]
 800d064:	f7f5 ff69 	bl	8002f3a <_isatty>
 800d068:	1c43      	adds	r3, r0, #1
 800d06a:	d102      	bne.n	800d072 <_isatty_r+0x1a>
 800d06c:	682b      	ldr	r3, [r5, #0]
 800d06e:	b103      	cbz	r3, 800d072 <_isatty_r+0x1a>
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	bd38      	pop	{r3, r4, r5, pc}
 800d074:	20000884 	.word	0x20000884

0800d078 <_lseek_r>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	4d07      	ldr	r5, [pc, #28]	; (800d098 <_lseek_r+0x20>)
 800d07c:	4604      	mov	r4, r0
 800d07e:	4608      	mov	r0, r1
 800d080:	4611      	mov	r1, r2
 800d082:	2200      	movs	r2, #0
 800d084:	602a      	str	r2, [r5, #0]
 800d086:	461a      	mov	r2, r3
 800d088:	f7f5 ff62 	bl	8002f50 <_lseek>
 800d08c:	1c43      	adds	r3, r0, #1
 800d08e:	d102      	bne.n	800d096 <_lseek_r+0x1e>
 800d090:	682b      	ldr	r3, [r5, #0]
 800d092:	b103      	cbz	r3, 800d096 <_lseek_r+0x1e>
 800d094:	6023      	str	r3, [r4, #0]
 800d096:	bd38      	pop	{r3, r4, r5, pc}
 800d098:	20000884 	.word	0x20000884

0800d09c <__ascii_mbtowc>:
 800d09c:	b082      	sub	sp, #8
 800d09e:	b901      	cbnz	r1, 800d0a2 <__ascii_mbtowc+0x6>
 800d0a0:	a901      	add	r1, sp, #4
 800d0a2:	b142      	cbz	r2, 800d0b6 <__ascii_mbtowc+0x1a>
 800d0a4:	b14b      	cbz	r3, 800d0ba <__ascii_mbtowc+0x1e>
 800d0a6:	7813      	ldrb	r3, [r2, #0]
 800d0a8:	600b      	str	r3, [r1, #0]
 800d0aa:	7812      	ldrb	r2, [r2, #0]
 800d0ac:	1e10      	subs	r0, r2, #0
 800d0ae:	bf18      	it	ne
 800d0b0:	2001      	movne	r0, #1
 800d0b2:	b002      	add	sp, #8
 800d0b4:	4770      	bx	lr
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	e7fb      	b.n	800d0b2 <__ascii_mbtowc+0x16>
 800d0ba:	f06f 0001 	mvn.w	r0, #1
 800d0be:	e7f8      	b.n	800d0b2 <__ascii_mbtowc+0x16>

0800d0c0 <memmove>:
 800d0c0:	4288      	cmp	r0, r1
 800d0c2:	b510      	push	{r4, lr}
 800d0c4:	eb01 0402 	add.w	r4, r1, r2
 800d0c8:	d902      	bls.n	800d0d0 <memmove+0x10>
 800d0ca:	4284      	cmp	r4, r0
 800d0cc:	4623      	mov	r3, r4
 800d0ce:	d807      	bhi.n	800d0e0 <memmove+0x20>
 800d0d0:	1e43      	subs	r3, r0, #1
 800d0d2:	42a1      	cmp	r1, r4
 800d0d4:	d008      	beq.n	800d0e8 <memmove+0x28>
 800d0d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0de:	e7f8      	b.n	800d0d2 <memmove+0x12>
 800d0e0:	4402      	add	r2, r0
 800d0e2:	4601      	mov	r1, r0
 800d0e4:	428a      	cmp	r2, r1
 800d0e6:	d100      	bne.n	800d0ea <memmove+0x2a>
 800d0e8:	bd10      	pop	{r4, pc}
 800d0ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0f2:	e7f7      	b.n	800d0e4 <memmove+0x24>

0800d0f4 <_realloc_r>:
 800d0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f8:	4680      	mov	r8, r0
 800d0fa:	4614      	mov	r4, r2
 800d0fc:	460e      	mov	r6, r1
 800d0fe:	b921      	cbnz	r1, 800d10a <_realloc_r+0x16>
 800d100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d104:	4611      	mov	r1, r2
 800d106:	f7fd b987 	b.w	800a418 <_malloc_r>
 800d10a:	b92a      	cbnz	r2, 800d118 <_realloc_r+0x24>
 800d10c:	f7fd f918 	bl	800a340 <_free_r>
 800d110:	4625      	mov	r5, r4
 800d112:	4628      	mov	r0, r5
 800d114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d118:	f000 f842 	bl	800d1a0 <_malloc_usable_size_r>
 800d11c:	4284      	cmp	r4, r0
 800d11e:	4607      	mov	r7, r0
 800d120:	d802      	bhi.n	800d128 <_realloc_r+0x34>
 800d122:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d126:	d812      	bhi.n	800d14e <_realloc_r+0x5a>
 800d128:	4621      	mov	r1, r4
 800d12a:	4640      	mov	r0, r8
 800d12c:	f7fd f974 	bl	800a418 <_malloc_r>
 800d130:	4605      	mov	r5, r0
 800d132:	2800      	cmp	r0, #0
 800d134:	d0ed      	beq.n	800d112 <_realloc_r+0x1e>
 800d136:	42bc      	cmp	r4, r7
 800d138:	4622      	mov	r2, r4
 800d13a:	4631      	mov	r1, r6
 800d13c:	bf28      	it	cs
 800d13e:	463a      	movcs	r2, r7
 800d140:	f7ff f878 	bl	800c234 <memcpy>
 800d144:	4631      	mov	r1, r6
 800d146:	4640      	mov	r0, r8
 800d148:	f7fd f8fa 	bl	800a340 <_free_r>
 800d14c:	e7e1      	b.n	800d112 <_realloc_r+0x1e>
 800d14e:	4635      	mov	r5, r6
 800d150:	e7df      	b.n	800d112 <_realloc_r+0x1e>
	...

0800d154 <_read_r>:
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	4d07      	ldr	r5, [pc, #28]	; (800d174 <_read_r+0x20>)
 800d158:	4604      	mov	r4, r0
 800d15a:	4608      	mov	r0, r1
 800d15c:	4611      	mov	r1, r2
 800d15e:	2200      	movs	r2, #0
 800d160:	602a      	str	r2, [r5, #0]
 800d162:	461a      	mov	r2, r3
 800d164:	f7f5 fe94 	bl	8002e90 <_read>
 800d168:	1c43      	adds	r3, r0, #1
 800d16a:	d102      	bne.n	800d172 <_read_r+0x1e>
 800d16c:	682b      	ldr	r3, [r5, #0]
 800d16e:	b103      	cbz	r3, 800d172 <_read_r+0x1e>
 800d170:	6023      	str	r3, [r4, #0]
 800d172:	bd38      	pop	{r3, r4, r5, pc}
 800d174:	20000884 	.word	0x20000884

0800d178 <__ascii_wctomb>:
 800d178:	b149      	cbz	r1, 800d18e <__ascii_wctomb+0x16>
 800d17a:	2aff      	cmp	r2, #255	; 0xff
 800d17c:	bf85      	ittet	hi
 800d17e:	238a      	movhi	r3, #138	; 0x8a
 800d180:	6003      	strhi	r3, [r0, #0]
 800d182:	700a      	strbls	r2, [r1, #0]
 800d184:	f04f 30ff 	movhi.w	r0, #4294967295
 800d188:	bf98      	it	ls
 800d18a:	2001      	movls	r0, #1
 800d18c:	4770      	bx	lr
 800d18e:	4608      	mov	r0, r1
 800d190:	4770      	bx	lr

0800d192 <abort>:
 800d192:	b508      	push	{r3, lr}
 800d194:	2006      	movs	r0, #6
 800d196:	f000 f833 	bl	800d200 <raise>
 800d19a:	2001      	movs	r0, #1
 800d19c:	f7f5 fe6e 	bl	8002e7c <_exit>

0800d1a0 <_malloc_usable_size_r>:
 800d1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1a4:	1f18      	subs	r0, r3, #4
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	bfbc      	itt	lt
 800d1aa:	580b      	ldrlt	r3, [r1, r0]
 800d1ac:	18c0      	addlt	r0, r0, r3
 800d1ae:	4770      	bx	lr

0800d1b0 <_raise_r>:
 800d1b0:	291f      	cmp	r1, #31
 800d1b2:	b538      	push	{r3, r4, r5, lr}
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	460d      	mov	r5, r1
 800d1b8:	d904      	bls.n	800d1c4 <_raise_r+0x14>
 800d1ba:	2316      	movs	r3, #22
 800d1bc:	6003      	str	r3, [r0, #0]
 800d1be:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1c6:	b112      	cbz	r2, 800d1ce <_raise_r+0x1e>
 800d1c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1cc:	b94b      	cbnz	r3, 800d1e2 <_raise_r+0x32>
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f000 f830 	bl	800d234 <_getpid_r>
 800d1d4:	462a      	mov	r2, r5
 800d1d6:	4601      	mov	r1, r0
 800d1d8:	4620      	mov	r0, r4
 800d1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1de:	f000 b817 	b.w	800d210 <_kill_r>
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d00a      	beq.n	800d1fc <_raise_r+0x4c>
 800d1e6:	1c59      	adds	r1, r3, #1
 800d1e8:	d103      	bne.n	800d1f2 <_raise_r+0x42>
 800d1ea:	2316      	movs	r3, #22
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	2001      	movs	r0, #1
 800d1f0:	e7e7      	b.n	800d1c2 <_raise_r+0x12>
 800d1f2:	2400      	movs	r4, #0
 800d1f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	4798      	blx	r3
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	e7e0      	b.n	800d1c2 <_raise_r+0x12>

0800d200 <raise>:
 800d200:	4b02      	ldr	r3, [pc, #8]	; (800d20c <raise+0xc>)
 800d202:	4601      	mov	r1, r0
 800d204:	6818      	ldr	r0, [r3, #0]
 800d206:	f7ff bfd3 	b.w	800d1b0 <_raise_r>
 800d20a:	bf00      	nop
 800d20c:	20000024 	.word	0x20000024

0800d210 <_kill_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d07      	ldr	r5, [pc, #28]	; (800d230 <_kill_r+0x20>)
 800d214:	2300      	movs	r3, #0
 800d216:	4604      	mov	r4, r0
 800d218:	4608      	mov	r0, r1
 800d21a:	4611      	mov	r1, r2
 800d21c:	602b      	str	r3, [r5, #0]
 800d21e:	f7f5 fe1d 	bl	8002e5c <_kill>
 800d222:	1c43      	adds	r3, r0, #1
 800d224:	d102      	bne.n	800d22c <_kill_r+0x1c>
 800d226:	682b      	ldr	r3, [r5, #0]
 800d228:	b103      	cbz	r3, 800d22c <_kill_r+0x1c>
 800d22a:	6023      	str	r3, [r4, #0]
 800d22c:	bd38      	pop	{r3, r4, r5, pc}
 800d22e:	bf00      	nop
 800d230:	20000884 	.word	0x20000884

0800d234 <_getpid_r>:
 800d234:	f7f5 be0a 	b.w	8002e4c <_getpid>

0800d238 <_init>:
 800d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23a:	bf00      	nop
 800d23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d23e:	bc08      	pop	{r3}
 800d240:	469e      	mov	lr, r3
 800d242:	4770      	bx	lr

0800d244 <_fini>:
 800d244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d246:	bf00      	nop
 800d248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d24a:	bc08      	pop	{r3}
 800d24c:	469e      	mov	lr, r3
 800d24e:	4770      	bx	lr
